#
# PySNMP MIB module IEEE8021-TEIPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-TEIPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ieee8021BridgeBaseComponentId, = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId")
IEEE8021TeipsIpgConfigActiveRequests, IEEE8021TeipsIpgConfigAdmin, IEEE8021TeipsIpgid, IEEE8021PbbTeTSidId, ieee802dot1mibs, IEEE8021BridgePortNumber = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021TeipsIpgConfigActiveRequests", "IEEE8021TeipsIpgConfigAdmin", "IEEE8021TeipsIpgid", "IEEE8021PbbTeTSidId", "ieee802dot1mibs", "IEEE8021BridgePortNumber")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, MibIdentifier, Gauge32, NotificationType, TimeTicks, Counter64, Bits, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "MibIdentifier", "Gauge32", "NotificationType", "TimeTicks", "Counter64", "Bits", "Counter32", "Integer32")
RowStatus, TextualConvention, StorageType, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "StorageType", "DisplayString", "TruthValue")
ieee8021TeipsMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 24))
ieee8021TeipsMib.setRevisions(('2011-08-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021TeipsMib.setRevisionsDescriptions(('Version 1 of the TEIPS MIB module based upon IEEE 802.1Qbf',))
if mibBuilder.loadTexts: ieee8021TeipsMib.setLastUpdated('201108170000Z')
if mibBuilder.loadTexts: ieee8021TeipsMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021TeipsMib.setContactInfo('WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: stds-802-1@ieee.org Contact: Bob Sultan c/o Tony Jeffree, IEEE 802.1 Working Group Chair Postal: IEEE Standards Board 445 Hoes Lane P.O. Box 1331 Piscataway, NJ 08855-1331 USA E-mail: tony@jeffree.co.uk ')
if mibBuilder.loadTexts: ieee8021TeipsMib.setDescription('Copyright (C) IEEE. All Rights Reserved This MIB module is part of IEEE 802.1Q; See the IEEE 802.1Q standard for full legal notices. Unless otherwise indicated, the references in this MIB module are to IEEE 802.1Q-2011 as amended by the following standards: IEEE 802.1az IEEE 802.1bb IEEE 802.1bc IEEE 802.1be')
ieee8021TeipsNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 0))
ieee8021TeipsObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 1))
ieee8021TeipsConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 2))
ieee8021TeipsIpgTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 1), )
if mibBuilder.loadTexts: ieee8021TeipsIpgTable.setReference('12.20.1')
if mibBuilder.loadTexts: ieee8021TeipsIpgTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgTable.setDescription('The IPG table. Each entry in this table corresponds to an Infrastructure Protection Group (IPG) associated with a PBB supporting Infrastructure Protection Switching (IPS).')
ieee8021TeipsIpgEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgid"))
if mibBuilder.loadTexts: ieee8021TeipsIpgEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgEntry.setDescription('The IPG table entry.')
ieee8021TeipsIpgid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 1), IEEE8021TeipsIpgid())
if mibBuilder.loadTexts: ieee8021TeipsIpgid.setReference('12.20.1.1.3 a')
if mibBuilder.loadTexts: ieee8021TeipsIpgid.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgid.setDescription('Uniquely identifies an IPG within the PBB.')
ieee8021TeipsIpgWorkingMA = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgWorkingMA.setReference('12.20.1.1.3 b)')
if mibBuilder.loadTexts: ieee8021TeipsIpgWorkingMA.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgWorkingMA.setDescription("Identifies the Segment MA that corresponds to the IPG's working entity. The MA index in this column must hold a value that is the value of dot1agCfmStackMaIndex column for some entry in the dot1agCfmStackTable before the RowStatus for this row can be set to Active. Furthermore, this column may not be modified when the RowStatus for this row is Active.")
ieee8021TeipsIpgProtectionMA = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgProtectionMA.setReference('12.20.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021TeipsIpgProtectionMA.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgProtectionMA.setDescription("Identifies the Segment MA that corresponds to the IPG's protection entity. The MA index in this column must hold a value that is the value of dot1agCfmStackMaIndex column for some entry in the dot1agCfmStackTable before the RowStatus for this row can be set to Active. Furthermore, this column may not be modified when the RowStatus for this row is Active.")
ieee8021TeipsIpgWorkingPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 4), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgWorkingPortNumber.setReference('12.20.2.1.3 b)')
if mibBuilder.loadTexts: ieee8021TeipsIpgWorkingPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgWorkingPortNumber.setDescription('Identifies the local Port associated with the IPG Working Segment.')
ieee8021TeipsIpgProtectionPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 5), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgProtectionPortNumber.setReference('12.20.2.1.3 c)')
if mibBuilder.loadTexts: ieee8021TeipsIpgProtectionPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgProtectionPortNumber.setDescription('Identifies the local Port associated with the IPG Protection Segment.')
ieee8021TeipsIpgStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgStorageType.setDescription('This object indicates the persistence of this entry. All read-create columns must be writable if this column is set to permanent.')
ieee8021TeipsIpgRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgRowStatus.setReference('12.20.1.2')
if mibBuilder.loadTexts: ieee8021TeipsIpgRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgRowStatus.setDescription('The status of this row. The writable columns in a row cannot be changed if the row is active. The TeipsIpgWorkingMA and TeipsIpgProtectionMA columns must be specified before the row can be activated.')
ieee8021TeipsTesiTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 2), )
if mibBuilder.loadTexts: ieee8021TeipsTesiTable.setReference('12.20.2.1.3 e)')
if mibBuilder.loadTexts: ieee8021TeipsTesiTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsTesiTable.setDescription('The IPG TE-SID table contains identifies the TE service instances associated with an IPG.')
ieee8021TeipsTesiEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1), ).setIndexNames((0, "IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgid"), (0, "IEEE8021-TEIPS-MIB", "ieee8021TeipsTesiIndex"))
if mibBuilder.loadTexts: ieee8021TeipsTesiEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsTesiEntry.setDescription('The TE-IPS TESI entry. Each entry identifies a TESI associated with an IPG.')
ieee8021TeipsTesiIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ieee8021TeipsTesiIndex.setReference('12.20.2.1.3 e')
if mibBuilder.loadTexts: ieee8021TeipsTesiIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsTesiIndex.setDescription('This is an identifier, of local signifigance to a particular PBB-TE TE-SID associated with an IPG.')
ieee8021TeipsTesiId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 2), IEEE8021PbbTeTSidId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsTesiId.setReference('12.20.2.1.3 e')
if mibBuilder.loadTexts: ieee8021TeipsTesiId.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsTesiId.setDescription('This column holds the TESI identifier corresponding to a TE service instance associated with an IPG.')
ieee8021TeipsTesiStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsTesiStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsTesiStorageType.setDescription('This object indicates the persistence of this entry. All read-create columns must be writable for permanent rows.')
ieee8021TeipsTesiRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsTesiRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsTesiRowStatus.setDescription('This column holds the status for this row. When the status is active, no columns of this table may be modified. All columns must have a valid value before the row can be activated.')
ieee8021TeipsCandidatePsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 3), )
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsTable.setReference('12.20.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsTable.setDescription('The Candidate PS table lists, in priority order, from highest priority to lowest priority, the Maintenance Associations corresponding to candidate Protection Segments associated with an IPG.')
ieee8021TeipsCandidatePsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1), ).setIndexNames((0, "IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgid"), (0, "IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsIndex"))
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsEntry.setDescription('A Candidate PS entry. Each entry identifies a candidate Protection Segment associated with an IPG.')
ieee8021TeipsCandidatePsIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsIndex.setReference('12.20.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsIndex.setDescription('This is an identifier, of local signifigance to a particular candidate Protection Segment associated with an IPG.')
ieee8021TeipsCandidatePsMA = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsMA.setReference('12.20.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsMA.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsMA.setDescription('This column holds the candidate Protection Segment MA corresponding to a candidate Protection Segment associated with an IPG.')
ieee8021TeipsCandidatePsPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 3), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsPort.setReference('12.20.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsPort.setDescription('This column holds the Port Number corresponding to the candidate Protection Segment associated with an IPG.')
ieee8021TeipsCandidatePsOper = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsOper.setReference('12.20.2.1.3 d)')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsOper.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsOper.setDescription('This column indicates whether or not the candidate Protection Segment is operational.')
ieee8021TeipsCandidatePsStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsStorageType.setDescription('This object indicates the persistence of this entry. All read-create columns must be writable for permanent rows.')
ieee8021TeipsCandidatePsRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsRowStatus.setDescription('This column holds the status for this row. When the status is active, no columns of this table may be modified. All columns must have a valid value before the row can be activated.')
ieee8021TeipsIpgConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 4), )
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigTable.setReference('12.20.2.1.3 f,g,h,i,j,k)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigTable.setDescription('The PBB-TE IPS IPG config table contains configuration and status information for each IPG configured in the system. Entries in this table are created implicitly by the creation of entries in the ieee8021TeipsIpgTable.')
ieee8021TeipsIpgConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgid"))
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigEntry.setDescription('The IPG confguration table entry. Rows are created in this table implicitly when a row is added to the ieee8021TeipsIpgTable.')
ieee8021TeipsIpgConfigState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("workingSegment", 1), ("protectionSegment", 2), ("waitToRestore", 3), ("protAdmin", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigState.setReference('12.20.2.1.3 f)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigState.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigState.setDescription('This column indicates the current state of the protection switching state machine for an IPG. The value can be one of the following: workingSegment(1) The protection switching state machine is in the WORKING_PATH state. protectionSegment(2) The protection switching state machine is in the PROTECTION_PATH state. waitToRestore(3) The protection switching state machine is in the WTR state. protAdmin(4) The protection switching state machine is in the PROT_ADMIN state.')
ieee8021TeipsIpgConfigCommandStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 2), IEEE8021TeipsIpgConfigAdmin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandStatus.setReference('12.20.2.1.3 f)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandStatus.setDescription('This column indicates the status of administrative commands within the protection group. It reflects the current operational administrative command being acted upon by the IPG.')
ieee8021TeipsIpgConfigCommandLast = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 3), IEEE8021TeipsIpgConfigAdmin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandLast.setReference('12.20.2.1.3 f)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandLast.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandLast.setDescription('This column indicates the last attempted administrative command applied to the IPG. It is changed whenever a write is made to the CommandAdmin column of this table and is essentially record of the last attempted administrative operation.')
ieee8021TeipsIpgConfigCommandAdmin = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 4), IEEE8021TeipsIpgConfigAdmin().clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandAdmin.setReference('12.20.2.1.3 f')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandAdmin.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigCommandAdmin.setDescription('This column is used by the operator to request that the IPG state machine perform some administrative operation. The operator requests a command by writing the command value to this column. The state machine indicates the command that it is performing by setting the value of the CommandStatus column of this table. This column always reads back as clear(1).')
ieee8021TeipsIpgConfigActiveRequests = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 5), IEEE8021TeipsIpgConfigActiveRequests()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigActiveRequests.setReference('12.20.2.1.3 f)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigActiveRequests.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigActiveRequests.setDescription('This column shows the status of active requests associated with the IPG.')
ieee8021TeipsIpgConfigWTR = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 12), )).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigWTR.setReference('12.20.2.1.3 h)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigWTR.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigWTR.setDescription('This column is used to configure the wait-to-restore timer for the IPG operation. The timer may be configured in steps of 1 minute between 5 and 12 minutes, the default being 5. Additionally, the value 0 is used to indicate that the IPG is to operate non-revertively. The value 0 is not permitted if the IPG is configured for M:1 IPS operation.')
ieee8021TeipsIpgConfigHoldOff = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('deciseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigHoldOff.setReference('12.20.2.1.3 i)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigHoldOff.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigHoldOff.setDescription('This column is used to configure the hold off timer. The purpose is to allow IPS to fix the problem before a higher-layer mechanism, such as PBB-TE TESI protection, is invoked or to allow an inner IPG to fix the problem before IPS is invoked by the outer IPG when IPGs are nested. The hold off timer has a period of from 0 to 10 seconds, the default being 0, with a 100ms granularity.')
ieee8021TeipsIpgM1ConfigState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("psAssigned", 1), ("segmentOk", 2), ("segmentFailed", 3), ("assignNewPs", 4), ("revertToBetterPs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021TeipsIpgM1ConfigState.setReference('12.20.2.1.3 j)')
if mibBuilder.loadTexts: ieee8021TeipsIpgM1ConfigState.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgM1ConfigState.setDescription('This column indicates the current state of the M:1 protection switching state machine for an IPG if M:1 IPS is supported. The value can be one of the following: psAssigned(1) The protection switching state machine is in the PS_ASSIGNED state. segmentOk(2) The protection switching state machine is in the SEGMENT_OK state. segmentFailed(3) The protection switching state machine is in the SEGMENT_FAILED state. assignNewPs(4) The protection switching state machine is in the ASSIGN_NEW_PS state. revertToBetterPs(5) The protection switching state machine is in the REVERT_T0_BETTER_PS state.')
ieee8021TeipsIpgConfigMWTR = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 12), )).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigMWTR.setReference('12.20.2.1.3 k)')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigMWTR.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigMWTR.setDescription('This column is used to configure the M:1 wait-to-restore timer for the IPG operation if M:1 protection is supported. The timer may be configured in steps of 1 minute between 5 and 12 minutes, the default being 5. Additionally, the value 0 is used to indicate that the IPG is to operate non-revertively.')
ieee8021TeipsIpgConfigNotifyEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigNotifyEnable.setDescription('This column is used to enable or disable transmission of ieee8021TeipsIpgAdminFailure notifications. These notifications are generated whenever an administrative command cannot be performed by the IPG.')
ieee8021TeipsIpgConfigStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 4, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigStorageType.setDescription('This object indicates the persistence of this entry. For permanent objects the ieee8021TeipsIpgConfigCommandAdmin column must be writable.')
ieee8021TeipsIpgAdminFailure = NotificationType((1, 3, 111, 2, 802, 1, 1, 24, 0, 1)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigState"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigCommandStatus"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigCommandLast"))
if mibBuilder.loadTexts: ieee8021TeipsIpgAdminFailure.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgAdminFailure.setDescription('An IPG generates this notification whenever an adminisistrative command cannot be executed by the IPS state machine. For example, when a requested manual switch cannot be performed because of a signal failure condition. The management entity receiving the notification can identify the system from the network source address of the notification and can identify the IPG by the indices of the OID of the ieee8021TeipsIpgConfigState variable in the notification: ieee8021BridgeBaseComponentId - Identifies the component on the bridge where the protection group is configured. ieee8021TeipsIpgid - The ID of the protection group. ')
ieee8021TeipsCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 2, 1))
ieee8021TeipsGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 2, 2))
ieee8021TeipsIpgGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 1)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgWorkingMA"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgProtectionMA"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgWorkingPortNumber"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgProtectionPortNumber"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgStorageType"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsIpgGroup = ieee8021TeipsIpgGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgGroup.setDescription('Objects for the IPG group.')
ieee8021TeipsCandidatePsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 2)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsMA"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsPort"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsOper"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsStorageType"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsCandidatePsGroup = ieee8021TeipsCandidatePsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCandidatePsGroup.setDescription('Objects for the Candidate PS group.')
ieee8021TeipsIpgTesiGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 3)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsTesiId"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsTesiStorageType"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsTesiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsIpgTesiGroup = ieee8021TeipsIpgTesiGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgTesiGroup.setDescription('Objects for the IPG Tuple group.')
ieee8021TeipsIpgConfigManGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 4)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigState"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigCommandStatus"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigCommandLast"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigCommandAdmin"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigActiveRequests"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigNotifyEnable"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsIpgConfigManGroup = ieee8021TeipsIpgConfigManGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigManGroup.setDescription('Mandatory objects for the TeipsConfiguration group.')
ieee8021TeipsIpgConfigOptGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 5)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigWTR"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigMWTR"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgM1ConfigState"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigHoldOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsIpgConfigOptGroup = ieee8021TeipsIpgConfigOptGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsIpgConfigOptGroup.setDescription('Optional 0bjects for the TeipsConfiguration group.')
ieee8021TeipsNotificationsGroup = NotificationGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 6)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgAdminFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsNotificationsGroup = ieee8021TeipsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsNotificationsGroup.setDescription('Objects for the notifications group.')
ieee8021TeipsCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 1)).setObjects(("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgGroup"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgTesiGroup"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigManGroup"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsNotificationsGroup"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsIpgConfigOptGroup"), ("IEEE8021-TEIPS-MIB", "ieee8021TeipsCandidatePsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021TeipsCompliance = ieee8021TeipsCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021TeipsCompliance.setDescription('The compliance statement for support of the TEIPS MIB module.')
mibBuilder.exportSymbols("IEEE8021-TEIPS-MIB", ieee8021TeipsIpgProtectionMA=ieee8021TeipsIpgProtectionMA, ieee8021TeipsIpgid=ieee8021TeipsIpgid, ieee8021TeipsCandidatePsRowStatus=ieee8021TeipsCandidatePsRowStatus, ieee8021TeipsIpgConfigTable=ieee8021TeipsIpgConfigTable, ieee8021TeipsIpgGroup=ieee8021TeipsIpgGroup, ieee8021TeipsIpgConfigEntry=ieee8021TeipsIpgConfigEntry, ieee8021TeipsTesiIndex=ieee8021TeipsTesiIndex, ieee8021TeipsCandidatePsOper=ieee8021TeipsCandidatePsOper, ieee8021TeipsTesiTable=ieee8021TeipsTesiTable, PYSNMP_MODULE_ID=ieee8021TeipsMib, ieee8021TeipsIpgStorageType=ieee8021TeipsIpgStorageType, ieee8021TeipsIpgConfigStorageType=ieee8021TeipsIpgConfigStorageType, ieee8021TeipsCompliance=ieee8021TeipsCompliance, ieee8021TeipsCompliances=ieee8021TeipsCompliances, ieee8021TeipsIpgTesiGroup=ieee8021TeipsIpgTesiGroup, ieee8021TeipsIpgM1ConfigState=ieee8021TeipsIpgM1ConfigState, ieee8021TeipsCandidatePsEntry=ieee8021TeipsCandidatePsEntry, ieee8021TeipsIpgConfigWTR=ieee8021TeipsIpgConfigWTR, ieee8021TeipsCandidatePsTable=ieee8021TeipsCandidatePsTable, ieee8021TeipsMib=ieee8021TeipsMib, ieee8021TeipsCandidatePsMA=ieee8021TeipsCandidatePsMA, ieee8021TeipsConformance=ieee8021TeipsConformance, ieee8021TeipsNotifications=ieee8021TeipsNotifications, ieee8021TeipsIpgConfigState=ieee8021TeipsIpgConfigState, ieee8021TeipsCandidatePsStorageType=ieee8021TeipsCandidatePsStorageType, ieee8021TeipsIpgTable=ieee8021TeipsIpgTable, ieee8021TeipsTesiId=ieee8021TeipsTesiId, ieee8021TeipsCandidatePsPort=ieee8021TeipsCandidatePsPort, ieee8021TeipsGroups=ieee8021TeipsGroups, ieee8021TeipsCandidatePsGroup=ieee8021TeipsCandidatePsGroup, ieee8021TeipsIpgConfigNotifyEnable=ieee8021TeipsIpgConfigNotifyEnable, ieee8021TeipsIpgAdminFailure=ieee8021TeipsIpgAdminFailure, ieee8021TeipsIpgWorkingPortNumber=ieee8021TeipsIpgWorkingPortNumber, ieee8021TeipsNotificationsGroup=ieee8021TeipsNotificationsGroup, ieee8021TeipsIpgRowStatus=ieee8021TeipsIpgRowStatus, ieee8021TeipsIpgConfigCommandLast=ieee8021TeipsIpgConfigCommandLast, ieee8021TeipsTesiStorageType=ieee8021TeipsTesiStorageType, ieee8021TeipsIpgConfigOptGroup=ieee8021TeipsIpgConfigOptGroup, ieee8021TeipsTesiRowStatus=ieee8021TeipsTesiRowStatus, ieee8021TeipsIpgProtectionPortNumber=ieee8021TeipsIpgProtectionPortNumber, ieee8021TeipsIpgConfigCommandStatus=ieee8021TeipsIpgConfigCommandStatus, ieee8021TeipsObjects=ieee8021TeipsObjects, ieee8021TeipsIpgEntry=ieee8021TeipsIpgEntry, ieee8021TeipsIpgConfigActiveRequests=ieee8021TeipsIpgConfigActiveRequests, ieee8021TeipsIpgConfigHoldOff=ieee8021TeipsIpgConfigHoldOff, ieee8021TeipsIpgConfigCommandAdmin=ieee8021TeipsIpgConfigCommandAdmin, ieee8021TeipsCandidatePsIndex=ieee8021TeipsCandidatePsIndex, ieee8021TeipsTesiEntry=ieee8021TeipsTesiEntry, ieee8021TeipsIpgConfigMWTR=ieee8021TeipsIpgConfigMWTR, ieee8021TeipsIpgWorkingMA=ieee8021TeipsIpgWorkingMA, ieee8021TeipsIpgConfigManGroup=ieee8021TeipsIpgConfigManGroup)
