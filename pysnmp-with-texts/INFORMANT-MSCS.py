#
# PySNMP MIB module INFORMANT-MSCS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-MSCS
# Produced by pysmi-0.3.4 at Wed May  1 13:53:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, MibIdentifier, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Counter64, Unsigned32, NotificationType, Counter32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "MibIdentifier", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Counter64", "Unsigned32", "NotificationType", "Counter32", "ObjectIdentity", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
InstanceName, informant, WtcsDisplayString = mibBuilder.importSymbols("WTCS", "InstanceName", "informant", "WtcsDisplayString")
mscs = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 31))
mscs.setRevisions(('2005-04-29 17:51',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mscs.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: mscs.setLastUpdated('200504291751Z')
if mibBuilder.loadTexts: mscs.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: mscs.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: mscs.setDescription('The MIB module for informant standard entities.')
mscsCluster = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1))
if mibBuilder.loadTexts: mscsCluster.setStatus('current')
if mibBuilder.loadTexts: mscsCluster.setDescription('The Cluster object enables operations on the cluster and provides access to all of the objects in the cluster.')
mscsClusterBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterBuildNumber.setStatus('current')
if mibBuilder.loadTexts: mscsClusterBuildNumber.setDescription('The BuildNumber property returns the build number of the operating system installed on the local node.')
mscsClusterHighestVersion = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterHighestVersion.setStatus('current')
if mibBuilder.loadTexts: mscsClusterHighestVersion.setDescription('The ClusterHighestVersion property returns a value containing the highest version of the Cluster service with which the current cluster is compatible. Long that receives the version value. The upper 16 bits of the value indicate the release number of the Cluster service. The lower 16 bits specify the build number of the Cluster service.')
mscsClusterLowestVersion = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterLowestVersion.setStatus('current')
if mibBuilder.loadTexts: mscsClusterLowestVersion.setDescription('The ClusterLowestVersion property returns a value containing the lowest version of the Cluster service with which the current cluster is compatible. Long that receives the version value. The upper 16 bits of the value indicate the release number of the Cluster service. The lower 16 bits specify the build number of the Cluster service.')
mscsClusterCSDVersion = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterCSDVersion.setStatus('current')
if mibBuilder.loadTexts: mscsClusterCSDVersion.setDescription('The CSDVersion property returns the number of the latest service pack installed on the local node.')
mscsClusterFlags = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterFlags.setStatus('current')
if mibBuilder.loadTexts: mscsClusterFlags.setDescription('The Flags property returns flags associated with the cluster version.')
mscsClusterMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterMajorVersion.setStatus('current')
if mibBuilder.loadTexts: mscsClusterMajorVersion.setDescription('The MajorVersion property returns the integer portion of the version number for the operating system installed on the local node.')
mscsClusterMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterMinorVersion.setStatus('current')
if mibBuilder.loadTexts: mscsClusterMinorVersion.setDescription('The MinorVersion property returns the decimal portion of the version of the operating system installed on the local node.')
mscsClusterMixedVersion = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterMixedVersion.setStatus('current')
if mibBuilder.loadTexts: mscsClusterMixedVersion.setDescription('The MixedVersion property indicates whether more than one version of the Cluster service is present in the cluster, a state described as mixed mode.')
mscsClusterName = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterName.setStatus('current')
if mibBuilder.loadTexts: mscsClusterName.setDescription('The Name property returns the name of the cluster.')
mscsClusterQuorumLogSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterQuorumLogSize.setStatus('current')
if mibBuilder.loadTexts: mscsClusterQuorumLogSize.setDescription('The QuorumLogSize property returns or sets the maximum size of the log file maintained by the quorum resource.')
mscsClusterQuorumPath = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterQuorumPath.setStatus('current')
if mibBuilder.loadTexts: mscsClusterQuorumPath.setDescription('The QuorumPath property retrieves or sets the path to the log file maintained by the quorum resource.')
mscsClusterVendorId = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterVendorId.setStatus('current')
if mibBuilder.loadTexts: mscsClusterVendorId.setDescription('The VendorId property returns vendor information about the Cluster service installed on the local node.')
mscsClusterDefaultNetworkRole = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("internalUse", 1), ("clientAccess", 2), ("internalAndClient", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterDefaultNetworkRole.setStatus('current')
if mibBuilder.loadTexts: mscsClusterDefaultNetworkRole.setDescription('The DefaultNetworkRole property specifies the Role that the cluster automatically assigns to any newly discovered or created network.')
mscsClusterDescription = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 31, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterDescription.setStatus('current')
if mibBuilder.loadTexts: mscsClusterDescription.setDescription('The Description property stores administrative comments about the cluster. The following table summarizes the attributes of the Description property.')
mscsClusterPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 2), )
if mibBuilder.loadTexts: mscsClusterPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: mscsClusterPropertiesTable.setDescription('A list of properties associated with this cluster.')
mscsClusterPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 2, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsClusterPropertiesIndex"))
if mibBuilder.loadTexts: mscsClusterPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: mscsClusterPropertiesEntry.setDescription('Information on one particular property.')
mscsClusterPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: mscsClusterPropertiesIndex.setDescription('A unique value for each property.')
mscsClusterPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterPropertiesName.setStatus('current')
if mibBuilder.loadTexts: mscsClusterPropertiesName.setDescription('Returns the property name.')
mscsClusterPropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsClusterPropertiesValue.setStatus('current')
if mibBuilder.loadTexts: mscsClusterPropertiesValue.setDescription('Returns the property value as a string.')
mscsNetInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3), )
if mibBuilder.loadTexts: mscsNetInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceTable.setDescription('This collection provides access to the network interfaces in a cluster.')
mscsNetInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsNetInterfaceNameIndex"))
if mibBuilder.loadTexts: mscsNetInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceEntry.setDescription("Information about one particular 'ClusNetInterfaces'")
mscsNetInterfaceNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceNameIndex.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceNameIndex.setDescription('The index name is the same as the full name but truncated to 64 characters and made unique.')
mscsNetInterfaceNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceNameFull.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceNameFull.setDescription('The Name property provides the Clustering Service-generated name for the network interface.')
mscsNetInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("unavailable", 0), ("failed", 1), ("unreachable", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceState.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceState.setDescription('Indicates the current state of the network interface.')
mscsNetInterfaceAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceAdapter.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceAdapter.setDescription('The Adapter property provides the name that is used to uniquely identify the network interface in the cluster.')
mscsNetInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceAddress.setDescription('The Address property provides the primary network address that the node uses for the network interface.')
mscsNetInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceDescription.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceDescription.setDescription('The Description property provides comments about the network interface.')
mscsNetInterfaceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceNetwork.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceNetwork.setDescription('The Network property provides the name of the network to which the network interface is connected.')
mscsNetInterfaceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 3, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfaceNode.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfaceNode.setDescription('The Node property provides the name of the node in which the network interface is installed.')
mscsNetInterfacePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 4), )
if mibBuilder.loadTexts: mscsNetInterfacePropertiesTable.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfacePropertiesTable.setDescription('A list of properties associated with a network interface.')
mscsNetInterfacePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 4, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsNetInterfaceNameIndex"), (0, "INFORMANT-MSCS", "mscsNetInterfacePropertiesIndex"))
if mibBuilder.loadTexts: mscsNetInterfacePropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfacePropertiesEntry.setDescription('Information on one particular property.')
mscsNetInterfacePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfacePropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfacePropertiesIndex.setDescription('A unique value for each property.')
mscsNetInterfacePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 4, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfacePropertiesName.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfacePropertiesName.setDescription('Returns the property name.')
mscsNetInterfacePropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 4, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetInterfacePropertiesValue.setStatus('current')
if mibBuilder.loadTexts: mscsNetInterfacePropertiesValue.setDescription('Returns the property value as a string.')
mscsNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5), )
if mibBuilder.loadTexts: mscsNetworkTable.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkTable.setDescription('This collection provides access to the networks in a cluster.')
mscsNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsNetworkNameIndex"))
if mibBuilder.loadTexts: mscsNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkEntry.setDescription("Information about one particular 'ClusNetworks'")
mscsNetworkNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkNameIndex.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkNameIndex.setDescription('The index name is the same as the full name but truncated to 64 characters and made unique.')
mscsNetworkNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkNameFull.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkNameFull.setDescription('The Name property retrieves the name of a network.')
mscsNetworkNetInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkNetInterfaces.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkNetInterfaces.setDescription('The NetInterfaces property returns the list of network interface names associated with this network.')
mscsNetworkNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkNetworkID.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkNetworkID.setDescription('The NetworkID property returns the unique network identifier for a network.')
mscsNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("unavailable", 0), ("down", 1), ("partitioned", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkState.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkState.setDescription('Current state of the network.')
mscsNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkAddress.setDescription('The Address property provides the address for the entire network or subnet. The Address property does not specify the address of an individual node. The data is formatted as xxx.xxx.xxx.xxx where xxx represents a decimal number between 0 and 255.')
mscsNetworkAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkAddressMask.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkAddressMask.setDescription('The AddressMask property provides the mask that distinguishes the network and host portions of an address. The data in the AddressMask property is formatted as xxx.xxx.xxx.xxx where xxx represents a decimal number between 0 and 255.')
mscsNetworkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkDescription.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkDescription.setDescription('The Description property provides comments about the network.')
mscsNetworkRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unternalUse", 1), ("clientAccess", 2), ("internalAndClient", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkRole.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkRole.setDescription('The Role property provides the role of the network in the cluster.')
mscsNetworkPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 6), )
if mibBuilder.loadTexts: mscsNetworkPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkPropertiesTable.setDescription('A list of properties associated with a network.')
mscsNetworkPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 6, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsNetworkNameIndex"), (0, "INFORMANT-MSCS", "mscsNetworkPropertiesIndex"))
if mibBuilder.loadTexts: mscsNetworkPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkPropertiesEntry.setDescription('Information on one particular property.')
mscsNetworkPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkPropertiesIndex.setDescription('A unique value for each property.')
mscsNetworkPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 6, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkPropertiesName.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkPropertiesName.setDescription('Returns the property name.')
mscsNetworkPropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 6, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNetworkPropertiesValue.setStatus('current')
if mibBuilder.loadTexts: mscsNetworkPropertiesValue.setDescription('Returns the property value as a string.')
mscsNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7), )
if mibBuilder.loadTexts: mscsNodeTable.setStatus('current')
if mibBuilder.loadTexts: mscsNodeTable.setDescription('This collection provides access to the nodes in a cluster.')
mscsNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsNodeNameIndex"))
if mibBuilder.loadTexts: mscsNodeEntry.setStatus('current')
if mibBuilder.loadTexts: mscsNodeEntry.setDescription("Information about one particular 'ClusNodes'")
mscsNodeNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeNameIndex.setStatus('current')
if mibBuilder.loadTexts: mscsNodeNameIndex.setDescription('The index name is the same as the full name but truncated to 64 characters and made unique.')
mscsNodeNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeNameFull.setStatus('current')
if mibBuilder.loadTexts: mscsNodeNameFull.setDescription('The Name property retrieves the name of a node.')
mscsNodeNetInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeNetInterfaces.setStatus('current')
if mibBuilder.loadTexts: mscsNodeNetInterfaces.setDescription('The NetInterfaces property returns a ClusNodeNetInterfaces collection providing access to the network interfaces installed on a node.')
mscsNodeNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeNodeID.setStatus('current')
if mibBuilder.loadTexts: mscsNodeNodeID.setDescription('The NodeID property returns the unique identifier of a cluster node.')
mscsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("up", 0), ("down", 1), ("paused", 2), ("joining", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeState.setStatus('current')
if mibBuilder.loadTexts: mscsNodeState.setDescription('The State property retrieves the state of a node.')
mscsNodeBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeBuildNumber.setStatus('current')
if mibBuilder.loadTexts: mscsNodeBuildNumber.setDescription('The BuildNumber property specifies the build number of Windows NT or Windows 2000 installed on a node. The version of Windows installed on a node is fully described by the following properties: MajorVersion MinorVersion CSDVersion')
mscsNodeCSDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeCSDVersion.setStatus('current')
if mibBuilder.loadTexts: mscsNodeCSDVersion.setDescription('The CSDVersion property specifies the name of the most recent service pack installed on the node (if any). The version of Windows NT or Windows 2000 installed on a node is fully described by the following properties: MajorVersion MinorVersion BuildNumber')
mscsNodeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeDescription.setStatus('current')
if mibBuilder.loadTexts: mscsNodeDescription.setDescription('The Description property provides comments about the node.')
mscsNodeEnableEventLogReplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeEnableEventLogReplicate.setStatus('current')
if mibBuilder.loadTexts: mscsNodeEnableEventLogReplicate.setDescription("The EnableEventLogReplication property controls whether a node's system, application, and security event log entries are replicated in the event logs of all other cluster nodes. The EnableEventLogReplication property only affects events logged to a node's system, application, and security logs.")
mscsNodeMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeMajorVersion.setStatus('current')
if mibBuilder.loadTexts: mscsNodeMajorVersion.setDescription('The MajorVersion property specifies the integer component of the Windows NT or Windows 2000 version installed on the node. For example, the major version of Windows NT 4.0 is 4. The MajorVersion and MinorVersion properties represent a Windows NT or Windows 2000 version number of the form MajorVersion. MinorVersion. Further version information is provided by the CSDVersion and BuildNumber properties. Note that the MajorVersion and MinorVersion properties refer to the Windows NT or Windows 2000 version installed on the node, while the NodeHighestVersion property describes the version of the Cluster service installed on the node.')
mscsNodeMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeMinorVersion.setStatus('current')
if mibBuilder.loadTexts: mscsNodeMinorVersion.setDescription('The MinorVersion property specifies the decimal component of the Windows NT or Windows 2000 version installed on the node. For example, the minor version of Windows NT 4.0 is 0. The MajorVersion and MinorVersion properties represent a Windows NT or Windows 2000 version number of the form MajorVersion. MinorVersion. Further version information is provided by the CSDVersion and BuildNumber properties. Note that the MajorVersion and MinorVersion properties refer to the Windows NT or Windows 2000 version installed on the node, while the NodeHighestVersion property describes the version of the Cluster service installed on the node.')
mscsNodeHighestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeHighestVersion.setStatus('current')
if mibBuilder.loadTexts: mscsNodeHighestVersion.setDescription('The NodeHighestVersion property specifies the highest possible version of the Cluster service with which the node can join or communicate. The following table summarizes the attributes of the NodeHighestVersion property. The value of NodeHighestVersion is set when the Cluster service is installed or upgraded on a node. The upper 16 bits of the value store the version number, while the lower 16 bits describe the build number. For more information on how the Cluster service creates and uses version numbers, see Version Compatibility.')
mscsNodeLowestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodeLowestVersion.setStatus('current')
if mibBuilder.loadTexts: mscsNodeLowestVersion.setDescription('The NodeLowestVersion property specifies the lowest possible version of the Cluster service with which the node can join or communicate. The following table summarizes the attributes of the NodeLowestVersion property. The value of NodeHighestVersion is set when the Cluster service is installed or upgraded on a node. The upper 16 bits of the value store the version number, while the lower 16 bits describe the build number. For more information on how the Cluster service creates and uses version numbers, see Version Compatibility.')
mscsNodePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 8), )
if mibBuilder.loadTexts: mscsNodePropertiesTable.setStatus('current')
if mibBuilder.loadTexts: mscsNodePropertiesTable.setDescription('A list of properties associated with a node.')
mscsNodePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 8, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsNodeNameIndex"), (0, "INFORMANT-MSCS", "mscsNodePropertiesIndex"))
if mibBuilder.loadTexts: mscsNodePropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: mscsNodePropertiesEntry.setDescription('Information on one particular property.')
mscsNodePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodePropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: mscsNodePropertiesIndex.setDescription('A unique value for each property.')
mscsNodePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 8, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodePropertiesName.setStatus('current')
if mibBuilder.loadTexts: mscsNodePropertiesName.setDescription('Returns the property name.')
mscsNodePropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 8, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsNodePropertiesValue.setStatus('current')
if mibBuilder.loadTexts: mscsNodePropertiesValue.setDescription('Returns the property value as a string.')
mscsResGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9), )
if mibBuilder.loadTexts: mscsResGroupTable.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupTable.setDescription('This collection provides access to all cluster groups belonging either to a cluster or to a particular node in a cluster.')
mscsResGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsResGroupNameIndex"))
if mibBuilder.loadTexts: mscsResGroupEntry.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupEntry.setDescription("Information about one particular 'ClusResGroups'")
mscsResGroupNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupNameIndex.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupNameIndex.setDescription('The index name is the same as the full name but truncated to 64 characters and made unique.')
mscsResGroupNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupNameFull.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupNameFull.setDescription('The Name property retrieves or sets the name of a group.')
mscsResGroupOwnerNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupOwnerNode.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupOwnerNode.setDescription('The OwnerNode property returns the node currently hosting a group.')
mscsResGroupResources = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupResources.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupResources.setDescription('The Resources property provides access to the resources in a group.')
mscsResGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", -1), ("online", 0), ("offline", 1), ("failed", 2), ("partialOnline", 3), ("pending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupState.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupState.setDescription('The State property returns the state of a group.')
mscsResGroupAntiAffinityClassNam = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupAntiAffinityClassNam.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupAntiAffinityClassNam.setDescription("The AntiAffinityClassNames property is used to identify groups that should not be hosted on the same cluster node. A group's AntiAffinityClassNames property consists of zero or more arbitrary user-defined strings. If the AntiAffinityClassNames properties of two or more groups contain at least one identical string, the groups are said to be anti-affined. By default, all groups are affined (because their AntiAffinityClassNames property is NULL). When a group is moved and the destination node is not specified (during failover, for example), anti-affinity affects the algorithm used to determine the destination node as follows: 1. Using the preferred owner list of the group being moved, the Cluster service finds the next preferred node. 2. If the node is not hosting any group anti-affined with the group being moved, it is selected as the destination node. 3. If the next preferred available node is currently hosting a group anti-affined with the group being moved, the Cluster service moves to the next preferred available node in the preferred owner list. 4. If the only available nodes are hosting anti-affined groups, the Cluster service ignores anti-affinity and selects the next preferred available node as the destination node. Use this property to identify groups that should not be hosted on the same node. Generate a unique string value (such as a GUID) and add it to the AntiAffinityClassNames property of each group that should be anti-affined. Note that because of the behavior described in point 4 above, anti-affinity does not guarantee that groups will never be hosted by the same node. If you have an application that cannot support more than one instance per node under any circumstances, you need to create a resource DLL to enforce that limitation.")
mscsResGroupAutoFailbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("preventFailback", 0), ("allowFailback", 1), ("failbackTypeCount", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupAutoFailbackType.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupAutoFailbackType.setDescription('The AutoFailbackType property specifies whether the group should automatically be failed back to the node identified as its preferred owner when that node comes back online following a failover.')
mscsResGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupDescription.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupDescription.setDescription('The Description property provides comments about the group.')
mscsResGroupFailbackWindowEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupFailbackWindowEnd.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupFailbackWindowEnd.setDescription('The FailbackWindowEnd property provides the latest time that the group can be failed back to the node identified as its preferred owner node. -1 indicates that no failback window exists. ')
mscsResGroupFailbackWindowStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 23))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupFailbackWindowStart.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupFailbackWindowStart.setDescription('The FailbackWindowStart property provides the earliest time (that is, local time as kept by the cluster) that the group can be failed back to the node identified as its preferred owner node. -1 indicates that no failback window exists.')
mscsResGroupFailoverPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1193))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupFailoverPeriod.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupFailoverPeriod.setDescription('The FailoverPeriod property specifies a number of hours during which a maximum number of failover attempts, specified by FailoverThreshold, can occur. If the Cluster service exceeds the number of failover attempts specified by FailoverThreshold within the time interval specified by FailoverPeriod, it stops trying to fail over the group. For example, if FailoverThreshold is set to 2 and FailoverPeriod is set to 1, then a node can tolerate two failover attempts of the group within any 1-hour interval. More than three failover attempts can occur, as long as they occur over an interval that is greater than 1 hour. FailoverPeriod has a maximum value of 1193 hours. If a value for FailoverPeriod is not specified, the default value is 6 hours.')
mscsResGroupFailoverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupFailoverThreshold.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupFailoverThreshold.setDescription('The FailoverThreshold property specifies the maximum number of failover attempts that can be made on a group within a time interval defined by FailoverPeriod. If the Cluster service exceeds the number of failover attempts specified by FailoverThreshold within the time interval specified by FailoverPeriod, it stops trying to fail over the group. For example, if FailoverThreshold is set to 2 and RestartPeriod is set to 1, a node can tolerate 2 failover attempts of the group within any 1-hour interval. More than 3 failover attempts can occur, as long as they occur over an interval that is greater than 1 hour. If a value for FailoverThreshold is not specified, the default value is 10.')
mscsResGroupPersistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 9, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupPersistentState.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupPersistentState.setDescription("The PersistentState property specifies whether a group should be automatically brought online when the cluster forms. Set PersistentState to TRUE (1) for any group that should be automatically brought online when the cluster forms (for information on the form/join process, see Nodes). The default value is FALSE (0) which means that the group is left offline when the cluster forms. Resources use their group's PersistentState property when they lack a value for their own PersistentState property.")
mscsResGroupPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 10), )
if mibBuilder.loadTexts: mscsResGroupPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupPropertiesTable.setDescription('A list of properties associated with a resource group.')
mscsResGroupPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 10, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsResGroupNameIndex"), (0, "INFORMANT-MSCS", "mscsResGroupPropertiesIndex"))
if mibBuilder.loadTexts: mscsResGroupPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupPropertiesEntry.setDescription('Information on one particular property.')
mscsResGroupPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupPropertiesIndex.setDescription('A unique value for each property.')
mscsResGroupPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 10, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupPropertiesName.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupPropertiesName.setDescription('Returns the property name.')
mscsResGroupPropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 10, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResGroupPropertiesValue.setStatus('current')
if mibBuilder.loadTexts: mscsResGroupPropertiesValue.setDescription('Returns the property value as a string.')
mscsResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11), )
if mibBuilder.loadTexts: mscsResourceTable.setStatus('current')
if mibBuilder.loadTexts: mscsResourceTable.setDescription('This collection provides access to the resources that belong to a cluster.')
mscsResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsResourceNameIndex"))
if mibBuilder.loadTexts: mscsResourceEntry.setStatus('current')
if mibBuilder.loadTexts: mscsResourceEntry.setDescription("Information about one particular 'ClusResources'")
mscsResourceNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceNameIndex.setStatus('current')
if mibBuilder.loadTexts: mscsResourceNameIndex.setDescription('The index name is the same as the full name but truncated to 64 characters and made unique.')
mscsResourceNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceNameFull.setStatus('current')
if mibBuilder.loadTexts: mscsResourceNameFull.setDescription('The Name property retrieves or sets the name of a resource.')
mscsResourceDependencies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceDependencies.setStatus('current')
if mibBuilder.loadTexts: mscsResourceDependencies.setDescription('The Dependencies property retrieves the dependencies of a resource.')
mscsResourceDependents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceDependents.setStatus('current')
if mibBuilder.loadTexts: mscsResourceDependents.setDescription('The Dependents collection provides access to the dependents of a resource.')
mscsResourceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceGroup.setStatus('current')
if mibBuilder.loadTexts: mscsResourceGroup.setDescription('The Group property returns the group to which a resource belongs.')
mscsResourceOwnerNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceOwnerNode.setStatus('current')
if mibBuilder.loadTexts: mscsResourceOwnerNode.setDescription("The OwnerNode property returns a resource's current owner node.")
mscsResourcePossibleOwnerNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourcePossibleOwnerNodes.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePossibleOwnerNodes.setDescription('The PossibleOwnerNodes property returns the nodes specified as possible owners of a resource.')
mscsResourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 128, 129, 130))).clone(namedValues=NamedValues(("unknown", -1), ("inherited", 0), ("initializing", 1), ("online", 2), ("offline", 3), ("failed", 4), ("pending", 128), ("onlinePending", 129), ("offlinePending", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceState.setStatus('current')
if mibBuilder.loadTexts: mscsResourceState.setDescription('The State property returns a description of the operational condition of a resource.')
mscsResourceTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceTypeName.setStatus('current')
if mibBuilder.loadTexts: mscsResourceTypeName.setDescription('The TypeName property returns the resource type name of the resource.')
mscsResourceDebugPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceDebugPrefix.setStatus('current')
if mibBuilder.loadTexts: mscsResourceDebugPrefix.setDescription('The DebugPrefix property specifies the path to the debugger used to debug the resource. To use the DebugPrefix property, a resource must run in a separate Resource Monitor. The debugger specified by the DebugPrefix property is attached to the Resource Monitor. If the debugger is in a directory that is included in the path, DebugPrefix can be set to a relative path. Otherwise, a full path must be specified. Setting the DebugPrefix property causes -p <process id> to be appended to the end of the debug command, where <process id> represents the process identifier for the Resource Monitor handling the resource. For more information about debugging a resource, see Debugging a Resource DLL.')
mscsResourceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceDescription.setStatus('current')
if mibBuilder.loadTexts: mscsResourceDescription.setDescription('The Description property provides comments about the resource.')
mscsResourceIsAlivePollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 12), Gauge32()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceIsAlivePollInterval.setStatus('current')
if mibBuilder.loadTexts: mscsResourceIsAlivePollInterval.setDescription("The IsAlivePollInterval property provides the recommended interval in milliseconds at which the Cluster service should poll the resource to determine if it is operational. The polling occurs when the Resource Monitor calls the resource DLL's IsAlive entry point function. If a resource does not set the IsAlivePollInterval property or sets it to - 1, the Cluster service uses the IsAlivePollInterval property for the resource type associated with the resource. The data value for IsAlivePollInterval cannot be zero.")
mscsResourceLooksAlivePollIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 13), Gauge32()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceLooksAlivePollIntrvl.setStatus('current')
if mibBuilder.loadTexts: mscsResourceLooksAlivePollIntrvl.setDescription("The LooksAlivePollInterval property provides the recommended interval in milliseconds at which the Cluster service should poll the resource to determine if it appears operational. The polling occurs when the Resource Monitor calls the resource DLL's LooksAlive entry point function. If a resource does not set the LooksAlivePollInterval property or sets it to 0xFFFFFFFF, the Cluster service uses the LooksAlivePollInterval property for the resource type associated with the resource. The resource DLL should return an event handle from the Online call that is signaled when a resource fails. For more information, see Implementing LooksAlive and Implementing Online.")
mscsResourcePendingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourcePendingTimeout.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePendingTimeout.setDescription("The PendingTimeout property sets the number of milliseconds that a Resource Monitor will wait for a resource DLL to update the status of a resource in an OnlinePending or OfflinePending state before terminating the resource. The PendingTimeout property does not necessarily limit the time that a resource can spend in a ClusterOnlinePending or ClusterOfflinePending state. This property determines only how long a Resource Monitor will wait for resource DLLs to report status updates with the SetResourceStatus function. As long as a resource DLL never exceeds the PendingTimeout interval between calls to SetResourceStatus, the resource DLL can keep a resource in a pending state indefinitely. If a resource DLL exceeds the PendingTimeout interval between calls to SetResourceStatus, the Resource Monitor calls the resource DLL's Terminate entry point function.")
mscsResourcePersistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourcePersistentState.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePersistentState.setDescription('The PersistentState property specifies whether the resource should be brought online or left offline when the Cluster service is started. The data value for the PersistentState property can be set to TRUE or FALSE. When PersistentState is set to TRUE, the resource is automatically brought online when the Cluster service starts. When set to FALSE, it is left offline. When a resource is brought online, its PersistentState property is deleted from the cluster database. Therefore, PersistentState should only be set when a resource is offline. To retrieve the current state of a resource, call the GetClusterResourceState function.')
mscsResourceRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dontRestart", 0), ("restartNoNotify", 1), ("restartNotify", 2), ("restartActionCount", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceRestartAction.setStatus('current')
if mibBuilder.loadTexts: mscsResourceRestartAction.setDescription('The RestartAction property describes the action to be taken by the Cluster service if the resource fails.')
mscsResourceRestartPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceRestartPeriod.setStatus('current')
if mibBuilder.loadTexts: mscsResourceRestartPeriod.setDescription("The RestartPeriod property defines an interval of time, in milliseconds, during which a specified number of restart attempts can be made on a nonresponsive resource. The RestartThreshold property specifies the allowable number of restart attempts that can occur within the interval defined by RestartPeriod. When a resource fails, the Cluster service attempts to restart the resource (unless the RestartAction property is set to ClusterResourceDontRestart). The RestartPeriod and RestartThreshold properties work together to limit restart attempts. For example, if the RestartPeriod property is set to 200 milliseconds, and the RestartThreshold property is set to two retry attempts, the Cluster service tolerates two restart failures within any 200 millisecond interval. More than two failures can occur, as long as they occur over an interval that is greater than 200 milliseconds. On the third restart failure within the 200 millisecond interval, the Cluster service considers the resource to have failed and may, depending on the RestartAction property, attempt to fail over the resource's group to another node. After the interval defined by the RestartPeriod property is exceeded, the Cluster service resets the property to zero. If not specified, the default value for the RestartPeriod property is 90000 milliseconds.")
mscsResourceRestartThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceRestartThreshold.setStatus('current')
if mibBuilder.loadTexts: mscsResourceRestartThreshold.setDescription("The RestartThreshold property specifies the maximum number of restart attempts that can be made on a resource within an interval defined by the RestartPeriod property before the Cluster service initiates the action specified by the RestartAction property. When a resource does fails, the Cluster service attempts to restart the resource (unless the RestartAction property is set to ClusterResourceDontRestart). The RestartPeriod and RestartThreshold properties work together to limit restart attempts. For example, if the RestartPeriod property is set to 200 milliseconds, and the RestartThreshold property is set to two retry attempts, then the Cluster service tolerates two restart failures within any 200 millisecond interval. More than two failures can occur, as long as they occur over an interval that is greater than 200 milliseconds. On the third restart failure within the 200 millisecond interval, the Cluster service considers the resource to have failed and may, depending on the RestartAction property, attempt to fail over the resource's group to another node.")
mscsResourceRetryPeriodOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceRetryPeriodOnFailure.setStatus('current')
if mibBuilder.loadTexts: mscsResourceRetryPeriodOnFailure.setDescription("The RetryPeriodOnFailure property specifies the interval of time (in milliseconds) that a resource should remain in a failed state before the Cluster service attempts to restart it. By default, if a resource fails, it remains in the failed state until an active effort is made to locate and restart the resource. The RetryPeriodOnFailure property provides a way for resources to recover from failures automatically. When adjusting the RetryPeriodOnFailure property: Note that the default value (0xFFFFFFFF) prevents the Cluster service from making a restart attempts; Intervals measured in minutes (multiples of 0xEA60) are recommended; Do not set the interval any lower than that specified by the RestartPeriod property. The Cluster Service attempts to restart the resource by calling its resource DLL's Online entry point function.")
mscsResourceSeparateMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceSeparateMonitor.setStatus('current')
if mibBuilder.loadTexts: mscsResourceSeparateMonitor.setDescription("The SeparateMonitor property indicates whether the resource requires its own Resource Monitor. The data value for the SeparateMonitor property can be set to TRUE or FALSE. To use a debugger with a resource DLL, the resource's SeparateMonitor property must be set to TRUE. A change to the SeparateMonitor property does not take effect immediately unless the resource is offline at the time of the change. If the resource is online, the change takes effect after the resource is taken offline and brought back online.")
mscsResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 11, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourceType.setStatus('current')
if mibBuilder.loadTexts: mscsResourceType.setDescription("The Type property specifies the display name of the resource. It is important to distinguish between the display name of the resource's type and the registered name of the resource's type. For more information, see Display Names. To access the type name of a resource type, call ClusterResourceControl and pass CLUSCTL_RESOURCE_GET_RESOURCE_TYPE for the dwControlCode parameter. The Name property for resource types also specifies a resource type display name.")
mscsResourcePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 31, 12), )
if mibBuilder.loadTexts: mscsResourcePropertiesTable.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePropertiesTable.setDescription('A list of properties associated with a resource.')
mscsResourcePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 31, 12, 1), ).setIndexNames((0, "INFORMANT-MSCS", "mscsResourceNameIndex"), (0, "INFORMANT-MSCS", "mscsResourcePropertiesIndex"))
if mibBuilder.loadTexts: mscsResourcePropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePropertiesEntry.setDescription('Information on one particular property.')
mscsResourcePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourcePropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePropertiesIndex.setDescription('A unique value for each property.')
mscsResourcePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 12, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourcePropertiesName.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePropertiesName.setDescription('Returns the property name.')
mscsResourcePropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 31, 12, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscsResourcePropertiesValue.setStatus('current')
if mibBuilder.loadTexts: mscsResourcePropertiesValue.setDescription('Returns the property value as a string.')
mibBuilder.exportSymbols("INFORMANT-MSCS", mscsNetworkNameIndex=mscsNetworkNameIndex, mscsNodeEntry=mscsNodeEntry, mscsResourceRestartPeriod=mscsResourceRestartPeriod, mscsNodeNameIndex=mscsNodeNameIndex, mscsClusterFlags=mscsClusterFlags, mscsClusterPropertiesEntry=mscsClusterPropertiesEntry, mscsClusterPropertiesIndex=mscsClusterPropertiesIndex, mscsResGroupFailbackWindowEnd=mscsResGroupFailbackWindowEnd, mscsResGroupTable=mscsResGroupTable, mscsResGroupAutoFailbackType=mscsResGroupAutoFailbackType, mscsClusterPropertiesTable=mscsClusterPropertiesTable, mscsResGroupEntry=mscsResGroupEntry, mscsNetworkPropertiesIndex=mscsNetworkPropertiesIndex, mscsNodePropertiesName=mscsNodePropertiesName, mscsNetInterfaceNode=mscsNetInterfaceNode, mscsNetInterfaceEntry=mscsNetInterfaceEntry, mscsNetworkPropertiesEntry=mscsNetworkPropertiesEntry, mscsNetInterfaceState=mscsNetInterfaceState, mscsNodeLowestVersion=mscsNodeLowestVersion, PYSNMP_MODULE_ID=mscs, mscsClusterQuorumLogSize=mscsClusterQuorumLogSize, mscsResGroupAntiAffinityClassNam=mscsResGroupAntiAffinityClassNam, mscsNodeCSDVersion=mscsNodeCSDVersion, mscsNetworkPropertiesTable=mscsNetworkPropertiesTable, mscsResourceEntry=mscsResourceEntry, mscsNetInterfacePropertiesName=mscsNetInterfacePropertiesName, mscsNetInterfacePropertiesTable=mscsNetInterfacePropertiesTable, mscsNodeNameFull=mscsNodeNameFull, mscsNetworkAddressMask=mscsNetworkAddressMask, mscsResGroupFailoverPeriod=mscsResGroupFailoverPeriod, mscsResourceLooksAlivePollIntrvl=mscsResourceLooksAlivePollIntrvl, mscsNetInterfacePropertiesEntry=mscsNetInterfacePropertiesEntry, mscsResGroupPropertiesIndex=mscsResGroupPropertiesIndex, mscsNodeNodeID=mscsNodeNodeID, mscsResourceDebugPrefix=mscsResourceDebugPrefix, mscsNetworkPropertiesValue=mscsNetworkPropertiesValue, mscsResGroupOwnerNode=mscsResGroupOwnerNode, mscsResourcePossibleOwnerNodes=mscsResourcePossibleOwnerNodes, mscsNodeNetInterfaces=mscsNodeNetInterfaces, mscsClusterHighestVersion=mscsClusterHighestVersion, mscsResourceGroup=mscsResourceGroup, mscsResourcePropertiesValue=mscsResourcePropertiesValue, mscsResourceRestartThreshold=mscsResourceRestartThreshold, mscsResGroupPropertiesEntry=mscsResGroupPropertiesEntry, mscsClusterPropertiesValue=mscsClusterPropertiesValue, mscsNetInterfaceDescription=mscsNetInterfaceDescription, mscsNetInterfaceNetwork=mscsNetInterfaceNetwork, mscsClusterVendorId=mscsClusterVendorId, mscsResourceIsAlivePollInterval=mscsResourceIsAlivePollInterval, mscsResourcePropertiesIndex=mscsResourcePropertiesIndex, mscsResourcePropertiesName=mscsResourcePropertiesName, mscsNodeHighestVersion=mscsNodeHighestVersion, mscsNetworkTable=mscsNetworkTable, mscsResourceRetryPeriodOnFailure=mscsResourceRetryPeriodOnFailure, mscsNodeBuildNumber=mscsNodeBuildNumber, mscsClusterDefaultNetworkRole=mscsClusterDefaultNetworkRole, mscsClusterDescription=mscsClusterDescription, mscsClusterName=mscsClusterName, mscsNodeEnableEventLogReplicate=mscsNodeEnableEventLogReplicate, mscsResourcePersistentState=mscsResourcePersistentState, mscsNetInterfacePropertiesIndex=mscsNetInterfacePropertiesIndex, mscsNetworkDescription=mscsNetworkDescription, mscsNodePropertiesIndex=mscsNodePropertiesIndex, mscsNetworkRole=mscsNetworkRole, mscsResourceDependencies=mscsResourceDependencies, mscsNetworkEntry=mscsNetworkEntry, mscsNodePropertiesValue=mscsNodePropertiesValue, mscsClusterMinorVersion=mscsClusterMinorVersion, mscsNodeDescription=mscsNodeDescription, mscsResGroupPropertiesValue=mscsResGroupPropertiesValue, mscsNodeTable=mscsNodeTable, mscsResourcePendingTimeout=mscsResourcePendingTimeout, mscsNodePropertiesTable=mscsNodePropertiesTable, mscsClusterQuorumPath=mscsClusterQuorumPath, mscsClusterMajorVersion=mscsClusterMajorVersion, mscsResGroupNameIndex=mscsResGroupNameIndex, mscsClusterPropertiesName=mscsClusterPropertiesName, mscsNetworkState=mscsNetworkState, mscsNetInterfaceTable=mscsNetInterfaceTable, mscsNetInterfaceAdapter=mscsNetInterfaceAdapter, mscsResourceDescription=mscsResourceDescription, mscsClusterBuildNumber=mscsClusterBuildNumber, mscsNetworkPropertiesName=mscsNetworkPropertiesName, mscsResourcePropertiesTable=mscsResourcePropertiesTable, mscsResGroupResources=mscsResGroupResources, mscsResGroupPropertiesName=mscsResGroupPropertiesName, mscsResGroupNameFull=mscsResGroupNameFull, mscsResourcePropertiesEntry=mscsResourcePropertiesEntry, mscsNodeMinorVersion=mscsNodeMinorVersion, mscsResourceRestartAction=mscsResourceRestartAction, mscsNetworkNameFull=mscsNetworkNameFull, mscsCluster=mscsCluster, mscsResourceNameFull=mscsResourceNameFull, mscsResourceTypeName=mscsResourceTypeName, mscsNetworkAddress=mscsNetworkAddress, mscsClusterCSDVersion=mscsClusterCSDVersion, mscsClusterMixedVersion=mscsClusterMixedVersion, mscsNodePropertiesEntry=mscsNodePropertiesEntry, mscsResGroupState=mscsResGroupState, mscsResourceType=mscsResourceType, mscsResourceOwnerNode=mscsResourceOwnerNode, mscsNodeMajorVersion=mscsNodeMajorVersion, mscsNetworkNetworkID=mscsNetworkNetworkID, mscsNetworkNetInterfaces=mscsNetworkNetInterfaces, mscsNetInterfaceNameIndex=mscsNetInterfaceNameIndex, mscsResGroupDescription=mscsResGroupDescription, mscsResourceDependents=mscsResourceDependents, mscsNetInterfacePropertiesValue=mscsNetInterfacePropertiesValue, mscs=mscs, mscsNetInterfaceNameFull=mscsNetInterfaceNameFull, mscsResourceSeparateMonitor=mscsResourceSeparateMonitor, mscsResourceNameIndex=mscsResourceNameIndex, mscsNetInterfaceAddress=mscsNetInterfaceAddress, mscsResGroupPersistentState=mscsResGroupPersistentState, mscsResourceState=mscsResourceState, mscsResourceTable=mscsResourceTable, mscsResGroupPropertiesTable=mscsResGroupPropertiesTable, mscsClusterLowestVersion=mscsClusterLowestVersion, mscsNodeState=mscsNodeState, mscsResGroupFailbackWindowStart=mscsResGroupFailbackWindowStart, mscsResGroupFailoverThreshold=mscsResGroupFailoverThreshold)
