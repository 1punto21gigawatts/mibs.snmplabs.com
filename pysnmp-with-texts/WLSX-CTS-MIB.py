#
# PySNMP MIB module WLSX-CTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-CTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, ModuleIdentity, Counter64, snmpModules, MibIdentifier, Gauge32, Counter32, ObjectIdentity, NotificationType, Unsigned32, TextualConvention, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "ModuleIdentity", "Counter64", "snmpModules", "MibIdentifier", "Gauge32", "Counter32", "ObjectIdentity", "NotificationType", "Unsigned32", "TextualConvention", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "TimeTicks")
TestAndIncr, PhysAddress, TruthValue, TimeInterval, TextualConvention, TDomain, MacAddress, RowStatus, StorageType, TAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "PhysAddress", "TruthValue", "TimeInterval", "TextualConvention", "TDomain", "MacAddress", "RowStatus", "StorageType", "TAddress", "DisplayString")
wlsxCtsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11))
wlsxCtsMIB.setRevisions(('1907-08-06 05:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxCtsMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxCtsMIB.setLastUpdated('0708060518Z')
if mibBuilder.loadTexts: wlsxCtsMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxCtsMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxCtsMIB.setDescription('This MIB module defines MIB objects which provide information about the Controller Transport Service (Cts) in the Aruba controller.')
wlsxCtsOpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1))
wlsxCtsRequestTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1), )
if mibBuilder.loadTexts: wlsxCtsRequestTable.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsRequestTable.setDescription(' ')
wlsxCtsRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1), ).setIndexNames((0, "WLSX-CTS-MIB", "wlsxCtsIndex"))
if mibBuilder.loadTexts: wlsxCtsRequestEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsRequestEntry.setDescription('')
wlsxCtsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: wlsxCtsIndex.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsIndex.setDescription(' CTS transport index 0 - Config Sync 1 - Counters Sync 2 - RF Plan Sync ')
wlsxCtsOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlsxCtsOpcode.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsOpcode.setDescription(' CTS operation opcode ')
wlsxCtsCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlsxCtsCookie.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsCookie.setDescription(' Cookie for the config sync operation ')
wlsxCtsURL = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlsxCtsURL.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsURL.setDescription(' URL for the config sync operation ')
wlsxCtsFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("wlsxCtsFlagForce", 0), ("wlsxCtsFlagUseCert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlsxCtsFlags.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsFlags.setDescription(' Operational flags to be sent via CTS ')
wlsxCtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 11, 1, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlsxCtsStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxCtsStatus.setDescription(' CTS row status ')
mibBuilder.exportSymbols("WLSX-CTS-MIB", wlsxCtsIndex=wlsxCtsIndex, wlsxCtsOpcode=wlsxCtsOpcode, wlsxCtsURL=wlsxCtsURL, wlsxCtsFlags=wlsxCtsFlags, wlsxCtsCookie=wlsxCtsCookie, wlsxCtsRequestEntry=wlsxCtsRequestEntry, wlsxCtsMIB=wlsxCtsMIB, wlsxCtsRequestTable=wlsxCtsRequestTable, wlsxCtsStatus=wlsxCtsStatus, wlsxCtsOpGroup=wlsxCtsOpGroup, PYSNMP_MODULE_ID=wlsxCtsMIB)
