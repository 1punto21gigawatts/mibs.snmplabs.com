#
# PySNMP MIB module Nortel-Magellan-Passport-FrameRelayDteMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-FrameRelayDteMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, Counter32, PassportCounter64, Unsigned32, Integer32, RowStatus, StorageType, Gauge32, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "InterfaceIndex", "Counter32", "PassportCounter64", "Unsigned32", "Integer32", "RowStatus", "StorageType", "Gauge32", "DisplayString")
HexString, Link, DashedHexString, EnterpriseDateAndTime, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "HexString", "Link", "DashedHexString", "EnterpriseDateAndTime", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, Counter32, ModuleIdentity, ObjectIdentity, Unsigned32, Integer32, Bits, NotificationType, iso, Gauge32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Counter32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Integer32", "Bits", "NotificationType", "iso", "Gauge32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
frameRelayDteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32))
frDte = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101))
frDteRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 1), )
if mibBuilder.loadTexts: frDteRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRowStatusTable.setDescription('This entry controls the addition and deletion of frDte components.')
frDteRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRowStatusEntry.setDescription('A single entry in the table represents a single frDte component.')
frDteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDte components. These components can be added and deleted.')
frDteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStorageType.setDescription('This variable represents the storage type value for the frDte tables.')
frDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: frDteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteIndex.setDescription('This variable represents the index for the frDte tables.')
frDteCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 20), )
if mibBuilder.loadTexts: frDteCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
frDteCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteCidDataEntry.setDescription('An entry in the frDteCidDataTable.')
frDteCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: frDteCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
frDteIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 21), )
if mibBuilder.loadTexts: frDteIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
frDteIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 21, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteIfEntryEntry.setDescription('An entry in the frDteIfEntryTable.')
frDteIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
frDteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 21, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
frDteProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 22), )
if mibBuilder.loadTexts: frDteProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteProvTable.setDescription('This group contains the provisioned attributes for the FrDte component.')
frDteProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 22, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteProvEntry.setDescription('An entry in the frDteProvTable.')
frDteAcceptUndefinedDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteAcceptUndefinedDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frDteAcceptUndefinedDlci.setDescription('This parameter allows previously undefined Data Link Connection Identifiers (DLCIs) to be dynamically accepted in the default remote group. If set to enabled, undefined DLCIs will be accepted, if disabled, they will not.')
frDteStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 23), )
if mibBuilder.loadTexts: frDteStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frDteStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 23, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStateEntry.setDescription('An entry in the frDteStateTable.')
frDteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frDteOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frDteUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frDteOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 24), )
if mibBuilder.loadTexts: frDteOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
frDteOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 24, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteOperStatusEntry.setDescription('An entry in the frDteOperStatusTable.')
frDteSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
frDteOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 25), )
if mibBuilder.loadTexts: frDteOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteOperTable.setDescription('This group contains the operational attributes for the FrDte component.')
frDteOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 25, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteOperEntry.setDescription('An entry in the frDteOperTable.')
frDteLinkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("down", 2), ("polling", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLinkOperState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLinkOperState.setDescription('This attribute describes the operational state of the Link Control protocol. If the interface to the physical link hardware is inactive, the linkOperState is in the down state. The polling state only occurs when the Local Management Interface (LMI) is enabled and the physical link is active. The polling state indicates LMI is polling for its peer. Once communication is established the linkOperState will transition to the active state. If the procedure attribute of the Lmi component is set to none, linkOperState will transition to the active state once the physical link becomes active.')
frDteErrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26), )
if mibBuilder.loadTexts: frDteErrTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrTable.setDescription('This group contains the SNMP frErrEntry attributes for the FrDte component.')
frDteErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrEntry.setDescription('An entry in the frDteErrTable.')
frDteErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalDlci", 4), ("dlcmiProtoErr", 5), ("dlcmiUnknownIe", 6), ("dlcmiSequenceErr", 7), ("dlcmiUnknownRpt", 8), ("noErrorSinceReset", 9))).clone('noErrorSinceReset')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteErrType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrType.setDescription("The type of error that was last seen on this interface. The error types are as follows: receiveShort: This error indicates a received frame was discarded because it was less than four octets long or it was missing the Organizationally Unique Identifier (OUI) for a SNAP header. receiveLong: This error indicates a received frame was discarded because it was longer than expected. This error is currently not used on this interface. illegalDlci: This error indicates that a received frame was discarded because it's Q.922 address was not two octets in length. This error could also indicate that a frame was discarded because it was received on a DLCI reserved for LMI which had not been provisioned active. dlcmiProtoErr: This error indicates an LMI frame was received with contents formatted incorrectly. dlcmiUnknownIe: This error indicates that an LMI frame was received which contained an unsupported Information Element (IE) type dlcmiSequenceErr: This error indicates that an LMI frame was received whose Keep Alive Sequence was incorrect. dlcmiUnknownRpt: This error indicates that an LMI frame was received which contained a Report-type Information Element with an invalid type of report. noErrorSinceReset: This error type indicates that there has not been an error since the interface has been reset. unknownError: This error type contains the cumulation of receive frame errors that did not fit one of the MIB error descriptions above. These errors include those counted by the following attributes: ulpUnknownProtocol - A received frame was discarded because the Upper Level Protocol (ULP) encapsulation used was unsupported. badFc - A received frame was discarded because the frame control character was incorrect. defragSequenceErrors - A fragment was received which was discarded due to an out of sequence error detection.")
frDteErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteErrData.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrData.setDescription('An octet string containing the first part of the frame in which an error was last detected.')
frDteErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1, 4), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrTime.setDescription('The time at which the last error was detected and recorded in errType.')
frDteErrDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteErrDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrDiscards.setDescription('Number of inbound frames dropped because of format errors or because the virtual circuit was not known. Format errors, in this case, are any errors which would prevent the system from recognizing the DLCI and placing the error in the discard category. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteErrFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteErrFaults.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrFaults.setDescription('This attribute counts the number of times LMI has taken down the interface. When the procedure attribute of the Lmi component is set to none, this counter will not be incremented. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteErrFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 26, 1, 8), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteErrFaultTime.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrFaultTime.setDescription('The last time the errFaults counter was incremented.')
frDteErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27), )
if mibBuilder.loadTexts: frDteErrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrStatsTable.setDescription('This group contains error counters for the FrDte.')
frDteErrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"))
if mibBuilder.loadTexts: frDteErrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteErrStatsEntry.setDescription('An entry in the frDteErrStatsTable.')
frDteXmitDiscardPvcDown = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteXmitDiscardPvcDown.setStatus('mandatory')
if mibBuilder.loadTexts: frDteXmitDiscardPvcDown.setDescription("Count of transmitted frames discarded because the Dlci or a component positioned in a hierarchically fashion above it (e.g. it's remote group or the FrDte component) was administratively disabled. This counter will wrap around to 0 when it exceeds its maximum count.")
frDteXmitDiscardLmiInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteXmitDiscardLmiInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frDteXmitDiscardLmiInactive.setDescription('Count of transmitted frames discarded because the Local Management Interface (LMI) was not yet active (i.e. LMI was still in the polling state). This counter will wrap around to 0 when it exceeds its maximum count.')
frDteXmitDiscardFramerDown = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteXmitDiscardFramerDown.setStatus('mandatory')
if mibBuilder.loadTexts: frDteXmitDiscardFramerDown.setDescription('Count of transmitted frames discarded because the framer component was down. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteXmitDiscardPvcInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteXmitDiscardPvcInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frDteXmitDiscardPvcInactive.setDescription('Count of transmitted frames discarded because the Local Management Interface (LMI) had inactivated or invalidated the Dlci. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteXmitDiscardCirExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteXmitDiscardCirExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteXmitDiscardCirExceeded.setDescription('Count of transmitted frames discarded because CIR was enabled on a Dlci without a HibernationQueue subcomponent and the traffic exceeded the combined Committed and Excess Burst thresholds. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteRecvDiscardPvcDown = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRecvDiscardPvcDown.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRecvDiscardPvcDown.setDescription("Count of received frames discarded because the Dlci or a component positioned in a hierarchically fashion above it (e.g. it's remote group or the FrDte component) was administratively disabled. This counter will wrap around to 0 when it exceeds its maximum count.")
frDteRecvDiscardLmiInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRecvDiscardLmiInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRecvDiscardLmiInactive.setDescription('Count of received frames discarded because the Local Management Interface (LMI) was not yet active (i.e. LMI was still in the polling state). This counter will wrap around to 0 when it exceeds its maximum count.')
frDteRecvDiscardPvcInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRecvDiscardPvcInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRecvDiscardPvcInactive.setDescription('Count of received frames discarded because the Local Management Interface (LMI) had inactivated or invalidated the Dlci. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteBadFc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteBadFc.setStatus('mandatory')
if mibBuilder.loadTexts: frDteBadFc.setDescription('Count of received frames discarded because the frame control character was incorrect. This may indicate that the other side of the link is configured for a different link level protocol. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteUlpUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteUlpUnknownProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: frDteUlpUnknownProtocol.setDescription('Count of received frames discarded because the Upper Level Protocol (ULP) encapsulation used was unsupported. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDefragSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDefragSequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDefragSequenceErrors.setDescription('Count of fragments received which were discarded due to out of sequence error detection. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteReceiveShort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteReceiveShort.setStatus('mandatory')
if mibBuilder.loadTexts: frDteReceiveShort.setDescription('Count of received frames (including LMI frames) discarded because they were less than four octets long or they were missing the Organizationally Unique Identifier (OUI) for a SNAP header. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteIllegalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteIllegalDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frDteIllegalDlci.setDescription('Count of received frames discarded because their Q.922 address was not two octets in length. This count also includes frames discarded because they were received on a Dlci reserved for LMI which had not been provisioned active. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlcmiProtoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlcmiProtoErr.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlcmiProtoErr.setDescription('Count of received LMI frames whose contents were formatted incorrectly. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlcmiUnknownIe = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlcmiUnknownIe.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlcmiUnknownIe.setDescription('Count of received LMI frames which contained an unsupported Information Element (IE) type. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlcmiSequenceErr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlcmiSequenceErr.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlcmiSequenceErr.setDescription('Count of received LMI frames whose Keep Alive Sequence was incorrect. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlcmiUnknownRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlcmiUnknownRpt.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlcmiUnknownRpt.setDescription('Count of received LMI frames which contained a Report-type Information Element with an invalid type of report. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2))
frDteFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 1), )
if mibBuilder.loadTexts: frDteFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerRowStatusTable.setDescription('This entry controls the addition and deletion of frDteFramer components.')
frDteFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteFramerIndex"))
if mibBuilder.loadTexts: frDteFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerRowStatusEntry.setDescription('A single entry in the table represents a single frDteFramer component.')
frDteFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteFramer components. These components can be added and deleted.')
frDteFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerStorageType.setDescription('This variable represents the storage type value for the frDteFramer tables.')
frDteFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerIndex.setDescription('This variable represents the index for the frDteFramer tables.')
frDteFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 10), )
if mibBuilder.loadTexts: frDteFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisional Framer groups.')
frDteFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteFramerIndex"))
if mibBuilder.loadTexts: frDteFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerProvEntry.setDescription('An entry in the frDteFramerProvTable.')
frDteFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
frDteFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 12), )
if mibBuilder.loadTexts: frDteFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frDteFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteFramerIndex"))
if mibBuilder.loadTexts: frDteFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerStateEntry.setDescription('An entry in the frDteFramerStateTable.')
frDteFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frDteFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frDteFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frDteFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13), )
if mibBuilder.loadTexts: frDteFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
frDteFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteFramerIndex"))
if mibBuilder.loadTexts: frDteFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerStatsEntry.setDescription('An entry in the frDteFramerStatsTable.')
frDteFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerFrmToIf.setDescription('This attribute counts the number of frames transmitted to the link interface by Framer. Note: This does not include the number of frames transmitted directly to the hardware queue, thus bypassing the Framer component.')
frDteFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerFrmFromIf.setDescription('This attribute counts the number of frames received from the link interface by Framer.')
frDteFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerAborts.setDescription('This attribute counts the total number of aborts received.')
frDteFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerCrcErrors.setDescription('This attribute counts the total number of frames with CRC errors.')
frDteFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerLrcErrors.setDescription('This attribute counts the total number of frames with LRC errors.')
frDteFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerNonOctetErrors.setDescription('This attribute counts the total number of frames that were non octet aligned.')
frDteFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerOverruns.setDescription('This attribute counts the total number of frames received from the link for which overruns occurred.')
frDteFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerUnderruns.setDescription('This attribute counts the total number of frames transmitted to the link for which underruns occurred.')
frDteFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerLargeFrmErrors.setDescription('This attribute counts the total number of frames received which were too large. The frame exceeded the maximumFrameLengthLimit provisioned attribute or it contained more than the 255 block hardware limit.')
frDteFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 14), )
if mibBuilder.loadTexts: frDteFramerUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerUtilTable.setDescription('This group contains the link utilization operational data for a Framer component.')
frDteFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteFramerIndex"))
if mibBuilder.loadTexts: frDteFramerUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerUtilEntry.setDescription('An entry in the frDteFramerUtilTable.')
frDteFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerNormPrioLinkUtilToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerNormPrioLinkUtilToIf.setDescription('This attribute is the utilization of the normal priority data sent to the link as a percentage of the available bandwidth on the link. The utilization is the average for the last minute.')
frDteFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frDteFramerNormPrioLinkUtilFromIf.setDescription('This attribute is the utilization of the normal priority data received from the link as a percentage of the available bandwidth on the link. The utilization is the average for the last minute.')
frDteLmi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3))
frDteLmiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 1), )
if mibBuilder.loadTexts: frDteLmiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiRowStatusTable.setDescription('This entry controls the addition and deletion of frDteLmi components.')
frDteLmiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLmiIndex"))
if mibBuilder.loadTexts: frDteLmiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiRowStatusEntry.setDescription('A single entry in the table represents a single frDteLmi component.')
frDteLmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLmiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteLmi components. These components cannot be added nor deleted.')
frDteLmiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLmiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteLmiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLmiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiStorageType.setDescription('This variable represents the storage type value for the frDteLmi tables.')
frDteLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteLmiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiIndex.setDescription('This variable represents the index for the frDteLmi tables.')
frDteLmiProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10), )
if mibBuilder.loadTexts: frDteLmiProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiProvTable.setDescription('This group contains the provisioned attributes for the Lmi component.')
frDteLmiProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLmiIndex"))
if mibBuilder.loadTexts: frDteLmiProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiProvEntry.setDescription('An entry in the frDteLmiProvTable.')
frDteLmiProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 1), ("vendorForum", 2), ("ansi", 3), ("itu", 5))).clone('itu')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLmiProcedures.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiProcedures.setDescription('This attribute selects the Local Management Interface (LMI) protocol to be used on the interface. This attribute is equivalent to the SNMP variable frDlcmiState. The vendorForum LMI protocol automatically implies that the DLCI used by the protocol is 1023. The ansi (T1.617 Annex D) and itu (ITU-T Recommendation Q.933 Annex A) LMI protocols use DLCI 0. If none is selected, no LMI procedures will run on the interface. Note that the ITU-T Recommendation Q.933 was previously a CCITT recommendation.')
frDteLmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiPollingInterval.setDescription('This is the number of seconds between successive status enquiry messages. This field corresponds to the parameter T391 described in the ANSI T1.617-1991 Annex D.')
frDteLmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiFullEnquiryInterval.setDescription('The count of status polls before a full status enquiry message is issued. Every nth poll will request a full status. This field corresponds to the parameter N391 described in the ANSI T1.617-1991 Annex D.')
frDteLmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiErrorThreshold.setDescription('The number of errors detected within the monitored events window before declaring the link non-functional. This field corresponds to the parameter N392 described in the ANSI T1.617-1991 Annex D.')
frDteLmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiMonitoredEvents.setDescription('The number of status polling intervals over which the errorthreshold is counted This is used to determine if the errorThreshold is exceeded. This field corresponds to the parameter N393 described in the ANSI T1.617-1991 Annex D.')
frDteLmiOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 11), )
if mibBuilder.loadTexts: frDteLmiOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiOperTable.setDescription('This group contains the operational attributes for the Lmi component.')
frDteLmiOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLmiIndex"))
if mibBuilder.loadTexts: frDteLmiOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiOperEntry.setDescription('An entry in the frDteLmiOperTable.')
frDteLmiLmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("initializing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLmiLmiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLmiLmiStatus.setDescription('This indicates the status of the Frame Relay interface as determined by the performance of the link management interface (LMI). If no LMI is running, lmiStatus will stay in the running state indefinitely.')
frDteRg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4))
frDteRgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 1), )
if mibBuilder.loadTexts: frDteRgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgRowStatusTable.setDescription('This entry controls the addition and deletion of frDteRg components.')
frDteRgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"))
if mibBuilder.loadTexts: frDteRgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgRowStatusEntry.setDescription('A single entry in the table represents a single frDteRg component.')
frDteRgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteRg components. These components can be added and deleted.')
frDteRgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteRgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgStorageType.setDescription('This variable represents the storage type value for the frDteRg tables.')
frDteRgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: frDteRgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgIndex.setDescription('This variable represents the index for the frDteRg tables.')
frDteRgIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 10), )
if mibBuilder.loadTexts: frDteRgIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
frDteRgIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"))
if mibBuilder.loadTexts: frDteRgIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgIfEntryEntry.setDescription('An entry in the frDteRgIfEntryTable.')
frDteRgIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
frDteRgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 10, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
frDteRgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 11), )
if mibBuilder.loadTexts: frDteRgProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgProvTable.setDescription('This group contains the provisioned attributes for the Remote Group component.')
frDteRgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"))
if mibBuilder.loadTexts: frDteRgProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgProvEntry.setDescription('An entry in the frDteRgProvTable.')
frDteRgMaxTransmissionUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(262, 9190)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgMaxTransmissionUnit.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgMaxTransmissionUnit.setDescription('The Maximum Transmission Unit size of the largest datagram (including Frame Relay header) which can be sent on the interface.')
frDteRgMpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 12), )
if mibBuilder.loadTexts: frDteRgMpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgMpTable.setDescription('This group contains the base provisioning data for the Media Application component.')
frDteRgMpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"))
if mibBuilder.loadTexts: frDteRgMpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgMpEntry.setDescription('An entry in the frDteRgMpTable.')
frDteRgLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 12, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgLinkToProtocolPort.setDescription('This attribute contains a protocol port component name. The attribute associates the application with a protocol port.')
frDteRgStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 13), )
if mibBuilder.loadTexts: frDteRgStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frDteRgStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"))
if mibBuilder.loadTexts: frDteRgStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgStateEntry.setDescription('An entry in the frDteRgStateTable.')
frDteRgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frDteRgOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frDteRgUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frDteRgOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 14), )
if mibBuilder.loadTexts: frDteRgOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
frDteRgOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"))
if mibBuilder.loadTexts: frDteRgOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgOperStatusEntry.setDescription('An entry in the frDteRgOperStatusTable.')
frDteRgSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
frDteRgLtDlciTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 219), )
if mibBuilder.loadTexts: frDteRgLtDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgLtDlciTable.setDescription('This attribute associates a Rg component with zero or more StDlci components. The Rg and StDlci components must be under the same FrDte component.')
frDteRgLtDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 219, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgLtDlciValue"))
if mibBuilder.loadTexts: frDteRgLtDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgLtDlciEntry.setDescription('An entry in the frDteRgLtDlciTable.')
frDteRgLtDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 219, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgLtDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgLtDlciValue.setDescription('This variable represents both the value and the index for the frDteRgLtDlciTable.')
frDteRgLtDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 219, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frDteRgLtDlciRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgLtDlciRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the frDteRgLtDlciTable.')
frDteRgBfr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15))
frDteRgBfrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 1), )
if mibBuilder.loadTexts: frDteRgBfrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrRowStatusTable.setDescription('This entry controls the addition and deletion of frDteRgBfr components.')
frDteRgBfrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgBfrIndex"))
if mibBuilder.loadTexts: frDteRgBfrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrRowStatusEntry.setDescription('A single entry in the table represents a single frDteRgBfr component.')
frDteRgBfrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgBfrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteRgBfr components. These components can be added and deleted.')
frDteRgBfrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgBfrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteRgBfrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgBfrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrStorageType.setDescription('This variable represents the storage type value for the frDteRgBfr tables.')
frDteRgBfrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteRgBfrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrIndex.setDescription('This variable represents the index for the frDteRgBfr tables.')
frDteRgBfrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 10), )
if mibBuilder.loadTexts: frDteRgBfrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrProvTable.setDescription('This group contains the provisioning attributes for the Bfr component.')
frDteRgBfrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgBfrIndex"))
if mibBuilder.loadTexts: frDteRgBfrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrProvEntry.setDescription('An entry in the frDteRgBfrProvTable.')
frDteRgBfrMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fddi", 0), ("enet", 1), ("tokenRing", 2))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgBfrMacType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrMacType.setDescription('This attribute specifies the MAC address type of the Bfr component. The value must be chosen based on the media of the traffic source. For traffic originated from FDDI, use fddi; for ethernet, use enet; for token ring, use tokenRing')
frDteRgBfrBfrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteRgBfrBfrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrBfrIndex.setDescription('This attribute specifies the value which is used to derive a unique MAC address for the Bfr. The bfrIndex must be unique across all Bfrs on the same Lp.')
frDteRgBfrOprTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 11), )
if mibBuilder.loadTexts: frDteRgBfrOprTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrOprTable.setDescription('This group contains the operational attributes for the Bfr component..')
frDteRgBfrOprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteRgBfrIndex"))
if mibBuilder.loadTexts: frDteRgBfrOprEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrOprEntry.setDescription('An entry in the frDteRgBfrOprTable.')
frDteRgBfrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 4, 15, 11, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteRgBfrMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: frDteRgBfrMacAddr.setDescription('This attribute indicates the unique MAC address of the Bfr component. This value is derived by the value of the attribute bfrIndex. The value is displayed as cannonical format.')
frDteDynDlciDefs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5))
frDteDynDlciDefsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 1), )
if mibBuilder.loadTexts: frDteDynDlciDefsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsRowStatusTable.setDescription('This entry controls the addition and deletion of frDteDynDlciDefs components.')
frDteDynDlciDefsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteDynDlciDefsIndex"))
if mibBuilder.loadTexts: frDteDynDlciDefsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsRowStatusEntry.setDescription('A single entry in the table represents a single frDteDynDlciDefs component.')
frDteDynDlciDefsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDynDlciDefsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteDynDlciDefs components. These components cannot be added nor deleted.')
frDteDynDlciDefsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDynDlciDefsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteDynDlciDefsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDynDlciDefsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsStorageType.setDescription('This variable represents the storage type value for the frDteDynDlciDefs tables.')
frDteDynDlciDefsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteDynDlciDefsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsIndex.setDescription('This variable represents the index for the frDteDynDlciDefs tables.')
frDteDynDlciDefsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10), )
if mibBuilder.loadTexts: frDteDynDlciDefsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsProvTable.setDescription('This group contains the provisioned attributes for a virtual circuit. These attributes represent the default settings for the resulting Dlci components and can be operationally changed using the corresponding attributes under the Dlci component.')
frDteDynDlciDefsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteDynDlciDefsIndex"))
if mibBuilder.loadTexts: frDteDynDlciDefsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsProvEntry.setDescription('An entry in the frDteDynDlciDefsProvTable.')
frDteDynDlciDefsStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsStdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsStdRowStatus.setDescription('This attribute is used to manage the status of a StDlci component. Set to active to enable the StDlci component. Set to notInService to disable the StDlci component. Set to createAndGo (SNMP only) to create a new StDlci component. Set to destroy (SNMP only) to delete an existing StDlci component.')
frDteDynDlciDefsRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsRateEnforcement.setDescription('This attribute specifies whether the CIR attributes committedInformationRate, committedBurst, and excessBurst are used to define rate enforcement on this user DLCI. If rateEnforcement is enabled, and the combined Committed and Excess burst thresholds are exceeded, the frame in violation will be discarded immediately if a HibernationQueue subcomponent is not provisioned under the StDlci component. If a HibernationQueue is provisioned, the frame will be placed on the HibernationQueue at time of violation and transmission will be attempted later after the point at which the burst thresholds will no longer be exceeded. Setting all the CIR attributes to zero has the same affect as setting this attribute to disabled.')
frDteDynDlciDefsCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 48000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsCommittedInformationRate.setDescription('The average number of bits to be transferred per second over the DLCI to the DCE. When this attribute is set to zero, the link speed will be used instead.')
frDteDynDlciDefsCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsCommittedBurst.setDescription('The committed burst size (in bits) to which the DLCI wants to subscribe.')
frDteDynDlciDefsExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsExcessBurst.setDescription('The excess burst size (in bits) to which the DLCI wants to subscribe.')
frDteDynDlciDefsExcessBurstAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setDeBit", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsExcessBurstAction.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsExcessBurstAction.setDescription('This attribute specifies the action taken when the committedBurst size has been exceeded on the DLCI but the excessBurst size has not. If the attribute is set to setDeBit, the Discard Eligibility bit in the Frame Relay header will be turned on. If the attribute is set to none, no action will be taken.')
frDteDynDlciDefsIpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDynDlciDefsIpCos.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDynDlciDefsIpCos.setDescription("This attribute specifies the initial Class of Service (CoS) given to each packet received on the on the virtual circuit identified by the dlci. The CoS value n is used to select Vr/<string> QosP/n. which determines the QualityofService-Profile to be used when the packet is forwarded. The intial CoS given to a packet by the assignedQoS attribute may be overriden when the cosPolicyAssignment attribute is defined on the IpPort or Ip components. When a packet is to be transmitted on a frDte protocol port where multiple virtual circuits are available for the packet's next hop, the packet is forwarded using the dlci where the ipCos value matches the CoS of the packet. When the packets's CoS does not match the ipCos value of any of the available virtual circuits, the packet will be forwarded using next lowest CoS; failing this, the packet will be forwarded using the next highest CoS.")
frDteStDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6))
frDteStDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 1), )
if mibBuilder.loadTexts: frDteStDlciRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciRowStatusTable.setDescription('This entry controls the addition and deletion of frDteStDlci components.')
frDteStDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"))
if mibBuilder.loadTexts: frDteStDlciRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciRowStatusEntry.setDescription('A single entry in the table represents a single frDteStDlci component.')
frDteStDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteStDlci components. These components can be added and deleted.')
frDteStDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteStDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciStorageType.setDescription('This variable represents the storage type value for the frDteStDlci tables.')
frDteStDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: frDteStDlciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciIndex.setDescription('This variable represents the index for the frDteStDlci tables.')
frDteStDlciProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10), )
if mibBuilder.loadTexts: frDteStDlciProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciProvTable.setDescription('This group contains the provisioned attributes for a virtual circuit. These attributes represent the default settings for the resulting Dlci components and can be operationally changed using the corresponding attributes under the Dlci component.')
frDteStDlciProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"))
if mibBuilder.loadTexts: frDteStDlciProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciProvEntry.setDescription('An entry in the frDteStDlciProvTable.')
frDteStDlciStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciStdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciStdRowStatus.setDescription('This attribute is used to manage the status of a StDlci component. Set to active to enable the StDlci component. Set to notInService to disable the StDlci component. Set to createAndGo (SNMP only) to create a new StDlci component. Set to destroy (SNMP only) to delete an existing StDlci component.')
frDteStDlciRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciRateEnforcement.setDescription('This attribute specifies whether the CIR attributes committedInformationRate, committedBurst, and excessBurst are used to define rate enforcement on this user DLCI. If rateEnforcement is enabled, and the combined Committed and Excess burst thresholds are exceeded, the frame in violation will be discarded immediately if a HibernationQueue subcomponent is not provisioned under the StDlci component. If a HibernationQueue is provisioned, the frame will be placed on the HibernationQueue at time of violation and transmission will be attempted later after the point at which the burst thresholds will no longer be exceeded. Setting all the CIR attributes to zero has the same affect as setting this attribute to disabled.')
frDteStDlciCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 48000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciCommittedInformationRate.setDescription('The average number of bits to be transferred per second over the DLCI to the DCE. When this attribute is set to zero, the link speed will be used instead.')
frDteStDlciCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciCommittedBurst.setDescription('The committed burst size (in bits) to which the DLCI wants to subscribe.')
frDteStDlciExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciExcessBurst.setDescription('The excess burst size (in bits) to which the DLCI wants to subscribe.')
frDteStDlciExcessBurstAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setDeBit", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciExcessBurstAction.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciExcessBurstAction.setDescription('This attribute specifies the action taken when the committedBurst size has been exceeded on the DLCI but the excessBurst size has not. If the attribute is set to setDeBit, the Discard Eligibility bit in the Frame Relay header will be turned on. If the attribute is set to none, no action will be taken.')
frDteStDlciIpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciIpCos.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciIpCos.setDescription("This attribute specifies the initial Class of Service (CoS) given to each packet received on the on the virtual circuit identified by the dlci. The CoS value n is used to select Vr/<string> QosP/n. which determines the QualityofService-Profile to be used when the packet is forwarded. The intial CoS given to a packet by the assignedQoS attribute may be overriden when the cosPolicyAssignment attribute is defined on the IpPort or Ip components. When a packet is to be transmitted on a frDte protocol port where multiple virtual circuits are available for the packet's next hop, the packet is forwarded using the dlci where the ipCos value matches the CoS of the packet. When the packets's CoS does not match the ipCos value of any of the available virtual circuits, the packet will be forwarded using next lowest CoS; failing this, the packet will be forwarded using the next highest CoS.")
frDteStDlciRgLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 11), )
if mibBuilder.loadTexts: frDteStDlciRgLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciRgLinkTable.setDescription('This group provides the link between a Dlci and a remoteGroup.')
frDteStDlciRgLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"))
if mibBuilder.loadTexts: frDteStDlciRgLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciRgLinkEntry.setDescription('An entry in the frDteStDlciRgLinkTable.')
frDteStDlciLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciLinkToRemoteGroup.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciLinkToRemoteGroup.setDescription('This attribute associates a StDlci component with a Rg component. Provisioned StDlci components must be linked to a Rg component which is under the same FrDte component.')
frDteStDlciHq = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2))
frDteStDlciHqRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 1), )
if mibBuilder.loadTexts: frDteStDlciHqRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqRowStatusTable.setDescription('This entry controls the addition and deletion of frDteStDlciHq components.')
frDteStDlciHqRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciHqIndex"))
if mibBuilder.loadTexts: frDteStDlciHqRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqRowStatusEntry.setDescription('A single entry in the table represents a single frDteStDlciHq component.')
frDteStDlciHqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciHqRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteStDlciHq components. These components can be added and deleted.')
frDteStDlciHqComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteStDlciHqStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqStorageType.setDescription('This variable represents the storage type value for the frDteStDlciHq tables.')
frDteStDlciHqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteStDlciHqIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqIndex.setDescription('This variable represents the index for the frDteStDlciHq tables.')
frDteStDlciHqProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 10), )
if mibBuilder.loadTexts: frDteStDlciHqProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqProvTable.setDescription('This group contains the Link Emission Queue provisioned attributes.')
frDteStDlciHqProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciHqIndex"))
if mibBuilder.loadTexts: frDteStDlciHqProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqProvEntry.setDescription('An entry in the frDteStDlciHqProvTable.')
frDteStDlciHqMaxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciHqMaxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqMaxPackets.setDescription('This attribute specifies the maximum number of packets allowed in the Leq before being discarded. If this attribute is set to zero then the maximum number of packets is calculated from the transmit data rate. This calculated value is placed in queuePktThreshold.')
frDteStDlciHqMaxMsecData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciHqMaxMsecData.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqMaxMsecData.setDescription("This attribute specifies the maximum number of 'Milliseconds worth of data' allowed in the Leq before packets are discarded. The queueByteThreshold will be calculated from this attribute, based on the transmit data rate.")
frDteStDlciHqMaxPercentMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciHqMaxPercentMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqMaxPercentMulticast.setDescription('This attribute specifies the maximum percentage of multicast packets allowed in the Leq, based on queuePktThreshold, before being discarded. The calculated value will be placed in queueMulticastThreshold.')
frDteStDlciHqTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteStDlciHqTimeToLive.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTimeToLive.setDescription("This attribute specifies the 'Milliseconds Time To Live' of packets in the Leq. If the timeToLive of a packet expires, it will be discarded.")
frDteStDlciHqStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 11), )
if mibBuilder.loadTexts: frDteStDlciHqStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqStatsTable.setDescription('This group contains HibernationQueue general statistics.')
frDteStDlciHqStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciHqIndex"))
if mibBuilder.loadTexts: frDteStDlciHqStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqStatsEntry.setDescription('An entry in the frDteStDlciHqStatsTable.')
frDteStDlciHqTimedOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqTimedOutPkt.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTimedOutPkt.setDescription('This attribute counts the number of packets that have been discarded due to exceeding the timeToLive. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqQueuePurgeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqQueuePurgeDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqQueuePurgeDiscards.setDescription('This attribute counts the total number of packets discarded by a queue purge which occurs when the Dlci goes down. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqTStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12), )
if mibBuilder.loadTexts: frDteStDlciHqTStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTStatsTable.setDescription('This group contains Link Emission Queue total statistics.')
frDteStDlciHqTStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciHqIndex"))
if mibBuilder.loadTexts: frDteStDlciHqTStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTStatsEntry.setDescription('An entry in the frDteStDlciHqTStatsTable.')
frDteStDlciHqTotalPktHandled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqTotalPktHandled.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTotalPktHandled.setDescription('This attribute counts the total number of packets handled by the Leq. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqTotalPktForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqTotalPktForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTotalPktForwarded.setDescription('This attribute counts the total number of packets forwarded by the Leq. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqTotalPktQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqTotalPktQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTotalPktQueued.setDescription('This attribute counts the total number of packets that required queuing by the Leq due to transmit congestion. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqTotalMulticastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqTotalMulticastPkt.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTotalMulticastPkt.setDescription('This attribute counts the total number of multicast packets handled by this instance of FrDte. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqTotalPktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqTotalPktDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqTotalPktDiscards.setDescription('This attribute counts the total number of packets that were discarded for this instance of FrDte. This is the sum of timedOutPkt, forcedPktDiscards, queuePurgeDiscards, pktThresholdExceeded, byteThresholdExceeded, mulThresholdExceeded and memThresholdExceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 13), )
if mibBuilder.loadTexts: frDteStDlciHqCStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqCStatsTable.setDescription('This group contains Link Emission Queue current statistics.')
frDteStDlciHqCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciHqIndex"))
if mibBuilder.loadTexts: frDteStDlciHqCStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqCStatsEntry.setDescription('An entry in the frDteStDlciHqCStatsTable.')
frDteStDlciHqCurrentPktQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 13, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqCurrentPktQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqCurrentPktQueued.setDescription('This attribute contains the current number of packets queued.')
frDteStDlciHqCurrentBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqCurrentBytesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqCurrentBytesQueued.setDescription('This attribute contains the current number of bytes queued.')
frDteStDlciHqCurrentMulticastQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 13, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqCurrentMulticastQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqCurrentMulticastQueued.setDescription('This attribute counts the current number of multicast packets in the queue.')
frDteStDlciHqThrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14), )
if mibBuilder.loadTexts: frDteStDlciHqThrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqThrStatsTable.setDescription('This group contains Link Emission Queue threshold statistics.')
frDteStDlciHqThrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteStDlciHqIndex"))
if mibBuilder.loadTexts: frDteStDlciHqThrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqThrStatsEntry.setDescription('An entry in the frDteStDlciHqThrStatsTable.')
frDteStDlciHqQueuePktThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqQueuePktThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqQueuePktThreshold.setDescription('This attribute is the maximum number of packets that can be contained in the queue before being discarded. If maxPackets was set to 0 then this attribute will contain the value that has been calculated based on the transmit data rate. If maxPackets was set to one or more than this attribute will contain that number.')
frDteStDlciHqPktThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqPktThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqPktThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queuePktThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqQueueByteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqQueueByteThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqQueueByteThreshold.setDescription('This attribute is the maximum number of bytes allowed in the queue based on maxMsecData and the transmit data rate.')
frDteStDlciHqByteThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqByteThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqByteThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queueByteThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqQueueMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqQueueMulticastThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqQueueMulticastThreshold.setDescription('This attribute is the number of multicast packets allowed in the queue based on maxPercentMulticast and maxPackets.')
frDteStDlciHqMulThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqMulThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqMulThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queueMulticastThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteStDlciHqMemThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 6, 2, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteStDlciHqMemThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteStDlciHqMemThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to exceeding the memory usage threshold for Leq. The memory usage threshold is determined by the Leq software, guaranteeing that the Leq does not consume all of the memory. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeq = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7))
frDteLeqRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 1), )
if mibBuilder.loadTexts: frDteLeqRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqRowStatusTable.setDescription('This entry controls the addition and deletion of frDteLeq components.')
frDteLeqRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLeqIndex"))
if mibBuilder.loadTexts: frDteLeqRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqRowStatusEntry.setDescription('A single entry in the table represents a single frDteLeq component.')
frDteLeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLeqRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteLeq components. These components can be added and deleted.')
frDteLeqComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteLeqStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqStorageType.setDescription('This variable represents the storage type value for the frDteLeq tables.')
frDteLeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteLeqIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqIndex.setDescription('This variable represents the index for the frDteLeq tables.')
frDteLeqProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 10), )
if mibBuilder.loadTexts: frDteLeqProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqProvTable.setDescription('This group contains the Link Emission Queue provisioned attributes.')
frDteLeqProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLeqIndex"))
if mibBuilder.loadTexts: frDteLeqProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqProvEntry.setDescription('An entry in the frDteLeqProvTable.')
frDteLeqMaxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLeqMaxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqMaxPackets.setDescription('This attribute specifies the maximum number of packets allowed in the Leq before being discarded. If this attribute is set to zero then the maximum number of packets is calculated from the transmit data rate. This calculated value is placed in queuePktThreshold.')
frDteLeqMaxMsecData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLeqMaxMsecData.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqMaxMsecData.setDescription("This attribute specifies the maximum number of 'Milliseconds worth of data' allowed in the Leq before packets are discarded. The queueByteThreshold will be calculated from this attribute, based on the transmit data rate.")
frDteLeqMaxPercentMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLeqMaxPercentMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqMaxPercentMulticast.setDescription('This attribute specifies the maximum percentage of multicast packets allowed in the Leq, based on queuePktThreshold, before being discarded. The calculated value will be placed in queueMulticastThreshold.')
frDteLeqTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteLeqTimeToLive.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTimeToLive.setDescription("This attribute specifies the 'Milliseconds Time To Live' of packets in the Leq. If the timeToLive of a packet expires, it will be discarded.")
frDteLeqStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 11), )
if mibBuilder.loadTexts: frDteLeqStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqStatsTable.setDescription('This group contains Link Emission Queue general statistics.')
frDteLeqStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLeqIndex"))
if mibBuilder.loadTexts: frDteLeqStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqStatsEntry.setDescription('An entry in the frDteLeqStatsTable.')
frDteLeqTimedOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqTimedOutPkt.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTimedOutPkt.setDescription('This attribute counts the number of packets that have been discarded due to exceeding the timeToLive. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqHardwareForcedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqHardwareForcedPkt.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqHardwareForcedPkt.setDescription('This attribute counts the number of hardware forced packets on this instance of FrDte. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqForcedPktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqForcedPktDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqForcedPktDiscards.setDescription('This attribute counts the total number of hardware forced packets that had to be discarded due to link failure. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqQueuePurgeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqQueuePurgeDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqQueuePurgeDiscards.setDescription('This attribute counts the total number of packets discarded by a queue purge (i.e. a discarding of all packets on the queue). This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqTStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12), )
if mibBuilder.loadTexts: frDteLeqTStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTStatsTable.setDescription('This group contains Link Emission Queue total statistics.')
frDteLeqTStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLeqIndex"))
if mibBuilder.loadTexts: frDteLeqTStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTStatsEntry.setDescription('An entry in the frDteLeqTStatsTable.')
frDteLeqTotalPktHandled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqTotalPktHandled.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTotalPktHandled.setDescription('This attribute counts the total number of packets handled by the Leq. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqTotalPktForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqTotalPktForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTotalPktForwarded.setDescription('This attribute counts the total number of packets forwarded by the Leq. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqTotalPktQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqTotalPktQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTotalPktQueued.setDescription('This attribute counts the total number of packets that required queuing by the Leq due to transmit congestion. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqTotalMulticastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqTotalMulticastPkt.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTotalMulticastPkt.setDescription('This attribute counts the total number of multicast packets handled by this instance of FrDte. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqTotalPktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqTotalPktDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqTotalPktDiscards.setDescription('This attribute counts the total number of packets that were discarded for this instance of FrDte. This is the sum of timedOutPkt, forcedPktDiscards, queuePurgeDiscards, pktThresholdExceeded, byteThresholdExceeded, mulThresholdExceeded and memThresholdExceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 13), )
if mibBuilder.loadTexts: frDteLeqCStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqCStatsTable.setDescription('This group contains Link Emission Queue current statistics.')
frDteLeqCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLeqIndex"))
if mibBuilder.loadTexts: frDteLeqCStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqCStatsEntry.setDescription('An entry in the frDteLeqCStatsTable.')
frDteLeqCurrentPktQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 13, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqCurrentPktQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqCurrentPktQueued.setDescription('This attribute contains the current number of packets queued.')
frDteLeqCurrentBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqCurrentBytesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqCurrentBytesQueued.setDescription('This attribute contains the current number of bytes queued.')
frDteLeqCurrentMulticastQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 13, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqCurrentMulticastQueued.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqCurrentMulticastQueued.setDescription('This attribute counts the current number of multicast packets in the queue.')
frDteLeqThrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14), )
if mibBuilder.loadTexts: frDteLeqThrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqThrStatsTable.setDescription('This group contains Link Emission Queue threshold statistics.')
frDteLeqThrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteLeqIndex"))
if mibBuilder.loadTexts: frDteLeqThrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqThrStatsEntry.setDescription('An entry in the frDteLeqThrStatsTable.')
frDteLeqQueuePktThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqQueuePktThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqQueuePktThreshold.setDescription('This attribute is the maximum number of packets that can be contained in the queue before being discarded. If maxPackets was set to 0 then this attribute will contain the value that has been calculated based on the transmit data rate. If maxPackets was set to one or more than this attribute will contain that number.')
frDteLeqPktThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqPktThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqPktThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queuePktThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqQueueByteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqQueueByteThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqQueueByteThreshold.setDescription('This attribute is the maximum number of bytes allowed in the queue based on maxMsecData and the transmit data rate.')
frDteLeqByteThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqByteThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqByteThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queueByteThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqQueueMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqQueueMulticastThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqQueueMulticastThreshold.setDescription('This attribute is the number of multicast packets allowed in the queue based on maxPercentMulticast and maxPackets.')
frDteLeqMulThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqMulThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqMulThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queueMulticastThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteLeqMemThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 7, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteLeqMemThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: frDteLeqMemThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to exceeding the memory usage threshold for Leq. The memory usage threshold is determined by the Leq software, guaranteeing that the Leq does not consume all of the memory. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8))
frDteDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 1), )
if mibBuilder.loadTexts: frDteDlciRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of frDteDlci components.')
frDteDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteDlciIndex"))
if mibBuilder.loadTexts: frDteDlciRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciRowStatusEntry.setDescription('A single entry in the table represents a single frDteDlci component.')
frDteDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteDlci components. These components cannot be added nor deleted.')
frDteDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciStorageType.setDescription('This variable represents the storage type value for the frDteDlci tables.')
frDteDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: frDteDlciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciIndex.setDescription('This variable represents the index for the frDteDlci tables.')
frDteDlciStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 10), )
if mibBuilder.loadTexts: frDteDlciStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciStateTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frDteDlciStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteDlciIndex"))
if mibBuilder.loadTexts: frDteDlciStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciStateEntry.setDescription('An entry in the frDteDlciStateTable.')
frDteDlciAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frDteDlciOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frDteDlciUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frDteDlciOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11), )
if mibBuilder.loadTexts: frDteDlciOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational attributes for the Dlci component.')
frDteDlciOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteDlciIndex"))
if mibBuilder.loadTexts: frDteDlciOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciOperEntry.setDescription('An entry in the frDteDlciOperTable.')
frDteDlciDlciState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciDlciState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciDlciState.setDescription('This attribute reflects the current operational circuit state of the Dlci. The state active indicates that the circuit is up and inactive that the circuit is down. The state invalid means the circuit has been deleted by the DCE (via Lmi).')
frDteDlciLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciLastTimeChange.setDescription('The last time dlciState changed state.')
frDteDlciSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciSentFrames.setDescription('Number of frames transmitted across the interface. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciReceivedFrames.setDescription('Number of frames received across the interface. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciReceivedOctets.setDescription('The number of octets sent from this virtual circuit since it was created. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciReceivedFECNs.setDescription('Number of frames with the FECN bit set received from the network. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciReceivedBECNs.setDescription('Number of frames with the BECN bit set received from the network. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciDiscardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciDiscardedFrames.setDescription('The number of inbound frames dropped because of format errors, or because the VC was inactive. This counter will wrap around to 0 when it exceeds its maximum count.')
frDteDlciCreationType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciCreationType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciCreationType.setDescription('This indicates whether the virtual circuit was manually created (static), or dynamically created (dynamic) via the data link control management interface.')
frDteDlciCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 15), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteDlciCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciCreationTime.setDescription('The time when the circuit was created, whether by the Data Link Connection Management Interface or by an SNMP set request.')
frDteDlciRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDlciRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciRateEnforcement.setDescription('This attribute specifies whether the CIR attributes committedInformationRate, committedBurst, and excessBurst are used to define rate enforcement on this user DLCI. If rateEnforcement is enabled, and the combined Committed and Excess burst thresholds are exceeded, the frame in violation will be discarded immediately if a HibernationQueue subcomponent is not provisioned under the StDlci component (static entries only). If a HibernationQueue is provisioned, the frame will be placed on the HibernationQueue at time of violation and transmission will be attempted later after the point at which the burst thresholds will no longer be exceeded. Setting all the CIR attributes to zero has the same affect as setting this attribute to disabled. Setting this attribute will operationally override the corresponding provisional value on static entries.')
frDteDlciCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 48000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDlciCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciCommittedInformationRate.setDescription('The average number of bits to be transferred per second over the DLCI to the DCE. When this attribute is set to zero, the link speed will be used instead. Setting this attribute will operationally override the corresponding provisional value on static entries.')
frDteDlciCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDlciCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciCommittedBurst.setDescription('The committed burst size (in bits) to which the DLCI wants to subscribe. Setting this attribute will operationally override the corresponding provisional value on static entries.')
frDteDlciExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDlciExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciExcessBurst.setDescription('The excess burst size (in bits) to which the DLCI wants to subscribe. Setting this attribute will operationally override the corresponding provisional value on static entries.')
frDteDlciExcessBurstAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 8, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setDeBit", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteDlciExcessBurstAction.setStatus('mandatory')
if mibBuilder.loadTexts: frDteDlciExcessBurstAction.setDescription('This attribute specifies the action taken when the committedBurst size has been exceeded on the Dlci but the excessBurst size has not. If the attribute is set to setDeBit, the Discard Eligibility bit in the Frame Relay header will be turned on. If the attribute is set to none, no action will be taken. Setting this attribute will operationally override the corresponding provisional value on static entries.')
frDteVFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9))
frDteVFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 1), )
if mibBuilder.loadTexts: frDteVFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerRowStatusTable.setDescription('This entry controls the addition and deletion of frDteVFramer components.')
frDteVFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteVFramerIndex"))
if mibBuilder.loadTexts: frDteVFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerRowStatusEntry.setDescription('A single entry in the table represents a single frDteVFramer component.')
frDteVFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteVFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of frDteVFramer components. These components can be added and deleted.')
frDteVFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frDteVFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerStorageType.setDescription('This variable represents the storage type value for the frDteVFramer tables.')
frDteVFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frDteVFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerIndex.setDescription('This variable represents the index for the frDteVFramer tables.')
frDteVFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 10), )
if mibBuilder.loadTexts: frDteVFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerProvTable.setDescription('This group contains provisionable attributes for the VirtualFramer component.')
frDteVFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteVFramerIndex"))
if mibBuilder.loadTexts: frDteVFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerProvEntry.setDescription('An entry in the frDteVFramerProvTable.')
frDteVFramerOtherVirtualFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteVFramerOtherVirtualFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerOtherVirtualFramer.setDescription('This attribute specifies the other VirtualFramer to which the service is linked, for example, FrUni/n VirtualFramer, FrDte/n VirtualFramer.')
frDteVFramerLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDteVFramerLogicalProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerLogicalProcessor.setDescription('This attribute specifies the logical processor on which the service component will reside.')
frDteVFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 11), )
if mibBuilder.loadTexts: frDteVFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frDteVFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteVFramerIndex"))
if mibBuilder.loadTexts: frDteVFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerStateEntry.setDescription('An entry in the frDteVFramerStateTable.')
frDteVFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frDteVFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frDteVFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frDteVFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 12), )
if mibBuilder.loadTexts: frDteVFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerStatsTable.setDescription('This group contains the operational statistics data for a VirtualFramer component.')
frDteVFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteIndex"), (0, "Nortel-Magellan-Passport-FrameRelayDteMIB", "frDteVFramerIndex"))
if mibBuilder.loadTexts: frDteVFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerStatsEntry.setDescription('An entry in the frDteVFramerStatsTable.')
frDteVFramerFrmToOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 12, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerFrmToOtherVFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerFrmToOtherVFramer.setDescription('This attribute counts the frames transmitted to the otherVirtualFramer.')
frDteVFramerFrmFromOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 12, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerFrmFromOtherVFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerFrmFromOtherVFramer.setDescription('This attribute counts the frames received from the otherVirtualFramer.')
frDteVFramerOctetFromOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 101, 9, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDteVFramerOctetFromOtherVFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frDteVFramerOctetFromOtherVFramer.setDescription('This attribute counts the octets received from the otherVirtualFramer.')
frameRelayDteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 1))
frameRelayDteGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 1, 5))
frameRelayDteGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 1, 5, 1))
frameRelayDteGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 1, 5, 1, 2))
frameRelayDteCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 3))
frameRelayDteCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 3, 5))
frameRelayDteCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 3, 5, 1))
frameRelayDteCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 32, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayDteMIB", frDteDlcmiUnknownIe=frDteDlcmiUnknownIe, frDteStDlciHqTimedOutPkt=frDteStDlciHqTimedOutPkt, frDteFramerAborts=frDteFramerAborts, frDteFramerLrcErrors=frDteFramerLrcErrors, frDteVFramerRowStatusEntry=frDteVFramerRowStatusEntry, frDteFramerNonOctetErrors=frDteFramerNonOctetErrors, frDteErrDiscards=frDteErrDiscards, frDteFramerRowStatusTable=frDteFramerRowStatusTable, frDteDlciSentOctets=frDteDlciSentOctets, frDteStDlciIndex=frDteStDlciIndex, frDteStDlciHqTotalPktDiscards=frDteStDlciHqTotalPktDiscards, frDteSnmpOperStatus=frDteSnmpOperStatus, frDteBadFc=frDteBadFc, frDteStateEntry=frDteStateEntry, frDteLeqTimeToLive=frDteLeqTimeToLive, frDteDynDlciDefsRowStatusTable=frDteDynDlciDefsRowStatusTable, frDteOperStatusEntry=frDteOperStatusEntry, frDteStDlciHqQueuePktThreshold=frDteStDlciHqQueuePktThreshold, frDteDlciExcessBurst=frDteDlciExcessBurst, frDteDynDlciDefsRateEnforcement=frDteDynDlciDefsRateEnforcement, frDteFramerNormPrioLinkUtilToIf=frDteFramerNormPrioLinkUtilToIf, frDteLeqCStatsEntry=frDteLeqCStatsEntry, frDteLeqByteThresholdExceeded=frDteLeqByteThresholdExceeded, frDteStDlciRowStatus=frDteStDlciRowStatus, frDteRgMaxTransmissionUnit=frDteRgMaxTransmissionUnit, frDteDlciRowStatusTable=frDteDlciRowStatusTable, frDteDlciStateEntry=frDteDlciStateEntry, frDteRgBfr=frDteRgBfr, frDteDlcmiUnknownRpt=frDteDlcmiUnknownRpt, frDteLeqTStatsTable=frDteLeqTStatsTable, frDteUlpUnknownProtocol=frDteUlpUnknownProtocol, frDteXmitDiscardPvcDown=frDteXmitDiscardPvcDown, frDteXmitDiscardLmiInactive=frDteXmitDiscardLmiInactive, frDteLeqQueueMulticastThreshold=frDteLeqQueueMulticastThreshold, frDteVFramerComponentName=frDteVFramerComponentName, frDteStDlciHqMaxPercentMulticast=frDteStDlciHqMaxPercentMulticast, frDteDynDlciDefsProvTable=frDteDynDlciDefsProvTable, frDteVFramer=frDteVFramer, frDteStDlciRowStatusTable=frDteStDlciRowStatusTable, frDte=frDte, frDteLmiMonitoredEvents=frDteLmiMonitoredEvents, frDteVFramerStatsTable=frDteVFramerStatsTable, frDteAdminState=frDteAdminState, frDteFramerLargeFrmErrors=frDteFramerLargeFrmErrors, frDteStDlciHqRowStatus=frDteStDlciHqRowStatus, frDteRgAdminState=frDteRgAdminState, frDteDlciUsageState=frDteDlciUsageState, frDteStDlciHqCStatsEntry=frDteStDlciHqCStatsEntry, frDteStDlciProvEntry=frDteStDlciProvEntry, frDteDlciReceivedBECNs=frDteDlciReceivedBECNs, frDteVFramerStorageType=frDteVFramerStorageType, frDteOperStatusTable=frDteOperStatusTable, frDteLmiComponentName=frDteLmiComponentName, frDteLeqMaxPackets=frDteLeqMaxPackets, frameRelayDteCapabilitiesBE00A=frameRelayDteCapabilitiesBE00A, frDteOperationalState=frDteOperationalState, frDteLeqRowStatusEntry=frDteLeqRowStatusEntry, frDteLeqMaxPercentMulticast=frDteLeqMaxPercentMulticast, frDteFramerUnderruns=frDteFramerUnderruns, frDteStDlciRgLinkTable=frDteStDlciRgLinkTable, frDteLmi=frDteLmi, frDteDlciStateTable=frDteDlciStateTable, frDteRgMpEntry=frDteRgMpEntry, frDteLeqStatsEntry=frDteLeqStatsEntry, frDteRgLtDlciRowStatus=frDteRgLtDlciRowStatus, frDteRgOperStatusTable=frDteRgOperStatusTable, frDteErrType=frDteErrType, frDteErrStatsTable=frDteErrStatsTable, frDteFramerNormPrioLinkUtilFromIf=frDteFramerNormPrioLinkUtilFromIf, frDteOperEntry=frDteOperEntry, frDteRgOperationalState=frDteRgOperationalState, frDteStDlciHqTotalPktForwarded=frDteStDlciHqTotalPktForwarded, frameRelayDteCapabilities=frameRelayDteCapabilities, frDteRgIfIndex=frDteRgIfIndex, frDteLeqTotalPktHandled=frDteLeqTotalPktHandled, frDteLeqCurrentMulticastQueued=frDteLeqCurrentMulticastQueued, frDteDlciOperEntry=frDteDlciOperEntry, frDteVFramerProvTable=frDteVFramerProvTable, frDteVFramerLogicalProcessor=frDteVFramerLogicalProcessor, frDteFramerOperationalState=frDteFramerOperationalState, frDteRgSnmpOperStatus=frDteRgSnmpOperStatus, frDteVFramerOtherVirtualFramer=frDteVFramerOtherVirtualFramer, frDteVFramerFrmToOtherVFramer=frDteVFramerFrmToOtherVFramer, frDteStDlciIpCos=frDteStDlciIpCos, frDteFramerIndex=frDteFramerIndex, frDteDlciComponentName=frDteDlciComponentName, frDteDynDlciDefsExcessBurstAction=frDteDynDlciDefsExcessBurstAction, frDteLeqForcedPktDiscards=frDteLeqForcedPktDiscards, frDteDynDlciDefsIpCos=frDteDynDlciDefsIpCos, frDteLmiRowStatusTable=frDteLmiRowStatusTable, frDteStateTable=frDteStateTable, frDteDlciStorageType=frDteDlciStorageType, frDteFramerStorageType=frDteFramerStorageType, frDteLeqStatsTable=frDteLeqStatsTable, frDteFramerOverruns=frDteFramerOverruns, frDteStDlciLinkToRemoteGroup=frDteStDlciLinkToRemoteGroup, frDteStDlciHqQueueByteThreshold=frDteStDlciHqQueueByteThreshold, frDteStDlciCommittedBurst=frDteStDlciCommittedBurst, frDteLmiProcedures=frDteLmiProcedures, frDteUsageState=frDteUsageState, frDteStDlciHqQueueMulticastThreshold=frDteStDlciHqQueueMulticastThreshold, frDteDlciOperationalState=frDteDlciOperationalState, frDteStDlciHq=frDteStDlciHq, frDteDlciRowStatusEntry=frDteDlciRowStatusEntry, frDteStDlciExcessBurstAction=frDteStDlciExcessBurstAction, frDteLeqThrStatsTable=frDteLeqThrStatsTable, frDteStDlciHqProvTable=frDteStDlciHqProvTable, frDteIfEntryEntry=frDteIfEntryEntry, frDteErrStatsEntry=frDteErrStatsEntry, frDteFramerUtilEntry=frDteFramerUtilEntry, frDteLeqTotalPktQueued=frDteLeqTotalPktQueued, frDteProvEntry=frDteProvEntry, frDteErrFaultTime=frDteErrFaultTime, frDteRgBfrProvEntry=frDteRgBfrProvEntry, frDteRgBfrComponentName=frDteRgBfrComponentName, frDteRowStatusEntry=frDteRowStatusEntry, frDteFramerProvTable=frDteFramerProvTable, frDteRg=frDteRg, frDteFramerRowStatus=frDteFramerRowStatus, frDteDlciCreationTime=frDteDlciCreationTime, frDteRgIndex=frDteRgIndex, frDteVFramerStateTable=frDteVFramerStateTable, frDteFramerFrmToIf=frDteFramerFrmToIf, frDteRgStateEntry=frDteRgStateEntry, frameRelayDteGroupBE00=frameRelayDteGroupBE00, frDteIllegalDlci=frDteIllegalDlci, frDteRgIfAdminStatus=frDteRgIfAdminStatus, frDteStDlciHqStorageType=frDteStDlciHqStorageType, frDteVFramerStateEntry=frDteVFramerStateEntry, frDteStDlciHqTStatsEntry=frDteStDlciHqTStatsEntry, frDteVFramerRowStatusTable=frDteVFramerRowStatusTable, frDteStDlciHqTotalPktHandled=frDteStDlciHqTotalPktHandled, frDteFramerUtilTable=frDteFramerUtilTable, frDteLeqTimedOutPkt=frDteLeqTimedOutPkt, frDteStDlciHqCStatsTable=frDteStDlciHqCStatsTable, frDteDynDlciDefsStorageType=frDteDynDlciDefsStorageType, frDteDlciRowStatus=frDteDlciRowStatus, frDteVFramerFrmFromOtherVFramer=frDteVFramerFrmFromOtherVFramer, frameRelayDteMIB=frameRelayDteMIB, frameRelayDteCapabilitiesBE=frameRelayDteCapabilitiesBE, frDteIndex=frDteIndex, frDteDlciIndex=frDteDlciIndex, frDteStDlciRateEnforcement=frDteStDlciRateEnforcement, frDteLeqMemThresholdExceeded=frDteLeqMemThresholdExceeded, frDteRgRowStatus=frDteRgRowStatus, frDteStDlciHqMaxPackets=frDteStDlciHqMaxPackets, frameRelayDteGroup=frameRelayDteGroup, frDteStDlciCommittedInformationRate=frDteStDlciCommittedInformationRate, frDteRgProvEntry=frDteRgProvEntry, frDteRgStateTable=frDteRgStateTable, frDteStDlciHqCurrentPktQueued=frDteStDlciHqCurrentPktQueued, frDteStDlciHqThrStatsEntry=frDteStDlciHqThrStatsEntry, frDteComponentName=frDteComponentName, frDteRgBfrProvTable=frDteRgBfrProvTable, frDteVFramerUsageState=frDteVFramerUsageState, frDteDynDlciDefsRowStatus=frDteDynDlciDefsRowStatus, frDteLmiLmiStatus=frDteLmiLmiStatus, frDteDynDlciDefsCommittedBurst=frDteDynDlciDefsCommittedBurst, frDteDlci=frDteDlci, frDteRgBfrOprEntry=frDteRgBfrOprEntry, frDteStDlciHqIndex=frDteStDlciHqIndex, frDteStDlciHqThrStatsTable=frDteStDlciHqThrStatsTable, frDteDlciReceivedFrames=frDteDlciReceivedFrames, frDteDlciCommittedBurst=frDteDlciCommittedBurst, frDteStDlciHqByteThresholdExceeded=frDteStDlciHqByteThresholdExceeded, frDteLeqProvEntry=frDteLeqProvEntry, frDteStDlciHqPktThresholdExceeded=frDteStDlciHqPktThresholdExceeded, frDteStDlciStorageType=frDteStDlciStorageType, frDteStorageType=frDteStorageType, frDteOperTable=frDteOperTable, frDteLmiPollingInterval=frDteLmiPollingInterval, frDteDlciExcessBurstAction=frDteDlciExcessBurstAction, frDteErrFaults=frDteErrFaults, frDteRgBfrBfrIndex=frDteRgBfrBfrIndex, frDteRgComponentName=frDteRgComponentName, frDteCustomerIdentifier=frDteCustomerIdentifier, frDteIfEntryTable=frDteIfEntryTable, frDteLmiProvEntry=frDteLmiProvEntry, frDteXmitDiscardFramerDown=frDteXmitDiscardFramerDown, frDteDlcmiSequenceErr=frDteDlcmiSequenceErr, frDteDlciAdminState=frDteDlciAdminState, frDteStDlciStdRowStatus=frDteStDlciStdRowStatus, frDteLeqCStatsTable=frDteLeqCStatsTable, frDteVFramerProvEntry=frDteVFramerProvEntry, frDteFramerStateTable=frDteFramerStateTable, frDteStDlciHqRowStatusTable=frDteStDlciHqRowStatusTable, frDteFramerStatsEntry=frDteFramerStatsEntry, frDteLmiRowStatusEntry=frDteLmiRowStatusEntry, frDteLmiProvTable=frDteLmiProvTable, frDteProvTable=frDteProvTable, frDteLeqStorageType=frDteLeqStorageType, frDteLeqMulThresholdExceeded=frDteLeqMulThresholdExceeded, frDteDynDlciDefs=frDteDynDlciDefs, frDteDefragSequenceErrors=frDteDefragSequenceErrors, frDteRgBfrRowStatus=frDteRgBfrRowStatus, frDteDlciReceivedOctets=frDteDlciReceivedOctets, frDteStDlciExcessBurst=frDteStDlciExcessBurst, frDteRgOperStatusEntry=frDteRgOperStatusEntry, frDteStDlciRowStatusEntry=frDteStDlciRowStatusEntry, frDteErrData=frDteErrData, frDteRgBfrMacType=frDteRgBfrMacType, frDteAcceptUndefinedDlci=frDteAcceptUndefinedDlci, frDteLeqQueueByteThreshold=frDteLeqQueueByteThreshold, frDteVFramerRowStatus=frDteVFramerRowStatus, frDteFramer=frDteFramer, frDteDynDlciDefsProvEntry=frDteDynDlciDefsProvEntry, frDteStDlciHqMulThresholdExceeded=frDteStDlciHqMulThresholdExceeded, frDteDynDlciDefsCommittedInformationRate=frDteDynDlciDefsCommittedInformationRate, frDteLinkOperState=frDteLinkOperState, frDteRgBfrRowStatusEntry=frDteRgBfrRowStatusEntry, frDteRgLtDlciValue=frDteRgLtDlciValue, frDteLeqTotalMulticastPkt=frDteLeqTotalMulticastPkt, frDteDlciLastTimeChange=frDteDlciLastTimeChange, frDteStDlciHqStatsTable=frDteStDlciHqStatsTable, frDteLeqHardwareForcedPkt=frDteLeqHardwareForcedPkt, frDteRecvDiscardLmiInactive=frDteRecvDiscardLmiInactive, frDteFramerUsageState=frDteFramerUsageState, frDteStDlciHqTStatsTable=frDteStDlciHqTStatsTable, frDteDlcmiProtoErr=frDteDlcmiProtoErr, frDteLeqQueuePurgeDiscards=frDteLeqQueuePurgeDiscards, frDteStDlciRgLinkEntry=frDteStDlciRgLinkEntry, frDteStDlciHqTotalMulticastPkt=frDteStDlciHqTotalMulticastPkt, frDteLmiFullEnquiryInterval=frDteLmiFullEnquiryInterval, frDteLeqRowStatusTable=frDteLeqRowStatusTable, frDteCidDataTable=frDteCidDataTable, frDteRgIfEntryTable=frDteRgIfEntryTable, frDteErrTime=frDteErrTime, frDteDlciReceivedFECNs=frDteDlciReceivedFECNs, frDteRgRowStatusTable=frDteRgRowStatusTable, frDteDlciCommittedInformationRate=frDteDlciCommittedInformationRate, frDteErrTable=frDteErrTable, frDteStDlciComponentName=frDteStDlciComponentName, frDteRgMpTable=frDteRgMpTable, frDteStDlciHqMemThresholdExceeded=frDteStDlciHqMemThresholdExceeded, frDteErrEntry=frDteErrEntry, frDteXmitDiscardPvcInactive=frDteXmitDiscardPvcInactive, frDteFramerAdminState=frDteFramerAdminState, frameRelayDteGroupBE00A=frameRelayDteGroupBE00A, frDteVFramerStatsEntry=frDteVFramerStatsEntry, frDteLmiErrorThreshold=frDteLmiErrorThreshold, frDteDlciRateEnforcement=frDteDlciRateEnforcement, frDteDynDlciDefsRowStatusEntry=frDteDynDlciDefsRowStatusEntry, frDteStDlciHqCurrentBytesQueued=frDteStDlciHqCurrentBytesQueued, frDteCidDataEntry=frDteCidDataEntry, frDteStDlciHqTotalPktQueued=frDteStDlciHqTotalPktQueued, frDteLeqProvTable=frDteLeqProvTable, frDteFramerProvEntry=frDteFramerProvEntry, frDteLeqPktThresholdExceeded=frDteLeqPktThresholdExceeded, frDteLmiIndex=frDteLmiIndex, frDteStDlciHqTimeToLive=frDteStDlciHqTimeToLive, frDteRgRowStatusEntry=frDteRgRowStatusEntry, frDteVFramerOperationalState=frDteVFramerOperationalState, frDteLmiRowStatus=frDteLmiRowStatus, frDteStDlciHqStatsEntry=frDteStDlciHqStatsEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayDteMIB", frDteLeqTStatsEntry=frDteLeqTStatsEntry, frDteStDlci=frDteStDlci, frDteRgBfrOprTable=frDteRgBfrOprTable, frDteLeqMaxMsecData=frDteLeqMaxMsecData, frDteFramerFrmFromIf=frDteFramerFrmFromIf, frDteDlciSentFrames=frDteDlciSentFrames, frDteRecvDiscardPvcInactive=frDteRecvDiscardPvcInactive, frameRelayDteCapabilitiesBE00=frameRelayDteCapabilitiesBE00, frDteLeqComponentName=frDteLeqComponentName, frDteLeqTotalPktForwarded=frDteLeqTotalPktForwarded, frDteLmiStorageType=frDteLmiStorageType, frDteLmiOperEntry=frDteLmiOperEntry, frDteLeqIndex=frDteLeqIndex, frDteRgUsageState=frDteRgUsageState, frDteIfIndex=frDteIfIndex, frDteLeqRowStatus=frDteLeqRowStatus, frDteRgLtDlciEntry=frDteRgLtDlciEntry, frDteStDlciHqQueuePurgeDiscards=frDteStDlciHqQueuePurgeDiscards, frDteFramerInterfaceName=frDteFramerInterfaceName, frDteDynDlciDefsComponentName=frDteDynDlciDefsComponentName, frameRelayDteGroupBE=frameRelayDteGroupBE, frDteIfAdminStatus=frDteIfAdminStatus, frDteXmitDiscardCirExceeded=frDteXmitDiscardCirExceeded, frDteStDlciHqProvEntry=frDteStDlciHqProvEntry, frDteLeqThrStatsEntry=frDteLeqThrStatsEntry, frDteRgLtDlciTable=frDteRgLtDlciTable, frDteReceiveShort=frDteReceiveShort, frDteLeq=frDteLeq, frDteVFramerAdminState=frDteVFramerAdminState, frDteStDlciHqMaxMsecData=frDteStDlciHqMaxMsecData, frDteFramerStateEntry=frDteFramerStateEntry, frDteVFramerIndex=frDteVFramerIndex, frDteRowStatus=frDteRowStatus, frDteLeqCurrentPktQueued=frDteLeqCurrentPktQueued, frDteStDlciProvTable=frDteStDlciProvTable, frDteFramerComponentName=frDteFramerComponentName, frDteRgBfrIndex=frDteRgBfrIndex, frDteLmiOperTable=frDteLmiOperTable, frDteStDlciHqRowStatusEntry=frDteStDlciHqRowStatusEntry, frDteVFramerOctetFromOtherVFramer=frDteVFramerOctetFromOtherVFramer, frDteStDlciHqCurrentMulticastQueued=frDteStDlciHqCurrentMulticastQueued, frDteRowStatusTable=frDteRowStatusTable, frDteStDlciHqComponentName=frDteStDlciHqComponentName, frDteRgIfEntryEntry=frDteRgIfEntryEntry, frDteFramerStatsTable=frDteFramerStatsTable, frDteDynDlciDefsStdRowStatus=frDteDynDlciDefsStdRowStatus, frDteFramerRowStatusEntry=frDteFramerRowStatusEntry, frDteDlciDlciState=frDteDlciDlciState, frDteDynDlciDefsIndex=frDteDynDlciDefsIndex, frDteLeqCurrentBytesQueued=frDteLeqCurrentBytesQueued, frDteDlciOperTable=frDteDlciOperTable, frDteDlciDiscardedFrames=frDteDlciDiscardedFrames, frDteFramerCrcErrors=frDteFramerCrcErrors, frDteRgLinkToProtocolPort=frDteRgLinkToProtocolPort, frDteRgStorageType=frDteRgStorageType, frDteRecvDiscardPvcDown=frDteRecvDiscardPvcDown, frDteRgBfrMacAddr=frDteRgBfrMacAddr, frDteRgBfrStorageType=frDteRgBfrStorageType, frDteRgProvTable=frDteRgProvTable, frDteDlciCreationType=frDteDlciCreationType, frDteLeqQueuePktThreshold=frDteLeqQueuePktThreshold, frDteLeqTotalPktDiscards=frDteLeqTotalPktDiscards, frDteDynDlciDefsExcessBurst=frDteDynDlciDefsExcessBurst, frDteRgBfrRowStatusTable=frDteRgBfrRowStatusTable)
