#
# PySNMP MIB module VMWARE-ENV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VMWARE-ENV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, Unsigned32, TimeTicks, MibIdentifier, iso, Bits, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Unsigned32", "TimeTicks", "MibIdentifier", "iso", "Bits", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Integer32", "ObjectIdentity")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
vmwESX, = mibBuilder.importSymbols("VMWARE-PRODUCTS-MIB", "vmwESX")
vmwNotifications, vmwProductSpecific = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwNotifications", "vmwProductSpecific")
VmwSubsystemTypes, VmwCimName, VmwCIMAlertFormat, VmwCIMAlertTypes, VmwLongSnmpAdminString, VmwSubsystemStatus, VmwCIMSeverity = mibBuilder.importSymbols("VMWARE-TC-MIB", "VmwSubsystemTypes", "VmwCimName", "VmwCIMAlertFormat", "VmwCIMAlertTypes", "VmwLongSnmpAdminString", "VmwSubsystemStatus", "VmwCIMSeverity")
vmwEnvironmentalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10))
vmwEnvironmentalMIB.setRevisions(('2010-05-12 00:00', '2008-10-30 00:00', '2007-12-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vmwEnvironmentalMIB.setRevisionsDescriptions(('This revision adds support for CIM OMC_IpmiAlertIndication as the source of events instead of only IPMI sensors thus more areas of hardware can be reported on. This required a new notification set to be defined replacing previous notifications.', 'Introduce vmwESXNotification to match ESX 3.5 agent.', 'This is the first revision of this MIB module.',))
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setLastUpdated('201005120000Z')
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setOrganization('VMware, Inc')
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setContactInfo('VMware, Inc 3401 Hillview Ave Palo Alto, CA 94304 Tel: 1-877-486-9273 or 650-427-5000 Fax: 650-427-5001 Web: http://communities.vmware.com/community/developer/forums/managementapi ')
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setDescription('This MIB module identifies hardware components of a machine as provided by IPMI.')
vmwEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20))
vmwESXNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0))
if mibBuilder.loadTexts: vmwESXNotifications.setStatus('current')
if mibBuilder.loadTexts: vmwESXNotifications.setDescription('Parent of all ESX specific notifications (traps, informs).')
vmwEnvNumber = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvNumber.setStatus('current')
if mibBuilder.loadTexts: vmwEnvNumber.setDescription('Count of number of conceptual rows in vmwEnvTable')
vmwEnvLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvLastChange.setStatus('current')
if mibBuilder.loadTexts: vmwEnvLastChange.setDescription('The value of sysUptime when a conceptual row was added or deleted from this table')
vmwEnvTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3), )
if mibBuilder.loadTexts: vmwEnvTable.setStatus('current')
if mibBuilder.loadTexts: vmwEnvTable.setDescription('This table is populated from monitoring subsystems such as IPMI One conceptual row is maintained for each reporting component. Conceptual rows are not persistent across device resets')
vmwEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1), ).setIndexNames((0, "VMWARE-ENV-MIB", "vmwEnvIndex"))
if mibBuilder.loadTexts: vmwEnvEntry.setStatus('current')
if mibBuilder.loadTexts: vmwEnvEntry.setDescription('One entry for each physical component reporting its status to ESX Operating System')
vmwEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: vmwEnvIndex.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndex.setDescription('A unique identifier that does not persist across management restarts')
vmwSubsystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 2), VmwSubsystemTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwSubsystemType.setStatus('current')
if mibBuilder.loadTexts: vmwSubsystemType.setDescription('Hardware component reporting environmental state')
vmwHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 3), VmwSubsystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHardwareStatus.setStatus('current')
if mibBuilder.loadTexts: vmwHardwareStatus.setDescription('Last reported state of this component')
vmwEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEventDescription.setStatus('current')
if mibBuilder.loadTexts: vmwEventDescription.setDescription('Human readable description of this event')
vmwEnvHardwareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvHardwareTime.setStatus('current')
if mibBuilder.loadTexts: vmwEnvHardwareTime.setDescription('Value of sysUptime when vmwHardwareStatus was obtained')
vmwEnvHardwareEvent = NotificationType((1, 3, 6, 1, 4, 1, 6876, 0, 301)).setObjects(("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"))
if mibBuilder.loadTexts: vmwEnvHardwareEvent.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvHardwareEvent.setDescription('This notification, if the agent is so configured, may be sent when the system has detected a material change in physical condition of the hardware')
vmwESXEnvHardwareEvent = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 301)).setObjects(("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"))
if mibBuilder.loadTexts: vmwESXEnvHardwareEvent.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvHardwareEvent.setDescription('ESX Specific version of this notification, if the agent is so configured, may be sent when the ESX Operating System has detected a material change in physical condition of the hardware')
vmwEnvSource = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sensors", 2), ("indications", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvSource.setStatus('current')
if mibBuilder.loadTexts: vmwEnvSource.setDescription('The source being used to obtain hardware state.')
vmwEnvInIndications = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvInIndications.setStatus('current')
if mibBuilder.loadTexts: vmwEnvInIndications.setDescription('Number of HTTP POST msgs containing CIM Indications in XML as received by agent.')
vmwEnvLastIn = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 102), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvLastIn.setStatus('current')
if mibBuilder.loadTexts: vmwEnvLastIn.setDescription('sysUptime when agent last received an indication.')
vmwEnvOutNotifications = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvOutNotifications.setStatus('current')
if mibBuilder.loadTexts: vmwEnvOutNotifications.setDescription('Number of notifications (traps|informs) sent that originated as CIM indication.')
vmwEnvInErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvInErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvInErrs.setDescription('Number of CIM Indications that agent did not complete receipt of.')
vmwEnvIndOidErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvIndOidErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndOidErrs.setDescription('Number of CIM Indications having a MappingString qualifier for which the value was not a valid oid.')
vmwEnvCvtValueErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvCvtValueErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCvtValueErrs.setDescription('Number of CIM Indication properties having a MappingString qualifier for which the cim value for the given cim type could not be converted.')
vmwEnvCvtSyntaxErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvCvtSyntaxErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCvtSyntaxErrs.setDescription('Number of CIM Indication properties having a MappingString qualifier for which the cim type could not be converted to smi syntax.')
vmwEnvCvtOidErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvCvtOidErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCvtOidErrs.setDescription('Number of CIM Indication properties having a MappingString qualifier for which the the oid was not valid.')
vmwEnvGetClassErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvGetClassErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvGetClassErrs.setDescription('Number of CIM GetClass operations over a given cim indication class and namespace could not be completed (timeout) or returned error.')
vmwEnvPropertySkips = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvPropertySkips.setStatus('current')
if mibBuilder.loadTexts: vmwEnvPropertySkips.setDescription('Number of CIM indications having properties which do not have MappingString qualifier in the class definition and were not converted, sent along with the notification.')
vmwEnvIndicationSkips = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvIndicationSkips.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndicationSkips.setDescription('Number of CIM indications recieved for which GetClass reported no MappingStrings qualifier and were not converted to a notification.')
vmwEnvCIM = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 30))
vmwEnvDescription = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 1), VmwLongSnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvDescription.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property Description')
if mibBuilder.loadTexts: vmwEnvDescription.setStatus('current')
if mibBuilder.loadTexts: vmwEnvDescription.setDescription('A short description of the Indication.')
vmwEnvEventTime = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvEventTime.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property EventTime')
if mibBuilder.loadTexts: vmwEnvEventTime.setStatus('current')
if mibBuilder.loadTexts: vmwEnvEventTime.setDescription('The time and date the underlying event was first detected. May be set to the time the SNMP agent recieved the notification if in the incoming CIM indication the value is NULL due to the creating entity not being capable of providing this information. This value is based on the notion of local date and time of the Managed System Element generating the Indication.')
vmwEnvIndicationTime = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvIndicationTime.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property IndicationTime')
if mibBuilder.loadTexts: vmwEnvIndicationTime.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndicationTime.setDescription('The time and date of creation of the underlying Indication received by the snmp agent. The property may be set to the time SNMP agent received the notification if the entity creating the Indication is not capable of determining this information and delivers a null IndicationTime property. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.')
vmwEnvPerceivedSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 4), VmwCIMSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvPerceivedSeverity.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property PerceivedSeverity')
if mibBuilder.loadTexts: vmwEnvPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: vmwEnvPerceivedSeverity.setDescription("An enumerated value that describes the severity of the Alert Indication from the notifier's point of view.")
vmwEnvAlertType = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 5), VmwCIMAlertTypes()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvAlertType.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property AlertType')
if mibBuilder.loadTexts: vmwEnvAlertType.setStatus('current')
if mibBuilder.loadTexts: vmwEnvAlertType.setDescription('Primary classification of the Indication.')
vmwEnvSysCreationClassName = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 6), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvSysCreationClassName.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property SystemCreationClassName')
if mibBuilder.loadTexts: vmwEnvSysCreationClassName.setStatus('current')
if mibBuilder.loadTexts: vmwEnvSysCreationClassName.setDescription("The scoping System's CreationClassName for the Provider generating this Indication.")
vmwEnvAlertingElement = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 7), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvAlertingElement.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property AlertingManagedElement')
if mibBuilder.loadTexts: vmwEnvAlertingElement.setStatus('current')
if mibBuilder.loadTexts: vmwEnvAlertingElement.setDescription('The identifying information of the entity (ie, the instance) for which this notification is generated. The property contains the CIM path of an CIM object instance, encoded as a string parameter - if the instance is modeled in the CIM Schema. If not a CIM instance, the property contains some identifying string that names the entity for which the Alert is generated. The path or identifying string is formatted per the AlertingElementFormat property.')
vmwEnvAlertingFormat = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 8), VmwCIMAlertFormat()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvAlertingFormat.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property AlertingElementFormat')
if mibBuilder.loadTexts: vmwEnvAlertingFormat.setStatus('current')
if mibBuilder.loadTexts: vmwEnvAlertingFormat.setDescription('The format of the AlertingManagedElement property is interpretable based upon the value of this property.')
vmwEnvSystemName = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 9), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvSystemName.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property SystemName')
if mibBuilder.loadTexts: vmwEnvSystemName.setStatus('current')
if mibBuilder.loadTexts: vmwEnvSystemName.setDescription("The scoping System's Name for the Provider generating this message.")
vmwEnvProviderName = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 10), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvProviderName.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property ProviderName')
if mibBuilder.loadTexts: vmwEnvProviderName.setStatus('current')
if mibBuilder.loadTexts: vmwEnvProviderName.setDescription('The name of the CIM provider, a software module loaded into the CIM subsystem, generating this message.')
vmwESXEnvHardwareAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 302)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvHardwareAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvHardwareAlert.setDescription('A hardware alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvHardwareAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvBatteryAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 303)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvBatteryAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvBatteryAlert.setDescription('A battery alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvBatteryAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvChassisAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 304)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvChassisAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvChassisAlert.setDescription('A chassis alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvChassisAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvThermalAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 305)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvThermalAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvThermalAlert.setDescription('A cooling/thermal alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvThermalAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvDiskAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 306)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvDiskAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvDiskAlert.setDescription('A disk drive alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvDiskAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvPowerAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 307)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvPowerAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvPowerAlert.setDescription('A power suppply alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvPowerAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvProcessorAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 308)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvProcessorAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvProcessorAlert.setDescription('A IPMI processor alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvProcessorAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvMemoryAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 309)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvMemoryAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvMemoryAlert.setDescription('A IPMI memory alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvMemoryAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvBIOSAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 310)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvBIOSAlert.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvBIOSAlert.setDescription('BIOS System Event Log alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvBIOSAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwEnvironmentalMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2))
vmwEnvironmentMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1))
vmwEnvMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2))
vmwEnvMIBBasicCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 4)).setObjects(("VMWARE-ENV-MIB", "vmwEnvAlertGroup"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup2"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance3 = vmwEnvMIBBasicCompliance3.setStatus('current')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance3.setDescription('The compliance statement for entities which implement the VMWARE-ENV-MIB.')
vmwEnvMIBBasicCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 3)).setObjects(("VMWARE-ENV-MIB", "vmwEnvironmentGroup"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup"), ("VMWARE-ENV-MIB", "vmwEnvNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance2 = vmwEnvMIBBasicCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance2.setDescription('The compliance statement for entities which implement the VMWARE-ENV-MIB.')
vmwEnvMIBBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 2)).setObjects(("VMWARE-ENV-MIB", "vmwEnvironmentGroup"), ("VMWARE-ENV-MIB", "vmwEnvNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance = vmwEnvMIBBasicCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance.setDescription('The compliance statement for entities which implement the VMWARE-ENV-MIB.')
vmwEnvAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 5)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSource"), ("VMWARE-ENV-MIB", "vmwEnvInIndications"), ("VMWARE-ENV-MIB", "vmwEnvLastIn"), ("VMWARE-ENV-MIB", "vmwEnvOutNotifications"), ("VMWARE-ENV-MIB", "vmwEnvInErrs"), ("VMWARE-ENV-MIB", "vmwEnvIndOidErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtValueErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtSyntaxErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtOidErrs"), ("VMWARE-ENV-MIB", "vmwEnvGetClassErrs"), ("VMWARE-ENV-MIB", "vmwEnvPropertySkips"), ("VMWARE-ENV-MIB", "vmwEnvIndicationSkips"), ("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvAlertGroup = vmwEnvAlertGroup.setStatus('current')
if mibBuilder.loadTexts: vmwEnvAlertGroup.setDescription('These objects provide physical hardware environmental details as reported by CIM subsystem.')
vmwEnvironmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 1)).setObjects(("VMWARE-ENV-MIB", "vmwEnvNumber"), ("VMWARE-ENV-MIB", "vmwEnvLastChange"), ("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvironmentGroup = vmwEnvironmentGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvironmentGroup.setDescription('These objects provide physical hardware environmental details.')
vmwEnvNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 2)).setObjects(("VMWARE-ENV-MIB", "vmwEnvHardwareEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvNotificationGroup = vmwEnvNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvNotificationGroup.setDescription('Notifications related to physical subsystems.')
vmwESXEnvNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 3)).setObjects(("VMWARE-ENV-MIB", "vmwESXEnvHardwareEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwESXEnvNotificationGroup = vmwESXEnvNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvNotificationGroup.setDescription('ESX System specific notifications about physical subsystems.')
vmwESXEnvNotificationGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 4)).setObjects(("VMWARE-ENV-MIB", "vmwESXEnvHardwareAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvBatteryAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvChassisAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvThermalAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvDiskAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvPowerAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvProcessorAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvMemoryAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvBIOSAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwESXEnvNotificationGroup2 = vmwESXEnvNotificationGroup2.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvNotificationGroup2.setDescription('ESX System specific notifications about physical subsystems.')
mibBuilder.exportSymbols("VMWARE-ENV-MIB", vmwEnvMIBBasicCompliance2=vmwEnvMIBBasicCompliance2, vmwESXEnvHardwareEvent=vmwESXEnvHardwareEvent, vmwEnvTable=vmwEnvTable, vmwEnvDescription=vmwEnvDescription, vmwEnvInIndications=vmwEnvInIndications, vmwEnvOutNotifications=vmwEnvOutNotifications, vmwEnvAlertingFormat=vmwEnvAlertingFormat, vmwEnvLastIn=vmwEnvLastIn, PYSNMP_MODULE_ID=vmwEnvironmentalMIB, vmwEnvLastChange=vmwEnvLastChange, vmwEventDescription=vmwEventDescription, vmwHardwareStatus=vmwHardwareStatus, vmwEnvSource=vmwEnvSource, vmwEnvGetClassErrs=vmwEnvGetClassErrs, vmwEnvAlertGroup=vmwEnvAlertGroup, vmwEnvCvtSyntaxErrs=vmwEnvCvtSyntaxErrs, vmwEnvMIBBasicCompliance=vmwEnvMIBBasicCompliance, vmwEnvNotificationGroup=vmwEnvNotificationGroup, vmwEnvCvtValueErrs=vmwEnvCvtValueErrs, vmwEnvironmentMIBCompliances=vmwEnvironmentMIBCompliances, vmwEnvProviderName=vmwEnvProviderName, vmwEnvIndex=vmwEnvIndex, vmwEnvEventTime=vmwEnvEventTime, vmwESXEnvHardwareAlert=vmwESXEnvHardwareAlert, vmwEnvAlertType=vmwEnvAlertType, vmwESXEnvPowerAlert=vmwESXEnvPowerAlert, vmwEnvironmentGroup=vmwEnvironmentGroup, vmwESXEnvChassisAlert=vmwESXEnvChassisAlert, vmwEnvCIM=vmwEnvCIM, vmwEnvEntry=vmwEnvEntry, vmwEnvironmentalMIB=vmwEnvironmentalMIB, vmwEnvIndOidErrs=vmwEnvIndOidErrs, vmwEnvIndicationSkips=vmwEnvIndicationSkips, vmwESXEnvMemoryAlert=vmwESXEnvMemoryAlert, vmwESXEnvNotificationGroup2=vmwESXEnvNotificationGroup2, vmwEnvironmentalMIBConformance=vmwEnvironmentalMIBConformance, vmwEnvMIBGroups=vmwEnvMIBGroups, vmwEnvAlertingElement=vmwEnvAlertingElement, vmwEnvSysCreationClassName=vmwEnvSysCreationClassName, vmwESXEnvNotificationGroup=vmwESXEnvNotificationGroup, vmwEnvPerceivedSeverity=vmwEnvPerceivedSeverity, vmwESXNotifications=vmwESXNotifications, vmwESXEnvDiskAlert=vmwESXEnvDiskAlert, vmwEnvCvtOidErrs=vmwEnvCvtOidErrs, vmwEnvHardwareTime=vmwEnvHardwareTime, vmwEnv=vmwEnv, vmwSubsystemType=vmwSubsystemType, vmwESXEnvThermalAlert=vmwESXEnvThermalAlert, vmwEnvPropertySkips=vmwEnvPropertySkips, vmwEnvInErrs=vmwEnvInErrs, vmwEnvSystemName=vmwEnvSystemName, vmwESXEnvBatteryAlert=vmwESXEnvBatteryAlert, vmwEnvMIBBasicCompliance3=vmwEnvMIBBasicCompliance3, vmwEnvIndicationTime=vmwEnvIndicationTime, vmwEnvNumber=vmwEnvNumber, vmwESXEnvBIOSAlert=vmwESXEnvBIOSAlert, vmwESXEnvProcessorAlert=vmwESXEnvProcessorAlert, vmwEnvHardwareEvent=vmwEnvHardwareEvent)
