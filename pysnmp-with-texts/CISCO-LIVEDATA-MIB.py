#
# PySNMP MIB module CISCO-LIVEDATA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LIVEDATA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Bits, TimeTicks, Gauge32, IpAddress, Integer32, MibIdentifier, ModuleIdentity, ObjectIdentity, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Bits", "TimeTicks", "Gauge32", "IpAddress", "Integer32", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Unsigned32")
DateAndTime, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "DisplayString")
ciscoLivedataMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 814))
ciscoLivedataMIB.setRevisions(('2013-05-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLivedataMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoLivedataMIB.setLastUpdated('201308290000Z')
if mibBuilder.loadTexts: ciscoLivedataMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoLivedataMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLivedataMIB.setDescription("Cisco LiveData is the next generation reporting product for Cisco Unified Contact Center Enterprise (CCE). Cisco LiveData provides a horizontally scalable, highly available architecture to support systems with large numbers of reporting users. LiveData enables fast refresh rates on real-time data (3 seconds or less). A LiveData node consumes real-time data streams from one or more sources, processes the data and publishes the resulting data to solution consumers. Consumers may be database management systems, applications or reporting engines. Cisco LiveData aggregates and publishes real-time data and metrics pushed to it (e.g. from the CCE router and/or peripheral gateway components) to a message bus; Cisco Unified Intelligence Center (CUIC) and the CCE Administrator Workstation (AW) subscribe to this message bus to receive real-time data updates. CUIC users then build reports using this real-time data; other CCE clients may also query this real-time data from the CCE AW database. A LiveData cluster consists of one or more nodes; one is designated as the master with additional worker nodes as needed. A LiveData cluster may have a remote peer cluster that works cooperatively in a fault-tolerant model. LiveData cluster peers communicate with one another to negotiate who is the 'active' cluster and who is on 'standby' (only one cluster will be active at a time). If the active cluster fails, the standby cluster will transition to active and begin consuming the data streams previously consumed by the peer cluster. In small deployments, a LiveData cluster will be collocated with CUIC in the same server virtual machine; in larger deployments, a LiveData cluster may include several nodes that may or may not be collocated with CUIC. A single node in a LiveData cluster will have multiple services running in the guest virtual machine that are critical to the successful function of that node. Services may be distributed across the nodes of a cluster to balance the workload. Each node will establish and maintain connections to data sources in the solution. CISCO-LIVEDATA-MIB defines instrumentation unique to the LiveData servers (virtual machines). The instrumentation includes objects of: 1) a general nature - attributes of the device and application, 2) cluster status* and identity, 3) service status and identity and 4) connection status and attributes (including metrics). 5) events * It is important to note that cluster status is shared across all nodes of a cluster; cluster status is not device-specific unless there is only one node in the cluster. The MIB also defines a single notification type; all nodes in all clusters may emit notifications. Service and connection instrumentation is exposed as tables. The number of entries within each table may change over time, adapting to changes within the cluster. Glossary: --------- AW Administrator Workstation component of a Cisco Unified Contact Center Enterprise deployment. The AW collects and serves real-time and configuration data to the CCE solution. CCE (Cisco Unified) Contact Center Enterprise; CCE delivers intelligent contact routing, call treatment, network-to-desktop computer telephony integration, and multichannel contact management over an IP infrastructure. CUIC Cisco Unified Intelligence Center; CUIC is a web- based reporting application that provides real- time and historical reporting in an easy-to-use, wizard-based application for Cisco Contact Center products. UCCE Unified Contact Center Enterprise; see 'CCE'.")
class CldIndex(TextualConvention, Unsigned32):
    description = 'This textual convention represents the index value of an entry in a table. In this MIB, table entries are sorted within a table in an ascending order based on its index value. Indexes for table entries are assigned by the SNMP agent.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CldSeverity(TextualConvention, Integer32):
    description = "This textual convention indicates the severity level of a notification or a logged event (or trace) message. The severity levels are: 'emergency': Events of this severity indicate that a devastating failure has occurred; the system or service is unusable. Immediate operator intervention is required. 'alert': Events of this severity indicate that a devastating failure is imminent that will render the system unusable. Immediate operator attention is necessary. 'critical': Events of this severity indicate that a service-impacting failure is likely to occur soon which is the result of an error that was not appropriately handled by the system. Operator attention is needed as soon as possible. 'error': Events of this severity contain important operational state information and may indicate that the system has experienced a temporary impairment or an error that was appropriately handled by the system. An operator should review the notification soon as possible to determine if additional action is needed. 'warning': Events of this severity contain important operational state information that may be a precursor to an error occurrence. An operator should review the event soon to determine if additional action is needed. 'notice': Events of this severity contain health or operational state information that may be pertinent to the health of the system but do not require the immediate attention of the administrator. 'informational': Events of this severity contain interesting system-level information that is valuable to an administrator in time, however, the event itself does not indicate a fault or an impairment condition. 'debug': Events of this severity provide supplemental information that may be beneficial toward diagnosing or resolving a problem but do not necessarily provide operational health status."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8))

ciscoLivedataMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 0))
ciscoLivedataMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 1))
cldGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1))
cldCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 2))
cldServices = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3))
cldReportingConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4))
cldEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5))
ciscoLivedataMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 2))
ciscoLivedataMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 1))
ciscoLivedataMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2))
cldServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldServerName.setStatus('current')
if mibBuilder.loadTexts: cldServerName.setDescription('This object indicates the fully-qualified domain name of the Cisco LiveData server.')
cldDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldDescription.setStatus('current')
if mibBuilder.loadTexts: cldDescription.setDescription('This object indicates a textual description of the Cisco LiveData software installed on this server. This is typically the full name of the application.')
cldVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldVersion.setStatus('current')
if mibBuilder.loadTexts: cldVersion.setDescription('This object indicates the version number of the Cisco LiveData software that is installed on this server.')
cldStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldStartTime.setStatus('current')
if mibBuilder.loadTexts: cldStartTime.setDescription('This object indicates the date and time that the Cisco LiveData software (the primary application service) was started on this server.')
cldTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: cldTimeZoneName.setDescription('This object indicates the textual name of the time zone where the Cisco LiveData server (host) is physically located.')
cldTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 6), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldTimeZoneOffset.setStatus('current')
if mibBuilder.loadTexts: cldTimeZoneOffset.setDescription('This object indicates the number of minutes that the local time, in the time zone where the Cisco LiveData server (host) is physically located, differs from Greenwich Mean Time (GMT).')
cldEventNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldEventNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cldEventNotifEnable.setDescription("This object specifies whether event generation is enabled in the SNMP entity. This object allows a management station to disable, during run time, all outgoing Cisco LiveData notifications. This is typically done during a maintenance window when many application components are frequently stopped, reconfigured and restarted, which can generate periodic floods of notifications that are not desirable during a maintenance period. Please note that this setting is persistent even after a restart of the agent; the management station must explicitly reset this object value back to 'true' to re-enable outgoing application notifications from this device. When the value of this object is 'true', notifications will be sent to configured management stations. When the value is set to 'false' by a management station, notifications will not be sent to configured management stations. The default value of this object is 'true'. The value of this object does not alter the normal table management behavior of the event table, i.e., generated events will be stored in the event table regardless of the value of this object.")
cldClusterID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 2, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldClusterID.setStatus('current')
if mibBuilder.loadTexts: cldClusterID.setDescription("This object indicates a cluster- unique textual identifier for this cluster (e.g. 'sideA').")
cldClusterStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pairedActive", 1), ("pairedStandby", 2), ("isolatedActive", 3), ("isolatedStandby", 4), ("testing", 5), ("outOfService", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldClusterStatus.setStatus('current')
if mibBuilder.loadTexts: cldClusterStatus.setDescription("This object indicates the current status of this cluster of Cisco LiveData servers. A cluster is a group of one or more Cisco LiveData servers that work cooperatively to consume and process inbound real-time data from one or more data sources. Work is distributed between worker nodes within the cluster by the master node. A cluster may have a peer cluster in a fault-tolerant deployment model that will assume data processing duties in the event where its active peer cluster fails. 'pairedActive': The cluster is actively processing data and is communicating with its remote peer cluster. 'pairedStandby': The cluster is standing by (waiting to process data if necessary) and is communicating with its remote peer cluster. 'isolatedActive': The cluster is is actively processing data but has lost peer-to-peer communication with it's remote peer cluster. 'isolatedStandby': The cluster is standing by (waiting to process data if necessary) but has lost peer-to-peer communication with its remote peer cluster. 'testing': The cluster is unable to communicate with the remote peer cluster via the peer-to-peer connection and it is invoking the 'test-other-side' procedure to decide whether to become active or to go into a standby state. 'outOfService': The cluster is out of service.")
cldClusterAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 2, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldClusterAddress.setStatus('current')
if mibBuilder.loadTexts: cldClusterAddress.setDescription('This object indicates the hostname or the IP address of the remote peer cluster for peer-to-peer communication with the remote cluster.')
cldServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3, 1), )
if mibBuilder.loadTexts: cldServiceTable.setStatus('current')
if mibBuilder.loadTexts: cldServiceTable.setDescription('The service table is a list of Cisco LiveData services. A service in this context is one or more executable processes that have been configured to run on this server. Service table objects include both the service name and the current run state of that service. A single LiveData server will have multiple running services, each of a different type, that encompass the LiveData solution on a particular server. Some of these services work cooperatively with similar or dependent services on other server nodes in the cluster. The SNMP agent constructs the service table at startup; the agent refreshes this table periodically during runtime to offer a near real-time status of configured services. Service table entries cannot be added to or deleted from the table by the management station. All objects in this table are read-only.')
cldServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LIVEDATA-MIB", "cldServiceIndex"))
if mibBuilder.loadTexts: cldServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cldServiceEntry.setDescription('Each service entry represents a Cisco LiveData service. The LiveData application software includes a collection of related services, each of which perform a specific, necessary function of the application.')
cldServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3, 1, 1, 1), CldIndex())
if mibBuilder.loadTexts: cldServiceIndex.setStatus('current')
if mibBuilder.loadTexts: cldServiceIndex.setDescription('The service index is a value that uniquely identifies an entry in the services table. This value is arbitrarily assigned by the SNMP agent.')
cldServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldServiceName.setStatus('current')
if mibBuilder.loadTexts: cldServiceName.setDescription('This object indicates a user-intuitive textual name for the Cisco LiveData service.')
cldServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("starting", 3), ("started", 4), ("active", 5), ("stopping", 6), ("stopped", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldServiceState.setStatus('current')
if mibBuilder.loadTexts: cldServiceState.setDescription("This object indicates the last known state of the Cisco LiveData service. The object value identifies the run status of a configured service installed on the Cisco LiveData server. The possible service states are: 'unknown': The status of the service cannot be determined. 'disabled': The service has been explicitly disabled by an administrator. 'starting': The service is currently starting up but has not yet completed its startup procedure. 'started': The service has completed its startup procedure and is currently running. 'active': The service has been started, is currently running and is actively processing data. 'stopping': The service is stopping and is in the midst of its shutdown procedure. 'stopped': The service is stopped. The service may be dysfunctional or impaired, or it has been explicitly stopped by an administrator.")
cldServiceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 3, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldServiceUpTime.setStatus('current')
if mibBuilder.loadTexts: cldServiceUpTime.setDescription('This object indicates the date and time that this service started.')
cldReportingConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1), )
if mibBuilder.loadTexts: cldReportingConnectionTable.setStatus('current')
if mibBuilder.loadTexts: cldReportingConnectionTable.setDescription('The reporting connection table is a list of Cisco LiveData server reporting connections. A LiveData server maintains a number of active connections to data sources; most often, these are contact center solution nodes that generate real- time data that is ultimately used for creating reports. Reporting connection table objects include objects that identify the reporting connection, the current state of that connection and a set of metrics and attributes that offer an indication of the connection health and performance. A single LiveData server may have multiple reporting connections, each to a different peer node and/or to multiple data sources from a single node. The SNMP agent constructs the reporting connection table at startup; the agent refreshes this table periodically during runtime when each LiveData service reports connection states. Reporting connection table entries cannot be added to or deleted from the table by the management station. All objects in this table are read-only.')
cldReportingConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LIVEDATA-MIB", "cldRptConnIndex"))
if mibBuilder.loadTexts: cldReportingConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: cldReportingConnectionEntry.setDescription('Each reporting connection entry represents a Cisco LiveData reporting connection. The LiveData application connects to a number of data sources, each of which sends real-time data as a stream to the LiveData server.')
cldRptConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 1), CldIndex())
if mibBuilder.loadTexts: cldRptConnIndex.setStatus('current')
if mibBuilder.loadTexts: cldRptConnIndex.setDescription('The reporting connection index is a value that uniquely identifies an entry in the reporting connection table. This value is arbitrarily assigned by the SNMP agent.')
cldRptConnServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnServerID.setStatus('current')
if mibBuilder.loadTexts: cldRptConnServerID.setDescription('This object indicates a user-intuitive textual identification for the Cisco LiveData connection; this is indicative of the source of the real-time data streamed via this reporting connection.')
cldRptConnServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnServerAddress.setStatus('current')
if mibBuilder.loadTexts: cldRptConnServerAddress.setDescription('This object indicates the hostname or IP address of the peer node in this reporting connection.')
cldRptConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnState.setStatus('current')
if mibBuilder.loadTexts: cldRptConnState.setDescription('This object indicates the current state of this reporting connection; it is either active or inactive.')
cldRptConnStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnStateTime.setStatus('current')
if mibBuilder.loadTexts: cldRptConnStateTime.setDescription('This object indicates the date and time that this reporting connection transitioned into its current state.')
cldRptConnEventRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 6), Gauge32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnEventRate.setStatus('current')
if mibBuilder.loadTexts: cldRptConnEventRate.setDescription('This object indicates the number of events that are arriving via this connection per second.')
cldRptConnHeartbeatRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnHeartbeatRTT.setStatus('current')
if mibBuilder.loadTexts: cldRptConnHeartbeatRTT.setDescription('This object indicates the time, in milliseconds, for heartbeat requests to be returned from the peer node in this reporting connection.')
cldRptConnSocketConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnSocketConnects.setStatus('current')
if mibBuilder.loadTexts: cldRptConnSocketConnects.setDescription('This object indicates the number of successful socket connections made to the peer node in this reporting connection.')
cldRptConnSocketDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnSocketDisconnects.setStatus('current')
if mibBuilder.loadTexts: cldRptConnSocketDisconnects.setDescription('This object indicates the number of socket disconnects with the peer node in this reporting connection. This is used in conjunction with cldConnSocketConnects to identify unstable connections to a particular endpoint.')
cldRptConnMessagesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: cldRptConnMessagesDiscarded.setDescription('This object indicates the number of messages sent by the peer node in this reporting connection that have been discarded.')
cldRptConnDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRptConnDSCP.setStatus('current')
if mibBuilder.loadTexts: cldRptConnDSCP.setDescription('This object indicates the Differentiated Services (DS) value currently used by this reporting connection for Quality of Service (QoS) marking.')
cldEventTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1), )
if mibBuilder.loadTexts: cldEventTable.setStatus('current')
if mibBuilder.loadTexts: cldEventTable.setDescription('The event table is a list of active Cisco LiveData events. The SNMP agent constructs the event table at startup and it fills the table as events are generated. Events with the same cldEventID value will overwrite existing events in the table with the same EventID (i.e. only the most recent will persist). Event table entries cannot be added to or deleted from the table by the management station. All objects in this table are read-only.')
cldEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-LIVEDATA-MIB", "cldEventIndex"))
if mibBuilder.loadTexts: cldEventEntry.setStatus('current')
if mibBuilder.loadTexts: cldEventEntry.setDescription('Each event entry represents a Cisco LiveData event. The LiveData application software generates events when an unusual condition has occurred that can potentially affect the functioning of the Cisco LiveData server.')
cldEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 1), CldIndex())
if mibBuilder.loadTexts: cldEventIndex.setStatus('current')
if mibBuilder.loadTexts: cldEventIndex.setDescription('The event index is a value that uniquely identifies an entry in the event table. This value is arbitrarily assigned by the SNMP agent.')
cldEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventID.setStatus('current')
if mibBuilder.loadTexts: cldEventID.setDescription("This object indicates the unique numeric event message identifier that is assigned by the LiveData server to this event. This identifier is unique for each different event. The event ID can be used to correlate 'clear' state events to 'raise' state events.")
cldEventAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventAppName.setStatus('current')
if mibBuilder.loadTexts: cldEventAppName.setDescription('This object indicates the service- specific name of the Cisco LiveData functional service that generated this event.')
cldEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventName.setStatus('current')
if mibBuilder.loadTexts: cldEventName.setDescription('This object indicates the service-specific name of the Cisco LiveData event message. The object value is used to group similar events.')
cldEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventState.setStatus('current')
if mibBuilder.loadTexts: cldEventState.setDescription("This object indicates the state (not to be confused with severity) of the event and potentially the current status of the functional component that generated the event. The possible states are: 'raise': A raise state identifies an event received as a result of a health-impacting condition, such as a process failure. A subsequent clear state event will follow when the error condition is resolved. A node which generates a 'raise' state event may be impaired and likely requires the attention of an administrator. 'clear': The clear state indicates that the condition which generated a previous raise notification has been resolved. This may occur automatically with fault-tolerant deployments or may be the result of administrator intervention.")
cldEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 6), CldSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventSeverity.setStatus('current')
if mibBuilder.loadTexts: cldEventSeverity.setDescription('This object indicates the severity level of this event.')
cldEventTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventTimestamp.setStatus('current')
if mibBuilder.loadTexts: cldEventTimestamp.setDescription('This object indicates the date and time that the event was generated on the originating device.')
cldEventText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 814, 1, 5, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldEventText.setStatus('current')
if mibBuilder.loadTexts: cldEventText.setDescription('This object indicates the full text of the event which includes a description of the event that was generated, component state information and potentially a brief description of administrative action that may be necessary to correct the condition that caused the event to occur.')
cldEventNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 814, 0, 1)).setObjects(("CISCO-LIVEDATA-MIB", "cldEventID"), ("CISCO-LIVEDATA-MIB", "cldServerName"), ("CISCO-LIVEDATA-MIB", "cldEventAppName"), ("CISCO-LIVEDATA-MIB", "cldEventName"), ("CISCO-LIVEDATA-MIB", "cldEventState"), ("CISCO-LIVEDATA-MIB", "cldEventSeverity"), ("CISCO-LIVEDATA-MIB", "cldEventTimestamp"), ("CISCO-LIVEDATA-MIB", "cldEventText"))
if mibBuilder.loadTexts: cldEventNotif.setStatus('current')
if mibBuilder.loadTexts: cldEventNotif.setDescription("The SNMP entity generates cldEventNotif when an unusual condition has occurred that can potentially affect the functioning of the Cisco LiveData server. This notification type describes operational state information of the service generating the notification when such service-impacting conditions occur. A notification is sent by a functional service of the Cisco LiveData server. The notification type includes the following objects: 'cldEventID': The unique numeric event message identifier for this event. 'cldServerName': The fully-qualified domain name of the Cisco LiveData server that generated the notification. 'cldEventAppName': The name of the Cisco LiveData functional service that generated this event. 'cldEventName': The service-specific name of the Cisco LiveData event message. 'cldEventState': The state of the event, either 'raise' or 'clear'. A 'raise' state event is generated when an unusual or service- impacting condition occurs while a 'clear' state event is generated when a prior condition has been resolved. 'cldEventSeverity': The severity level of this event; an integer value from 1 (emergency) to 8 (debug). 'cldEventTimestamp': The date and time that the event was generated. 'cldEventText': The full text of the event.")
ciscoLivedataMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 1, 1)).setObjects(("CISCO-LIVEDATA-MIB", "cldGeneralGroup"), ("CISCO-LIVEDATA-MIB", "cldClusterGroup"), ("CISCO-LIVEDATA-MIB", "cldServicesGroup"), ("CISCO-LIVEDATA-MIB", "cldRptConnectionsGroup"), ("CISCO-LIVEDATA-MIB", "cldEventsGroup"), ("CISCO-LIVEDATA-MIB", "cldMIBEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLivedataMIBCompliance = ciscoLivedataMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLivedataMIBCompliance.setDescription('This object is the compliance statement for entities which implement the Cisco LiveData MIB.')
cldGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2, 1)).setObjects(("CISCO-LIVEDATA-MIB", "cldServerName"), ("CISCO-LIVEDATA-MIB", "cldDescription"), ("CISCO-LIVEDATA-MIB", "cldVersion"), ("CISCO-LIVEDATA-MIB", "cldStartTime"), ("CISCO-LIVEDATA-MIB", "cldTimeZoneName"), ("CISCO-LIVEDATA-MIB", "cldTimeZoneOffset"), ("CISCO-LIVEDATA-MIB", "cldEventNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cldGeneralGroup = cldGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cldGeneralGroup.setDescription('The general group defines the general Cisco LiveData objects. All servers will populate these objects.')
cldClusterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2, 2)).setObjects(("CISCO-LIVEDATA-MIB", "cldClusterID"), ("CISCO-LIVEDATA-MIB", "cldClusterStatus"), ("CISCO-LIVEDATA-MIB", "cldClusterAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cldClusterGroup = cldClusterGroup.setStatus('current')
if mibBuilder.loadTexts: cldClusterGroup.setDescription('The cluster group defines the Cisco LiveData objects related to the cluster of LiveData servers. All servers will populate these objects.')
cldServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2, 3)).setObjects(("CISCO-LIVEDATA-MIB", "cldServiceName"), ("CISCO-LIVEDATA-MIB", "cldServiceState"), ("CISCO-LIVEDATA-MIB", "cldServiceUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cldServicesGroup = cldServicesGroup.setStatus('current')
if mibBuilder.loadTexts: cldServicesGroup.setDescription('The services group defines the Cisco LiveData service table objects. All servers will populate these objects, however, the number of entries in the table will vary across servers and the types of services will vary as well.')
cldRptConnectionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2, 4)).setObjects(("CISCO-LIVEDATA-MIB", "cldRptConnServerID"), ("CISCO-LIVEDATA-MIB", "cldRptConnServerAddress"), ("CISCO-LIVEDATA-MIB", "cldRptConnState"), ("CISCO-LIVEDATA-MIB", "cldRptConnStateTime"), ("CISCO-LIVEDATA-MIB", "cldRptConnEventRate"), ("CISCO-LIVEDATA-MIB", "cldRptConnHeartbeatRTT"), ("CISCO-LIVEDATA-MIB", "cldRptConnSocketConnects"), ("CISCO-LIVEDATA-MIB", "cldRptConnSocketDisconnects"), ("CISCO-LIVEDATA-MIB", "cldRptConnMessagesDiscarded"), ("CISCO-LIVEDATA-MIB", "cldRptConnDSCP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cldRptConnectionsGroup = cldRptConnectionsGroup.setStatus('current')
if mibBuilder.loadTexts: cldRptConnectionsGroup.setDescription('The reporting connections group defines the Cisco LiveData connection table objects. All servers will populate these objects, however, the number of entries in the table will vary across servers.')
cldEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2, 5)).setObjects(("CISCO-LIVEDATA-MIB", "cldEventID"), ("CISCO-LIVEDATA-MIB", "cldEventAppName"), ("CISCO-LIVEDATA-MIB", "cldEventName"), ("CISCO-LIVEDATA-MIB", "cldEventState"), ("CISCO-LIVEDATA-MIB", "cldEventSeverity"), ("CISCO-LIVEDATA-MIB", "cldEventTimestamp"), ("CISCO-LIVEDATA-MIB", "cldEventText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cldEventsGroup = cldEventsGroup.setStatus('current')
if mibBuilder.loadTexts: cldEventsGroup.setDescription('The events group defines the Cisco LiveData event table objects. All servers will populate these objects, however, the number of entries in the table will vary across servers.')
cldMIBEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 814, 2, 2, 6)).setObjects(("CISCO-LIVEDATA-MIB", "cldEventNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cldMIBEventGroup = cldMIBEventGroup.setStatus('current')
if mibBuilder.loadTexts: cldMIBEventGroup.setDescription('This group defines the notification types defined in this MIB.')
mibBuilder.exportSymbols("CISCO-LIVEDATA-MIB", cldEventEntry=cldEventEntry, cldServerName=cldServerName, cldRptConnState=cldRptConnState, cldEventsGroup=cldEventsGroup, cldCluster=cldCluster, ciscoLivedataMIBGroups=ciscoLivedataMIBGroups, ciscoLivedataMIB=ciscoLivedataMIB, cldEvents=cldEvents, cldEventID=cldEventID, cldEventTable=cldEventTable, cldEventText=cldEventText, CldSeverity=CldSeverity, cldRptConnHeartbeatRTT=cldRptConnHeartbeatRTT, cldServiceTable=cldServiceTable, cldRptConnIndex=cldRptConnIndex, cldRptConnectionsGroup=cldRptConnectionsGroup, cldClusterGroup=cldClusterGroup, cldServicesGroup=cldServicesGroup, cldReportingConnectionEntry=cldReportingConnectionEntry, cldRptConnServerAddress=cldRptConnServerAddress, CldIndex=CldIndex, ciscoLivedataMIBConform=ciscoLivedataMIBConform, cldRptConnStateTime=cldRptConnStateTime, cldRptConnSocketDisconnects=cldRptConnSocketDisconnects, cldTimeZoneOffset=cldTimeZoneOffset, cldEventNotif=cldEventNotif, cldVersion=cldVersion, cldStartTime=cldStartTime, cldMIBEventGroup=cldMIBEventGroup, cldGeneralGroup=cldGeneralGroup, cldClusterStatus=cldClusterStatus, ciscoLivedataMIBCompliances=ciscoLivedataMIBCompliances, cldServiceIndex=cldServiceIndex, cldEventSeverity=cldEventSeverity, ciscoLivedataMIBNotifs=ciscoLivedataMIBNotifs, cldEventIndex=cldEventIndex, ciscoLivedataMIBCompliance=ciscoLivedataMIBCompliance, cldEventTimestamp=cldEventTimestamp, cldGeneral=cldGeneral, cldServiceEntry=cldServiceEntry, cldEventName=cldEventName, cldTimeZoneName=cldTimeZoneName, cldEventAppName=cldEventAppName, cldRptConnEventRate=cldRptConnEventRate, cldServiceName=cldServiceName, cldServiceState=cldServiceState, cldClusterAddress=cldClusterAddress, cldServiceUpTime=cldServiceUpTime, cldDescription=cldDescription, cldRptConnServerID=cldRptConnServerID, cldRptConnSocketConnects=cldRptConnSocketConnects, cldRptConnDSCP=cldRptConnDSCP, cldReportingConnections=cldReportingConnections, cldEventState=cldEventState, cldClusterID=cldClusterID, cldReportingConnectionTable=cldReportingConnectionTable, cldServices=cldServices, PYSNMP_MODULE_ID=ciscoLivedataMIB, cldEventNotifEnable=cldEventNotifEnable, cldRptConnMessagesDiscarded=cldRptConnMessagesDiscarded, ciscoLivedataMIBObjects=ciscoLivedataMIBObjects)
