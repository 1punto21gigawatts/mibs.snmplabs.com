#
# PySNMP MIB module CISCO-WAN-CES-CONN-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CES-CONN-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
cesmChan, = mibBuilder.importSymbols("BASIS-MIB", "cesmChan")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Integer32, TimeTicks, IpAddress, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, ModuleIdentity, Gauge32, ObjectIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "TimeTicks", "IpAddress", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibIdentifier", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanCesConnStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 43))
ciscoWanCesConnStatMIB.setRevisions(('2002-12-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setLastUpdated('200212240000Z')
if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanCesConnStatMIB.setDescription('The MIB module to provide CES Connections statistics. This MIB is supported in Circuit Emulation Service Modules(CESM) in MGX82xx, MGX88xx products. The channels and connections are used interchangeably in this mib. Terminologies Used: PXM : Processor Switch Service Module. This is the controller card used in MGX switches. CESM : Circuit Emulation Service Module. The Card supporting Circuit Emulation Service.')
cesmChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2))
cesmChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1), )
if mibBuilder.loadTexts: cesmChanCntGrpTable.setStatus('current')
if mibBuilder.loadTexts: cesmChanCntGrpTable.setDescription('The statistics table for CES connections. For every entry in cesmChanCnfGrpTable, there will be an entry in this table.')
cesmChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-CES-CONN-STAT-MIB", "cesCntChanNum"))
if mibBuilder.loadTexts: cesmChanCntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cesmChanCntGrpEntry.setDescription(' An entry in the CES connection statistics table.')
cesCntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCntChanNum.setReference('CISCO-WAN-CES-CONN-MIB.my')
if mibBuilder.loadTexts: cesCntChanNum.setStatus('current')
if mibBuilder.loadTexts: cesCntChanNum.setDescription("This object identifies the channel number of the CESM channel. The value for this object is same as the value specified in 'cesCnfChanNum'.")
cesChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("okay", 2), ("alarm", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanState.setStatus('current')
if mibBuilder.loadTexts: cesChanState.setDescription('This object indicates the channel/connection status. The possible value(s) are : notConfigured (1) : Channel is not configured okay (2) : channel is ok alarm (3) : channel is in alarm. The connection segment is not broken. failed (4) : channel is failed. The connection segment is broken. This value is applicable when PXM running PNNI Control Software.')
cesXmtATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAIS", 3), ("sendingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesXmtATMState.setStatus('current')
if mibBuilder.loadTexts: cesXmtATMState.setDescription('This object indicates the transmit state of channel on the ATM side (towards the network). The possible value(s) are : other(1) : values other than mentioned below. normal(2) : Channel is ok. sendingAIS(3) : Sending AIS signal sendingFERF(4): Sending FERF.')
cesRcvATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAIS", 3), ("receivingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRcvATMState.setStatus('current')
if mibBuilder.loadTexts: cesRcvATMState.setDescription('This variable indicates the receive state of channel on the ATM side (from the network). The possible value(s) are : other(1) : values other than mentioned below. normal(2) : Channel is ok. receivingAIS (3) : receiving AIS signal receivingFERF(4) : receiving FERF.')
cesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellLossStatus.setStatus('current')
if mibBuilder.loadTexts: cesCellLossStatus.setDescription('When cells are lost for the CellLossIntegrationPeriod the value is set to loss ( 2). when cells are no longer lost, the value is set to noLoss(1).')
cesReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesReassCells.setStatus('current')
if mibBuilder.loadTexts: cesReassCells.setDescription('The number of cells played out to T1/E1/T3E3 interface. It excludes cells that were discarded for any reason.')
cesGenCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesGenCells.setStatus('current')
if mibBuilder.loadTexts: cesGenCells.setDescription('The number of cells generated from T1/E1/T3E3 interface and sent towards network.')
cesHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesHdrErrors.setStatus('current')
if mibBuilder.loadTexts: cesHdrErrors.setDescription('The number of AAL-1 header errors detected and possibly corrected. Header errors include correctable and uncor- rectable CRC, plus bad parity.')
cesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPointerReframes.setStatus('current')
if mibBuilder.loadTexts: cesPointerReframes.setDescription('The number of events in which the AAL1 reassembler found that an SDT pointer is not where it is expected and the and the pointer must be reacquired. Not supported in CESM-8P due to limitation in AAL1 SAR. Not applicable for CESM-4T1/E1 and CESM-T3/E3')
cesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLostCells.setStatus('current')
if mibBuilder.loadTexts: cesLostCells.setDescription('The number of cells lost in egress direction due to AAL 1 header errors and missing cells.')
cesBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufUnderflows.setStatus('current')
if mibBuilder.loadTexts: cesBufUnderflows.setDescription('The number of buffer underflows in Egress direction Not supported in CESM-8P due limitation in AAL1 SAR.')
cesBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufOverflows.setStatus('current')
if mibBuilder.loadTexts: cesBufOverflows.setDescription('The number of buffer overflows in Egress direction Not supported in CESM-8P due to limitation in AAL1 SAR.')
cesIngrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesIngrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: cesIngrDiscardedBytes.setDescription('The number of bytes discarded due to shelf alarm in ingress direction from port data. Not supported in CESM-8P.')
cesUflowInsCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesUflowInsCells.setStatus('current')
if mibBuilder.loadTexts: cesUflowInsCells.setDescription("The number of All 1's cells inserted in case of Egress Buffer Underflow Not supported in CESM-8P.")
cesOflowDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesOflowDropBytes.setStatus('current')
if mibBuilder.loadTexts: cesOflowDropBytes.setDescription('The number of bytes discarded in Egress direction because of Egress buffer overflow Not supported in CESM-8P.')
cesCellSeqMismatchCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellSeqMismatchCnt.setStatus('current')
if mibBuilder.loadTexts: cesCellSeqMismatchCnt.setDescription('The number of times SAR received a valid out of sequence AAL-1 cell from CellBus.')
counterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClrButton.setStatus('current')
if mibBuilder.loadTexts: counterClrButton.setDescription('This object is used for clearing the counters in this table. If set to resetCounters(2), then counters will be cleared.')
cesChanSecUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanSecUptime.setStatus('current')
if mibBuilder.loadTexts: cesChanSecUptime.setDescription('The number of seconds channel is in service This object is only applicable for CESM-8P.')
cesChanSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off-hook", 1), ("on-hook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanSignalingStatus.setStatus('current')
if mibBuilder.loadTexts: cesChanSignalingStatus.setDescription('This variable indicates the connection signalling status Connection will be in Idle suppression mode if it in on-hook. Not applicable for T3E3 and CESM-4P.')
cesChanStatusBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanStatusBitMap.setStatus('current')
if mibBuilder.loadTexts: cesChanStatusBitMap.setDescription('This variable indicates the consolidated bit map of the channel alarm state. Individual bit positions are as defined below. Bit position Fail/Alarm Reason ------------ ---------- ------ 0 Alarm Reserved 1 Alarm n/w side AIS/RDI Rx 2 Fail Conditioned(A bit from n/w) 3 Alarm Reserved 4 Fail Reserved 5 Fail Reserved 6 Alarm Reserved 7 Alarm Cell loss alarm Fail bitmap mask : 0x34 Alarm bitmap mask: 0xCB This object is not applicable to MGX Release 1.x.')
cwcConnStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 43, 2))
cwcConnStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 1))
cwcConnStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 2))
cwcConnStatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 2, 1)).setObjects(("CISCO-WAN-CES-CONN-STAT-MIB", "cwcConnGenStatsGroup"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cwcConnStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwcConnStatCompliance = cwcConnStatCompliance.setStatus('current')
if mibBuilder.loadTexts: cwcConnStatCompliance.setDescription('The compliance statement for broad band interface Connection Statistics MIB.')
cwcConnGenStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 1, 1)).setObjects(("CISCO-WAN-CES-CONN-STAT-MIB", "cesCntChanNum"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanState"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesXmtATMState"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesRcvATMState"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesCellLossStatus"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesReassCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesGenCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesHdrErrors"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesPointerReframes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesLostCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufUnderflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufOverflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesIngrDiscardedBytes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesUflowInsCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesOflowDropBytes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesCellSeqMismatchCnt"), ("CISCO-WAN-CES-CONN-STAT-MIB", "counterClrButton"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanSecUptime"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanSignalingStatus"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesChanStatusBitMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwcConnGenStatsGroup = cwcConnGenStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwcConnGenStatsGroup.setDescription('The objects related to Circuit Emulation connection statistics applicable for multiple cards(Service Modules).')
cwcConnStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 43, 2, 1, 2)).setObjects(("CISCO-WAN-CES-CONN-STAT-MIB", "cesPointerReframes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufUnderflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesBufOverflows"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesIngrDiscardedBytes"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesUflowInsCells"), ("CISCO-WAN-CES-CONN-STAT-MIB", "cesOflowDropBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwcConnStatsGroup = cwcConnStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwcConnStatsGroup.setDescription('The objects related to Circuit Emulation connection statistics applicable for few cards(Service Module).')
mibBuilder.exportSymbols("CISCO-WAN-CES-CONN-STAT-MIB", cesCellSeqMismatchCnt=cesCellSeqMismatchCnt, cesmChanCntGrpEntry=cesmChanCntGrpEntry, cwcConnStatMIBGroups=cwcConnStatMIBGroups, cesCntChanNum=cesCntChanNum, cwcConnStatsGroup=cwcConnStatsGroup, cesmChanCntGrpTable=cesmChanCntGrpTable, cesCellLossStatus=cesCellLossStatus, cesmChanCntGrp=cesmChanCntGrp, cwcConnGenStatsGroup=cwcConnGenStatsGroup, cesReassCells=cesReassCells, cesXmtATMState=cesXmtATMState, cesChanStatusBitMap=cesChanStatusBitMap, cwcConnStatCompliance=cwcConnStatCompliance, cesUflowInsCells=cesUflowInsCells, cesLostCells=cesLostCells, cesRcvATMState=cesRcvATMState, cesChanState=cesChanState, cesIngrDiscardedBytes=cesIngrDiscardedBytes, cesOflowDropBytes=cesOflowDropBytes, cesHdrErrors=cesHdrErrors, cesBufUnderflows=cesBufUnderflows, ciscoWanCesConnStatMIB=ciscoWanCesConnStatMIB, cesBufOverflows=cesBufOverflows, cesChanSignalingStatus=cesChanSignalingStatus, cesGenCells=cesGenCells, cesChanSecUptime=cesChanSecUptime, PYSNMP_MODULE_ID=ciscoWanCesConnStatMIB, counterClrButton=counterClrButton, cwcConnStatMIBConformance=cwcConnStatMIBConformance, cwcConnStatMIBCompliances=cwcConnStatMIBCompliances, cesPointerReframes=cesPointerReframes)
