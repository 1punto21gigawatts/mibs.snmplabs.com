#
# PySNMP MIB module CTRON-LINE-STATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-LINE-STATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:30:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cabletron, = mibBuilder.importSymbols("CTRON-OIDS", "cabletron")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, Counter64, IpAddress, MibIdentifier, ObjectIdentity, Bits, NotificationType, TimeTicks, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Counter64", "IpAddress", "MibIdentifier", "ObjectIdentity", "Bits", "NotificationType", "TimeTicks", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctSSA = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497))
ctDsx1LineStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 21), )
if mibBuilder.loadTexts: ctDsx1LineStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx1LineStatisticsTable.setDescription('A list of statistics gathered at Layer 1 for the installed WAN ports.')
ctDsx1LineStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1), ).setIndexNames((0, "CTRON-LINE-STATISTICS-MIB", "lsLineIndex"))
if mibBuilder.loadTexts: ctDsx1LineStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx1LineStatisticsEntry.setDescription('A list of statistics gathered at Layer 1 for a given WAN port. The statistics include counts for qualified alarms and total alarms (qualified alarms and unqualified alarms). A qualified alarm is an alarm whose presence has been detected for a finite amount of time (called its integration period). An unqualified alarm is an alarm whose presence has not been detected for the entire integration period.')
lsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lsLineIndex.setDescription('The physical line index for this port.')
lsLayer1Up = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1Up.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1Up.setDescription('The number of times Layer 1 has been brought up (by a higher level software entity or administrator) or has come up due to the disintegration of an alarm.')
lsLayer1Down = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1Down.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1Down.setDescription('The number of times Layer 1 has been taken down (by a higher level software entity or administrator) or has gone down due to the integration of an alarm.')
lsLayer1LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1LOS.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1LOS.setDescription('The number of times Layer 1 has qualified a Loss of Signal.')
lsLayer1LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1LOF.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1LOF.setDescription('The number of times Layer 1 has qualified a Loss of Frame.')
lsLayer1RAI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1RAI.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1RAI.setDescription('The number of times Layer 1 has qualified a Remote Alarm Indication. RAI is also known as a Yellow alarm.')
lsLayer1AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1AIS.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1AIS.setDescription('The number of times Layer 1 has qualified an Alarm Indication Signal. AIS is also known as a Blue alarm.')
lsLayer1LOSAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1LOSAll.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1LOSAll.setDescription('The number of times Layer 1 has detected a Loss of Signal. This includes both qualified and unqualified Losses of Signal.')
lsLayer1LOFAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1LOFAll.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1LOFAll.setDescription('The number of times Layer 1 has detected a Loss of Frame. This includes both qualified and unqualified Losses of Frame.')
lsLayer1RAIAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1RAIAll.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1RAIAll.setDescription('The number of times Layer 1 has detected a Remote Alarm Indication. This includes both qualified and unqualified Remote Alarm Indications.')
lsLayer1AISAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1AISAll.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1AISAll.setDescription('The number of times Layer 1 has detected an Alarm Indication Signal. This includes both qualified and unqualified Alarm Indication Signals.')
lsLayer1Interrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLayer1Interrupts.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1Interrupts.setDescription('The number of interrupts seen at Layer 1.')
lsLayer1ClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsLayer1ClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: lsLayer1ClearStats.setDescription('When written with any value, all statistics associated with this LineIndex will be cleared.')
mibBuilder.exportSymbols("CTRON-LINE-STATISTICS-MIB", lsLayer1Down=lsLayer1Down, lsLayer1LOF=lsLayer1LOF, ctSSA=ctSSA, lsLayer1AIS=lsLayer1AIS, ctDsx1LineStatisticsTable=ctDsx1LineStatisticsTable, lsLayer1LOSAll=lsLayer1LOSAll, lsLayer1LOFAll=lsLayer1LOFAll, lsLineIndex=lsLineIndex, lsLayer1RAI=lsLayer1RAI, lsLayer1RAIAll=lsLayer1RAIAll, lsLayer1AISAll=lsLayer1AISAll, lsLayer1Interrupts=lsLayer1Interrupts, lsLayer1Up=lsLayer1Up, lsLayer1ClearStats=lsLayer1ClearStats, ctDsx1LineStatisticsEntry=ctDsx1LineStatisticsEntry, lsLayer1LOS=lsLayer1LOS)
