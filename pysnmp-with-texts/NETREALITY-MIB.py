#
# PySNMP MIB module NETREALITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETREALITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
DLCI, Index = mibBuilder.importSymbols("RFC1315-MIB", "DLCI", "Index")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, enterprises, Integer32, NotificationType, MibIdentifier, Counter32, Gauge32, iso, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "enterprises", "Integer32", "NotificationType", "MibIdentifier", "Counter32", "Gauge32", "iso", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netreality = MibIdentifier((1, 3, 6, 1, 4, 1, 2382))
nrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1))
nrProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 2))
nrFr = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3))
nrInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 1))
nrFrame_relay = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 2)).setLabel("nrFrame-relay")
nrRmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 3))
nrNlMatrix = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1))
nrNlHost = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2))
nrBulk = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4))
nrtCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1))
nrShortTermData = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2))
nrLongTermData = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3))
nrManagers = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1, 1))
nrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1, 2))
nrTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1, 3))
nrTrapHostsTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1), )
if mibBuilder.loadTexts: nrTrapHostsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nrTrapHostsTable.setDescription('A list of trap_hosts entries.')
nrTrapHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrTrapIPaddress"))
if mibBuilder.loadTexts: nrTrapHostsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nrTrapHostsEntry.setDescription('A trap-receiving host entry, containing trap-host objects for a particular host.')
nrTrapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrTrapIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: nrTrapIPaddress.setDescription('The ip address of the host to be sent all traps')
nrTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1, 1, 2), Integer32().clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: nrTrapPort.setDescription('UDP port number for receiving agent traps. port=0 will delete all entry')
nrSysReset = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrSysReset.setStatus('mandatory')
if mibBuilder.loadTexts: nrSysReset.setDescription('Setting the value of this attribute to ON is interpreted as a reset command for the system. ')
nrSysSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("set", 2), ("in-process", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrSysSetDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: nrSysSetDefaults.setDescription('Setting the value of this attribute to Start will cause the system to set the persitent parameters to the factory default values. These values will become active after the next system reset')
nrSysTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrSysTrapCounter.setStatus('mandatory')
if mibBuilder.loadTexts: nrSysTrapCounter.setDescription('This attribute counts the total number of traps generated by the device, since initialization. ')
nrSysEventReset = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("reset", 2), ("in-process", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrSysEventReset.setStatus('mandatory')
if mibBuilder.loadTexts: nrSysEventReset.setDescription('This attribute reinitiate the Alaram/Events group as if the agent was restarted. The management raises this flag in case the management restart or in case it lost syncronisation with the agent')
nrSysSerial = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrSysSerial.setStatus('mandatory')
if mibBuilder.loadTexts: nrSysSerial.setDescription("Box's hardware serial number, for example: WW298090218 ")
nrWanwise = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 2, 1))
nrIfTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1), )
if mibBuilder.loadTexts: nrIfTable.setStatus('mandatory')
nrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrIfIndex"))
if mibBuilder.loadTexts: nrIfEntry.setStatus('mandatory')
nrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfIndex.setDescription(' Such as the interface index in MIB2')
nrIfInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfInUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfInUtilization.setDescription('It contains the In utilization calculated every 1 minute as Delta(In Octets) * 8 * 100 / (ifspeed * 60)')
nrIfOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfOutUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfOutUtilization.setDescription('It contains the Out utilization calculated every 1 minute as Delat(nrOutLastOctets) * 8 * 100 / (ifspeed * 60)')
nrIfInErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfInErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfInErrRatio.setDescription('It contains the In Error packet percentage calculated every 60 seconds as follows: Bad Packets * 100 / (Good Packets + Bad Packets)')
nrIfOutErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfOutErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfOutErrRatio.setDescription('It contains the Out Error packet percentage calculated every 60 seconds as follows: Bad Packets * 100 / (Good Packets + Bad Packets)')
nrIfPhysConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfPhysConnType.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfPhysConnType.setDescription('Type of physical cable/line')
nrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("v35", 2), ("v35db", 3), ("eia530-rs449", 4), ("x21-x24", 5), ("rs232", 6), ("t1", 7), ("e1", 8), ("hssi", 9), ("frame-relay", 10), ("frame-relay-cisco", 11), ("ppp", 12), ("hdlc-cisco", 13), ("ppp-bay", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfType.setDescription('Mib2 ifType detaled.')
nrIfOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("monitor", 2), ("shaper", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfOperMode.setDescription('Operational mode for current interface')
nrIfGroupNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfGroupNm.setStatus('mandatory')
if mibBuilder.loadTexts: nrIfGroupNm.setDescription('Group number to which current interface belongs.')
nrFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2), )
if mibBuilder.loadTexts: nrFrCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitTable.setDescription('The 1315 Circuit Table extension')
nrFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrFrCircuitIfIndex"), (0, "NETREALITY-MIB", "nrFrCircuitDlci"))
if mibBuilder.loadTexts: nrFrCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitEntry.setDescription('extension varibles for a sinngle DLCI')
nrFrCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitIfIndex.setDescription('Such as 1315 circuit table - the interface index')
nrFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitDlci.setDescription('Such as 1315 circuit table - the dlci number')
nrFrCircuitInCIRUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitInCIRUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitInCIRUtilization.setDescription('Delta in * 100 / CIR * 60')
nrFrCircuitOutCIRUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitOutCIRUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitOutCIRUtilization.setDescription('Delta out octets * 100 / CIR * 60')
nrFrCircuitInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitInDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitInDiscard.setDescription('The total number of in octets not counted by the higher layers')
nrFrCircuitOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitOutDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitOutDiscard.setDescription('The total number of out octets not counted by the higher layers')
nrFrCircuitEchoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrFrCircuitEchoAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitEchoAddress.setDescription('The ip address of the host to be sent response time measurement packets')
nrFrCircuitEchoProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("icmp", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrFrCircuitEchoProto.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitEchoProto.setDescription('Protocol for reponse time measurements')
nrFrCircuitEchoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrFrCircuitEchoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitEchoStatus.setDescription('Operational status of reponse time measurements')
nrFrCircuitLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitLastResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: nrFrCircuitLastResponseTime.setDescription('Last response time measurement result (in msec). Value = 0 means the measurement failure')
nrNlMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1), )
if mibBuilder.loadTexts: nrNlMatrixTable.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlMatrixTable.setDescription('The RMON2 nl Matrix')
nrNlMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrNlMatrixifNumber"), (0, "NETREALITY-MIB", "nrNlMatrixDlciNumber"), (0, "NETREALITY-MIB", "nrNlMatrixProtocol"), (0, "NETREALITY-MIB", "nrNlMatrixAddress1"), (0, "NETREALITY-MIB", "nrNlMatrixAddress2"))
if mibBuilder.loadTexts: nrNlMatrixEntry.setStatus('mandatory')
nrNlMatrixifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlMatrixifNumber.setDescription('The interface number')
nrNlMatrixDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixDlciNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlMatrixDlciNumber.setDescription('The DLCI number (if+DLCI uniquely identifies the data source) This is a simpler form of the RMON2 standard which uses the data source OID')
nrNlMatrixProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlMatrixProtocol.setDescription('The value of the protocol directory local index')
nrNlMatrixAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlMatrixAddress1.setDescription('The NL address of one of the conversation parties')
nrNlMatrixAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlMatrixAddress2.setDescription('The NL address of the other (than address1) conversation party')
nrNl1to2UfromCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNl1to2UfromCIR.setStatus('mandatory')
if mibBuilder.loadTexts: nrNl1to2UfromCIR.setDescription('The total number of send and receive octets / CIR. In case of No CIR is exists - use a default CIR which is ifspeed/no. of DLCI per line')
nrNlHostTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1), )
if mibBuilder.loadTexts: nrNlHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlHostTable.setDescription('The RMON2 nl Matrix')
nrNlHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrNlHostifNumber"), (0, "NETREALITY-MIB", "nrNlHostDlciNumber"), (0, "NETREALITY-MIB", "nrNlMatrixProtocol"), (0, "NETREALITY-MIB", "nrNlHostAddress"))
if mibBuilder.loadTexts: nrNlHostEntry.setStatus('mandatory')
nrNlHostifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlHostifNumber.setDescription('The line interface number')
nrNlHostDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostDlciNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlHostDlciNumber.setDescription('The DLCI number (if+DLCI uniquely identifies the data source) This is a simpler form of the RMON2 standard which uses the data source OID')
nrNlHostProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlHostProtocol.setDescription('The value of the protocol directory local index')
nrNlHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlHostAddress.setDescription('The NL address of one of the conversation parties')
nrNlHostUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: nrNlHostUtilization.setDescription('The total number of send and receive octets for a specific Host out of the CIR. In case of No CIR is exists - use a default CIR which is ifspeed/no. of DLCI per line')
nrtCtrlLtermInterval = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 3600)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrtCtrlLtermInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nrtCtrlLtermInterval.setDescription(' The periodical time the agent is freezing a long term statistics When any time periods are changed all previous buckets are purged and collection restarts')
nrtCtrlLtermBucketsGrant = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlLtermBucketsGrant.setStatus('mandatory')
nrtCtrlLtermLast = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlLtermLast.setStatus('mandatory')
if mibBuilder.loadTexts: nrtCtrlLtermLast.setDescription(' The index of the last long term Bucket.')
nrtCtrlLtermTime = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlLtermTime.setStatus('mandatory')
if mibBuilder.loadTexts: nrtCtrlLtermTime.setDescription("The agent's sysuptime - when the last long term bucket was collected")
nrtCtrlStermInterval = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrtCtrlStermInterval.setStatus('mandatory')
nrtCtrlStermBucketsGrant = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlStermBucketsGrant.setStatus('mandatory')
nrtCtrlStermLast = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlStermLast.setStatus('mandatory')
if mibBuilder.loadTexts: nrtCtrlStermLast.setDescription(' The index of the last short term Bucket.')
nrtCtrlStermTime = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlStermTime.setStatus('mandatory')
if mibBuilder.loadTexts: nrtCtrlStermTime.setDescription("The agent's sysuptime - when the last short term bucket was collected")
nrShortTermDataTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1), )
if mibBuilder.loadTexts: nrShortTermDataTable.setStatus('mandatory')
nrShortTermDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrShortTermBucketIndex"), (0, "NETREALITY-MIB", "nrShortTermDataIndex"))
if mibBuilder.loadTexts: nrShortTermDataEntry.setStatus('mandatory')
nrShortTermBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrShortTermBucketIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nrShortTermBucketIndex.setDescription('The bucket index is a sequential index without repetition (1/2min * 2**32)...')
nrShortTermDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrShortTermDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nrShortTermDataIndex.setDescription('The data index is a sequential index starts at 1 for every bucket')
nrShortTermDataData = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrShortTermDataData.setStatus('mandatory')
if mibBuilder.loadTexts: nrShortTermDataData.setDescription('')
nrLongTermDataTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1), )
if mibBuilder.loadTexts: nrLongTermDataTable.setStatus('mandatory')
nrLongTermDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrLongTermBucketIndex"), (0, "NETREALITY-MIB", "nrLongTermDataIndex"))
if mibBuilder.loadTexts: nrLongTermDataEntry.setStatus('mandatory')
nrLongTermBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrLongTermBucketIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nrLongTermBucketIndex.setDescription('The bucket index is a sequential index without repetition (1/2min * 2**32)...')
nrLongTermDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrLongTermDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nrLongTermDataIndex.setDescription('The data index is a sequential index starts at 1 for every bucket')
nrLongTermDataData = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrLongTermDataData.setStatus('mandatory')
if mibBuilder.loadTexts: nrLongTermDataData.setDescription(' ')
nrTrapRSType = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("memory", 1), ("ethernet", 2), ("wanadapter", 3), ("flash", 4), ("com1", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrTrapRSType.setStatus('mandatory')
if mibBuilder.loadTexts: nrTrapRSType.setDescription('This attribute identifies the resource type')
nrShortResources = NotificationType((1, 3, 6, 1, 4, 1, 2382) + (0,1)).setObjects(("NETREALITY-MIB", "nrTrapRSType"))
if mibBuilder.loadTexts: nrShortResources.setDescription('A trap indicating shortage of agent resources.')
nrDiagnosticFailure = NotificationType((1, 3, 6, 1, 4, 1, 2382) + (0,2)).setObjects(("NETREALITY-MIB", "nrTrapRSType"))
if mibBuilder.loadTexts: nrDiagnosticFailure.setDescription('A trap indicating resource failure')
nrDLCIRemove = NotificationType((1, 3, 6, 1, 4, 1, 2382) + (0,3)).setObjects(("NETREALITY-MIB", "nrFrCircuitIfIndex"), ("NETREALITY-MIB", "nrFrCircuitDlci"))
if mibBuilder.loadTexts: nrDLCIRemove.setDescription("A trap indicating DLCI remove. The varibles specifies it's interface and DLCI number")
mibBuilder.exportSymbols("NETREALITY-MIB", nrIfInUtilization=nrIfInUtilization, nrNlHostDlciNumber=nrNlHostDlciNumber, nrSysSerial=nrSysSerial, nrIfGroupNm=nrIfGroupNm, nrIfOutErrRatio=nrIfOutErrRatio, nrBulk=nrBulk, nrShortResources=nrShortResources, nrSysEventReset=nrSysEventReset, nrNlMatrixProtocol=nrNlMatrixProtocol, nrFrCircuitEchoProto=nrFrCircuitEchoProto, nrFrCircuitEchoAddress=nrFrCircuitEchoAddress, nrFrCircuitOutCIRUtilization=nrFrCircuitOutCIRUtilization, nrNlHostEntry=nrNlHostEntry, nrFrCircuitEchoStatus=nrFrCircuitEchoStatus, nrShortTermData=nrShortTermData, nrShortTermDataData=nrShortTermDataData, nrWanwise=nrWanwise, nrNlHostifNumber=nrNlHostifNumber, nrFrCircuitTable=nrFrCircuitTable, nrSystem=nrSystem, nrNlHostUtilization=nrNlHostUtilization, nrtCtrl=nrtCtrl, nrGeneral=nrGeneral, nrFrCircuitEntry=nrFrCircuitEntry, nrtCtrlStermInterval=nrtCtrlStermInterval, nrNlMatrixAddress2=nrNlMatrixAddress2, nrtCtrlStermBucketsGrant=nrtCtrlStermBucketsGrant, nrTrapIPaddress=nrTrapIPaddress, nrShortTermDataEntry=nrShortTermDataEntry, nrNlMatrixDlciNumber=nrNlMatrixDlciNumber, nrSysSetDefaults=nrSysSetDefaults, nrNlMatrixAddress1=nrNlMatrixAddress1, nrFrCircuitInDiscard=nrFrCircuitInDiscard, nrNlMatrixEntry=nrNlMatrixEntry, nrtCtrlLtermTime=nrtCtrlLtermTime, nrLongTermDataTable=nrLongTermDataTable, nrSysTrapCounter=nrSysTrapCounter, nrShortTermDataTable=nrShortTermDataTable, nrIfEntry=nrIfEntry, nrFrame_relay=nrFrame_relay, nrNlMatrixifNumber=nrNlMatrixifNumber, nrtCtrlStermLast=nrtCtrlStermLast, nrManagers=nrManagers, nrTrapPort=nrTrapPort, nrNlHostProtocol=nrNlHostProtocol, nrLongTermData=nrLongTermData, nrIfOperMode=nrIfOperMode, nrFrCircuitOutDiscard=nrFrCircuitOutDiscard, nrLongTermDataData=nrLongTermDataData, nrFrCircuitLastResponseTime=nrFrCircuitLastResponseTime, nrtCtrlLtermInterval=nrtCtrlLtermInterval, nrTrapInfo=nrTrapInfo, nrTrapRSType=nrTrapRSType, nrtCtrlStermTime=nrtCtrlStermTime, nrIfType=nrIfType, nrIfInErrRatio=nrIfInErrRatio, nrIfPhysConnType=nrIfPhysConnType, nrFrCircuitIfIndex=nrFrCircuitIfIndex, nrIfOutUtilization=nrIfOutUtilization, nrNlHostTable=nrNlHostTable, nrtCtrlLtermBucketsGrant=nrtCtrlLtermBucketsGrant, nrTrapHostsEntry=nrTrapHostsEntry, nrNlMatrix=nrNlMatrix, nrShortTermBucketIndex=nrShortTermBucketIndex, nrtCtrlLtermLast=nrtCtrlLtermLast, nrInterface=nrInterface, nrTrapHostsTable=nrTrapHostsTable, nrFrCircuitDlci=nrFrCircuitDlci, nrDiagnosticFailure=nrDiagnosticFailure, nrNlHost=nrNlHost, nrLongTermDataIndex=nrLongTermDataIndex, nrNlMatrixTable=nrNlMatrixTable, nrSysReset=nrSysReset, nrFrCircuitInCIRUtilization=nrFrCircuitInCIRUtilization, nrProducts=nrProducts, nrLongTermDataEntry=nrLongTermDataEntry, nrShortTermDataIndex=nrShortTermDataIndex, nrNlHostAddress=nrNlHostAddress, nrLongTermBucketIndex=nrLongTermBucketIndex, nrIfIndex=nrIfIndex, nrIfTable=nrIfTable, nrRmon=nrRmon, nrFr=nrFr, nrNl1to2UfromCIR=nrNl1to2UfromCIR, nrDLCIRemove=nrDLCIRemove, netreality=netreality)
