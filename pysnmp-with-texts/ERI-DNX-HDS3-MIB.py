#
# PySNMP MIB module ERI-DNX-HDS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-HDS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
LinkPortAddress, FunctionSwitch, OneByteField, devices, PortStatus, DecisionType, LinkCmdStatus, trapSequence = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "LinkPortAddress", "FunctionSwitch", "OneByteField", "devices", "PortStatus", "DecisionType", "LinkCmdStatus", "trapSequence")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, TimeTicks, IpAddress, ObjectIdentity, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, MibIdentifier, Bits, Integer32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "IpAddress", "ObjectIdentity", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "MibIdentifier", "Bits", "Integer32", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eriDNXHybridDS3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 5))
eriDNXHybridDS3MIB.setRevisions(('2003-01-27 00:00', '2002-04-08 00:00', '2002-03-14 00:00', '2002-01-04 00:00', '2001-10-10 00:00', '2001-04-03 00:00', '2001-03-01 00:00', '2000-09-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setRevisionsDescriptions(('Nevio Poljak - eri_DnxNest MIB Rev 01.2 Changed status of hds3PortCfgName from obsolete to current. Converted history comments to MODULE-IDENTITY REVISION format.', 'Nevio Poljak - Software Release 14.2 Converted to SMIv2 format. All 8 name fields associated with HDS3 Port were made obsolete.', 'Nevio Poljak - Software Release 14.1 Removed lcv(6) and los(7) as selectable errors to Insert for the DS3 Framer Status Table.', 'Nevio Poljak - Software Release 14.1 Added new E1 InterNational Bit field and GR303 Facility field was made obsolete.', 'Nevio Poljak - Software Release 13.0 Added new E1 National Bit field and new Tables for DS3 Framer Status Counters and LIU Diagnostics', 'Nevio Poljak - Software Release 12.0 Added new InService-OOS commands for all links.', 'Nevio Poljak - Software Release 11.0 Added new GR-303 Facility field.', 'Initial Release of this MIB. - Nevio Poljak',))
if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setLastUpdated('200301270000Z')
if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setOrganization('Eastern Research, Inc.')
if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setContactInfo('Customer Service Postal: Eastern Research, Inc. 225 Executive Drive Moorestown, NJ 08057 Phone: +1-800-337-4374 Email: support@erinc.com')
if mibBuilder.loadTexts: eriDNXHybridDS3MIB.setDescription('The ERI Enterprise MIB Module for the DNX HDS3 Device.')
dnxHDS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2))
hds3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1))
hds3Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2))
class DS2GroupType(TextualConvention, Integer32):
    description = 'Indicates the type of DS2/G.747 group type option used on the links. VT 1.5 is used to group T1 links into 7 groups of 4 for the 28 links. VT 2.0 is used to group E1 links into 7 groups of 3 for the 21 links. Using the VT 2.0, links divisible by 4 are skipped over and not used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("e1", 0), ("ds1", 1))

hds3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hds3PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hds3PortConfigTable.setDescription('This is the HDS-3 Port Configuration table which consists of an entry for each of the HDS-3 cards. The total number of entries depends on the number of HDS-3 cards in the nest. This is the HDS-3 DS2/G.747 Configuration table which consists of an entry for each of the HDS-3 cards. The total number of entries depends on the number of HDS-3 cards in the nest.')
hds3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3PortCfgAddr"))
if mibBuilder.loadTexts: hds3PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hds3PortConfigEntry.setDescription('The conceptual row of the HDS-3 Port Configuration table. A row in this table cannot be added or deleted, only modified.')
hds3PortCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3PortCfgAddr.setStatus('current')
if mibBuilder.loadTexts: hds3PortCfgAddr.setDescription('This number uniquely identifies a HDS-3 T1/E1 link resource. This number will be used throughout the system to identify a unique resource.')
hds3PortCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3PortCfgResource.setStatus('current')
if mibBuilder.loadTexts: hds3PortCfgResource.setDescription('Uniquely identifies an HDS3 Port in the system. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
hds3PortCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3PortCfgName.setStatus('current')
if mibBuilder.loadTexts: hds3PortCfgName.setDescription('This is the user friendly text name to identify the circuit.')
hds3FacilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FacilityId.setStatus('obsolete')
if mibBuilder.loadTexts: hds3FacilityId.setDescription('This is a description of the facility where this equipment is located.')
hds3EquipmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3EquipmentId.setStatus('obsolete')
if mibBuilder.loadTexts: hds3EquipmentId.setDescription('This is a description of the equipment in use.')
hds3Location = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3Location.setStatus('obsolete')
if mibBuilder.loadTexts: hds3Location.setDescription('This is the user description of the location for this equipment.')
hds3FrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FrameId.setStatus('obsolete')
if mibBuilder.loadTexts: hds3FrameId.setDescription('This is the description of the building where this equipment is located.')
hds3UnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3UnitName.setStatus('obsolete')
if mibBuilder.loadTexts: hds3UnitName.setDescription('This is the description of the bay or device this equipment is part of.')
hds3PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3PortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: hds3PortNumber.setDescription('This is the user description of the HDS-3 port.')
hds3Generator = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3Generator.setStatus('obsolete')
if mibBuilder.loadTexts: hds3Generator.setDescription('This is the user description of the number generated by this equipment.')
hds3M13OpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bellcoreM13", 0), ("c-bitParity", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3M13OpMode.setStatus('current')
if mibBuilder.loadTexts: hds3M13OpMode.setDescription('The framing selection for the DS1 to HDS-3 multiplexing.')
hds3RcvLoopTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 12), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3RcvLoopTiming.setStatus('current')
if mibBuilder.loadTexts: hds3RcvLoopTiming.setDescription('Enables or disables the HDS-3 transmit timing provided by the receive clock. When disabled, timing is provided by an on-board oscillator.')
hds3ShortCable = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 13), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3ShortCable.setStatus('current')
if mibBuilder.loadTexts: hds3ShortCable.setDescription("Indicates the line build out of the HDS-3 transmitter. 'Yes' when attached to a cable less than 50 feet long.")
hds3M13RemLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("third-cbit-inverted", 0), ("second-cbit-inverted", 1), ("first-cbit-inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3M13RemLoop.setStatus('current')
if mibBuilder.loadTexts: hds3M13RemLoop.setDescription('Controls line codes used to set and reset DS3 remote line loopback requests. This setting is provided by the carrier. These codes cause a DS3 loopback in remote DS3 equipment or respond to codes from remote DS3 equipment. This applies to Bellcore M13 mode only. Different manufacturers use different patterns in M13 mode.')
hds3FEACLoopbackReq = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 15), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FEACLoopbackReq.setStatus('current')
if mibBuilder.loadTexts: hds3FEACLoopbackReq.setDescription('Select enabled(1) to allow the module to respond to a Far End Alarm and Control loopback request.')
hds3XmtAISLocalLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("framed-1010-cbitZero", 1), ("framed-allones-cbitZero", 2), ("unframed-allones", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3XmtAISLocalLoop.setStatus('current')
if mibBuilder.loadTexts: hds3XmtAISLocalLoop.setDescription('The Transmitted bit pattern used when the HDS3 port is in Local Loop.')
hds3RcvAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("framed1010-noOverheadBits", 1), ("cbitZero-noPayloadBits", 2), ("framed1010-cbitZero", 3), ("framed1111-noOverheadBits", 4), ("unframed-allones", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3RcvAIS.setStatus('current')
if mibBuilder.loadTexts: hds3RcvAIS.setDescription('The Received bit pattern to use to determine when the remote line is in error.')
hds3XmtAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("framed-1010-cbitZero", 1), ("framed-allones-cbitZero", 2), ("unframed-allones", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3XmtAIS.setStatus('current')
if mibBuilder.loadTexts: hds3XmtAIS.setDescription('The Transmitted bit pattern that used when the HDS3 port is in error.')
hds3DS2Group1 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 19), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group1.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group1.setDescription('Indicates the type of grouping option used to on links 1 through 4. Using the VT 2.0, link 4 is not used.')
hds3DS2Group2 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 20), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group2.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group2.setDescription('Indicates the type of grouping option used to on links 5 through 8. Using the VT 2.0, link 8 is not used.')
hds3DS2Group3 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 21), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group3.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group3.setDescription('Indicates the type of grouping option used to on links 9 through 12. Using the VT 2.0, link 12 is not used.')
hds3DS2Group4 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 22), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group4.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group4.setDescription('Indicates the type of grouping option used to on links 13 through 16. Using the VT 2.0, link 16 is not used.')
hds3DS2Group5 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 23), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group5.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group5.setDescription('Indicates the type of grouping option used to on links 17 through 20. Using the VT 2.0, link 20 is not used.')
hds3DS2Group6 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 24), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group6.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group6.setDescription('Indicates the type of grouping option used to on links 21 through 24. Using the VT 2.0, link 24 is not used.')
hds3DS2Group7 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 25), DS2GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3DS2Group7.setStatus('current')
if mibBuilder.loadTexts: hds3DS2Group7.setDescription('Indicates the type of grouping option used to on links 25 through 28. Using the VT 2.0, link 28 is not used.')
hds3CmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 1, 1, 26), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3CmdStatus.setStatus('current')
if mibBuilder.loadTexts: hds3CmdStatus.setDescription('The command status for this link configuration row/record. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row HDS3 Link Commands used in SET Command (1..199) update-link-config(1), Change existing Link Configuration Response States used in GET RESPONSE Command (200..399) update-successful (201) Link data has been successfully changed HDS3 Port Config Error Codes used in GET RESPONSE Command (400..699) err-general-link-config-error (400) Unknown link configuration error occurred err-invalid-link-status (401) Unrecognized link status setting err-invalid-link-framing (402) Line framing type not valid for link type err-invalid-link-command (403) Unrecognized link command-action err-invalid-link-op-mode (407) Configured M13 Op mode not valid for port; verify other link parameters match desired new mode err-invalid-link-rem-loop (408) Remote Loop type not valid for hds3 frame type err-invalid-link-ais (409) Unrecognized hds3 AIS selection err-data-locked-by-another-user (450) Another administrative user is making changes to this part of the system via a terminal session. Check Event Log for user name.')
hds3T1E1LinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hds3T1E1LinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1LinkConfigTable.setDescription("This is the HDS-3 T-1 Link Configuration table which consists of an entry for each of the card's 28 links. The total number of entries depends on the number of HDS3 cards in the nest.")
hds3T1E1LinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3T1E1CfgLinkAddr"))
if mibBuilder.loadTexts: hds3T1E1LinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1LinkConfigEntry.setDescription('The conceptual row of the HDS-3 T-1 Link Configuration table. A row in this table cannot be added or deleted, only modified.')
hds3T1E1CfgLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3T1E1CfgLinkAddr.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1CfgLinkAddr.setDescription('This number uniquely identifies a HDS-3 T1/E1 link resource. This number will be used throughout the system to identify a unique resource.')
hds3T1E1CfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3T1E1CfgResource.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1CfgResource.setDescription('Uniquely identifies an HDS-3 T1/E1 Channel in the system. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
hds3T1E1CfgLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1CfgLinkName.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1CfgLinkName.setDescription('This is the user friendly text name to identify the link.')
hds3T1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1Status.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1Status.setDescription('Dictates the current status of the link, in-service or out-of-service.')
hds3T1E1Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1Clear.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1Clear.setDescription('Determines if the port supports T1 or E1 unframed.')
hds3T1E1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e1", 0), ("e1Crc", 1), ("e1Cas", 2), ("e1CasCrc", 3), ("e1Unframed", 4), ("t1Esf", 5), ("t1D4", 6), ("t1Unframed", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1Framing.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1Framing.setDescription("Determines the type of framing used on the line. Choose between T1 SuperFrame 'D4', Extended SuperFrame (ESF), or T1 Unframed. When value of hds3T1E1Clear is set to unframed (2), the only valid framing options are: e1Unframed(4) or t1Unframed(7).")
hds3T1E1NetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 7), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1NetLoop.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1NetLoop.setDescription("Determines whether or not the module should respond to loop diagnostic commands received from the network supplier. Select 'enable' unless the commands are to be passed to another HDS3 device.")
hds3T1E1YelAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 8), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1YelAlrm.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1YelAlrm.setDescription("Causes the module to discard data and send a yellow alarm if it is in a red alarm condition after a 3 second period. 'Yes' must be chosen if the network supplier is a common carrier, such as a telephone company.")
hds3T1E1RecoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 10, 15))).clone(namedValues=NamedValues(("timeout-3-secs", 3), ("timeout-10-secs", 10), ("timeout-15-secs", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1RecoverTime.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1RecoverTime.setDescription('This is the red alarm timeout value. Determines the amount of seconds the port will wait to stop sending the yellow alarm when coming out of a red alarm condition. This field does not apply to E1 links.')
hds3T1E1EsfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("att-54016", 0), ("ansi-t1-403", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1EsfFormat.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1EsfFormat.setDescription('Determines the type of ESF network commands the T-1 link will respond to. It has no meaning for D4 networks. With ESF networks, this information must be obtained from the network supplier.')
hds3T1E1IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("busy", 0), ("idle", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1IdleCode.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1IdleCode.setDescription("Determines the whether the code that will be transmitted over the unused links will be 'idle' or 'busy' (all 1's).")
hds3T1E1CfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 12), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1CfgCmdStatus.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1CfgCmdStatus.setDescription("The command status for this link configuration row/record. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row HDS3-T1E1 Link Commands used in SET Command (1..199) update(1) Change existing Link Configuration inServiceAll (7) Change Link Status to in-service for all 8 links. copyToAll (9) Copy T1 Link configuration to all other links within the same device outOfServiceAll (12) Change Link Status to out-of-service for all 8 links. Response States used in GET RESPONSE Command (100..199) update-successful (101) Link data has been successfully changed insvc-successful (107) All Links have been successfully placed In Service copy-successful (109) T1 Link data has been successfully copied to other links oos-successful (112) All Links have been successfully placed Out of Service HDS3-T1E1 Link Config Error Codes used in GET RESPONSE Command (400..699) err-general-link-config-error (400) Unknown link configuration error occurred err-invalid-link-status (401) Unrecognized link status setting err-invalid-link-framing (402) Line framing type not valid for link type err-invalid-link-command (403) Unrecognized link command-action err-invalid-esf-format (405) ESF type not applicable to link type err-invalid-link-density (406) Unrecognized T1 link density setting err-invalid-network-loop (410) Unrecognized network loop setting err-invalid-yellow-alrm (411) Unrecognized yellow alarm setting err-invalid-red-timeout (412) Unrecognized red alarm timeout err-invalid-idle-code (413) Unrecognized idle code err-device-in-standby (414) Can't change config for designated Standby device err-invalid-link-bits (427) Reserved E1 bits must be left at zero. err-data-locked-by-another-user (450) Another administrative user is making changes to this part of the system via a terminal session. Check Event Log for user name err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big")
hds3T1E1Gr303Facility = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 13), DecisionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3T1E1Gr303Facility.setStatus('obsolete')
if mibBuilder.loadTexts: hds3T1E1Gr303Facility.setDescription('Enables link to be configured as a Gr303 Facility')
hds3T1E1NationalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 14), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1NationalBits.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1NationalBits.setDescription('Enables E1 National S-bits to be set to zero or one. This single byte field can be changed to set the values of the E1 NFA byte in odd frames as depicted below: sa8 sa7 sa6 sa5 sa4 reserved bits --- --- --- --- --- ------------- 1 1 1 1 1 0 0 0 = F8 (default) Values should be entered in Hex. If reserved bits are changed, an error code (427) will be returned in the command status. ')
hds3T1E1InterNational = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 1, 2, 1, 15), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3T1E1InterNational.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1InterNational.setDescription('Enables InterNational S(i) Spare bit to be set to zero or one. This single byte field can be changed to set the values of the Bit 1 of TS0 G.704 frame as depicted below: reserved bits S(i) -------------------------- ----- 0 0 0 0 0 0 0 1 = 01 (default) Values should be entered in Hex. If reserved bits are changed, an error code (427) will be returned in the command status. ')
hds3FramerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hds3FramerStatusTable.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusTable.setDescription("This is the HDS-3 Framer Status table which consists of a single entry for each card's Framer Display. The total number of entries depends on the number of HDS3 cards in the nest.")
hds3FramerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3FramerStatusAddr"))
if mibBuilder.loadTexts: hds3FramerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusEntry.setDescription('The conceptual row of the Framer table. A row in this table cannot be added or deleted, only modified.')
hds3FramerStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusAddr.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusAddr.setDescription('This number uniquely identifies a HDS-3 Framer resource. This number will be used throughout the system to identify a unique resource.')
hds3FramerStatusResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusResource.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusResource.setDescription('This number uniquely identifies a HDS-3 Framer link resource. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table Entry.')
hds3FramerStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 32, 64, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("ais", 8), ("lof", 32), ("los", 64), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusState.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusState.setDescription('Determines the current line condition status of the Framer. ok (0) - No Alarm ais (8) - Sending All Ones lof (32) - Loss/Out of Frame los (64) - Loss of Signal errors (2147483647) - Multiple Errors displays raw bit field value ')
hds3FramerStatusRedAlrmErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusRedAlrmErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusRedAlrmErrSecs.setDescription('This is the number of seconds a Red Alarm condition was declared. Declared when out of frame condition persists for more than 13.5msec.')
hds3FramerStatusLOSErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusLOSErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusLOSErrSecs.setDescription('This is the number of seconds a Loss of Signal condition was declared. Loss of signal declared after receipt of 175 contiguous zeroes.')
hds3FramerStatusOOFErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusOOFErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusOOFErrSecs.setDescription('This is the number of seconds Frame alignment errors were detected.')
hds3FramerStatusAISErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusAISErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusAISErrSecs.setDescription('This is the number of seconds a Alarm Indication Signal condition was declared. Declared after optioned AIS pattern is detected for more than 13.5msec.')
hds3FramerStatusRcvIdleErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusRcvIdleErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusRcvIdleErrSecs.setDescription('This is the number of seconds a Receive Idle Pattern condition was declared. Declared when DS3 1100 idle pattern detected for more than 13.5ms.')
hds3FramerStatusFarEndRcvErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusFarEndRcvErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusFarEndRcvErrSecs.setDescription('This is the number of seconds a Far End Receive Failure condition was declared. Declared when both X-bits set to 0 in M13 and C-bit Parity frame format (i.e., yellow alarm indicator)')
hds3FramerStatusCFAErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusCFAErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusCFAErrSecs.setDescription('This is the number of seconds a Frame alignment change was detected.')
hds3FramerStatusTotErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusTotErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusTotErrSecs.setDescription('Total number of seconds in which any of the errored events have occurred.')
hds3FramerStatusPbitParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusPbitParityErrs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusPbitParityErrs.setDescription('The number of P-bit Parity errors detected.')
hds3FramerStatusCbitParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusCbitParityErrs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusCbitParityErrs.setDescription('The number of C-bit Parity errors detected.')
hds3FramerStatusFebeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusFebeErrs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusFebeErrs.setDescription('The number of Far End Block errors detected.')
hds3FramerStatusLCVErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusLCVErrs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusLCVErrs.setDescription('The number of Line Code Violation errors detected.')
hds3FramerStatusFramingErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusFramingErrs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusFramingErrs.setDescription('The number of Framing errors detected.')
hds3FramerStatusExcessZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3FramerStatusExcessZeroErrs.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusExcessZeroErrs.setDescription('The number of Excessive Zero errors detected.')
hds3FramerStatusInsErrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8))).clone(namedValues=NamedValues(("febe", 1), ("p-bit-parity", 2), ("c-bit-parity", 3), ("multiframe-align", 4), ("frame-alignment", 5), ("allErrors", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FramerStatusInsErrMode.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusInsErrMode.setDescription("Determines the status of the current Insert Error mode associated with the framer. In order to insert an error, the hds3FramerStatusCmdStatus must be sent in a SET PDU with a value of 'insertError'.")
hds3FramerStatusCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 16, 101, 114, 116, 200, 205, 206, 208, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("clearErrors", 14), ("insertError", 16), ("update-successful", 101), ("clear-successful", 114), ("insert-successful", 116), ("err-general-framer-error", 200), ("err-test-in-progress", 205), ("err-field-cannot-be-set", 206), ("err-invalid-command", 208), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3FramerStatusCmdStatus.setStatus('current')
if mibBuilder.loadTexts: hds3FramerStatusCmdStatus.setDescription('This is the command status for the DS3 Framer Row. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row DS3 Framer Action Commands used in SET Command (1..99) update (1) Can be used optionally when inserting errors in order to get status code back in response clearErrors (14) Resets all error counters and bert test time to zero insertError (16) Inserts the current invalid bit pattern as indicated by the value of hds3FramerStatusInsErrMode. Response States used in GET RESPONSE Command (100..199) update-successful (101) Action has been successfully performed clear-successful (114) Error counts have been successfully cleared insert-successful (116) Errored bits have been successfully inserted The Error Codes used in GET RESPONSE Command (200..799) err-general-framer-error (200) Unknown request error occurred. err-test-in-progress (205) Requested action cannot be performed during bert err-field-cannot-be-set (206) Read-only field was included in SET request err-invalid-command (208) Unrecognized framer Command requested err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big')
hds3LIUTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2), )
if mibBuilder.loadTexts: hds3LIUTable.setStatus('current')
if mibBuilder.loadTexts: hds3LIUTable.setDescription("This is the HDS-3 LIU Diagnostic Status Display table which consists of an entry for each HDS3 card's Line Interface Unit Display. The number of entries depends on the number of HDS3 cards in the nest.")
hds3LIUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1), ).setIndexNames((0, "ERI-DNX-HDS3-MIB", "hds3LIUAddr"))
if mibBuilder.loadTexts: hds3LIUEntry.setStatus('current')
if mibBuilder.loadTexts: hds3LIUEntry.setDescription('The conceptual row of the HDS3 LIU table. A row in this table cannot be added or deleted, only modified.')
hds3LIUAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUAddr.setStatus('current')
if mibBuilder.loadTexts: hds3LIUAddr.setDescription('This number uniquely identifies a HDS-3 LIU resource address. This number will be used throughout the system to identify a unique resource.')
hds3LIUResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUResource.setStatus('current')
if mibBuilder.loadTexts: hds3LIUResource.setDescription('This number uniquely identifies a HDS-3 LIU resource. This number is provided as a key to allow the manager to map this entry to a corresponding Resource Table Entry.')
hds3LIUBertState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 45))).clone(namedValues=NamedValues(("liu-bert", 44), ("off", 45)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3LIUBertState.setStatus('current')
if mibBuilder.loadTexts: hds3LIUBertState.setDescription('This is the LIU Bert State indicated by liu-bert(on)/off. The LIU Bert is an 2^15-1 Unframed BERT.')
hds3LIUBertErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUBertErrSecs.setStatus('current')
if mibBuilder.loadTexts: hds3LIUBertErrSecs.setDescription('This is the number of LIU Bert Errored seconds.')
hds3LIUBertDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUBertDuration.setStatus('current')
if mibBuilder.loadTexts: hds3LIUBertDuration.setDescription('This is the number of seconds for the LIU Bert Duration.')
hds3LIULoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 36, 39))).clone(namedValues=NamedValues(("off", 0), ("ds3-local", 1), ("ds3-line", 36), ("liu", 39)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3LIULoopType.setStatus('current')
if mibBuilder.loadTexts: hds3LIULoopType.setDescription('Indicates the loopback status of the DS3 Framer/LIU for this device. off (0) - indicates loopback is disabled ds3-local (1) - indicates DS3 local data is looped back to itself ds3-line (36)- entire DS3 Frame is looped, framing is not regenerated liu (39)- indicates Line Interface Unit local data is looped back to itself.')
hds3LIUDigitalErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUDigitalErrs.setStatus('current')
if mibBuilder.loadTexts: hds3LIUDigitalErrs.setDescription('This is the number of seconds recorded for the LIU Digital Errors.')
hds3LIUAnalogErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUAnalogErrs.setStatus('current')
if mibBuilder.loadTexts: hds3LIUAnalogErrs.setDescription('This is the number of seconds recorded for the LIU Analog Errors.')
hds3LIUExcessZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUExcessZeroErrs.setStatus('current')
if mibBuilder.loadTexts: hds3LIUExcessZeroErrs.setDescription('This is the number of seconds LIU Excess zero errors were detected.')
hds3LIUCodingViolationErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUCodingViolationErrs.setStatus('current')
if mibBuilder.loadTexts: hds3LIUCodingViolationErrs.setDescription('This is the total number of Errored Seconds for the LIU Coding Violation.')
hds3LIUPRBSCheckErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hds3LIUPRBSCheckErrs.setStatus('current')
if mibBuilder.loadTexts: hds3LIUPRBSCheckErrs.setDescription('This is the total number of Errored Seconds for the LIU PRBS check.')
hds3LIUCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 101, 114, 200, 202, 203, 205, 206, 208, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("clearErrors", 14), ("update-successful", 101), ("clear-successful", 114), ("err-general-liu-error", 200), ("err-invalid-loop-type", 202), ("err-invalid-bert-type", 203), ("err-test-in-progress", 205), ("err-field-cannot-be-set", 206), ("err-invalid-command", 208), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hds3LIUCmdStatus.setStatus('current')
if mibBuilder.loadTexts: hds3LIUCmdStatus.setDescription('This is the command status for the LIU Framer Row. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row Commands used in SET Command (1..99) update (1) Can be used optionally when activating loops and berts in order to get status code back in response clearErrors (14) Resets all error counters and bert test time to zero Response States used in GET RESPONSE Command (100..199) update-successful (101) Test action has been successfully performed clear-successful (114) Error counts have been successfully cleared Error Codes used in GET RESPONSE Command (200..799) err-general-liu-error (200) Unknown LIU request error occurred. err-invalid-loop-type (202) Unrecognized loop selection err-invalid-bert-type (203) Unrecognized bert selection err-test-in-progress (205) Requested action cannot be performed during bert err-field-cannot-be-set (206) Read-only field was included in SET request err-invalid-command (208) Unrecognized Test Command requested err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big')
dnxHDS3Enterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 0))
if mibBuilder.loadTexts: dnxHDS3Enterprise.setStatus('current')
if mibBuilder.loadTexts: dnxHDS3Enterprise.setDescription('ERI DNX HDS3 Enterprise for Alarms/Events')
hds3PortConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-HDS3-MIB", "hds3PortCfgAddr"), ("ERI-DNX-HDS3-MIB", "hds3CmdStatus"))
if mibBuilder.loadTexts: hds3PortConfigTrap.setStatus('current')
if mibBuilder.loadTexts: hds3PortConfigTrap.setDescription('This trap is used to notify a NMS that a user has updated the configuration for a given HDS3 Port entry.')
hds3T1E1ConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 2, 0, 2)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-HDS3-MIB", "hds3T1E1CfgLinkAddr"), ("ERI-DNX-HDS3-MIB", "hds3T1E1CfgCmdStatus"))
if mibBuilder.loadTexts: hds3T1E1ConfigTrap.setStatus('current')
if mibBuilder.loadTexts: hds3T1E1ConfigTrap.setDescription('This trap is used to notify a NMS that a user has updated the Link configuration for a given HDS3-T1/E1 channel entry.')
mibBuilder.exportSymbols("ERI-DNX-HDS3-MIB", hds3LIUDigitalErrs=hds3LIUDigitalErrs, hds3LIUExcessZeroErrs=hds3LIUExcessZeroErrs, hds3FramerStatusTable=hds3FramerStatusTable, hds3FramerStatusInsErrMode=hds3FramerStatusInsErrMode, hds3XmtAISLocalLoop=hds3XmtAISLocalLoop, hds3PortConfigTrap=hds3PortConfigTrap, hds3FramerStatusAISErrSecs=hds3FramerStatusAISErrSecs, hds3LIUTable=hds3LIUTable, hds3PortConfigTable=hds3PortConfigTable, hds3FramerStatusLOSErrSecs=hds3FramerStatusLOSErrSecs, dnxHDS3=dnxHDS3, hds3T1E1NetLoop=hds3T1E1NetLoop, hds3T1E1Framing=hds3T1E1Framing, hds3PortCfgAddr=hds3PortCfgAddr, hds3T1E1LinkConfigTable=hds3T1E1LinkConfigTable, hds3DS2Group1=hds3DS2Group1, hds3LIUAddr=hds3LIUAddr, hds3DS2Group5=hds3DS2Group5, hds3FramerStatusCmdStatus=hds3FramerStatusCmdStatus, hds3LIUCmdStatus=hds3LIUCmdStatus, hds3M13OpMode=hds3M13OpMode, hds3LIUEntry=hds3LIUEntry, hds3Location=hds3Location, DS2GroupType=DS2GroupType, hds3FramerStatusState=hds3FramerStatusState, hds3LIULoopType=hds3LIULoopType, hds3FramerStatusExcessZeroErrs=hds3FramerStatusExcessZeroErrs, hds3FramerStatusOOFErrSecs=hds3FramerStatusOOFErrSecs, hds3T1E1IdleCode=hds3T1E1IdleCode, hds3ShortCable=hds3ShortCable, hds3FramerStatusFramingErrs=hds3FramerStatusFramingErrs, hds3PortCfgResource=hds3PortCfgResource, hds3FramerStatusFarEndRcvErrSecs=hds3FramerStatusFarEndRcvErrSecs, hds3PortNumber=hds3PortNumber, PYSNMP_MODULE_ID=eriDNXHybridDS3MIB, hds3LIUCodingViolationErrs=hds3LIUCodingViolationErrs, hds3FramerStatusEntry=hds3FramerStatusEntry, hds3UnitName=hds3UnitName, eriDNXHybridDS3MIB=eriDNXHybridDS3MIB, hds3T1E1NationalBits=hds3T1E1NationalBits, hds3T1E1CfgLinkName=hds3T1E1CfgLinkName, hds3DS2Group4=hds3DS2Group4, hds3FramerStatusCbitParityErrs=hds3FramerStatusCbitParityErrs, hds3T1E1CfgResource=hds3T1E1CfgResource, hds3DS2Group6=hds3DS2Group6, hds3Generator=hds3Generator, dnxHDS3Enterprise=dnxHDS3Enterprise, hds3FEACLoopbackReq=hds3FEACLoopbackReq, hds3LIUPRBSCheckErrs=hds3LIUPRBSCheckErrs, hds3FrameId=hds3FrameId, hds3PortCfgName=hds3PortCfgName, hds3T1E1RecoverTime=hds3T1E1RecoverTime, hds3T1E1Status=hds3T1E1Status, hds3RcvLoopTiming=hds3RcvLoopTiming, hds3RcvAIS=hds3RcvAIS, hds3LIUBertDuration=hds3LIUBertDuration, hds3LIUBertState=hds3LIUBertState, hds3T1E1InterNational=hds3T1E1InterNational, hds3FramerStatusRcvIdleErrSecs=hds3FramerStatusRcvIdleErrSecs, hds3T1E1CfgCmdStatus=hds3T1E1CfgCmdStatus, hds3M13RemLoop=hds3M13RemLoop, hds3EquipmentId=hds3EquipmentId, hds3DS2Group2=hds3DS2Group2, hds3Config=hds3Config, hds3CmdStatus=hds3CmdStatus, hds3T1E1ConfigTrap=hds3T1E1ConfigTrap, hds3FacilityId=hds3FacilityId, hds3T1E1EsfFormat=hds3T1E1EsfFormat, hds3T1E1CfgLinkAddr=hds3T1E1CfgLinkAddr, hds3DS2Group3=hds3DS2Group3, hds3T1E1YelAlrm=hds3T1E1YelAlrm, hds3LIUAnalogErrs=hds3LIUAnalogErrs, hds3FramerStatusFebeErrs=hds3FramerStatusFebeErrs, hds3PortConfigEntry=hds3PortConfigEntry, hds3DS2Group7=hds3DS2Group7, hds3FramerStatusResource=hds3FramerStatusResource, hds3FramerStatusLCVErrs=hds3FramerStatusLCVErrs, hds3LIUResource=hds3LIUResource, hds3FramerStatusCFAErrSecs=hds3FramerStatusCFAErrSecs, hds3T1E1Gr303Facility=hds3T1E1Gr303Facility, hds3FramerStatusPbitParityErrs=hds3FramerStatusPbitParityErrs, hds3XmtAIS=hds3XmtAIS, hds3Diag=hds3Diag, hds3FramerStatusRedAlrmErrSecs=hds3FramerStatusRedAlrmErrSecs, hds3FramerStatusTotErrSecs=hds3FramerStatusTotErrSecs, hds3LIUBertErrSecs=hds3LIUBertErrSecs, hds3FramerStatusAddr=hds3FramerStatusAddr, hds3T1E1LinkConfigEntry=hds3T1E1LinkConfigEntry, hds3T1E1Clear=hds3T1E1Clear)
