#
# PySNMP MIB module APPLETALK-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPLETALK-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, ModuleIdentity, TimeTicks, Unsigned32, Bits, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Counter64, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "ModuleIdentity", "TimeTicks", "Unsigned32", "Bits", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Counter64", "Counter32", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
cjnAtalk = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4))
if mibBuilder.loadTexts: cjnAtalk.setLastUpdated('9903090000Z')
if mibBuilder.loadTexts: cjnAtalk.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnAtalk.setContactInfo('Erick Crowell -- ecrowell@lucent.com Raj Duggal (Group Leader) -- rduggal@lucent.com Simon Fang sfang@lucent.com Michael C. Cambria -- mcambria@lucent.com')
if mibBuilder.loadTexts: cjnAtalk.setDescription('Cajun Private Apple Talk Routing MIB')
class DdpAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class DisplayString(OctetString):
    pass

cjnAtGblGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 1))
cjnAtIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtIsEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnAtIsEnabled.setDescription('Enables Apple Talk Routing services on this device.')
cjnAtGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtGlobalStatsReset.setStatus('current')
if mibBuilder.loadTexts: cjnAtGlobalStatsReset.setDescription('When set to the value enable (2) all Apple Talk Global Statistics are reset to zero after which the value of this MIB object returns to disable(1)')
cjnAtIfZoneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2))
cjnAtIfNextZoneIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtIfNextZoneIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfNextZoneIndex.setDescription('The next AtIfZoneIndex value to be used to create a new row.')
cjnAtIfZoneTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 2), )
if mibBuilder.loadTexts: cjnAtIfZoneTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfZoneTable.setDescription('A list of Apple Talk Interface Zone Entries for this entity.')
cjnAtIfZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 2, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtPortIndex"), (0, "APPLETALK-PRIVATE-MIB", "cjnAtIfZoneIndex"))
if mibBuilder.loadTexts: cjnAtIfZoneEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfZoneEntry.setDescription('The Interface Zone Entry to a particular port.')
cjnAtIfZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtIfZoneIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfZoneIndex.setDescription('An integer that is unique to the IfZoneName that is present in this entry. For any given zone name, every zipEntry that has an equal zone name will have the same IfZoneIndex.')
cjnAtIfZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtIfZoneName.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfZoneName.setDescription('The ASCII zone name of this entry.')
cjnAtIfZoneDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("guessed", 3))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtIfZoneDefault.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfZoneDefault.setDescription('When set to the value yes (1) this zone name is the default zone name for the port. When set to no(2), this zone name is not the default zone name for the port.')
cjnAtIfZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtIfZoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAtIfZoneRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnAtStatRtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3))
cjnAtStatRtTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1), )
if mibBuilder.loadTexts: cjnAtStatRtTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtTable.setDescription('A list of Apple Talk Static Route Entries for this entity.')
cjnAtStatRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtStatRtRangeStart"))
if mibBuilder.loadTexts: cjnAtStatRtEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtEntry.setDescription('The Static Route Entry to a particular network range.')
cjnAtStatRtRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtStatRtRangeStart.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtRangeStart.setDescription('The first DDP network address in the network range to which this routing entry pertains. This is a two octet DDP network address in network byte order.')
cjnAtStatRtRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtStatRtRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtRangeEnd.setDescription('The last DDP network address in the network range to which this routing entry pertains. This is a two octet DDP network address in network byte order. If the network to which this routing entry pertains is a Phase 1 network or a non-extended network, the value for rtmpRangeEnd shall be two octets of zero.')
cjnAtStatRtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtStatRtRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtRowStatus.setDescription("The Ddp Address of the next hop in the route to this entry's destination network.")
cjnAtStatRtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1, 1, 4), DdpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtStatRtNextHop.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtNextHop.setDescription("The Ddp Address of the next hop in the route to this entry's destination network.")
cjnAtStatRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtStatRtType.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtType.setDescription('The type of Static Route Entry.')
cjnAtStatRtZoneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4))
cjnAtNextStatRtZoneIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtNextStatRtZoneIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtNextStatRtZoneIndex.setDescription('The next StatRtZoneIndex value to be used for row creation.')
cjnAtStatRtZoneTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4, 2), )
if mibBuilder.loadTexts: cjnAtStatRtZoneTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtZoneTable.setDescription('A list of Apple Talk Static Route Zone Entries for this entity.')
cjnAtStatRtZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4, 2, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtStatRtRangeStart"), (0, "APPLETALK-PRIVATE-MIB", "cjnAtStatRtZoneIndex"))
if mibBuilder.loadTexts: cjnAtStatRtZoneEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtZoneEntry.setDescription('The Zone Entry to a particular Static Route.')
cjnAtStatRtZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtStatRtZoneIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtZoneIndex.setDescription('An integer that is unique to the StatRtZoneName that is present in this entry. For any given zone name, every zipEntry that has an equal zone name will have the same StatRtZoneIndex.')
cjnAtStatRtZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtStatRtZoneName.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtZoneName.setDescription('The ASCII zone name of this entry.')
cjnAtStatRtZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtStatRtZoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAtStatRtZoneRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnAtAarp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5))
cjnAarpReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAarpReset.setStatus('current')
if mibBuilder.loadTexts: cjnAarpReset.setDescription('When set to the value enable (2) all Apple Talk AARP Table is cleared, after which the value of this MIB object returns to disable(1)')
cjnAarpTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cjnAarpTable.setStatus('current')
if mibBuilder.loadTexts: cjnAarpTable.setDescription('The AppleTalk Address Translation Table contains an equivalence of AppleTalk Network Addresses to the link layer physical address.')
cjnAarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtPortIfIndex"), (0, "APPLETALK-PRIVATE-MIB", "cjnAarpNetAddress"))
if mibBuilder.loadTexts: cjnAarpEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAarpEntry.setDescription('Each entry contains one AppleTalk Network Address to physical address equivalence.')
cjnAarpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAarpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAarpRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnAarpPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAarpPhysAddress.setStatus('current')
if mibBuilder.loadTexts: cjnAarpPhysAddress.setDescription('The media-dependent physical address')
cjnAarpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1, 3), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAarpNetAddress.setStatus('current')
if mibBuilder.loadTexts: cjnAarpNetAddress.setDescription('The AppleTalk Network Address corresponding to the media-dependent physical address. Note: When cjnAarpType is either broadcast or multicast, this field represents only the beginning network in the network range.')
cjnAarpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAarpDescr.setStatus('current')
if mibBuilder.loadTexts: cjnAarpDescr.setDescription('A text string containing information about the port. This string is intended for presentation to a human; it must not contain anything but printable ASCII characters.')
cjnAarpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("broadcast", 2), ("multicast", 3), ("local", 4), ("remote", 5), ("static", 6), ("router", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAarpType.setStatus('current')
if mibBuilder.loadTexts: cjnAarpType.setDescription('The type of this AARP entry.')
cjnAarpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAarpTtl.setStatus('current')
if mibBuilder.loadTexts: cjnAarpTtl.setDescription('The TTL of this AARP entry.')
cjnAtRtmp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6))
cjnRtmpReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnRtmpReset.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpReset.setDescription('When set to the value enable (2) all Apple Talk Route Table is cleared, after which the value of this MIB object returns to disable(1)')
cjnRtmpTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2), )
if mibBuilder.loadTexts: cjnRtmpTable.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpTable.setDescription('A list of Routing Table Maintenance Protocol entries for this entity.')
cjnRtmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnRtmpRangeStart"))
if mibBuilder.loadTexts: cjnRtmpEntry.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpEntry.setDescription('The route entry to a particular network range.')
cjnRtmpRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpRangeStart.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpRangeStart.setDescription('The first DDP network address in the network range to which this routing entry pertains. This is a two octet DDP network address in network byte order.')
cjnRtmpRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpRangeEnd.setDescription('The last DDP network address in the network range to which this routing entry pertains. This is a two octet DDP network address in network byte order. If the network to which this routing entry pertains is a Phase 1 network or a non-extended network, the value for rtmpRangeEnd shall be two octets of zero.')
cjnRtmpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 3), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpNextHop.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpNextHop.setDescription("The next hop in the route to this entry's destination network.")
cjnRtmpHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpHops.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpHops.setDescription('The number of hops required to reach the destination network to which this routing entry pertains.')
cjnRtmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 1), ("suspect", 2), ("goingBad", 3), ("bad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpState.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpState.setDescription('The status of the information contained in this route entry. Setting this object to the value bad(4) has the effect of invalidating the corresponding entry in the rtmpTable. That is, it effectively disassociates the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive from agents tabular information corresponding to entries not currently in use. Proper interpretation of such entries requires examination of the relevant rtmpState object.')
cjnRtmpOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("static", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpOwner.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpOwner.setDescription('The Owner of this Route Entry.')
cjnRtmpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnRtmpDescr.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpDescr.setDescription('A text string containing information about the port used to forward to the next hop. This string is intended for presentation to a human; it must not contain anything but printable ASCII characters.')
cjnRtmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 6, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnRtmpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnRtmpRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnAtZip = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7))
cjnZipTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7, 1), )
if mibBuilder.loadTexts: cjnZipTable.setStatus('current')
if mibBuilder.loadTexts: cjnZipTable.setDescription('The table of zone information for reachable AppleTalk networks.')
cjnZipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7, 1, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnZipZoneNetStart"), (0, "APPLETALK-PRIVATE-MIB", "cjnZipZoneIndex"))
if mibBuilder.loadTexts: cjnZipEntry.setStatus('current')
if mibBuilder.loadTexts: cjnZipEntry.setDescription('An entry of zone information for a particular zone and network combination.')
cjnZipZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnZipZoneIndex.setStatus('current')
if mibBuilder.loadTexts: cjnZipZoneIndex.setDescription('An integer that is unique to the zipZoneName that is present in this entry. For any given zone name, every zipEntry that has an equal zone name will have the same zipZoneIndex.')
cjnZipZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnZipZoneName.setStatus('current')
if mibBuilder.loadTexts: cjnZipZoneName.setDescription('The ASCII zone name of this entry.')
cjnZipZoneNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnZipZoneNetStart.setStatus('current')
if mibBuilder.loadTexts: cjnZipZoneNetStart.setDescription('The network that starts the range for this entry. This address is a two octet DDP network address in network byte order.')
cjnZipZoneNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnZipZoneNetEnd.setStatus('current')
if mibBuilder.loadTexts: cjnZipZoneNetEnd.setDescription('The network that ends the range for this entry. This address is a two octet DDP network address in network byte order. If the network to which this zip entry pertains is a Phase 1 network or a non-extended network, the value for zipZoneNetEnd shall be two bytes of zero.')
cjnAtNbp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8))
cjnNbpTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1), )
if mibBuilder.loadTexts: cjnNbpTable.setStatus('current')
if mibBuilder.loadTexts: cjnNbpTable.setDescription('The table of NBP services registered on this entity.')
cjnNbpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnNbpIndex"))
if mibBuilder.loadTexts: cjnNbpEntry.setStatus('current')
if mibBuilder.loadTexts: cjnNbpEntry.setDescription('The description of an NBP service registered on this entity.')
cjnNbpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnNbpIndex.setStatus('current')
if mibBuilder.loadTexts: cjnNbpIndex.setDescription('The index of this NBP entry. This value ranges from 1 to the number of NBP entries currently registered on this entity.')
cjnNbpObject = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnNbpObject.setStatus('current')
if mibBuilder.loadTexts: cjnNbpObject.setDescription('The name of the service described by this entity.')
cjnNbpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnNbpType.setStatus('current')
if mibBuilder.loadTexts: cjnNbpType.setDescription('The type of the service described by this entity.')
cjnNbpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnNbpZone.setStatus('current')
if mibBuilder.loadTexts: cjnNbpZone.setDescription('The zone the service described by this entity is registered in.')
cjnNbpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnNbpState.setStatus('current')
if mibBuilder.loadTexts: cjnNbpState.setDescription('The state of this NBP entry. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the nbpTable. That is, it effectively disassociates the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive from agents tabular information corresponding to entries not currently in use. Proper interpretation of such entries requires examination of the relevant nbpState object.')
cjnAtEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 9))
cjnAtEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtEchoRequests.setStatus('current')
if mibBuilder.loadTexts: cjnAtEchoRequests.setDescription('The number of AppleTalk echo requests received.')
cjnAtEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtEchoReplies.setStatus('current')
if mibBuilder.loadTexts: cjnAtEchoReplies.setDescription('The number of AppleTalk echo replies sent.')
cjnAtEchoTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtEchoTimeouts.setStatus('current')
if mibBuilder.loadTexts: cjnAtEchoTimeouts.setDescription('The number of AppleTalk echo request timeouts.')
cjnAtEchoSend = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 9, 4), DdpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtEchoSend.setStatus('current')
if mibBuilder.loadTexts: cjnAtEchoSend.setDescription('Causes an Apple Talk Echo Request to be sent to the supplied Apple Talk Address.')
cjnAtEchoReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnAtEchoReset.setStatus('current')
if mibBuilder.loadTexts: cjnAtEchoReset.setDescription('When set to the value enable (2) all Apple Talk Echo Counters are reset to zero after which the value of this MIB object returns to disable(1)')
cjnAtGblStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10))
cjnAtDdp = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1))
cjnDdpOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpOutRequests.setStatus('current')
if mibBuilder.loadTexts: cjnDdpOutRequests.setDescription('The total number of DDP datagrams which were supplied to DDP by local DDP clients in requests for transmission. Note that this counter does not include any datagrams counted in ddpForwRequests.')
cjnDdpOutShorts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpOutShorts.setStatus('current')
if mibBuilder.loadTexts: cjnDdpOutShorts.setDescription('The total number of short DDP datagrams which were transmitted from this entity.')
cjnDdpOutLongs = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpOutLongs.setStatus('current')
if mibBuilder.loadTexts: cjnDdpOutLongs.setDescription('The total number of long DDP datagrams which were transmitted from this entity.')
cjnDdpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpInReceives.setStatus('current')
if mibBuilder.loadTexts: cjnDdpInReceives.setDescription('The total number of input datagrams received by DDP, including those received in error.')
cjnDdpForwRequests = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpForwRequests.setStatus('current')
if mibBuilder.loadTexts: cjnDdpForwRequests.setDescription('The number of input datagrams for which this entity was not their final DDP destination, as a result of which an attempt was made to find a route to forward them to that final destination.')
cjnDdpInLocalDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpInLocalDatagrams.setStatus('current')
if mibBuilder.loadTexts: cjnDdpInLocalDatagrams.setDescription('The total number of input DDP datagrams for which this entity was their final DDP destination.')
cjnDdpNoProtocolHandlers = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpNoProtocolHandlers.setStatus('current')
if mibBuilder.loadTexts: cjnDdpNoProtocolHandlers.setDescription('The total number of DDP datagrams addressed to this entity that were addressed to an upper layer protocol for which no protocol handler existed.')
cjnDdpOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpOutNoRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnDdpOutNoRoutes.setDescription('The total number of DDP datagrams dropped because a route could not be found to their final destination.')
cjnDdpTooShortErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpTooShortErrors.setStatus('current')
if mibBuilder.loadTexts: cjnDdpTooShortErrors.setDescription('The total number of input DDP datagrams dropped because the received data length was less than the data length specified in the DDP header or the received data length was less than the length of the expected DDP header.')
cjnDdpTooLongErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpTooLongErrors.setStatus('current')
if mibBuilder.loadTexts: cjnDdpTooLongErrors.setDescription('The total number of input DDP datagrams dropped because the received data length was greater than the data length specified in the DDP header or because they exceeded the maximum DDP datagram size.')
cjnDdpBroadcastErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpBroadcastErrors.setStatus('current')
if mibBuilder.loadTexts: cjnDdpBroadcastErrors.setDescription('The total number of input DDP datagrams dropped because this entity was not their final destination and they were addressed to the link level broadcast.')
cjnDdpShortDDPErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpShortDDPErrors.setStatus('current')
if mibBuilder.loadTexts: cjnDdpShortDDPErrors.setDescription('The total number of input DDP datagrams dropped because this entity was not their final destination and their type was short DDP.')
cjnDdpHopCountErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpHopCountErrors.setStatus('current')
if mibBuilder.loadTexts: cjnDdpHopCountErrors.setDescription('The total number of input DDP datagrams dropped because this entity was not their final destination and their hop count would exceed 15.')
cjnDdpChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: cjnDdpChecksumErrors.setDescription('The total number of input DDP datagrams dropped because of a checksum error.')
cjnDdpAarpRqRcv = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpAarpRqRcv.setStatus('current')
if mibBuilder.loadTexts: cjnDdpAarpRqRcv.setDescription('The total number of input AARP Requests Received.')
cjnDdpAarpReplyRcv = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpAarpReplyRcv.setStatus('current')
if mibBuilder.loadTexts: cjnDdpAarpReplyRcv.setDescription('The total number of input AARP Replies Received.')
cjnDdpAarpRqTx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpAarpRqTx.setStatus('current')
if mibBuilder.loadTexts: cjnDdpAarpRqTx.setDescription('The total number of output AARP Requests Transmitted.')
cjnDdpAarpReplyTx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpAarpReplyTx.setStatus('current')
if mibBuilder.loadTexts: cjnDdpAarpReplyTx.setDescription('The total number of output AARP Replies Transmitted.')
cjnDdpAarpBadPdu = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpAarpBadPdu.setStatus('current')
if mibBuilder.loadTexts: cjnDdpAarpBadPdu.setDescription('The total number of bad AARP PDU.')
cjnDdpCfgAddrError = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpCfgAddrError.setStatus('current')
if mibBuilder.loadTexts: cjnDdpCfgAddrError.setDescription('The total number of configuration address errors.')
cjnDdpCfgZoneError = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpCfgZoneError.setStatus('current')
if mibBuilder.loadTexts: cjnDdpCfgZoneError.setDescription('The total number of configuration zone errors.')
cjnDdpEchoRqRcv = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpEchoRqRcv.setStatus('current')
if mibBuilder.loadTexts: cjnDdpEchoRqRcv.setDescription('The total number of input Echo Requests Received.')
cjnDdpEchoReplyRcv = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpEchoReplyRcv.setStatus('current')
if mibBuilder.loadTexts: cjnDdpEchoReplyRcv.setDescription('The total number of input Echo Replies Received.')
cjnDdpEchoRqTx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 10, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDdpEchoRqTx.setStatus('current')
if mibBuilder.loadTexts: cjnDdpEchoRqTx.setDescription('The total number of output Echo Requests Transmitted.')
cjnAtPortConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11))
cjnAtPortNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortNextIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortNextIndex.setDescription('The next cjnAtPortIndex to be used for row creation.')
cjnAtPortTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2), )
if mibBuilder.loadTexts: cjnAtPortTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortTable.setDescription('A list of Cajun AppleTalk ports for this entity.')
cjnAtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtPortIndex"))
if mibBuilder.loadTexts: cjnAtPortEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortEntry.setDescription('The description of one of the Cajun AppleTalk ports on this entity.')
cjnAtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortIndex.setDescription("A unique value for each AppleTalk port. Its value is between 1 and the total number of AppleTalk ports. The value for each port must remain constant at least from the re-initialization of the entity's network management system to the next re-initialization.")
cjnAtPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnAtPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortDescr.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortDescr.setDescription('A text string containing information about the port. This string is intended for presentation to a human; it must not contain anything but printable ASCII characters.')
cjnAtPortMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 4), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortMetric.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortMetric.setDescription('The metric assigned to this port.')
cjnAtPortFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snap", 1), ("ethernet2", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortFrameType.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortFrameType.setDescription('The type of Ethernet Frames to be used by the port for Apple Talk.')
cjnAtPortNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortNetStart.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortNetStart.setDescription('The first AppleTalk network address in the range configured for this port. This is a two octet DDP network address in network byte order.')
cjnAtPortNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortNetEnd.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortNetEnd.setDescription('The last AppleTalk network address in the range configured for this port. This is a two octet DDP network address in network byte order. If the network to which this AppleTalk port is connected is a Phase 1 network or a non-extended network, the value for atportNetEnd shall be two octets of zero.')
cjnAtPortNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 8), DdpAddress().clone('000000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortNetAddress.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortNetAddress.setDescription('The AppleTalk network address configured for this port.')
cjnAtPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortAdminState.setDescription('The configuration status of this port.')
cjnAtPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortIfIndex.setDescription('The physical interface associated with this Appletalk port. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
cjnAtPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortVlan.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortVlan.setDescription('The vlan associated with this AppleTalk port.')
cjnAtPortClearZones = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 11, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtPortClearZones.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortClearZones.setDescription('set to enabled will clear all zones on this at port.')
cjnAtPortStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12))
cjnAtPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3), )
if mibBuilder.loadTexts: cjnAtPortStateTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateTable.setDescription('A list of interface specific Apple Talk Port State Entries')
cjnAtPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtPortStateIndex"))
if mibBuilder.loadTexts: cjnAtPortStateEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateEntry.setDescription('An cajun Apple Talk Port State instance')
cjnAtPortStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateIndex.setDescription('The globally unique value for this Apple Talk Port. This number MUST exist in the cjnIpIfTable ?? to be valid.')
cjnAtPortStateDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateDescr.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateDescr.setDescription('A text string containing information about the port. This string is intended for presentation to a human; it must not contain anything but printable ASCII characters.')
cjnAtPortStateNetConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configured", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateNetConfig.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateNetConfig.setDescription('The configuration status of this port.')
cjnAtPortStateNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateNetStart.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateNetStart.setDescription('The first AppleTalk network address in the range currently used for this port. This is a two octet DDP network address in network byte order.')
cjnAtPortStateNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateNetEnd.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateNetEnd.setDescription('The last AppleTalk network address in the range currently used for this port. This is a two octet DDP network address in network byte order. If the network to which this AppleTalk port is connected is a Phase 1 network or a non-extended network, the value for atportNetEnd shall be two octets of zero.')
cjnAtPortStateNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 6), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateNetAddress.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateNetAddress.setDescription('The AppleTalk network address being used on this port.')
cjnAtPortStateState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtPortStateState.setStatus('current')
if mibBuilder.loadTexts: cjnAtPortStateState.setDescription('The operational status of this port.')
cjnAtFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13))
cjnAtFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1), )
if mibBuilder.loadTexts: cjnAtFilterTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterTable.setDescription('A list of Apple Talk Filters for this entity.')
cjnAtFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtFilterIndex"))
if mibBuilder.loadTexts: cjnAtFilterEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterEntry.setDescription('The Filters defined.')
cjnAtFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnAtFilterIndex.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterIndex.setDescription('An integer that is unique to the Filter that is present in this entry.')
cjnAtFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnAtFilterItem = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("zoneName", 1), ("nbpObject", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtFilterItem.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterItem.setDescription('When set to the value zone_name(1) this filter applies to zone names. When set to nbp_object(2), this filter applies to nbp object names.')
cjnAtFilterOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtFilterOperation.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterOperation.setDescription('When set to the value permit(1) objects with this name will not be filtered. When set to no(2), objects with this name will be filtered.')
cjnAtFilterString = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 13, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtFilterString.setStatus('current')
if mibBuilder.loadTexts: cjnAtFilterString.setDescription('The ASCII name of the entry to be filtered. When FilterItem is zone_name(1), string is the name of the zone to be filtered. When FilterItem is nbp_object(2), string is the name of the nbp object to be filtered.')
cjnAtAccessIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 14))
cjnAtAccessIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 14, 1), )
if mibBuilder.loadTexts: cjnAtAccessIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnAtAccessIfTable.setDescription('A list of Apple Talk Filters on Apple Talk Interfaces.')
cjnAtAccessIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 14, 1, 1), ).setIndexNames((0, "APPLETALK-PRIVATE-MIB", "cjnAtFilterIndex"), (0, "APPLETALK-PRIVATE-MIB", "cjnAtPortIndex"))
if mibBuilder.loadTexts: cjnAtAccessIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnAtAccessIfEntry.setDescription('The Zone Filters defined.')
cjnAtAccessIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 4, 14, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnAtAccessIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnAtAccessIfRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
mibBuilder.exportSymbols("APPLETALK-PRIVATE-MIB", cjnRtmpState=cjnRtmpState, cjnDdpChecksumErrors=cjnDdpChecksumErrors, cjnRtmpRowStatus=cjnRtmpRowStatus, cjnDdpAarpReplyTx=cjnDdpAarpReplyTx, cjnAtGblGroup=cjnAtGblGroup, cjnAtStatRtZoneTable=cjnAtStatRtZoneTable, cjnDdpCfgZoneError=cjnDdpCfgZoneError, cjnAtStatRtRangeStart=cjnAtStatRtRangeStart, cjnAtStatRtZoneGroup=cjnAtStatRtZoneGroup, cjnAarpReset=cjnAarpReset, cjnAtAccessIfRowStatus=cjnAtAccessIfRowStatus, cjnAtEchoReset=cjnAtEchoReset, cjnAtAccessIfTable=cjnAtAccessIfTable, cjnAarpTable=cjnAarpTable, cjnRtmpReset=cjnRtmpReset, cjnNbpTable=cjnNbpTable, cjnAarpDescr=cjnAarpDescr, cjnAtPortNextIndex=cjnAtPortNextIndex, cjnAarpType=cjnAarpType, cjnDdpShortDDPErrors=cjnDdpShortDDPErrors, cjnDdpBroadcastErrors=cjnDdpBroadcastErrors, cjnAtFilterOperation=cjnAtFilterOperation, cjnAtPortConfGroup=cjnAtPortConfGroup, cjnAtStatRtType=cjnAtStatRtType, cjnZipZoneNetStart=cjnZipZoneNetStart, cjnAtStatRtZoneRowStatus=cjnAtStatRtZoneRowStatus, cjnDdpAarpBadPdu=cjnDdpAarpBadPdu, cjnAtFilterEntry=cjnAtFilterEntry, cjnAtStatRtZoneIndex=cjnAtStatRtZoneIndex, cjnAtAccessIfGroup=cjnAtAccessIfGroup, cjnAtPortNetEnd=cjnAtPortNetEnd, cjnDdpOutRequests=cjnDdpOutRequests, cjnDdpOutLongs=cjnDdpOutLongs, cjnRtmpTable=cjnRtmpTable, cjnAtPortIndex=cjnAtPortIndex, cjnAtIfZoneTable=cjnAtIfZoneTable, cjnAtAccessIfEntry=cjnAtAccessIfEntry, PYSNMP_MODULE_ID=cjnAtalk, cjnAtPortNetStart=cjnAtPortNetStart, cjnZipZoneIndex=cjnZipZoneIndex, cjnAtPortClearZones=cjnAtPortClearZones, cjnAtStatRtEntry=cjnAtStatRtEntry, cjnAarpRowStatus=cjnAarpRowStatus, cjnAtIfZoneEntry=cjnAtIfZoneEntry, cjnAtFilterRowStatus=cjnAtFilterRowStatus, cjnAtPortStateEntry=cjnAtPortStateEntry, cjnAtPortEntry=cjnAtPortEntry, DisplayString=DisplayString, cjnAtStatRtZoneEntry=cjnAtStatRtZoneEntry, cjnAtIfZoneRowStatus=cjnAtIfZoneRowStatus, cjnDdpTooLongErrors=cjnDdpTooLongErrors, cjnDdpTooShortErrors=cjnDdpTooShortErrors, cjnRtmpDescr=cjnRtmpDescr, cjnAtPortStateTable=cjnAtPortStateTable, cjnAtPortStateNetEnd=cjnAtPortStateNetEnd, cjnAtIfZoneGroup=cjnAtIfZoneGroup, cjnRtmpEntry=cjnRtmpEntry, cjnAtPortStateGroup=cjnAtPortStateGroup, cjnAarpTtl=cjnAarpTtl, cjnDdpForwRequests=cjnDdpForwRequests, cjnDdpAarpReplyRcv=cjnDdpAarpReplyRcv, cjnAtFilterGroup=cjnAtFilterGroup, cjnAtPortDescr=cjnAtPortDescr, cjnDdpNoProtocolHandlers=cjnDdpNoProtocolHandlers, cjnAtPortFrameType=cjnAtPortFrameType, cjnAarpNetAddress=cjnAarpNetAddress, cjnAtIfZoneDefault=cjnAtIfZoneDefault, cjnAtPortStateDescr=cjnAtPortStateDescr, cjnAtPortStateNetAddress=cjnAtPortStateNetAddress, cjnAtPortNetAddress=cjnAtPortNetAddress, cjnAtPortVlan=cjnAtPortVlan, cjnAtStatRtGroup=cjnAtStatRtGroup, cjnAtFilterItem=cjnAtFilterItem, cjnNbpState=cjnNbpState, cjnDdpCfgAddrError=cjnDdpCfgAddrError, cjnAtPortIfIndex=cjnAtPortIfIndex, cjnDdpHopCountErrors=cjnDdpHopCountErrors, cjnDdpInLocalDatagrams=cjnDdpInLocalDatagrams, cjnAtPortMetric=cjnAtPortMetric, cjnAtPortStateState=cjnAtPortStateState, cjnAtStatRtZoneName=cjnAtStatRtZoneName, DdpAddress=DdpAddress, cjnNbpObject=cjnNbpObject, cjnDdpAarpRqTx=cjnDdpAarpRqTx, cjnNbpType=cjnNbpType, cjnAtFilterTable=cjnAtFilterTable, cjnAtIfNextZoneIndex=cjnAtIfNextZoneIndex, cjnAtDdp=cjnAtDdp, cjnAtRtmp=cjnAtRtmp, cjnAtStatRtRowStatus=cjnAtStatRtRowStatus, cjnAtPortAdminState=cjnAtPortAdminState, cjnDdpOutShorts=cjnDdpOutShorts, cjnZipZoneNetEnd=cjnZipZoneNetEnd, cjnAtEchoSend=cjnAtEchoSend, cjnAtPortStateNetStart=cjnAtPortStateNetStart, cjnDdpInReceives=cjnDdpInReceives, cjnDdpOutNoRoutes=cjnDdpOutNoRoutes, cjnAtEchoTimeouts=cjnAtEchoTimeouts, cjnDdpEchoReplyRcv=cjnDdpEchoReplyRcv, cjnAtStatRtRangeEnd=cjnAtStatRtRangeEnd, cjnAtPortRowStatus=cjnAtPortRowStatus, cjnAtNbp=cjnAtNbp, cjnDdpAarpRqRcv=cjnDdpAarpRqRcv, cjnRtmpNextHop=cjnRtmpNextHop, cjnZipZoneName=cjnZipZoneName, cjnDdpEchoRqTx=cjnDdpEchoRqTx, cjnAtPortStateIndex=cjnAtPortStateIndex, cjnAtZip=cjnAtZip, cjnNbpIndex=cjnNbpIndex, cjnAtFilterString=cjnAtFilterString, cjnZipEntry=cjnZipEntry, cjnAtGblStatsGroup=cjnAtGblStatsGroup, cjnAtIsEnabled=cjnAtIsEnabled, cjnZipTable=cjnZipTable, cjnNbpZone=cjnNbpZone, cjnAtNextStatRtZoneIndex=cjnAtNextStatRtZoneIndex, cjnAarpPhysAddress=cjnAarpPhysAddress, cjnAtStatRtTable=cjnAtStatRtTable, cjnRtmpOwner=cjnRtmpOwner, cjnAtEchoRequests=cjnAtEchoRequests, cjnAtFilterIndex=cjnAtFilterIndex, cjnAtAarp=cjnAtAarp, cjnAtStatRtNextHop=cjnAtStatRtNextHop, cjnDdpEchoRqRcv=cjnDdpEchoRqRcv, cjnAtEchoReplies=cjnAtEchoReplies, cjnAtIfZoneName=cjnAtIfZoneName, cjnAarpEntry=cjnAarpEntry, cjnAtalk=cjnAtalk, cjnAtEcho=cjnAtEcho, cjnAtPortStateNetConfig=cjnAtPortStateNetConfig, cjnRtmpRangeEnd=cjnRtmpRangeEnd, cjnRtmpHops=cjnRtmpHops, cjnAtGlobalStatsReset=cjnAtGlobalStatsReset, cjnNbpEntry=cjnNbpEntry, cjnRtmpRangeStart=cjnRtmpRangeStart, cjnAtPortTable=cjnAtPortTable, cjnAtIfZoneIndex=cjnAtIfZoneIndex)
