#
# PySNMP MIB module BSUCLK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUCLK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
bsu, = mibBuilder.importSymbols("ANIROOT-MIB", "bsu")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, iso, ObjectIdentity, IpAddress, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, Integer32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "iso", "ObjectIdentity", "IpAddress", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "Integer32", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aniBsuClock = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 4))
if mibBuilder.loadTexts: aniBsuClock.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniBsuClock.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniBsuClock.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniBsuClock.setDescription('This module is used to configure the clock time on the BSU. BSUs need to obtain and set their current clock time at boot up. Sus will communicate with the BSU during their own boot up and set their own clock time to that of BSU. Time at the BSU can be set either through SNTP or manually. It is recommended to use SNTP to obtain time. ')
aniBsuClkSntpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuClkSntpTimeZone.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkSntpTimeZone.setDescription('This is used to set the appropriate Time Zone offset from GMT. The format of data should be +Hour:Min or -Hour:Min. The valid Hour should be between -13 to +14 The valid Min should be 00,15,30 or 45 For example: +12:00 or +12:30 or -3:45 ')
aniBsuClkSntpDstEnable = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuClkSntpDstEnable.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkSntpDstEnable.setDescription('This shows whether Daylight Saving is enabled or not. It gives user the option to incorporate Daylight Saving Time in the configuration. ')
aniBsuClkSntpDstStart = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuClkSntpDstStart.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkSntpDstStart.setDescription("Used to specify the start of Daylight Saving Time which should be entered in the 'mmddhh' format where m - month, d - day and h - hour. Can and must be set only if aniBsuClkSntpDstEnable is enabled. ")
aniBsuClkSntpDstEnd = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuClkSntpDstEnd.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkSntpDstEnd.setDescription("Used to specify the end of Daylight Saving Time which should be entered in the 'mmddhh' format where m - month, d - day and h - hour. Can and must be set only if aniBsuClkSntpDstEnable is enabled. ")
aniBsuClkSntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuClkSntpEnable.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkSntpEnable.setDescription('This flag is used to enable(1) or disable(2) SNTP. It is recommended to use SNTP rather than manually setting the time to avoid errors in clock times simply due to manual entry across various BSUs. ')
aniBsuClkManualTime = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuClkManualTime.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkManualTime.setDescription("Used to specify the local clock time manually. It should be entered in the 'mm/dd/yyyy hh:mm:ss' format that is, month/day/year hour:minute:second. When the user sends a set request on this parameter, the aniBsuClkSntpEnable value is automatically set to disable(2), to set this manual time entry on BSU. ")
aniBsuClkCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuClkCurrentTime.setStatus('current')
if mibBuilder.loadTexts: aniBsuClkCurrentTime.setDescription("The Current Time in 'mm/dd/yy hh:mm:ss' format, that is, month/day/year hour:minute:second. ")
mibBuilder.exportSymbols("BSUCLK-MIB", aniBsuClkCurrentTime=aniBsuClkCurrentTime, aniBsuClkSntpDstStart=aniBsuClkSntpDstStart, PYSNMP_MODULE_ID=aniBsuClock, aniBsuClkSntpDstEnable=aniBsuClkSntpDstEnable, aniBsuClock=aniBsuClock, aniBsuClkManualTime=aniBsuClkManualTime, aniBsuClkSntpEnable=aniBsuClkSntpEnable, aniBsuClkSntpTimeZone=aniBsuClkSntpTimeZone, aniBsuClkSntpDstEnd=aniBsuClkSntpDstEnd)
