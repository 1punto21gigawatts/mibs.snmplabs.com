#
# PySNMP MIB module LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
lhnModules, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", "lhnModules")
lhnNusCommonInfo, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-NUS-COMMON-MIB", "lhnNusCommonInfo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, Integer32, Counter64, Gauge32, TimeTicks, MibIdentifier, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Integer32", "Counter64", "Gauge32", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "ModuleIdentity", "Counter32")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
lhnNusCommonInfoModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 4))
if mibBuilder.loadTexts: lhnNusCommonInfoModule.setLastUpdated('0106010000Z')
if mibBuilder.loadTexts: lhnNusCommonInfoModule.setOrganization('LeftHand Networks, Inc.')
if mibBuilder.loadTexts: lhnNusCommonInfoModule.setContactInfo(' Author: Jose Faria LeftHand Networks postal: 1688 Conestoga St. Boulder, CO 80301 USA email: jfaria@lefthandnetworks.com phone: +1 303 449-4100 ')
if mibBuilder.loadTexts: lhnNusCommonInfoModule.setDescription('info items for NSM')
infoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: infoSerialNumber.setDescription('serial number of the NSM')
infoModel = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModel.setStatus('current')
if mibBuilder.loadTexts: infoModel.setDescription('model of the NSM')
infoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: infoSoftwareVersion.setDescription('software version of the NSM')
infoDSPFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDSPFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: infoDSPFirmwareVersion.setDescription('DSP firmware version of the NSM')
infoMotherboardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 5), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoMotherboardTemperature.setStatus('current')
if mibBuilder.loadTexts: infoMotherboardTemperature.setDescription('motherboard temperature')
infoCPUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 6), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoCPUTemperature.setStatus('current')
if mibBuilder.loadTexts: infoCPUTemperature.setDescription('CPU temperature')
infoCPUFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 7), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoCPUFanSpeed.setStatus('current')
if mibBuilder.loadTexts: infoCPUFanSpeed.setDescription('CPU fan speed')
infoPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerSupplyCount.setStatus('current')
if mibBuilder.loadTexts: infoPowerSupplyCount.setDescription('Number of power supplies')
infoPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: infoPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: infoPowerSupplyTable.setDescription('A table of power supplies in the system. The number of entries is given by infoPowerSupplyCount.')
infoPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", "infoPowerSupplyIndex"))
if mibBuilder.loadTexts: infoPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: infoPowerSupplyEntry.setDescription('A row of power supply parameters')
infoPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: infoPowerSupplyIndex.setDescription('index for a power supply')
infoPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("marginal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: infoPowerSupplyStatus.setDescription('power supply status')
infoSFDSCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSCount.setStatus('current')
if mibBuilder.loadTexts: infoSFDSCount.setDescription('Number of SFDS cards')
infoSFDSTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: infoSFDSTable.setStatus('current')
if mibBuilder.loadTexts: infoSFDSTable.setDescription('A table of SFDS cards in the system. The number of entries is given by infoSFDSCount.')
infoSFDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", "infoSFDSIndex"))
if mibBuilder.loadTexts: infoSFDSEntry.setStatus('current')
if mibBuilder.loadTexts: infoSFDSEntry.setDescription('A row of SFDS parameters')
infoSFDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSIndex.setStatus('current')
if mibBuilder.loadTexts: infoSFDSIndex.setDescription('index for an SFDS card')
infoSFDSHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: infoSFDSHardwareVersion.setDescription('SFDS card hardware version')
infoSFDSFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: infoSFDSFirmwareVersion.setDescription('SFDS card firmware version')
infoSFDSDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSDriverVersion.setStatus('current')
if mibBuilder.loadTexts: infoSFDSDriverVersion.setDescription('SFDS card driver version')
infoSFDSMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 5), Counter32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSMemorySize.setStatus('current')
if mibBuilder.loadTexts: infoSFDSMemorySize.setDescription('Memory Size of SFDS Card')
infoSFDSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 11, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSFDSStatus.setStatus('current')
if mibBuilder.loadTexts: infoSFDSStatus.setDescription('SFDS card status')
infoDriveCardCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardCount.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardCount.setDescription('Number of drive interface cards')
infoDriveCardTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13), )
if mibBuilder.loadTexts: infoDriveCardTable.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardTable.setDescription('A table of drive interface cards in the system. The number of entries is given by infoDriveCardCount.')
infoDriveCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", "infoDriveCardIndex"))
if mibBuilder.loadTexts: infoDriveCardEntry.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardEntry.setDescription('A row of drive card parameters')
infoDriveCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardIndex.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardIndex.setDescription('index for a drive card')
infoDriveCardModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardModel.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardModel.setDescription('Drive Interface Card Model')
infoDriveCardBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardBiosVersion.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardBiosVersion.setDescription('Drive Interface Card BIOS Version')
infoDriveCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 1, 13, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDriveCardFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: infoDriveCardFirmwareVersion.setDescription('Drive Interface Card Firmware Version')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-NUS-COMMON-INFO-MIB", infoPowerSupplyEntry=infoPowerSupplyEntry, infoSFDSCount=infoSFDSCount, infoSFDSTable=infoSFDSTable, infoSFDSMemorySize=infoSFDSMemorySize, infoDSPFirmwareVersion=infoDSPFirmwareVersion, infoSFDSStatus=infoSFDSStatus, infoSerialNumber=infoSerialNumber, lhnNusCommonInfoModule=lhnNusCommonInfoModule, infoDriveCardBiosVersion=infoDriveCardBiosVersion, infoPowerSupplyStatus=infoPowerSupplyStatus, infoDriveCardCount=infoDriveCardCount, infoSoftwareVersion=infoSoftwareVersion, infoDriveCardModel=infoDriveCardModel, infoPowerSupplyTable=infoPowerSupplyTable, infoDriveCardEntry=infoDriveCardEntry, infoPowerSupplyCount=infoPowerSupplyCount, infoPowerSupplyIndex=infoPowerSupplyIndex, infoModel=infoModel, infoMotherboardTemperature=infoMotherboardTemperature, infoSFDSEntry=infoSFDSEntry, infoSFDSHardwareVersion=infoSFDSHardwareVersion, infoSFDSIndex=infoSFDSIndex, infoDriveCardTable=infoDriveCardTable, infoDriveCardFirmwareVersion=infoDriveCardFirmwareVersion, infoCPUTemperature=infoCPUTemperature, infoSFDSFirmwareVersion=infoSFDSFirmwareVersion, PYSNMP_MODULE_ID=lhnNusCommonInfoModule, infoCPUFanSpeed=infoCPUFanSpeed, infoDriveCardIndex=infoDriveCardIndex, infoSFDSDriverVersion=infoSFDSDriverVersion)
