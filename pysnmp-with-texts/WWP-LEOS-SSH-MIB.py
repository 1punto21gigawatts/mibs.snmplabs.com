#
# PySNMP MIB module WWP-LEOS-SSH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-SSH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, ObjectIdentity, Bits, ModuleIdentity, Gauge32, iso, MibIdentifier, NotificationType, Unsigned32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ObjectIdentity", "Bits", "ModuleIdentity", "Gauge32", "iso", "MibIdentifier", "NotificationType", "Unsigned32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosSSHMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34))
wwpLeosSSHMIB.setRevisions(('2012-04-10 00:00', '2011-06-15 00:00', '2006-04-18 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosSSHMIB.setRevisionsDescriptions(('Add new OIDs wwpLeosSSHServerClientInetAddrType and wwpLeosSSHServerClientInetAddr to support IP protocol version independent Inet addressing.', 'Updated the Max limits for objects wwpLeosSSHServerMaxLimitedUsers and wwpLeosSSHServerMaxSuperUsers. Added new object wwpLeosSSHServerMaxAdminUsers.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosSSHMIB.setLastUpdated('201204100000Z')
if mibBuilder.loadTexts: wwpLeosSSHMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosSSHMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosSSHMIB.setDescription('The MIB module defines the managed objects for the SSH available on the WWP specific products.')
wwpLeosSSHMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1))
wwpLeosSSHServerGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1))
wwpLeosSSHServerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2))
wwpLeosSSHServerListenerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 3))
wwpLeosSSHMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 2))
wwpLeosSSHMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 2, 0))
wwpLeosSSHMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 3))
wwpLeosSSHMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 3, 1))
wwpLeosSSHMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 3, 2))
wwpLeosSSHServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerAdminState.setDescription('The object indicates the admin global state of SSH server.')
wwpLeosSSHServerOperState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSSHServerOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerOperState.setDescription('The object indicates the operational state of SSH server.')
wwpLeosSSHServerAuthenticationRetries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerAuthenticationRetries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerAuthenticationRetries.setDescription('The object indicates the number of retries SSH server should allow before rejecting the client request.')
wwpLeosSSHServerMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSSHServerMaxClients.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerMaxClients.setDescription('The object indicates the maximum number of clients session SSH server accepts at any given time. At any given time current number of limited + super users will never exceed the value indicated by wwpLeosSSHServerMaxClients.')
wwpLeosSSHServerKeyGenerateSet = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerKeyGenerateSet.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerKeyGenerateSet.setDescription('Setting this object will trigger the device to generate key. If user optionally wants the public key to be TFTP to some address then wwpLeosSSHServerTftpServer must be set to valid TFTP server.')
wwpLeosSSHServerKey = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSSHServerKey.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerKey.setDescription('This MIB object specifies the key that exist on the device.')
wwpLeosSSHServerKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("keyReady", 1), ("keyGenerating", 2), ("keyDoesnotExist", 3), ("keyGenerationFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSSHServerKeyStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerKeyStatus.setDescription('This mib object returns the key status on the device.')
wwpLeosSSHServerTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerTftpServer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerTftpServer.setDescription('The object indicates the TFTP server where public key would optionally be transmitted to. Once this object is set device will always use this IP address whenever wwpLeosSSHServerKeyGenerateSet is set to true. User must set this to 0 if user doesnot want the device to TFTP the public key. If key generation and TFTP server is not configured through SNMP then this object will always show 0.0.0.0.')
wwpLeosSSHServerMaxLimitedUsers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerMaxLimitedUsers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerMaxLimitedUsers.setDescription('The object indicates the maximum number of limited users SSH server accepts at any given time.')
wwpLeosSSHServerMaxSuperUsers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerMaxSuperUsers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerMaxSuperUsers.setDescription('The object indicates the maximum number of super users SSH server accepts at any given time.')
wwpLeosSSHServerMaxAdminUsers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerMaxAdminUsers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerMaxAdminUsers.setDescription('The object indicates the maximum number of admin users SSH server accepts at any given time.')
wwpLeosSSHServerClientTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosSSHServerClientTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientTable.setDescription('The (conceptual) table listing the SSH server clients configured. To create entry in this table Use SNMP multiple variable binding option. wwpLeosSSHServerClientIpAddr must be set to some valid IP. wwpLeosSSHServerClientStatus must be set to createAndGo. To delete entry in this table wwpLeosSSHServerClientStatus must be set to destroy.')
wwpLeosSSHServerClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-SSH-MIB", "wwpLeosSSHServerClientIndex"))
if mibBuilder.loadTexts: wwpLeosSSHServerClientEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientEntry.setDescription('An entry (conceptual row) in the wwpLeosSSHServerClientTable.')
wwpLeosSSHServerClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: wwpLeosSSHServerClientIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientIndex.setDescription('The object indicates the unique index in the table.')
wwpLeosSSHServerClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosSSHServerClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientIpAddr.setDescription('The object indicates the IP address of the client that is allowed to connect using SSH. This object cannot be modified once entry is created with some IP. Returns 0.0.0.0 when not representing IPv4 address.')
wwpLeosSSHServerClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosSSHServerClientStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete the entry set this to 'destroy'.")
wwpLeosSSHServerClientInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosSSHServerClientInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientInetAddrType.setDescription('The object indicates the IP address of the client that is allowed to connect using SSH. This object cannot be modified once entry is created with some IP. Used in conjunction with wwpLeosSSHServerClientInetAddr. When value is : ipv4 : wwpLeosSSHServerClientInetAddr should be compliant with InetAddressIPv4 ipv6 : wwpLeosSSHServerClientInetAddr should be compliant with InetAddressIPv6.')
wwpLeosSSHServerClientInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosSSHServerClientInetAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientInetAddr.setDescription('The object indicates the IP address of the client that is allowed to connect using SSH. This object cannot be modified once entry is created with some IP. This OID should be used in conunction with wwpLeosSSHServerClientInetAddrType.')
wwpLeosSSHServerListenerPortId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 1, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(22, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSSHServerListenerPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerListenerPortId.setDescription('The object indicates the port number on which SSH server is allowed to listen for clients.')
wwpLeosSSHServerClientCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 3, 1, 1)).setObjects(("WWP-LEOS-SSH-MIB", "wwpLeosSSHServerClientIPv6Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosSSHServerClientCompliance = wwpLeosSSHServerClientCompliance.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientCompliance.setDescription('The compliance statement of WWP-LEOS-SSH-MIB MIB.')
wwpLeosSSHServerClientIPv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 34, 3, 2, 1)).setObjects(("WWP-LEOS-SSH-MIB", "wwpLeosSSHServerClientInetAddrType"), ("WWP-LEOS-SSH-MIB", "wwpLeosSSHServerClientInetAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosSSHServerClientIPv6Group = wwpLeosSSHServerClientIPv6Group.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSSHServerClientIPv6Group.setDescription('SSH server client objects for IPv6 address.')
mibBuilder.exportSymbols("WWP-LEOS-SSH-MIB", wwpLeosSSHServerClientIndex=wwpLeosSSHServerClientIndex, wwpLeosSSHMIB=wwpLeosSSHMIB, wwpLeosSSHServerMaxLimitedUsers=wwpLeosSSHServerMaxLimitedUsers, wwpLeosSSHServerClientIpAddr=wwpLeosSSHServerClientIpAddr, wwpLeosSSHServerClient=wwpLeosSSHServerClient, wwpLeosSSHServerKey=wwpLeosSSHServerKey, wwpLeosSSHServerClientStatus=wwpLeosSSHServerClientStatus, wwpLeosSSHMIBNotifications=wwpLeosSSHMIBNotifications, wwpLeosSSHServerListenerPortId=wwpLeosSSHServerListenerPortId, wwpLeosSSHServerClientTable=wwpLeosSSHServerClientTable, wwpLeosSSHMIBGroups=wwpLeosSSHMIBGroups, wwpLeosSSHMIBNotificationPrefix=wwpLeosSSHMIBNotificationPrefix, wwpLeosSSHServerKeyGenerateSet=wwpLeosSSHServerKeyGenerateSet, wwpLeosSSHMIBObjects=wwpLeosSSHMIBObjects, wwpLeosSSHMIBConformance=wwpLeosSSHMIBConformance, wwpLeosSSHServerKeyStatus=wwpLeosSSHServerKeyStatus, wwpLeosSSHServerClientEntry=wwpLeosSSHServerClientEntry, wwpLeosSSHServerGlobal=wwpLeosSSHServerGlobal, wwpLeosSSHServerListenerPort=wwpLeosSSHServerListenerPort, wwpLeosSSHServerAdminState=wwpLeosSSHServerAdminState, wwpLeosSSHServerAuthenticationRetries=wwpLeosSSHServerAuthenticationRetries, wwpLeosSSHServerTftpServer=wwpLeosSSHServerTftpServer, wwpLeosSSHServerMaxAdminUsers=wwpLeosSSHServerMaxAdminUsers, PYSNMP_MODULE_ID=wwpLeosSSHMIB, wwpLeosSSHMIBCompliances=wwpLeosSSHMIBCompliances, wwpLeosSSHServerOperState=wwpLeosSSHServerOperState, wwpLeosSSHServerMaxSuperUsers=wwpLeosSSHServerMaxSuperUsers, wwpLeosSSHServerClientInetAddr=wwpLeosSSHServerClientInetAddr, wwpLeosSSHServerClientIPv6Group=wwpLeosSSHServerClientIPv6Group, wwpLeosSSHServerClientInetAddrType=wwpLeosSSHServerClientInetAddrType, wwpLeosSSHServerClientCompliance=wwpLeosSSHServerClientCompliance, wwpLeosSSHServerMaxClients=wwpLeosSSHServerMaxClients)
