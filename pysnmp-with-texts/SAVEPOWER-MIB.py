#
# PySNMP MIB module SAVEPOWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAVEPOWER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Integer32, MibIdentifier, IpAddress, iso, Counter64, NotificationType, Gauge32, ModuleIdentity, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Integer32", "MibIdentifier", "IpAddress", "iso", "Counter64", "NotificationType", "Gauge32", "ModuleIdentity", "Counter32", "ObjectIdentity")
TextualConvention, DateAndTime, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue")
hpicfSavepowerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56))
hpicfSavepowerMIB.setRevisions(('2010-08-12 00:00', '2008-10-17 14:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfSavepowerMIB.setRevisionsDescriptions(('Added a new PHY Table Indexed by entPhysical Index.', 'Initial revision 01.',))
if mibBuilder.loadTexts: hpicfSavepowerMIB.setLastUpdated('201008120000Z')
if mibBuilder.loadTexts: hpicfSavepowerMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfSavepowerMIB.setContactInfo('Postal: Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfSavepowerMIB.setDescription('The MIB module is for saving power in blocks that control the physical ports.')
hpicfSavepowerScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1))
hpicfSavepowerLEDScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1, 3))
class SavepowerBlockIndex(TextualConvention, Unsigned32):
    description = 'A unique value that serves as an index to identify the Power block ID that controls power distribution to a group of ports associated with the block-id.'
    status = 'current'
    displayHint = 'd'

class SavepowerControl(TextualConvention, Integer32):
    description = 'An enumerated value which provides an indication of the state of the power block. If power to the block is ON the state would be powerOn and if power to the block is OFF the state would be powerOff.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("powerOn", 1), ("powerOff", 2))

hpicfSavepowerMaxBlocks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerMaxBlocks.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerMaxBlocks.setDescription('The maximum number of Power blocks in the switch which are associated to a group of ports to power on/off. The number of power blocks and ports associated with a block are platform dependent.')
hpicfSavepowerEnabledPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerEnabledPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEnabledPorts.setDescription('This indicates the total number of ports in the switch that are powered off.')
hpicfSavePowerLEDOffAlarmStartTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1, 3, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavePowerLEDOffAlarmStartTime.setStatus('current')
if mibBuilder.loadTexts: hpicfSavePowerLEDOffAlarmStartTime.setDescription('This is the scheduled time at which the all the switch LEDs would be turned off.')
hpicfSavePowerLEDOffAlarmDuration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavePowerLEDOffAlarmDuration.setStatus('current')
if mibBuilder.loadTexts: hpicfSavePowerLEDOffAlarmDuration.setDescription('This is the duration of the alarm time during which the switch would be in LED power save mode, and the switch LEDs would be turned off.')
hpicfSavePowerLEDOffAlarmRecur = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavePowerLEDOffAlarmRecur.setStatus('current')
if mibBuilder.loadTexts: hpicfSavePowerLEDOffAlarmRecur.setDescription('The truth value used to indicate if the timer for LED off will be recurring.')
hpicfEntitySavepower = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2))
hpicfSavepowerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 1), )
if mibBuilder.loadTexts: hpicfSavepowerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerTable.setDescription('This table contains one row for every power block that controls a group of physical ports.')
hpicfSavepowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 1, 1), ).setIndexNames((0, "SAVEPOWER-MIB", "hpicfSavepowerBlockID"))
if mibBuilder.loadTexts: hpicfSavepowerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntry.setDescription('Information about Savepower table.')
hpicfSavepowerBlockID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 1, 1, 1), SavepowerBlockIndex())
if mibBuilder.loadTexts: hpicfSavepowerBlockID.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerBlockID.setDescription('The index that is used to access the power block entry table.')
hpicfSavepowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 1, 1, 2), SavepowerControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavepowerControl.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerControl.setDescription('This indicates if the power to the block is powerOn (1) or powerOff (2).')
hpicfSavepowerBlockPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerBlockPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerBlockPorts.setDescription('This indicates the port-range associated to the hpisfSavepowerBlockID.')
hpicfSavepowerGreenFeaturesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 2), )
if mibBuilder.loadTexts: hpicfSavepowerGreenFeaturesTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerGreenFeaturesTable.setDescription('This table contains a row for different entities and shows the admin status and operational status of the power and LED for that entity.')
hpicfSavepowerGreenFeaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfSavepowerGreenFeaturesEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerGreenFeaturesEntry.setDescription('Information about SavepowerGreenFeatures table.')
hpicfSavepowerEntityPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavepowerEntityPowerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntityPowerAdminStatus.setDescription('The truth value indicates the configured status of the entity power.')
hpicfSavepowerEntityPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 2, 1, 2), SavepowerControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerEntityPowerOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntityPowerOperStatus.setDescription('This indicates the operational status of the entity as powerOn(1) if turned on or powerOff(2) if turned off.')
hpicfSavepowerEntityLEDAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavepowerEntityLEDAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntityLEDAdminStatus.setDescription(" The truth value indicates the configured status of the entity's LED power status.")
hpicfSavepowerEntityLEDOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 2, 1, 4), SavepowerControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerEntityLEDOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntityLEDOperStatus.setDescription(" This indicates if the operational status of the entity's LED power is powerOn (1) or powerOff (2).")
hpicfSavepowerPHYTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 3), )
if mibBuilder.loadTexts: hpicfSavepowerPHYTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerPHYTable.setDescription(' This table contains a row for every port for which the PHY will be put to auto low power mode or normal power mode and contains the admin status and operational status of the PHY .')
hpicfSavepowerPHYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 3, 1), ).setIndexNames((0, "SAVEPOWER-MIB", "hpicfSavepowerSlotNum"), (0, "SAVEPOWER-MIB", "hpicfSavepowerPortNum"))
if mibBuilder.loadTexts: hpicfSavepowerPHYEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerPHYEntry.setDescription('Information about PHY power status for ports.')
hpicfSavepowerSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfSavepowerSlotNum.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerSlotNum.setDescription('This value serves as an index to identify the slot no. for the PHY.')
hpicfSavepowerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpicfSavepowerPortNum.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerPortNum.setDescription('This value serves as an index to identify the port no. for the PHY.')
hpicfSavepowerPHYAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavepowerPHYAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerPHYAdminStatus.setDescription('The truth value indicates the configured status of the auto low power mode for the PHY.')
hpicfSavepowerPHYOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 3, 1, 4), SavepowerControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerPHYOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerPHYOperStatus.setDescription('This indicates if the operational status of the PHY power is auto low power mode i.e. powerOff(2) or normal power mode i.e. or powerOn(1).')
hpicfSavepowerEntPHYTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 4), )
if mibBuilder.loadTexts: hpicfSavepowerEntPHYTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntPHYTable.setDescription('This table contains a row for every member in a stack setup or for a standalone device or for every slot in a chassis, for which the PHY will be put to auto low power mode or normal power mode and contains the admin status and operational status of the PHY .')
hpicfSavepowerEntPHYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfSavepowerEntPHYEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntPHYEntry.setDescription('Information about PHY power status.')
hpicfSavepowerEntPHYAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSavepowerEntPHYAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntPHYAdminStatus.setDescription('The truth value indicates the configured status of the auto low power mode for the PHY. True indicates PHY is in low power mode.')
hpicfSavepowerEntPHYOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 2, 4, 1, 2), SavepowerControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSavepowerEntPHYOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntPHYOperStatus.setDescription('This indicates if the operational status of the PHY power is auto low power mode i.e. powerOff(2) or normal power mode i.e. powerOn(1).')
hpicfSavepowerConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3))
hpicfSavepowerCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 1))
hpicfSavepowerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 2))
hpicfSavepowerComplianceInfo = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 1, 1)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerScalarsGroup"), ("SAVEPOWER-MIB", "hpicfSavepowerLEDScalarsGroup"), ("SAVEPOWER-MIB", "hpicfSavepowerGreenFeaturesGroup"), ("SAVEPOWER-MIB", "hpicfSavepowerPHYGroup"), ("SAVEPOWER-MIB", "hpicfSavepowerGroup"), ("SAVEPOWER-MIB", "hpicfSavepowerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerComplianceInfo = hpicfSavepowerComplianceInfo.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerComplianceInfo.setDescription('The compliance statement for entries which implement the SAVEPOWER MIB.')
hpicfSavepowerScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 2, 1)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerMaxBlocks"), ("SAVEPOWER-MIB", "hpicfSavepowerEnabledPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerScalarsGroup = hpicfSavepowerScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerScalarsGroup.setDescription('Basic Scalars required in SAVEPOWER MIB implementation.')
hpicfSavepowerLEDScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 2, 2)).setObjects(("SAVEPOWER-MIB", "hpicfSavePowerLEDOffAlarmStartTime"), ("SAVEPOWER-MIB", "hpicfSavePowerLEDOffAlarmDuration"), ("SAVEPOWER-MIB", "hpicfSavePowerLEDOffAlarmRecur"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerLEDScalarsGroup = hpicfSavepowerLEDScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerLEDScalarsGroup.setDescription('Scalars required for LED turn off feature.')
hpicfSavepowerGreenFeaturesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 2, 3)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerEntityPowerAdminStatus"), ("SAVEPOWER-MIB", "hpicfSavepowerEntityPowerOperStatus"), ("SAVEPOWER-MIB", "hpicfSavepowerEntityLEDAdminStatus"), ("SAVEPOWER-MIB", "hpicfSavepowerEntityLEDOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerGreenFeaturesGroup = hpicfSavepowerGreenFeaturesGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerGreenFeaturesGroup.setDescription('SAVEPOWER Green Features parameters')
hpicfSavepowerPHYGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 2, 4)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerPHYAdminStatus"), ("SAVEPOWER-MIB", "hpicfSavepowerPHYOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerPHYGroup = hpicfSavepowerPHYGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerPHYGroup.setDescription('SAVEPOWER MIB parameters ')
hpicfSavepowerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 3, 2, 5)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerControl"), ("SAVEPOWER-MIB", "hpicfSavepowerBlockPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerGroup = hpicfSavepowerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerGroup.setDescription('SAVEPOWER MIB parameters ')
hpicfPHYConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 4))
hpicfPHYCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 4, 1))
hpicfPHYGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 4, 2))
hpicfPHYComplianceInfo = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 4, 1, 1)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerEntPHYGroup"), ("SAVEPOWER-MIB", "hpicfPHYGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPHYComplianceInfo = hpicfPHYComplianceInfo.setStatus('current')
if mibBuilder.loadTexts: hpicfPHYComplianceInfo.setDescription('The compliance statement for entries which implement the PORT LOW POWER.')
hpicfSavepowerEntPHYGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 56, 4, 2, 1)).setObjects(("SAVEPOWER-MIB", "hpicfSavepowerEntPHYAdminStatus"), ("SAVEPOWER-MIB", "hpicfSavepowerEntPHYOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSavepowerEntPHYGroup = hpicfSavepowerEntPHYGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSavepowerEntPHYGroup.setDescription('PORT-LOW-POWER MIB parameters ')
mibBuilder.exportSymbols("SAVEPOWER-MIB", hpicfSavepowerGroup=hpicfSavepowerGroup, hpicfSavePowerLEDOffAlarmRecur=hpicfSavePowerLEDOffAlarmRecur, hpicfSavepowerGroups=hpicfSavepowerGroups, hpicfSavepowerGreenFeaturesGroup=hpicfSavepowerGreenFeaturesGroup, hpicfSavepowerLEDScalarsGroup=hpicfSavepowerLEDScalarsGroup, hpicfSavePowerLEDOffAlarmDuration=hpicfSavePowerLEDOffAlarmDuration, hpicfSavepowerTable=hpicfSavepowerTable, hpicfEntitySavepower=hpicfEntitySavepower, hpicfSavepowerPortNum=hpicfSavepowerPortNum, hpicfSavepowerPHYEntry=hpicfSavepowerPHYEntry, hpicfSavepowerMaxBlocks=hpicfSavepowerMaxBlocks, hpicfSavepowerEntPHYOperStatus=hpicfSavepowerEntPHYOperStatus, hpicfSavepowerScalarsGroup=hpicfSavepowerScalarsGroup, SavepowerControl=SavepowerControl, SavepowerBlockIndex=SavepowerBlockIndex, hpicfSavepowerEntityPowerOperStatus=hpicfSavepowerEntityPowerOperStatus, hpicfSavepowerComplianceInfo=hpicfSavepowerComplianceInfo, hpicfPHYGroups=hpicfPHYGroups, hpicfSavePowerLEDOffAlarmStartTime=hpicfSavePowerLEDOffAlarmStartTime, hpicfSavepowerPHYTable=hpicfSavepowerPHYTable, hpicfSavepowerEntPHYAdminStatus=hpicfSavepowerEntPHYAdminStatus, hpicfSavepowerControl=hpicfSavepowerControl, hpicfSavepowerBlockID=hpicfSavepowerBlockID, hpicfSavepowerCompliance=hpicfSavepowerCompliance, hpicfSavepowerEnabledPorts=hpicfSavepowerEnabledPorts, hpicfSavepowerMIB=hpicfSavepowerMIB, hpicfSavepowerEntPHYEntry=hpicfSavepowerEntPHYEntry, hpicfSavepowerEntPHYGroup=hpicfSavepowerEntPHYGroup, hpicfSavepowerBlockPorts=hpicfSavepowerBlockPorts, hpicfSavepowerEntityLEDAdminStatus=hpicfSavepowerEntityLEDAdminStatus, hpicfSavepowerPHYGroup=hpicfSavepowerPHYGroup, hpicfSavepowerGreenFeaturesTable=hpicfSavepowerGreenFeaturesTable, hpicfSavepowerEntry=hpicfSavepowerEntry, hpicfSavepowerEntityPowerAdminStatus=hpicfSavepowerEntityPowerAdminStatus, hpicfPHYCompliance=hpicfPHYCompliance, hpicfSavepowerScalars=hpicfSavepowerScalars, hpicfSavepowerGreenFeaturesEntry=hpicfSavepowerGreenFeaturesEntry, hpicfPHYConformance=hpicfPHYConformance, hpicfSavepowerLEDScalars=hpicfSavepowerLEDScalars, hpicfSavepowerEntPHYTable=hpicfSavepowerEntPHYTable, hpicfSavepowerPHYAdminStatus=hpicfSavepowerPHYAdminStatus, PYSNMP_MODULE_ID=hpicfSavepowerMIB, hpicfSavepowerEntityLEDOperStatus=hpicfSavepowerEntityLEDOperStatus, hpicfSavepowerPHYOperStatus=hpicfSavepowerPHYOperStatus, hpicfSavepowerConformance=hpicfSavepowerConformance, hpicfSavepowerSlotNum=hpicfSavepowerSlotNum, hpicfPHYComplianceInfo=hpicfPHYComplianceInfo)
