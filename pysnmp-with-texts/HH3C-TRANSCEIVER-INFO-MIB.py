#
# PySNMP MIB module HH3C-TRANSCEIVER-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-TRANSCEIVER-INFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, iso, Unsigned32, NotificationType, Gauge32, MibIdentifier, Bits, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "iso", "Unsigned32", "NotificationType", "Gauge32", "MibIdentifier", "Bits", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Counter64")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hh3cTransceiver = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 70))
hh3cTransceiver.setRevisions(('2014-08-11 10:50', '2013-06-06 00:00', '2012-06-06 00:00', '2009-12-29 00:00', '2006-06-08 00:00', '2006-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cTransceiver.setRevisionsDescriptions(('Add hh3cTransceiverVendorOUI and hh3cTransceiverRevisionNumber.', 'Add hh3cTransceiverChannelTable to transceiver channel statistics.', 'Add the objects of hh3cTransceiverTempHiAlarm, hh3cTransceiverTempLoAlarm, hh3cTransceiverTempHiWarn, hh3cTransceiverTempLoWarn, hh3cTransceiverVccHiAlarm, hh3cTransceiverVccLoAlarm, hh3cTransceiverVccHiWarn, hh3cTransceiverVccLoWarn, hh3cTransceiverBiasHiAlarm, hh3cTransceiverBiasLoAlarm, hh3cTransceiverBiasHiWarn, hh3cTransceiverBiasLoWarn, hh3cTransceiverPwrOutHiAlarm, hh3cTransceiverPwrOutLoAlarm, hh3cTransceiverPwrOutHiWarn, hh3cTransceiverPwrOutLoWarn, hh3cTransceiverRcvPwrHiAlarm, hh3cTransceiverRcvPwrLoAlarm, hh3cTransceiverRcvPwrHiWarn, hh3cTransceiverRcvPwrLoWarn, hh3cTransceiverErrors.', 'Add the objects of hh3cTransceiverDiagnostic, hh3cTransceiverCurTXPower, hh3cTransceiverMaxTXPower, hh3cTransceiverMinTXPower, hh3cTransceiverCurRXPower, hh3cTransceiverMaxRXPower, hh3cTransceiverMinRXPower, hh3cTransceiverTemperature, hh3cTransceiverVoltage, hh3cTransceiverBiasCurrent.', 'Change description of hh3cTransceiverWaveLength.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hh3cTransceiver.setLastUpdated('201408111050Z')
if mibBuilder.loadTexts: hh3cTransceiver.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cTransceiver.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cTransceiver.setDescription('The objects in this MIB module are used to display the information of transceiver on interface.')
hh3cTransceiverInfoAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1))
hh3cTransceiverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1), )
if mibBuilder.loadTexts: hh3cTransceiverInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverInfoTable.setDescription('This table shows transceiver information on an interface.')
hh3cTransceiverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cTransceiverInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverInfoEntry.setDescription('The entry of the hh3cTransceiverInfoTable.')
hh3cTransceiverHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverHardwareType.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverHardwareType.setDescription('Hardware type of the interface, such as SM(single mode).')
hh3cTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverType.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverType.setDescription('Type of the interface, such as SFP/XFP/GBIC.')
hh3cTransceiverWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverWaveLength.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverWaveLength.setDescription('Wave length of the interface, measured in nanometer.')
hh3cTransceiverVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVendorName.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVendorName.setDescription('Vendor name of the interface.')
hh3cTransceiverSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverSerialNumber.setDescription('Serial number of the interface.')
hh3cTransceiverFiberDiameterType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 65535))).clone(namedValues=NamedValues(("fiber9", 1), ("fiber50", 2), ("fiber625", 3), ("copper", 4), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverFiberDiameterType.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverFiberDiameterType.setDescription('The diameter of the fiber, measured in micron. fiber9 - 9 micron multi-mode fiber fiber50 - 50 micron multi-mode fiber fiber625 - 62.5 micron multi-mode fiber copper - copper cable.')
hh3cTransceiverTransferDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverTransferDistance.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverTransferDistance.setDescription('The maximum distance which the interface can transmit, measured in meter.')
hh3cTransceiverDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverDiagnostic.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverDiagnostic.setDescription('Indicating the digital diagnostic monitoring function.')
hh3cTransceiverCurTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverCurTXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverCurTXPower.setDescription('Indicating the current transmitted power. The unit is in hundredths of dBM.')
hh3cTransceiverMaxTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverMaxTXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverMaxTXPower.setDescription('Indicating the maximum transmitted power. The unit is in hundredths of dBM.')
hh3cTransceiverMinTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverMinTXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverMinTXPower.setDescription('Indicating the minimum transmitted power. The unit is in hundredths of dBM.')
hh3cTransceiverCurRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverCurRXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverCurRXPower.setDescription('Indicating the current received power. The unit is in hundredths of dBM.')
hh3cTransceiverMaxRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverMaxRXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverMaxRXPower.setDescription('Indicating the maximum received power. The unit is in hundredths of dBM.')
hh3cTransceiverMinRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverMinRXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverMinRXPower.setDescription('Indicating the minimum received power. The unit is in hundredths of dBM.')
hh3cTransceiverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverTemperature.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverTemperature.setDescription('Indicating the current temperature. The unit is Celsius centigrade.')
hh3cTransceiverVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVoltage.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVoltage.setDescription('Indicating the current voltage. The unit is in hundredths of V')
hh3cTransceiverBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverBiasCurrent.setDescription('Indicating the current bias electric current. The unit is in hundredths of mA')
hh3cTransceiverTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverTempHiAlarm.setDescription('Transceiver temperature high alarm threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hh3cTransceiverTempLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverTempLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverTempLoAlarm.setDescription('Transceiver temperature low alarm threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hh3cTransceiverTempHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverTempHiWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverTempHiWarn.setDescription('Transceiver temperature high warning threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hh3cTransceiverTempLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverTempLoWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverTempLoWarn.setDescription('Transceiver temperature low warning threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hh3cTransceiverVccHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVccHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVccHiAlarm.setDescription('Transceiver VCC high alarm threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hh3cTransceiverVccLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVccLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVccLoAlarm.setDescription('Transceiver VCC low alarm threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hh3cTransceiverVccHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVccHiWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVccHiWarn.setDescription('Transceiver VCC high warning threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hh3cTransceiverVccLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVccLoWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVccLoWarn.setDescription('Transceiver VCC low warning threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hh3cTransceiverBiasHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverBiasHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverBiasHiAlarm.setDescription('Transceiver bias high alarm threshold limit in microamps.')
hh3cTransceiverBiasLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverBiasLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverBiasLoAlarm.setDescription('Transceiver bias low alarm threshold limit in microamps.')
hh3cTransceiverBiasHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverBiasHiWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverBiasHiWarn.setDescription('Transceiver bias high warning threshold limit in microamps.')
hh3cTransceiverBiasLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverBiasLoWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverBiasLoWarn.setDescription('Transceiver bias low warning threshold limit in microamps.')
hh3cTransceiverPwrOutHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverPwrOutHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverPwrOutHiAlarm.setDescription('Transceiver transmit power high alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverPwrOutLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverPwrOutLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverPwrOutLoAlarm.setDescription('Transceiver transmit power low alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverPwrOutHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverPwrOutHiWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverPwrOutHiWarn.setDescription('Transceiver transmit power high warning threshold limit in tenths of microwatts As an example: 10000 is 1 milliwatt.')
hh3cTransceiverPwrOutLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverPwrOutLoWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverPwrOutLoWarn.setDescription('Transceiver transmit power low warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverRcvPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrHiAlarm.setDescription('Transceiver receive power high alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverRcvPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrLoAlarm.setDescription('Transceiver receive power low alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverRcvPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrHiWarn.setDescription('Transceiver receive power high warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverRcvPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverRcvPwrLoWarn.setDescription('Transceiver receive power low warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hh3cTransceiverErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 38), Bits().clone(namedValues=NamedValues(("xcvrIOError", 0), ("xcvrChecksum", 1), ("xcvrTypeAndPortConfigMismatch", 2), ("xcvrTypeNotSupported", 3), ("wisLocalFault", 4), ("rcvOpticalPowerFault", 5), ("pmapmdReceiverLocalFault", 6), ("pcsReceiveLocalFault", 7), ("phyXSReceiveLocalFault", 8), ("laserBiasCurrentFault", 9), ("laserTemperatureFault", 10), ("laserOutputPowerFault", 11), ("txFault", 12), ("pmapmdTransmitterLocalFault", 13), ("pcsTransmitLocalFault", 14), ("phyXSTransmitLocalFault", 15), ("rxLossOfSignal", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverErrors.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverErrors.setDescription('Bitmask indicating transceiver errors. Transceiver information I/O error(0) Transceiver information checksum error(1) Transceiver type and port configuration mismatch(2) Transceiver type not supported by port hardware(3) WIS local fault(4) Receive optical power fault(5) PMA/PMD receiver local fault(6) PCS receive local fault(7) PHY XS receive local fault(8) Laser bias current fault(9) Laser temperature fault(10) Laser output power fault(11) TX fault(12) PMA/PMD transmitter local fault(13) PCS transmit local fault(14) PHY XS Transmit Local Fault(15) RX loss of signal(16) Unused(17-31)')
hh3cTransceiverVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverVendorOUI.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverVendorOUI.setDescription('Vendor OUI of the interface.')
hh3cTransceiverRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverRevisionNumber.setDescription('Revision number of the interface.')
hh3cTransceiverChannelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2), )
if mibBuilder.loadTexts: hh3cTransceiverChannelTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelTable.setDescription('This table provides statistics about transceiver with multi-channel.')
hh3cTransceiverChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-TRANSCEIVER-INFO-MIB", "hh3cTransceiverChannelIndex"))
if mibBuilder.loadTexts: hh3cTransceiverChannelEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelEntry.setDescription('The entry of the hh3cTransceiverChannelTable.')
hh3cTransceiverChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cTransceiverChannelIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelIndex.setDescription('The channel index of transceiver. Indicating one channel of the interface.')
hh3cTransceiverChannelCurTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverChannelCurTXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelCurTXPower.setDescription('Indicating the current transmission power. The unit is in hundredths of dBM.')
hh3cTransceiverChannelCurRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverChannelCurRXPower.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelCurRXPower.setDescription('Indicating the current received power. The unit is in hundredths of dBM.')
hh3cTransceiverChannelTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverChannelTemperature.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelTemperature.setDescription('Indicating the current temperature. The unit is Celsius centigrade.')
hh3cTransceiverChannelBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 70, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTransceiverChannelBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hh3cTransceiverChannelBiasCurrent.setDescription('Indicating the current bias electric current. The unit is in hundredths of mA.')
mibBuilder.exportSymbols("HH3C-TRANSCEIVER-INFO-MIB", hh3cTransceiverRcvPwrHiWarn=hh3cTransceiverRcvPwrHiWarn, hh3cTransceiverBiasCurrent=hh3cTransceiverBiasCurrent, hh3cTransceiverMaxRXPower=hh3cTransceiverMaxRXPower, hh3cTransceiverHardwareType=hh3cTransceiverHardwareType, hh3cTransceiver=hh3cTransceiver, hh3cTransceiverRcvPwrHiAlarm=hh3cTransceiverRcvPwrHiAlarm, hh3cTransceiverCurRXPower=hh3cTransceiverCurRXPower, hh3cTransceiverTempHiWarn=hh3cTransceiverTempHiWarn, hh3cTransceiverVccLoWarn=hh3cTransceiverVccLoWarn, hh3cTransceiverPwrOutHiWarn=hh3cTransceiverPwrOutHiWarn, hh3cTransceiverChannelCurTXPower=hh3cTransceiverChannelCurTXPower, hh3cTransceiverTransferDistance=hh3cTransceiverTransferDistance, hh3cTransceiverVccHiWarn=hh3cTransceiverVccHiWarn, hh3cTransceiverType=hh3cTransceiverType, hh3cTransceiverInfoTable=hh3cTransceiverInfoTable, hh3cTransceiverTemperature=hh3cTransceiverTemperature, hh3cTransceiverVendorOUI=hh3cTransceiverVendorOUI, hh3cTransceiverBiasLoAlarm=hh3cTransceiverBiasLoAlarm, hh3cTransceiverVccHiAlarm=hh3cTransceiverVccHiAlarm, hh3cTransceiverRcvPwrLoWarn=hh3cTransceiverRcvPwrLoWarn, hh3cTransceiverVendorName=hh3cTransceiverVendorName, hh3cTransceiverMinTXPower=hh3cTransceiverMinTXPower, hh3cTransceiverTempHiAlarm=hh3cTransceiverTempHiAlarm, hh3cTransceiverDiagnostic=hh3cTransceiverDiagnostic, hh3cTransceiverPwrOutLoAlarm=hh3cTransceiverPwrOutLoAlarm, hh3cTransceiverVoltage=hh3cTransceiverVoltage, hh3cTransceiverChannelIndex=hh3cTransceiverChannelIndex, hh3cTransceiverMinRXPower=hh3cTransceiverMinRXPower, hh3cTransceiverRevisionNumber=hh3cTransceiverRevisionNumber, hh3cTransceiverPwrOutLoWarn=hh3cTransceiverPwrOutLoWarn, hh3cTransceiverInfoAdm=hh3cTransceiverInfoAdm, hh3cTransceiverInfoEntry=hh3cTransceiverInfoEntry, hh3cTransceiverVccLoAlarm=hh3cTransceiverVccLoAlarm, hh3cTransceiverErrors=hh3cTransceiverErrors, hh3cTransceiverBiasHiAlarm=hh3cTransceiverBiasHiAlarm, hh3cTransceiverSerialNumber=hh3cTransceiverSerialNumber, hh3cTransceiverChannelEntry=hh3cTransceiverChannelEntry, hh3cTransceiverChannelBiasCurrent=hh3cTransceiverChannelBiasCurrent, hh3cTransceiverBiasLoWarn=hh3cTransceiverBiasLoWarn, PYSNMP_MODULE_ID=hh3cTransceiver, hh3cTransceiverRcvPwrLoAlarm=hh3cTransceiverRcvPwrLoAlarm, hh3cTransceiverTempLoAlarm=hh3cTransceiverTempLoAlarm, hh3cTransceiverBiasHiWarn=hh3cTransceiverBiasHiWarn, hh3cTransceiverPwrOutHiAlarm=hh3cTransceiverPwrOutHiAlarm, hh3cTransceiverChannelTemperature=hh3cTransceiverChannelTemperature, hh3cTransceiverChannelCurRXPower=hh3cTransceiverChannelCurRXPower, hh3cTransceiverWaveLength=hh3cTransceiverWaveLength, hh3cTransceiverFiberDiameterType=hh3cTransceiverFiberDiameterType, hh3cTransceiverMaxTXPower=hh3cTransceiverMaxTXPower, hh3cTransceiverChannelTable=hh3cTransceiverChannelTable, hh3cTransceiverTempLoWarn=hh3cTransceiverTempLoWarn, hh3cTransceiverCurTXPower=hh3cTransceiverCurTXPower)
