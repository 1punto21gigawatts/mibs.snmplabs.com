#
# PySNMP MIB module CISCO-CABLE-DSG-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CABLE-DSG-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, Counter64, Unsigned32, Counter32, iso, Integer32, TimeTicks, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter64", "Unsigned32", "Counter32", "iso", "Integer32", "TimeTicks", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "MibIdentifier")
DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
ciscoCableDsgIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 999))
ciscoCableDsgIfMIB.setRevisions(('2004-03-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCableDsgIfMIB.setRevisionsDescriptions(('Initial revision, extracted from DOCSIS Set-top Gateway Specification.',))
if mibBuilder.loadTexts: ciscoCableDsgIfMIB.setLastUpdated('200403290000Z')
if mibBuilder.loadTexts: ciscoCableDsgIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCableDsgIfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Dr San Jose, CA 95134 U.S.A. Phone: +1 800 553-NETS E-mail: cs-ubr@cisco.com')
if mibBuilder.loadTexts: ciscoCableDsgIfMIB.setDescription('This is the MIB Module for the DOCSIS Set-top Gateway (DSG). The DSG provides a one-way IP datagram transport for Out-Of-Band (OOB) messaging to cable set-top terminals. The one-way IP datagram transport is called a DSG Tunnel. A DSG Tunnel is a multicast IP datagram stream originating at the DOCSIS Set-top Gateway and carrying Out-Of-Band messages intended for set-top terminals. It is carried over one or more downstream DOCSIS channels and is identified by a well know Ethernet unicast MAC address. The well-known Ethernet unicast MAC address is reserved and published by the Conditional Access/Point Of Deployment (CA/POD) provider. A CA/POD provider is limited to eight DSG Tunnels to transport their OOB Messaging. Multiple DSG Tunnels may exist on a single downstream DOCSIS channel. This MIB is implemented as 3 groups, the CA Vendor Table, the DSG Tunnel Table and the Downstream Table. 1) The DSG CA Vendor Table associates a CA Vendor Name with a CA Vendor Index and the current count of tunnels carrying this CA OOB 2) The DSG Tunnel Table associates an input IP Address and an output MAC Address with a CA Vendor Index. 3) The DSG Downstream Table associates a tunnel Index with a DOCSIS downstream channel interface index (ifIndex). These tables are all dynamic in nature. Individual rows can be created or deleted as necessary. In general, the DSG is configured once per CA system.')
ccdsgIfCaVendor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 1))
ccdsgIfTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 2))
ccdsgIfDownstream = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 3))
ccdsgIfCaVendorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 1), )
if mibBuilder.loadTexts: ccdsgIfCaVendorTable.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorTable.setDescription("The DSG CA Vendor Table associates a CA Vendor Index with the CA Vendor Name and the number of tunnels that carry the CA Vendor's OOB Messaging.")
ccdsgIfCaVendorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 1, 1), ).setIndexNames((0, "CISCO-CABLE-DSG-IF-MIB", "ccdsgIfCaVendorIndex"))
if mibBuilder.loadTexts: ccdsgIfCaVendorEntry.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorEntry.setDescription("An entry in the CA Vendor Table. Rows are created by an SNMP SET request setting the value of ccdsgifCaVendorRowStatus to 'createAndGo' or 'createAndWait'. Rows are deleted by an SNMP SET request setting the value of ccdsgifCaVendorRowStatus to 'destroy'. Active CA (that are associated to the tunnel) cannot be detroyed till association is removed.")
ccdsgIfCaVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccdsgIfCaVendorIndex.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorIndex.setDescription('The row index into the CA Vendor Table')
ccdsgIfCaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfCaVendorName.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorName.setDescription('The name of the CA Vendor.')
ccdsgIfCaVendorTunnelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccdsgIfCaVendorTunnelCnt.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorTunnelCnt.setDescription('The total count of Tunnel(s) configured for the CA vendor. The value 0 implies that no tunnel is currently configured for this CA vendor.')
ccdsgIfCaVendorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfCaVendorRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorRowStatus.setDescription('The status of the row. A value of active(1) indicates that DSG forwards OOB messages onto the DSG Tunnel.')
ccdsgIfTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1), )
if mibBuilder.loadTexts: ccdsgIfTunnelTable.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelTable.setDescription('The DSG Tunnel Table associates an input IP Address and an output MAC Address with a CA Vendor Index.')
ccdsgIfTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1), ).setIndexNames((0, "CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelIndex"))
if mibBuilder.loadTexts: ccdsgIfTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelEntry.setDescription("An entry in the DSG Tunnel Table. Rows are created by an SNMP SET request setting the value of ccdsgIfTunnelRowStatus to 'createAndGo' or 'createAndWait'. Rows are deleted by an SNMP SET request setting the value of ccdsgIfTunnelRowStatus to 'destroy'.")
ccdsgIfTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccdsgIfTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelIndex.setDescription('The row index into the DSG Tunnel table.')
ccdsgIfTunnelInAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfTunnelInAddressType.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelInAddressType.setDescription('The type of internet address of ccdsgIfTunnelInIpAddress. Cannot be changed if the value of ccdsgIfTunnelRowStatus is active.')
ccdsgIfTunnelInIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfTunnelInIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelInIpAddress.setDescription('The DSG Tunnel Input IP address. Cannot be changed if the value of ccdsgIfTunnelRowStatus is active.')
ccdsgIfTunnelMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfTunnelMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelMacAddress.setDescription('The the DSG Tunnel Output MAC address. Cannot be changed if the value of ccdsgTunnelRowStatus is active.')
ccdsgIfTunnelCaVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfTunnelCaVendorIndex.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelCaVendorIndex.setDescription('The index in ccdsgIfCaVendorTable describing the vendor information associated with this particular tunnel. If no associated entry in ccdsgIfCaVendorTable exists, this object should be zero.')
ccdsgIfTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelRowStatus.setDescription('The status of the row.')
ccdsgIfDownstreamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1), )
if mibBuilder.loadTexts: ccdsgIfDownstreamTable.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownstreamTable.setDescription('The DSG Downstream Table associates a Tunnel Index with a DOCSIS downstream channel interface index (ifIndex). It could have a same tunnel associated to multiple downstream channel and vise versa.')
ccdsgIfDownstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 1), ).setIndexNames((0, "CISCO-CABLE-DSG-IF-MIB", "ccdsgIfDownDsgIndex"))
if mibBuilder.loadTexts: ccdsgIfDownstreamEntry.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownstreamEntry.setDescription("An entry in the DSG Downstream Table. Rows are created by an SNMP SET request setting the value of ccdsgIfDownRowStatus to 'createAndGo' or 'createAndWait'. Rows are deleted by an SNMP SET request setting the value of ccdsgIfDownRowStatus to 'destroy'.")
ccdsgIfDownDsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccdsgIfDownDsgIndex.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownDsgIndex.setDescription('The row index into the the downstream DSG table.')
ccdsgIfDownTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfDownTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownTunnelIndex.setDescription('The index in ccdsgIfTunnelTable (ccdsgIfTunnelIndex) describing the Tunnel information associated with particular downstream(s).')
ccdsgIfDownIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfDownIfIndex.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownIfIndex.setDescription('The interface index (ifIndex) of this downstream.')
ccdsgIfDownRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccdsgIfDownRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownRowStatus.setDescription('The status of the row.')
ciscoCableDsgIfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 4))
ciscoCableDsgIfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 4, 1))
ciscoCableDsgIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 4, 2))
ccdsgIfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 999, 4, 1, 1)).setObjects(("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfCaVendorGroup"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelGroup"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfDownstreamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccdsgIfBasicCompliance = ccdsgIfBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfBasicCompliance.setDescription('The compliance statement for DOCSIS Set-top Gateway systems.')
ccdsgIfCaVendorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 4, 2, 1)).setObjects(("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfCaVendorName"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfCaVendorTunnelCnt"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfCaVendorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccdsgIfCaVendorGroup = ccdsgIfCaVendorGroup.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfCaVendorGroup.setDescription('A collection of objects providing CA Vendor configuration.')
ccdsgIfTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 4, 2, 2)).setObjects(("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelInAddressType"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelInIpAddress"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelMacAddress"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelCaVendorIndex"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccdsgIfTunnelGroup = ccdsgIfTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfTunnelGroup.setDescription('A collection of objects providing DSG Tunnel configuration.')
ccdsgIfDownstreamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 4, 2, 3)).setObjects(("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfDownTunnelIndex"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfDownIfIndex"), ("CISCO-CABLE-DSG-IF-MIB", "ccdsgIfDownRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccdsgIfDownstreamGroup = ccdsgIfDownstreamGroup.setStatus('current')
if mibBuilder.loadTexts: ccdsgIfDownstreamGroup.setDescription('A collection of objects providing DSG Downstream configuration.')
mibBuilder.exportSymbols("CISCO-CABLE-DSG-IF-MIB", ccdsgIfDownTunnelIndex=ccdsgIfDownTunnelIndex, ccdsgIfTunnel=ccdsgIfTunnel, ccdsgIfCaVendorTable=ccdsgIfCaVendorTable, ccdsgIfCaVendorName=ccdsgIfCaVendorName, ccdsgIfTunnelTable=ccdsgIfTunnelTable, PYSNMP_MODULE_ID=ciscoCableDsgIfMIB, ccdsgIfTunnelInIpAddress=ccdsgIfTunnelInIpAddress, ccdsgIfCaVendorGroup=ccdsgIfCaVendorGroup, ccdsgIfTunnelInAddressType=ccdsgIfTunnelInAddressType, ccdsgIfDownRowStatus=ccdsgIfDownRowStatus, ccdsgIfTunnelMacAddress=ccdsgIfTunnelMacAddress, ccdsgIfDownstreamTable=ccdsgIfDownstreamTable, ciscoCableDsgIfConformance=ciscoCableDsgIfConformance, ccdsgIfTunnelIndex=ccdsgIfTunnelIndex, ccdsgIfTunnelRowStatus=ccdsgIfTunnelRowStatus, ciscoCableDsgIfCompliances=ciscoCableDsgIfCompliances, ccdsgIfCaVendorTunnelCnt=ccdsgIfCaVendorTunnelCnt, ccdsgIfDownIfIndex=ccdsgIfDownIfIndex, ciscoCableDsgIfMIB=ciscoCableDsgIfMIB, ccdsgIfCaVendorIndex=ccdsgIfCaVendorIndex, ccdsgIfCaVendorEntry=ccdsgIfCaVendorEntry, ccdsgIfCaVendor=ccdsgIfCaVendor, ccdsgIfTunnelCaVendorIndex=ccdsgIfTunnelCaVendorIndex, ccdsgIfDownstreamEntry=ccdsgIfDownstreamEntry, ciscoCableDsgIfGroups=ciscoCableDsgIfGroups, ccdsgIfTunnelGroup=ccdsgIfTunnelGroup, ccdsgIfCaVendorRowStatus=ccdsgIfCaVendorRowStatus, ccdsgIfDownDsgIndex=ccdsgIfDownDsgIndex, ccdsgIfBasicCompliance=ccdsgIfBasicCompliance, ccdsgIfTunnelEntry=ccdsgIfTunnelEntry, ccdsgIfDownstreamGroup=ccdsgIfDownstreamGroup, ccdsgIfDownstream=ccdsgIfDownstream)
