#
# PySNMP MIB module TPLINK-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-STACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, NotificationType, ObjectIdentity, IpAddress, Unsigned32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, Bits, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "ObjectIdentity", "IpAddress", "Unsigned32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "Bits", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 34))
tplinkStackMIB.setRevisions(('2012-11-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkStackMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkStackMIB.setLastUpdated('201211290000Z')
if mibBuilder.loadTexts: tplinkStackMIB.setOrganization('TP-LINK')
if mibBuilder.loadTexts: tplinkStackMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkStackMIB.setDescription('This MIB module contain a collection of managed objects that apply to network devices with stack function.')
tplinkStackMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1))
tplinkStackNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 34, 2))
tpStackGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 1))
tpStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2))
tpStackName = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStackName.setStatus('current')
if mibBuilder.loadTexts: tpStackName.setDescription('An unique tag for the stack system.')
tpStackMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: tpStackMacAddress.setDescription('The mac address the stack uses to communicate with other devices.')
tpStackTopo = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("line", 0), ("ring", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStackTopo.setStatus('current')
if mibBuilder.loadTexts: tpStackTopo.setDescription('The current topo state of the stack.')
tpStackAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simple", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStackAuthMode.setStatus('current')
if mibBuilder.loadTexts: tpStackAuthMode.setDescription('The authentication mode used in stack creation.')
tpStackAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStackAuthKey.setStatus('current')
if mibBuilder.loadTexts: tpStackAuthKey.setDescription('The password to be used in stack authentication if the Stack Auth Mode is Simple or Md5.')
tpSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1), )
if mibBuilder.loadTexts: tpSwitchInfoTable.setStatus('current')
if mibBuilder.loadTexts: tpSwitchInfoTable.setDescription('This table contains information specific to switches in a stack.')
tpSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1), ).setIndexNames((0, "TPLINK-STACK-MIB", "tpSwitchCurrentUnit"))
if mibBuilder.loadTexts: tpSwitchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tpSwitchInfoEntry.setDescription('A conceptual row in the switchInfoTable describing a switch information.')
tpSwitchCurrentUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unit-1", 1), ("unit-2", 2), ("unit-3", 3), ("unit-4", 4), ("unit-5", 5), ("unit-6", 6), ("unit-7", 7), ("unit-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSwitchCurrentUnit.setStatus('current')
if mibBuilder.loadTexts: tpSwitchCurrentUnit.setDescription('This object contains the current switch identification number.')
tpSwitchDesignatedUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", -1), ("unit-1", 1), ("unit-2", 2), ("unit-3", 3), ("unit-4", 4), ("unit-5", 5), ("unit-6", 6), ("unit-7", 7), ("unit-8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpSwitchDesignatedUnit.setStatus('current')
if mibBuilder.loadTexts: tpSwitchDesignatedUnit.setDescription(' This object contains the preferred unit number for the switch. auto: When this option is selected, the device will be assigned a free unit number automatically. unit-x: When this option is selected, the device will try to obtain unit-x first,treated as auto when it is not available to obtain a preffered unit number. ')
tpSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("slave", 0), ("master", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSwitchRole.setStatus('current')
if mibBuilder.loadTexts: tpSwitchRole.setDescription('This object describes the function of the switch: slave - stack member. master - stack master. ')
tpSwitchPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpSwitchPriority.setStatus('current')
if mibBuilder.loadTexts: tpSwitchPriority.setDescription('A number containing the priority of a switch. The switch with the highest priority will become the master.')
tpSwitchMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSwitchMacAddress.setStatus('current')
if mibBuilder.loadTexts: tpSwitchMacAddress.setDescription('The MAC address of the switch.')
tpSwitchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSwitchVersion.setStatus('current')
if mibBuilder.loadTexts: tpSwitchVersion.setDescription('The software version of the switch.')
tpSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("disc", 2), ("sync", 3), ("ready", 4), ("verMismatch", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSwitchState.setStatus('current')
if mibBuilder.loadTexts: tpSwitchState.setDescription('The current state of a switch: init - The switch is initializing. disc - The switch is discovering other switchs. sync - The switch is now synchronizing config with other stack members. ready - The switch is now ready. verMismatch - The software version running on the master is different with this member. ')
tpStackPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 2), )
if mibBuilder.loadTexts: tpStackPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: tpStackPortInfoTable.setDescription('This table contains stackport specific information. There exists an entry in this table for every physical stack port that have an entry in the ifTable (IF-MIB).')
tpStackPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpStackPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tpStackPortInfoEntry.setDescription('A conceptual row in the stackPortInfoTable. An entry contains information about a stackport.')
tpStackPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStackPortEnable.setStatus('current')
if mibBuilder.loadTexts: tpStackPortEnable.setDescription('Whether the port is enable as a stack port. disable - Ethernet port mode. enable - Stack port mode. ')
tpStackPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("down", 2), ("authFail", 3), ("ethernet", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStackPortStatus.setStatus('current')
if mibBuilder.loadTexts: tpStackPortStatus.setDescription('The state of the stackport. ok - Connected and operational. down - Link down. authFail - The stack port is link-up but no discovery packets received or malformed packet received. ethernet - The port now works in Ethernet mode. ')
tpStackPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 34, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStackPortNeighbor.setStatus('current')
if mibBuilder.loadTexts: tpStackPortNeighbor.setDescription(' The mac address of the switch directly links on the stack port.')
mibBuilder.exportSymbols("TPLINK-STACK-MIB", tplinkStackMIB=tplinkStackMIB, tpSwitchState=tpSwitchState, tpSwitchRole=tpSwitchRole, tpStackTopo=tpStackTopo, tpStackName=tpStackName, tpStackInfo=tpStackInfo, tpStackPortInfoTable=tpStackPortInfoTable, tpStackAuthMode=tpStackAuthMode, tpSwitchPriority=tpSwitchPriority, tpStackPortNeighbor=tpStackPortNeighbor, tpStackPortEnable=tpStackPortEnable, tpStackMacAddress=tpStackMacAddress, tpStackGlobal=tpStackGlobal, tpSwitchCurrentUnit=tpSwitchCurrentUnit, tpSwitchDesignatedUnit=tpSwitchDesignatedUnit, tplinkStackMIBObjects=tplinkStackMIBObjects, tpSwitchInfoTable=tpSwitchInfoTable, tpStackPortStatus=tpStackPortStatus, tpSwitchVersion=tpSwitchVersion, tplinkStackNotifications=tplinkStackNotifications, PYSNMP_MODULE_ID=tplinkStackMIB, tpStackPortInfoEntry=tpStackPortInfoEntry, tpSwitchMacAddress=tpSwitchMacAddress, tpStackAuthKey=tpStackAuthKey, tpSwitchInfoEntry=tpSwitchInfoEntry)
