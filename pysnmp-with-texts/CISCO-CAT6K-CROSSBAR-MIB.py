#
# PySNMP MIB module CISCO-CAT6K-CROSSBAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CAT6K-CROSSBAR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
Percent, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, entPhysicalDescr, entPhysicalVendorType, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalDescr", "entPhysicalVendorType", "entPhysicalName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Gauge32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, TimeTicks, MibIdentifier, Counter64, NotificationType, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "TimeTicks", "MibIdentifier", "Counter64", "NotificationType", "iso", "IpAddress")
TruthValue, TextualConvention, TimeStamp, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "TimeStamp", "DateAndTime", "DisplayString")
ciscoCat6kCrossbarMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 217))
ciscoCat6kCrossbarMIB.setRevisions(('2013-09-16 00:00', '2012-05-31 00:00', '2009-02-15 00:00', '2007-12-18 00:00', '2006-12-19 00:00', '2004-11-19 00:00', '2004-08-11 00:00', '2004-06-11 00:00', '2003-09-29 00:00', '2003-04-02 00:00', '2002-12-05 00:00', '2001-06-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCat6kCrossbarMIB.setRevisionsDescriptions(("Added two new enumerations 'pfc4xxl' and 'pfc4lite' in cc6kxbarSysCapPfcOperMode.", 'Added following OBJECT-GROUP - cc6kxbarStatisticsLbusDropGroup Added new compliance - cc6kxbarMIBComplianceVer8. Updated the description for - cc6kxbarStatisticsPeakTmInUtil - cc6kxbarStatisticsPeakTmOutUtil.', "Added cc6kxbarErrRcvryPersLinkResGroup and cc6kxbarErrRcvryChResyncGroup, cc6kxbarTMSwBusUtilGroup, cc6kxbarTMSwBusUtilNotifControlGroup, cc6kxbarTMSwBusUtilNotifObjectGroup, cc6kxbarTMSwBusUtilNotifGroup, cc6kxbarTMChUtilGroup, cc6kxbarTMChUtilNotifControlGroup, cc6kxbarTMChUtilNotifObjectGroup, cc6kxbarTMChUtilNotifGroup. Added two new enumerations 'pfc4' and 'pfc4xl' in cc6kxbarSysCapPfcOperMode. Added DISPLAY-HINT in TEXTUAL-CONVENTION of ModuleSlotNumber and FabricChannelNumber.", 'Added cc6kxbarSysCapPfcOperModeGroup, cc6kxbarSysCapSwitchResGroup, cc6kxbarChannelUtilGroup1, cc6kxbarSwBusGroup1, cc6kxbarErrorGroup, cc6kxbarErrRcvryThresholdGroup and cc6kxbarErrRcvrySwitchoverGroup.', 'Added cc6kxbarDcefOnlyModeAllowedGroup, cc6kxbarForceBusModeGroup, cc6kxbarFlowCtrlNotifCtrlGroup, cc6kxbarFlowCtrlBusThreshGroup, cc6kxbarFlowCtrlBusThrNotifGroup and cc6kxbarBusOnlyModeOperGroup.', 'Added cc6kxbarIntBusCRCErrGroup.', 'Added cc6kxbarIntBusNotifControlGroup and cc6kxbarIntBusCRCErrNotifGroup.', 'Added cc6kxbarTruncatedModeOper Object and changed the description of cc6kxbarTruncatedModeAllowed and cc6kxbarMinFabricPresent.', 'Changed the description of cc6kxbarTruncatedModeAllowed and cc6kxbarMinFabricPresent. Removed default value for cc6kxbarTruncatedModeAllowed.', 'Changed the SYNTAX and description of cc6kxbarMinFabricPresent and description of cc6kxbarTruncatedModeAllowed.', 'Added cc6kxbarModuleChannelSpeed, cc6kxbarSwBusSwitchingStatus, cc6kxbarSwBusFailureDuration, cc6kxbarSwBusNotifEnable objects and cc6kxbarSwBusStallNotif notification.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCat6kCrossbarMIB.setLastUpdated('201309160000Z')
if mibBuilder.loadTexts: ciscoCat6kCrossbarMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCat6kCrossbarMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cat6000@cisco.com')
if mibBuilder.loadTexts: ciscoCat6kCrossbarMIB.setDescription('The Catalyst 6000 Crossbar MIB provides instrumentation for configuration and operation of the crossbar switching fabric module, and additional functionalities for switching bus and internal bus, etc.')
ciscoCat6kXbarMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1))
cc6kxbarConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1))
cc6kxbarStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2))
cc6kxbarStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3))
cc6kxbarSwBusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4))
cc6kxbarIntBusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 5))
cc6kxbarFlowCtrlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 6))
cc6kxbarSystemCapacityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 7))
cc6kxbarErrorRecoveryObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8))
cc6kxbarTrafficMonitorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9))
cc6kxbarTrafficMonitorSwBusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1))
cc6kxbarTrafficMonitorChObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2))
class ModuleSlotNumber(TextualConvention, Unsigned32):
    description = 'Slot number of the module.'
    status = 'current'
    displayHint = 'd'

class FabricChannelNumber(TextualConvention, Unsigned32):
    description = 'Fabric channel number.'
    status = 'current'
    displayHint = 'd'

class ChannelStatus(TextualConvention, Integer32):
    description = 'Status of the Channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ok", 1), ("syncError", 2), ("heartbeatError", 3), ("crcError", 4), ("bufferError", 5), ("timeoutError", 6), ("unused", 7))

cc6kxbarFallbackMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarFallbackMode.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFallbackMode.setDescription("cc6kxbarFallbackMode controls system fallback to bus-mode after loss of switching fabric module. 'true' - When the last fabric card is removed system will adjust the supervisor and line cards switching mode automatically without resetting the system. With this feature enabled, the switch might lose traffic while it's changing the switching mode. 'false' - All the ports in the system will be disabled when the last fabric card is removed.")
cc6kxbarBusOnlyModeAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarBusOnlyModeAllowed.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarBusOnlyModeAllowed.setDescription('Indicates whether bus mode is administratively enabled on the device or not.')
cc6kxbarTruncatedModeAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTruncatedModeAllowed.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTruncatedModeAllowed.setDescription('Indicates whether truncated mode is administratively enabled on the device or not.')
cc6kxbarMinFabricPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarMinFabricPresent.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarMinFabricPresent.setDescription("This object indicates the minimum number of switching fabric capable modules to be present in the system, for any switching fabric capable module to be in 'crossbarmode' indicated by cc6kxbarModuleModeSwitchingMode, when cc6kxbarTruncatedModeOper is 'false'.")
cc6kxbarLcdBannerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 5), )
if mibBuilder.loadTexts: cc6kxbarLcdBannerTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarLcdBannerTable.setDescription('cc6kxbarLcdBannerTable configures the Lcd banner of the fabric module.')
cc6kxbarLcdBannerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerIndex"))
if mibBuilder.loadTexts: cc6kxbarLcdBannerEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarLcdBannerEntry.setDescription('An entry in cc6kxbarLcdBannerTable. Entries are created by the agent based on the size of the lcd banner.')
cc6kxbarLcdBannerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cc6kxbarLcdBannerIndex.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarLcdBannerIndex.setDescription('Object which specifies a unique entry in the table.')
cc6kxbarLcdBannerBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarLcdBannerBanner.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarLcdBannerBanner.setDescription('Message that would be displayed on the fabric card LCD. The size of cc6kxbarLcdBannerBanner should be less than or equal to the cc6kxbarLcdBannerMaxSize value.')
cc6kxbarLcdBannerMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarLcdBannerMaxSize.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarLcdBannerMaxSize.setDescription('Maximum size of the associated cc6kxbarLcdBannerBanner object.')
cc6kxbarTruncatedModeOper = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarTruncatedModeOper.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTruncatedModeOper.setDescription("Indicates if the truncated mode is operationally enabled on the device or not. 'true' - With the fabric module present in the system, cc6kxbarModuleModeSwitchingMode will be 'crossbarmode' for all the fabric capable modules. 'false'- With the cc6kxbarMinFabricPresent fabric capable modules and the fabric module present in the system, cc6kxbarModuleModeSwitchingMode will be 'crossbarmode' for fabric capable modules.")
cc6kxbarDcefOnlyModeAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarDcefOnlyModeAllowed.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarDcefOnlyModeAllowed.setDescription("Indicates whether the dcef mode is enabled on the standby supervisor or not. 'true' - Setting cc6kxbarDcefOnlyModeAllowed to 'true' makes the cc6kxbarModuleModeSwitchingMode of all the active modules to 'dcefmode'. With the active fabric module present in the system, with the switch being in stateful switchover mode, with all the cards that has no distributed Cisco Express forwarding switching support being powered down and on some platforms with standby supervisor ports being shutdown, changing cc6kxbarDcefOnlyModeAllowed to 'true' will make the standby supervisor module reloaded and booted up as distributed forwarding module. 'false'- Setting cc6kxbarDcefOnlyModeAllowed to 'false' makes the cc6kxbarModuleModeSwitchingMode of the standby supervisor module to the default value. Changing cc6kxbarDcefOnlyModeAllowed to 'false' will make the standby supervisor reloaded and booted up with the default cc6kxbarModuleModeSwitchingMode.")
cc6kxbarForceBusMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarForceBusMode.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarForceBusMode.setDescription("Indicates whether some affected modules are forced to be in 'busmode' or not. 'true' - Setting cc6kxbarForceBusMode to 'true' makes the cc6kxbarModuleModeSwitchingMode of all the affected modules to 'busmode'. Changing the cc6kxbarForceBusMode to 'true' will make all the affected modules reloaded and booted up as non fabric capable modules. 'false'- Setting cc6kxbarForceBusMode to 'false' makes the cc6kxbarModuleModeSwitchingMode of all the affected modules to the default value. Changing cc6kxbarForceBusMode to 'false' will make all the affected modules reloaded and booted up with the default cc6kxbarModuleModeSwitchingMode.")
cc6kxbarBusOnlyModeOper = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarBusOnlyModeOper.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarBusOnlyModeOper.setDescription("Indicates if the bus mode is operationally enabled on the device or not. 'true' - Modules are allowed to run in 'busmode'. 'false' - None of the modules are allowed to run in 'busmode' i.e., All the non-fabric capable modules will be powered off. Absence of fabric module results in all the fabric capable modules being powered off.")
cc6kxbarFabricActiveSlot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 1), ModuleSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarFabricActiveSlot.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFabricActiveSlot.setDescription('cc6kxbarFabricActiveSlot indicates the slot number of the active switching fabric module. A value of zero indicates that the active switching fabric module is either powered down or not present in the chassis.')
cc6kxbarFabricBackupSlot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 2), ModuleSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarFabricBackupSlot.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFabricBackupSlot.setDescription('cc6kxbarFabricBackupSlot indicates the slot number of the backup switching fabric module. A value of zero indicates that the backup switching fabric module is either powered down or not present in the chassis.')
cc6kxbarModuleModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 3), )
if mibBuilder.loadTexts: cc6kxbarModuleModeTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleModeTable.setDescription('cc6kxbarModuleModeTable indicates the switching mode of each module in the system.')
cc6kxbarModuleModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleModeModule"))
if mibBuilder.loadTexts: cc6kxbarModuleModeEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleModeEntry.setDescription('An entry in cc6kxbarModuleModeTable. The agent creates an entry when a non switching fabric module is inserted in the chassis. The agent destroys an entry when a non switching fabric module is power down or reset or removed from the chassis.')
cc6kxbarModuleModeModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 3, 1, 1), ModuleSlotNumber())
if mibBuilder.loadTexts: cc6kxbarModuleModeModule.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleModeModule.setDescription('The module slot number.')
cc6kxbarModuleModeSwitchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("busmode", 1), ("crossbarmode", 2), ("dcefmode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarModuleModeSwitchingMode.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleModeSwitchingMode.setDescription("cc6kxbarModuleModeSwitchingMode indicates switching mode of the cc6kxbarModuleModeModule. 'busmode' - Modules in this mode don't use fabric. Backplane is used for both lookup and data forwarding. 'crossbarmode' - Modules in this mode use backplane for forwarding decision and fabric for data forwarding 'dcefmode' - Modules in this mode use fabric for data forwarding and local forwarding is enabled.")
cc6kxbarModuleChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4), )
if mibBuilder.loadTexts: cc6kxbarModuleChannelTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelTable.setDescription('cc6kxbarModuleChannelTable shows the operational status of fabric channels. This table will be instantiated only when cc6kxbarFabricActiveSlot has a valid value other than zero.')
cc6kxbarModuleChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleChannelModule"), (0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleChannelChannel"))
if mibBuilder.loadTexts: cc6kxbarModuleChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelEntry.setDescription('An entry in cc6kxbarModuleChannelTable.')
cc6kxbarModuleChannelModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4, 1, 1), ModuleSlotNumber())
if mibBuilder.loadTexts: cc6kxbarModuleChannelModule.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelModule.setDescription('The module slot number.')
cc6kxbarModuleChannelChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4, 1, 2), FabricChannelNumber())
if mibBuilder.loadTexts: cc6kxbarModuleChannelChannel.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelChannel.setDescription('Fabric channel number of the cc6kxbarModuleChannelModule.')
cc6kxbarModuleChannelModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4, 1, 3), ChannelStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarModuleChannelModStatus.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelModStatus.setDescription('The status of the fabric channel at the cc6kxbarModuleChannelModule.')
cc6kxbarModuleChannelFabStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4, 1, 4), ChannelStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarModuleChannelFabStatus.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelFabStatus.setDescription('The status of the fabric channel at the cc6kxbarFabricActiveSlot.')
cc6kxbarModuleChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarModuleChannelSpeed.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleChannelSpeed.setDescription('The speed in mega bits per second of the cc6kxbarModuleChannelChannel for cc6kxbarModuleChannelModule.')
cc6kxbarStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1), )
if mibBuilder.loadTexts: cc6kxbarStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsTable.setDescription('cc6kxbarStatisticsTable gives the fabric channel counters and utilization information. This table will be instantiated when cc6kxbarFabricActiveSlot has a valid value other than zero.')
cc6kxbarStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsModule"), (0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsChannel"))
if mibBuilder.loadTexts: cc6kxbarStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsEntry.setDescription('An entry in cc6kxbarStatisticsTable.')
cc6kxbarStatisticsModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 1), ModuleSlotNumber())
if mibBuilder.loadTexts: cc6kxbarStatisticsModule.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsModule.setDescription('The module slot number.')
cc6kxbarStatisticsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 2), FabricChannelNumber())
if mibBuilder.loadTexts: cc6kxbarStatisticsChannel.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsChannel.setDescription('Fabric channel number associated with the cc6kxbarStatisticsModule.')
cc6kxbarStatisticsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsInErrors.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsInErrors.setDescription('The total number of error packets received on cc6kxbarStatisticsChannel for cc6kxbarStatisticsModule since this entry was last initialized.')
cc6kxbarStatisticsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsOutErrors.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsOutErrors.setDescription('The total number of error packets transmitted on cc6kxbarStatisticsModule through the cc6kxbarStatisticsChannel since this entry was last initialized.')
cc6kxbarStatisticsOutDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsOutDropped.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsOutDropped.setDescription('The total number of dropped packets transmitted on the cc6kxbarStatisticsChannel for cc6kxbarStatisticsModule since this entry was last initialized.')
cc6kxbarStatisticsInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsInUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsInUtil.setDescription('Input utilization of the cc6kxbarStatisticsChannel for cc6kxbarStatisticsModule.')
cc6kxbarStatisticsOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 7), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsOutUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsOutUtil.setDescription('Output utilization of the cc6kxbarStatisticsChannel for cc6kxbarStatisticsModule.')
cc6kxbarStatisticsPeakInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 8), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakInUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakInUtil.setDescription('Indicates the peak value of cc6kxbarStatisticsInUtil of the cc6kxbarStatisticsChannel for cc6kxbarStatisticsModule.')
cc6kxbarStatisticsPeakTmInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakTmInUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakTmInUtil.setDescription("Indicates the time of most recent change in the corresponding instance value of cc6kxbarStatisticsPeakInUtil. This object contains value 0x0000010100000000 when the corresponding instance value of cc6kxbarStatisticsPeakInUtil is '0'.")
cc6kxbarStatisticsPeakOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 10), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakOutUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakOutUtil.setDescription('Indicates the peak value of cc6kxbarStatisticsOutUtil of the cc6kxbarStatisticsChannel for cc6kxbarStatisticsModule.')
cc6kxbarStatisticsPeakTmOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakTmOutUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsPeakTmOutUtil.setDescription("Indicates the time of most recent change in the corresponding instance value of cc6kxbarStatisticsPeakOutUtil. This object contains value 0x0000010100000000 when the corresponding instance value of cc6kxbarStatisticsPeakOutUtil is '0'.")
cc6kxbarStatisticsLbusDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarStatisticsLbusDrops.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsLbusDrops.setDescription('This object indicates the number of packets that have been deterministically dropped due to the threshold on the local bus FIFO, errors and exception conditions.')
cc6kxbarErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2), )
if mibBuilder.loadTexts: cc6kxbarErrorTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorTable.setDescription('cc6kxbarErrorTable provides the fabric channel error information. This table will be instantiated only when cc6kxbarFabricActiveSlot has a valid value other than zero.')
cc6kxbarErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorModule"), (0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorChannel"))
if mibBuilder.loadTexts: cc6kxbarErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorEntry.setDescription('An entry in cc6kxbarErrorTable for a specific fabric channel on a specific module.')
cc6kxbarErrorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 1), ModuleSlotNumber())
if mibBuilder.loadTexts: cc6kxbarErrorModule.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorModule.setDescription('The module slot number.')
cc6kxbarErrorChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 2), FabricChannelNumber())
if mibBuilder.loadTexts: cc6kxbarErrorChannel.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorChannel.setDescription('Fabric channel number associated with the cc6kxbarErrorModule.')
cc6kxbarErrorModuleCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorModuleCrc.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorModuleCrc.setDescription('Indicates the total number of CRC error packets for the cc6kxbarErrorChannel of the cc6kxbarErrorModule.')
cc6kxbarErrorModuleHbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorModuleHbeat.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorModuleHbeat.setDescription('Indicates the total number of heartbeat misses detected for the cc6kxbarErrorChannel of the cc6kxbarErrorModule.')
cc6kxbarErrorModuleSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorModuleSync.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorModuleSync.setDescription('Indicates the total number of times cc6kxbarErrorModule could not sync to the active switching fabric module.')
cc6kxbarErrorModuleDDRSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorModuleDDRSync.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorModuleDDRSync.setDescription('Indicates the total number of DDR(Double Data Rate) channel sync errors for the cc6kxbarErrorChannel of the cc6kxbarErrorModule.')
cc6kxbarErrorChannelSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorChannelSync.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorChannelSync.setDescription('Indicates the total number of sync errors received at cc6kxbarErrorChannel.')
cc6kxbarErrorChannelBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorChannelBuffer.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorChannelBuffer.setDescription('Indicates the total number of times the memory buffer for cc6kxbarErrorChannel of the cc6kxbarErrorModule is full.')
cc6kxbarErrorChannelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 3, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarErrorChannelTimeout.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorChannelTimeout.setDescription('Indicates the total number of timeouts for input from the cc6kxbarErrorChannel of the cc6kxbarErrorModule.')
cc6kxbarSwBusSwitchingStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("stalled", 2), ("isolated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSwBusSwitchingStatus.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusSwitchingStatus.setDescription('Indicates the current switching status of the switching bus on the system. normal -- the switching bus is under normal packet switching operation. stalled -- the switching bus has stopped packet switching but is still attached to the system, i.e., the switching bus is stalled. isolated -- the switching bus has stopped packet switching and is detached from the system, i.e., the switching bus is isolated. The object is only instantiated on systems which support switching bus switching detection feature.')
cc6kxbarSwBusFailureDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSwBusFailureDuration.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusFailureDuration.setDescription('Indicates the failure duration of the switching bus since the switching bus has transitioned out of the normal(1) state as monitored by cc6kxbarSwBusSwitchingStatus. If the object value of cc6kxbarSwBusSwitchingStatus is normal(1), then the object value of cc6kxbarSwBusFailureDuration should be zero. The object is only instantiated on systems which support switching bus switching detection feature.')
cc6kxbarSwBusNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarSwBusNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusNotifEnable.setDescription('Indicates whether or not the notification cc6kxbarSwBusStatusChangeNotif should be generated when there is change in the switching status of the switching bus as monitored by cc6kxbarSwBusSwitchingStatus. The object is only instantiated on systems which support switching bus switching detection feature.')
cc6kxbarSwBusUtilization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4, 4), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSwBusUtilization.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusUtilization.setDescription('Indicates the percentage of bandwidth utilization of the switching bus.')
cc6kxbarSwBusPeakUtilization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSwBusPeakUtilization.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusPeakUtilization.setDescription('Indicates the peak percentage value of bandwidth utilization of the switching bus since the system started.')
cc6kxbarSwBusPeakTimeUtil = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 4, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSwBusPeakTimeUtil.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusPeakTimeUtil.setDescription('Indicates the time at which the peak percentage value of bandwidth utilization of the switching bus value occurred.')
cc6kxbarIntBusNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 5, 1), Bits().clone(namedValues=NamedValues(("intBusCRCErrExcd", 0), ("intBusCRCErrRcvrd", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarIntBusNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusNotifEnable.setDescription('Indicates whether the generation of a specified notification for internal bus is enabled or not. If a bit corresponding to a notification is set to 1, then that notification can be generated. intBusCRCErrExcd -- the cc6kxbarIntBusCRCErrExcdNotif notification. intBusCRCErrRcvrd -- the cc6kxbarIntBusCRCErrRcvrdNotif notification.')
cc6kxbarIntBusCRCErrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 5, 2), )
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrTable.setDescription('A table containing internal bus CRC error information on a list of physical entities (such as modules).')
cc6kxbarIntBusCRCErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrEntry.setDescription('An entry containing internal bus CRC error information on a physical entity (such as a module).')
cc6kxbarIntBusCRCErrExcdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrExcdStatus.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrExcdStatus.setDescription('Indicates whether the internal bus CRC error on a physical entity is currently exceeding the fatal threshold or not.')
cc6kxbarIntBusCRCErrExcdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrExcdCount.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrExcdCount.setDescription('Indicates the number of times the internal bus CRC error on a physical entity has exceeded the fatal threshold.')
cc6kxbarFlowCtrlNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 6, 1), Bits().clone(namedValues=NamedValues(("busThreshExcd", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarFlowCtrlNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlNotifEnable.setDescription('Specifies whether the generation of a specified notification for flow control feature is enabled or not. If a bit corresponding to a notification is set to one, then that notification can be generated. busThreshExcd -- the cc6kxbarFlowCtrlBusThrExcdNotif notification.')
cc6kxbarFlowCtrlBusFIFOThrMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusFIFOThrMode.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusFIFOThrMode.setDescription('Specifies the mode configuration of the system bus flow control FIFO threshold. off -- the flow control FIFO threshold is set to the original value defined by the system. on -- the flow control FIFO threshold is set to the lower value defined by the system. auto -- the system starts monitoring the system bus flow control FIFO threshold and will change the flow control FIFO threshold from the original value to the lower value when the system detects the first occurrence of the threshold exceeding on a physical entity (such as a module) over the system allowed limit.')
cc6kxbarFlowCtrlBusFIFOThrValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("original", 1), ("lower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusFIFOThrValue.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusFIFOThrValue.setDescription('Indicates the current value of the system bus flow control FIFO threshold, whether it is the original value or the lower value.')
cc6kxbarFlowCtrlBusFIFOTransTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 6, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusFIFOTransTime.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusFIFOTransTime.setDescription("Indicates the value of sysUpTime at the time that the system bus flow control FIFO threshold is transitioned to lower value when the object value of cc6kxbarFlowCtrlBusFIFOThrValue is 'lower'. This object will take on the value of zero when the object value of cc6kxbarFlowCtrlBusFIFOThrValue is 'original'.")
cc6kxbarSysCapPfcOperMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("pfc3a", 2), ("pfc3b", 3), ("pfc3bxl", 4), ("pfc3cst1", 5), ("pfc3cxlst1", 6), ("pfc3c", 7), ("pfc3cxl", 8), ("pfc4", 9), ("pfc4xl", 10), ("pfc4xxl", 11), ("pfc4lite", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSysCapPfcOperMode.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapPfcOperMode.setDescription('Indicates the operating mode of the policy feature card (PFC). unknown -- unknown. pfc3a -- Policy feature card 3A. pfc3b -- Policy feature card 3B. pfc3bxl -- Policy feature card 3B XL. pfc3cst1 -- Policy feature card 3C ST1. pfc3cxlst1 -- Policy feature card 3C XL ST1. pfc3c -- Policy feature card 3C. pfc3cxl -- Policy feature card 3C XL. pfc4 -- Policy feature card 4. pfc4xl -- Policy feature card 4 XL. pfc4xxl -- Policy feature card 4 XXL. pfc4lite -- Policy feature card 4 Lite.')
cc6kxbarSysCapSwitchResTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 7, 2), )
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResTable.setDescription('A cc6kxbarSysCapSwitchResTable entry lists the capacity information of the switching resources for ENTITY-MIB entPhysicalTable entries of manageable components with type entPhysicalClass module(9).')
cc6kxbarSysCapSwitchResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 7, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResEntry.setDescription('A cc6kxbarSysCapSwitchResEntry entry lists the capacity information of the switching resources for ENTITY-MIB entPhysicalTable entries of manageable components with type entPhysicalClass module(9). Entries are created by the agent at the system power-up or module insertion. Entries are deleted by the agent upon module removal.')
cc6kxbarSysCapSwitchResSeries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("supervisor", 2), ("classic", 3), ("fabric", 4), ("dcef720", 5), ("cef720", 6), ("dcef256", 7), ("cef256", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResSeries.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResSeries.setDescription('Indicates the module series for traffic forwarding options. unknown -- unknown. supervisor -- supervisor module. classic -- classic module. fabric -- fabric module. dcef720 -- dCEF720 module. cef720 -- CEF720 module. dcef256 -- dCEF256 module. cef256 -- CEF256 module.')
cc6kxbarSysCapSwitchResCefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("dcef", 2), ("cef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResCefMode.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResCefMode.setDescription('Indicates the Cisco Express Forwarding (CEF) mode of the module. notApplicable -- not applicable for this module. dcef -- distributed CEF. cef -- CEF.')
cc6kxbarErrRcvryThreshLink = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarErrRcvryThreshLink.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryThreshLink.setDescription('Specifies the threshold on fabric link errors occurring in a channel for the fabric error recovery feature.')
cc6kxbarErrRcvryThreshPersLink = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarErrRcvryThreshPersLink.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryThreshPersLink.setDescription('Specifies the threshold on persistent fabric link errors occurring in a channel for the fabric error recovery feature.')
cc6kxbarErrRcvrySwitchoverEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarErrRcvrySwitchoverEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvrySwitchoverEnable.setDescription('Specifies whether the switchover to the standby fabric module is enabled or not on the detection of excessive fabric link errors occurring in a channel for the fabric error recovery feature.')
cc6kxbarErrRcvryPersLinkResync = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarErrRcvryPersLinkResync.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryPersLinkResync.setDescription('Specifies whether the system will resync the channel or not on the detection of excessive persistent fabric link errors in a channel for the fabric error recovery feature.')
cc6kxbarErrRcvryChResyncCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarErrRcvryChResyncCount.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryChResyncCount.setDescription('Specifies the consecutive number of times of channel resync within the time interval as specified by cc6kxbarErrRcvryChResyncInterval, over which the channel resync is considered as failure for the fabric error recovery feature.')
cc6kxbarErrRcvryChResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarErrRcvryChResyncInterval.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryChResyncInterval.setDescription('Specifies the time interval for the consecutive counting of channel resync for the fabric error recovery feature.')
cc6kxbarTMSwBusUtilEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilEnable.setDescription('Specifies whether the traffic monitor feature is enabled on the switching bus or not.')
cc6kxbarTMSwBusUtilInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilInterval.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilInterval.setDescription('Specifies the interval at the end of which the switching bus traffic utilization is compared against cc6kxbarTMSwBusUtilThreshold.')
cc6kxbarTMSwBusUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 3), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilThreshold.setDescription('Specifies the threshold of the switching bus traffic utilization.')
cc6kxbarTMSwBusUtilLogCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilLogCount.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilLogCount.setDescription('Indicates the number of times the following events are logged for the switching bus: 1. the switching bus traffic utilization has risen above the configured threshold (as specified by cc6kxbarTMSwBusUtilThreshold), or has kept staying above the configured threshold at a logging interval (as specified by cc6kxbarTMSwBusUtilLogInterval). 2. the switching bus traffic utilization has fallen below the configured threshold.')
cc6kxbarTMSwBusUtilLastLogTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilLastLogTime.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilLastLogTime.setDescription('Indicates the last logging time of the events as counted in cc6kxbarTMSwBusUtilLogCount. This object will contain 0-1-1,00:00:00.0 when the value of cc6kxbarTMSwBusUtilLogCount is zero.')
cc6kxbarTMSwBusUtilLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilLogInterval.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilLogInterval.setDescription('Specifies the logging interval if the switching bus traffic utilization keeps staying above the cc6kxbarTMSwBusUtilThreshold.')
cc6kxbarTMSwBusUtilUtilization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 7), Percent()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilUtilization.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilUtilization.setDescription('The switching bus traffic utilization included in the notification currently being sent.')
cc6kxbarTMSwBusUtilNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilNotifEnable.setDescription("Specifies whether the generation of c6kxbarTMSwBusUtilAboveNotif and c6kxbarTMSwBusUtilBelowNotif notifications is enabled or not. When this object is 'true', the generation of cc6kxbarTMSwBusUtilAboveNotif and c6kxbarTMSwBusUtilBelowNotif notifications is enabled. When this object is 'false', the generation of cc6kxbarTMSwBusUtilAboveNotif and c6kxbarTMSwBusUtilBelowNotif notifications is disabled.")
cc6kxbarTMChUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1), )
if mibBuilder.loadTexts: cc6kxbarTMChUtilTable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilTable.setDescription('cc6kxbarTrafficMntrChUtilTable provides the information on the traffic utilization of each fabric channel associated with each module slot for a given traffic direction in the chassis.')
cc6kxbarTMChUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1), ).setIndexNames((0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilModule"), (0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilChannel"), (0, "CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilDirection"))
if mibBuilder.loadTexts: cc6kxbarTMChUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilEntry.setDescription('An entry in cc6kxbarTMChUtilTable. Each traffic direction for each fabric channel associated with each module slot in the chassis will have an entry in this table.')
cc6kxbarTMChUtilModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 1), ModuleSlotNumber())
if mibBuilder.loadTexts: cc6kxbarTMChUtilModule.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilModule.setDescription('Indicates the module slot number in the chassis.')
cc6kxbarTMChUtilChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 2), FabricChannelNumber())
if mibBuilder.loadTexts: cc6kxbarTMChUtilChannel.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilChannel.setDescription('Indicates the fabric channel number associated with the corresponding cc6kxbarTMChUtilModule.')
cc6kxbarTMChUtilDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: cc6kxbarTMChUtilDirection.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilDirection.setDescription('Indicates the direction of traffic to be monitored.')
cc6kxbarTMChUtilEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMChUtilEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilEnable.setDescription('Specifies whether the traffic monitor feature is enabled on a fabric channel for a given traffic direction or not.')
cc6kxbarTMChUtilInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMChUtilInterval.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilInterval.setDescription('Specifies the interval at the end of which the traffic utilization on a fabric channel for a given traffic direction is compared against its corresponding cc6kxbarTMChUtilThreshold.')
cc6kxbarTMChUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 6), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMChUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilThreshold.setDescription('Specifies the threshold of the traffic utilization on a fabric channel for a given traffic direction.')
cc6kxbarTMChUtilLogCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarTMChUtilLogCount.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilLogCount.setDescription('Indicates the number of times the following events are logged on a fabric channel for a given direction. 1. the traffic utilization on a fabric channel for a given traffic direction has risen above its corresponding configured threshold (as specified by cc6kxbarTMChUtilThreshold), or has kept staying above the configured threshold at a logging interval (as specified by cc6kxbarTMChUtilLogInterval). 2. the traffic utilization on a fabric channel for a given traffic direction has fallen below its corresponding configured threshold.')
cc6kxbarTMChUtilLastLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cc6kxbarTMChUtilLastLogTime.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilLastLogTime.setDescription('Indicates the last logging time of the events as counted in the corresponding cc6kxbarTMChUtilLogCount on a fabric channel for a given traffic direction. This object will contain 0-1-1,00:00:00.0 when the corresponding cc6kxbarTMChUtilLogCount is zero.')
cc6kxbarTMChUtilLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMChUtilLogInterval.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilLogInterval.setDescription('Specifies the logging interval if the traffic utilization for a fabric channel on a given traffic direction keeps staying above its corresponding cc6kxbarTMChUtilThreshold.')
cc6kxbarTMChUtilUtilization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 3), Percent()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cc6kxbarTMChUtilUtilization.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilUtilization.setDescription('The traffic utilization on a fabric channel for a given traffic direction included in the notification currently being sent.')
cc6kxbarTMChUtilNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 217, 1, 9, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cc6kxbarTMChUtilNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilNotifEnable.setDescription("Specifies whether the generation of cc6kxbarTMChUtilAboveNotif and cc6kxbarTMChUtilBelowNotif notifications is enabled or not. When this object is 'true', the generation of cc6kxbarTMChUtilAboveNotif and cc6kxbarTMChUtilBelowNotif notifications is enabled. When this object is 'false', the generation of cc6kxbarTMChUtilAboveNotif and cc6kxbarTMChUtilBelowNotif notifications is disabled.")
ciscoCat6kXbarMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 0))
cc6kxbarSwBusStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 1)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusSwitchingStatus"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusFailureDuration"))
if mibBuilder.loadTexts: cc6kxbarSwBusStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusStatusChangeNotif.setDescription('A cc6kxbarSwBusStatusChangeNotif notification is sent by the device when there is change in switching status of the switching bus as monitored by cc6kxbarSwBusSwitchingStatus.')
cc6kxbarIntBusCRCErrExcdNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalVendorType"))
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrExcdNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrExcdNotif.setDescription('A cc6kxbarIntBusCRCThreshExcdNotif notification is sent by the system when the system has detected that the internal bus CRC error on a physical entity (such as a module) as specified by entPhysicalName has exceeded the fatal threshold.')
cc6kxbarIntBusCRCErrRcvrdNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalVendorType"))
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrRcvrdNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrRcvrdNotif.setDescription('A cc6kxbarIntBusCRCErrRcvrdNotif notification is sent by the system when the system has recovered as the internal bus CRC error on a physical entity (such as a module) as specified by entPhysicalName has fallen below the normal threshold.')
cc6kxbarFlowCtrlBusThrExcdNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalVendorType"))
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusThrExcdNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusThrExcdNotif.setDescription("A cc6kxbarFlowCtrlBusThrExcdNotif notification is sent by the system when the system detects the first occurrence of the system bus flow control FIFO threshold exceeding on a physical entity (such as a module) over the system allowed limit when the object value of cc6kxbarFlowCtrlBusFIFOThrMode is 'auto'.")
cc6kxbarTMSwBusUtilAboveNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 5)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilUtilization"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilThreshold"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilInterval"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilAboveNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilAboveNotif.setDescription('This notification is sent when the switching bus traffic utilization has risen above the configured threshold (as specified by cc6kxbarTMSwBusUtilThreshold), or has kept staying above the configured threshold at a logging interval (as specified by cc6kxbarTMSwBusUtilLogInterval). The varbind entPhysicalDescr specifies the physical entity (such as chassis) for which the cc6kxbarTMSwBusUtilAboveNotif is sent.')
cc6kxbarTMSwBusUtilBelowNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 6)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilUtilization"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilThreshold"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilInterval"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilBelowNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilBelowNotif.setDescription('This notification is sent when the switching bus traffic utilization has fallen below the configured threshold (as specified by cc6kxbarTMSwBusUtilThreshold). The varbind entPhysicalDescr specifies the physical entity (such as chassis) for which the cc6kxbarTMSwBusUtilBelowNotif is sent.')
cc6kxbarTMChUtilAboveNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 7)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilUtilization"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilThreshold"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilInterval"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: cc6kxbarTMChUtilAboveNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilAboveNotif.setDescription('This notification is sent when the traffic utilization on a fabric channel for a given traffic direction has risen above its corresponding configured threshold (as specified by cc6kxbarTMChUtilThreshold), or has kept staying above the configured threshold at a logging interval (as specified by cc6kxbarTMChUtilLogInterval). The varbind entPhysicalDescr specifies the physical entity (such as chassis) for which the cc6kxbarTMChUtilAboveNotif is sent.')
cc6kxbarTMChUtilBelowNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 217, 0, 8)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilUtilization"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilThreshold"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilInterval"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: cc6kxbarTMChUtilBelowNotif.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilBelowNotif.setDescription('This notification is sent when the traffic utilization on a fabric channel for a given traffic direction has fallen below its corresponding configured threshold (as specified by cc6kxbarTMChUtilThreshold). The varbind entPhysicalDescr specifies the physical entity (such as chassis) for which the cc6kxbarTMChUtilBelowNotif is sent.')
cc6kxbarMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 3))
cc6kxbarMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1))
cc6kxbarMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2))
cc6kxbarMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 2)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBCompliance = cc6kxbarMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBCompliance.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 3)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer1 = cc6kxbarMIBComplianceVer1.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer1.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 4)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer2 = cc6kxbarMIBComplianceVer2.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer2.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 5)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer3 = cc6kxbarMIBComplianceVer3.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer3.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 6)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer4 = cc6kxbarMIBComplianceVer4.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer4.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 7)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarDcefOnlyModeAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarForceBusModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlNotifCtrlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThreshGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyModeOperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer5 = cc6kxbarMIBComplianceVer5.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer5.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 8)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarDcefOnlyModeAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarForceBusModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlNotifCtrlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThreshGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyModeOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapPfcOperModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapSwitchResGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryThresholdGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvrySwitchoverGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer6 = cc6kxbarMIBComplianceVer6.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer6.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 9)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarDcefOnlyModeAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarForceBusModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlNotifCtrlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThreshGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyModeOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapPfcOperModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapSwitchResGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryThresholdGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvrySwitchoverGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryPersLinkResGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryChResyncGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifObjectGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifObjectGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer7 = cc6kxbarMIBComplianceVer7.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer7.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarMIBComplianceVer8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 1, 10)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleStatusGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelStatisticsGroupVer1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelSpeedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarDcefOnlyModeAllowedGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarForceBusModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlNotifCtrlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThreshGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThrNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyModeOperGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapPfcOperModeGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapSwitchResGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarChannelUtilGroup1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusGroup1"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryThresholdGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvrySwitchoverGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryPersLinkResGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryChResyncGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifObjectGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifControlGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifObjectGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifGroup"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsLbusDropGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarMIBComplianceVer8 = cc6kxbarMIBComplianceVer8.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarMIBComplianceVer8.setDescription('The compliance statement for the CISCO-CAT6K-CROSSBAR-MIB.')
cc6kxbarModuleStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 1)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerMaxSize"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerBanner"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedModeAllowed"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarMinFabricPresent"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFabricActiveSlot"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFabricBackupSlot"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleModeSwitchingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarModuleStatusGroup = cc6kxbarModuleStatusGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarModuleStatusGroup.setDescription('A collection of objects providing configuration and operation of the crossbar switching fabric module and switching capable module. cc6kxbarModuleStatusGroup object is superseded by cc6kxbarModuleStatusGroupVer1.')
cc6kxbarChannelStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 2)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleChannelModStatus"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleChannelFabStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarChannelStatusGroup = cc6kxbarChannelStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarChannelStatusGroup.setDescription('A collection of objects providing status and configuration of the fabric channel.')
cc6kxbarChannelStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 3)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsInErrors"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsOutErrors"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsOutDropped"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsInUtil"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsOutUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarChannelStatisticsGroup = cc6kxbarChannelStatisticsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cc6kxbarChannelStatisticsGroup.setDescription('A collection of objects providing statistics for the fabric channel. cc6kxbarChannelStatisticsGroup object is superseded by cc6kxbarChannelStatisticsGroupVer1.')
cc6kxbarFallbackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 4)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFallbackMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarFallbackGroup = cc6kxbarFallbackGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFallbackGroup.setDescription('This object controls system fallback to bus-mode after loss of switching fabric module.')
cc6kxbarBusOnlyAllowedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 5)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyModeAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarBusOnlyAllowedGroup = cc6kxbarBusOnlyAllowedGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarBusOnlyAllowedGroup.setDescription('This object determines the value of cc6kxbarModuleModeSwitchingMode of each module.')
cc6kxbarModuleStatusGroupVer1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 6)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedModeAllowed"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarMinFabricPresent"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFabricActiveSlot"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFabricBackupSlot"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleModeSwitchingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarModuleStatusGroupVer1 = cc6kxbarModuleStatusGroupVer1.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarModuleStatusGroupVer1.setDescription('A collection of objects providing configuration and operation of the crossbar switching fabric module and switching capable module.')
cc6kxbarChannelStatisticsGroupVer1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 7)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsInErrors"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsOutErrors"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsOutDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarChannelStatisticsGroupVer1 = cc6kxbarChannelStatisticsGroupVer1.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarChannelStatisticsGroupVer1.setDescription('A collection of objects providing statistics for the fabric channel.')
cc6kxbarLcdBannerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 8)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerMaxSize"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarLcdBannerBanner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarLcdBannerGroup = cc6kxbarLcdBannerGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarLcdBannerGroup.setDescription('A collection of objects providing configuration of the lcd Banner of the fabric module.')
cc6kxbarChannelUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 9)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsInUtil"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsOutUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarChannelUtilGroup = cc6kxbarChannelUtilGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarChannelUtilGroup.setDescription('These object determines Input and Output Utilization of the fabric channel.')
cc6kxbarChannelSpeedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 10)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarModuleChannelSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarChannelSpeedGroup = cc6kxbarChannelSpeedGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarChannelSpeedGroup.setDescription('A collection of objects providing the speed of the fabric channel.')
cc6kxbarSwBusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 11)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusSwitchingStatus"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusFailureDuration"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarSwBusGroup = cc6kxbarSwBusGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusGroup.setDescription('A collection of objects for the switching bus switching detection feature.')
cc6kxbarSwBusNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 12)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusStatusChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarSwBusNotifGroup = cc6kxbarSwBusNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusNotifGroup.setDescription('A collection of notifications for the switching bus switching detection feature.')
cc6kxbarTruncatedOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 13)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTruncatedModeOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTruncatedOperGroup = cc6kxbarTruncatedOperGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTruncatedOperGroup.setDescription('A collection of objects providing the operational truncated mode.')
cc6kxbarIntBusNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 14)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarIntBusNotifControlGroup = cc6kxbarIntBusNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusNotifControlGroup.setDescription('A collection of objects to control the notification generation for internal bus.')
cc6kxbarIntBusCRCErrNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 15)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrExcdNotif"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrRcvrdNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarIntBusCRCErrNotifGroup = cc6kxbarIntBusCRCErrNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrNotifGroup.setDescription('A collection of notifications for the internal bus CRC error.')
cc6kxbarIntBusCRCErrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 16)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrExcdStatus"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarIntBusCRCErrExcdCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarIntBusCRCErrGroup = cc6kxbarIntBusCRCErrGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarIntBusCRCErrGroup.setDescription('A collection of objects to indicate the internal bus CRC error information on a physical entity.')
cc6kxbarDcefOnlyModeAllowedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 17)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarDcefOnlyModeAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarDcefOnlyModeAllowedGroup = cc6kxbarDcefOnlyModeAllowedGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarDcefOnlyModeAllowedGroup.setDescription('A collection of objects providing the configuration and information about the dcef only mode feature.')
cc6kxbarForceBusModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 18)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarForceBusMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarForceBusModeGroup = cc6kxbarForceBusModeGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarForceBusModeGroup.setDescription('A collection of objects providing the configuration and information about the force bus mode feature.')
cc6kxbarFlowCtrlNotifCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 19)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarFlowCtrlNotifCtrlGroup = cc6kxbarFlowCtrlNotifCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlNotifCtrlGroup.setDescription('A collection of objects to control the notification generation for the system flow control feature.')
cc6kxbarFlowCtrlBusThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 20)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusFIFOThrMode"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusFIFOThrValue"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusFIFOTransTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarFlowCtrlBusThreshGroup = cc6kxbarFlowCtrlBusThreshGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusThreshGroup.setDescription('A collection of objects providing configuration information about the system bus flow control FIFO threshold.')
cc6kxbarFlowCtrlBusThrNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 21)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarFlowCtrlBusThrExcdNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarFlowCtrlBusThrNotifGroup = cc6kxbarFlowCtrlBusThrNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarFlowCtrlBusThrNotifGroup.setDescription('A collection of notifications for the system bus flow control FIFO threshold exceeding.')
cc6kxbarBusOnlyModeOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 22)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarBusOnlyModeOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarBusOnlyModeOperGroup = cc6kxbarBusOnlyModeOperGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarBusOnlyModeOperGroup.setDescription('A collection of objects providing the operational bus mode.')
cc6kxbarSysCapPfcOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 23)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapPfcOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarSysCapPfcOperModeGroup = cc6kxbarSysCapPfcOperModeGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapPfcOperModeGroup.setDescription('A collection of objects providing the system information of PFC operational mode.')
cc6kxbarSysCapSwitchResGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 24)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapSwitchResSeries"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSysCapSwitchResCefMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarSysCapSwitchResGroup = cc6kxbarSysCapSwitchResGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSysCapSwitchResGroup.setDescription('A collection of objects providing the capacity information of switching resources in the system.')
cc6kxbarChannelUtilGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 25)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsPeakInUtil"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsPeakTmInUtil"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsPeakOutUtil"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsPeakTmOutUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarChannelUtilGroup1 = cc6kxbarChannelUtilGroup1.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarChannelUtilGroup1.setDescription('A collection of objects providing the information about peak input and output utilization of a specific fabric channel on a specific module.')
cc6kxbarSwBusGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 26)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusUtilization"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusPeakUtilization"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarSwBusPeakTimeUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarSwBusGroup1 = cc6kxbarSwBusGroup1.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarSwBusGroup1.setDescription('A collection of objects providing the information about switching bus utilization.')
cc6kxbarErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 27)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorModuleCrc"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorModuleHbeat"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorModuleSync"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorModuleDDRSync"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorChannelSync"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorChannelBuffer"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrorChannelTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarErrorGroup = cc6kxbarErrorGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrorGroup.setDescription('A collection of objects providing error statistics for a specific fabric channel on a specific module.')
cc6kxbarErrRcvryThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 28)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryThreshLink"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryThreshPersLink"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarErrRcvryThresholdGroup = cc6kxbarErrRcvryThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryThresholdGroup.setDescription('A collection of objects providing the configuration of thresholds on fabric link errors for the fabric error recovery feature.')
cc6kxbarErrRcvrySwitchoverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 29)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvrySwitchoverEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarErrRcvrySwitchoverGroup = cc6kxbarErrRcvrySwitchoverGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvrySwitchoverGroup.setDescription('A collection of objects providing the configuration of fabric switchover on excessive fabric link errors for the fabric error recovery feature.')
cc6kxbarErrRcvryPersLinkResGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 30)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryPersLinkResync"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarErrRcvryPersLinkResGroup = cc6kxbarErrRcvryPersLinkResGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryPersLinkResGroup.setDescription('A collection of objects providing the configuration of channel resync on excessive persistent fabric link errors for the fabric error recovery feature.')
cc6kxbarErrRcvryChResyncGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 31)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryChResyncCount"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarErrRcvryChResyncInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarErrRcvryChResyncGroup = cc6kxbarErrRcvryChResyncGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarErrRcvryChResyncGroup.setDescription('A collection of objects providing the configuration for channel resync threshold for the fabric error recovery feature.')
cc6kxbarTMSwBusUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 32)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilEnable"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilInterval"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilThreshold"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilLogCount"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilLastLogTime"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilLogInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMSwBusUtilGroup = cc6kxbarTMSwBusUtilGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilGroup.setDescription('A collection of objects providing configuration information for traffic monitor feature on the switching bus.')
cc6kxbarTMSwBusUtilNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 33)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMSwBusUtilNotifControlGroup = cc6kxbarTMSwBusUtilNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilNotifControlGroup.setDescription('A collection of objects to control the traffic monitor notification generation on the switching bus.')
cc6kxbarTMSwBusUtilNotifObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 34)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMSwBusUtilNotifObjectGroup = cc6kxbarTMSwBusUtilNotifObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilNotifObjectGroup.setDescription('A collection of objects included in the traffic monitor notifications on the switching bus.')
cc6kxbarTMSwBusUtilNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 35)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilAboveNotif"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMSwBusUtilBelowNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMSwBusUtilNotifGroup = cc6kxbarTMSwBusUtilNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMSwBusUtilNotifGroup.setDescription('A collection of traffic monitor notifications on the switching bus.')
cc6kxbarTMChUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 36)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilEnable"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilInterval"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilThreshold"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilLogCount"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilLastLogTime"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilLogInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMChUtilGroup = cc6kxbarTMChUtilGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilGroup.setDescription('A collection of objects providing the configuration information for traffic monitor feature on fabric channels.')
cc6kxbarTMChUtilNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 37)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMChUtilNotifControlGroup = cc6kxbarTMChUtilNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilNotifControlGroup.setDescription('A collection of objects to control the traffic monitor notification generation on fabric channels.')
cc6kxbarTMChUtilNotifObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 38)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMChUtilNotifObjectGroup = cc6kxbarTMChUtilNotifObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilNotifObjectGroup.setDescription('A collection of objects included in the traffic monitor notifications on fabric channels.')
cc6kxbarTMChUtilNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 39)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilAboveNotif"), ("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarTMChUtilBelowNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarTMChUtilNotifGroup = cc6kxbarTMChUtilNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarTMChUtilNotifGroup.setDescription('A collection of traffic monitor notifications on fabric channels.')
cc6kxbarStatisticsLbusDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 217, 3, 2, 40)).setObjects(("CISCO-CAT6K-CROSSBAR-MIB", "cc6kxbarStatisticsLbusDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cc6kxbarStatisticsLbusDropGroup = cc6kxbarStatisticsLbusDropGroup.setStatus('current')
if mibBuilder.loadTexts: cc6kxbarStatisticsLbusDropGroup.setDescription('A collection of objects providing information for local bus drop packets statistics.')
mibBuilder.exportSymbols("CISCO-CAT6K-CROSSBAR-MIB", cc6kxbarTMChUtilLogInterval=cc6kxbarTMChUtilLogInterval, cc6kxbarIntBusCRCErrExcdCount=cc6kxbarIntBusCRCErrExcdCount, cc6kxbarStatisticsOutDropped=cc6kxbarStatisticsOutDropped, cc6kxbarTMChUtilTable=cc6kxbarTMChUtilTable, cc6kxbarStatisticsPeakInUtil=cc6kxbarStatisticsPeakInUtil, cc6kxbarModuleChannelEntry=cc6kxbarModuleChannelEntry, cc6kxbarChannelUtilGroup=cc6kxbarChannelUtilGroup, cc6kxbarFlowCtrlNotifCtrlGroup=cc6kxbarFlowCtrlNotifCtrlGroup, cc6kxbarErrRcvryChResyncCount=cc6kxbarErrRcvryChResyncCount, cc6kxbarTrafficMonitorSwBusObjects=cc6kxbarTrafficMonitorSwBusObjects, cc6kxbarMIBConformance=cc6kxbarMIBConformance, cc6kxbarMIBCompliance=cc6kxbarMIBCompliance, cc6kxbarTMSwBusUtilLogCount=cc6kxbarTMSwBusUtilLogCount, cc6kxbarSwBusPeakTimeUtil=cc6kxbarSwBusPeakTimeUtil, cc6kxbarChannelStatisticsGroupVer1=cc6kxbarChannelStatisticsGroupVer1, cc6kxbarBusOnlyModeOperGroup=cc6kxbarBusOnlyModeOperGroup, cc6kxbarModuleChannelModule=cc6kxbarModuleChannelModule, cc6kxbarErrorRecoveryObjects=cc6kxbarErrorRecoveryObjects, cc6kxbarFlowCtrlBusFIFOThrMode=cc6kxbarFlowCtrlBusFIFOThrMode, cc6kxbarTMChUtilDirection=cc6kxbarTMChUtilDirection, cc6kxbarSwBusGroup1=cc6kxbarSwBusGroup1, cc6kxbarFallbackGroup=cc6kxbarFallbackGroup, cc6kxbarTMChUtilNotifEnable=cc6kxbarTMChUtilNotifEnable, cc6kxbarSwBusUtilization=cc6kxbarSwBusUtilization, cc6kxbarErrRcvryThresholdGroup=cc6kxbarErrRcvryThresholdGroup, cc6kxbarFabricActiveSlot=cc6kxbarFabricActiveSlot, cc6kxbarBusOnlyModeOper=cc6kxbarBusOnlyModeOper, cc6kxbarMIBComplianceVer8=cc6kxbarMIBComplianceVer8, cc6kxbarSysCapSwitchResGroup=cc6kxbarSysCapSwitchResGroup, cc6kxbarStatisticsChannel=cc6kxbarStatisticsChannel, cc6kxbarForceBusMode=cc6kxbarForceBusMode, cc6kxbarTMChUtilNotifGroup=cc6kxbarTMChUtilNotifGroup, cc6kxbarIntBusNotifControlGroup=cc6kxbarIntBusNotifControlGroup, cc6kxbarTruncatedOperGroup=cc6kxbarTruncatedOperGroup, cc6kxbarMIBComplianceVer6=cc6kxbarMIBComplianceVer6, cc6kxbarStatisticsEntry=cc6kxbarStatisticsEntry, cc6kxbarMIBComplianceVer4=cc6kxbarMIBComplianceVer4, cc6kxbarErrorModuleDDRSync=cc6kxbarErrorModuleDDRSync, cc6kxbarErrRcvryChResyncGroup=cc6kxbarErrRcvryChResyncGroup, cc6kxbarModuleChannelFabStatus=cc6kxbarModuleChannelFabStatus, ciscoCat6kXbarMIBObjects=ciscoCat6kXbarMIBObjects, cc6kxbarSysCapPfcOperMode=cc6kxbarSysCapPfcOperMode, cc6kxbarMIBComplianceVer7=cc6kxbarMIBComplianceVer7, cc6kxbarDcefOnlyModeAllowedGroup=cc6kxbarDcefOnlyModeAllowedGroup, cc6kxbarTMSwBusUtilNotifEnable=cc6kxbarTMSwBusUtilNotifEnable, cc6kxbarSysCapSwitchResTable=cc6kxbarSysCapSwitchResTable, cc6kxbarTMChUtilGroup=cc6kxbarTMChUtilGroup, cc6kxbarSwBusFailureDuration=cc6kxbarSwBusFailureDuration, cc6kxbarSwBusStatusChangeNotif=cc6kxbarSwBusStatusChangeNotif, cc6kxbarFlowCtrlBusThrExcdNotif=cc6kxbarFlowCtrlBusThrExcdNotif, cc6kxbarErrorChannel=cc6kxbarErrorChannel, cc6kxbarSwBusGroup=cc6kxbarSwBusGroup, cc6kxbarTMChUtilInterval=cc6kxbarTMChUtilInterval, cc6kxbarTruncatedModeOper=cc6kxbarTruncatedModeOper, cc6kxbarTMChUtilAboveNotif=cc6kxbarTMChUtilAboveNotif, cc6kxbarMIBGroups=cc6kxbarMIBGroups, cc6kxbarMIBComplianceVer1=cc6kxbarMIBComplianceVer1, cc6kxbarTMSwBusUtilUtilization=cc6kxbarTMSwBusUtilUtilization, cc6kxbarStatisticsOutUtil=cc6kxbarStatisticsOutUtil, cc6kxbarTMChUtilEnable=cc6kxbarTMChUtilEnable, cc6kxbarFallbackMode=cc6kxbarFallbackMode, cc6kxbarMIBComplianceVer3=cc6kxbarMIBComplianceVer3, cc6kxbarStatisticsLbusDropGroup=cc6kxbarStatisticsLbusDropGroup, cc6kxbarSysCapSwitchResEntry=cc6kxbarSysCapSwitchResEntry, FabricChannelNumber=FabricChannelNumber, cc6kxbarChannelStatusGroup=cc6kxbarChannelStatusGroup, cc6kxbarLcdBannerIndex=cc6kxbarLcdBannerIndex, cc6kxbarTrafficMonitorObjects=cc6kxbarTrafficMonitorObjects, cc6kxbarErrorChannelSync=cc6kxbarErrorChannelSync, cc6kxbarTMChUtilBelowNotif=cc6kxbarTMChUtilBelowNotif, cc6kxbarErrorChannelTimeout=cc6kxbarErrorChannelTimeout, cc6kxbarStatus=cc6kxbarStatus, cc6kxbarStatisticsTable=cc6kxbarStatisticsTable, cc6kxbarIntBusCRCErrRcvrdNotif=cc6kxbarIntBusCRCErrRcvrdNotif, cc6kxbarIntBusCRCErrNotifGroup=cc6kxbarIntBusCRCErrNotifGroup, cc6kxbarMIBComplianceVer5=cc6kxbarMIBComplianceVer5, cc6kxbarErrorModule=cc6kxbarErrorModule, ciscoCat6kXbarMIBNotifs=ciscoCat6kXbarMIBNotifs, cc6kxbarTrafficMonitorChObjects=cc6kxbarTrafficMonitorChObjects, cc6kxbarTMSwBusUtilThreshold=cc6kxbarTMSwBusUtilThreshold, cc6kxbarErrRcvryThreshPersLink=cc6kxbarErrRcvryThreshPersLink, cc6kxbarModuleChannelModStatus=cc6kxbarModuleChannelModStatus, cc6kxbarFlowCtrlBusFIFOThrValue=cc6kxbarFlowCtrlBusFIFOThrValue, cc6kxbarTMChUtilThreshold=cc6kxbarTMChUtilThreshold, cc6kxbarForceBusModeGroup=cc6kxbarForceBusModeGroup, cc6kxbarModuleChannelSpeed=cc6kxbarModuleChannelSpeed, cc6kxbarErrRcvrySwitchoverEnable=cc6kxbarErrRcvrySwitchoverEnable, cc6kxbarConfiguration=cc6kxbarConfiguration, cc6kxbarModuleChannelTable=cc6kxbarModuleChannelTable, cc6kxbarLcdBannerBanner=cc6kxbarLcdBannerBanner, cc6kxbarFlowCtrlNotifEnable=cc6kxbarFlowCtrlNotifEnable, cc6kxbarSwBusNotifEnable=cc6kxbarSwBusNotifEnable, cc6kxbarErrorChannelBuffer=cc6kxbarErrorChannelBuffer, cc6kxbarTMSwBusUtilLogInterval=cc6kxbarTMSwBusUtilLogInterval, cc6kxbarSysCapSwitchResSeries=cc6kxbarSysCapSwitchResSeries, cc6kxbarModuleChannelChannel=cc6kxbarModuleChannelChannel, cc6kxbarChannelSpeedGroup=cc6kxbarChannelSpeedGroup, cc6kxbarModuleModeTable=cc6kxbarModuleModeTable, cc6kxbarModuleModeEntry=cc6kxbarModuleModeEntry, cc6kxbarSwBusPeakUtilization=cc6kxbarSwBusPeakUtilization, cc6kxbarStatisticsModule=cc6kxbarStatisticsModule, cc6kxbarSysCapSwitchResCefMode=cc6kxbarSysCapSwitchResCefMode, cc6kxbarStatisticsLbusDrops=cc6kxbarStatisticsLbusDrops, cc6kxbarStatisticsInErrors=cc6kxbarStatisticsInErrors, cc6kxbarTMSwBusUtilInterval=cc6kxbarTMSwBusUtilInterval, cc6kxbarTMSwBusUtilBelowNotif=cc6kxbarTMSwBusUtilBelowNotif, cc6kxbarSysCapPfcOperModeGroup=cc6kxbarSysCapPfcOperModeGroup, cc6kxbarIntBusObjects=cc6kxbarIntBusObjects, cc6kxbarTMChUtilChannel=cc6kxbarTMChUtilChannel, cc6kxbarLcdBannerTable=cc6kxbarLcdBannerTable, cc6kxbarTMChUtilUtilization=cc6kxbarTMChUtilUtilization, cc6kxbarTMChUtilEntry=cc6kxbarTMChUtilEntry, cc6kxbarErrorGroup=cc6kxbarErrorGroup, cc6kxbarIntBusCRCErrExcdStatus=cc6kxbarIntBusCRCErrExcdStatus, cc6kxbarErrRcvryChResyncInterval=cc6kxbarErrRcvryChResyncInterval, cc6kxbarErrRcvryThreshLink=cc6kxbarErrRcvryThreshLink, cc6kxbarTMSwBusUtilNotifGroup=cc6kxbarTMSwBusUtilNotifGroup, cc6kxbarTMChUtilLogCount=cc6kxbarTMChUtilLogCount, cc6kxbarStatisticsPeakOutUtil=cc6kxbarStatisticsPeakOutUtil, cc6kxbarTMChUtilNotifObjectGroup=cc6kxbarTMChUtilNotifObjectGroup, cc6kxbarStatisticsOutErrors=cc6kxbarStatisticsOutErrors, cc6kxbarFlowCtrlBusThreshGroup=cc6kxbarFlowCtrlBusThreshGroup, cc6kxbarTMSwBusUtilGroup=cc6kxbarTMSwBusUtilGroup, cc6kxbarMinFabricPresent=cc6kxbarMinFabricPresent, cc6kxbarLcdBannerMaxSize=cc6kxbarLcdBannerMaxSize, cc6kxbarIntBusCRCErrEntry=cc6kxbarIntBusCRCErrEntry, cc6kxbarErrorModuleCrc=cc6kxbarErrorModuleCrc, cc6kxbarIntBusNotifEnable=cc6kxbarIntBusNotifEnable, cc6kxbarMIBCompliances=cc6kxbarMIBCompliances, cc6kxbarModuleStatusGroupVer1=cc6kxbarModuleStatusGroupVer1, cc6kxbarTMSwBusUtilNotifObjectGroup=cc6kxbarTMSwBusUtilNotifObjectGroup, cc6kxbarTruncatedModeAllowed=cc6kxbarTruncatedModeAllowed, cc6kxbarTMChUtilNotifControlGroup=cc6kxbarTMChUtilNotifControlGroup, cc6kxbarLcdBannerEntry=cc6kxbarLcdBannerEntry, cc6kxbarModuleModeSwitchingMode=cc6kxbarModuleModeSwitchingMode, cc6kxbarMIBComplianceVer2=cc6kxbarMIBComplianceVer2, cc6kxbarStatisticsInUtil=cc6kxbarStatisticsInUtil, cc6kxbarChannelStatisticsGroup=cc6kxbarChannelStatisticsGroup, cc6kxbarSwBusNotifGroup=cc6kxbarSwBusNotifGroup, cc6kxbarIntBusCRCErrGroup=cc6kxbarIntBusCRCErrGroup, cc6kxbarSystemCapacityObjects=cc6kxbarSystemCapacityObjects, cc6kxbarErrorModuleHbeat=cc6kxbarErrorModuleHbeat, cc6kxbarStatisticsPeakTmInUtil=cc6kxbarStatisticsPeakTmInUtil, cc6kxbarFlowCtrlBusThrNotifGroup=cc6kxbarFlowCtrlBusThrNotifGroup, cc6kxbarStatistics=cc6kxbarStatistics, ciscoCat6kCrossbarMIB=ciscoCat6kCrossbarMIB, cc6kxbarErrorEntry=cc6kxbarErrorEntry, cc6kxbarTMSwBusUtilNotifControlGroup=cc6kxbarTMSwBusUtilNotifControlGroup, cc6kxbarModuleStatusGroup=cc6kxbarModuleStatusGroup, cc6kxbarModuleModeModule=cc6kxbarModuleModeModule, cc6kxbarDcefOnlyModeAllowed=cc6kxbarDcefOnlyModeAllowed, cc6kxbarLcdBannerGroup=cc6kxbarLcdBannerGroup, cc6kxbarSwBusSwitchingStatus=cc6kxbarSwBusSwitchingStatus, cc6kxbarTMSwBusUtilAboveNotif=cc6kxbarTMSwBusUtilAboveNotif, cc6kxbarErrRcvrySwitchoverGroup=cc6kxbarErrRcvrySwitchoverGroup, cc6kxbarStatisticsPeakTmOutUtil=cc6kxbarStatisticsPeakTmOutUtil, cc6kxbarIntBusCRCErrExcdNotif=cc6kxbarIntBusCRCErrExcdNotif, cc6kxbarSwBusObjects=cc6kxbarSwBusObjects, cc6kxbarBusOnlyModeAllowed=cc6kxbarBusOnlyModeAllowed, PYSNMP_MODULE_ID=ciscoCat6kCrossbarMIB, ChannelStatus=ChannelStatus, cc6kxbarChannelUtilGroup1=cc6kxbarChannelUtilGroup1, cc6kxbarErrRcvryPersLinkResync=cc6kxbarErrRcvryPersLinkResync, cc6kxbarTMChUtilModule=cc6kxbarTMChUtilModule, cc6kxbarTMSwBusUtilEnable=cc6kxbarTMSwBusUtilEnable, cc6kxbarErrorModuleSync=cc6kxbarErrorModuleSync, cc6kxbarErrRcvryPersLinkResGroup=cc6kxbarErrRcvryPersLinkResGroup, cc6kxbarFabricBackupSlot=cc6kxbarFabricBackupSlot, cc6kxbarTMChUtilLastLogTime=cc6kxbarTMChUtilLastLogTime, cc6kxbarFlowCtrlBusFIFOTransTime=cc6kxbarFlowCtrlBusFIFOTransTime, cc6kxbarFlowCtrlObjects=cc6kxbarFlowCtrlObjects, ModuleSlotNumber=ModuleSlotNumber, cc6kxbarErrorTable=cc6kxbarErrorTable, cc6kxbarTMSwBusUtilLastLogTime=cc6kxbarTMSwBusUtilLastLogTime, cc6kxbarBusOnlyAllowedGroup=cc6kxbarBusOnlyAllowedGroup, cc6kxbarIntBusCRCErrTable=cc6kxbarIntBusCRCErrTable)
