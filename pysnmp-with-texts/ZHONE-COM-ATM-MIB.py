#
# PySNMP MIB module ZHONE-COM-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:46:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
atmInterfaceTCAlarmState, atmVplCastType, atmVccAal5CpcsReceiveSduSize, atmVclConnKind, atmVclEntry, atmVclCastType, atmInterfaceDs3PlcpAlarmState, atmVplEntry, atmVccAalType, atmVclOperStatus, atmVclRowStatus, atmVplAdminStatus, atmVplRowStatus, atmVclLastChange, atmVclAdminStatus, atmVplConnKind, atmVccAal5CpcsTransmitSduSize, atmVplVpi, atmVplCrossConnectIdentifier, atmVclCrossConnectIdentifier, atmVcCrossConnectEntry, atmVccAal5EncapsType, atmVclReceiveTrafficDescrIndex, atmTrafficDescrParamEntry, atmVplLastChange, atmVplOperStatus, atmVplReceiveTrafficDescrIndex, atmVclVci, atmInterfaceTCEntry, atmVclTransmitTrafficDescrIndex, atmVclVpi, atmVplTransmitTrafficDescrIndex = mibBuilder.importSymbols("ATM-MIB", "atmInterfaceTCAlarmState", "atmVplCastType", "atmVccAal5CpcsReceiveSduSize", "atmVclConnKind", "atmVclEntry", "atmVclCastType", "atmInterfaceDs3PlcpAlarmState", "atmVplEntry", "atmVccAalType", "atmVclOperStatus", "atmVclRowStatus", "atmVplAdminStatus", "atmVplRowStatus", "atmVclLastChange", "atmVclAdminStatus", "atmVplConnKind", "atmVccAal5CpcsTransmitSduSize", "atmVplVpi", "atmVplCrossConnectIdentifier", "atmVclCrossConnectIdentifier", "atmVcCrossConnectEntry", "atmVccAal5EncapsType", "atmVclReceiveTrafficDescrIndex", "atmTrafficDescrParamEntry", "atmVplLastChange", "atmVplOperStatus", "atmVplReceiveTrafficDescrIndex", "atmVclVci", "atmInterfaceTCEntry", "atmVclTransmitTrafficDescrIndex", "atmVclVpi", "atmVplTransmitTrafficDescrIndex")
AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVcIdentifier")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, Gauge32, TimeTicks, Bits, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, ObjectIdentity, Counter64, Counter32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "Bits", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "Counter32", "Integer32", "IpAddress")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
zhoneAtm, zhoneModules, zhoneSlotIndex, zhoneShelfIndex = mibBuilder.importSymbols("Zhone", "zhoneAtm", "zhoneModules", "zhoneSlotIndex", "zhoneShelfIndex")
ZhoneAdminString, ZhoneRowStatus = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString", "ZhoneRowStatus")
comAtmExtension = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 25))
comAtmExtension.setRevisions(('2005-04-05 16:44', '2005-02-28 13:18', '2004-09-07 10:44', '2004-06-19 10:15', '2004-01-28 12:42', '2003-12-04 15:23', '2003-09-09 14:11', '2003-04-16 16:04', '2003-03-11 13:46', '2003-02-14 16:55', '2003-02-11 13:30', '2002-08-23 10:36', '2002-08-13 16:14', '2002-06-04 20:13', '2002-05-28 12:12', '2002-05-21 17:29', '2002-05-15 17:29', '2002-03-20 20:19', '2001-12-19 15:24', '2001-11-02 17:22', '2001-10-29 17:34', '2001-09-20 10:54', '2001-08-30 17:15', '2001-08-14 12:00', '2001-07-11 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comAtmExtension.setRevisionsDescriptions(('01.02.18 - Add zhoneAtmVclExtOamF4Ping and zhoneAtmVclExtOamF4PingStatus.', '01.02.17 - Add field zhoneAtmVpiMaxVciPerVp to zhoneAtmVplEntry.', '01.02.16 - Deprecate zhonePonExtTable. Move traffic-container-index to AtmVplExtensionTable.', '01.02.15 - change atm vcl param12 default. ', '01.02.14 - Expand atm vcl rates from 16 to 32.', '01.02.13 - Fixed zhoneAtmStatsTotalInitialCellsTx spelling Error.', 'V01.02.12 - Add traffic container index to Atm Vpl Entry augment.', 'V01.02.11 - Create an object-identifier to encapsulate the atmVclToMulticastMap objects.', 'V01.02.10 - Fix typo in markup for Atm_Vcl_To_Multicast_Map_Profile.', 'V01.02.09 - Add Vpi F4 Ping.', 'V01.02.08 - Add Vcl Multicast.', 'V01.02.07 - Changed zhoneAtmV2Traps back to be zhoneAtmTraps child 0 instead of child 1.', 'V01.02.06 - Added Vpi auto create notification objects.', 'V01.02.05 - Added zhoneAtmTrafficDescrParamExtCacDivider and zhoneAtmTrafficDescrParamExtUsageParameterControl. Also added RowStatus to zhoneAtmVpiTable.', 'V01.02.04 - added OAM F5 Ping Status Notification.', 'V01.02.03 - added manual OAM F5 ping support', 'V01.02.02 - added ATM VP Support', 'V01.02.01 - added ATM VCL Rates', 'V01.02.00 -Added Atm Extended Stats Table', 'V01.01.02 - updated description for zhoneAtmTrafficDescrParamExtTrnkVclRate', 'V01.01.01 -Added trap atmVclBandwidthUnavailable, removed unused imported parameters and updated description for zhoneAtmTrafficDescrParamExtTrnkVclRate', 'V01.01.00 -Added zhoneAtmTrafficDescrParamExtTable', 'V01.00.02 - Added traps atmDsx3PlcpAlarmStatusChange and atmInterfaceTCAlarmStateChange', 'V01.00.01 - Correct OBJECTS in the atmVclOperStatusChange trap.', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comAtmExtension.setLastUpdated('200504051200Z')
if mibBuilder.loadTexts: comAtmExtension.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comAtmExtension.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: comAtmExtension.setDescription('This is the Zhone module identifier for the Zhone ATM MIB extension module.')
zhoneAtmExtension = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2))
if mibBuilder.loadTexts: zhoneAtmExtension.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmExtension.setDescription('This is the Zhone extension MIB tree to the standard ATM defined by rfc2515.')
zhoneAtmVclExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1), )
if mibBuilder.loadTexts: zhoneAtmVclExtTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtTable.setDescription('Zhone extension table for the atmVclTable defined in rfc2515.')
zhoneAtmVclExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1), )
atmVclEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtEntry"))
zhoneAtmVclExtEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmVclExtEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtEntry.setDescription('An entry in the atmVclExtTable. atmVclExtEntry is an augmentation to the atmVclEntry defined in rfc2515.')
zhoneAtmVclExtFaultDetectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("oamF5Loopback", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVclExtFaultDetectionType.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtFaultDetectionType.setDescription('This is used to configure VCL fault detection. The valid values are: * disabled - Fault detection is disabled. This is the default. * oamF5Loopback - This option uses standard OAM fault management cells as defined in ITU.610 for fault detection. Automatic loopback diagnostic cells are sent to the IAD. When fault detection is enabled, atmVclOperStatusChange notification trap is used to indicate to the NMS station an VCL has gone down or has come back up. ')
zhoneAtmVclExtOamF5Ping = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("endToEnd", 2), ("segment", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVclExtOamF5Ping.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtOamF5Ping.setDescription('This is used to send a OAM F5 loopback cell for fault detection. The value will automatically revert to disabled after the set is complete. The valid values are: * disabled - OAM F5 loopback cell is not being sent. This is the default. * endToEnd - This option uses standard OAM fault management cells as defined in ITU.610 for fault detection. Setting this will send a OAM F5 end-to-end loopback cell to be sent * segment - This is not supported at this time ')
zhoneAtmVclExtOamF5PingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneAtmVclExtOamF5PingStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtOamF5PingStatus.setDescription('TRUE if ping was successfull and FALSE if failed')
zhoneAtmVclExtTrafficContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVclExtTrafficContainerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtTrafficContainerIndex.setDescription('Index number of a PON traffic container associated with a VCL definition.')
zhoneAtmVclExtOamF4Ping = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("endToEnd", 2), ("segment", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVclExtOamF4Ping.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtOamF4Ping.setDescription('This is used to send a OAM F4 loopback cell for fault detection. The value will automatically revert to disabled after the set is complete. The valid values are: * disabled - OAM F4 loopback cell is not being sent. This is the default. * endToEnd - This option uses standard OAM fault management cells as defined in ITU.610 for fault detection. Setting this will send a OAM F4 end-to-end loopback cell to be sent * segment - This is not supported at this time ')
zhoneAtmVclExtOamF4PingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 1, 1, 6), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneAtmVclExtOamF4PingStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtOamF4PingStatus.setDescription('TRUE if ping was successfull and FALSE if failed.')
zhoneAtmTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2))
if mibBuilder.loadTexts: zhoneAtmTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTraps.setDescription('All the Zhone ATM traps will be defined under this OID.')
zhoneAtmV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0))
if mibBuilder.loadTexts: zhoneAtmV2Traps.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmV2Traps.setDescription('This object identity adds a zero(0) for the next to last sub-identifier which should be used for new SNMPv2 Traps.')
atmVclOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 1)).setObjects(("ATM-MIB", "atmVclAdminStatus"), ("ATM-MIB", "atmVclOperStatus"), ("ATM-MIB", "atmVclLastChange"))
if mibBuilder.loadTexts: atmVclOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: atmVclOperStatusChange.setDescription('A notification is sent when the operational status of an ATM VCL changes. The VCL entity is identified by its ifIndex, VPI and VCI values in the trap instance OIDs.')
atmDsx3PlcpAlarmStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 2)).setObjects(("ATM-MIB", "atmInterfaceDs3PlcpAlarmState"))
if mibBuilder.loadTexts: atmDsx3PlcpAlarmStatusChange.setStatus('current')
if mibBuilder.loadTexts: atmDsx3PlcpAlarmStatusChange.setDescription('This trap indicates if there is an alarm present for the DS3 PLCP. ')
atmInterfaceTCAlarmStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 3)).setObjects(("ATM-MIB", "atmInterfaceTCAlarmState"))
if mibBuilder.loadTexts: atmInterfaceTCAlarmStateChange.setStatus('current')
if mibBuilder.loadTexts: atmInterfaceTCAlarmStateChange.setDescription('This trap indicates that there is an alarm present for the TC Sublayer. ')
atmVclBandwidthUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 4)).setObjects(("ATM-MIB", "atmVclReceiveTrafficDescrIndex"), ("ATM-MIB", "atmVclTransmitTrafficDescrIndex"))
if mibBuilder.loadTexts: atmVclBandwidthUnavailable.setStatus('current')
if mibBuilder.loadTexts: atmVclBandwidthUnavailable.setDescription('This trap indicates that guranteed bandwidth specified by zhoneAtmTrafficDescrParamExtTrnkVclRate in the traffic descriptor is not available in the system. This is sent when a VCL is activated with the traffic descriptor which specifies higher than available rate or a VCL is activated with the traffic descriptor which specifies the vcl-rate value which can cause available bandwidth to run out. In this trap, shelf/slot is sent as part of the common fields sent in all traps.')
atmVplOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 5)).setObjects(("ATM-MIB", "atmVplAdminStatus"), ("ATM-MIB", "atmVplOperStatus"), ("ATM-MIB", "atmVplLastChange"))
if mibBuilder.loadTexts: atmVplOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: atmVplOperStatusChange.setDescription('Description.')
atmOamF5PingStatus = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("ZHONE-COM-ATM-MIB", "atmVpi"), ("ZHONE-COM-ATM-MIB", "atmVci"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtOamF5PingStatus"))
if mibBuilder.loadTexts: atmOamF5PingStatus.setStatus('current')
if mibBuilder.loadTexts: atmOamF5PingStatus.setDescription('A notification is sent when the OAM F5 Ping succeeds or fails. The entity is identified by its ifIndex, VPI and VCI values in the trap instance OIDs. A status value of true indicates successful Ping, otherwise unsuccessful Ping.')
atmVpiAutoCreateComplete = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 7)).setObjects(("ZHONE-COM-ATM-MIB", "atmVpiAutoCreateDone"), ("ZHONE-COM-ATM-MIB", "atmVpiAutoCreateCount"))
if mibBuilder.loadTexts: atmVpiAutoCreateComplete.setStatus('current')
if mibBuilder.loadTexts: atmVpiAutoCreateComplete.setDescription('Notification indicating Vpi auto creation is complete.')
atmOamF4PingStatus = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("ZHONE-COM-ATM-MIB", "atmVpi"), ("ZHONE-COM-ATM-MIB", "atmVci"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVpiOamF4PingStatus"))
if mibBuilder.loadTexts: atmOamF4PingStatus.setStatus('current')
if mibBuilder.loadTexts: atmOamF4PingStatus.setDescription('A notification is sent when the OAM F4 Ping succeeds or fails. The entity is identified by its ifIndex, and VPI values in the trap instance OIDs. A status value of true indicates successful Ping, otherwise unsuccessful Ping.')
atmVclExtOamF4PingStatus = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 2, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("ZHONE-COM-ATM-MIB", "atmVpi"), ("ZHONE-COM-ATM-MIB", "atmVci"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtOamF4PingStatus"))
if mibBuilder.loadTexts: atmVclExtOamF4PingStatus.setStatus('current')
if mibBuilder.loadTexts: atmVclExtOamF4PingStatus.setDescription('A notification is sent when the VCL OAM F4 Ping succeeds or fails. The entity is identified by its ifIndex, vpi and vci values in the trap instance OIDs. zhoneAtmVclExtOamF4PingStatus value of true indicates successful Ping, otherwise unsuccessful Ping.')
zhoneAtmGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3))
if mibBuilder.loadTexts: zhoneAtmGroups.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmGroups.setDescription('Zhone ATM object groups and notification groups will be defined under this object identity.')
zhoneAtmVclExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 1)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtFaultDetectionType"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtOamF5Ping"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtOamF5PingStatus"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclExtTrafficContainerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmVclExtGroup = zhoneAtmVclExtGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclExtGroup.setDescription('A collection of objects contained in the zhoneAtmVclExtTable.')
zhoneAtmTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 2)).setObjects(("ZHONE-COM-ATM-MIB", "atmVclOperStatusChange"), ("ZHONE-COM-ATM-MIB", "atmDsx3PlcpAlarmStatusChange"), ("ZHONE-COM-ATM-MIB", "atmInterfaceTCAlarmStateChange"), ("ZHONE-COM-ATM-MIB", "atmVclBandwidthUnavailable"), ("ZHONE-COM-ATM-MIB", "atmVplOperStatusChange"), ("ZHONE-COM-ATM-MIB", "atmOamF5PingStatus"), ("ZHONE-COM-ATM-MIB", "atmVpiAutoCreateComplete"), ("ZHONE-COM-ATM-MIB", "atmOamF4PingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmTrapsGroup = zhoneAtmTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrapsGroup.setDescription('A collection of notification traps under the zhoneAtmV2Traps.')
zhoneAtmTrafficDescrParamExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 3)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmTrafficDescrParamExtTrnkVclRate"), ("ZHONE-COM-ATM-MIB", "zhoneAtmTrafficDescrParamExtCacDivider"), ("ZHONE-COM-ATM-MIB", "zhoneAtmTrafficDescrParamExtUsageParameterControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmTrafficDescrParamExtGroup = zhoneAtmTrafficDescrParamExtGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtGroup.setDescription('A collection of objects contained in the zhoneAtmTrafficDescrParamExtTable.')
zhoneAtmStatsExtTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 4)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalInitialCellsRx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalFabricCellsRx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalFinalCLP0CellsRx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalFinalCLP1CellsRx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalFabricCellsTx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalFinalCLP0CellsTx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalFinalCLP1CellsTx"), ("ZHONE-COM-ATM-MIB", "zhoneAtmStatsTotalInitialCellsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmStatsExtTableGroup = zhoneAtmStatsExtTableGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsExtTableGroup.setDescription('Description.')
zhoneAtmVclRateExtParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 5)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam1"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam3"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam4"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam5"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam6"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam7"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam8"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam9"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam10"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam11"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam12"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam13"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam14"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam15"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam16"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam1Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam2Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam3Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam4Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam5Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam6Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam7Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam8Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam9Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam10Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam11Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam12Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam13Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam14Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam15Grp2"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVclRateExtParam16Grp2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmVclRateExtParamGroup = zhoneAtmVclRateExtParamGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParamGroup.setDescription('Atm Vcl rate parameter values.')
zhoneAtmVplExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 6)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmVplExtFaultDetectionType"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVplExtTrafficContainerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmVplExtGroup = zhoneAtmVplExtGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVplExtGroup.setDescription('Description.')
zhoneAtmConnectionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 7)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmConnectionsAvailable"), ("ZHONE-COM-ATM-MIB", "zhoneAtmConnectionsAllocated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmConnectionStatsGroup = zhoneAtmConnectionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmConnectionStatsGroup.setDescription('Description.')
zhoneAtmVpiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 8)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmVpiMaxVci"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVpiSwitched"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVpiRowStatus"), ("ZHONE-COM-ATM-MIB", "atmVpi"), ("ZHONE-COM-ATM-MIB", "atmVci"), ("ZHONE-COM-ATM-MIB", "atmVpiAutoCreateDone"), ("ZHONE-COM-ATM-MIB", "atmVpiAutoCreateCount"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVpiOamF4Ping"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVpiOamF4PingStatus"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVpiMaxVciPerVp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmVpiGroup = zhoneAtmVpiGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiGroup.setDescription('Description.')
zhoneAtmPonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 9)).setObjects(("ZHONE-COM-ATM-MIB", "zhoneAtmVclPonTrafficContainerIndex"), ("ZHONE-COM-ATM-MIB", "zhoneAtmVplPonTrafficContainerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmPonGroup = zhoneAtmPonGroup.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmPonGroup.setDescription('Description.')
zhoneAtmVclMulticastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 3, 10)).setObjects(("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapIndexNext"), ("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapRoutingDomain"), ("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapMulticastAddress"), ("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapIfIndex"), ("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapVpi"), ("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapVci"), ("ZHONE-COM-ATM-MIB", "atmVclToMulticastMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAtmVclMulticastGroup = zhoneAtmVclMulticastGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclMulticastGroup.setDescription('Description.')
zhoneAtmTrafficDescrParamExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 4), )
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtTable.setDescription('Zhone extension table for the atmTrafficDescrParamTable defined in rfc2515.')
zhoneAtmTrafficDescrParamExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 4, 1), )
atmTrafficDescrParamEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmTrafficDescrParamExtEntry"))
zhoneAtmTrafficDescrParamExtEntry.setIndexNames(*atmTrafficDescrParamEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtEntry.setDescription('This is extension of AtmTrafficDescrParamEntry defined in rfc2515.')
zhoneAtmTrafficDescrParamExtTrnkVclRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("unused", 1), ("rate16K", 2), ("rate32K", 3), ("rate64K", 4), ("rate80K", 5), ("rate128K", 6), ("rate160K", 7), ("rate256K", 8), ("rate320K", 9), ("rate512K", 10), ("rate640K", 11), ("rate1552K", 12), ("rate2050K", 13), ("rate12M", 14), ("rate16M", 15), ("rate45M", 16), ("rate155M", 17), ("rate960K", 18), ("rate1280K", 19), ("rate1760K", 20), ("rate3M", 21), ("rate4M", 22), ("rate5M", 23), ("rate6M", 24), ("rate7M", 25), ("rate8M", 26), ("rate10M", 27), ("rate14M", 28), ("rate24M", 29), ("rate32M", 30), ("rate64M", 31), ("rate96M", 32), ("rate128M", 33))).clone('unused')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtTrnkVclRate.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtTrnkVclRate.setDescription('This field is used to describe the minimum guaranteed rate for a VCL which is bound to this traffic descriptor for BAN ATM Trunk Cards. It is applicable only for RTVBR service category. Unlike switched voice calls in the TDM world we cannot oversubscribe bandwidth because all of our voice calls must be connected at all times so that we can receive signaling to tell us that the phone when off hook. Instead of oversubscribing we suggest that the service provide under provision their voice calls. An example of this would be a normal good quality voice call over ATM requires about 80kb of bandwidth. To share the bandwidth resource over several customers the service provider would instead allocate (for example) rate16K for a single voice channel, this would allow 5 channels to share the bandwidth required to connect a good quality voice call. Any value less than rate80K could be used if the service provider wished to share bandwidth resources over more than one voice call. In order for this method to produce a good quality voice call enough bandwidth must be unallocated and used in a shared pool by all connections. When the buffering is not adequate for a good quality call the connection will not terminate, instead the call quality will suffer. Values greater than rate80K would be used by devices like a PBX. For all service categories other than RTVBR, unused is the only valid value.For RTVBR unused is not a valid value and one of the rates has to be specified. This parameter is used independently for transmit and receive traffic based on the traffic descriptor specified for transmit and receive in the VCL. Changing this parameter may cause a trap if newly utilized bandwidth for a card exceeds its available bandwidth. It may happen on multiple cards and therefore there can be multiple traps.')
zhoneAtmTrafficDescrParamExtCacDivider = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 4, 1, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtCacDivider.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtCacDivider.setDescription('This object allows users to oversubsribe. The rate subtracted from CAC is PCR or SCR divided by this object.')
zhoneAtmTrafficDescrParamExtUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtUsageParameterControl.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmTrafficDescrParamExtUsageParameterControl.setDescription("If set to 'false', this object disables polcing.")
zhoneAtmStatsExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5), )
if mibBuilder.loadTexts: zhoneAtmStatsExtTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsExtTable.setDescription('These statistics values are coming from fabric interface.')
zhoneAtmStatsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1), )
atmVclEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmStatsExtEntry"))
zhoneAtmStatsExtEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmStatsExtEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsExtEntry.setDescription('Definitions of Forward and Backward: Internal to ATM Switch Fabric ============================================================= |Ext|==>IngressFwd==>| |==>EgressFwd====>|Int| PortPhy<->|VC | |APC Switch Fabric| |VC |<->Bus/SAR/DSP | |<==EgressBack<==| |<==IngressBack<==| | Phy =============================================================')
zhoneAtmStatsTotalInitialCellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalInitialCellsRx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalInitialCellsRx.setDescription('Total Initial Cells Received. Total cells received across the ingress interface for a given VC, and not discarded by policing prior to thresholding (includes CPU insertions but excludes Atm switch fabric generated ingress OAM insertions).')
zhoneAtmStatsTotalFabricCellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalFabricCellsRx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalFabricCellsRx.setDescription('Total Cells Recevied at Fabric.Total cells received across the fabric interface for a given VC, including cells discarded due to parity errors.')
zhoneAtmStatsTotalFinalCLP0CellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP0CellsRx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP0CellsRx.setDescription('Total CLP0 Cells received by fabric. This field is setup to monitor egress total cells transmitted CLP0.')
zhoneAtmStatsTotalFinalCLP1CellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP1CellsRx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP1CellsRx.setDescription('Total CLP1 Cells received by fabric. This field is setup to monitor egress total cells transmitted CLP1.')
zhoneAtmStatsTotalInitialCellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalInitialCellsTx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalInitialCellsTx.setDescription('Initial Total Cells Transmitted. Total cells transmitted. across the ingress interface for a given VC, and not discarded by policing prior to thresholding (includes CPU insertions but excludes Atm switch fabric generated ingress OAM insertions).')
zhoneAtmStatsTotalFabricCellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalFabricCellsTx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalFabricCellsTx.setDescription('Total cells transmitted at fabric interace.Total cells transmitted across the fabric interface for a given VC, including cells discarded due to parity errors.')
zhoneAtmStatsTotalFinalCLP0CellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP0CellsTx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP0CellsTx.setDescription('Total CLP0 Cells Transmitted. This field is setup to monitor egress total cells transmitted CLP0.')
zhoneAtmStatsTotalFinalCLP1CellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP1CellsTx.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmStatsTotalFinalCLP1CellsTx.setDescription('Total CLP1 Cells Transmitted. This field is setup to monitor egress total cells transmitted CLP1.')
zhoneAtmVclRateExtParam = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6))
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam.setDescription('This is the Zhone extension MIB tree to the ATM VCL rates.')
zhoneAtmVclRateExtParam1 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 1), Integer32().clone(38)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam1.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam1.setDescription('This field is used to describe the first least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards. It is applicable only for RTVBR/NRTVBR or CBR service category. For RTVBR/NRTVBR service category, this value can be set in the rfc2515 td_param2 of the traffice descriptor table. For CBR service category, this value can be set in the td_param1 field. The maximum rates capacitiy is 16, any value which is not matched in any one of those 16 rates will be rejected. Unlike switched voice calls in the TDM world we cannot oversubscribe bandwidth because all of our voice calls must be connected at all times so that we can receive signaling to tell us that the phone when off hook. Instead of oversubscribing we suggest that the service provide under provision their voice calls. An example of this would be a normal good quality voice call over ATM requires about 189 CPS. To share the bandwidth resource over several customers the service provider would instead allocate (for example) 38 CPS for a single voice channel, this would allow 5 channels to share the bandwidth required to connect a good quality voice call. Any value less than 189 CPS could be used if the service provider wished to share bandwidth resources over more than one voice call. In order for this method to produce a good quality voice call enough bandwidth must be unallocated and used in a shared pool by all connections. When the buffering is not adequate for a good quality call the connection will not terminate, instead the call quality will suffer. Values greater than 189 CPS would be used by devices like a PBX. This parameter is used independently for transmit and receive traffic based on the traffic descriptor specified for transmit and receive in the VCL. ')
zhoneAtmVclRateExtParam2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 2), Integer32().clone(76)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam2.setDescription('This field is used to describe the second least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam3 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 3), Integer32().clone(151)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam3.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam3.setDescription('This field is used to describe the third least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam4 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 4), Integer32().clone(189)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam4.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam4.setDescription('This field is used to describe the fourth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam5 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 5), Integer32().clone(302)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam5.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam5.setDescription('This field is used to describe the fifth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam6 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 6), Integer32().clone(378)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam6.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam6.setDescription('This field is used to describe the sixth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam7 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 7), Integer32().clone(604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam7.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam7.setDescription('This field is used to describe the seventh least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam8 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 8), Integer32().clone(755)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam8.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam8.setDescription('This field is used to describe the eighth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam9 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 9), Integer32().clone(1208)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam9.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam9.setDescription('This field is used to describe the ninth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam10 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 10), Integer32().clone(1510)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam10.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam10.setDescription('This field is used to describe the tenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam11 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 11), Integer32().clone(3661)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam11.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam11.setDescription('This field is used to describe the eleventh least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam12 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 12), Integer32().clone(4825)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam12.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam12.setDescription('This field is used to describe the twelfth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam13 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 13), Integer32().clone(28302)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam13.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam13.setDescription('This field is used to describe the thirteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam14 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 14), Integer32().clone(37736)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam14.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam14.setDescription('This field is used to describe the fouthteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam15 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 15), Integer32().clone(106133)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam15.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam15.setDescription('This field is used to describe the fifteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam16 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 16), Integer32().clone(365567)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam16.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam16.setDescription('This field is used to describe the sixteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam1Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 17), Integer32().clone(2264)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam1Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam1Grp2.setDescription('This field is used to describe the first least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam2Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 18), Integer32().clone(3019)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam2Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam2Grp2.setDescription('This field is used to describe the second least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam3Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 19), Integer32().clone(4151)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam3Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam3Grp2.setDescription('This field is used to describe the third least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam4Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 20), Integer32().clone(7075)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam4Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam4Grp2.setDescription('This field is used to describe the fourth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam5Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 21), Integer32().clone(9434)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam5Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam5Grp2.setDescription('This field is used to describe the fifth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam6Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 22), Integer32().clone(11792)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam6Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam6Grp2.setDescription('This field is used to describe the sixth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam7Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 23), Integer32().clone(14151)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam7Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam7Grp2.setDescription('This field is used to describe the seventh least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam8Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 24), Integer32().clone(16509)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam8Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam8Grp2.setDescription('This field is used to describe the eighth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam9Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 25), Integer32().clone(18868)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam9Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam9Grp2.setDescription('This field is used to describe the ninth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam10Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 26), Integer32().clone(23585)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam10Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam10Grp2.setDescription('This field is used to describe the tenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam11Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 27), Integer32().clone(33019)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam11Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam11Grp2.setDescription('This field is used to describe the eleventh least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam12Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 28), Integer32().clone(56604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam12Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam12Grp2.setDescription('This field is used to describe the twelfth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam13Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 29), Integer32().clone(75472)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam13Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam13Grp2.setDescription('This field is used to describe the thirteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam14Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 30), Integer32().clone(150943)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam14Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam14Grp2.setDescription('This field is used to describe the fourteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam15Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 31), Integer32().clone(226415)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam15Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam15Grp2.setDescription('This field is used to describe the fifthteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVclRateExtParam16Grp2 = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 6, 32), Integer32().clone(301887)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam16Grp2.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVclRateExtParam16Grp2.setDescription('This field is used to describe the sixthteenth least field of total 16 minimum guaranteed rate which is configurable by user for a VCL which is bound to this traffic descriptor for BAN ATM Trunk or MALC uplink Cards.')
zhoneAtmVplExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 7), )
if mibBuilder.loadTexts: zhoneAtmVplExtTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVplExtTable.setDescription('Zhone extension table for the atmVplTable defined in rfc2515. ')
zhoneAtmVplExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 7, 1), )
atmVplEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmVplExtEntry"))
zhoneAtmVplExtEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmVplExtEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVplExtEntry.setDescription('NOT CURRENTLY IMPLEMENTED. An entry in the atmVplExtTable. atmVplExtEntry is an augmentation to the atmVplEntry defined in rfc2515.')
zhoneAtmVplExtFaultDetectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("oamF4Loopback", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVplExtFaultDetectionType.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVplExtFaultDetectionType.setDescription('NOT CURRENTLY IMPLEMENTED. This is used to configure VPL fault detection. The valid values are: * disabled - Fault detection is disabled. This is the default. * oamF4Loopback - This option uses standard OAM fault management cells as defined in ITU.610 for fault detection. Automatic loopback diagnostic cells are sent to the IAD. When fault detection is enabled, atmVplOperStatusChange notification trap is used to indicate to the NMS station that a VPL has gone down or has come back up. ')
zhoneAtmVplExtTrafficContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVplExtTrafficContainerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVplExtTrafficContainerIndex.setDescription('Index number of a PON traffic container associated with a VPL definition. NOTE: MULTIPLE VARBINDS ACROSS THE VPL TABLE AND THE VPL EXTENSI0N TABLE ARE NOT ALLOWED! It turns out that anyone trying to set just the traffic container index would inadvertantly try to create a Vpl with default settings. To set the traffic container field, the Vpl must be created first.')
zhoneAtmConnectionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 8), )
if mibBuilder.loadTexts: zhoneAtmConnectionStatsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmConnectionStatsTable.setDescription('Table which describes the allocated and available ATM connections on a Zhone device.')
zhoneAtmConnectionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 8, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: zhoneAtmConnectionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmConnectionStatsEntry.setDescription('An entry based on shelf/slot which describes the total allocated and available ATM connections for that shelf/slot.')
zhoneAtmConnectionsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmConnectionsAvailable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmConnectionsAvailable.setDescription('The total available ATM connections for a particular shelf/slot. This number is hardware dependent. Whenever a VPI is allocated for a particular shelf/slot, the number of connections allocated for that VPI is subtracted from the total available and is returned in this value.')
zhoneAtmConnectionsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmConnectionsAllocated.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmConnectionsAllocated.setDescription('The total allocated ATM connections for a particular shelf/slot. For a particular VPI, we calculate the number of connections allocated by the following rule: A VP Switched VPI has a Max VCI of 0 and uses 3 connections. A VC Switched VPI has a Max VCI of n (the number n is a power of 2 and is user selected) and uses n connections. The sum of all allocated connections for all VPIs on the selected shelf/slot is the number returned for this value.')
zhoneAtmVpiTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9), )
if mibBuilder.loadTexts: zhoneAtmVpiTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiTable.setDescription('Table which describes attributes associated to a particular VPI. Anytime you add to, delete from or modify any entry in this table, you must reboot the card in order for these changes to take effect. The reason for this is that the APC must be re-programmed and the only way to do this is by doing a reboot. In addition, you will not be allowed to modify, create or delete any atm-vcl entry which is on the same card as the VPI until after the card has been rebooted.')
zhoneAtmVpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: zhoneAtmVpiEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiEntry.setDescription('An entry based on ifIndex/vpi (which resolves to a particular shelf/slot/port/subport/type/vpi) which contains the maximum VCI value and the switch mode (either vp or vc switched) for a particular VPI.')
zhoneAtmVpiMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVpiMaxVci.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiMaxVci.setDescription('For the selected VPI, this value contains the maximum VCI. For vp switched VPIs, this value must be zero. For vc switched VPIs, this value must be a power of 2 with its maximum value being hardware dependent.')
zhoneAtmVpiSwitched = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vp", 1), ("vc", 2))).clone('vp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVpiSwitched.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiSwitched.setDescription('For the selected VPI, this value can be set to either vp switched or vc switched. If it is vp switched, then the max vci must be zero. If it is vc switched, the max vci value must be a power of 2 with its maximum value being hardware dependent.')
zhoneAtmVpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1, 3), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVpiRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiRowStatus.setDescription('Row Status only supports create-and-go and destroy actions. Returns active if row is in service.')
zhoneAtmVpiOamF4Ping = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("endToEnd", 2), ("segment", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVpiOamF4Ping.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiOamF4Ping.setDescription('This is used to send a OAM F4 loopback cell for fault detection. The value will automatically revert to disabled after the set is complete. The valid values are: * disabled - OAM F4 loopback cell is not being sent. This is the default. * endToEnd - This option uses standard OAM fault management cells as defined in ITU.610 for fault detection. Setting this will send a OAM F4 end-to-end loopback cell to be sent * segment - This is not supported at this time ')
zhoneAtmVpiOamF4PingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1, 5), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneAtmVpiOamF4PingStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiOamF4PingStatus.setDescription('TRUE if ping was successfull and FALSE if failed.')
zhoneAtmVpiMaxVciPerVp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneAtmVpiMaxVciPerVp.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVpiMaxVciPerVp.setDescription('If vp-switched, but VG connection is vc-switched, this specifies max number of vci on gateway.')
atmVpi = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 10), AtmVpIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmVpi.setStatus('current')
if mibBuilder.loadTexts: atmVpi.setDescription('VPI used for traps defined under atm traps')
atmVci = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 11), AtmVcIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmVci.setStatus('current')
if mibBuilder.loadTexts: atmVci.setDescription('VCI used for traps defined under atm traps')
atmVpiAutoCreateDone = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 12), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmVpiAutoCreateDone.setStatus('current')
if mibBuilder.loadTexts: atmVpiAutoCreateDone.setDescription('Indicates automatic Vpi generation complete.')
atmVpiAutoCreateCount = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmVpiAutoCreateCount.setStatus('current')
if mibBuilder.loadTexts: atmVpiAutoCreateCount.setDescription('This value is the count of the number of auto-created Vpis.')
atmVclToMulticastMap = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16))
atmVclToMulticastMapIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclToMulticastMapIndexNext.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapIndexNext.setDescription('This object contains an appropriate value to be used for atmMulticastAddressVclMapIndex when creating entries in the atmMulticastAddressVclMapTable. The value 0 indicates that no unassigned entries are available. To obtain the atmMulticastAddressVclMapIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
atmVclToMulticastMapTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2), )
if mibBuilder.loadTexts: atmVclToMulticastMapTable.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapTable.setDescription("The Multicast Address to Vcl Mapping table. Each entry in this table associates a multicast address representing a video stream with a Vcl. All of the entries in this table are assumed to be unique, not only in terms of index, but in terms of (index, multicast address) <-> (ifIndex, vpi, vci). Note that the Vcl type for this table should always be 'other', denoting cell relay pass-through. We are not terminating the IP stream on the MALC. Also note that the Vcls that this table refer to are the ones originating at the Video Head-End, coming into the MALC Uplink card.")
atmVclToMulticastMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1), ).setIndexNames((0, "ZHONE-COM-ATM-MIB", "atmVclToMulticastMapIndex"))
if mibBuilder.loadTexts: atmVclToMulticastMapEntry.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapEntry.setDescription("An entry in the Multicast Address to Vcl Mapping table. This entry is used to associate a multicast address with a Vcl. Step-wise Procedures to set up a Multicast Vcl Mapping profile Once the Vcl that carries the video stream is created, the following steps are taken to provision a Multicast Address to Vcl Mapping: (1) The manager obtains a unique atmMulticastAddressVclMapIndex by reading the atmMulticastAddressVclMapIndexNext object. (2) Next, the manager creates a row in the atmMulticastAddressVclMapTable by setting atmMulticastAddressVclMapRowStatus to createAndGo. The agent checks the sanity of the Vcl, domain index, and multicast address. The row creation fails if: - the specified Vcl does not exist, - the specified Vcl is not of the correct type for multicasting, - the routing domain index is outside of the supported range, - the multicast address is not of the correct format. (3) The manager promotes the row in the atmMulticastAddressVclMapTable when the 'set' completes.")
atmVclToMulticastMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: atmVclToMulticastMapIndex.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapIndex.setDescription('A unique value to identify this Multicast Address to Vcl mapping.')
atmVclToMulticastMapRoutingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclToMulticastMapRoutingDomain.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapRoutingDomain.setDescription('Routing domain of the Head-End video server.')
atmVclToMulticastMapMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclToMulticastMapMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapMulticastAddress.setDescription('Multicast IP address contained in the MPEG2 video stream.')
atmVclToMulticastMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclToMulticastMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapIfIndex.setDescription('The ifIndex value of the ATM interface for the Vcl carrying a video stream.')
atmVclToMulticastMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 5), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclToMulticastMapVpi.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapVpi.setDescription('The VPI value of the ATM interface for the Vcl carrying a video stream.')
atmVclToMulticastMapVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 6), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclToMulticastMapVci.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapVci.setDescription('The VCI value of the ATM interface for the Vcl carrying a video stream.')
atmVclToMulticastMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 16, 2, 1, 7), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclToMulticastMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmVclToMulticastMapRowStatus.setDescription("Row status of the multicast address to Vcl table entry. This object must be initially set to 'createAndGo'.")
zhoneAtmPonExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 17), )
if mibBuilder.loadTexts: zhoneAtmPonExtTable.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmPonExtTable.setDescription('This is the Zhone extension to the Atm Vcl Table (rfc2515.) It contains APON-related objects.')
zhoneAtmPonExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 17, 1), )
atmVclEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmPonExtEntry"))
zhoneAtmPonExtEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmPonExtEntry.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmPonExtEntry.setDescription('This is an entry in the Atm PON Extension table.')
zhoneAtmVclPonTrafficContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVclPonTrafficContainerIndex.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmVclPonTrafficContainerIndex.setDescription('This field is an index into the ATM PON Traffic Container table. It associated a Vcl with a Traffic Container, and is used to retrieve PON channel provisioning information.')
zhoneAtmVplPonExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 18), )
if mibBuilder.loadTexts: zhoneAtmVplPonExtTable.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmVplPonExtTable.setDescription('This is the Zhone extension to the Atm Vpl Table (rfc2515.) It contains APON-related objects.')
zhoneAtmVplPonExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 18, 1), )
atmVplEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmVplPonExtEntry"))
zhoneAtmVplPonExtEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmVplPonExtEntry.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmVplPonExtEntry.setDescription('This is an entry in the Atm PON Extension table.')
zhoneAtmVplPonTrafficContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVplPonTrafficContainerIndex.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneAtmVplPonTrafficContainerIndex.setDescription('This field is an index into the ATM PON Traffic Container table. It associated a Vpl with a Traffic Container, and is used to retrieve PON channel provisioning information.')
zhoneAtmInterfaceTcExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19), )
if mibBuilder.loadTexts: zhoneAtmInterfaceTcExtTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceTcExtTable.setDescription('This table contains ATM interface TC Sublayer parameters and state variables, one entry per ATM interface port.')
zhoneAtmInterfaceTcExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19, 1), )
atmInterfaceTCEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmInterfaceTcExtEntry"))
zhoneAtmInterfaceTcExtEntry.setIndexNames(*atmInterfaceTCEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmInterfaceTcExtEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceTcExtEntry.setDescription('This list contains TC Sublayer parameters and state variables at the ATM interface and is indexed by the ifIndex value of the ATM interface.')
zhoneAtmInterfaceNCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmInterfaceNCDEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceNCDEvents.setDescription('The number of times the Near-end No Cell Delineation (NCD) events occur. ')
zhoneAtmInterfaceHECEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmInterfaceHECEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceHECEvents.setDescription('The number of times Near-end Header Error Control (HEC) violations occur. ')
zhoneAtmInterfaceFeOCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmInterfaceFeOCDEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceFeOCDEvents.setDescription('The number of times Far-end Out of Cell Delineation (OCD) events occur. ')
zhoneAtmInterfaceFeNCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmInterfaceFeNCDEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceFeNCDEvents.setDescription('The number of times Far-end No Cell Delineation (NCD) events occur. ')
zhoneAtmInterfaceFeHECEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneAtmInterfaceFeHECEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmInterfaceFeHECEvents.setDescription('The number of times Far-end Header Error Control (HEC) violations occur. ')
zhoneAtmVcCrossConnectExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 20), )
if mibBuilder.loadTexts: zhoneAtmVcCrossConnectExtTable.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVcCrossConnectExtTable.setDescription('This Table contains Atm Vc Cross Connect Extensions to the atmVcCrossConnectEntry.')
zhoneAtmVcCrossConnectExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 20, 1), )
atmVcCrossConnectEntry.registerAugmentions(("ZHONE-COM-ATM-MIB", "zhoneAtmVcCrossConnectExtEntry"))
zhoneAtmVcCrossConnectExtEntry.setIndexNames(*atmVcCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneAtmVcCrossConnectExtEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVcCrossConnectExtEntry.setDescription('This list contains Atm Vc Cross Connect Extensions to the atmVcCrossConnectEntry.')
zhoneAtmVcCrossConnectExtHandleId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 2, 2, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneAtmVcCrossConnectExtHandleId.setStatus('current')
if mibBuilder.loadTexts: zhoneAtmVcCrossConnectExtHandleId.setDescription('An administratively-assigned name for the Atm Vc Cross Connect indicated by the INDEX value.')
mibBuilder.exportSymbols("ZHONE-COM-ATM-MIB", zhoneAtmVpiOamF4PingStatus=zhoneAtmVpiOamF4PingStatus, zhoneAtmInterfaceHECEvents=zhoneAtmInterfaceHECEvents, zhoneAtmVclRateExtParam6=zhoneAtmVclRateExtParam6, zhoneAtmVclRateExtParam5Grp2=zhoneAtmVclRateExtParam5Grp2, zhoneAtmGroups=zhoneAtmGroups, zhoneAtmTrafficDescrParamExtTable=zhoneAtmTrafficDescrParamExtTable, atmVpiAutoCreateComplete=atmVpiAutoCreateComplete, atmVclToMulticastMapVpi=atmVclToMulticastMapVpi, zhoneAtmVclRateExtParamGroup=zhoneAtmVclRateExtParamGroup, zhoneAtmVclRateExtParam4=zhoneAtmVclRateExtParam4, zhoneAtmVclRateExtParam7Grp2=zhoneAtmVclRateExtParam7Grp2, zhoneAtmTrafficDescrParamExtUsageParameterControl=zhoneAtmTrafficDescrParamExtUsageParameterControl, zhoneAtmInterfaceFeHECEvents=zhoneAtmInterfaceFeHECEvents, zhoneAtmInterfaceNCDEvents=zhoneAtmInterfaceNCDEvents, zhoneAtmVclRateExtParam15Grp2=zhoneAtmVclRateExtParam15Grp2, zhoneAtmConnectionStatsGroup=zhoneAtmConnectionStatsGroup, zhoneAtmVcCrossConnectExtEntry=zhoneAtmVcCrossConnectExtEntry, atmOamF4PingStatus=atmOamF4PingStatus, zhoneAtmPonExtEntry=zhoneAtmPonExtEntry, atmVpiAutoCreateDone=atmVpiAutoCreateDone, zhoneAtmInterfaceTcExtEntry=zhoneAtmInterfaceTcExtEntry, zhoneAtmInterfaceFeNCDEvents=zhoneAtmInterfaceFeNCDEvents, zhoneAtmVpiEntry=zhoneAtmVpiEntry, zhoneAtmTrafficDescrParamExtGroup=zhoneAtmTrafficDescrParamExtGroup, zhoneAtmConnectionStatsTable=zhoneAtmConnectionStatsTable, atmVclExtOamF4PingStatus=atmVclExtOamF4PingStatus, zhoneAtmStatsTotalInitialCellsTx=zhoneAtmStatsTotalInitialCellsTx, zhoneAtmTrafficDescrParamExtTrnkVclRate=zhoneAtmTrafficDescrParamExtTrnkVclRate, zhoneAtmStatsTotalFabricCellsTx=zhoneAtmStatsTotalFabricCellsTx, zhoneAtmVclMulticastGroup=zhoneAtmVclMulticastGroup, zhoneAtmVclRateExtParam1=zhoneAtmVclRateExtParam1, zhoneAtmVclExtGroup=zhoneAtmVclExtGroup, zhoneAtmStatsExtEntry=zhoneAtmStatsExtEntry, zhoneAtmVplExtEntry=zhoneAtmVplExtEntry, zhoneAtmVclRateExtParam9=zhoneAtmVclRateExtParam9, zhoneAtmVpiMaxVciPerVp=zhoneAtmVpiMaxVciPerVp, atmVclToMulticastMapRowStatus=atmVclToMulticastMapRowStatus, zhoneAtmVclRateExtParam16Grp2=zhoneAtmVclRateExtParam16Grp2, zhoneAtmVplExtTrafficContainerIndex=zhoneAtmVplExtTrafficContainerIndex, zhoneAtmVcCrossConnectExtTable=zhoneAtmVcCrossConnectExtTable, zhoneAtmVplExtFaultDetectionType=zhoneAtmVplExtFaultDetectionType, zhoneAtmStatsTotalFinalCLP0CellsTx=zhoneAtmStatsTotalFinalCLP0CellsTx, zhoneAtmVclRateExtParam14Grp2=zhoneAtmVclRateExtParam14Grp2, zhoneAtmVclExtEntry=zhoneAtmVclExtEntry, PYSNMP_MODULE_ID=comAtmExtension, atmVpi=atmVpi, zhoneAtmVclRateExtParam3Grp2=zhoneAtmVclRateExtParam3Grp2, atmVplOperStatusChange=atmVplOperStatusChange, zhoneAtmExtension=zhoneAtmExtension, zhoneAtmConnectionsAllocated=zhoneAtmConnectionsAllocated, zhoneAtmVclExtFaultDetectionType=zhoneAtmVclExtFaultDetectionType, zhoneAtmVclRateExtParam6Grp2=zhoneAtmVclRateExtParam6Grp2, zhoneAtmPonGroup=zhoneAtmPonGroup, zhoneAtmVplExtTable=zhoneAtmVplExtTable, atmVclToMulticastMapEntry=atmVclToMulticastMapEntry, zhoneAtmVclExtOamF4Ping=zhoneAtmVclExtOamF4Ping, atmInterfaceTCAlarmStateChange=atmInterfaceTCAlarmStateChange, zhoneAtmVplPonExtEntry=zhoneAtmVplPonExtEntry, atmOamF5PingStatus=atmOamF5PingStatus, atmVclToMulticastMapMulticastAddress=atmVclToMulticastMapMulticastAddress, zhoneAtmVclRateExtParam9Grp2=zhoneAtmVclRateExtParam9Grp2, zhoneAtmVclExtOamF4PingStatus=zhoneAtmVclExtOamF4PingStatus, zhoneAtmVclRateExtParam13Grp2=zhoneAtmVclRateExtParam13Grp2, zhoneAtmStatsExtTable=zhoneAtmStatsExtTable, zhoneAtmVclRateExtParam10Grp2=zhoneAtmVclRateExtParam10Grp2, atmVclToMulticastMapIndex=atmVclToMulticastMapIndex, atmVclToMulticastMapIndexNext=atmVclToMulticastMapIndexNext, zhoneAtmVplExtGroup=zhoneAtmVplExtGroup, zhoneAtmVclRateExtParam4Grp2=zhoneAtmVclRateExtParam4Grp2, zhoneAtmVclExtTrafficContainerIndex=zhoneAtmVclExtTrafficContainerIndex, zhoneAtmVclRateExtParam3=zhoneAtmVclRateExtParam3, zhoneAtmVclRateExtParam1Grp2=zhoneAtmVclRateExtParam1Grp2, zhoneAtmVpiTable=zhoneAtmVpiTable, zhoneAtmVclRateExtParam=zhoneAtmVclRateExtParam, zhoneAtmTraps=zhoneAtmTraps, zhoneAtmVcCrossConnectExtHandleId=zhoneAtmVcCrossConnectExtHandleId, zhoneAtmVclRateExtParam11=zhoneAtmVclRateExtParam11, zhoneAtmStatsTotalFinalCLP1CellsTx=zhoneAtmStatsTotalFinalCLP1CellsTx, zhoneAtmVclRateExtParam12Grp2=zhoneAtmVclRateExtParam12Grp2, zhoneAtmTrafficDescrParamExtCacDivider=zhoneAtmTrafficDescrParamExtCacDivider, zhoneAtmStatsTotalInitialCellsRx=zhoneAtmStatsTotalInitialCellsRx, zhoneAtmVclRateExtParam2Grp2=zhoneAtmVclRateExtParam2Grp2, zhoneAtmVclRateExtParam8Grp2=zhoneAtmVclRateExtParam8Grp2, zhoneAtmVpiRowStatus=zhoneAtmVpiRowStatus, atmVclToMulticastMap=atmVclToMulticastMap, zhoneAtmVclRateExtParam8=zhoneAtmVclRateExtParam8, zhoneAtmVplPonTrafficContainerIndex=zhoneAtmVplPonTrafficContainerIndex, comAtmExtension=comAtmExtension, zhoneAtmVclExtTable=zhoneAtmVclExtTable, zhoneAtmInterfaceTcExtTable=zhoneAtmInterfaceTcExtTable, zhoneAtmInterfaceFeOCDEvents=zhoneAtmInterfaceFeOCDEvents, atmVclOperStatusChange=atmVclOperStatusChange, zhoneAtmVclRateExtParam2=zhoneAtmVclRateExtParam2, zhoneAtmVclRateExtParam10=zhoneAtmVclRateExtParam10, zhoneAtmStatsTotalFinalCLP1CellsRx=zhoneAtmStatsTotalFinalCLP1CellsRx, atmVclToMulticastMapIfIndex=atmVclToMulticastMapIfIndex, zhoneAtmVclRateExtParam14=zhoneAtmVclRateExtParam14, zhoneAtmVclExtOamF5PingStatus=zhoneAtmVclExtOamF5PingStatus, atmVpiAutoCreateCount=atmVpiAutoCreateCount, zhoneAtmVclRateExtParam11Grp2=zhoneAtmVclRateExtParam11Grp2, zhoneAtmVplPonExtTable=zhoneAtmVplPonExtTable, zhoneAtmVpiGroup=zhoneAtmVpiGroup, zhoneAtmVclExtOamF5Ping=zhoneAtmVclExtOamF5Ping, atmVci=atmVci, zhoneAtmVclRateExtParam12=zhoneAtmVclRateExtParam12, zhoneAtmStatsTotalFinalCLP0CellsRx=zhoneAtmStatsTotalFinalCLP0CellsRx, zhoneAtmPonExtTable=zhoneAtmPonExtTable, zhoneAtmVclPonTrafficContainerIndex=zhoneAtmVclPonTrafficContainerIndex, zhoneAtmV2Traps=zhoneAtmV2Traps, zhoneAtmVpiSwitched=zhoneAtmVpiSwitched, atmDsx3PlcpAlarmStatusChange=atmDsx3PlcpAlarmStatusChange, zhoneAtmVpiMaxVci=zhoneAtmVpiMaxVci, zhoneAtmStatsExtTableGroup=zhoneAtmStatsExtTableGroup, zhoneAtmTrapsGroup=zhoneAtmTrapsGroup, zhoneAtmVclRateExtParam7=zhoneAtmVclRateExtParam7, zhoneAtmVclRateExtParam13=zhoneAtmVclRateExtParam13, zhoneAtmVclRateExtParam16=zhoneAtmVclRateExtParam16, zhoneAtmConnectionsAvailable=zhoneAtmConnectionsAvailable, atmVclToMulticastMapVci=atmVclToMulticastMapVci, atmVclToMulticastMapTable=atmVclToMulticastMapTable, zhoneAtmVclRateExtParam5=zhoneAtmVclRateExtParam5, zhoneAtmConnectionStatsEntry=zhoneAtmConnectionStatsEntry, zhoneAtmTrafficDescrParamExtEntry=zhoneAtmTrafficDescrParamExtEntry, zhoneAtmVclRateExtParam15=zhoneAtmVclRateExtParam15, atmVclToMulticastMapRoutingDomain=atmVclToMulticastMapRoutingDomain, atmVclBandwidthUnavailable=atmVclBandwidthUnavailable, zhoneAtmVpiOamF4Ping=zhoneAtmVpiOamF4Ping, zhoneAtmStatsTotalFabricCellsRx=zhoneAtmStatsTotalFabricCellsRx)
