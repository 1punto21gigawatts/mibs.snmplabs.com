#
# PySNMP MIB module CISCO-IPSLA-JITTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSLA-JITTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
IpSlaCodecType, = mibBuilder.importSymbols("CISCO-IPSLA-TC-MIB", "IpSlaCodecType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, MibIdentifier, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Counter64, ModuleIdentity, Gauge32, Bits, ObjectIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Counter64", "ModuleIdentity", "Gauge32", "Bits", "ObjectIdentity", "TimeTicks", "iso")
TruthValue, DisplayString, StorageType, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "StorageType", "TextualConvention", "RowStatus")
ciscoIpSlaJitterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 635))
ciscoIpSlaJitterMIB.setRevisions(('2007-07-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpSlaJitterMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpSlaJitterMIB.setLastUpdated('200707240000Z')
if mibBuilder.loadTexts: ciscoIpSlaJitterMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIpSlaJitterMIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553 NETS Email: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoIpSlaJitterMIB.setDescription('This MIB module defines templates for IP SLA operations of UDP Jitter and ICMP Jitter. The UDP Jitter operation is designed to measure the delay variance and packet loss in IP networks by generating synthetic UDP traffic. The ICMP Jitter operation provides capability to measure metrics such as RTT (Round Trip Time), jitter, packet loss, one-way latency by sending ICMP Timestamp stream to the destination devices.')
ciscoIpSlaJitterMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 635, 0))
ciscoIpSlaJitterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 635, 1))
cipslaUdpJitterTmplTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1), )
if mibBuilder.loadTexts: cipslaUdpJitterTmplTable.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplTable.setDescription('A table that contains UDP jitter template specific definitions.')
cipslaUdpJitterTmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1), ).setIndexNames((0, "CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplName"))
if mibBuilder.loadTexts: cipslaUdpJitterTmplEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplEntry.setDescription('A row entry representing an IPSLA UDP jitter template.')
cipslaUdpJitterTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cipslaUdpJitterTmplName.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplName.setDescription('A string which specifies the UDP Jitter template name.')
cipslaUdpJitterTmplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplDescription.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplDescription.setDescription('A string which provides description of UDP Jitter template.')
cipslaUdpJitterTmplControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplControlEnable.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplControlEnable.setDescription('If this object is enabled, then the IP SLA application will send control messages to a responder, residing on the target router to respond to the data request packets being sent by the source router.')
cipslaUdpJitterTmplTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplTimeOut.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplTimeOut.setDescription('Specifies the duration to wait for a IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
cipslaUdpJitterTmplVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplVerifyData.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplVerifyData.setDescription('When set to true, the resulting data in each IP SLA operation is compared with the expected data. This includes checking header information (if possible) and exact packet size.')
cipslaUdpJitterTmplCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 6), IpSlaCodecType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecType.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecType.setDescription('Specifies the codec type to be used with UDP jitter operation. If codec-type is configured the following parameters cannot be configured. cipslaUdpJitterReqDataSize cipslaUdpJitterInterval cipslaUdpJitterNumPkts')
cipslaUdpJitterTmplCodecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 60000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecInterval.setDescription('This field represents the inter-packet delay between packets and is in milliseconds. This object is applicable only to UDP jitter operation which uses codec type.')
cipslaUdpJitterTmplCodecPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecPayload.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecPayload.setDescription('This object represents the number of octets that needs to be placed into the Data portion of the message. This value is used only for UDP jitter operation which uses codec type.')
cipslaUdpJitterTmplCodecNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecNumPkts.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplCodecNumPkts.setDescription('This value represents the number of packets that need to be transmitted. This value is used only for UDP jitter operation which uses codec type.')
cipslaUdpJitterTmplInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 60000)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplInterval.setDescription('This value represents the inter-packet delay between packets and is in milliseconds.')
cipslaUdpJitterTmplNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(10)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplNumPkts.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplNumPkts.setDescription('This value represents the number of packets that need to be transmitted.')
cipslaUdpJitterTmplSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 12), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplSrcAddrType.setDescription('An enumerated value which specifies the IP address type of the source. It must be used along with the cipslaUdpJitterTmplSrcAddr object.')
cipslaUdpJitterTmplSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 13), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplSrcAddr.setDescription('This field specifies the IP address of the source.')
cipslaUdpJitterTmplSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 14), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplSrcPort.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplSrcPort.setDescription("This object represents the source's port number. If this object is not specified, the application will get a port allocated by the system.")
cipslaUdpJitterTmplPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("milliseconds", 1), ("microseconds", 2))).clone('milliseconds')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplPrecision.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplPrecision.setDescription('This object specifies the accuracy of jitter statistics in rttMonJitterStatsTable that needs to be calculated. milliseconds(1) - The accuracy of stats will be of milliseconds. microseconds(2) - The accuracy of stats will be in microseconds.')
cipslaUdpJitterTmplReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 65024)).clone(32)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplReqDataSize.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplReqDataSize.setDescription("This object represents the number of octets to be placed into the ARR Data portion of the request message, when using SNA protocols. For non-ARR protocols' IP SLA request/responses, this value represents the native payload size. REMEMBER: The ARR Header overhead is not included in this value.")
cipslaUdpJitterTmplPktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplPktPriority.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplPktPriority.setDescription('This object specifies the priority that will be assigned to operation packet. normal(1) - The packet is of normal priority. high(2) - The packet is of high priority.')
cipslaUdpJitterTmplTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: cipslaUdpJitterTmplTOS.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplTOS.setDescription('This object represents the type of service octet in an IP header.')
cipslaUdpJitterTmplVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplVrfName.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplVrfName.setDescription('This field is used to specify the VRF name in which the IP SLA operation will be used. For regular IP SLA operation this field should not be configured. The agent will use this field to identify the VPN routing table for this operation.')
cipslaUdpJitterTmplThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplThreshold.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplThreshold.setDescription('This object defines an administrative threshold limit. If the IP SLA operation time exceeds this limit, then one threshold crossing occurrence will be counted.')
cipslaUdpJitterTmplNTPTolAbs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplNTPTolAbs.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplNTPTolAbs.setDescription('This object specifies the total clock synchronization error on source and responder that is considered tolerable for oneway measurement when NTP is used as clock synchronization mechanism. The total clock synchronization error is sum of NTP offsets on source and responder. The value specified is microseconds. This value can be set only for UDP jitter operation with precision of microsecond.')
cipslaUdpJitterTmplNTPTolPct = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplNTPTolPct.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplNTPTolPct.setDescription('This object specifies the total clock synchronization error on source and responder that is considered tolerable for oneway measurement when NTP is used as clock synchronization mechanism. The total clock synchronization error is sum of NTP offsets on source and responder. The value is expressed as the percentage of actual oneway latency that is measured. This value can be set only for UDP jitter operation with precision of microsecond.')
cipslaUdpJitterTmplNTPTolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("absolute", 2))).clone('percent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplNTPTolType.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplNTPTolType.setDescription('This object specifies whether the value specified for oneway NTP sync tolerance is absolute value or percent value. percent(1) - The value for oneway NTP sync tolerance is absolute value. absolute(2) - The value for oneway NTP sync tolerance is percent value.')
cipslaUdpJitterTmplIcpifFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplIcpifFactor.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplIcpifFactor.setDescription('The advantage factor is dependant on the type of access and how the service is to be used. Conventional Wire-line 0 Mobility within Building 5 Mobility within geographic area 10 Access to hard-to-reach location 20 It is used when calculating the ICPIF value.')
cipslaUdpJitterTmplStatsHours = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(2)).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplStatsHours.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplStatsHours.setDescription('The maximum number of hours for which statistics are maintained. Specifically this is the number of hourly groups to keep before rolling over. The value of one is not advisable because the hourly group will close and immediately be deleted before the network management station will have the opportunity to retrieve the statistics. The value of zero will shut off data collection.')
cipslaUdpJitterTmplDistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplDistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplDistBuckets.setDescription('The maximum number of statistical distribution buckets to accumulate. Since this index does not rollover, only the first cipslaUdpJitterTmplDistBuckets will be kept. The last bucket will contain all entries from its distribution interval start point to infinity.')
cipslaUdpJitterTmplDistInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplDistInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplDistInterval.setDescription('The statistical distribution buckets interval. Distribution Bucket Example: cipslaUdpJitterTmplDistBuckets = 5 buckets cipslaUdpJitterTmplDistInterval = 10 milliseconds | Bucket 1 | Bucket 2 | Bucket 3 | Bucket 4 | Bucket 5 | | 0-9 ms | 10-19 ms | 20-29 ms | 30-39 ms | 40-Inf ms | Odd Example: cipslaUdpJitterTmplDistBuckets = 1 buckets cipslaUdpJitterTmplDistInterval = 10 milliseconds | Bucket 1 | | 0-Inf ms | Thus, this odd example shows that the value of cipslaUdpJitterTmplDistInterval does not apply when cipslaUdpJitterTmplDistBuckets is one.')
cipslaUdpJitterTmplStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 28), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplStorageType.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplStorageType.setDescription('The storage type of this conceptual row.')
cipslaUdpJitterTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 1, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpJitterTmplRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpJitterTmplRowStatus.setDescription('The status of the conceptual UDP Jitter template control row. When the status is active, all the read-create objects in that row can be modified.')
cipslaIcmpJitterTmplTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2), )
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTable.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTable.setDescription('A table that contains ICMP jitter template specific definitions.')
cipslaIcmpJitterTmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1), ).setIndexNames((0, "CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplName"))
if mibBuilder.loadTexts: cipslaIcmpJitterTmplEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplEntry.setDescription('A row entry representing an IP SLA ICMP Jitter template.')
cipslaIcmpJitterTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cipslaIcmpJitterTmplName.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplName.setDescription('A string which specifies the ICMP jitter template name.')
cipslaIcmpJitterTmplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplDescription.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplDescription.setDescription('A string which provides description of ICMP Jitter template.')
cipslaIcmpJitterTmplTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTimeOut.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTimeOut.setDescription('Specifies the duration to wait for a IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
cipslaIcmpJitterTmplVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplVerifyData.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplVerifyData.setDescription('When set to true, the resulting data in each IP SLA operation is compared with the expected data. This includes checking header information (if possible) and exact packet size.')
cipslaIcmpJitterTmplNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(10)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplNumPkts.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplNumPkts.setDescription('This value represents the number of packets that need to be transmitted.')
cipslaIcmpJitterTmplInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 60000)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplInterval.setDescription('This value represents the inter-packet delay between packets and is in milliseconds.')
cipslaIcmpJitterTmplSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplSrcAddrType.setDescription('An enumerated value which specifies the IP address type of the source. It must be used along with the cipslaIcmpJitterTmplSrcAddr object.')
cipslaIcmpJitterTmplSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplSrcAddr.setDescription('A string which specifies the IP address of the source.')
cipslaIcmpJitterTmplTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTOS.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplTOS.setDescription('This object represents the type of service octet in an IP header.')
cipslaIcmpJitterTmplVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplVrfName.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplVrfName.setDescription('This field is used to specify the VRF name in which the IP SLA operation will be used. For regular IP SLA operation this field should not be configured. The agent will use this field to identify the VPN routing Table for this operation.')
cipslaIcmpJitterTmplThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplThreshold.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplThreshold.setDescription('This object defines an administrative threshold limit. If the IP SLA operation time exceeds this limit, then one threshold crossing occurrence will be counted.')
cipslaIcmpJitterTmplStatsHours = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(2)).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplStatsHours.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplStatsHours.setDescription('The maximum number of hourss for which statistics are maintained. Specifically this is the number of hourly groups to keep before rolling over. The value of one is not advisable because the hourly group will close and immediately be deleted before the network management station will have the opportunity to retrieve the statistics. The value of zero will shut off data collection.')
cipslaIcmpJitterTmplDistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplDistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplDistBuckets.setDescription('The maximum number of statistical distribution buckets to accumulate. Since this index does not rollover, only the first cipslaIcmpJitterTmplDistBuckets will be kept. The last bucket will contain all entries from its distribution interval start point to infinity.')
cipslaIcmpJitterTmplDistInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplDistInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplDistInterval.setDescription('The statistical distribution buckets interval. Distribution Bucket Example: cipslaIcmpJitterTmplDistBuckets = 5 buckets cipslaIcmpJitterTmplDistInterval = 10 milliseconds | Bucket 1 | Bucket 2 | Bucket 3 | Bucket 4 | Bucket 5 | | 0-9 ms | 10-19 ms | 20-29 ms | 30-39 ms | 40-Inf ms | Odd Example: cipslaIcmpJitterTmplDistBuckets = 1 buckets cipslaIcmpJitterTmplDistInterval = 10 milliseconds | Bucket 1 | | 0-Inf ms | Thus, this odd example shows that the value of cipslaIcmpJitterTmplDistInterval does not apply when cipslaIcmpJitterTmplDistBuckets is one.')
cipslaIcmpJitterTmplStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplStorageType.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplStorageType.setDescription('The storage type of this conceptual row.')
cipslaIcmpJitterTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 635, 1, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpJitterTmplRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpJitterTmplRowStatus.setDescription('The status of the conceptual ICMP jitter template control row. When the status is active, all the read-create objects in that row can be modified.')
ciscoIpSlaJitterMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 635, 2))
ciscoIpSlaJitterMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 635, 2, 1))
ciscoIpSlaJitterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 635, 2, 2))
ciscoIpSlaJitterMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 635, 2, 1, 1)).setObjects(("CISCO-IPSLA-JITTER-MIB", "ciscoIpSlaUdpJitterTmplGroup"), ("CISCO-IPSLA-JITTER-MIB", "ciscoIpSlaIcmpJitterTmplGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaJitterMIBCompliance = ciscoIpSlaJitterMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaJitterMIBCompliance.setDescription('The compliance statement for IP SLA (1) UDP Jitter Template (2) ICMP Jitter Template')
ciscoIpSlaUdpJitterTmplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 635, 2, 2, 1)).setObjects(("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplDescription"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplControlEnable"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplTimeOut"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplVerifyData"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplCodecType"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplCodecInterval"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplCodecPayload"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplCodecNumPkts"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplInterval"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplNumPkts"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplSrcAddrType"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplSrcAddr"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplSrcPort"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplPrecision"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplReqDataSize"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplPktPriority"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplTOS"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplVrfName"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplThreshold"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplNTPTolAbs"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplNTPTolPct"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplNTPTolType"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplIcpifFactor"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplStatsHours"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplDistBuckets"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplDistInterval"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplStorageType"), ("CISCO-IPSLA-JITTER-MIB", "cipslaUdpJitterTmplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaUdpJitterTmplGroup = ciscoIpSlaUdpJitterTmplGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaUdpJitterTmplGroup.setDescription('A collection of objects related to UDP Jitter Template.')
ciscoIpSlaIcmpJitterTmplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 635, 2, 2, 2)).setObjects(("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplDescription"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplTimeOut"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplVerifyData"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplNumPkts"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplInterval"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplSrcAddrType"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplSrcAddr"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplTOS"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplVrfName"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplThreshold"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplStatsHours"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplDistBuckets"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplDistInterval"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplStorageType"), ("CISCO-IPSLA-JITTER-MIB", "cipslaIcmpJitterTmplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaIcmpJitterTmplGroup = ciscoIpSlaIcmpJitterTmplGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaIcmpJitterTmplGroup.setDescription('A collection of objects related to ICMP Jitter Template.')
mibBuilder.exportSymbols("CISCO-IPSLA-JITTER-MIB", cipslaUdpJitterTmplDescription=cipslaUdpJitterTmplDescription, cipslaUdpJitterTmplVerifyData=cipslaUdpJitterTmplVerifyData, cipslaIcmpJitterTmplSrcAddrType=cipslaIcmpJitterTmplSrcAddrType, ciscoIpSlaJitterMIBCompliance=ciscoIpSlaJitterMIBCompliance, cipslaUdpJitterTmplNTPTolType=cipslaUdpJitterTmplNTPTolType, cipslaUdpJitterTmplThreshold=cipslaUdpJitterTmplThreshold, ciscoIpSlaUdpJitterTmplGroup=ciscoIpSlaUdpJitterTmplGroup, ciscoIpSlaIcmpJitterTmplGroup=ciscoIpSlaIcmpJitterTmplGroup, ciscoIpSlaJitterMIBObjects=ciscoIpSlaJitterMIBObjects, cipslaUdpJitterTmplTOS=cipslaUdpJitterTmplTOS, cipslaUdpJitterTmplVrfName=cipslaUdpJitterTmplVrfName, cipslaIcmpJitterTmplInterval=cipslaIcmpJitterTmplInterval, PYSNMP_MODULE_ID=ciscoIpSlaJitterMIB, cipslaIcmpJitterTmplStatsHours=cipslaIcmpJitterTmplStatsHours, cipslaIcmpJitterTmplStorageType=cipslaIcmpJitterTmplStorageType, ciscoIpSlaJitterMIBCompliances=ciscoIpSlaJitterMIBCompliances, cipslaUdpJitterTmplCodecType=cipslaUdpJitterTmplCodecType, cipslaIcmpJitterTmplEntry=cipslaIcmpJitterTmplEntry, cipslaIcmpJitterTmplTimeOut=cipslaIcmpJitterTmplTimeOut, cipslaUdpJitterTmplCodecInterval=cipslaUdpJitterTmplCodecInterval, cipslaUdpJitterTmplRowStatus=cipslaUdpJitterTmplRowStatus, cipslaUdpJitterTmplEntry=cipslaUdpJitterTmplEntry, cipslaUdpJitterTmplInterval=cipslaUdpJitterTmplInterval, cipslaUdpJitterTmplStatsHours=cipslaUdpJitterTmplStatsHours, cipslaUdpJitterTmplDistInterval=cipslaUdpJitterTmplDistInterval, cipslaUdpJitterTmplSrcAddrType=cipslaUdpJitterTmplSrcAddrType, cipslaUdpJitterTmplPktPriority=cipslaUdpJitterTmplPktPriority, cipslaUdpJitterTmplCodecPayload=cipslaUdpJitterTmplCodecPayload, cipslaUdpJitterTmplName=cipslaUdpJitterTmplName, cipslaIcmpJitterTmplTable=cipslaIcmpJitterTmplTable, cipslaUdpJitterTmplPrecision=cipslaUdpJitterTmplPrecision, cipslaUdpJitterTmplCodecNumPkts=cipslaUdpJitterTmplCodecNumPkts, cipslaUdpJitterTmplIcpifFactor=cipslaUdpJitterTmplIcpifFactor, cipslaIcmpJitterTmplNumPkts=cipslaIcmpJitterTmplNumPkts, cipslaIcmpJitterTmplSrcAddr=cipslaIcmpJitterTmplSrcAddr, cipslaUdpJitterTmplControlEnable=cipslaUdpJitterTmplControlEnable, cipslaIcmpJitterTmplDistInterval=cipslaIcmpJitterTmplDistInterval, cipslaUdpJitterTmplTimeOut=cipslaUdpJitterTmplTimeOut, cipslaIcmpJitterTmplRowStatus=cipslaIcmpJitterTmplRowStatus, cipslaUdpJitterTmplSrcPort=cipslaUdpJitterTmplSrcPort, ciscoIpSlaJitterMIBNotifs=ciscoIpSlaJitterMIBNotifs, ciscoIpSlaJitterMIBConform=ciscoIpSlaJitterMIBConform, ciscoIpSlaJitterMIB=ciscoIpSlaJitterMIB, cipslaUdpJitterTmplNumPkts=cipslaUdpJitterTmplNumPkts, ciscoIpSlaJitterMIBGroups=ciscoIpSlaJitterMIBGroups, cipslaUdpJitterTmplDistBuckets=cipslaUdpJitterTmplDistBuckets, cipslaIcmpJitterTmplDescription=cipslaIcmpJitterTmplDescription, cipslaIcmpJitterTmplTOS=cipslaIcmpJitterTmplTOS, cipslaIcmpJitterTmplVrfName=cipslaIcmpJitterTmplVrfName, cipslaIcmpJitterTmplDistBuckets=cipslaIcmpJitterTmplDistBuckets, cipslaUdpJitterTmplTable=cipslaUdpJitterTmplTable, cipslaUdpJitterTmplStorageType=cipslaUdpJitterTmplStorageType, cipslaIcmpJitterTmplVerifyData=cipslaIcmpJitterTmplVerifyData, cipslaIcmpJitterTmplName=cipslaIcmpJitterTmplName, cipslaUdpJitterTmplNTPTolAbs=cipslaUdpJitterTmplNTPTolAbs, cipslaUdpJitterTmplSrcAddr=cipslaUdpJitterTmplSrcAddr, cipslaUdpJitterTmplNTPTolPct=cipslaUdpJitterTmplNTPTolPct, cipslaUdpJitterTmplReqDataSize=cipslaUdpJitterTmplReqDataSize, cipslaIcmpJitterTmplThreshold=cipslaIcmpJitterTmplThreshold)
