#
# PySNMP MIB module ZHONE-COM-IP-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Gauge32, Counter64, NotificationType, TimeTicks, ModuleIdentity, MibIdentifier, ObjectIdentity, Unsigned32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Gauge32", "Counter64", "NotificationType", "TimeTicks", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
rdEntry, = mibBuilder.importSymbols("ZHONE-COM-IP-RD-MIB", "rdEntry")
zhoneIp, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneIp", "zhoneModules")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
comIpIp = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 54))
comIpIp.setRevisions(('2000-11-02 17:30', '2000-09-11 16:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comIpIp.setRevisionsDescriptions(('V01.00.01 - Update markup language', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comIpIp.setLastUpdated('200009111700Z')
if mibBuilder.loadTexts: comIpIp.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comIpIp.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com ')
if mibBuilder.loadTexts: comIpIp.setDescription('Zhone IP MIB Module. IP Software Minneapolis, MN')
ip = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4))
if mibBuilder.loadTexts: ip.setStatus('current')
if mibBuilder.loadTexts: ip.setDescription('IP objects based on RFC 2011. The ipAddrTable has been removed as that information is now reflected in the ipInterfaceTable.')
zhoneIpTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2), )
if mibBuilder.loadTexts: zhoneIpTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpTable.setDescription('Zhone IP Table.')
zhoneIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1), )
rdEntry.registerAugmentions(("ZHONE-COM-IP-IP-MIB", "zhoneIpEntry"))
zhoneIpEntry.setIndexNames(*rdEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneIpEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpEntry.setDescription('Zhone IP Entry. This table augments the Routing Domain Table defined in comIpRD.mib. A row will be added to this table whenever a domain is added to the Routing Domain Table.')
zhIpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notForwarding", 2))).clone('forwarding')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhIpForwarding.setReference('See RFC2011: ip.ipForwarding')
if mibBuilder.loadTexts: zhIpForwarding.setStatus('current')
if mibBuilder.loadTexts: zhIpForwarding.setDescription('The indication of whether this entity is acting as an IP router in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP routers forward datagrams. IP hosts do not (except those source-routed via the host).')
zhIpDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhIpDefaultTTL.setReference('See RFC2011: ip.ipDefaultTTL')
if mibBuilder.loadTexts: zhIpDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: zhIpDefaultTTL.setDescription('The default value inserted into the Time-To-Live field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.')
zhIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpInReceives.setReference('See RFC2011: ip.ipInReceives')
if mibBuilder.loadTexts: zhIpInReceives.setStatus('current')
if mibBuilder.loadTexts: zhIpInReceives.setDescription('The total number of input datagrams received from interfaces, including those received in error.')
zhIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpInHdrErrors.setReference('See RFC2011: ip.ipInHdrErrors')
if mibBuilder.loadTexts: zhIpInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: zhIpInHdrErrors.setDescription('The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.')
zhIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpInAddrErrors.setReference('See RFC2011: ip.ipInAddrErrors')
if mibBuilder.loadTexts: zhIpInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: zhIpInAddrErrors.setDescription("The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., 0.0.0.0) and addresses of unsupported Classes (e.g., Class E). For entities which are not IP routers and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.")
zhIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpForwDatagrams.setReference('See RFC2011: ip.ipForwDatagrams')
if mibBuilder.loadTexts: zhIpForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: zhIpForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IP routers, this counter will include only those packets which were Source-Routed via this entity, and the Source-Route option processing was successful.')
zhIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpInUnknownProtos.setReference('See RFC2011: ip.ipInUnknownProtos')
if mibBuilder.loadTexts: zhIpInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: zhIpInUnknownProtos.setDescription('The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.')
zhIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpInDiscards.setReference('See RFC2011: ip.ipInDiscards')
if mibBuilder.loadTexts: zhIpInDiscards.setStatus('current')
if mibBuilder.loadTexts: zhIpInDiscards.setDescription('The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
zhIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpInDelivers.setReference('See RFC2011: ip.ipInDelivers')
if mibBuilder.loadTexts: zhIpInDelivers.setStatus('current')
if mibBuilder.loadTexts: zhIpInDelivers.setDescription('The total number of input datagrams successfully delivered to IP user-protocols (including ICMP).')
zhIpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpOutRequests.setReference('See RFC2011: ip.ipOutRequests')
if mibBuilder.loadTexts: zhIpOutRequests.setStatus('current')
if mibBuilder.loadTexts: zhIpOutRequests.setDescription('The total number of IP datagrams which local IP user- protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in ipForwDatagrams.')
zhIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpOutDiscards.setReference('See RFC2011: ip.ipOutDiscards')
if mibBuilder.loadTexts: zhIpOutDiscards.setStatus('current')
if mibBuilder.loadTexts: zhIpOutDiscards.setDescription('The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.')
zhIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpOutNoRoutes.setReference('See RFC2011: ip.ipOutNoRoutes')
if mibBuilder.loadTexts: zhIpOutNoRoutes.setStatus('current')
if mibBuilder.loadTexts: zhIpOutNoRoutes.setDescription("The number of IP datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ipForwDatagrams which meet this `no-route' criterion. Note that this includes any datagrams which a host cannot route because all of its default routers are down.")
zhIpReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpReasmTimeout.setReference('See RFC2011: ip.ipReasmTimeout')
if mibBuilder.loadTexts: zhIpReasmTimeout.setStatus('current')
if mibBuilder.loadTexts: zhIpReasmTimeout.setDescription('The maximum number of seconds which received fragments are held while they are awaiting reassembly at this entity.')
zhIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpReasmReqds.setReference('See RFC2011: ip.ipReasmReqds')
if mibBuilder.loadTexts: zhIpReasmReqds.setStatus('current')
if mibBuilder.loadTexts: zhIpReasmReqds.setDescription('The number of IP fragments received which needed to be reassembled at this entity.')
zhIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpReasmOKs.setReference('See RFC2011: ip.ipReasmOKs')
if mibBuilder.loadTexts: zhIpReasmOKs.setStatus('current')
if mibBuilder.loadTexts: zhIpReasmOKs.setDescription('The number of IP datagrams successfully re-assembled.')
zhIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpReasmFails.setReference('See RFC2011: ip.ipReasmFails')
if mibBuilder.loadTexts: zhIpReasmFails.setStatus('current')
if mibBuilder.loadTexts: zhIpReasmFails.setDescription('The number of failures detected by the IP re-assembly algorithm (for whatever reason: timed out, errors, etc). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received.')
zhIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpFragOKs.setReference('See RFC2011: ip.ipFragOKs')
if mibBuilder.loadTexts: zhIpFragOKs.setStatus('current')
if mibBuilder.loadTexts: zhIpFragOKs.setDescription('The number of IP datagrams that have been successfully fragmented at this entity.')
zhIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpFragFails.setReference('See RFC2011: ip.ipFragFails')
if mibBuilder.loadTexts: zhIpFragFails.setStatus('current')
if mibBuilder.loadTexts: zhIpFragFails.setDescription("The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their Don't Fragment flag was set.")
zhIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpFragCreates.setReference('See RFC2011: ip.ipFragCreates')
if mibBuilder.loadTexts: zhIpFragCreates.setStatus('current')
if mibBuilder.loadTexts: zhIpFragCreates.setDescription('The number of IP datagram fragments that have been generated as a result of fragmentation at this entity.')
zhIpRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIpRoutingDiscards.setReference('See RFC2011: ip.ipRoutingDiscards')
if mibBuilder.loadTexts: zhIpRoutingDiscards.setStatus('current')
if mibBuilder.loadTexts: zhIpRoutingDiscards.setDescription('The number of routing entries which were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free-up buffer space for other routing entries.')
zhoneIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4), )
if mibBuilder.loadTexts: zhoneIpNetToMediaTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpNetToMediaTable.setDescription('The IP Address Translation table used for mapping from IP addresses to physical addresses.')
zhoneIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4, 1), ).setIndexNames((0, "ZHONE-COM-IP-IP-MIB", "zhIpNetToMediaIfIndex"), (0, "ZHONE-COM-IP-IP-MIB", "zhIpNetToMediaNetAddress"))
if mibBuilder.loadTexts: zhoneIpNetToMediaEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpNetToMediaEntry.setDescription("Each entry contains one IpAddress to `physical' address equivalence. An IpAddress is unique to the routing domain. An entry may be added to or removed from the table using the zhIpNetToMediaRowStatus object. The columnar objects required to create the row are zhIpNetToMediaIpIfIndex, zhIpNetToMediaNetAddress, zhIpNetToMediaPhysAddress, and zhIpNetToMediaType.")
zhIpNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhIpNetToMediaIfIndex.setReference('See RFC2011: ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaIfIndex')
if mibBuilder.loadTexts: zhIpNetToMediaIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhIpNetToMediaIfIndex.setDescription("The IP interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in MIB-II (rfc2233).")
zhIpNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: zhIpNetToMediaNetAddress.setReference('See RFC2011: ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaNetAddress')
if mibBuilder.loadTexts: zhIpNetToMediaNetAddress.setStatus('current')
if mibBuilder.loadTexts: zhIpNetToMediaNetAddress.setDescription("The IpAddress corresponding to the media-dependent `physical' address.")
zhIpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhIpNetToMediaPhysAddress.setReference('See RFC2011: ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaPhysAddress')
if mibBuilder.loadTexts: zhIpNetToMediaPhysAddress.setStatus('current')
if mibBuilder.loadTexts: zhIpNetToMediaPhysAddress.setDescription("The media-dependent `physical' address.")
zhIpNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhIpNetToMediaType.setReference('See RFC2011: ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaType')
if mibBuilder.loadTexts: zhIpNetToMediaType.setStatus('current')
if mibBuilder.loadTexts: zhIpNetToMediaType.setDescription('The type of mapping. other(1) -- cannot be determined dynamic(3) -- mapping is supplied by the ARP server. static(4) -- mapping is configured by the user. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipNetToMediaTable. That is, it effectively disassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipNetToMediaType object.')
zhIpNetToMediaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 4, 4, 1, 5), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhIpNetToMediaRowStatus.setReference('See ZHONE-TC-MIB for definition of ZhoneRowStatus.')
if mibBuilder.loadTexts: zhIpNetToMediaRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhIpNetToMediaRowStatus.setDescription('This is required to be able to add/remove entries to/from the table.')
mibBuilder.exportSymbols("ZHONE-COM-IP-IP-MIB", zhIpReasmReqds=zhIpReasmReqds, zhIpInAddrErrors=zhIpInAddrErrors, zhIpOutNoRoutes=zhIpOutNoRoutes, zhIpNetToMediaNetAddress=zhIpNetToMediaNetAddress, ip=ip, zhIpInDiscards=zhIpInDiscards, zhIpNetToMediaIfIndex=zhIpNetToMediaIfIndex, zhIpNetToMediaType=zhIpNetToMediaType, zhIpNetToMediaRowStatus=zhIpNetToMediaRowStatus, zhoneIpNetToMediaTable=zhoneIpNetToMediaTable, zhIpReasmOKs=zhIpReasmOKs, zhIpInReceives=zhIpInReceives, zhIpInUnknownProtos=zhIpInUnknownProtos, zhIpOutRequests=zhIpOutRequests, zhIpForwDatagrams=zhIpForwDatagrams, zhoneIpTable=zhoneIpTable, zhIpFragCreates=zhIpFragCreates, zhoneIpNetToMediaEntry=zhoneIpNetToMediaEntry, zhIpReasmTimeout=zhIpReasmTimeout, zhIpRoutingDiscards=zhIpRoutingDiscards, zhIpDefaultTTL=zhIpDefaultTTL, zhIpNetToMediaPhysAddress=zhIpNetToMediaPhysAddress, zhIpInDelivers=zhIpInDelivers, zhIpInHdrErrors=zhIpInHdrErrors, zhIpFragOKs=zhIpFragOKs, zhIpOutDiscards=zhIpOutDiscards, zhIpReasmFails=zhIpReasmFails, zhIpFragFails=zhIpFragFails, zhoneIpEntry=zhoneIpEntry, zhIpForwarding=zhIpForwarding, comIpIp=comIpIp, PYSNMP_MODULE_ID=comIpIp)
