#
# PySNMP MIB module A3COM-HUAWEI-MPLS-LDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-MPLS-LDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hwMpls, huaweiMgmt = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "hwMpls", "huaweiMgmt")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, IpAddress, Counter64, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Bits, ObjectIdentity, Gauge32, Counter32, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Counter64", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Bits", "ObjectIdentity", "Gauge32", "Counter32", "iso", "Integer32")
TextualConvention, TimeInterval, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "RowStatus", "TruthValue", "DisplayString")
hwMplsLdp = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2))
hwMplsLdp.setRevisions(('1996-11-08 21:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwMplsLdp.setRevisionsDescriptions(('The MIB for HuaweiMPLS LDP module. This MIB has been derived from the MPLS Working group LDP MIB <drst-ietf-mpls-ldp-mib-01.txt> and MPLS Working group TE MIB <draft-ietf-mpls-te-mib -01.txt>.',))
if mibBuilder.loadTexts: hwMplsLdp.setLastUpdated('9906301200Z')
if mibBuilder.loadTexts: hwMplsLdp.setOrganization('HuaweiMPLS Working Group')
if mibBuilder.loadTexts: hwMplsLdp.setContactInfo('S. Manikantan, Huawei Software Pvt. Ltd., 481, Mount Road, Nandanam. CHENNAI-35 INDIA manis@Huawei.futsoft.com')
if mibBuilder.loadTexts: hwMplsLdp.setDescription('All rights reserved')
class DisplayString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class PhysAddress(OctetString):
    pass

class BitRate(Integer32):
    pass

class BurstSize(Integer32):
    pass

class MplsLsrIdentifier(TextualConvention, OctetString):
    description = 'The Label Switch Router (LSR) identifier is the first 4 bytes or the IP Address component of the Label Distribution Protocol (LDP) identifier.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class MplsLdpGenAddr(TextualConvention, OctetString):
    description = 'The value of an network layer or data link layer address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class MplsLdpIdentifier(TextualConvention, OctetString):
    description = 'The LDP identifier is a six octet quantity which is used to identify an Label Switch Router (LSR) label space. The first four octets encode an IP address assigned to the LSR, and the last two octets identify a specific label space within the LSR.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class AtmVpIdentifier(TextualConvention, Integer32):
    description = 'The VPI value for a VPL. The value VPI=0 is not used for a VPL not associated with a VCL. For ATM UNIs supporting VPCs the VPI value ranges from 1 to 255. For ATM UNIs supporting VCCs the VPI value ranges from 0 to 255. The maximum VPI value cannot exceed the value allowable by atmInterfaceMaxVpiBits defined in ATM-MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class AtmVcIdentifier(TextualConvention, Integer32):
    description = 'The VCI value for a VCL. The maximum VCI value cannot exceed the value allowable by atmInterfaceMaxVciBits defined in ATM-MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AddressFamilyNumbers(TextualConvention, Integer32):
    reference = 'RFC 1700 Assigned Numbers, Reynolds and Postel, Oct. 1994'
    description = 'An address family. Values are defined in RFC 1700 - Assigned Numbers. All values may not be relevant in all contexts when used in this MIB, but are included for completeness.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 0), ("ipv4", 1), ("ipv6", 2), ("nsap", 3), ("hdlc", 4), ("bbn1822", 5), ("ieee802", 6), ("e163", 7), ("e164", 8), ("f69", 9), ("x121", 10), ("ipx", 11), ("appleTalk", 12), ("decnetIV", 13), ("banyanVines", 14), ("e164WithNsap", 15))

class MplsLabel(TextualConvention, Integer32):
    reference = '1. MPLS Label Stack Encoding, Rosen et al, draft- ietf-mpls-label-encaps-04.txt, April 1999. 2. Use of Label Switching on Frame Relay Networks, Conta et al, draft-ietf-mpls-fr-03.txt, Nov. 1998.'
    description = 'Represents an MPLS label. Note that the contents of a label field are interpreted in an interface-type specific fashion. For example, the label carried in the MPLS shim header is 20 bits wide and the top 12 bits must be zero. The frame relay label can be either 10, 17 or 23 bits wide depending on the size of the DLCI field size and the top 22, 15, or 9 bits must be zero, respectively. For an ATM interface, the lowermost 16 bits are interpreted as the VCI, the next 8 bits as the VPI and the remaining bits must be zero. Also note the permissible label values are also a function of the interface type. For example, the value 3 has special semantics in the control plane for an MPLS shim header label and is not a valid label value in the datapath.'
    status = 'current'

class MplsTunnelIndex(TextualConvention, Integer32):
    description = 'Index into mplsTunnelTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

hwMplsLdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1))
hwMplsLdpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2))
hwMplsLdpLsrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1))
hwMplsLdpEntityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2))
hwMplsLdpPeerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3))
hwMplsLdpSessionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4))
hwMplsLdpHelloAdjacencyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 5))
hwMplsLdpCrlspTnlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6))
hwMplsLdpLsrIncarnTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1), )
if mibBuilder.loadTexts: hwMplsLdpLsrIncarnTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrIncarnTable.setDescription('HuaweiMPLS provides support for multiple incarnations of the MPLS Stack in a target. The LSR defined in the standard <IETF DRAFT> MIB is treated as an incarnation in this MIB. Using a local policy the Network administrator must group the LDP Entities that should be placed in an incarnation.')
hwMplsLdpLsrIncarnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"))
if mibBuilder.loadTexts: hwMplsLdpLsrIncarnEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrIncarnEntry.setDescription("An entry in this table represents an LSR incarnation. All the entries in this table are created initially when the LDP is initiated. The row status of each entry will be in 'notInService' state initially. The row status must be set to 'active' after the necessary configurations are complete with respect to an incarnation. Currenlty the LSR ID of the incarnation is the only mandatory parameter that must be set before the rowStatus is set to 'active'. An LSR Incarnation Entity is uniquely indexed by its Incarnation Identifier.")
hwMplsLdpLsrID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 1), MplsLsrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrID.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrID.setDescription("The LSR's Identifier.")
hwMplsLdpLsrLoopDetectionPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpLsrLoopDetectionPresent.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrLoopDetectionPresent.setDescription("A indication of whether this LSR supports loop detection. A value of 'true' indicates this LSR does support loop detection. A value of 'false' indicates this LSR does not support loop detection.")
hwMplsLdpLsrLoopDetectionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrLoopDetectionAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrLoopDetectionAdminStatus.setDescription("To enable loop detection the value of this object should be 'enabled(1)'. Otherwise, to turn off loop detection, set this value to 'disabled(2)'.")
hwMplsLdpLsrPathVectorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 4), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrPathVectorLimit.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrPathVectorLimit.setDescription("This object only has meaning if hwMplsLdpLsrLoopDetectionPresent has the value of 'true'. The value of this object represents the limit of path vectors which this LSR uses to treat the message as if it had traversed a loop.")
hwMplsLdpLsrHopCountLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 5), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrHopCountLimit.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrHopCountLimit.setDescription("This object only has meaning if hwMplsLdpLsrLoopDetectionPresent has the value of 'true'. The value of this object represents the limit on the Hop Count which this LSR uses to treat the message as if it had traversed a loop.")
hwMplsLdpLsrLoopPreventionPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpLsrLoopPreventionPresent.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrLoopPreventionPresent.setDescription("A indication of whether this LSR supports loop prevention. A value of 'true' indicates this LSR does support loop prevention. A value of 'false' indicates this LSR does not support loop prevention. Current release of HuaweiMPLS does not provide support to assign this MIB object with a value 'true'.")
hwMplsLdpLsrLoopPreventionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrLoopPreventionAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrLoopPreventionAdminStatus.setDescription("To enable loop prevention the value of this object should be 'enabled(1)'. Otherwise, to turn off loop prevention, set this value to 'disabled(2)'. Current release of HuaweiMPLS does not provide support to assign this MIB object with a value 'enabled'.")
hwMplsLdpLsrLabelRetentionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conservative", 1), ("liberal", 2))).clone('conservative')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrLabelRetentionMode.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrLabelRetentionMode.setDescription("The LSR can be configured to use either conservative or liberal label retention mode. If the value of this object is conservative(1) then advertized label mappings are retained only if they will be used to forward packets, i.e. if label came from a valid next hop. If the value of this object is liberal(2) then all advertized label mappings are retained whether they are from a valid next hop or not. Current release of HuaweiMPLS does not provide support to assign this MIB object with a value 'liberal'.")
hwMplsLdpLsrIncarnID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpLsrIncarnID.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrIncarnID.setDescription('The incarnation acts as index to all the elements in this table.')
hwMplsLdpLsrMaxLdpEntities = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxLdpEntities.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxLdpEntities.setDescription('The maximum number of LDP entities that can be supported by this Incarnation.')
hwMplsLdpLsrMaxLocalPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxLocalPeers.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxLocalPeers.setDescription('The maximum number of Local LDP peers that can be supported by this Incarnation.')
hwMplsLdpLsrMaxRemotePeers = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxRemotePeers.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxRemotePeers.setDescription('The maximum number of Remote LDP peers that can be supported by this Incarnation.')
hwMplsLdpLsrMaxIfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxIfaces.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxIfaces.setDescription('The maximum number of Label enabled Interfaces that can be supported by this Incarnation.')
hwMplsLdpLsrMaxLsps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxLsps.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxLsps.setDescription('The maximum number of Label Switched Paths that can be supported by this Incarnation.')
hwMplsLdpLsrMaxCrlspTnls = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxCrlspTnls.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxCrlspTnls.setDescription('The maximum number of CRLSPs that can be supported by this Incarnation.')
hwMplsLdpLsrMaxErhopPerCrlspTnl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxErhopPerCrlspTnl.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxErhopPerCrlspTnl.setDescription(' The maximum number of ER-Hops that can be supported in a CRLSP tunnel.')
hwMplsLdpLsrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpLsrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
hwMplsLdpLsrMaxVcmCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrMaxVcmCapability.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrMaxVcmCapability.setDescription(' ')
hwMplsLdpLsrVcmPathVecInAllLblMapPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrVcmPathVecInAllLblMapPresent.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrVcmPathVecInAllLblMapPresent.setDescription(' ')
hwMplsLdpLsrRequestRetrytimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrRequestRetrytimerValue.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrRequestRetrytimerValue.setDescription(' ')
hwMplsLdpLsrNumOfRequestRetryAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLdpLsrNumOfRequestRetryAttempts.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLsrNumOfRequestRetryAttempts.setDescription(' ')
hwMplsLdpEntityTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1), )
if mibBuilder.loadTexts: hwMplsLdpEntityTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityTable.setDescription('This table contains information about the MPLS Label Distribution Protocol Entities which exist on this Label Switch Router (LSR).')
hwMplsLdpEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"))
if mibBuilder.loadTexts: hwMplsLdpEntityEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityEntry.setDescription('An entry in this table represents an LDP entity. An entry can be created by a network administrator or by an SNMP agent as instructed by LDP. An LPD Entity is uniquely indexed by its LPD Identifier.')
hwMplsLdpEntityID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 1), MplsLdpIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpEntityID.setReference('LDP Specification, Section on LDP Identifiers.')
if mibBuilder.loadTexts: hwMplsLdpEntityID.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityID.setDescription('The LDP identifier which uniquely identifies the LDP Entity. This is s six octet quantity which is used to identify an Label Switch Router (LSR) label space. The first four octets encode an IP address assigned to the LSR, and the last two octets identify a specific label space within the LSR.')
hwMplsLdpEntityLabelSpaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("perInterface", 2), ("perPlatform", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityLabelSpaceType.setReference('LDP Specification, Section on Label Spaces.')
if mibBuilder.loadTexts: hwMplsLdpEntityLabelSpaceType.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityLabelSpaceType.setDescription("The type of label spaces associated with this LDP Entity. The values are 'unknown(1)' The type of label space is not known. 'perInterface(2)' The type of label space is tied to an interface. 'perPlatform(3)' The type of label space is tied to the platform.")
hwMplsLdpEntityDefVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 3), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityDefVpi.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityDefVpi.setDescription('The Default VPI value used in the label for the default VPI.')
hwMplsLdpEntityDefVci = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 4), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityDefVci.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityDefVci.setDescription('The Default VCI value used in the label for the default VCI.')
hwMplsLdpEntityUnlabTrafVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 5), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityUnlabTrafVpi.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityUnlabTrafVpi.setDescription('VPI value of the VCC supporting unlabeled traffic.')
hwMplsLdpEntityUnlabTrafVci = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 6), AtmVcIdentifier().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityUnlabTrafVci.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityUnlabTrafVci.setDescription('VCI value of the VCC supporting unlabeled traffic.')
hwMplsLdpEntityMergeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noMerge", 0), ("vpMerge", 1), ("vcMerge", 2), ("vpVcMerge", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityMergeCapability.setReference('draft-ietf-mpls-ldp-04.txt, Section 3.5.3')
if mibBuilder.loadTexts: hwMplsLdpEntityMergeCapability.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityMergeCapability.setDescription('Sets the merge capability for this LDP entity. Current Release of HuaweiMPLS does not provide support for any kind of Merge.')
hwMplsLdpEntityVcDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirectional", 1), ("unidirectional", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityVcDirectionality.setReference('draft-ietf-mpls-ldp-04.txt, Section 3.5.3')
if mibBuilder.loadTexts: hwMplsLdpEntityVcDirectionality.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityVcDirectionality.setDescription('Sets the VC directionality for this LDP entity.')
hwMplsLdpEntityWellKnownDiscoveryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityWellKnownDiscoveryPort.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityWellKnownDiscoveryPort.setDescription('The well known LDP Discovery Port.')
hwMplsLdpEntityMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityMtu.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityMtu.setDescription('The maximum transmission unit (MTU) that was configured for this entity.')
hwMplsLdpEntityKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityKeepAliveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityKeepAliveHoldTimer.setDescription('The two octet value which is the proposed keep alive hold timer for this LDP Entity.')
hwMplsLdpEntityFailedInitSessionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityFailedInitSessionThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityFailedInitSessionThreshold.setDescription('When attempting to establish a session with a given Peer, the given LDP Entity should send out a notification when exceeding this threshold. A value of 0 (zero) for this object indicates that the threshold is infinity. In other words, a notification will not be sent if the value of this object is 0 (zero).')
hwMplsLdpEntityLabelDistributionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downstreamOnDemand", 1), ("downstreamUnsolicited", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityLabelDistributionMethod.setReference('draft-ietf-mpls-arch-04.txt [20].')
if mibBuilder.loadTexts: hwMplsLdpEntityLabelDistributionMethod.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityLabelDistributionMethod.setDescription("For any given LDP session, the method of label distribution must be specified. Current release of HuaweiMPLS does not provide support for 'downstreamUnsolicited'.")
hwMplsLdpEntityLabelAllocationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ordered", 1), ("independent", 2))).clone('ordered')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityLabelAllocationMethod.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityLabelAllocationMethod.setDescription('For any given LDP session, the method of label allocation must be specified. Label can be allocated in either ordered mode or in the independent mode.')
hwMplsLdpEntityHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityHelloHoldTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityHelloHoldTimer.setDescription('The two octet value which is the proposed hello hold timer for this LDP Entity.')
hwMplsLdpEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
hwMplsLdpEntityIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hwMplsLdpEntityIfTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityIfTable.setDescription("This table contains information about the interfaces that are associated with an LDP Entity. There should be atleast one interface associated with each LDP Entity. If the LDP Entity supports 'per interface based label space' label type then, atmost one interface can be associated with the LDP entity. If the LDP Entity supports 'per platform based label space' label type then, more than one interface can be associated with the LDP Entity.")
hwMplsLdpEntityIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"))
if mibBuilder.loadTexts: hwMplsLdpEntityIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityIfEntry.setDescription('An entry in this table represents an Interface that is associated with a LDP entity. An entry can be created by a network administrator or by an SNMP agent as instructed by LDP. An interface (row in this table) can be created/deleted only when the associted LDP Entity row status has the value notInService or notReady.')
hwMplsLdpEntityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwMplsLdpEntityIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityIfIndex.setDescription('Identifier that uniquely identifies the Interface with respect to an LDP Entity. The ifIndex value corresponds to the IfIndex value of the MIB-II')
hwMplsLdpEntityIfIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityIfIpv4Address.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityIfIpv4Address.setDescription('The IPv4 address associated with the interface.')
hwMplsLdpEntityIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityIfRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
hwMplsLdpEntityConfAtmLabelRangeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3), )
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeTable.setDescription("The MPLS LDP Entity Configurable ATM Label Range Table. The purpose of this table is to provide a mechanism for specifying a contiguous range of vpi's with a contiguous range of vci's, or a 'label range' for LDP Entities. LDP Entities which use ATM must have at least one entry in this table.")
hwMplsLdpEntityConfAtmLabelRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityConfAtmLabelRangeLowerBoundVPI"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityConfAtmLabelRangeLowerBoundVCI"))
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeEntry.setDescription('A row in the LDP Entity Configurable ATM Label Range Table. One entry in this table contains information on a single range of labels represented by the configured Upper and Lower Bounds VPI/VCI pairs. NOTE: The ranges for a specific LDP Entity are UNIQUE and non-overlapping. For example, for a specific LDP Entity index, there could be one entry having ConfLowerBound vpi/vci == 0/32, and ConfUpperBound vpi/vci == 0/100, and a second entry for this same interface with ConfLowerBound vpi/vci == 0/101 and ConfUpperBound vpi/vci == 0/200. However, there could not be a third entry with ConfLowerBound vpi/vci == 0/200 and ConfUpperBound vpi/vci == 0/300 because this label range overlaps with the second entry (i.e. both entries now have 0/200). A row will not be created unless a unique and non-overlapping range is specified. Thus, row creation implies a one-shot row creation of LDP EntityID and ConfLowerBound vpi/vci and ConfUpperBound vpi/vci. At least one label range entry for a specific LDP Entity MUST include the default VPI/VCI values denoted in the LDP Entity Table.')
hwMplsLdpEntityConfAtmLabelRangeLowerBoundVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeLowerBoundVPI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeLowerBoundVPI.setDescription('The minimum VPI number configured for this range.')
hwMplsLdpEntityConfAtmLabelRangeLowerBoundVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeLowerBoundVCI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeLowerBoundVCI.setDescription('The minimum VCI number configured for this range.')
hwMplsLdpEntityConfAtmLabelRangeUpperBoundVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3, 1, 3), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeUpperBoundVPI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeUpperBoundVPI.setDescription('The maximum VPI number configured for this range.')
hwMplsLdpEntityConfAtmLabelRangeUpperBoundVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3, 1, 4), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeUpperBoundVCI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeUpperBoundVCI.setDescription('The maximum VCI number configured for this range.')
hwMplsLdpEntityConfAtmLabelRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityConfAtmLabelRangeRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
hwMplsLdpEntityStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 4), )
if mibBuilder.loadTexts: hwMplsLdpEntityStatsTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityStatsTable.setDescription('This table is a read-only table which augments the MplsLdpConfEntityTable. The purpose of this table is to keep statistical information about the LDP Entities on the LSR.')
hwMplsLdpEntityStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 4, 1), )
hwMplsLdpEntityEntry.registerAugmentions(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityStatsEntry"))
hwMplsLdpEntityStatsEntry.setIndexNames(*hwMplsLdpEntityEntry.getIndexNames())
if mibBuilder.loadTexts: hwMplsLdpEntityStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityStatsEntry.setDescription('A row in this table contains statistical information about an LDP Entity.')
hwMplsLdpAttemptedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpAttemptedSessions.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpAttemptedSessions.setDescription('A count of the total attempted sessions for this LDP Entity.')
hwMplsLdpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1), )
if mibBuilder.loadTexts: hwMplsLdpPeerTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerTable.setDescription('Information about LDP peers which have been discovered by the LDP Entities that are managed by this agent.')
hwMplsLdpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpPeerIndex"))
if mibBuilder.loadTexts: hwMplsLdpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerEntry.setDescription('Information about a single Peer.')
hwMplsLdpPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwMplsLdpPeerIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerIndex.setDescription('An identifier for the LDP peer that is unique within the scope of this agent.')
hwMplsLdpPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 2), MplsLdpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerID.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerID.setDescription('The LDP identifier of this LDP Peer.')
hwMplsLdpPeerInternetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 3), AddressFamilyNumbers()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerInternetworkAddrType.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerInternetworkAddrType.setDescription('The type of the internetwork layer address of this LDP peer. This object indicates how the value of hwMplsLdpPeerInternetworkAddr is to be interpreted.')
hwMplsLdpPeerInternetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 4), MplsLdpGenAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerInternetworkAddr.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerInternetworkAddr.setDescription('The value of the internetwork layer address of this LDP peer.')
hwMplsLdpPeerDefaultMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(9180)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerDefaultMtu.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerDefaultMtu.setDescription('The default maximum transmission unit (MTU) of the LDP Peer.')
hwMplsLdpPeerKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerKeepAliveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerKeepAliveHoldTimer.setDescription('The two octet unsigned non zero INTEGER that indicates the number of seconds that this Peer proposes for the value of the KeepAlive Interval.')
hwMplsLdpPeerLabelDistributionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downstreamOnDemand", 1), ("downstreamUnsolicited", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerLabelDistributionMethod.setReference('draft-ietf-mpls-arch-05.txt [20].')
if mibBuilder.loadTexts: hwMplsLdpPeerLabelDistributionMethod.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerLabelDistributionMethod.setDescription('For any given LDP session, the method of label distribution must be specified.')
hwMplsLdpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerType.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerType.setDescription('Indicates whether a peer is a local peer or a remote peer')
hwMplsLdpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention.')
hwMplsLdpPeerConfAtmLabelRangeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 2), )
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeTable.setDescription("The MPLS LDP Peer Configurable ATM Label Range Table. The purpose of this table is to provide a mechanism for specifying a contiguous range of vpi's with a contiguous range of vci's, or a 'label range' for LDP Peers. LDP Peers which use ATM must have at least one entry in this table.")
hwMplsLdpPeerConfAtmLabelRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpPeerIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpPeerConfAtmLabelRangeLowerBoundVPI"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpPeerConfAtmLabelRangeLowerBoundVCI"))
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeEntry.setDescription('A row in the LDP Peer Configurable ATM Label Range Table. One entry in this table contains information on a single range of labels represented by the configured Upper and Lower Bounds VPI/VCI pairs. NOTE: The ranges for a specific LDP Peer are UNIQUE and non-overlapping. For example, for a specific LDP Peer index, there could be one entry having ConfLowerBound vpi/vci == 0/32, and ConfUpperBound vpi/vci == 0/100, and a second entry for this same interface with ConfLowerBound vpi/vci == 0/101 and ConfUpperBound vpi/vci == 0/200. However, there could not be a third entry with ConfLowerBound vpi/vci == 0/200 and ConfUpperBound vpi/vci == 0/300 because this label range overlaps with the second entry (i.e. both entries now have 0/200). A row will not be created unless a unique and non-overlapping range is specified. Thus, row creation implies a one-shot row creation of LDP PeerIndex and ConfLowerBound vpi/vci and ConfUpperBound vpi/vci. At least one label range entry for a specific LDP Peer MUST include the default VPI/VCI values denoted in the LDP Peer Table.')
hwMplsLdpPeerConfAtmLabelRangeLowerBoundVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 2, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeLowerBoundVPI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeLowerBoundVPI.setDescription('The minimum VPI number configured for this range.')
hwMplsLdpPeerConfAtmLabelRangeLowerBoundVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 2, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeLowerBoundVCI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeLowerBoundVCI.setDescription('The minimum VCI number configured for this range.')
hwMplsLdpPeerConfAtmLabelRangeUpperBoundVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 2, 1, 3), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeUpperBoundVPI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeUpperBoundVPI.setDescription('The maximum VPI number configured for this range.')
hwMplsLdpPeerConfAtmLabelRangeUpperBoundVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 3, 2, 1, 4), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeUpperBoundVCI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerConfAtmLabelRangeUpperBoundVCI.setDescription('The maximum VCI number configured for this range.')
hwMplsLdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1), )
if mibBuilder.loadTexts: hwMplsLdpSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionTable.setDescription('A table of Sessions between the LDP Entities and LDP Peers.')
hwMplsLdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpPeerIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpSessionIndex"))
if mibBuilder.loadTexts: hwMplsLdpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionEntry.setDescription('An entry in this table represents information on a single session between an LDP Entity and LDP Peer.')
hwMplsLdpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwMplsLdpSessionIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionIndex.setDescription('An unique identifier for this entry such that it identifies a specific LDP Session.')
hwMplsLdpSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 2), MplsLdpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionID.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionID.setDescription('The LDP Session identifier.')
hwMplsLdpSessionProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionProtocolVersion.setDescription('The version of the LDP Protocol which this session is using.')
hwMplsLdpSessionKeepAliveHoldTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveHoldTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveHoldTimeRemaining.setDescription('The keep alive hold time remaining for this session.')
hwMplsLdpSessionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionRole.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionRole.setDescription("An indication of whether the LDP Entity associated with this session is acting in an 'active' role or a 'passive' role.")
hwMplsLdpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonexistent", 1), ("initialized", 2), ("openrec", 3), ("opensent", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionState.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionState.setDescription('The current state of the session, all of the states 1 - 5 are based on the state machine for session negotiation behavior.')
hwMplsLdpSessionAtmLabelRangeLowerBoundVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 7), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeLowerBoundVPI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeLowerBoundVPI.setDescription('The minimum VPI number for this range.')
hwMplsLdpSessionAtmLabelRangeLowerBoundVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 8), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeLowerBoundVCI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeLowerBoundVCI.setDescription('The minimum VCI number for this range.')
hwMplsLdpSessionAtmLabelRangeUpperBoundVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 9), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeUpperBoundVPI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeUpperBoundVPI.setDescription('The maximum VPI number for this range.')
hwMplsLdpSessionAtmLabelRangeUpperBoundVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 4, 1, 1, 10), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeUpperBoundVCI.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionAtmLabelRangeUpperBoundVCI.setDescription('The maximum VCI number for this range.')
hwMplsLdpHelloAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 5, 1), )
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyTable.setDescription('A table of Hello Adjacencies for Sessions.')
hwMplsLdpHelloAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 5, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityIfIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpPeerIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpSessionIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpHelloAdjacencyIndex"))
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyEntry.setDescription('Each row represents a single LDP Hello Adjacency. An LDP Session can have one or more Hello adjacencies.')
hwMplsLdpHelloAdjacencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyIndex.setDescription('An identifier for the adjacency.')
hwMplsLdpHelloAdjacencyHoldTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 5, 1, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyHoldTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHelloAdjacencyHoldTimeRemaining.setDescription('The time remaining for this Hello Adjacency.')
hwMplsLdpCrlspTnlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1), )
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlTable.setDescription('The hwMplsLdpCrlspTnlTable allows new CRLSP MPLS tunnels to be created. The ER hops associated with a CRLSP tunnel are to be configured using the hwMplsLdpCrlspErHopTable.')
hwMplsLdpCrlspTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpCrlspTnlIndex"))
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlEntry.setDescription('An entry in this table represents an CRLSP MPLS tunnel. An entry can be created by a network administrator.')
hwMplsLdpCrlspTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 1), MplsTunnelIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlIndex.setDescription('Uniquely identifies this row.')
hwMplsLdpCrlspTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlName.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlName.setDescription("The 'canonical' name assigned to the tunnel that can be used to refer to it on the 'console' port.")
hwMplsLdpCrlspTnlDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("inOut", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlDirection.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlDirection.setDescription('Whether this tunnel is unidirectional-incoming, unidirectional-outgoing, or bidirectional.')
hwMplsLdpCrlspTnlSignallingProto = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ldp", 2), ("rsvp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlSignallingProto.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlSignallingProto.setDescription('The signaling protocol, if any, that set up this tunnel.')
hwMplsLdpCrlspTnlSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlSetupPrio.setReference('Extensions to RSVP for LSP Tunnels, Awduche et al, Internet Draft <draft-mpls-rsvp-lsp-tunnel-02.txt>, March 1999., Constraint-Based LSP Setup using LDP, Jamoussi, Internet Draft <draft-ietf-mpls-cr-ldp- 01.txt>, Feb. 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlSetupPrio.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlSetupPrio.setDescription('The setup priority of this tunnel.')
hwMplsLdpCrlspTnlHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlHoldingPrio.setReference(' Extensions to RSVP for LSP Tunnels, Awduche et al, Internet Draft <draft-mpls-rsvp-lsp-tunnel-02.txt>, March 1999., Constraint-Based LSP Setup using LDP, Jamoussi, Internet Draft <draft-ietf-mpls-cr-ldp- 01.txt>, Feb. 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlHoldingPrio.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlHoldingPrio.setDescription('The holding priority for this tunnel.')
hwMplsLdpCrlspTnlPeakDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 7), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlPeakDataRate.setReference('Section 4.3.1.2, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlPeakDataRate.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlPeakDataRate.setDescription('The peak rate - the maximum rate at which traffic will be sent on the CRLSP.')
hwMplsLdpCrlspTnlPeakBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 8), BurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlPeakBurstSize.setReference('Section 4.3, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlPeakBurstSize.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlPeakBurstSize.setDescription('The peak burst size - the maximum burst size of the traffic that can occur in the established CRLSP.')
hwMplsLdpCrlspTnlCommittedDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 9), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlCommittedDataRate.setReference('Section 4.3.1.3, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlCommittedDataRate.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlCommittedDataRate.setDescription('The committed rate - the committed rate at which traffic will be sent on the CRLSP.')
hwMplsLdpCrlspTnlCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 10), BurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlCommittedBurstSize.setReference('Section 4.3, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlCommittedBurstSize.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlCommittedBurstSize.setDescription('The committed burst size - the committed burst size of the traffic that will be handled in the established CRLSP.')
hwMplsLdpCrlspTnlExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 11), BurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlExcessBurstSize.setReference('Section 4.3.1.4, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlExcessBurstSize.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlExcessBurstSize.setDescription('The Excess burst size - the excess burst size limit to be used for traffic conditioning at the ingress of the CRLSP.')
hwMplsLdpCrlspTnlIsPinned = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlIsPinned.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlIsPinned.setDescription('Indicates whether the loose-routed hops of this tunnel are to be pinned.')
hwMplsLdpCrlspTnlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlFrequency.setReference('Section 4.3.1.1, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlFrequency.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlFrequency.setDescription('Indicates the frequency of usage of the established CRLSP.')
hwMplsLdpCrlspTnlWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlWeight.setReference('Section 4.3, Constraint-Based LSP Setup using LDP, Jamoussi, et. al, <draft-ietf-mpls-crldp-02.txt>, August 1999.')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlWeight.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlWeight.setDescription('Indicates the weight that is the established CRLSP.')
hwMplsLdpCrlspTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTnlRowStatus.setDescription("For controlling the state of this row. The status can be set to 'active' only when atleast one ERHOP is created in the hwMplsLdpErHopTable, associated with this tunnel.")
hwMplsLdpCrlspErHopTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2), )
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopTable.setDescription('The hwMplsLdpCrlspErHopTable is used to indicate the hops, strict or loose, for an MPLS CRLSP tunnel defined in hwMplsLdpCrlspTnlTable. There must be atleast one entry in this table for each CRLSP tunnel that is supported in the hwMplsLdpCrlspTnlTable. The first row in the table is the first hop after the origination point of the tunnel.')
hwMplsLdpCrlspErHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpCrlspTnlIndex"), (0, "A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpCrlspErHopIndex"))
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopEntry.setDescription('An entry in this table represents a tunnel hop. An entry is created by a network administrator for signalled ERLSP set up by LDP or RSVP.')
hwMplsLdpCrlspErHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopIndex.setDescription('Secondary index into this table identifying the particular hop.')
hwMplsLdpCrlspErHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipV4", 1))).clone('ipV4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopAddrType.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopAddrType.setDescription('Address type of this hop.')
hwMplsLdpCrlspErHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopIpv4Addr.setDescription('If hwMplsLdpCrlspErHopAddrType is ipV4(1), IPv4 address of this hop. This object is not significant otherwise and should return a value of 0.')
hwMplsLdpCrlspErHopIpv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopIpv4PrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopIpv4PrefixLen.setDescription("If hwMplsLdpCrlspErHopAddrType is ipV4(1), prefix length for this hop's IPv4 address. This object is not significant otherwise and should return a value of 0.")
hwMplsLdpCrlspErHopStrictOrLoose = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopStrictOrLoose.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopStrictOrLoose.setDescription('Whether this is a strict or loose hop.')
hwMplsLdpCrlspErHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 1, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspErHopRowStatus.setDescription('For creating, modifying and deleting this row.')
hwMplsLdpNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0))
hwMplsLdpFailedInitSessionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 1)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityFailedInitSessionThreshold"))
if mibBuilder.loadTexts: hwMplsLdpFailedInitSessionThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpFailedInitSessionThresholdExceeded.setDescription('This notification is generated whenever the value of hwMplsLdpEntityFailedInitSessionThreshold is exceeded.')
hwMplsLdpCrlspTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 2)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpCrlspTnlIndex"))
if mibBuilder.loadTexts: hwMplsLdpCrlspTunnelUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTunnelUp.setDescription('This notification is generated by the Ingress LSR of the CRLSP tunnel on the receipt of Label mapping message from the downstream LSR for the LAbel request sent for the CRLSP tunnel.')
hwMplsLdpCrlspTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 3)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpCrlspTnlIndex"))
if mibBuilder.loadTexts: hwMplsLdpCrlspTunnelDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTunnelDown.setDescription('This notification is generated when a CRLSP Row status is modified to destroy the CRLSP tunnel. - due to pre-emption etc.,')
hwMplsLdpCrlspTunnelSetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 4)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpCrlspTnlIndex"))
if mibBuilder.loadTexts: hwMplsLdpCrlspTunnelSetupFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCrlspTunnelSetupFailure.setDescription('This notification is generated by the Ingress LSR of the CRLSP tunnel on the receipt of Nak message from the downstream LSR for the Label request sent for the CRLSP tunnel. This can occur due to improper ER hop values being set, or Traffic resources not available etc.,')
hwMplsLdpIncarnUpEventFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 11)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"))
if mibBuilder.loadTexts: hwMplsLdpIncarnUpEventFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpIncarnUpEventFailure.setDescription('This notification is generated by LDP to notify the Incarnation UP Event failure')
hwMplsLdpIncarnDownEventFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 12)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"))
if mibBuilder.loadTexts: hwMplsLdpIncarnDownEventFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpIncarnDownEventFailure.setDescription('This notification is generated by LDP to notify the Incarnation DOWN Event failure')
hwMplsLdpEntityUpEventFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 13)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityID"))
if mibBuilder.loadTexts: hwMplsLdpEntityUpEventFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityUpEventFailure.setDescription('This notification is generated by LDP to notify the ENTITY UP Event failure')
hwMplsLdpEntityDownEventFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 14)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpLsrIncarnID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpEntityID"))
if mibBuilder.loadTexts: hwMplsLdpEntityDownEventFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpEntityDownEventFailure.setDescription('This notification is generated by LDP to notify the ENTITY DOWN Event failure')
hwMplsLdpSessionUpEventFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 15)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpSessionID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpSessionState"))
if mibBuilder.loadTexts: hwMplsLdpSessionUpEventFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionUpEventFailure.setDescription("Generation of this trap occurs when the value of 'hwMplsLdpSessionState' enters the 'operational(5)' state.")
hwMplsLdpSessionDownEventFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 12, 2, 2, 0, 16)).setObjects(("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpSessionID"), ("A3COM-HUAWEI-MPLS-LDP-MIB", "hwMplsLdpSessionState"))
if mibBuilder.loadTexts: hwMplsLdpSessionDownEventFailure.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionDownEventFailure.setDescription("Generation of this trap occurs when the value of 'hwMplsLdpSessionState' leaves the 'operational(5)' state.")
mibBuilder.exportSymbols("A3COM-HUAWEI-MPLS-LDP-MIB", hwMplsLdpSessionRole=hwMplsLdpSessionRole, hwMplsLdpSessionEntry=hwMplsLdpSessionEntry, hwMplsLdpCrlspTunnelUp=hwMplsLdpCrlspTunnelUp, hwMplsLdpEntityLabelSpaceType=hwMplsLdpEntityLabelSpaceType, hwMplsLdpEntityObjects=hwMplsLdpEntityObjects, hwMplsLdpEntityEntry=hwMplsLdpEntityEntry, hwMplsLdpCrlspErHopTable=hwMplsLdpCrlspErHopTable, hwMplsLdpEntityDownEventFailure=hwMplsLdpEntityDownEventFailure, BitRate=BitRate, hwMplsLdpCrlspTnlRowStatus=hwMplsLdpCrlspTnlRowStatus, hwMplsLdpEntityDefVci=hwMplsLdpEntityDefVci, MplsLdpIdentifier=MplsLdpIdentifier, hwMplsLdpEntityUnlabTrafVpi=hwMplsLdpEntityUnlabTrafVpi, hwMplsLdpPeerIndex=hwMplsLdpPeerIndex, hwMplsLdpEntityConfAtmLabelRangeEntry=hwMplsLdpEntityConfAtmLabelRangeEntry, hwMplsLdpEntityDefVpi=hwMplsLdpEntityDefVpi, hwMplsLdpHelloAdjacencyHoldTimeRemaining=hwMplsLdpHelloAdjacencyHoldTimeRemaining, hwMplsLdpCrlspErHopStrictOrLoose=hwMplsLdpCrlspErHopStrictOrLoose, hwMplsLdpNotifications=hwMplsLdpNotifications, hwMplsLdpLsrHopCountLimit=hwMplsLdpLsrHopCountLimit, hwMplsLdpLsrIncarnID=hwMplsLdpLsrIncarnID, hwMplsLdpNotificationPrefix=hwMplsLdpNotificationPrefix, hwMplsLdpEntityConfAtmLabelRangeTable=hwMplsLdpEntityConfAtmLabelRangeTable, hwMplsLdpCrlspErHopEntry=hwMplsLdpCrlspErHopEntry, hwMplsLdpHelloAdjacencyIndex=hwMplsLdpHelloAdjacencyIndex, hwMplsLdpEntityIfIpv4Address=hwMplsLdpEntityIfIpv4Address, hwMplsLdpSessionIndex=hwMplsLdpSessionIndex, hwMplsLdpCrlspTnlIsPinned=hwMplsLdpCrlspTnlIsPinned, hwMplsLdpFailedInitSessionThresholdExceeded=hwMplsLdpFailedInitSessionThresholdExceeded, hwMplsLdpLsrMaxLdpEntities=hwMplsLdpLsrMaxLdpEntities, hwMplsLdpPeerLabelDistributionMethod=hwMplsLdpPeerLabelDistributionMethod, hwMplsLdpSessionDownEventFailure=hwMplsLdpSessionDownEventFailure, hwMplsLdpEntityVcDirectionality=hwMplsLdpEntityVcDirectionality, hwMplsLdpEntityIfEntry=hwMplsLdpEntityIfEntry, hwMplsLdpObjects=hwMplsLdpObjects, hwMplsLdpCrlspTunnelSetupFailure=hwMplsLdpCrlspTunnelSetupFailure, hwMplsLdpPeerConfAtmLabelRangeUpperBoundVPI=hwMplsLdpPeerConfAtmLabelRangeUpperBoundVPI, hwMplsLdpEntityLabelDistributionMethod=hwMplsLdpEntityLabelDistributionMethod, hwMplsLdpEntityIfIndex=hwMplsLdpEntityIfIndex, hwMplsLdpLsrRowStatus=hwMplsLdpLsrRowStatus, hwMplsLdpCrlspTnlObjects=hwMplsLdpCrlspTnlObjects, hwMplsLdpPeerConfAtmLabelRangeEntry=hwMplsLdpPeerConfAtmLabelRangeEntry, hwMplsLdpHelloAdjacencyTable=hwMplsLdpHelloAdjacencyTable, hwMplsLdpCrlspTnlDirection=hwMplsLdpCrlspTnlDirection, hwMplsLdpEntityID=hwMplsLdpEntityID, hwMplsLdp=hwMplsLdp, hwMplsLdpLsrLoopDetectionAdminStatus=hwMplsLdpLsrLoopDetectionAdminStatus, hwMplsLdpCrlspErHopAddrType=hwMplsLdpCrlspErHopAddrType, hwMplsLdpEntityIfTable=hwMplsLdpEntityIfTable, hwMplsLdpSessionProtocolVersion=hwMplsLdpSessionProtocolVersion, hwMplsLdpCrlspErHopIpv4Addr=hwMplsLdpCrlspErHopIpv4Addr, hwMplsLdpCrlspTnlSignallingProto=hwMplsLdpCrlspTnlSignallingProto, hwMplsLdpSessionTable=hwMplsLdpSessionTable, hwMplsLdpCrlspTnlTable=hwMplsLdpCrlspTnlTable, hwMplsLdpEntityIfRowStatus=hwMplsLdpEntityIfRowStatus, hwMplsLdpLsrMaxIfaces=hwMplsLdpLsrMaxIfaces, hwMplsLdpLsrLabelRetentionMode=hwMplsLdpLsrLabelRetentionMode, hwMplsLdpIncarnUpEventFailure=hwMplsLdpIncarnUpEventFailure, hwMplsLdpEntityConfAtmLabelRangeUpperBoundVCI=hwMplsLdpEntityConfAtmLabelRangeUpperBoundVCI, hwMplsLdpPeerType=hwMplsLdpPeerType, hwMplsLdpLsrLoopPreventionPresent=hwMplsLdpLsrLoopPreventionPresent, hwMplsLdpEntityStatsTable=hwMplsLdpEntityStatsTable, hwMplsLdpCrlspTnlWeight=hwMplsLdpCrlspTnlWeight, DisplayString=DisplayString, hwMplsLdpLsrMaxLsps=hwMplsLdpLsrMaxLsps, hwMplsLdpSessionAtmLabelRangeLowerBoundVCI=hwMplsLdpSessionAtmLabelRangeLowerBoundVCI, hwMplsLdpPeerConfAtmLabelRangeLowerBoundVCI=hwMplsLdpPeerConfAtmLabelRangeLowerBoundVCI, hwMplsLdpCrlspTnlCommittedBurstSize=hwMplsLdpCrlspTnlCommittedBurstSize, AtmVpIdentifier=AtmVpIdentifier, hwMplsLdpEntityFailedInitSessionThreshold=hwMplsLdpEntityFailedInitSessionThreshold, hwMplsLdpLsrMaxVcmCapability=hwMplsLdpLsrMaxVcmCapability, hwMplsLdpSessionAtmLabelRangeUpperBoundVCI=hwMplsLdpSessionAtmLabelRangeUpperBoundVCI, hwMplsLdpLsrIncarnEntry=hwMplsLdpLsrIncarnEntry, hwMplsLdpPeerKeepAliveHoldTimer=hwMplsLdpPeerKeepAliveHoldTimer, hwMplsLdpSessionKeepAliveHoldTimeRemaining=hwMplsLdpSessionKeepAliveHoldTimeRemaining, hwMplsLdpLsrPathVectorLimit=hwMplsLdpLsrPathVectorLimit, AtmVcIdentifier=AtmVcIdentifier, hwMplsLdpPeerConfAtmLabelRangeLowerBoundVPI=hwMplsLdpPeerConfAtmLabelRangeLowerBoundVPI, hwMplsLdpEntityConfAtmLabelRangeUpperBoundVPI=hwMplsLdpEntityConfAtmLabelRangeUpperBoundVPI, hwMplsLdpCrlspTnlEntry=hwMplsLdpCrlspTnlEntry, hwMplsLdpSessionAtmLabelRangeLowerBoundVPI=hwMplsLdpSessionAtmLabelRangeLowerBoundVPI, hwMplsLdpEntityRowStatus=hwMplsLdpEntityRowStatus, hwMplsLdpLsrMaxCrlspTnls=hwMplsLdpLsrMaxCrlspTnls, hwMplsLdpPeerID=hwMplsLdpPeerID, hwMplsLdpCrlspTnlPeakBurstSize=hwMplsLdpCrlspTnlPeakBurstSize, hwMplsLdpEntityTable=hwMplsLdpEntityTable, hwMplsLdpPeerTable=hwMplsLdpPeerTable, hwMplsLdpSessionUpEventFailure=hwMplsLdpSessionUpEventFailure, hwMplsLdpEntityMtu=hwMplsLdpEntityMtu, hwMplsLdpCrlspTunnelDown=hwMplsLdpCrlspTunnelDown, MplsLabel=MplsLabel, hwMplsLdpPeerRowStatus=hwMplsLdpPeerRowStatus, AddressFamilyNumbers=AddressFamilyNumbers, hwMplsLdpEntityUnlabTrafVci=hwMplsLdpEntityUnlabTrafVci, hwMplsLdpCrlspTnlIndex=hwMplsLdpCrlspTnlIndex, hwMplsLdpEntityConfAtmLabelRangeRowStatus=hwMplsLdpEntityConfAtmLabelRangeRowStatus, hwMplsLdpLsrNumOfRequestRetryAttempts=hwMplsLdpLsrNumOfRequestRetryAttempts, hwMplsLdpPeerInternetworkAddr=hwMplsLdpPeerInternetworkAddr, hwMplsLdpPeerConfAtmLabelRangeTable=hwMplsLdpPeerConfAtmLabelRangeTable, hwMplsLdpEntityMergeCapability=hwMplsLdpEntityMergeCapability, hwMplsLdpLsrMaxRemotePeers=hwMplsLdpLsrMaxRemotePeers, hwMplsLdpLsrLoopDetectionPresent=hwMplsLdpLsrLoopDetectionPresent, hwMplsLdpCrlspErHopRowStatus=hwMplsLdpCrlspErHopRowStatus, MplsLsrIdentifier=MplsLsrIdentifier, hwMplsLdpPeerConfAtmLabelRangeUpperBoundVCI=hwMplsLdpPeerConfAtmLabelRangeUpperBoundVCI, hwMplsLdpCrlspTnlSetupPrio=hwMplsLdpCrlspTnlSetupPrio, hwMplsLdpAttemptedSessions=hwMplsLdpAttemptedSessions, hwMplsLdpCrlspTnlCommittedDataRate=hwMplsLdpCrlspTnlCommittedDataRate, PYSNMP_MODULE_ID=hwMplsLdp, hwMplsLdpHelloAdjacencyObjects=hwMplsLdpHelloAdjacencyObjects, hwMplsLdpPeerDefaultMtu=hwMplsLdpPeerDefaultMtu, hwMplsLdpLsrObjects=hwMplsLdpLsrObjects, hwMplsLdpLsrRequestRetrytimerValue=hwMplsLdpLsrRequestRetrytimerValue, hwMplsLdpLsrIncarnTable=hwMplsLdpLsrIncarnTable, PhysAddress=PhysAddress, hwMplsLdpEntityKeepAliveHoldTimer=hwMplsLdpEntityKeepAliveHoldTimer, hwMplsLdpEntityConfAtmLabelRangeLowerBoundVPI=hwMplsLdpEntityConfAtmLabelRangeLowerBoundVPI, hwMplsLdpLsrID=hwMplsLdpLsrID, hwMplsLdpLsrVcmPathVecInAllLblMapPresent=hwMplsLdpLsrVcmPathVecInAllLblMapPresent, hwMplsLdpEntityStatsEntry=hwMplsLdpEntityStatsEntry, hwMplsLdpCrlspErHopIpv4PrefixLen=hwMplsLdpCrlspErHopIpv4PrefixLen, hwMplsLdpSessionObjects=hwMplsLdpSessionObjects, MplsTunnelIndex=MplsTunnelIndex, hwMplsLdpCrlspTnlName=hwMplsLdpCrlspTnlName, hwMplsLdpCrlspTnlHoldingPrio=hwMplsLdpCrlspTnlHoldingPrio, hwMplsLdpSessionAtmLabelRangeUpperBoundVPI=hwMplsLdpSessionAtmLabelRangeUpperBoundVPI, hwMplsLdpLsrMaxErhopPerCrlspTnl=hwMplsLdpLsrMaxErhopPerCrlspTnl, hwMplsLdpCrlspErHopIndex=hwMplsLdpCrlspErHopIndex, hwMplsLdpSessionState=hwMplsLdpSessionState, hwMplsLdpCrlspTnlPeakDataRate=hwMplsLdpCrlspTnlPeakDataRate, hwMplsLdpLsrLoopPreventionAdminStatus=hwMplsLdpLsrLoopPreventionAdminStatus, hwMplsLdpPeerObjects=hwMplsLdpPeerObjects, hwMplsLdpEntityWellKnownDiscoveryPort=hwMplsLdpEntityWellKnownDiscoveryPort, hwMplsLdpLsrMaxLocalPeers=hwMplsLdpLsrMaxLocalPeers, hwMplsLdpEntityConfAtmLabelRangeLowerBoundVCI=hwMplsLdpEntityConfAtmLabelRangeLowerBoundVCI, BurstSize=BurstSize, hwMplsLdpEntityLabelAllocationMethod=hwMplsLdpEntityLabelAllocationMethod, hwMplsLdpPeerInternetworkAddrType=hwMplsLdpPeerInternetworkAddrType, hwMplsLdpCrlspTnlFrequency=hwMplsLdpCrlspTnlFrequency, hwMplsLdpIncarnDownEventFailure=hwMplsLdpIncarnDownEventFailure, hwMplsLdpCrlspTnlExcessBurstSize=hwMplsLdpCrlspTnlExcessBurstSize, hwMplsLdpEntityUpEventFailure=hwMplsLdpEntityUpEventFailure, hwMplsLdpPeerEntry=hwMplsLdpPeerEntry, hwMplsLdpHelloAdjacencyEntry=hwMplsLdpHelloAdjacencyEntry, hwMplsLdpSessionID=hwMplsLdpSessionID, hwMplsLdpEntityHelloHoldTimer=hwMplsLdpEntityHelloHoldTimer, MplsLdpGenAddr=MplsLdpGenAddr)
