#
# PySNMP MIB module MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, MibIdentifier, Counter64, Unsigned32, ObjectIdentity, iso, Counter32, Bits, Gauge32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Counter64", "Unsigned32", "ObjectIdentity", "iso", "Counter32", "Bits", "Gauge32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
swMSTPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 15))
if mibBuilder.loadTexts: swMSTPMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swMSTPMIB.setOrganization(' ')
if mibBuilder.loadTexts: swMSTPMIB.setContactInfo(' ')
if mibBuilder.loadTexts: swMSTPMIB.setDescription('The MIB module for managing MSTP.')
class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

swMSTPGblMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 15, 1))
swMSTPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 15, 2))
swMSTPStpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpAdminState.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpAdminState.setDescription('This object indicates the spanning tree state of the bridge.')
swMSTPStpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 1), ("mstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpVersion.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpVersion.setDescription('The version of Spanning Tree Protocol the bridge is currently running.')
swMSTPStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpMaxAge.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. Note that the range for this parameter is related to the value of StpForwardDelay and PortAdminHelloTime. MaxAge <= 2(ForwardDelay - 1);MaxAge >= 2(HelloTime + 1) The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
swMSTPStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpHelloTime.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpHelloTime.setDescription('The value is used for HelloTime when this bridge is acting in RSTP or STP mode. Only in RSTP or STP mode can read/write this value.')
swMSTPStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpForwardDelay.setDescription('This value, controls how long a port changes its spanning state from blocking to learning state and from learning to forwarding state. Note that the range for this parameter is related to MaxAge')
swMSTPStpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpMaxHops.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpMaxHops.setDescription('This value applies to all Spanning Trees within an MST Region for which the Bridge is the Regional Root.')
swMSTPStpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
swMSTPStpForwardBPDU = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpForwardBPDU.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpForwardBPDU.setDescription('The enabled/disabled status is used to forward BPDU to non stp port.')
swMSTPStpLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpLBD.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpLBD.setDescription('The enabled/disabled status is used to Loop-back prevention.')
swMSTPStpLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPStpLBDRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swMSTPStpLBDRecoverTime.setDescription("The period of time(in second) on which STP module keeps checking the BPDU loop status, The valid range is 60 to 1000000 . If set this value from 1 to 59 will get 'bad value' return code. The value of zero is a special value which means to disable the auto-recovery mechanism for LBD feature.")
swMSTPName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPName.setStatus('current')
if mibBuilder.loadTexts: swMSTPName.setDescription('The object indicates the name of MST Configuration Identication.')
swMSTPRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: swMSTPRevisionLevel.setDescription('The object indicates the revision level of the MST Configuration Identification.')
swMSTPInstanceCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3), )
if mibBuilder.loadTexts: swMSTPInstanceCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstanceCtrlTable.setDescription('A table that contains MSTP instance information.')
swMSTPInstanceCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1), ).setIndexNames((0, "MSTP-MIB", "swMSTPInstId"))
if mibBuilder.loadTexts: swMSTPInstanceCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstanceCtrlEntry.setDescription('.')
swMSTPInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstId.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstId.setDescription('This object indicates the specific instance. An MSTP Instance Id(MSTID) of zero is used to identify the CIST.')
swMSTPInstVlanRangeList1to64 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList1to64.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList1to64.setDescription('This object indicates the VLAN range (1-512) that belongs to the instance.')
swMSTPInstVlanRangeList65to128 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList65to128.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList65to128.setDescription('This object indicates the VLAN range (513-1024) that belongs to the instance.')
swMSTPInstVlanRangeList129to192 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList129to192.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList129to192.setDescription('This object indicates the VLAN range (1025-1536) that belongs to the instance.')
swMSTPInstVlanRangeList193to256 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList193to256.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList193to256.setDescription('This object indicates the VLAN range(1537-2048) that belongs to the instance.')
swMSTPInstVlanRangeList257to320 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList257to320.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList257to320.setDescription('This object indicates the VLAN range (2049-2560) that belongs to the instance.')
swMSTPInstVlanRangeList321to384 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList321to384.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList321to384.setDescription('This object indicates the VLAN range (2561-3072) that belongs to the instance.')
swMSTPInstVlanRangeList385to448 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList385to448.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList385to448.setDescription('This object indicates the VLAN range (3073-3584) that belongs to the instance.')
swMSTPInstVlanRangeList449to512 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstVlanRangeList449to512.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstVlanRangeList449to512.setDescription('This object indicates the VLAN range (3585-4096) that belongs to the instance.')
swMSTPInstType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cist", 0), ("msti", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstType.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstType.setDescription('This object indicates the type of instance.')
swMSTPInstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstStatus.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstStatus.setDescription('The instance state that could be enabled/disabled.')
swMSTPInstPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstPriority.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstPriority.setDescription('The priority of the instance. The priority must be dividable by 4096 ')
swMSTPInstDesignatedRootBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 13), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstDesignatedRootBridge.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstDesignatedRootBridge.setDescription('The bridge identifier of the CIST. For MST instance, this object is unused.')
swMSTPInstExternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstExternalRootCost.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstExternalRootCost.setDescription('The path cost between MST Regions from the transmitting Bridge to the CIST Root. For MST instance this object is unused.')
swMSTPInstRegionalRootBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 15), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstRegionalRootBridge.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstRegionalRootBridge.setDescription('For CIST, Regional Root Identifier is the Bridge Identifier of the single bridge in a Region whose CIST Root Port is a Boundary Port, or the Bridge Identifier of the CIST Root if that is within the Region; For MSTI,MSTI Regional Root Identifier is the Bridge Identifier of the MSTI Regional Root for this particular MSTI in this MST Region; The Regional Root Bridge of this instance.')
swMSTPInstInternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstInternalRootCost.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstInternalRootCost.setDescription('For CIST, the internal path cost is the path cost to the CIST Regional Root; For MSTI, the internal path cost is the path cost to the MSTI Regional Root for this particular MSTI in this MST Region')
swMSTPInstDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 17), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstDesignatedBridge.setDescription('The Bridge Identifier for the transmitting bridge for this CIST or MSTI')
swMSTPInstRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstRootPort.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the CIST or MSTI root bridge.')
swMSTPInstMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstMaxAge.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
swMSTPInstForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstForwardDelay.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstForwardDelay.setDescription('This value, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database.')
swMSTPInstLastTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstLastTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstLastTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
swMSTPInstTopChangesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstTopChangesCount.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstTopChangesCount.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
swMSTPInstRemainHops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPInstRemainHops.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstRemainHops.setDescription('.')
swMSTPInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 3, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMSTPInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: swMSTPInstRowStatus.setDescription('This object indicates the RowStatus of this entry.')
swMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4), )
if mibBuilder.loadTexts: swMSTPPortTable.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
swMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1), ).setIndexNames((0, "MSTP-MIB", "swMSTPPort"))
if mibBuilder.loadTexts: swMSTPPortEntry.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
swMSTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPPort.setStatus('current')
if mibBuilder.loadTexts: swMSTPPort.setDescription('The port number of the port for this entry.')
swMSTPPortOperHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPPortOperHelloTime.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortOperHelloTime.setDescription('Is the actual value of the hello time.')
swMSTPPortAdminHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortAdminHelloTime.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortAdminHelloTime.setDescription('The amount of time between the transmission of BPDU by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second.')
swMSTPSTPPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPSTPPortEnable.setStatus('current')
if mibBuilder.loadTexts: swMSTPSTPPortEnable.setDescription('The enabled/disabled status of the port.')
swMSTPPortExternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortExternalPathCost.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortExternalPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST root which include this port.')
swMSTPPortMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortMigration.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortMigration.setDescription('When operating in MSTP mode or RSTP mode, writing TRUE(1) to this object forces this port to transmit MST BPDUs. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
swMSTPPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortAdminEdgePort.setDescription('The value of the Edge Port parameter. A value of TRUE indicates that this port should be assumed as an edge-port and a value of FALSE indicates that this port should be assumed as a non-edge-port')
swMSTPPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortOperEdgePort.setDescription('It is the acuture value of edge port status')
swMSTPPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("true", 0), ("false", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortAdminP2P.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortAdminP2P.setDescription('The point-to-point status of the LAN segment attached to this port.')
swMSTPPortOperP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("true", 0), ("false", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPPortOperP2P.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortOperP2P.setDescription('It is the acture value of P2P status.')
swMSTPPortLBD = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortLBD.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortLBD.setDescription('The enabled/disabled status is used to Loop-back prevention attached to this port.')
swMSTPPortBPDUFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortBPDUFiltering.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortBPDUFiltering.setDescription('The enabled/disabled status is used to BPDU Filtering attached to this port.')
swMSTPPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortRestrictedRole.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortRestrictedRole.setDescription('If TRUE, causes the port not to be selected as Root Port for the CIST or any MSTI, even it has the best spanning tree priority vector.')
swMSTPPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 4, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPPortRestrictedTCN.setStatus('current')
if mibBuilder.loadTexts: swMSTPPortRestrictedTCN.setDescription('If TRUE, causes the port not to propagate received topology change notifications and topology changes to other Ports.')
swMSTPMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5), )
if mibBuilder.loadTexts: swMSTPMstPortTable.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortTable.setDescription('A table that contains port-specific information for the MST Protocol.')
swMSTPMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1), ).setIndexNames((0, "MSTP-MIB", "swMSTPMstPort"), (0, "MSTP-MIB", "swMSTPMstPortInsID"))
if mibBuilder.loadTexts: swMSTPMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortEntry.setDescription('A list of information maintained by every port about the MST state for that port.')
swMSTPMstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPMstPort.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPort.setDescription('The port number of the port for this entry.')
swMSTPMstPortInsID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPMstPortInsID.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortInsID.setDescription('This object indicates the MSTP Instance Id(MSTID).')
swMSTPMstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPMstPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortDesignatedBridge.setDescription('.')
swMSTPMstPortInternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPMstPortInternalPathCost.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortInternalPathCost.setDescription('This is the value of this port to the path cost of paths towards the MSTI root.')
swMSTPMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMSTPMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID..')
swMSTPMstPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("discarding", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("no-stp-enabled", 7), ("err-disabled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPMstPortStatus.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortStatus.setDescription("When the port Enable state is enabled, the port's current state as defined by application of the Spanning Tree Protocol. If the PortEnable is disabled, the the port status will be no-stp-enabled(7); If the port is in error disabled status, the port status will be err-disable(8)")
swMSTPMstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 15, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5), ("nonstp", 6), ("loopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMSTPMstPortRole.setStatus('current')
if mibBuilder.loadTexts: swMSTPMstPortRole.setDescription("When the port Enable state is enabled, the port's current port role as defined by application of the Spanning Tree Protocol. If the Port Enable state is disabled, the the port role will be nonstp(5)")
mibBuilder.exportSymbols("MSTP-MIB", swMSTPPortRestrictedRole=swMSTPPortRestrictedRole, swMSTPPortAdminHelloTime=swMSTPPortAdminHelloTime, swMSTPMstPortTable=swMSTPMstPortTable, swMSTPGblMgmt=swMSTPGblMgmt, swMSTPMstPortInsID=swMSTPMstPortInsID, swMSTPInstTopChangesCount=swMSTPInstTopChangesCount, swMSTPPortTable=swMSTPPortTable, swMSTPStpHelloTime=swMSTPStpHelloTime, swMSTPRevisionLevel=swMSTPRevisionLevel, swMSTPInstVlanRangeList193to256=swMSTPInstVlanRangeList193to256, swMSTPInstDesignatedBridge=swMSTPInstDesignatedBridge, swMSTPInstLastTopologyChange=swMSTPInstLastTopologyChange, swMSTPPortAdminEdgePort=swMSTPPortAdminEdgePort, swMSTPInstVlanRangeList385to448=swMSTPInstVlanRangeList385to448, swMSTPInstRowStatus=swMSTPInstRowStatus, swMSTPPortMigration=swMSTPPortMigration, swMSTPMstPortStatus=swMSTPMstPortStatus, swMSTPPortAdminP2P=swMSTPPortAdminP2P, BridgeId=BridgeId, swMSTPInstVlanRangeList1to64=swMSTPInstVlanRangeList1to64, swMSTPInstRegionalRootBridge=swMSTPInstRegionalRootBridge, swMSTPCtrl=swMSTPCtrl, swMSTPStpForwardDelay=swMSTPStpForwardDelay, swMSTPMstPortEntry=swMSTPMstPortEntry, swMSTPInstMaxAge=swMSTPInstMaxAge, swMSTPInstVlanRangeList129to192=swMSTPInstVlanRangeList129to192, swMSTPMstPortDesignatedBridge=swMSTPMstPortDesignatedBridge, swMSTPInstStatus=swMSTPInstStatus, swMSTPPortOperEdgePort=swMSTPPortOperEdgePort, swMSTPInstVlanRangeList257to320=swMSTPInstVlanRangeList257to320, swMSTPInstRemainHops=swMSTPInstRemainHops, swMSTPStpForwardBPDU=swMSTPStpForwardBPDU, swMSTPPortLBD=swMSTPPortLBD, swMSTPMstPortRole=swMSTPMstPortRole, swMSTPInstType=swMSTPInstType, swMSTPInstInternalRootCost=swMSTPInstInternalRootCost, swMSTPInstVlanRangeList449to512=swMSTPInstVlanRangeList449to512, swMSTPPortBPDUFiltering=swMSTPPortBPDUFiltering, swMSTPMIB=swMSTPMIB, swMSTPInstId=swMSTPInstId, swMSTPInstVlanRangeList65to128=swMSTPInstVlanRangeList65to128, swMSTPPortRestrictedTCN=swMSTPPortRestrictedTCN, swMSTPInstExternalRootCost=swMSTPInstExternalRootCost, swMSTPStpAdminState=swMSTPStpAdminState, swMSTPInstanceCtrlTable=swMSTPInstanceCtrlTable, swMSTPStpLBD=swMSTPStpLBD, swMSTPPortExternalPathCost=swMSTPPortExternalPathCost, swMSTPName=swMSTPName, swMSTPPort=swMSTPPort, swMSTPInstanceCtrlEntry=swMSTPInstanceCtrlEntry, swMSTPMstPortPriority=swMSTPMstPortPriority, swMSTPStpMaxHops=swMSTPStpMaxHops, swMSTPMstPort=swMSTPMstPort, PYSNMP_MODULE_ID=swMSTPMIB, swMSTPStpMaxAge=swMSTPStpMaxAge, swMSTPPortOperP2P=swMSTPPortOperP2P, swMSTPInstRootPort=swMSTPInstRootPort, swMSTPStpLBDRecoverTime=swMSTPStpLBDRecoverTime, swMSTPPortOperHelloTime=swMSTPPortOperHelloTime, swMSTPInstForwardDelay=swMSTPInstForwardDelay, swMSTPMstPortInternalPathCost=swMSTPMstPortInternalPathCost, swMSTPStpTxHoldCount=swMSTPStpTxHoldCount, swMSTPInstVlanRangeList321to384=swMSTPInstVlanRangeList321to384, swMSTPInstPriority=swMSTPInstPriority, swMSTPInstDesignatedRootBridge=swMSTPInstDesignatedRootBridge, swMSTPSTPPortEnable=swMSTPSTPPortEnable, swMSTPStpVersion=swMSTPStpVersion, swMSTPPortEntry=swMSTPPortEntry)
