#
# PySNMP MIB module CISCO-LWAPP-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-AP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
cldRegulatoryDomain, = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-MIB", "cldRegulatoryDomain")
CLApDot11RadioRole, CLDot11Channel, CLApIfType, CLApDot11RadioSubband, CLApAssocFailureReason = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLApDot11RadioRole", "CLDot11Channel", "CLApIfType", "CLApDot11RadioSubband", "CLApAssocFailureReason")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, iso, Counter64, ModuleIdentity, IpAddress, Integer32, Gauge32, ObjectIdentity, MibIdentifier, NotificationType, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Counter64", "ModuleIdentity", "IpAddress", "Integer32", "Gauge32", "ObjectIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, DisplayString, TextualConvention, TruthValue, TimeInterval, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue", "TimeInterval", "TimeStamp", "RowStatus")
ciscoLwappApMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 513))
ciscoLwappApMIB.setRevisions(('2012-06-13 00:00', '2011-02-07 00:00', '2011-01-21 00:00', '2011-01-10 00:00', '2010-12-13 00:00', '2010-08-19 00:00', '2007-01-03 00:00', '2006-07-18 00:00', '2006-03-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappApMIB.setRevisionsDescriptions(('Added ciscoLwappDot11IfAntennaGroup and ciscoLwappRetransmitGroup', "Addressed Approver's comments.", "Addressed reviwer's comments.", "Addressed reviewer's comments.", "Addressed Reviwer's comments", 'Added cLApGlobal, cLApCredentials, cLSpectrum, cLAp802dot1xSupplicant mib objects. Added link latency tables, cLApEncryptionEnable. cLApDot11RadioTable have been added to provide support for subband radios. AP uptime, join time, join taken time and Ethernet slot info have been added to clApTable. cLApEthernetIfTable which provides Ethernet interface status and statistics information has been added. The group ciscoLwappApGroupSup3, ciscoLwappApGroupSup4, ciscoLwappApNotifObjsGroup and ciscoLwappApNotifsGroup have been added.', 'The object cLApName has been added.', 'Added cLApEntPhysicalIndex object.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappApMIB.setLastUpdated('201206130000Z')
if mibBuilder.loadTexts: ciscoLwappApMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappApMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappApMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB provides configuration and status information about the 802.11 Access Points that have joined the controller. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected. Basic Service Set Identifier (BSSID) The identifier for the service set comprising of all the 802.11 stations under the control of one coordinating Access Point. This identifier happens to be the MAC address of the dot11 radio interface of the Access Point. The wireless clients that associate with the Access Point get the wired uplink through this particular dot11 interface. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Station Management (SMT) This term refers to the internal management of the 802.11 protocol operations by the AP to work cooperatively with the other APs and 802.11 devices in the network. Link Latency Latency is round trip time between AP and controller. There is a continuous heart-beat between AP and controller. AP calculates latency for each time and sends to controller. AMSDU Aggregate MAC Service Data Unit. A structure containing multiple MSDUs, transported within a single (unfragmented) or multiple (fragmented) Data MPDU. DTLS Datagram Transport Layer Security (DTLS) protocol provides communications privacy for datagram protocols. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. WIPS Wireless Intrusion Prevention System (WIPS) is a network device that monitors the radio spectrum for the presence of unauthorized access points (intrusion detection), and can automatically take countermeasures (intrusion prevention). SE Spectrum Expert is an application software, which when connected to Spectrum Intelligent Access Point, provides detailed RF spectrum plots and data, and assist in diagnosing network problems. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol.")
ciscoLwappApMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 0))
ciscoLwappApMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1))
ciscoLwappApMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 2))
ciscoLwappApMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 3))
ciscoLwappAp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1))
ciscoLwappApIf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2))
ciscoLwappApGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3))
ciscoLwappApCredentials = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4))
ciscoLwappLinkLatency = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5))
ciscoLwappSpectrum = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6))
ciscoLwappAp802dot1xSupplicant = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7))
cLApTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1), )
if mibBuilder.loadTexts: cLApTable.setStatus('current')
if mibBuilder.loadTexts: cLApTable.setDescription('This table represents the information about the 802.11 LWAPP Access Points that have joined the controller. LWAPP APs exchange configuration messages with the controller and get the required configuration for their 802.11 related operations, after they join the controller.')
cLApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApEntry.setStatus('current')
if mibBuilder.loadTexts: cLApEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Access Point that has joined the controller. Entries are removed when the APs lose their association with the controller due to loss of communication.')
cLApSysMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cLApSysMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLApSysMacAddress.setDescription('This object represents the radio MAC address common to the dot11 interfaces of the AP and uniquely identifies an entry in this table.')
cLApIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApIfMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLApIfMacAddress.setDescription('This object represents the Ethernet MAC address of the AP.')
cLApMaxNumberOfDot11Slots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApMaxNumberOfDot11Slots.setStatus('current')
if mibBuilder.loadTexts: cLApMaxNumberOfDot11Slots.setDescription('This object represents the maximum number of 802.11 radio interface slots in this AP.')
cLApEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cLApEntPhysicalIndex.setDescription('This object provides the index value in the entPhysicalEntry corresponding to this AP.')
cLApName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApName.setStatus('current')
if mibBuilder.loadTexts: cLApName.setDescription('This object represents the administrative name assigned to the AP by the user. If an AP is not configured, its factory default name will be ap:<last three byte of MACAddress> eg. ap:af:12:be.')
cLApUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApUpTime.setStatus('current')
if mibBuilder.loadTexts: cLApUpTime.setDescription('This object represents the time in hundredths of a second since the last time the AP rebooted.')
cLLwappUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLLwappUpTime.setStatus('current')
if mibBuilder.loadTexts: cLLwappUpTime.setDescription('This object represents the time in hundredths of a second since the last time the AP joined the controller.')
cLLwappJoinTakenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLLwappJoinTakenTime.setStatus('current')
if mibBuilder.loadTexts: cLLwappJoinTakenTime.setDescription('This object represents the time taken in hundredths of a second for the AP to join the controller. This could be a significant value in Mesh environments.')
cLApMaxNumberOfEthernetSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApMaxNumberOfEthernetSlots.setStatus('current')
if mibBuilder.loadTexts: cLApMaxNumberOfEthernetSlots.setDescription('This object represents the maximum number of Ethernet slots in this AP.')
cLApPrimaryControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPrimaryControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: cLApPrimaryControllerAddressType.setDescription("This object represents the type of the primary controller's address made available through cLApPrimaryControllerAddress.")
cLApPrimaryControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPrimaryControllerAddress.setStatus('current')
if mibBuilder.loadTexts: cLApPrimaryControllerAddress.setDescription('This object represents the address of the primary controller that the APs will join.')
cLApSecondaryControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 12), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApSecondaryControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: cLApSecondaryControllerAddressType.setDescription("This object represents the type of the secondary controller's address made available through cLApSecondaryControllerAddress.")
cLApSecondaryControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApSecondaryControllerAddress.setStatus('current')
if mibBuilder.loadTexts: cLApSecondaryControllerAddress.setDescription('This object represents the address of the secondary controller that the APs will join.')
cLApTertiaryControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 14), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTertiaryControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: cLApTertiaryControllerAddressType.setDescription("This object represents the type of the tertiary controller's address made available through cLApTertiaryControllerAddress.")
cLApTertiaryControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 15), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTertiaryControllerAddress.setStatus('current')
if mibBuilder.loadTexts: cLApTertiaryControllerAddress.setDescription('This object represents the address of the tertiary controller that the APs will join.')
cLApLastRebootReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("none", 0), ("dot11gModeChange", 1), ("ipAddressSet", 2), ("ipAddressReset", 3), ("rebootFromController", 4), ("dhcpFallbackFail", 5), ("discoveryFail", 6), ("noJoinResponse", 7), ("denyJoin", 8), ("noConfigResponse", 9), ("configController", 10), ("imageUpgradeSuccess", 11), ("imageOpcodeInvalid", 12), ("imageCheckSumInvalid", 13), ("imageDataTimeout", 14), ("configFileInvalid", 15), ("imageDownloadError", 16), ("rebootFromConsole", 17), ("rapOverAir", 18), ("powerLow", 19), ("crash", 20), ("powerHigh", 21), ("powerLoss", 22), ("powerChange", 23), ("componentFailure", 24), ("watchdog", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLastRebootReason.setStatus('current')
if mibBuilder.loadTexts: cLApLastRebootReason.setDescription('This object represents the reason for the last reboot of the AP. none - ap reported a reboot reason code unknown to the controller. dot11gModeChange - 11g mode change ipAddressSet - set static ip address ipAddressReset - reset static ip address rebootFromController - ap reboot initiated from controller dhcpFallbackFail - could not fallback to dhcp discoveryFail - could not send discovery noJoinResponse - did not receive join response denyJoin - deny join attempt at the controller noConfigResponse - did not get config response configController - found configured or master controller imageUpgradeSuccess - image upgraded successfully imageOpcodeInvalid - invalid image data opcode imageCheckSumInvalid - invalid image md5 checksum imageDataTimeout - image data message timeout configFileInvalid - invalid config file imageDownloadError - image download process error rebootFromConsole - reboot command from ap console rapOverAir - root access point is connected over the air brownout - ap rebooted due to power failure powerLow - ap rebooted dued to low power also called as brownout crash - crashed due to software failure powerHigh - rebooted due to power spike powerLoss - rebooted due to power loss powerChange - rebooted due to change in power source componentFailure - rebooted due to component failure watchdog - rebooted due to watch dog timer reset.')
cLApEncryptionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEncryptionEnable.setStatus('current')
if mibBuilder.loadTexts: cLApEncryptionEnable.setDescription("This object specifies whether encyrption between controller and AP is enabled or not. Encryption can only be enabled if ESM card in controller is pluged in. A value of 'true' enables encryption between controller and AP. A value of 'false' disables encryption between controller and AP.")
cLApFailoverPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("critical", 4))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApFailoverPriority.setStatus('current')
if mibBuilder.loadTexts: cLApFailoverPriority.setDescription('This object represents the AP failover priority for an AP. If a higher priority AP wishes to join the controller, it will be given preference over a join request from a lower priority AP. Also if the number of AP joined has reached the limit that the controller can support then the controller can disassociate an already joined lower priority AP. This priority will be considered only if the cLApGlobalFailoverPriority is Enabled on the controller.')
cLApPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("low", 1), ("fifteendotfour", 2), ("sixteendoteight", 3), ("full", 4), ("external", 5), ("mixedmode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApPowerStatus.setStatus('current')
if mibBuilder.loadTexts: cLApPowerStatus.setDescription('This object represents the power status of the AP low - The AP is drawing low power from Ethernet fifteendotfour - The AP is drawing 15.4 watts from Ethernet sixteendoteight - The AP is drawing 16.8 watts from Ethernet full - The power is high enough for normal operation of the AP. The power source could be Ethernet or external external - The power source is not from Ethernet. mixedmode - The power is high enough for operation of AP. In this state one radio will operate in full power mode while the other radio will be powered off.')
cLApTelnetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTelnetEnable.setStatus('current')
if mibBuilder.loadTexts: cLApTelnetEnable.setDescription("This object specifies whether Telnet session can be established to the AP. A value of 'true' indicates an Telnet session can be established to the AP. A value of 'false' indicates an Telnet session cannot be established to the AP.")
cLApSshEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApSshEnable.setStatus('current')
if mibBuilder.loadTexts: cLApSshEnable.setDescription("This object specifies whether SSH session can be established to the AP. A value of 'true' indicates an SSH session can be established to the AP. A value of 'false' indicates an SSH session cannot be established to the AP.")
cLApPreStdStateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPreStdStateEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApPreStdStateEnabled.setDescription("This object represents whether the Pre-Standard state of the AP is enabled or disabled. A value of 'true' denotes that the Pre-Standard state of the AP is enabled, A value of 'false' denotes that the Pre-Standard state of the AP is disabled")
cLApPwrInjectorStateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPwrInjectorStateEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApPwrInjectorStateEnabled.setDescription("This object represents whether the Power Injector state of the AP is enabled or disabled. A value of 'true' denotes that the Power Injector state of the AP is enabled, A value of 'false' denotes that the Power Injector state of the AP is disabled")
cLApPwrInjectorSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("installed", 2), ("override", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPwrInjectorSelection.setStatus('current')
if mibBuilder.loadTexts: cLApPwrInjectorSelection.setDescription("This object specifies the Power Injector selection value of the AP. 'unknown' - is returned if 'cLApPwrInjectorStateEnabled'is set to false. 'installed' - configure the MAC address of the switch port that has a Power Injector. 'override' - override the safety checks and assume a Power Injector is always installed.")
cLApPwrInjectorSwMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPwrInjectorSwMacAddr.setStatus('current')
if mibBuilder.loadTexts: cLApPwrInjectorSwMacAddr.setDescription("This object represents the Mac address of the switch port that has a power Injector and is valid only when the 'cLApPwrInjectorSelection' is in 'installed' mode. if SET to 00:00:00:00:00:00, AP will detect the MAC address of the current switch port that has a Power Injector")
cLApWipsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApWipsEnable.setStatus('current')
if mibBuilder.loadTexts: cLApWipsEnable.setDescription("This object represents if this AP is used as WIPS AP. A value of 'true' indicates that this AP is a WIPS AP. A value of 'false' indicates that this AP is not a WIPS AP. This applies only when the AP is either in local or monitor mode.")
cLApMonitorModeOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("tracking", 2), ("wips", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApMonitorModeOptimization.setStatus('current')
if mibBuilder.loadTexts: cLApMonitorModeOptimization.setDescription('This object represents the monitor mode optimization on this device. all - All optimization is enabled tracking - Tracking is optimized wips - WIPS optimization is enabled none - No optimization is enabled')
cLApDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 29), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDomainName.setStatus('current')
if mibBuilder.loadTexts: cLApDomainName.setDescription('This represents the domain, to which the AP belongs. This attribute can be configured only if the static IP option is turned on in the AP.')
cLApNameServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 30), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNameServerAddressType.setStatus('current')
if mibBuilder.loadTexts: cLApNameServerAddressType.setDescription('This represents the type of the IP address of the name server, made available through cLApNameServerAddress.')
cLApNameServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 31), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNameServerAddress.setStatus('current')
if mibBuilder.loadTexts: cLApNameServerAddress.setDescription('This represents the IP Address of the name server. This attribute can be configured only if the static IP option is turned on in the AP.')
cLApAMSDUEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApAMSDUEnable.setStatus('current')
if mibBuilder.loadTexts: cLApAMSDUEnable.setDescription("This object specifies the AMSDU status. A value of 'true' turns on the AMSDU. A value of 'false' turns off the AMSDU.")
cLApEncryptionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEncryptionSupported.setStatus('current')
if mibBuilder.loadTexts: cLApEncryptionSupported.setDescription("This object specifies whether AP Supports DTLS encryption. A value of 'true' indicates encryption is supported. A value of 'false' indicates encryption is not supported.")
cLApRogueDetectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApRogueDetectionEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApRogueDetectionEnabled.setDescription("This object specifies whether Rogue Detection is enabled in this AP. A value of 'true' enables Rogue Detection. A value of 'false' disables Rogue Detection. Rogue detection is not supported on sniffer and rogue detector mode APs.")
cLApTcpMss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(536, 1363), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApTcpMss.setStatus('current')
if mibBuilder.loadTexts: cLApTcpMss.setDescription('This object specifies the TCP Maximum Segment Size for this AP. Permissible value are between 536 and 1363. This will also enable the TCP MSS flag for this AP. Value of 0 will disable the TCP MSS flag for this AP. Any change of value for cLApGlobalTcpMss will be reflected to this object. Value for this object can be change only when value of cLApGlobalTcpMss is set as 0.')
cLApDataEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 36), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataEncryptionStatus.setStatus('current')
if mibBuilder.loadTexts: cLApDataEncryptionStatus.setDescription("This object specifies the data encryption status of AP. A value of 'true' means data is encrypted between AP and WLC. A value of 'false' means data is Plain Text between AP and WLC.")
cLApNsiKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApNsiKey.setStatus('current')
if mibBuilder.loadTexts: cLApNsiKey.setDescription('This object specifies the Network Spectrum Interface Key used when the AP is in Spectrum Expert Only Monitor Mode (SOMM).This object returns a non-zero value only when the AP is SOMM mode.')
cLApAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cLApAdminStatus.setDescription("This object specifies the Admin State of the AP, A value of 'true' enables the Admin State. A value of 'false' disables the Admin State.")
cLApPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 39), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApPortNumber.setStatus('current')
if mibBuilder.loadTexts: cLApPortNumber.setDescription("This object specifies the port number on which the AP's traffic is coming through.")
cLApRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 40), Unsigned32()).setUnits('retries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApRetransmitCount.setStatus('current')
if mibBuilder.loadTexts: cLApRetransmitCount.setDescription('This object specifies the retransmission count for the Access Point Control Packet.This value represents the number of packets retransmitted after which the Access Point falls back to another controller in case of failover. The global retransmit parameters are applicable for all Access Points within a controller. The individual paramters per Access Point, if configured takes precedence over the global values. If an AccessPoint falls back from another controller(in case of failover), the values at the AP level has more precedence over the global values in the controller with which it has joined.')
cLApRetransmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 1, 1, 41), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApRetransmitTimeout.setStatus('current')
if mibBuilder.loadTexts: cLApRetransmitTimeout.setDescription('This object specifies the retransmission timeout for the Access Point Control packet. This value represents the timeout for each retransmission, during the fallback of Access Point to another controller in case of failover. The global retransmit parameters are applicable for all Access Points within a controller. The individual paramters per Access Point, if configured takes precedence over the global values. If an AccessPoint falls back from another controller(in case of failover), the values at the AP level has more precedence over the global values in the controller with which it has joined.')
cLApDot11IfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1), )
if mibBuilder.loadTexts: cLApDot11IfTable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfTable.setDescription('This table represents the information about the basic functional parameters corresponding to the dot11 interfaces of the APs that have joined the controller.')
cLApDot11IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApDot11IfEntry.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfEntry.setDescription('An entry in this table represents the 802.11 functional parameters of the dot11 interface of an AP that has joined the controller. Entries are added when the APs associate to this controller and deleted when they lose their association.')
cLApDot11IfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLApDot11IfSlotId.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfSlotId.setDescription('This object represents the slot ID of a dot11 interface on an AP. The slot ID for a particular dot11 interface as represented by this object ranges from 0 to cLApMaxNumberOfDot11Slots - 1.')
cLApDot11IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 2), CLApIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11IfType.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfType.setDescription('This object represents the type of this dot11 interface.')
cLApDot11IfRegDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11IfRegDomain.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfRegDomain.setDescription('This object indicates the regulatory domain for this radio type on this AP.')
cLApDot11nSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11nSupport.setStatus('current')
if mibBuilder.loadTexts: cLApDot11nSupport.setDescription('This objects indicates whether 802.11n support is available on this AP.')
cLAp11nChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("forty", 4)))).setUnits('mhz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp11nChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLAp11nChannelBandwidth.setDescription('This object indicates the channel bandwidth for this AP. This applies to 802.11n networks only.')
cLApLomEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cLApLomEnabled.setDescription("This object indicates whether this AP is being monitored by the location server. A value of 'true' indicates that the monitoring is enabled. A value of 'false' indicates that the monitoring is disabled.")
cLApLomFirstChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 7), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomFirstChannel.setStatus('current')
if mibBuilder.loadTexts: cLApLomFirstChannel.setDescription('This object represents the first location channel that is being monitored.')
cLApLomSecondChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 8), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomSecondChannel.setStatus('current')
if mibBuilder.loadTexts: cLApLomSecondChannel.setDescription('This object represents the second location channel that is being monitored.')
cLApLomThirdChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 9), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomThirdChannel.setStatus('current')
if mibBuilder.loadTexts: cLApLomThirdChannel.setDescription('This object represents the third location channel that is being monitored.')
cLApLomFourthChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 10), CLDot11Channel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLomFourthChannel.setStatus('current')
if mibBuilder.loadTexts: cLApLomFourthChannel.setDescription('This object represents the fourth location channel that is being monitored.')
cLApExtensionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 11), CLDot11Channel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApExtensionChannel.setStatus('current')
if mibBuilder.loadTexts: cLApExtensionChannel.setDescription('This object represents the extension channel. This is applicable when the channel bandwidth is set to 40mhz.')
cLApLegacyBeamForming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLegacyBeamForming.setStatus('current')
if mibBuilder.loadTexts: cLApLegacyBeamForming.setDescription("This object indicates the status of legacy beam forming in this AP. This object is applicable only for 11n supported APs. For APs that does not support legacy beam forming, a get request on this attribute will return the value 'notApplicable'. A value of 'enable' indicates that the legacy Beam forming is enabled in this AP. A value of 'false' indicates that the legacy Beam forming is disabled in this AP.")
cLApCdpOverAirEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCdpOverAirEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApCdpOverAirEnabled.setDescription("This object indicates the status of Cisco Discovery Protocol(CDP) in this interface, represented by cLApDot11IfSlotId of the AP, represented by cLApSysMacAddress. A value of 'true' indicates that CDP is enabled in the dot11 interface(s) of this AP. A value of 'false' indicates that CDP is disabled in the dot11 interface(s) of this AP.")
cLApDot11IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAdminStatus.setDescription("This object represents the AP's interface admin status. A value of 'true' indicates admin state as Up. A value of 'false' indicates admin state as Down.")
cLApEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2), )
if mibBuilder.loadTexts: cLApEthernetIfTable.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfTable.setDescription('This table represents the information about the basic functional parameters corresponding to the Ethernet interfaces of the APs that have joined the controller.')
cLApEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"))
if mibBuilder.loadTexts: cLApEthernetIfEntry.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfEntry.setDescription('An entry in this table represents the functional parameters of the Ethernet interface of an AP that has joined the controller. Entries are added when the APs associate to this controller and deleted when they lose their association.')
cLApEthernetIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLApEthernetIfSlotId.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfSlotId.setDescription('This object represents the slot ID of an Ethernet interface on an AP. The slot ID for a particular Ethernet interface as represented by this object ranges from 0 to cLApMaxNumberOfEthernetSlots - 1.')
cLApEthernetIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfName.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfName.setDescription('This object represents the name of the Ethernet interface.')
cLApEthernetIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfMacAddress.setDescription('This object represents MAC address of the Ethernet interface in the slot represented by cLApEthernetIfSlotId.')
cLApEthernetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEthernetIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfAdminStatus.setDescription('This object represents the admin state of the physical Ethernet interface on the AP.')
cLApEthernetIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOperStatus.setDescription('This object represents the operational state of the physical Ethernet interface on the AP.')
cLApEthernetIfRxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfRxUcastPkts.setDescription('This object represents total number of unicast packets received on the interface.')
cLApEthernetIfRxNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRxNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfRxNUcastPkts.setDescription('This object represents total number of non-unicast or multicast packets received on the interface')
cLApEthernetIfTxUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfTxUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfTxUcastPkts.setDescription('This object represents total number of unicast packets transmitted on the interface.')
cLApEthernetIfTxNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfTxNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfTxNUcastPkts.setDescription('This object represents total number of non-unicast or multicast packets transmitted on the interface')
cLApEthernetIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("halfduplex", 2), ("fullduplex", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfDuplex.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfDuplex.setDescription("This object represents interface's duplex mode")
cLApEthernetIfLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfLinkSpeed.setDescription('Speed of the interface in units of 1,000,000 bits per second')
cLApEthernetIfPOEPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("drawn", 2), ("notdrawn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfPOEPower.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfPOEPower.setDescription('This object represents whether this interface supports Power Over Ethernet (POE) none - POE is not supported drawn - This interface supports POE, and power is being drawn notdrawn - POE power is not drawn')
cLApEthernetIfRxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 13), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRxTotalBytes.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfRxTotalBytes.setDescription('This object represents total number of bytes in the error-free packets received on the interface.')
cLApEthernetIfTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 14), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfTxTotalBytes.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfTxTotalBytes.setDescription('This object represents total number of bytes in the error-free packets transmitted on the interface.')
cLApEthernetIfInputCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputCrc.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputCrc.setDescription('This object represents total number of CRC error in packets received on the interface.')
cLApEthernetIfInputAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputAborts.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputAborts.setDescription('This object represents total number of packet aborted while receiving on the interface.')
cLApEthernetIfInputErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputErrors.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputErrors.setDescription('This object represents sum of all errors in the packets while receiving on the interface.')
cLApEthernetIfInputFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputFrames.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputFrames.setDescription('This object represents total number of packet received incorrectly having a CRC error and a noninteger number of octets on the interface.')
cLApEthernetIfInputOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputOverrun.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputOverrun.setDescription("This object represents the number of times the receiver hardware was incapable of handing received data to a hardware buffer because the input rate exceeded the receiver's capability to handle the data.")
cLApEthernetIfInputDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputDrops.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputDrops.setDescription('This object represents total number of packets dropped while receiving on the interface because the queue was full.')
cLApEthernetIfInputResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfInputResource.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfInputResource.setDescription('This object represents total number of resource errors in packets received on the interface.')
cLApEthernetIfUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfUnknownProtocol.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfUnknownProtocol.setDescription('This object represents total number of packet discarded on the interface due to unknown protocol.')
cLApEthernetIfRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfRunts.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfRunts.setDescription("This object represents number of packets that are discarded because they are smaller than the medium's minimum packet size.")
cLApEthernetIfGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfGiants.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfGiants.setDescription("This object represents number of packets that are discarded because they exceed the medium's maximum packet size.")
cLApEthernetIfThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfThrottle.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfThrottle.setDescription('This object represents total number of times the interface advised a sending NIC that it was overwhelmed by packets being sent and to slow the pace of delivery.')
cLApEthernetIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfResets.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfResets.setDescription('This object represents number of times that an interface has been completely reset.')
cLApEthernetIfOutputCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputCollision.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOutputCollision.setDescription('This object represents total number of packet retransmitted due to an Ethernet collision.')
cLApEthernetIfOutputNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputNoBuffer.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOutputNoBuffer.setDescription('This object represents total number of packets discarded because there was no buffer space.')
cLApEthernetIfOutputResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 29), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputResource.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOutputResource.setDescription('This object represents total number of resource errors in packets transmitted on the interface.')
cLApEthernetIfOutputUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 30), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputUnderrun.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOutputUnderrun.setDescription('This object represents the number of times the transmitter has been running faster than the router can handle.')
cLApEthernetIfOutputErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 31), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputErrors.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOutputErrors.setDescription('This object represents sum of all errors that prevented the final transmission of packets out of the interface.')
cLApEthernetIfOutputTotalDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 32), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApEthernetIfOutputTotalDrops.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfOutputTotalDrops.setDescription('This object represents total number of packets dropped while transmitting from the interface because the queue was full.')
cLApEthernetIfCdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 2, 1, 33), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApEthernetIfCdpEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApEthernetIfCdpEnabled.setDescription("This object indicates the status of Cisco Discovery Protocol(CDP) in this interface represented by cLApEthernetIfSlotId of the AP represented by cLApSysMacAddress. A value of 'true' indicates that CDP is enabled in this interface. A value of 'false' indicates that CDP is disabled in this interface.")
cLApDot11RadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3), )
if mibBuilder.loadTexts: cLApDot11RadioTable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioTable.setDescription('This table represents the information about the basic functional parameters of the radios of the APs that have joined the controller.')
cLApDot11RadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApDot11RadioEntry.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioEntry.setDescription('An entry in this table represents the 802.11 functional parameters of the radio of an AP that has joined the controller. Entries are added when the APs associate to this controller and deleted when they lose their association.')
cLApDot11RadioMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioMACAddress.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioMACAddress.setDescription('This object represents the base Mac address of the radio.')
cLApDot11RadioSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 2), CLApDot11RadioSubband()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioSubBand.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioSubBand.setDescription('This object indicates the sub band on which this radio operates.')
cLApDot11RadioVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioVersion.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioVersion.setDescription('This attribute identifies firmware version of the radio.')
cLApDot11IsBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11IsBackhaul.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IsBackhaul.setDescription('This object represents whether this interface is backhaul radio or not.')
cLApDot11RadioRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 3, 1, 5), CLApDot11RadioRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDot11RadioRole.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioRole.setDescription('This attribute identifies role of the radio.')
cLApCredentialGlobalUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCredentialGlobalUserName.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialGlobalUserName.setDescription('This object represents the global username for all the APs already joined or will join the controller. This user name is used to access the console on the AP.')
cLApCredentialGlobalPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCredentialGlobalPassword.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialGlobalPassword.setDescription('This object represents the password corresponding to the user name represented by cLApCredentialGlobalUserName object.')
cLApCredentialGlobalSecret = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCredentialGlobalSecret.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialGlobalSecret.setDescription('This object represents the secret key for all the APs already joined or will join the controller. This provides read-write access to the console on the AP.')
cLApCredentialsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4), )
if mibBuilder.loadTexts: cLApCredentialsTable.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialsTable.setDescription('This table provides the information about the credentials of the 802.11 LWAPP Access Points that have joined the controller. Rows are added to this table whenever, new APs are joined to this controller, and rows are deleted whenever APs gets disjoined from the controller.')
cLApCredentialsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApCredentialsEntry.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialsEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Access Point that has joined the controller. cLApSysMacAddress is the index which uniquely identifies every row in the table.')
cLApCredentialUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialUserName.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialUserName.setDescription('This object represents the username for this AP.')
cLApCredentialPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialPassword.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialPassword.setDescription('This object represents the password corresponding to user name represented by cLApCredentialUserName object.')
cLApCredentialSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialSecret.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialSecret.setDescription('This object represents the secret key for the specific AP. This provides the read-write access on the console for this AP.')
cLApCredentialEnableGlobalCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 4, 4, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApCredentialEnableGlobalCredentials.setStatus('current')
if mibBuilder.loadTexts: cLApCredentialEnableGlobalCredentials.setDescription("This object specifies whether the global credentials for the AP is enabled or disabled. A value of 'true' enables the global username/password to be used for this AP and 'false' disables the global credentials and uses the credentials specific for this AP.")
cLApLinkLatencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1), )
if mibBuilder.loadTexts: cLApLinkLatencyTable.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyTable.setDescription('This table represents the link latency configuration for each AP. An entry is automatically added to this table when an Access Points Joins controller. Entry is removed from this table when AP disassociates from the controllers.')
cLApLinkLatencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApLinkLatencyEntry.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyEntry.setDescription('Each entry in this table provides configuration related to Link latency on each AP.')
cLApLinkLatencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLinkLatencyEnable.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyEnable.setDescription("This object can be used to configure the Link Latency on the AP. A value of 'true' indicates that the Link Latency is enabled. A value of 'false' indicates that the Link Latency is disabled.")
cLApLinkLatencyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApLinkLatencyReset.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyReset.setDescription('This object can be used to reset the Link Latency stored at controller for an AP. A value of true indicates that the Link Latency stats is to be reset. A value of false on this during set will return error. A value of false will be returned on get.')
cLApLinkLatencyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2), )
if mibBuilder.loadTexts: cLApLinkLatencyStatsTable.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyStatsTable.setDescription("This table represents the link latency statistics calculated for each AP. An entry is automatically added by the controller when a 'cLApLinkLatencyEnable' is enabled on an Access Point. Entry is deleted when 'cLApLinkLatencyEnable' is disabled on the Access Point.")
cLApLinkLatencyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApLinkLatencyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyStatsEntry.setDescription('Each entry in this table provides minimum, maximum and average Link latency for a Access Point. Entries are removed when the Link Latency is disabled on a Access Point.')
cLApLinkLatencyStatsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 1), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyStatsCurrent.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyStatsCurrent.setDescription('This object represent the current Link latency recorded for this Access point.')
cLApLinkLatencyStatsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 2), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyStatsMin.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyStatsMin.setDescription('This object represent the minimum Link latency recorded for this Access point.')
cLApLinkLatencyStatsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 3), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyStatsMax.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyStatsMax.setDescription('This object represent the maximum Link latency recorded for this Access point.')
cLApLinkLatencyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 4), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApLinkLatencyTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cLApLinkLatencyTimeStamp.setDescription("This object represents the timestamp, when the values are collected, as returned by the object 'cLApUpTime'.")
cLApDataLinkLatencyStatsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 5), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsCurrent.setStatus('current')
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsCurrent.setDescription('This object represent the current Data Link latency recorded for this Access point.')
cLApDataLinkLatencyStatsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 6), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsMin.setStatus('current')
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsMin.setDescription('This object represent the minimum Data Link latency recorded for this Access point.')
cLApDataLinkLatencyStatsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 7), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsMax.setStatus('current')
if mibBuilder.loadTexts: cLApDataLinkLatencyStatsMax.setDescription('This object represent the maximum Data Link latency recorded for this Access point.')
cLApDataLinkLatencyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 5, 2, 1, 8), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApDataLinkLatencyTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cLApDataLinkLatencyTimeStamp.setDescription("This object represents the timestamp, when the values are collected, as returned by the object 'cLApUpTime'.")
cLApIfSmtParamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 2), )
if mibBuilder.loadTexts: cLApIfSmtParamTable.setStatus('current')
if mibBuilder.loadTexts: cLApIfSmtParamTable.setDescription('This table represents the station management information in the APs that have joined the controller. Information populated through the entries of this table is used by the AP to perform the expected 802.11 operations on the respective dot11 interfaces to coordinate with other 802.11 devices in the network. Since this table has the indices defined in the tables cLApTable and cLApDot11IfTable, an entry in this table is automatically removed when the respective entry is removed in either of those tables.')
cLApIfSmtParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApIfSmtParamEntry.setStatus('current')
if mibBuilder.loadTexts: cLApIfSmtParamEntry.setDescription('An entry in this table represents the information pertaining to one particular dot11 interface of this AP used to perform the 802.11 protocol operations on the respective dot11 interface. Rows are added or deleted to this table when APs join or leave the controller respectively.')
cLApIfSmtDot11Bssid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApIfSmtDot11Bssid.setStatus('current')
if mibBuilder.loadTexts: cLApIfSmtDot11Bssid.setDescription('This object defines the base BSSID of this AP, which is the MAC address of the radio interface of this AP.')
cLApCountryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3), )
if mibBuilder.loadTexts: cLApCountryTable.setStatus('current')
if mibBuilder.loadTexts: cLApCountryTable.setDescription('This table represents the country settings for the 802.11 LWAPP Access Points that have joined the controller. An entry is automatically added by the controller when a Access Point joins the controller. The entry is removed when Access Point disasscociates from the controller.')
cLApCountryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLApCountryEntry.setStatus('current')
if mibBuilder.loadTexts: cLApCountryEntry.setDescription('Each entry in this table provides country setting about one 802.11 LWAPP Access Point that has joined the controller. Entries are removed when the APs lose their association with the controller due to loss of communication.')
cLApCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApCountryCode.setStatus('current')
if mibBuilder.loadTexts: cLApCountryCode.setDescription('This attribute identifies the country in which the AP is operating. This value is the 3 letter country code.')
cLApCountryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApCountryAllowed.setStatus('current')
if mibBuilder.loadTexts: cLApCountryAllowed.setDescription('This attribute identifies the country in which the AP is operating. This value is a list of country codes sperated by comma.')
ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled.setDescription("The object to control the generation of ciscoLwappApIfRegulatoryDomainMismatchNotif notification. A value of 'true' indicates that the agent generates ciscoLwappApIfRegulatoryDomainMismatchNotif notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappApIfRegulatoryDomainMismatchNotif notification.")
ciscoLwappApCrashEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApCrashEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApCrashEnabled.setDescription("The object to control the generation of ciscoLwappApCrash notification. A value of 'true' indicates that the agent generates ciscoLwappApCrash notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappApCrash notification.")
ciscoLwappApUnsupportedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApUnsupportedEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApUnsupportedEnabled.setDescription("The object to control the generation of ciscoLwappApUnsupported notification. A value of 'true' indicates that the agent generates ciscoLwappApUnsupported notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappApUnsupported notification.")
ciscoLwappApAssociatedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappApAssociatedEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApAssociatedEnabled.setDescription("The object to control the generation of ciscoLwappApAssociated notification. A value of 'true' indicates that the agent generates ciscoLwappApAssociated notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappApAssociated notification.")
cLApSeClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8), )
if mibBuilder.loadTexts: cLApSeClientTable.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientTable.setDescription('This table represents the information about the details of Spectrum Expert client connected to radio interface of APs')
cLApSeClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-AP-MIB", "cLApSeIndex"))
if mibBuilder.loadTexts: cLApSeClientEntry.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientEntry.setDescription('An entry in this table represents the details of Spectrum Expert client connected to APs')
cLApSeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: cLApSeIndex.setStatus('current')
if mibBuilder.loadTexts: cLApSeIndex.setDescription('This object indicates the index of the client running the Spectrum Expert instance.')
cLApSeClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientUserName.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientUserName.setDescription('This object indicates the name of the client running the Spectrum Expert application')
cLApSeClientIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientIPAddrType.setDescription('This object indicates the client IP address type, that runs the SE application, made available through cLApSeClientIPAddr')
cLApSeClientIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientIPAddr.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientIPAddr.setDescription('This object indicates the client IP address, that runs the SE application')
cLApSeClientDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientDuration.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientDuration.setDescription('This object indicates the duration for which the SE client application has been up and running')
cLApSeClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 8, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApSeClientPort.setStatus('current')
if mibBuilder.loadTexts: cLApSeClientPort.setDescription('This object indicates the port from which the SE client application is running')
cLApFastHbTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1), )
if mibBuilder.loadTexts: cLApFastHbTimerTable.setStatus('current')
if mibBuilder.loadTexts: cLApFastHbTimerTable.setDescription('This table contains entries for AP fast heartbeat timers configured in the controller. At startup, all the entries in this table are set up by the central controller. A management application can later change the values in this table.')
cLApFastHbTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApFastHbTimerApType"))
if mibBuilder.loadTexts: cLApFastHbTimerEntry.setStatus('current')
if mibBuilder.loadTexts: cLApFastHbTimerEntry.setDescription('A conceptual row in cLApFastHbTimerTable. There is an entry in this table for each AP type, as identified by a value of cLApFastHbTimerApType.')
cLApFastHbTimerApType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("hreap", 2))))
if mibBuilder.loadTexts: cLApFastHbTimerApType.setStatus('current')
if mibBuilder.loadTexts: cLApFastHbTimerApType.setDescription('This object represents the AP type for this entry. local - indicates that timer is for local mode APs hreap - indicates that timer is for HREAP APs')
cLApFastHbTimerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApFastHbTimerTimeout.setStatus('current')
if mibBuilder.loadTexts: cLApFastHbTimerTimeout.setDescription("This object represents the timeout value for the heart beat timer. This value changes to 0 when cLApFastHbTimerEnabled is set to 'false'.")
cLApFastHbTimerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApFastHbTimerEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApFastHbTimerEnabled.setDescription("This object controls the Heartbeat Timer. A value of 'true' indicates that this timer is enabled. A value of 'false' indicates that this timer is disabled.")
cLApPrimaryDiscoveryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApPrimaryDiscoveryTimeout.setStatus('current')
if mibBuilder.loadTexts: cLApPrimaryDiscoveryTimeout.setDescription('This object represents the timeout for the primary AP discovery.')
cLApGlobalPrimaryControllerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerAddressType.setDescription("This object represents the type of the primary controller's address made available through cLApPrimaryControllerAddress.")
cLApGlobalPrimaryControllerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerAddress.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerAddress.setDescription('This object represents the address of the primary controller that the APs will join. The name and address should be provided in the same set request. An address of all zeros will unset the primary controller.')
cLApGlobalPrimaryControllerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerName.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalPrimaryControllerName.setDescription('This object represents the name of the primary controller that the APs will join.')
cLApGlobalSecondaryControllerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerAddressType.setDescription("This object represents the type of the secondary controller's address made available through cLApSecondaryControllerAddress.")
cLApGlobalSecondaryControllerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerAddress.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerAddress.setDescription('This object represents the address of the secondary controller that the APs will join. The name and address should be provided in the same set request. An address of all zeros will unset the secondary controller.')
cLApGlobalSecondaryControllerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerName.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalSecondaryControllerName.setDescription('This object represents the name of the secondary controller that the APs will join.')
cLApGlobalFailoverPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalFailoverPriority.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalFailoverPriority.setDescription('This object represents the Global AP Failover priority. If Enabled, Priorities will be considered of the APs which wishes to join the controller. Preference will be given to the higher priority AP. If the number of associated AP has already reached the limit then the controller will disassociate a lower priority AP to accomodate a higher priority AP. Default is Disabled state.')
cLApGlobalTcpMss = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(536, 1363), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalTcpMss.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalTcpMss.setDescription('This object represents the Global AP TCP MSS value. Permissible value are between 536 and 1363. This will also enable the global TCP MSS flag. Value of 0 will disable the global TCP MSS flag. Any change of value for this object will be reflected to cLApTcpMss')
cLApGlobalDot11IfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 12), )
if mibBuilder.loadTexts: cLApGlobalDot11IfTable.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalDot11IfTable.setDescription('This table is used to configure the global dot11 parameters per slot id, represented by cLApDot11IfSlotId, of the radio interface in all the APs joined with the controller.')
cLApGlobalDot11IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 12, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLApGlobalDot11IfEntry.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalDot11IfEntry.setDescription('This represents an entry in the cLApGlobalDot11IfTable.')
cLApGlobalDot11IfCdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 12, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalDot11IfCdpEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalDot11IfCdpEnabled.setDescription("This object is used to configure the Cisco Discovery Protocol(CDP) in the interface, represented by cLApDot11IfSlotId of the all the APs, joined in the controller. Setting this object to a value of 'true' would turn on the CDP on this slot. Setting this object to a value of 'false' would turn off the CDP on this slot, so that CDP advertisements are not sent. Read operation on this attribute will not be supported. When queried this will return a value of 'false'.")
cLApGlobalEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 13), )
if mibBuilder.loadTexts: cLApGlobalEthernetIfTable.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalEthernetIfTable.setDescription('This table is used to configure the global parameters on Ethernet interfaces of all the APs joined with the controller.')
cLApGlobalEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 13, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"))
if mibBuilder.loadTexts: cLApGlobalEthernetIfEntry.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalEthernetIfEntry.setDescription('This represents an entry in cLApGlobalEthernetIfTable.')
cLApGlobalEthernetIfCdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 13, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalEthernetIfCdpEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalEthernetIfCdpEnabled.setDescription("This object is used to configure the Cisco Discovery Protocol(CDP) in the interface, represented by cLApEthernetIfSlotId of the all the APs, joined in the controller. Setting this object to a value of 'true' would turn on the CDP on this ethernet interface. Setting this object to a value of 'false' would turn off the CDP on this ethernet interface, so that CDP advertisements are not sent. Read operation on this attribute will not be supported. When queried this will return a value of 'false'.")
cLApGlobalRetransmitCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 14), Unsigned32()).setUnits('retries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalRetransmitCount.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalRetransmitCount.setDescription('This object specifies the retransmission count for the Control Packet of all the Access Points, joined to this controller. This value represents the number of packets retransmitted after which the Access Point falls back to another controller in case of failover.')
cLApGlobalRetransmitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 3, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobalRetransmitTimeout.setStatus('current')
if mibBuilder.loadTexts: cLApGlobalRetransmitTimeout.setDescription('This object specifies the retransmission timeout for the Control Packet of all the Access Points, joined to this controller. This value represents the timeout for each retransmission, during the fallback of Access Point to another controller in case of failover.')
cLApDot11IfAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4), )
if mibBuilder.loadTexts: cLApDot11IfAntennaTable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAntennaTable.setDescription('This table represents the information about the basic functional parameters corresponding to the antenna on dot11 interfaces of the APs that have joined the controller.')
cLApDot11IfAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfAntennaId"))
if mibBuilder.loadTexts: cLApDot11IfAntennaEntry.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAntennaEntry.setDescription('An entry in this table represents the 802.11 functional parameters of the dot11 interface of an AP that has joined the controller. Entries are added when the APs associate to this controller and deleted when they lose their association.')
cLApDot11IfAntennaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: cLApDot11IfAntennaId.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAntennaId.setDescription('This object represents the antenna ID of a dot11 interface on an AP. The antenna Id for a particular dot11 interface on a slot as represented by this object.')
cLApDot11IfAntennaTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAntennaTxEnable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAntennaTxEnable.setDescription("This object specifies whether this antenna is allowed to trasmit or not. A value of 'true' enables the antenna to transmit. A value of 'false' disables the antenna to transmit. This object has been deprecated for cLApDot11IfAntennaEnable. cLApDot11IfAntennaTxEnable object is superseded by cLApDot11IfAntennaEnable.")
cLApDot11IfAntennaRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAntennaRxEnable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAntennaRxEnable.setDescription("This object specifies whether this antenna is allowed to recieve or not. A value of 'true' enables the antenna to receive. A value of 'false' disables the antenna to receive. This object has been deprecated for cLApDot11IfAntennaEnable. cLApDot11IfAntennaRxEnable object is superseded by cLApDot11IfAntennaEnable.")
cLApDot11IfAntennaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApDot11IfAntennaEnable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfAntennaEnable.setDescription("This object specifies whether this antenna is enabled or not. A value of 'true' enables the antenna. A value of 'false' disables the antenna.")
cLApVlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5), )
if mibBuilder.loadTexts: cLApVlanIfTable.setStatus('current')
if mibBuilder.loadTexts: cLApVlanIfTable.setDescription('This table represents the information about the basic functional parameters corresponding to the Ethernet interfaces of the APs that have joined the controller.')
cLApVlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApVlanIfEthernetId"))
if mibBuilder.loadTexts: cLApVlanIfEntry.setStatus('current')
if mibBuilder.loadTexts: cLApVlanIfEntry.setDescription('An entry in this table represents the VLAN functional parameters of the Ethernet interface of an AP that has joined the controller. Entries are added when the administrator creates an entry in this table.')
cLApVlanIfEthernetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: cLApVlanIfEthernetId.setStatus('current')
if mibBuilder.loadTexts: cLApVlanIfEthernetId.setDescription('This object represents the ID of a Ethernet interface on an AP.')
cLApVlanIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("access", 2), ("trunk", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApVlanIfMode.setStatus('current')
if mibBuilder.loadTexts: cLApVlanIfMode.setDescription("This object represents the mode this on this AP's Ethernet interface is configured for. normal - VLAN is not operating in access or trunk. access - VLAN is operating in access mode trunk - VLAN is operating in trunk mode.")
cLApVlanIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApVlanIfEnable.setStatus('current')
if mibBuilder.loadTexts: cLApVlanIfEnable.setDescription("This object specifies whether this interface is enabled or not. A value of 'true' enables the interface. A value of 'false' will disable the interface. This will delete all entries on this AP's Ethernet interface.")
cLApVlanIfNativeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApVlanIfNativeVlanId.setStatus('current')
if mibBuilder.loadTexts: cLApVlanIfNativeVlanId.setDescription("This object represents the native VLAN ID assigned to this AP's Ethernet interface. This only applies when the icLApVlanIfMode is set to 'trunk'. For all other modes this return a value of zero.")
cLApVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6), )
if mibBuilder.loadTexts: cLApVlanListTable.setStatus('current')
if mibBuilder.loadTexts: cLApVlanListTable.setDescription('This table represents the information about the basic functional parameters corresponding to the VLAN Ethernet interfaces of the APs that have joined the controller.')
cLApVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApVlanIfEthernetId"), (0, "CISCO-LWAPP-AP-MIB", "cLApVlanListVlanId"))
if mibBuilder.loadTexts: cLApVlanListEntry.setStatus('current')
if mibBuilder.loadTexts: cLApVlanListEntry.setDescription('An entry in this table represents the VLAN functional parameters of the Ethernet interface of an AP that has joined the controller. Entries are added when the administrator creates an entry in this table.')
cLApVlanListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLApVlanListVlanId.setStatus('current')
if mibBuilder.loadTexts: cLApVlanListVlanId.setDescription("This object represents the ID assigned to the VLAN on this AP's Ethernet interface.")
cLApVlanListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLApVlanListRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLApVlanListRowStatus.setDescription('Used to add or delete an entry in this table.')
cLApGlobal802dot1xAuthenticationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobal802dot1xAuthenticationEnabled.setStatus('current')
if mibBuilder.loadTexts: cLApGlobal802dot1xAuthenticationEnabled.setDescription('This object represents the Global AP 802.1x Supplicant Authentication feature. If configured as True, user can configure 8021.1x authentication between lightweight access points and the switch. The access point acts as an 802.1x supplicant and is authenticated by the switch using EAP-FAST with anonymous PAC provisioning.User can set global authentication settings that all access points inherit as they join the controller. This includes all access points that are currently joined to the controller and any that join in the future. If desired, user can override the global authentication settings and assign unique authentication settings for a specific access point. Default state is False.')
cLApGlobal802dot1xSupplicantUsername = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobal802dot1xSupplicantUsername.setStatus('current')
if mibBuilder.loadTexts: cLApGlobal802dot1xSupplicantUsername.setDescription('This object represents the 802.1x supplicant username that is to be inherited by all access points that join the controller.')
cLApGlobal802dot1xSupplicantPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApGlobal802dot1xSupplicantPassword.setStatus('current')
if mibBuilder.loadTexts: cLApGlobal802dot1xSupplicantPassword.setDescription("This object represents the 802.1x supplicant Password that is to be inherited by all access points that join the controller. A query on this OID will always return '****'.")
cLAp802dot1xSupplicantTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4), )
if mibBuilder.loadTexts: cLAp802dot1xSupplicantTable.setStatus('current')
if mibBuilder.loadTexts: cLAp802dot1xSupplicantTable.setDescription('This table provides the information about the 802.1x Supplicant credentials of the 802.11 LWAPP Access Points that have joined the controller. Rows are added to this table whenever, new APs are joined to this controller, and rows are deleted whenever APs gets disjoined from the controller.')
cLAp802dot1xSupplicantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLAp802dot1xSupplicantEntry.setStatus('current')
if mibBuilder.loadTexts: cLAp802dot1xSupplicantEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Access Point that has joined the controller. cLApSysMacAddress is the index which uniquely identifies every row in the table.')
cLAp802dot1xSupplicantOverrideEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverrideEnabled.setStatus('current')
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverrideEnabled.setDescription('This object represents the individual AP level 802.1x Supplicant Authentication override parameters. If configured as True, user can override the Global AP 8021.1x authentication credentials by providing individual AP level credentials. Default state is False.')
cLAp802dot1xSupplicantOverrideUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverrideUsername.setStatus('current')
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverrideUsername.setDescription('This object represents the individual AP level 802.1x supplicant override username.')
cLAp802dot1xSupplicantOverridePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 7, 4, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverridePassword.setStatus('current')
if mibBuilder.loadTexts: cLAp802dot1xSupplicantOverridePassword.setDescription("This object the individual AP level 802.1x supplicant override password. A query on this OID will always return '****'.")
cLApDot11GlobalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7), )
if mibBuilder.loadTexts: cLApDot11GlobalConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLApDot11GlobalConfigTable.setDescription('This table represents the information about the global attributes of the radio interface, that would be applicable for all the APs that join the controller.')
cLApDot11GlobalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfType"))
if mibBuilder.loadTexts: cLApDot11GlobalConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLApDot11GlobalConfigEntry.setDescription('An entry in this table represents the network level configurations of the radio interface. Entries cannot be added or deleted in this table.')
cLApNwLegacyBeamForming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNwLegacyBeamForming.setStatus('current')
if mibBuilder.loadTexts: cLApNwLegacyBeamForming.setDescription("This object indicates the status of legacy beam forming in this AP. This object is applicable only for 11n supported APs. For APs that does not support legacy beam forming, a get request on this attribute will return the value 'notApplicable'. A value of 'enable' indicates that the legacy Beam forming is enabled in this AP. A value of 'false' indicates that the legacy Beam forming is disabled in this AP.")
cLApNwTxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -50)).clone(-70)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLApNwTxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: cLApNwTxPowerThreshold.setDescription('This object represents the Global AP Transmit Power Threshold value. The permissible range is -80 dbm to -50 dbm')
cLApAssocFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 1), CLApAssocFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApAssocFailureReason.setStatus('current')
if mibBuilder.loadTexts: cLApAssocFailureReason.setDescription('This object specifies the failure reasons when a AP fails to associate with a controller.')
cLApRogueApMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApRogueApMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLApRogueApMacAddress.setDescription('This object represents the radio MAC address common to the dot11 interfaces of the rogue AP.')
cLApDot11RadioChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 3), CLDot11Channel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApDot11RadioChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cLApDot11RadioChannelNumber.setDescription('This object represents the channel number of the radio interface of the AP, represented by cLApDot11IfType.')
cLApRogueApSsid = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApRogueApSsid.setStatus('current')
if mibBuilder.loadTexts: cLApRogueApSsid.setDescription('This object represents the SSID used by the rogue AP to intrude the network.')
cLApRogueType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("asleap", 1), ("honeypot", 2), ("other", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApRogueType.setStatus('current')
if mibBuilder.loadTexts: cLApRogueType.setDescription('This object represents the SSID of the used by the rogue AP to intrude the network.')
cLApWipsReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("noMonitoringDevice", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApWipsReason.setStatus('current')
if mibBuilder.loadTexts: cLApWipsReason.setDescription("This object specifies the failure reasons for an AP when cLApWipsEnable is set to 'true'. noMonitoringDevice - No monitoring device connected to collect WIPs information.")
cLApWipsClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 7), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApWipsClear.setStatus('current')
if mibBuilder.loadTexts: cLApWipsClear.setDescription("This object specifies whether this event is raise or clear. A value of 'true' indicates this event is cleared A value of 'false' indicates this even is raised.")
cLApIfUpDownFailureType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detectedFailure", 1), ("configuredReset", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApIfUpDownFailureType.setStatus('current')
if mibBuilder.loadTexts: cLApIfUpDownFailureType.setDescription('This object specifies the type of the AP interface failure. detectedFailure(1) - Failure of radio. configuredReset(2) - Reset due to manual configuration.')
cLApIfUpDownCause = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApIfUpDownCause.setStatus('current')
if mibBuilder.loadTexts: cLApIfUpDownCause.setDescription('This object specifies the cause of the AP interface failure.')
cLApIfUpDownFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 3, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApIfUpDownFailureCode.setStatus('current')
if mibBuilder.loadTexts: cLApIfUpDownFailureCode.setDescription('This object specifies the code of the AP interface failure.')
ciscoLwappApIfRegulatoryDomainMismatchNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfRegDomain"), ("CISCO-LWAPP-DOT11-MIB", "cldRegulatoryDomain"))
if mibBuilder.loadTexts: ciscoLwappApIfRegulatoryDomainMismatchNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApIfRegulatoryDomainMismatchNotif.setDescription("This notification is generated if an AP radio's regulatory domain doesn't match the country the controller is configured for. Due to the mismatch, the AP will fail to associate with the controller.")
ciscoLwappApCrash = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApCrash.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLwappApCrash.setDescription('This notification is generated after an AP rejoins the controller after a crash. Once the AP joins, the controller will get the crash file from the AP and sends this notification.')
ciscoLwappApUnsupported = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApAssocFailureReason"))
if mibBuilder.loadTexts: ciscoLwappApUnsupported.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApUnsupported.setDescription('This notification is generated after an unsupported AP tries to join the controller.')
ciscoLwappApAssociated = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApLastRebootReason"), ("CISCO-LWAPP-AP-MIB", "cLApDataEncryptionStatus"))
if mibBuilder.loadTexts: ciscoLwappApAssociated.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApAssociated.setDescription('This notification is generated whenever an AP joins the controller successfully. This notification contains information about the last reboot reason and Data Encryption status of the AP.')
ciscoLwappApPower = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApPowerStatus"))
if mibBuilder.loadTexts: ciscoLwappApPower.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApPower.setDescription('This notification is generated whenever an AP detects low power from Ethernet.')
ciscoLwappApRogueApDetected = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApSsid"), ("CISCO-LWAPP-AP-MIB", "cLApRogueType"))
if mibBuilder.loadTexts: ciscoLwappApRogueApDetected.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApRogueApDetected.setDescription('This notification is generated whenever a rogue AP is detected.')
ciscoLwappApRogueApCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApRogueApSsid"), ("CISCO-LWAPP-AP-MIB", "cLApRogueType"))
if mibBuilder.loadTexts: ciscoLwappApRogueApCleared.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApRogueApCleared.setDescription('This notification is generated whenever a rogue AP was detected and then subsequently if its been removed from the network.')
ciscoLwappApWipsNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApWipsReason"), ("CISCO-LWAPP-AP-MIB", "cLApWipsClear"))
if mibBuilder.loadTexts: ciscoLwappApWipsNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApWipsNotification.setDescription('This notification is generated whenever a controller detects a WIPS event.')
ciscoLwappApNoDownlinkChannelNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 9)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApNoDownlinkChannelNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApNoDownlinkChannelNotify.setDescription('This notification is generated when ever AP fails to find new downlink channel.')
ciscoLwappApIfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 10)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApPortNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureType"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownCause"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureCode"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApIfUpNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApIfUpNotify.setDescription("This notification is generated when AP's Interface operational status goes up.")
ciscoLwappApIfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 0, 11)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureType"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownCause"), ("CISCO-LWAPP-AP-MIB", "cLApIfUpDownFailureCode"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappApIfDownNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApIfDownNotify.setDescription("This notification is generated when AP's Interface operational status goes down.")
ciscoLwappApMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1))
ciscoLwappApMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2))
ciscoLwappApMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBCompliance = ciscoLwappApMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev1 = ciscoLwappApMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev2 = ciscoLwappApMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev3 = ciscoLwappApMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev3.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev4 = ciscoLwappApMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev4.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappSeClientSup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev5 = ciscoLwappApMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev5.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup4"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappSeClientSup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev6 = ciscoLwappApMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev6.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 1, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup2"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup3"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifObjsGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApNotifsGroupVer1"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup6"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup7"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApEthernetIfGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApRadioGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApGroupSup5"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappSeClientSup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappDot11IfAntennaGroup"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappRetransmitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApMIBComplianceRev7 = ciscoLwappApMIBComplianceRev7.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApMIBComplianceRev7.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappApMIB module.')
ciscoLwappApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApIfMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApMaxNumberOfDot11Slots"), ("CISCO-LWAPP-AP-MIB", "cLApIfSmtDot11Bssid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroup = ciscoLwappApGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroup.setDescription('This collection of objects represents the information about the general attributes and functional parameters of those APs that have joined the controller.')
ciscoLwappApIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApIfGroup = ciscoLwappApIfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApIfGroup.setDescription('This collection of objects represents the information about the dot11 interfaces of those APs that have joined the controller.')
ciscoLwappApGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApEntPhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup1 = ciscoLwappApGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroupSup1.setDescription('This supplemental collection of objects represents the information about the general attributes and functional parameters of those APs that have joined the controller.')
ciscoLwappApGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup2 = ciscoLwappApGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroupSup2.setDescription('This supplemental collection of objects represents the name associated with those APs that have joined the controller.')
ciscoLwappApGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfRegDomain"), ("CISCO-LWAPP-AP-MIB", "cLApDot11nSupport"), ("CISCO-LWAPP-AP-MIB", "cLAp11nChannelBandwidth"), ("CISCO-LWAPP-AP-MIB", "cLApCountryCode"), ("CISCO-LWAPP-AP-MIB", "cLApCountryAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup3 = ciscoLwappApGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroupSup3.setDescription('This supplemental collection of objects represents the country and 802.11n related information for those APs that have joined the controller.')
ciscoLwappApNotifObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApAssocFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApNotifObjsGroup = ciscoLwappApNotifObjsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApNotifObjsGroup.setDescription('This supplemental collection of objects represents the information carried by the AP related notifications sent by the agent to a network management station.')
ciscoLwappApNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotif"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApCrash"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupported"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApNotifsGroup = ciscoLwappApNotifsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApNotifsGroup.setDescription('This supplemental collection of objects represents the AP related notifications sent by the agent to a network management station. ciscoLwappApNotifsGroup object is superseded by ciscoLwappApNotifsGroupVer1.')
ciscoLwappApGroupSup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappJoinTakenTime"), ("CISCO-LWAPP-AP-MIB", "cLApMaxNumberOfEthernetSlots"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApLomEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLomFirstChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomSecondChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomThirdChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomFourthChannel"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialEnableGlobalCredentials"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryDiscoveryTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerName"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerName"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApCrashEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupportedEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociatedEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLastRebootReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup4 = ciscoLwappApGroupSup4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApGroupSup4.setDescription('This supplemental collection of objects represents the global and credential information for those APs that have joined the controller. ciscoLwappApGroupSup4 object is superseded by ciscoLwappApGroupSup6.')
ciscoLwappApEthernetIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 9)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApEthernetIfName"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfOperStatus"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfRxUcastPkts"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfRxNUcastPkts"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfTxUcastPkts"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfTxNUcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApEthernetIfGroup = ciscoLwappApEthernetIfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApEthernetIfGroup.setDescription('This collection of objects represents the information about the Ethernet interfaces of those APs that have joined the controller.')
ciscoLwappApRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 10)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11RadioMACAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioSubBand"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioVersion"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IsBackhaul"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApRadioGroup = ciscoLwappApRadioGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApRadioGroup.setDescription('This collection of objects represents the information about the Radios of those APs that have joined the controller.')
ciscoLwappApGroupSup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 11)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApGlobalFailoverPriority"), ("CISCO-LWAPP-AP-MIB", "cLApFailoverPriority"), ("CISCO-LWAPP-AP-MIB", "cLApEncryptionEnable"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyEnable"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyReset"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyStatsCurrent"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyStatsMin"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyStatsMax"), ("CISCO-LWAPP-AP-MIB", "cLApLinkLatencyTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup5 = ciscoLwappApGroupSup5.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroupSup5.setDescription('This supplemental collection of objects represents objects related to encryption and link latency of AP.')
ciscoLwappSeClientSup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 12)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSeClientUserName"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientIPAddrType"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientIPAddr"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientDuration"), ("CISCO-LWAPP-AP-MIB", "cLApSeClientPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSeClientSup = ciscoLwappSeClientSup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSeClientSup.setDescription('This supplemental collection of objects represents the Spectrum Expert client details connected to the APs.')
ciscoLwappDot11IfAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 13)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfAntennaEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11IfAntennaGroup = ciscoLwappDot11IfAntennaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11IfAntennaGroup.setDescription('This supplemental collection of objects represents the antenna details corresponding to the dot11 interface of the Access Points.')
ciscoLwappRetransmitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 14)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApRetransmitCount"), ("CISCO-LWAPP-AP-MIB", "cLApRetransmitTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalRetransmitCount"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalRetransmitTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRetransmitGroup = ciscoLwappRetransmitGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRetransmitGroup.setDescription('This supplemental collection of objects represents the retransmit parameters corresponding to the fallback of an AccessPoint to another controller during failover.')
ciscoLwappApGroupSup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 15)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappUpTime"), ("CISCO-LWAPP-AP-MIB", "cLLwappJoinTakenTime"), ("CISCO-LWAPP-AP-MIB", "cLApMaxNumberOfEthernetSlots"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApTertiaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApLomFirstChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomSecondChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomThirdChannel"), ("CISCO-LWAPP-AP-MIB", "cLApLomFourthChannel"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialGlobalSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialUserName"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialPassword"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialSecret"), ("CISCO-LWAPP-AP-MIB", "cLApCredentialEnableGlobalCredentials"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApFastHbTimerEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPrimaryDiscoveryTimeout"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalPrimaryControllerName"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddressType"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalSecondaryControllerName"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApCrashEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupportedEnabled"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociatedEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLastRebootReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup6 = ciscoLwappApGroupSup6.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroupSup6.setDescription('This supplemental collection of objects represents the global and credential information for those APs that have joined the controller.')
ciscoLwappApNotifsGroupVer1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 16)).setObjects(("CISCO-LWAPP-AP-MIB", "ciscoLwappApIfRegulatoryDomainMismatchNotif"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApUnsupported"), ("CISCO-LWAPP-AP-MIB", "ciscoLwappApAssociated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApNotifsGroupVer1 = ciscoLwappApNotifsGroupVer1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApNotifsGroupVer1.setDescription('This supplemental collection of objects represents the AP related notifications sent by the agent to a network management station.')
ciscoLwappApGroupSup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 2, 2, 17)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApTelnetEnable"), ("CISCO-LWAPP-AP-MIB", "cLApSshEnable"), ("CISCO-LWAPP-AP-MIB", "cLApPreStdStateEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPwrInjectorStateEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApPwrInjectorSelection"), ("CISCO-LWAPP-AP-MIB", "cLApPwrInjectorSwMacAddr"), ("CISCO-LWAPP-AP-MIB", "cLApWipsEnable"), ("CISCO-LWAPP-AP-MIB", "cLApMonitorModeOptimization"), ("CISCO-LWAPP-AP-MIB", "cLApDomainName"), ("CISCO-LWAPP-AP-MIB", "cLApNameServerAddress"), ("CISCO-LWAPP-AP-MIB", "cLApAMSDUEnable"), ("CISCO-LWAPP-AP-MIB", "cLApEncryptionSupported"), ("CISCO-LWAPP-AP-MIB", "cLApRogueDetectionEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApTcpMss"), ("CISCO-LWAPP-AP-MIB", "cLApAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApLomEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApLegacyBeamForming"), ("CISCO-LWAPP-AP-MIB", "cLApCdpOverAirEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfAdminStatus"), ("CISCO-LWAPP-AP-MIB", "cLApEthernetIfCdpEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalTcpMss"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalDot11IfCdpEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApGlobalEthernetIfCdpEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApVlanIfMode"), ("CISCO-LWAPP-AP-MIB", "cLApVlanIfEnable"), ("CISCO-LWAPP-AP-MIB", "cLApVlanIfNativeVlanId"), ("CISCO-LWAPP-AP-MIB", "cLApGlobal802dot1xAuthenticationEnabled"), ("CISCO-LWAPP-AP-MIB", "cLApGlobal802dot1xSupplicantPassword"), ("CISCO-LWAPP-AP-MIB", "cLApGlobal802dot1xSupplicantUsername"), ("CISCO-LWAPP-AP-MIB", "cLAp802dot1xSupplicantOverrideEnabled"), ("CISCO-LWAPP-AP-MIB", "cLAp802dot1xSupplicantOverrideUsername"), ("CISCO-LWAPP-AP-MIB", "cLAp802dot1xSupplicantOverridePassword"), ("CISCO-LWAPP-AP-MIB", "cLApNwLegacyBeamForming"), ("CISCO-LWAPP-AP-MIB", "cLApNwTxPowerThreshold"), ("CISCO-LWAPP-AP-MIB", "cLApVlanListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApGroupSup7 = ciscoLwappApGroupSup7.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApGroupSup7.setDescription('This supplemental collection of objects represents the information about the general attributes and functional parameters of those APs that have joined the controller.')
mibBuilder.exportSymbols("CISCO-LWAPP-AP-MIB", cLApEthernetIfSlotId=cLApEthernetIfSlotId, cLApGlobal802dot1xAuthenticationEnabled=cLApGlobal802dot1xAuthenticationEnabled, cLApWipsEnable=cLApWipsEnable, cLApCredentialsTable=cLApCredentialsTable, cLApMaxNumberOfEthernetSlots=cLApMaxNumberOfEthernetSlots, cLApEthernetIfAdminStatus=cLApEthernetIfAdminStatus, cLApEthernetIfInputFrames=cLApEthernetIfInputFrames, cLApLinkLatencyStatsCurrent=cLApLinkLatencyStatsCurrent, cLApDataLinkLatencyStatsCurrent=cLApDataLinkLatencyStatsCurrent, cLApDot11IfAntennaEntry=cLApDot11IfAntennaEntry, cLApName=cLApName, cLApPrimaryControllerAddressType=cLApPrimaryControllerAddressType, cLApIfMacAddress=cLApIfMacAddress, ciscoLwappApMIBComplianceRev3=ciscoLwappApMIBComplianceRev3, ciscoLwappApMIBComplianceRev6=ciscoLwappApMIBComplianceRev6, cLApTertiaryControllerAddress=cLApTertiaryControllerAddress, ciscoLwappApGroupSup3=ciscoLwappApGroupSup3, ciscoLwappApRadioGroup=ciscoLwappApRadioGroup, ciscoLwappApGroupSup7=ciscoLwappApGroupSup7, cLApEthernetIfDuplex=cLApEthernetIfDuplex, cLApAMSDUEnable=cLApAMSDUEnable, ciscoLwappAp802dot1xSupplicant=ciscoLwappAp802dot1xSupplicant, ciscoLwappApUnsupported=ciscoLwappApUnsupported, cLApEthernetIfOutputTotalDrops=cLApEthernetIfOutputTotalDrops, cLApEthernetIfInputResource=cLApEthernetIfInputResource, ciscoLwappApAssociated=ciscoLwappApAssociated, cLApEthernetIfCdpEnabled=cLApEthernetIfCdpEnabled, ciscoLwappApGroupSup2=ciscoLwappApGroupSup2, cLApRogueApSsid=cLApRogueApSsid, ciscoLwappApIf=ciscoLwappApIf, ciscoLwappApEthernetIfGroup=ciscoLwappApEthernetIfGroup, cLApFailoverPriority=cLApFailoverPriority, cLApFastHbTimerTimeout=cLApFastHbTimerTimeout, cLApRogueType=cLApRogueType, cLApEntPhysicalIndex=cLApEntPhysicalIndex, cLApVlanIfEnable=cLApVlanIfEnable, cLApGlobalFailoverPriority=cLApGlobalFailoverPriority, cLApCredentialEnableGlobalCredentials=cLApCredentialEnableGlobalCredentials, cLApGlobalPrimaryControllerAddressType=cLApGlobalPrimaryControllerAddressType, cLApGlobalSecondaryControllerAddress=cLApGlobalSecondaryControllerAddress, cLApVlanIfMode=cLApVlanIfMode, cLApVlanListTable=cLApVlanListTable, cLApGlobalDot11IfCdpEnabled=cLApGlobalDot11IfCdpEnabled, cLApLinkLatencyTable=cLApLinkLatencyTable, cLApCountryEntry=cLApCountryEntry, cLApFastHbTimerTable=cLApFastHbTimerTable, ciscoLwappApMIBConform=ciscoLwappApMIBConform, cLApDot11IfTable=cLApDot11IfTable, cLApCountryAllowed=cLApCountryAllowed, ciscoLwappApIfDownNotify=ciscoLwappApIfDownNotify, cLApEthernetIfTable=cLApEthernetIfTable, cLApGlobalTcpMss=cLApGlobalTcpMss, cLAp802dot1xSupplicantTable=cLAp802dot1xSupplicantTable, cLApSshEnable=cLApSshEnable, ciscoLwappDot11IfAntennaGroup=ciscoLwappDot11IfAntennaGroup, cLApCredentialGlobalPassword=cLApCredentialGlobalPassword, cLApRetransmitCount=cLApRetransmitCount, cLApWipsReason=cLApWipsReason, ciscoLwappSpectrum=ciscoLwappSpectrum, cLApNwTxPowerThreshold=cLApNwTxPowerThreshold, cLAp802dot1xSupplicantOverrideEnabled=cLAp802dot1xSupplicantOverrideEnabled, cLApGlobalPrimaryControllerName=cLApGlobalPrimaryControllerName, cLApLinkLatencyEntry=cLApLinkLatencyEntry, cLApPowerStatus=cLApPowerStatus, cLApGlobalSecondaryControllerAddressType=cLApGlobalSecondaryControllerAddressType, cLApDot11IfAntennaEnable=cLApDot11IfAntennaEnable, cLApGlobalEthernetIfTable=cLApGlobalEthernetIfTable, cLApVlanListRowStatus=cLApVlanListRowStatus, cLApTertiaryControllerAddressType=cLApTertiaryControllerAddressType, cLApTcpMss=cLApTcpMss, cLApEthernetIfOutputResource=cLApEthernetIfOutputResource, cLApCredentialUserName=cLApCredentialUserName, cLApGlobalDot11IfEntry=cLApGlobalDot11IfEntry, cLApDot11IfType=cLApDot11IfType, cLApLegacyBeamForming=cLApLegacyBeamForming, cLApLinkLatencyStatsMax=cLApLinkLatencyStatsMax, cLLwappUpTime=cLLwappUpTime, cLApNameServerAddress=cLApNameServerAddress, cLApRogueDetectionEnabled=cLApRogueDetectionEnabled, cLApGlobalDot11IfTable=cLApGlobalDot11IfTable, ciscoLwappRetransmitGroup=ciscoLwappRetransmitGroup, ciscoLwappApCredentials=ciscoLwappApCredentials, cLApLinkLatencyStatsMin=cLApLinkLatencyStatsMin, cLApDataLinkLatencyStatsMax=cLApDataLinkLatencyStatsMax, cLApLomFourthChannel=cLApLomFourthChannel, cLApEthernetIfResets=cLApEthernetIfResets, cLApLomEnabled=cLApLomEnabled, cLApDot11RadioEntry=cLApDot11RadioEntry, cLApMaxNumberOfDot11Slots=cLApMaxNumberOfDot11Slots, cLApPwrInjectorSelection=cLApPwrInjectorSelection, cLApDot11IfSlotId=cLApDot11IfSlotId, cLApCountryTable=cLApCountryTable, cLApDot11IfAntennaTxEnable=cLApDot11IfAntennaTxEnable, cLApSecondaryControllerAddressType=cLApSecondaryControllerAddressType, cLApEthernetIfName=cLApEthernetIfName, cLApEthernetIfRxUcastPkts=cLApEthernetIfRxUcastPkts, cLApSeClientTable=cLApSeClientTable, cLApLinkLatencyTimeStamp=cLApLinkLatencyTimeStamp, cLApLinkLatencyStatsTable=cLApLinkLatencyStatsTable, cLApIfUpDownFailureCode=cLApIfUpDownFailureCode, ciscoLwappApMIBCompliances=ciscoLwappApMIBCompliances, ciscoLwappApNotifObjsGroup=ciscoLwappApNotifObjsGroup, cLApSeClientIPAddr=cLApSeClientIPAddr, cLApPrimaryDiscoveryTimeout=cLApPrimaryDiscoveryTimeout, cLApLomThirdChannel=cLApLomThirdChannel, cLApDot11IfRegDomain=cLApDot11IfRegDomain, cLApDot11GlobalConfigTable=cLApDot11GlobalConfigTable, cLApDot11IfAntennaRxEnable=cLApDot11IfAntennaRxEnable, ciscoLwappApWipsNotification=ciscoLwappApWipsNotification, cLApPortNumber=cLApPortNumber, cLApGlobal802dot1xSupplicantUsername=cLApGlobal802dot1xSupplicantUsername, cLApRogueApMacAddress=cLApRogueApMacAddress, cLAp802dot1xSupplicantOverrideUsername=cLAp802dot1xSupplicantOverrideUsername, cLApCountryCode=cLApCountryCode, cLApEthernetIfInputCrc=cLApEthernetIfInputCrc, cLAp11nChannelBandwidth=cLAp11nChannelBandwidth, cLApEntry=cLApEntry, cLApFastHbTimerEnabled=cLApFastHbTimerEnabled, ciscoLwappApRogueApCleared=ciscoLwappApRogueApCleared, ciscoLwappApNoDownlinkChannelNotify=ciscoLwappApNoDownlinkChannelNotify, ciscoLwappApMIBComplianceRev1=ciscoLwappApMIBComplianceRev1, cLApEthernetIfGiants=cLApEthernetIfGiants, ciscoLwappApMIBComplianceRev7=ciscoLwappApMIBComplianceRev7, cLApUpTime=cLApUpTime, ciscoLwappApUnsupportedEnabled=ciscoLwappApUnsupportedEnabled, cLApEncryptionEnable=cLApEncryptionEnable, ciscoLwappApCrashEnabled=ciscoLwappApCrashEnabled, cLApDot11IfAntennaTable=cLApDot11IfAntennaTable, cLApCdpOverAirEnabled=cLApCdpOverAirEnabled, cLApLinkLatencyReset=cLApLinkLatencyReset, cLApEthernetIfOutputCollision=cLApEthernetIfOutputCollision, ciscoLwappApNotifsGroup=ciscoLwappApNotifsGroup, ciscoLwappApNotifsGroupVer1=ciscoLwappApNotifsGroupVer1, ciscoLwappApMIBNotifs=ciscoLwappApMIBNotifs, cLApDot11GlobalConfigEntry=cLApDot11GlobalConfigEntry, cLApCredentialGlobalUserName=cLApCredentialGlobalUserName, cLApDot11IfAntennaId=cLApDot11IfAntennaId, cLApNwLegacyBeamForming=cLApNwLegacyBeamForming, cLApCredentialGlobalSecret=cLApCredentialGlobalSecret, ciscoLwappLinkLatency=ciscoLwappLinkLatency, cLApDataEncryptionStatus=cLApDataEncryptionStatus, cLApIfSmtParamTable=cLApIfSmtParamTable, ciscoLwappApIfGroup=ciscoLwappApIfGroup, cLApDot11IfAdminStatus=cLApDot11IfAdminStatus, cLApLinkLatencyEnable=cLApLinkLatencyEnable, cLApSeClientPort=cLApSeClientPort, ciscoLwappApIfRegulatoryDomainMismatchNotif=ciscoLwappApIfRegulatoryDomainMismatchNotif, cLApVlanIfEthernetId=cLApVlanIfEthernetId, cLApSeClientIPAddrType=cLApSeClientIPAddrType, ciscoLwappApMIBCompliance=ciscoLwappApMIBCompliance, ciscoLwappApMIB=ciscoLwappApMIB, cLLwappJoinTakenTime=cLLwappJoinTakenTime, cLApPrimaryControllerAddress=cLApPrimaryControllerAddress, cLApEthernetIfOutputErrors=cLApEthernetIfOutputErrors, cLApWipsClear=cLApWipsClear, cLApIfUpDownCause=cLApIfUpDownCause, cLApEthernetIfOutputNoBuffer=cLApEthernetIfOutputNoBuffer, cLAp802dot1xSupplicantOverridePassword=cLAp802dot1xSupplicantOverridePassword, cLApEncryptionSupported=cLApEncryptionSupported, cLApSeIndex=cLApSeIndex, cLApRetransmitTimeout=cLApRetransmitTimeout, cLApDot11nSupport=cLApDot11nSupport, cLApEthernetIfTxUcastPkts=cLApEthernetIfTxUcastPkts, cLApNameServerAddressType=cLApNameServerAddressType, cLApSysMacAddress=cLApSysMacAddress, cLApSecondaryControllerAddress=cLApSecondaryControllerAddress, cLApGlobalPrimaryControllerAddress=cLApGlobalPrimaryControllerAddress, cLApEthernetIfRxTotalBytes=cLApEthernetIfRxTotalBytes, cLApPwrInjectorStateEnabled=cLApPwrInjectorStateEnabled, cLApGlobalRetransmitTimeout=cLApGlobalRetransmitTimeout, ciscoLwappApCrash=ciscoLwappApCrash, cLApEthernetIfLinkSpeed=cLApEthernetIfLinkSpeed, cLApEthernetIfInputAborts=cLApEthernetIfInputAborts, cLApIfUpDownFailureType=cLApIfUpDownFailureType, ciscoLwappApMIBGroups=ciscoLwappApMIBGroups, cLApEthernetIfInputOverrun=cLApEthernetIfInputOverrun, cLApGlobalSecondaryControllerName=cLApGlobalSecondaryControllerName, cLApAdminStatus=cLApAdminStatus, cLApEthernetIfRunts=cLApEthernetIfRunts, ciscoLwappSeClientSup=ciscoLwappSeClientSup, ciscoLwappApGroupSup6=ciscoLwappApGroupSup6, ciscoLwappApAssociatedEnabled=ciscoLwappApAssociatedEnabled, cLApSeClientUserName=cLApSeClientUserName, cLApSeClientDuration=cLApSeClientDuration, cLApEthernetIfTxNUcastPkts=cLApEthernetIfTxNUcastPkts, ciscoLwappApMIBComplianceRev4=ciscoLwappApMIBComplianceRev4, cLApCredentialPassword=cLApCredentialPassword, cLApNsiKey=cLApNsiKey, cLApDot11RadioSubBand=cLApDot11RadioSubBand, cLApLastRebootReason=cLApLastRebootReason, ciscoLwappApMIBObjects=ciscoLwappApMIBObjects, cLApSeClientEntry=cLApSeClientEntry, ciscoLwappApGroupSup5=ciscoLwappApGroupSup5, cLApDot11RadioVersion=cLApDot11RadioVersion, cLApDot11IsBackhaul=cLApDot11IsBackhaul, cLApDataLinkLatencyTimeStamp=cLApDataLinkLatencyTimeStamp, cLApEthernetIfThrottle=cLApEthernetIfThrottle, cLApGlobal802dot1xSupplicantPassword=cLApGlobal802dot1xSupplicantPassword, cLApLomFirstChannel=cLApLomFirstChannel, cLApDot11RadioTable=cLApDot11RadioTable, cLApEthernetIfEntry=cLApEthernetIfEntry, cLApDot11RadioMACAddress=cLApDot11RadioMACAddress, ciscoLwappApGlobal=ciscoLwappApGlobal, ciscoLwappApPower=ciscoLwappApPower, cLApDot11RadioChannelNumber=cLApDot11RadioChannelNumber, ciscoLwappApMIBNotifObjects=ciscoLwappApMIBNotifObjects, cLApCredentialsEntry=cLApCredentialsEntry, cLApEthernetIfTxTotalBytes=cLApEthernetIfTxTotalBytes, cLApGlobalEthernetIfEntry=cLApGlobalEthernetIfEntry, cLApEthernetIfInputDrops=cLApEthernetIfInputDrops, cLApIfSmtParamEntry=cLApIfSmtParamEntry, cLApGlobalRetransmitCount=cLApGlobalRetransmitCount, cLApFastHbTimerEntry=cLApFastHbTimerEntry, cLApVlanListEntry=cLApVlanListEntry, cLApEthernetIfUnknownProtocol=cLApEthernetIfUnknownProtocol, cLApVlanIfNativeVlanId=cLApVlanIfNativeVlanId, cLApEthernetIfRxNUcastPkts=cLApEthernetIfRxNUcastPkts, cLAp802dot1xSupplicantEntry=cLAp802dot1xSupplicantEntry, cLApIfSmtDot11Bssid=cLApIfSmtDot11Bssid, ciscoLwappApGroupSup4=ciscoLwappApGroupSup4, cLApEthernetIfOperStatus=cLApEthernetIfOperStatus, cLApEthernetIfPOEPower=cLApEthernetIfPOEPower, cLApVlanListVlanId=cLApVlanListVlanId, cLApDataLinkLatencyStatsMin=cLApDataLinkLatencyStatsMin, cLApLomSecondChannel=cLApLomSecondChannel, cLApLinkLatencyStatsEntry=cLApLinkLatencyStatsEntry, cLApEthernetIfInputErrors=cLApEthernetIfInputErrors, ciscoLwappApIfUpNotify=ciscoLwappApIfUpNotify, cLApDot11RadioRole=cLApDot11RadioRole, ciscoLwappApMIBComplianceRev5=ciscoLwappApMIBComplianceRev5, ciscoLwappApGroupSup1=ciscoLwappApGroupSup1, cLApVlanIfTable=cLApVlanIfTable, cLApVlanIfEntry=cLApVlanIfEntry, cLApMonitorModeOptimization=cLApMonitorModeOptimization, cLApPwrInjectorSwMacAddr=cLApPwrInjectorSwMacAddr, cLApGlobalEthernetIfCdpEnabled=cLApGlobalEthernetIfCdpEnabled, cLApAssocFailureReason=cLApAssocFailureReason, cLApTelnetEnable=cLApTelnetEnable, PYSNMP_MODULE_ID=ciscoLwappApMIB, ciscoLwappApRogueApDetected=ciscoLwappApRogueApDetected, ciscoLwappAp=ciscoLwappAp, cLApCredentialSecret=cLApCredentialSecret, cLApDomainName=cLApDomainName, ciscoLwappApGroup=ciscoLwappApGroup, ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled=ciscoLwappApIfRegulatoryDomainMismatchNotifEnabled, cLApEthernetIfOutputUnderrun=cLApEthernetIfOutputUnderrun, ciscoLwappApMIBComplianceRev2=ciscoLwappApMIBComplianceRev2, cLApEthernetIfMacAddress=cLApEthernetIfMacAddress, cLApPreStdStateEnabled=cLApPreStdStateEnabled, cLApTable=cLApTable, cLApFastHbTimerApType=cLApFastHbTimerApType, cLApExtensionChannel=cLApExtensionChannel, cLApDot11IfEntry=cLApDot11IfEntry)
