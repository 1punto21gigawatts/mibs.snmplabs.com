#
# PySNMP MIB module Brcm-BSAPTrap-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Brcm-BSAPTrap-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:42:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, Counter64, TimeTicks, Gauge32, IpAddress, Counter32, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, iso, Integer32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "Counter64", "TimeTicks", "Gauge32", "IpAddress", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "iso", "Integer32", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
broadcom = MibIdentifier((1, 3, 6, 1, 4, 1, 4413))
enet = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1))
basp = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2))
baspConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 1))
baspStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 2))
baspTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 2, 3))
trapAdapterName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 3, 1), DisplayString())
if mibBuilder.loadTexts: trapAdapterName.setStatus('mandatory')
if mibBuilder.loadTexts: trapAdapterName.setDescription('The adapter name.')
trapTeamName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 3, 2), DisplayString())
if mibBuilder.loadTexts: trapTeamName.setStatus('mandatory')
if mibBuilder.loadTexts: trapTeamName.setDescription('The team name.')
trapCauseDirection = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("adapterActive", 1), ("adapterInactive", 2), ("linkup", 3), ("linkdown", 4), ("adapterEnabled", 5), ("adapterDisabled", 6), ("addedToTeam", 7), ("removedFrTeam", 8))))
if mibBuilder.loadTexts: trapCauseDirection.setStatus('mandatory')
if mibBuilder.loadTexts: trapCauseDirection.setDescription('Event caused by failover condition.')
trapAdapterActivityCause = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("linkChange", 2), ("adapterEnabledOrDisabled", 3), ("adapterAddedOrRemoved", 4))))
if mibBuilder.loadTexts: trapAdapterActivityCause.setStatus('mandatory')
if mibBuilder.loadTexts: trapAdapterActivityCause.setDescription('Addition explanation for the Event trapCauseDirection. This field only applies to the the adapterActive or adapterInactive values in the trapCauseDirection Event.')
failoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 2, 3) + (0,1)).setObjects(("Brcm-BSAPTrap-MIB", "trapAdapterName"), ("Brcm-BSAPTrap-MIB", "trapTeamName"), ("Brcm-BSAPTrap-MIB", "trapCauseDirection"), ("Brcm-BSAPTrap-MIB", "trapAdapterActivityCause"))
if mibBuilder.loadTexts: failoverEvent.setDescription('This trap is generated to indicate that adapter Fail-Over event has occured')
mibBuilder.exportSymbols("Brcm-BSAPTrap-MIB", enet=enet, baspStat=baspStat, trapAdapterName=trapAdapterName, basp=basp, broadcom=broadcom, trapTeamName=trapTeamName, baspTrap=baspTrap, trapAdapterActivityCause=trapAdapterActivityCause, trapCauseDirection=trapCauseDirection, baspConfig=baspConfig, failoverEvent=failoverEvent)
