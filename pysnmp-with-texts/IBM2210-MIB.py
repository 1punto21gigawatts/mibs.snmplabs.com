#
# PySNMP MIB module IBM2210-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM2210-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
proElsSubSysEventMsg, proElsTrapEvent, proElsTrapSubSystem, proElsTrapSeqs = mibBuilder.importSymbols("PROTEON-MIB", "proElsSubSysEventMsg", "proElsTrapEvent", "proElsTrapSubSystem", "proElsTrapSeqs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, IpAddress, MibIdentifier, Bits, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ObjectIdentity, Gauge32, Counter32, Integer32, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "IpAddress", "MibIdentifier", "Bits", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "Counter32", "Integer32", "NotificationType", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
proteon = MibIdentifier((1, 3, 6, 1, 4, 1, 1))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm2210 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72))
ibm2210admin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 1))
ibm2210system = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 2))
ibm2210hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 3))
ibm2210routing = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 4))
ibm2210switching = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 5))
ibm2210hardwareinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1))
proto = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3))
pDot3ChipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 5))
ibmServiceGenericTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1), )
if mibBuilder.loadTexts: ibmServiceGenericTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServiceGenericTable.setDescription('A table of information about each service port.')
ibmServiceGenericEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1), ).setIndexNames((0, "IBM2210-MIB", "ibmServiceGenericPort"))
if mibBuilder.loadTexts: ibmServiceGenericEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServiceGenericEntry.setDescription('An entry containing objects to describe the service port.')
ibmServiceGenericPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServiceGenericPort.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServiceGenericPort.setDescription('The number of service port. On 12x and 1Sx/1Ux models, only one service port exists and is designated #1. On x4x models, the lower paort is designated #1, the upper port is #2.')
ibmServiceGenericBaurdrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServiceGenericBaurdrate.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServiceGenericBaurdrate.setDescription('The baudrate of service port.')
ibmServiceGenericType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eia232", 1), ("modem", 2), ("nocard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServiceGenericType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServiceGenericType.setDescription('The card type of service port. On 12x, 1Sx and 1Ux models, the second row will always indeicate nocard(3).')
proXfaceGenericTable = MibTable((1, 3, 6, 1, 4, 1, 1, 2), )
if mibBuilder.loadTexts: proXfaceGenericTable.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericTable.setDescription('A table of information about each interface.')
proXfaceGenericEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: proXfaceGenericEntry.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericEntry.setDescription('An entry containing objects to describe the interface.')
proXfaceGenericType = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64))).clone(namedValues=NamedValues(("vi", 1), ("pn10", 2), ("pn80", 3), ("chaos", 4), ("xeth", 5), ("m1822", 6), ("scc", 7), ("ieth", 8), ("peth", 9), ("com2", 10), ("com4", 11), ("omn", 12), ("pn4", 13), ("hyper", 14), ("wdeth", 15), ("gwslc", 16), ("x25", 17), ("pqsx", 18), ("atr", 19), ("fddi", 20), ("vlane", 21), ("vcom4", 22), ("pn16", 23), ("atcomsl", 24), ("ceth", 25), ("csl", 26), ("seth", 27), ("srlygwsl", 28), ("srlyatc2", 29), ("srlycsl", 30), ("srbtnl", 31), ("sdlcrly", 32), ("nseth", 33), ("x25atc2", 34), ("x25csl", 35), ("x25dcsl", 36), ("qsl", 37), ("ydcisdn", 38), ("tsl", 39), ("qslch", 40), ("v25bis", 41), ("hssi", 42), ("quiceth", 43), ("quictkr", 44), ("quicsl", 45), ("quicbisdn", 46), ("vlic", 47), ("atm", 48), ("escon", 49), ("isdnpri", 50), ("quic4wan", 51), ("quic8wan", 52), ("quic4mdm", 53), ("quic8mdm", 54), ("pawx21", 55), ("pawv36", 56), ("pawrs232", 57), ("nwescon", 58), ("atmvirt", 59), ("appnl", 60), ("v34", 61), ("mp", 62), ("atmpmpls", 63), ("eth100", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericType.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericType.setDescription('The type of the interface, according to the internal net identifier.')
proXfaceGenericCSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericCSR.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericCSR.setDescription('The Command and Status Register address for the interface.')
proXfaceGenericIntVec = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericIntVec.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericIntVec.setDescription('The multi-bus interrupt vector for the interface.')
proXfaceGenericMaintInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintInt.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericMaintInt.setDescription('The number of seconds before the next interface maintenance.')
proXfaceGenericMaintLim = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintLim.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericMaintLim.setDescription('The number of maintenance check failures permitted before a self test is run.')
proXfaceGenericNextTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericNextTest.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericNextTest.setDescription('The number of seconds before the next self test.')
proXfaceGenericNextMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericNextMaint.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericNextMaint.setDescription('The number of seconds between maintenance checks.')
proXfaceGenericMaintCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintCnt.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericMaintCnt.setDescription('The number of failed maintenance checks since the last successful maintenance check.')
proXfaceGenericMaintFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintFails.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericMaintFails.setDescription('The total number of maintenance failures on this interface.')
proXfaceGenericTestPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericTestPasses.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericTestPasses.setDescription('The total number of self test successes on this interface.')
proXfaceGenericTestFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericTestFails.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericTestFails.setDescription('The total number of self test failures on this interface.')
proXfaceGenericModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: proXfaceGenericModuleId.setDescription("The module identifier of this interface, this object is relevant only to the CNX and DNX platforms. It uniquely identifies the interface card-type. It will always be '0' for the IBM2210 platform.")
general = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3, 1))
proip = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3, 2))
defgw = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3, 2, 1))
proProtoIpDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwAddress.setStatus('mandatory')
if mibBuilder.loadTexts: proProtoIpDefGwAddress.setDescription('The Internet address of the default gateway for the router.')
proProtoIpDefGwCost = MibScalar((1, 3, 6, 1, 4, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwCost.setStatus('mandatory')
if mibBuilder.loadTexts: proProtoIpDefGwCost.setDescription('The cost of the default gateway for the router.')
proProtoIpDefGwAge = MibScalar((1, 3, 6, 1, 4, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwAge.setStatus('mandatory')
if mibBuilder.loadTexts: proProtoIpDefGwAge.setDescription('The age of the default gateway for the router.')
pDot3ChipMC68EN360 = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 5, 1))
ibmElsTrapV1 = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 72) + (0,1)).setObjects(("PROTEON-MIB", "proElsTrapSeqs"), ("PROTEON-MIB", "proElsTrapSubSystem"), ("PROTEON-MIB", "proElsTrapEvent"))
if mibBuilder.loadTexts: ibmElsTrapV1.setDescription('An ELS trap event. Note that this trap is being deprecated and will not be supported in all future releases. The objects proELSTrapVar1 through proElsTrapVar9 are conditionally included in this trap to carry variable data fields from the ELS message. These objects are not carried as object IDs as defined, but in fact are data objects. Their syntax will change depending on the data they cary for a particular trap instance.')
ibmElsTrapV2 = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 72) + (0,2)).setObjects(("PROTEON-MIB", "proElsSubSysEventMsg"))
if mibBuilder.loadTexts: ibmElsTrapV2.setDescription('When the routing subsystem ELS component is configured to generate SNMP traps, the following trap is generated. It contains a single varBind containing a text string in one of the two following formats. If ELS timestamping is enabled: hr:min:sec subsys_name.event_num: message_text For example - 09:32:56 IP.008: no rte 9.7.1.8 -> 9.7.4.3 dsc If ELS timestamping is disabled: subsys_name.event_num: message_text For example - IP.008: no rte 9.7.1.8 -> 9.7.4.3 dsc')
mibBuilder.exportSymbols("IBM2210-MIB", general=general, proXfaceGenericNextTest=proXfaceGenericNextTest, pDot3ChipSets=pDot3ChipSets, ibm2210hardwareinfo=ibm2210hardwareinfo, proXfaceGenericTestPasses=proXfaceGenericTestPasses, ibmServiceGenericBaurdrate=ibmServiceGenericBaurdrate, ibmServiceGenericTable=ibmServiceGenericTable, ibmServiceGenericPort=ibmServiceGenericPort, proXfaceGenericTable=proXfaceGenericTable, proto=proto, ibm2210hardware=ibm2210hardware, proXfaceGenericTestFails=proXfaceGenericTestFails, proXfaceGenericMaintInt=proXfaceGenericMaintInt, proXfaceGenericCSR=proXfaceGenericCSR, proXfaceGenericIntVec=proXfaceGenericIntVec, proXfaceGenericType=proXfaceGenericType, proProtoIpDefGwCost=proProtoIpDefGwCost, ibm2210switching=ibm2210switching, proXfaceGenericMaintLim=proXfaceGenericMaintLim, proXfaceGenericModuleId=proXfaceGenericModuleId, proip=proip, proteon=proteon, pDot3ChipMC68EN360=pDot3ChipMC68EN360, ibmServiceGenericEntry=ibmServiceGenericEntry, ibmServiceGenericType=ibmServiceGenericType, ibm=ibm, defgw=defgw, ibmElsTrapV2=ibmElsTrapV2, proXfaceGenericNextMaint=proXfaceGenericNextMaint, ibm2210routing=ibm2210routing, ibm2210admin=ibm2210admin, proXfaceGenericMaintFails=proXfaceGenericMaintFails, proProtoIpDefGwAge=proProtoIpDefGwAge, ibm2210=ibm2210, ibm2210system=ibm2210system, proProtoIpDefGwAddress=proProtoIpDefGwAddress, ibmElsTrapV1=ibmElsTrapV1, proXfaceGenericEntry=proXfaceGenericEntry, ibmProd=ibmProd, proXfaceGenericMaintCnt=proXfaceGenericMaintCnt)
