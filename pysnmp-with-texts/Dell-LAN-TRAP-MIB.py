#
# PySNMP MIB module Dell-LAN-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-LAN-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:56:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
dellLan, dellLanCommon = mibBuilder.importSymbols("Dell-Vendor-MIB", "dellLan", "dellLanCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Bits, Counter32, Counter64, NotificationType, Integer32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Bits", "Counter32", "Counter64", "NotificationType", "Integer32", "iso", "ModuleIdentity")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
dellAlarmGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 1))
if mibBuilder.loadTexts: dellAlarmGroup.setLastUpdated('200504260000Z')
if mibBuilder.loadTexts: dellAlarmGroup.setOrganization('Dell.')
if mibBuilder.loadTexts: dellAlarmGroup.setContactInfo(' ')
if mibBuilder.loadTexts: dellAlarmGroup.setDescription(' ')
dellTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellTrapInfo.setStatus('current')
if mibBuilder.loadTexts: dellTrapInfo.setDescription('This text string may be used to provide additional information regarding the trap being sent. Any specific formatting information is given in the trap definition.')
dellTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 0), ("info", 1), ("minor", 2), ("major", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: dellTrapSeverity.setDescription('The severity type of the enterprise-specific trap sent to the Network Management Station by the Dell managed device. The Severity level are defined as follows: Critical - service affecting event. Major - a major error which is not service affecting but does require immediate user attention to prevent further degredation of the system, which may lead to a critical error. For example, if a redundant port failure would be considered a major event whereas the failure of an unprotected port is a critical event. Minor - a minor event which is not service affecting and is unlikely to lead to a major or critical event. The user does not need to take immediate actions but some action is required to clear the event. Info - a notification to the user of some event that does not require any user action. For example, a security notification is useful information but does not require the user to take any specific immediate action. This event is not cleared. Clear - this special trap is sent to clear some previously sent trap. Note that if the sequence number sent with the clear event is 0 then the clear event is used to indicate that all outstanding event of this particular type on a given source (dellTrapSource) has been cleared. If the event sequence number (dellTrapSeqNum) is sent with a non-zero value, then the clear event is sent to clear only the specific trap instance designated by the sequence number in question.')
dellTrapSource = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellTrapSource.setStatus('current')
if mibBuilder.loadTexts: dellTrapSource.setDescription("The trap source is a string identifying the component of the device generating the trap. The source identifies the component associated with the fault. This may for example, identify the unit, slot, port, and possibly logical ports (VLAN, LAG) from which the fault occurs. The format of the source string is: 'TYPE=#:TYPE=#:...' where the TYPE may be one of 'unit' or 'slot' or 'port' or 'VLAN' or 'LAG'. For example: 'unit=3:slot=1:port=2' - indicates the trap comes from port 2 in slot 1 of the switch #3 in the stack. 'unit=2:VLAN=10' - indicates the trap comes from VLAN=10 in unit 2. 'unit=1' - indicates the trap comes from unit 1.")
dellTrapSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellTrapSeqNum.setStatus('current')
if mibBuilder.loadTexts: dellTrapSeqNum.setDescription('Since SNMP traps are transported using UDP, there is a possibility for the trap to be lost in transit. To allow the NMS the ability to detect this possibility, all traps will include a trap sequence number as part of its variable binding list. The trap sequence number may be reset each time the system reboots and will increment for each trap sent from the device. When a missing trap sequence number is detected the NMS may be able to refresh its state of the switch to determine what event it may have missed.')
dellTrapTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellTrapTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dellTrapTimeStamp.setDescription('The trap header includes the system up time which mark when the trap was generated, but often it is important to know the absolute time when the trap was generated. This time stamp is based on GMT (universal time) time zone. This will allow the timestamps to be correlated consistently across a large network.')
hwResourceOverflow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 500)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: hwResourceOverflow.setStatus('current')
if mibBuilder.loadTexts: hwResourceOverflow.setDescription('Indicates that a switch hardware resource overflowed. The dellTrapSource should indicate the unit number whereas dellTrapInfo should identify the resource that overflowed.')
swResourceOverflow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 510)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: swResourceOverflow.setStatus('current')
if mibBuilder.loadTexts: swResourceOverflow.setDescription('Indicates that a switch software resource overflowed. The dellTrapSource should indicate the unit number whereas dellTrapInfo should identify the resource that overflowed (e.g. maximum VLAN/LAG/MACs/IPs exceeded).')
configChanged = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 520)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: configChanged.setStatus('current')
if mibBuilder.loadTexts: configChanged.setDescription('Indicates that the switch configuration has changed. The dellTrapSource should indicate the source of the change such as the unit, slot, port, VLAN, LAG, etc. The dellTrapInfo may indicate additional information regarding the change.')
resetRequired = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 530)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: resetRequired.setStatus('current')
if mibBuilder.loadTexts: resetRequired.setDescription('This trap indicates that in order to perform the last SET request, a reset operation of the router/bridge is required. This may occur for any number of reasons such as if the change affects the routing protocols to be switched from SPF to STP. This trap warns the user to manually reset the switch using either physical or software reset.')
endTftp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 540)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: endTftp.setStatus('current')
if mibBuilder.loadTexts: endTftp.setDescription('This trap indicates that the device finished a TFTP transaction with the management station. The dellTrapInfo field will provide TFTP exit code and name/type of the file being transferred.')
abortTftp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 550)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: abortTftp.setStatus('current')
if mibBuilder.loadTexts: abortTftp.setDescription('This trap indicates that in the device aborted a TFTP session with the management station. The dellTrapInfo field will provide TFTP exit code and name/type of the file being transferred.')
startTftp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 560)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: startTftp.setStatus('current')
if mibBuilder.loadTexts: startTftp.setDescription('Informational trap indicating that the device has intiated a TFTP session. dellTrapInfo will contain the name/type of the file being transferred.')
linkFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 570)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: linkFailure.setStatus('current')
if mibBuilder.loadTexts: linkFailure.setDescription('Link failure detected, no backup available. The dellTrapSource should indicate the fail link.')
linkFailureSwitchBackUp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 580)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: linkFailureSwitchBackUp.setStatus('current')
if mibBuilder.loadTexts: linkFailureSwitchBackUp.setDescription('Automantic switchover to backup link because of main link fault. The dellTrapSource indicates the backup link coming on, and the dellTrapInfo indicates the failed link.')
mainLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 590)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: mainLinkUp.setStatus('current')
if mibBuilder.loadTexts: mainLinkUp.setDescription('Communication returned to main link. The dellTrapSource indicates the main link coming up, and the dellTrapInfo indicates the backup link.')
errorsDuringInit = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 600)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: errorsDuringInit.setStatus('current')
if mibBuilder.loadTexts: errorsDuringInit.setDescription('This trap indicates that the an error occured during initialization phase of the switch. Additional information is provided in the dellTrapInfo field.')
vlanDynPortAdded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 610)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vlanDynPortAdded.setStatus('current')
if mibBuilder.loadTexts: vlanDynPortAdded.setDescription('Indicates that a port was dynamically added to the VLAN. The dellTrapSource will indicate the VLAN, and the dellTrapInfo will indicate the port being added.')
vlanDynPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 620)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vlanDynPortRemoved.setStatus('current')
if mibBuilder.loadTexts: vlanDynPortRemoved.setDescription('Indicates that a port was dynamically removed from a VLAN. The dellTrapSource will indicate the VLAN, and the dellTrapInfo will indicate the port being removed.')
ipZhrReqStaticConnNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 630)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: ipZhrReqStaticConnNotAccepted.setStatus('current')
if mibBuilder.loadTexts: ipZhrReqStaticConnNotAccepted.setDescription('The requested static connection was not accepted because there is no available IP virtual address to allocate to it.')
ipZhrVirtualIpAsSource = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 640)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: ipZhrVirtualIpAsSource.setStatus('current')
if mibBuilder.loadTexts: ipZhrVirtualIpAsSource.setDescription('The virtual IP address appeared as a source IP. All the connections using it will be deleted and it will not be further allocated to new connections.')
ipZhrNotAllocVirtualIp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 650)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: ipZhrNotAllocVirtualIp.setStatus('current')
if mibBuilder.loadTexts: ipZhrNotAllocVirtualIp.setDescription('The source IP address sent an ARP specifying a virtual IP which was not allocated for this source. This virtual IP will not be allocated to connections of this specific source IP.')
stackMasterFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 660)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackMasterFailed.setStatus('current')
if mibBuilder.loadTexts: stackMasterFailed.setDescription('Indicates that the stack master unit has failed. This trap is generated by the new master when it takes over the stack. The dellTrapSource should be the new master unit #, and the dellTrapInfo should identify the old master unit #.')
stackNewMasterElected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 670)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackNewMasterElected.setStatus('current')
if mibBuilder.loadTexts: stackNewMasterElected.setDescription('Indicates when a new master has been elected. This is different from a stack failure in that the master has not failed but for some reason a new master has been elected (e.g. the user requested a new master. The trap should be generated by the new master. the dellTrapSource should identify the new master, and the dellTrapInfo should identify the old master.')
stackMemberUnitFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 680)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackMemberUnitFailed.setStatus('current')
if mibBuilder.loadTexts: stackMemberUnitFailed.setDescription('Indicates that a member of the stack has failed. This condition is detected by the master unit so the dellTrapSource should indicate the master unit ID and the dellTrapInfo should indicate the member unit that failed.')
stackNewMemberUnitAdded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 690)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackNewMemberUnitAdded.setStatus('current')
if mibBuilder.loadTexts: stackNewMemberUnitAdded.setDescription('Indicates that a new member unit has been added to the stack. This trap is generated by the master unit so the dellTrapSource should indicate the master unit ID, and the dellTrapInfo should identify the new unit ID.')
stackMemberUnitRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 700)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackMemberUnitRemoved.setStatus('current')
if mibBuilder.loadTexts: stackMemberUnitRemoved.setDescription('Indicates that a member unit has been removed from the stack. The dellTrapSource indicates the master unit ID and the dellTrapInfo indicates the unit ID being removed.')
stackSplitMasterReport = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 710)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackSplitMasterReport.setStatus('current')
if mibBuilder.loadTexts: stackSplitMasterReport.setDescription('Indicates that the stack has split into two distinct stacks which means that each stack may end up with its own master temporarily until the stack is rejoined. This is possibly different from the stackMemberUnitFailed trap, which indicates only a single unit failure. This trap indicates that the master has lost track of part of the stack membership so that the other units may elect their own master. The dellTrapSource should indicate the master unit ID and the dellTrapInfo should identify the units that are split from the main stack.')
stackSplitNewMasterReport = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 720)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackSplitNewMasterReport.setStatus('current')
if mibBuilder.loadTexts: stackSplitNewMasterReport.setDescription('Indicates that the stack has split into two distinct stacks which means that each stack may end up with its own master temporarily until the stack is rejoined. This trap is generated by the new master unit elected in the split sub-stack. The dellTrapSource should identify the new master unit ID, and the dellTrapInfo should identify the old master unit ID before the split occured.')
stackRejoined = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 730)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackRejoined.setStatus('current')
if mibBuilder.loadTexts: stackRejoined.setDescription('Indicates that previously split stack has rejoined. The rejoined stack will elect a master and this trap should be generated by the elected master. The dellTrapSource should indicate the master unit ID and the dellTrapInfo should list the unit IDs of the members.')
stackLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 740)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stackLinkFailed.setStatus('current')
if mibBuilder.loadTexts: stackLinkFailed.setDescription('Indicates a failure in one of the stacking link. If this stack was connected in a ring, then the failure of a stacking link results in a chain stack instead of a ring. Another failure in the chain topology would result in a split stack. If the stack is connected in a meshed or star topology then multiple link failure may be tolerated. This trap may be generated by any unit within the stack and must indicate the source of the failure. The dellTrapSource should identify one end of the link where the failure is detected. The dellTrapInfo may provide additional information about the failure.')
dhcpAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 750)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: dhcpAllocationFailure.setStatus('current')
if mibBuilder.loadTexts: dhcpAllocationFailure.setDescription('DHCP failed to allocate an IP address to a requesting host because of memory shortage or inadequate configuration of available IP addresses.')
dot1dStpPortStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 760)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: dot1dStpPortStateForwarding.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortStateForwarding.setDescription('The trap is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state.')
dot1dStpPortStateNotForwarding = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 770)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: dot1dStpPortStateNotForwarding.setStatus('current')
if mibBuilder.loadTexts: dot1dStpPortStateNotForwarding.setDescription('The trap is sent by a bridge when any of its configured ports transitions from the Forwarding state to the Blocking state.')
policyDropPacketTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 780)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: policyDropPacketTrap.setStatus('current')
if mibBuilder.loadTexts: policyDropPacketTrap.setDescription('Indicates that the packet drop due to the policy. This trap may result in a huge number of trap packets and should be used only for debugging purposes. The number of traps sent per time period is user configurable and the user may enable/disable generation of this trap.')
policyForwardPacketTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 790)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: policyForwardPacketTrap.setStatus('current')
if mibBuilder.loadTexts: policyForwardPacketTrap.setDescription('Indicates that the packet has forward based on policy. The number of traps sent per time period is user configurable and the user may enable/disable generation of this trap.')
igmpV1MsgReceived = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 800)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: igmpV1MsgReceived.setStatus('current')
if mibBuilder.loadTexts: igmpV1MsgReceived.setDescription('An IGMP Message of v1 received on a given interface. The dellTrapSource should indicate the interface.')
vrrpEntriesDeleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 810)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vrrpEntriesDeleted.setStatus('current')
if mibBuilder.loadTexts: vrrpEntriesDeleted.setDescription('One or more VRRP entries deleted due to IP interface deletion or transition. ')
trunkPortAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 820)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: trunkPortAddedTrap.setStatus('current')
if mibBuilder.loadTexts: trunkPortAddedTrap.setDescription('Informational trap indicating that a port is added to a trunk. The dellTrapSource should indicate the trunk to which the port is added. The dellTrapInfo should indicate the port being added.')
trunkPortRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 830)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: trunkPortRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: trunkPortRemovedTrap.setDescription('This warning is generated when a port removed from a trunk. The dellTrapSource should indicate the trunk from which the port is removed. The dellTrapInfo should indicate the port being removed.')
lockPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 840)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: lockPortTrap.setStatus('current')
if mibBuilder.loadTexts: lockPortTrap.setDescription('Informational trap indicating that a port that is blocked from MAC learning has receive a frame with new source Mac Address. The dellTrapSource should identify the port and the dellTrapInfo should specify the new MAC address received.')
vlanDynVlanAdded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 850)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vlanDynVlanAdded.setStatus('current')
if mibBuilder.loadTexts: vlanDynVlanAdded.setDescription('Indicates that a dynamic VLAN has been added via GVRP. The dellTrapSource should identify the VLAN being added.')
vlanDynVlanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 860)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vlanDynVlanRemoved.setStatus('current')
if mibBuilder.loadTexts: vlanDynVlanRemoved.setDescription('Indicates that a dynamic VLAN has been removed via GVRP. The dellTrapSource should identify the VLAN being removed.')
vlanDynamicToStatic = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 870)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vlanDynamicToStatic.setStatus('current')
if mibBuilder.loadTexts: vlanDynamicToStatic.setDescription('Indicates that a dynamic VLAN has been made static. The dellTrapSource should identify the VLAN.')
vlanStaticToDynamic = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 880)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: vlanStaticToDynamic.setStatus('current')
if mibBuilder.loadTexts: vlanStaticToDynamic.setDescription('Indicates that a static VLAN has been made dynamic. The dellTrapSource should identify the VLAN.')
envMonFanStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 890)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: envMonFanStateChange.setStatus('current')
if mibBuilder.loadTexts: envMonFanStateChange.setDescription('Trap indicating the fan state. The dellTrapSource should identify the exact fan index if there are multiple fans. The dellTrapInfo may provide additional info relating to the fan new state.')
envMonPowerSupplyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 900)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: envMonPowerSupplyStateChange.setStatus('current')
if mibBuilder.loadTexts: envMonPowerSupplyStateChange.setDescription('Trap indicating the power supply state. The dellTrapSource should identify the exact power supply. The dellTrapInfo may provide additional info regarding the power state.')
envMonTemperatureRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 910)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: envMonTemperatureRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: envMonTemperatureRisingAlarm.setDescription('Trap indicating that the temperature in the device has exceeded the device specific safe temperature threshold.')
copyFinished = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 920)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: copyFinished.setStatus('current')
if mibBuilder.loadTexts: copyFinished.setDescription('Informational trap indicating that the device has finished a copy operation successfully.')
copyFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 930)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: copyFailed.setStatus('current')
if mibBuilder.loadTexts: copyFailed.setDescription('Informational trap indicating that the copy operation has failed.')
dot1xPortStatusAuthorizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 940)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: dot1xPortStatusAuthorizedTrap.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatusAuthorizedTrap.setDescription('Informational trap indicating that port 802.1x status is authorized.')
dot1xPortStatusUnauthorizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 950)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: dot1xPortStatusUnauthorizedTrap.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatusUnauthorizedTrap.setDescription('Warning trap is indicating that port 802.1x status is unAuthorized.')
broadcastStormDetected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 960)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: broadcastStormDetected.setStatus('current')
if mibBuilder.loadTexts: broadcastStormDetected.setDescription('Indicates that a broadcast storm has been detected. The dellTrapSource should indicate the port on which the broadcast storm is detected.')
stpElectedAsRoot = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 970)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stpElectedAsRoot.setStatus('current')
if mibBuilder.loadTexts: stpElectedAsRoot.setDescription('Indicates that the switch has been elected as the new STP root.')
stpNewRootElected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 980)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: stpNewRootElected.setStatus('current')
if mibBuilder.loadTexts: stpNewRootElected.setDescription('Indicates that a new root has been elected. The dellTrapSource should indicate the member unit number and the dellTrapInfo should provide information on the new root.')
igmpElectedAsQuerier = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 990)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: igmpElectedAsQuerier.setStatus('current')
if mibBuilder.loadTexts: igmpElectedAsQuerier.setDescription('Indicates that this switch has been elected as the new IGMP snooping querier.')
invalidUserLoginAttempted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 1000)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: invalidUserLoginAttempted.setStatus('current')
if mibBuilder.loadTexts: invalidUserLoginAttempted.setDescription('Indicates that an invalid user tries to login to the CLI or Web. The dellTrapSource should indicate the unit member ID and the dellTrapInfo should indicate whether the login attempt is on the CLI or Web and the IP address from which the attempt was made.')
managementACLViolation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 1010)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: managementACLViolation.setStatus('current')
if mibBuilder.loadTexts: managementACLViolation.setDescription('Indicates that an SNMP request or CLI/Web access request was received but does not meet the management ACL rules. For example, if the request comes from an invalid IP address or has the wrong SNMP community string (for V1/2c) or is not authenticated for SNMPv3, etc. The dellTrapSource should indicate the unit # and the dellTrapInfo should indicate which interface (web, cli, snmp) is violated and the source IP address of the request.')
sfpInserted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 1020)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: sfpInserted.setStatus('current')
if mibBuilder.loadTexts: sfpInserted.setDescription('Indicates that an SFP was inserted into the system. The dellTrapSource should indicate the unit # and the dellTrapInfo should indicate on which interface was the SFP inserted.')
sfpRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 1030)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: sfpRemoved.setStatus('current')
if mibBuilder.loadTexts: sfpRemoved.setDescription('Indicates that an SFP was removed from the system. The dellTrapSource should indicate the unit # and the dellTrapInfo should indicate from which interface was the SFP removed.')
xfpInserted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 1040)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: xfpInserted.setStatus('current')
if mibBuilder.loadTexts: xfpInserted.setDescription('Indicates that an XFP was inserted into the system. The dellTrapSource should indicate the unit # and the dellTrapInfo should indicate on which interface was the XFP inserted.')
xfpRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 1050)).setObjects(("Dell-LAN-TRAP-MIB", "dellTrapTimeStamp"), ("Dell-LAN-TRAP-MIB", "dellTrapSeqNum"), ("Dell-LAN-TRAP-MIB", "dellTrapSource"), ("Dell-LAN-TRAP-MIB", "dellTrapSeverity"), ("Dell-LAN-TRAP-MIB", "dellTrapInfo"))
if mibBuilder.loadTexts: xfpRemoved.setStatus('current')
if mibBuilder.loadTexts: xfpRemoved.setDescription('Indicates that an XFP was removed from the system. The dellTrapSource should indicate the unit # and the dellTrapInfo should indicate from which interface was the XFP removed.')
mibBuilder.exportSymbols("Dell-LAN-TRAP-MIB", dellAlarmGroup=dellAlarmGroup, PYSNMP_MODULE_ID=dellAlarmGroup, mainLinkUp=mainLinkUp, vlanDynPortRemoved=vlanDynPortRemoved, abortTftp=abortTftp, lockPortTrap=lockPortTrap, broadcastStormDetected=broadcastStormDetected, dellTrapSeverity=dellTrapSeverity, dellTrapSeqNum=dellTrapSeqNum, stackMemberUnitRemoved=stackMemberUnitRemoved, dot1xPortStatusUnauthorizedTrap=dot1xPortStatusUnauthorizedTrap, stackSplitNewMasterReport=stackSplitNewMasterReport, sfpInserted=sfpInserted, hwResourceOverflow=hwResourceOverflow, endTftp=endTftp, policyDropPacketTrap=policyDropPacketTrap, igmpV1MsgReceived=igmpV1MsgReceived, invalidUserLoginAttempted=invalidUserLoginAttempted, envMonTemperatureRisingAlarm=envMonTemperatureRisingAlarm, swResourceOverflow=swResourceOverflow, stackNewMemberUnitAdded=stackNewMemberUnitAdded, vlanDynVlanAdded=vlanDynVlanAdded, stackNewMasterElected=stackNewMasterElected, managementACLViolation=managementACLViolation, stpElectedAsRoot=stpElectedAsRoot, policyForwardPacketTrap=policyForwardPacketTrap, dellTrapInfo=dellTrapInfo, configChanged=configChanged, vlanDynPortAdded=vlanDynPortAdded, vrrpEntriesDeleted=vrrpEntriesDeleted, ipZhrVirtualIpAsSource=ipZhrVirtualIpAsSource, dellTrapTimeStamp=dellTrapTimeStamp, startTftp=startTftp, linkFailureSwitchBackUp=linkFailureSwitchBackUp, dot1dStpPortStateNotForwarding=dot1dStpPortStateNotForwarding, resetRequired=resetRequired, ipZhrReqStaticConnNotAccepted=ipZhrReqStaticConnNotAccepted, trunkPortAddedTrap=trunkPortAddedTrap, trunkPortRemovedTrap=trunkPortRemovedTrap, stackLinkFailed=stackLinkFailed, vlanDynamicToStatic=vlanDynamicToStatic, vlanStaticToDynamic=vlanStaticToDynamic, envMonPowerSupplyStateChange=envMonPowerSupplyStateChange, dot1xPortStatusAuthorizedTrap=dot1xPortStatusAuthorizedTrap, dellTrapSource=dellTrapSource, stpNewRootElected=stpNewRootElected, igmpElectedAsQuerier=igmpElectedAsQuerier, xfpRemoved=xfpRemoved, copyFailed=copyFailed, xfpInserted=xfpInserted, envMonFanStateChange=envMonFanStateChange, dot1dStpPortStateForwarding=dot1dStpPortStateForwarding, linkFailure=linkFailure, stackMasterFailed=stackMasterFailed, ipZhrNotAllocVirtualIp=ipZhrNotAllocVirtualIp, stackSplitMasterReport=stackSplitMasterReport, dhcpAllocationFailure=dhcpAllocationFailure, vlanDynVlanRemoved=vlanDynVlanRemoved, sfpRemoved=sfpRemoved, stackRejoined=stackRejoined, stackMemberUnitFailed=stackMemberUnitFailed, copyFinished=copyFinished, errorsDuringInit=errorsDuringInit)
