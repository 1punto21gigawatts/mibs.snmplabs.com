#
# PySNMP MIB module SALIX-HNE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-HNE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
atmfM4CellProtoHistIndex, atmfM4PlugInUnitEntry, atmfM4TcAdaptorEntry, atmfM4EquipHolderEntry = mibBuilder.importSymbols("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex", "atmfM4PlugInUnitEntry", "atmfM4TcAdaptorEntry", "atmfM4EquipHolderEntry")
atmVclEntry, AtmTrafficDescrParamIndex, atmInterfaceConfEntry, atmVclVpi, atmVplVpi, atmVplEntry, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVclEntry", "AtmTrafficDescrParamIndex", "atmInterfaceConfEntry", "atmVclVpi", "atmVplVpi", "atmVplEntry", "atmVclVci")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
hrSWInstalledIndex, hrSWInstalledEntry = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSWInstalledIndex", "hrSWInstalledEntry")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
hybridSwitch, = mibBuilder.importSymbols("SALIX-MIB", "hybridSwitch")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, MibIdentifier, Unsigned32, Integer32, IpAddress, NotificationType, ObjectIdentity, TimeTicks, Counter64, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "MibIdentifier", "Unsigned32", "Integer32", "IpAddress", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter64", "Gauge32", "Counter32")
RowStatus, DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
sonetPathIntervalEntry, sonetMediumEntry, sonetSectionCurrentEntry, sonetPathCurrentEntry, sonetLineIntervalEntry, sonetLineCurrentEntry, sonetSectionIntervalEntry = mibBuilder.importSymbols("SONET-MIB", "sonetPathIntervalEntry", "sonetMediumEntry", "sonetSectionCurrentEntry", "sonetPathCurrentEntry", "sonetLineIntervalEntry", "sonetLineCurrentEntry", "sonetSectionIntervalEntry")
hneMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1))
if mibBuilder.loadTexts: hneMIB.setLastUpdated('9808170000Z')
if mibBuilder.loadTexts: hneMIB.setOrganization('SALIX Technologies')
if mibBuilder.loadTexts: hneMIB.setContactInfo('904 Wind River Lane Suite 101 Gaithersburg, MD 20878 (301)-417-0017')
if mibBuilder.loadTexts: hneMIB.setDescription('The HNE enterprise specific MIB')
class HnePlugInUnitType(TextualConvention, Integer32):
    description = 'HNE hardware plug-in unit types: unknown(0) - Unknown plug-in unit type mpu(1) - Management Processor Unit dpu(2) - Data Processor Unit smu(3) - Sync Module Unit liu(4) - Line Interface Unit hsf(5) - Hybrid Switch Fabric Unit powerSupply(6) - Power supply fan(7) - Fan Unit hardDrive(8) - Hard drive'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("mpu", 1), ("dpu", 2), ("smu", 3), ("liu", 4), ("hsf", 5), ("powerSupply", 6), ("fan", 7), ("hardDrive", 8))

hneMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1))
hneMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 2))
hneMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3))
hneMIBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4))
hneSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1))
hneSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2))
hneTdm = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3))
hneAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4))
hneAtmfM4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5))
hnePlugInUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 6))
hneSystemHost = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 1))
hneSystemSync = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2))
hneSystemHsf = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 3))
hneSysSyncTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("line", 2), ("external", 3))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncTimingMode.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncTimingMode.setDescription('An identification of the source from which timing is derived by the working sync module within the HNE. Possible values are: internal(1) - the internal oscillator on the sync module will be used as the master clock for system synchronization. line(2) - the sync module is synchronizing with the receive line timing from a signal received by an LIU. external(3) - the Building Integrated Timing System (BITS) available on a T1 line plugged into an LIU will be used as the master clock for system synchronization.')
hneSysSyncPrimaryRefLine = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncPrimaryRefLine.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncPrimaryRefLine.setDescription("The interface index of the primary physical line termination point (SONET line) from which the sync module can derive timing. This is used only if the hneSysSyncTimingMode is set to 'line'.")
hneSysSyncSecondaryRefLine = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncSecondaryRefLine.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncSecondaryRefLine.setDescription("The interface index of the secondary physical line termination point (SONET line) from which the sync module can derive timing. This is used only if the hneSysSyncTimingMode is set to 'line', and the primary reference is unavailable or out of a valid frequency range.")
hneSysSyncRevertiveSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncRevertiveSwitch.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncRevertiveSwitch.setDescription('Indication of whether or not the active reference should revert to primary if that reference becomes available after a failure is cleared. true(1) - reference switching is revertive false(2) - reference switching is non-revertive')
hneSysSyncClockMode = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("freeRun", 1), ("normal", 2), ("holdover", 3), ("fastStart", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncClockMode.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncClockMode.setDescription("Indication of the clock mode of the 'working' sync module. freeRun(1) - mode in which the clock is synchronized to the module's internal oscillator. normal(2) - mode in which the clock is synchronized to an external reference. holdover(3) - mode in which the clock, after having been synchronized to an external reference, loses that reference and all other external references. fastStart(4) - mode in which the clock is in the process of synchronizing to a reference.")
hneSysSyncConfiguredActiveRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncConfiguredActiveRef.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncConfiguredActiveRef.setDescription("The configured active reference line from which the sync module should deriving its timing. This object is relevant if the hneSysSyncTimingMode is set to 'line' or 'external'. Writing a value that is different from its current value will force the Sync module to switch to using the specified reference line. primary(1) - The hneSysSyncPrimaryRefLine is the active reference line secondary (2) - The hneSysSyncSecondaryRefLine is the active reference line")
hneSysSyncAutoRefSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncAutoRefSwitch.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncAutoRefSwitch.setDescription('Indication of automatic reference switching being enabled or disabled. true(1) - Auto reference switching is enabled false(2) - Auto reference switching is disabled')
hneSysSyncFreeRunAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncFreeRunAlarm.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncFreeRunAlarm.setDescription('Indication of alarm associated with free-run mode being enabled or disabled. true(1) - Alarm is enabled false(2) - Alarm is disabled')
hneSysSyncWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 9), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncWorking.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncWorking.setDescription('The entPhysicalIndex of the sync module plug-in unit that is providing the system synchronizaton signal. Writing a new value to this object, a value not equal to the current value, will: - update the hneSysSyncProtect object with the current value of the hneSysSyncWorking object and - activate the specified sync module to start providing the system synchronization signal. A value of 0 indicates that there are no operational or not installed sync modules in the system. Writing zero, an invalid index, or the current value to this object will have no effect. If the working sync module fails, the system will automatically switch to the sync module specified in the hneSysSyncProtect object.')
hneSysSyncProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 10), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncProtect.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncProtect.setDescription('The entPhysicalIndex of the sync module plug-in unit that is protecting or on standby to the working sync module. A value of 0 indicates that there is no redundant sync module available or provisioned as a protect module.')
hneSysSyncPrimaryRefLineState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("lossOfSignalError", 2), ("frequencyOffsetError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncPrimaryRefLineState.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncPrimaryRefLineState.setDescription("This variable indicates the state of the primary reference line termination point (SONET line) to be used as a timing source by the sync module. This object is relevant if the hneSysSyncTimingMode is set to 'line' and the hneSysSyncPrimaryRefLine is configured. unknown(0) - the state of the line has not been determined. valid(1) - the line is operating within the frequency specification. lossOfSignalError - loss of signal was detected from the line and has failed the health check. frequencyOffsetError - frequency errors were detected from the line and has failed the health check")
hneSysSyncSecondaryRefLineState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("lossOfSignalError", 2), ("frequencyOffsetError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncSecondaryRefLineState.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncSecondaryRefLineState.setDescription("This variable indicates the state of the secondary reference line termination point (SONET line) to be used as a timing source by the sync module. This object is relevant if the 'hneSysSyncTimingMode' is set to 'line' and the 'hneSysSyncPrimaryRefLine' is configured. unknown(0) - the state of the line has not been determined. valid(1) - the line is operating within frequency specification. lossOfSignalError - loss of signal was detected from the line and has failed the health check. frequencyOffsetError - frequency errors were detected from the line and has failed the health check")
hneSysSyncCurrentActiveRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncCurrentActiveRef.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncCurrentActiveRef.setDescription("Indication of the active reference line from which the sync module is deriving its timing. This object is relevant if the hneSysSyncTimingMode is set to 'line' or 'external'. The value of this variable can differ from the 'hneSysSyncConfiguredActiveRef' if the sync module determine an error condition with the 'hneSysSyncConfiguredActiveRef' and has switched to using another SONET line as the active reference. primary(1) - The hneSysSyncPrimaryRefLine is the current active reference line secondary (2) - The hneSysSyncSecondaryRefLine is the current active reference line")
hneSysSyncForcedState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("revertiveSwitchInhibit", 1), ("autoReferenceSwitchInhbit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncForcedState.setStatus('current')
if mibBuilder.loadTexts: hneSysSyncForcedState.setDescription("This variable indicates the state of the sync module with regard to switching between the configured active reference, the value of the 'hneSysSyncConfiguredActiveRef' variable, and the alternate active reference. The alternate active reference is identified by the 'hneSysSyncPrimaryRefLine' or 'hneSysSyncSecondaryRefLine' that is not configured as the 'hneSysSyncConfiguredActiveRef'. none(0) - the sync module is in a state where it is free to switch between the configured active reference the alternate active reference. revertiveSwitchInhibit - the state of the sync module after switching from the 'hneSysSyncConfiguredActiveRef' to the 'hneSysSyncCurrentActiveRef' when the 'hneSysSyncRevertiveSwitch' is configured as 'false'. In this state the sync module will not revert back to using the 'hneSysSyncConfiguredActiveRef' unless the 'hneSysSyncCurrentActiveRef' has failed and the state of the active reference defined by the 'hneSysSyncConfiguredActiveRef' variable is 'valid'. autoReferenceSwitchInhibit - the state of the sync module when the 'hneSysSyncAutoReferenceSwitch' variable is configured as 'false'. In this state the sync module will not switch to using the alternate active reference unless the 'hneSysSyncCurrentActiveRef' has failed and the state of the alternate active reference is 'valid'.")
hneSysHsfWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 3, 1), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysHsfWorking.setStatus('current')
if mibBuilder.loadTexts: hneSysHsfWorking.setDescription('The PhysicalIndex of the Hybrid Switch Fabric (HSF) module plug-in unit that is performing switching in the HNE. Writing a new value to this variable will: - update the hneHsfProtect object with the current value of the hneHsfWorking object and - activate the specified HSF module to start performing ATM and TDM switching in the system. A value of 0 indicates that there is no operational switch fabric installed in the HNE. Writing zero, an invalid index, or the current value to this object will have no effect. If the working HSF module fails, the system will automatically switch to the HSF module specified in the hneHsfProtect object.')
hneSysHsfProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 3, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysHsfProtect.setStatus('current')
if mibBuilder.loadTexts: hneSysHsfProtect.setDescription('The entPhysicalIndex of the Hybrid Switch Fabric (HSF) module plug-in unit that is protecting or on standby to the working HSF module, hneHSFWorking. A value of 0 indicates that there are no operational or no additional HSF modules present for redundancy.')
hneSonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hneSonetLineTable.setStatus('current')
if mibBuilder.loadTexts: hneSonetLineTable.setDescription('The HNE sonet line table. This table augments the sonetMediumTable defined in the Sonet / SDH MIB.')
hneSonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1), )
sonetMediumEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetLineEntry"))
hneSonetLineEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetLineEntry.setStatus('current')
if mibBuilder.loadTexts: hneSonetLineEntry.setDescription('An entry in the HNE sonet line table. An entry contains HNE specific sonet line information not found in the Sonet / SDH MIB.')
hneSonetLineTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("loop", 2))).clone('sync')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetLineTimingSource.setStatus('current')
if mibBuilder.loadTexts: hneSonetLineTimingSource.setDescription("The source of timing for the transmitted signal. This must be set to 'loop' in the 'value added' mode of operation. sync(1) - line timing signal generated by the sync module loop(2) - line timing generated by a line looped back to the line input")
hneSonetLineDccSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("section", 1), ("line", 2))).clone('section')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetLineDccSelection.setStatus('current')
if mibBuilder.loadTexts: hneSonetLineDccSelection.setDescription('The selection of which DCC to transmit and receive management traffic on. Only one of the two will be used by the HNE at a time. Possible selections are: section(1) - section overhead will carry the DCC line(2) - line overhead will carry the DCC')
hneSonetLineOverheadLoopThroughModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetLineOverheadLoopThroughModeEnabled.setStatus('current')
if mibBuilder.loadTexts: hneSonetLineOverheadLoopThroughModeEnabled.setDescription('Indicates whether or not the line overhead bytes of a connection should be looped back through to the outbound path. true(1) - loop through mode is enabled false(2) - loop through mode is not enabled')
hneSonetProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hneSonetProtectionTable.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionTable.setDescription('Table giving information about SONET protection switching relationships for signals attached to the HNE. Each record describes a relationship between two SONET lines where one is functioning as the backup for the other.')
hneSonetProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "SALIX-HNE-MIB", "hneSonetProtectionInterfaceHigh"), (0, "SALIX-HNE-MIB", "hneSonetProtectionInterfaceLow"))
if mibBuilder.loadTexts: hneSonetProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionEntry.setDescription('An entry in the HNE protection switching table. An entry contains configuration switching information for the high and low protected interface pair.')
hneSonetProtectionInterfaceHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hneSonetProtectionInterfaceHigh.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionInterfaceHigh.setDescription('The ifIndex of one of the SONET lines involved in the relationship.')
hneSonetProtectionInterfaceLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hneSonetProtectionInterfaceLow.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionInterfaceLow.setDescription('The ifIndex of the other SONET lines involved in the relationship.')
hneSonetProtectionInterfaceWorking = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionInterfaceWorking.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionInterfaceWorking.setDescription('The ifIndex of the SONET line which is currently carrying live traffic, termed the working or active interface. Writing the value of the protect ifIndex to this value will cause a protection switch.')
hneSonetProtectionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("onePlusOne", 1), ("oneToOne", 2), ("oneToN", 3))).clone('onePlusOne')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionConfig.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionConfig.setDescription('The linear APS configuration for the protection relationship. See GR-253-CORE for details.')
hneSonetProtectionRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionRevertive.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionRevertive.setDescription("Indication of whether or not the role of 'working' should return after a failure is cleared. See GR-253-CORE. true(1) - protection switching is revertive false(2) - protection switching is non-revertive")
hneSonetProtectionBiDirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionBiDirectional.setStatus('current')
if mibBuilder.loadTexts: hneSonetProtectionBiDirectional.setDescription('Indication of whether or not protection switching is coordinated on an end-to-end basis or not. If bi-directional, both the east-west and west-east fibers are switched simultaneously. If not, switching on the two fibers is totally independant. true(1) - protection switching is bi-directional false(2) - protection switching is uni-directional')
hneSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hneSonetPathTable.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathTable.setDescription('The HNE sonet path table. This table augments the sonetPathCurrentTable defined in the Sonet / SDH MIB.')
hneSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1), )
sonetPathCurrentEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetPathEntry"))
hneSonetPathEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetPathEntry.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathEntry.setDescription('An entry in the HNE sonet path table. An entry contains HNE specific sonet path information not found in the Sonet / SDH MIB.')
hneSonetPathContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atm", 1), ("atmVam", 2), ("notTerminated", 3), ("terminatedNotSpecified", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathContentType.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathContentType.setDescription('The type of traffic that is being carried by the sonet path atm(1) - atm cells atmVam(2) - atm value added mode notTerminated(3) - the path is cross-connected through the HNE without being terminated. terminatedNotSpecified(4) - payload of the path is unknown.')
hneSonetPathOverheadLoopThroughModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathOverheadLoopThroughModeEnabled.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathOverheadLoopThroughModeEnabled.setDescription('Indicates whether or not the path overhead bytes of a connection should be looped back through to the outbound path. true(1) - loop through mode is enabled false(2) - loop through mode is not enabled')
hneSonetPathSpeMicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("receive", 1), ("transmit", 2), ("receiveTransmit", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathSpeMicMode.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathSpeMicMode.setDescription('Indicates whether or not the SPE MIC should be calculated and inserted in the F2 user byte of the Path overhead. none(0) - SPE MIC is insertion is disabled receive(1) - SPE MIC is inserted only in the receive path transmit(2) - SPE MIC is inserted only in the transmit path receiveTransmit(3) - SPE MIC is inserted in both receive and transmit paths.')
hneSonetPathReceiveTraceMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathReceiveTraceMessage.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathReceiveTraceMessage.setDescription('The 64 byte character path trace message expected to be received in the sonet frame path overhead (J1 byte).')
hneSonetPathTransmitTraceMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathTransmitTraceMessage.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathTransmitTraceMessage.setDescription('The 64 byte character path trace message to be sent in the sonet frame path overhead (J1 byte).')
hneSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathRowStatus.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathRowStatus.setDescription("The status of this entry in the hneSonetPathTable. This object is used to create or delete a hneSonetPathTable entry and the corresponding sonetPathCurrentTable entry defined in the Sonet / SDH MIB. This object must be set to 'createAndGo' to create a new entry in this table. Row status values: active(1) - set by the agent after this entry is created notInService(2) - not applicable notReady(3) - not applicable createAndGo(4) - set by management entity when creating entry createAndWait(5)- not applicable destroy(6) - set by the management entity to destroy entry")
hneTdmCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: hneTdmCrossConnectTable.setStatus('current')
if mibBuilder.loadTexts: hneTdmCrossConnectTable.setDescription('The HNE TDM cross connect table.')
hneTdmCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "SALIX-HNE-MIB", "hneTdmCrossConnectPathTerminationPoint1"), (0, "SALIX-HNE-MIB", "hneTdmCrossConnectPathTerminationPoint2"))
if mibBuilder.loadTexts: hneTdmCrossConnectEntry.setStatus('current')
if mibBuilder.loadTexts: hneTdmCrossConnectEntry.setDescription('An entry in the HNE TDM cross connect table.')
hneTdmCrossConnectPathTerminationPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hneTdmCrossConnectPathTerminationPoint1.setStatus('current')
if mibBuilder.loadTexts: hneTdmCrossConnectPathTerminationPoint1.setDescription('The physical path termination point carrying TDM data to be cross-connected to the second physical path termination point. The hneTdmCrossConnectPathTerminationPoint1 has a lower ifIndex then the hneTdmCrossConnectPathTerminationPoint2.')
hneTdmCrossConnectPathTerminationPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hneTdmCrossConnectPathTerminationPoint2.setStatus('current')
if mibBuilder.loadTexts: hneTdmCrossConnectPathTerminationPoint2.setDescription('The second physical path termination point carrying TDM data to be cross- connected to the first physical path termination point. The hneTdmCrossConnectPathTerminationPoint2 has a higher ifIndex then the hneTdmCrossConnectPathTerminationPoint1.')
hneTdmCrossConnectOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneTdmCrossConnectOperStatus.setStatus('current')
if mibBuilder.loadTexts: hneTdmCrossConnectOperStatus.setDescription('This attribute indicates the operational state of the TDM cross connection.')
hneTdmCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneTdmCrossConnectRowStatus.setStatus('current')
if mibBuilder.loadTexts: hneTdmCrossConnectRowStatus.setDescription("The status of this entry in the hneTdmCrossConnectTable. This object is used to create or delete a hneTdmCrossConnectTable entry. This object must be set to 'createAndGo' to create a new entry in this table. Row status values: active(1) - set by the agent after this entry is created notInService(2) - not applicable notReady(3) - not applicable createAndGo(4) - set by management entity when creating entry createAndWait(5)- not applicable destroy(6) - set by the management entity to destroy entry")
hneAtmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: hneAtmInterfaceConfTable.setStatus('current')
if mibBuilder.loadTexts: hneAtmInterfaceConfTable.setDescription('The HNE ATM interface configuration table. This table augments the atmInterfaceConfEntry defined in the ATM MIB.')
hneAtmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 1, 1), )
atmInterfaceConfEntry.registerAugmentions(("SALIX-HNE-MIB", "hneAtmInterfaceConfEntry"))
hneAtmInterfaceConfEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: hneAtmInterfaceConfEntry.setStatus('current')
if mibBuilder.loadTexts: hneAtmInterfaceConfEntry.setDescription('An entry in the HNE ATM interface configuration table. An entry contains HNE specific ATM interface information not found in the ATM MIB.')
hneAtmInterfaceValueAddedModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmInterfaceValueAddedModeEnabled.setStatus('current')
if mibBuilder.loadTexts: hneAtmInterfaceValueAddedModeEnabled.setDescription('An indication of whether or not value added mode is enabled at the ATM interface. If enabled, received or transmitted cells are routed to the data processor before being forwarded by a Line Interface Unit. true(1) - value added mode is enabled false(2) - value added mode is disabled')
hneAtmTrafficDescrParamIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 3), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmTrafficDescrParamIndexNext.setStatus('current')
if mibBuilder.loadTexts: hneAtmTrafficDescrParamIndexNext.setDescription('The value to be used when creating an atmTrafficDescrParaEntry. To obtain the index value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index (or -1). A value of -1 indicates that all available entries are assigned.')
hneAtmVplTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 4), )
if mibBuilder.loadTexts: hneAtmVplTable.setStatus('current')
if mibBuilder.loadTexts: hneAtmVplTable.setDescription('The HNE Virtual Path Link (VPL) table. This table augments the atmVplTable defined in the ATM-MIB.')
hneAtmVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 4, 1), )
atmVplEntry.registerAugmentions(("SALIX-HNE-MIB", "hneAtmVplEntry"))
hneAtmVplEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: hneAtmVplEntry.setStatus('current')
if mibBuilder.loadTexts: hneAtmVplEntry.setDescription('An entry in the HNE ATM Virtual Path Link Table. This table contains information specific to the HNE implementation.')
hneAtmVplVamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("hostTerminated", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneAtmVplVamMode.setStatus('current')
if mibBuilder.loadTexts: hneAtmVplVamMode.setDescription('The operational mode of a Value Added Mode VPL that is terminated at a virtual proprietary interface on a Data Processor. The operational modes are: none(0) - Normal loopback mode hostTerminated(1) - Cells received at the Virtual Path Link termination point are routed to the Data Processor in addition to being looped back.')
hneAtmfM4TcAdaptorTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: hneAtmfM4TcAdaptorTable.setStatus('current')
if mibBuilder.loadTexts: hneAtmfM4TcAdaptorTable.setDescription('The HNE sonet path table. This table augments the atmfM4TcAdapterTable defined in the ATM-FORUM-M4-MIB.')
hneAtmfM4TcAdaptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5, 1, 1), )
atmfM4TcAdaptorEntry.registerAugmentions(("SALIX-HNE-MIB", "hneAtmfM4TcAdaptorEntry"))
hneAtmfM4TcAdaptorEntry.setIndexNames(*atmfM4TcAdaptorEntry.getIndexNames())
if mibBuilder.loadTexts: hneAtmfM4TcAdaptorEntry.setStatus('current')
if mibBuilder.loadTexts: hneAtmfM4TcAdaptorEntry.setDescription('An entry in the HNE TC adapter table. An entry contains HNE specific TC adapter information.')
hneAtmfM4TcHecErroredCellAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("drop", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneAtmfM4TcHecErroredCellAction.setStatus('current')
if mibBuilder.loadTexts: hneAtmfM4TcHecErroredCellAction.setDescription('The action to take when HEC errored cells are detected: pass(1) - forward cells containing HEC errors drop(2) - drop cells containing HEC errors')
hneGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1))
hneCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 2))
hneCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 2, 1)).setObjects(("SALIX-HNE-MIB", "hneSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneCompliance = hneCompliance.setStatus('current')
if mibBuilder.loadTexts: hneCompliance.setDescription('The basic implementation requirements for the HNE MIB.')
hneSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 1)).setObjects(("SALIX-HNE-MIB", "hneSysSyncTimingMode"), ("SALIX-HNE-MIB", "hneSysSyncPrimaryRefLine"), ("SALIX-HNE-MIB", "hneSysSyncSecondaryRefLine"), ("SALIX-HNE-MIB", "hneSysSyncRevertiveSwitch"), ("SALIX-HNE-MIB", "hneSysSyncClockMode"), ("SALIX-HNE-MIB", "hneSysSyncConfiguredActiveRef"), ("SALIX-HNE-MIB", "hneSysSyncAutoRefSwitch"), ("SALIX-HNE-MIB", "hneSysSyncFreeRunAlarm"), ("SALIX-HNE-MIB", "hneSysSyncWorking"), ("SALIX-HNE-MIB", "hneSysSyncProtect"), ("SALIX-HNE-MIB", "hneSysSyncPrimaryRefLineState"), ("SALIX-HNE-MIB", "hneSysSyncSecondaryRefLineState"), ("SALIX-HNE-MIB", "hneSysSyncCurrentActiveRef"), ("SALIX-HNE-MIB", "hneSysSyncForcedState"), ("SALIX-HNE-MIB", "hneSysHsfWorking"), ("SALIX-HNE-MIB", "hneSysHsfProtect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneSystemGroup = hneSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hneSystemGroup.setDescription('Additional HNE specific objects to the mib-2 system group.')
hneSonetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 2)).setObjects(("SALIX-HNE-MIB", "hneSonetLineTimingSource"), ("SALIX-HNE-MIB", "hneSonetLineDccSelection"), ("SALIX-HNE-MIB", "hneSonetLineOverheadLoopThroughModeEnabled"), ("SALIX-HNE-MIB", "hneSonetProtectionInterfaceWorking"), ("SALIX-HNE-MIB", "hneSonetProtectionConfig"), ("SALIX-HNE-MIB", "hneSonetProtectionRevertive"), ("SALIX-HNE-MIB", "hneSonetProtectionBiDirectional"), ("SALIX-HNE-MIB", "hneSonetPathContentType"), ("SALIX-HNE-MIB", "hneSonetPathOverheadLoopThroughModeEnabled"), ("SALIX-HNE-MIB", "hneSonetPathSpeMicMode"), ("SALIX-HNE-MIB", "hneSonetPathReceiveTraceMessage"), ("SALIX-HNE-MIB", "hneSonetPathTransmitTraceMessage"), ("SALIX-HNE-MIB", "hneSonetPathRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneSonetGroup = hneSonetGroup.setStatus('current')
if mibBuilder.loadTexts: hneSonetGroup.setDescription('Additional HNE specific objects to the SONET-MIB.')
hneTdmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 3)).setObjects(("SALIX-HNE-MIB", "hneTdmCrossConnectRowStatus"), ("SALIX-HNE-MIB", "hneTdmCrossConnectOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneTdmGroup = hneTdmGroup.setStatus('current')
if mibBuilder.loadTexts: hneTdmGroup.setDescription('HNE TDM objects.')
hneAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 4)).setObjects(("SALIX-HNE-MIB", "hneAtmInterfaceValueAddedModeEnabled"), ("SALIX-HNE-MIB", "hneAtmTrafficDescrParamIndexNext"), ("SALIX-HNE-MIB", "hneAtmVplVamMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneAtmGroup = hneAtmGroup.setStatus('current')
if mibBuilder.loadTexts: hneAtmGroup.setDescription('Additional HNE specific objects to the ATM-MIB.')
hneAtmfM4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 5)).setObjects(("SALIX-HNE-MIB", "hneAtmfM4TcHecErroredCellAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneAtmfM4Group = hneAtmfM4Group.setStatus('current')
if mibBuilder.loadTexts: hneAtmfM4Group.setDescription('Additional HNE specific objects to the ATM-FORUM-M4-MIB.')
hneSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5), )
if mibBuilder.loadTexts: hneSonetPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathCurrentTable.setDescription('The HNE SONET/SDH Path Current table.')
hneSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1), )
sonetPathCurrentEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetPathCurrentEntry"))
hneSonetPathCurrentEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathCurrentEntry.setDescription('An entry in the HNE sonet path current table. An entry contains HNE specific sonet path information not found in the SONET / SDH MIB.')
hneSonetPathCurrentRxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentRxPosPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathCurrentRxPosPointerJustCount.setDescription('The counter associated with the number of positive pointer justification events that occurred on the receive side of a SONET/SDH path in the current 15 minute interval.')
hneSonetPathCurrentRxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentRxNegPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathCurrentRxNegPointerJustCount.setDescription('The counter associated with the number of negative pointer justification events that occurred on the receive side of a SONET/SDH path in the current 15 minute interval.')
hneSonetPathCurrentTxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentTxPosPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathCurrentTxPosPointerJustCount.setDescription('The counter associated with the number of positive pointer justification events that occurred on the transmit side of a SONET/SDH path in the current 15 minute interval.')
hneSonetPathCurrentTxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentTxNegPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathCurrentTxNegPointerJustCount.setDescription('The counter associated with the number of negative pointer justification events that occurred on the transmit side of a SONET/SDH path in the current 15 minute interval.')
hneSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6), )
if mibBuilder.loadTexts: hneSonetPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathIntervalTable.setDescription('The HNE SONET/SDH Path Interval table.')
hneSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1), )
sonetPathIntervalEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetPathIntervalEntry"))
hneSonetPathIntervalEntry.setIndexNames(*sonetPathIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathIntervalEntry.setDescription('An entry in the HNE sonet path interval table. An entry contains HNE specific sonet path information not found in the SONET / SDH MIB.')
hneSonetPathIntervalRxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalRxPosPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathIntervalRxPosPointerJustCount.setDescription('The counter associated with the number of positive pointer justification events that occurred on the receive side of a SONET/SDH path in a particular 15-minute interval in the past 24 hours.')
hneSonetPathIntervalRxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalRxNegPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathIntervalRxNegPointerJustCount.setDescription('The counter associated with the number of negative pointer justification events that occurred on the receive side of a SONET/SDH path in a particular 15-minute interval in the past 24 hours.')
hneSonetPathIntervalTxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalTxPosPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathIntervalTxPosPointerJustCount.setDescription('The counter associated with the number of positive pointer justification events that occurred on the transmit side of a SONET/SDH path in a particular 15-minute interval in the past 24 hours.')
hneSonetPathIntervalTxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalTxNegPointerJustCount.setStatus('current')
if mibBuilder.loadTexts: hneSonetPathIntervalTxNegPointerJustCount.setDescription('The counter associated with the number of negative pointer justification events that occurred on the transmit side of a SONET/SDH path in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7), )
if mibBuilder.loadTexts: hneAtmLiuCurrentTable.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentTable.setDescription('The HNE ATM Current table.')
hneAtmLiuCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hneAtmLiuCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentEntry.setDescription('An entry in the HNE line interface unit current entry table. An entry contains atm statistics for an entire line interface unit')
hneAtmLiuCurrentPhysLayerCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentPhysLayerCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentPhysLayerCellCount.setDescription('The counter associated with the number of physical layer cells encountered on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentRxCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentRxCellCount.setDescription('The counter associated with the number of cells received on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentTxCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentTxCellCount.setDescription('The counter associated with the number of cells transmitted on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentCongestionDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentCongestionDroppedCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentCongestionDroppedCount.setDescription('The counter associated with the number of cells dropped due to congestion on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentInvalidCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentInvalidCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentInvalidCellCount.setDescription('The counter associated with the number of invalid cells encountered on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentErroredOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentErroredOAMCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentErroredOAMCellCount.setDescription('The counter associated with the number of errored OAM cells encountered on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentValidOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentValidOAMCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentValidOAMCellCount.setDescription('The counter associated with the number of valid OAM cells encountered on all atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentTxOverrunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentTxOverrunCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentTxOverrunCount.setDescription('The counter associated with the number of times the output queue of the atm interfaces on a line interface unit was overrun in the current 15 minute interval.')
hneAtmLiuCurrentMissingHeaderCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentMissingHeaderCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentMissingHeaderCellCount.setDescription('The counter associated with the number of times a physical cell is found missing an internal header in the current 15 minute interval.')
hneAtmLiuCurrentNonRoutableCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentNonRoutableCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentNonRoutableCellCount.setDescription('The counter associated with the number of non routable cells encountered on all of the atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentVcSearchFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentVcSearchFailedCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentVcSearchFailedCount.setDescription('The counter associated with the number of virtual ciruit search failures encountered on all of the atm interfaces on a line interface unit in the current 15 minute interval.')
hneAtmLiuCurrentInternalParityErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentInternalParityErrorCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuCurrentInternalParityErrorCount.setDescription('The counter associated with the number of internal parity errors encountered in the current 15 minute interval.')
hneAtmLiuHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8), )
if mibBuilder.loadTexts: hneAtmLiuHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryTable.setDescription('The HNE ATM Line Interface Unit History table.')
hneAtmLiuHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: hneAtmLiuHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryEntry.setDescription('An entry in the HNE line interface unit history entry table. An entry contains ATM statistics associated with a sonet line.')
hneAtmLiuHistoryPhysLayerCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryPhysLayerCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryPhysLayerCellCount.setDescription('The counter associated with the number of physical layer cells encountered on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryRxCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryRxCellCount.setDescription('The counter associated with the number of cells received on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryTxCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryTxCellCount.setDescription('The counter associated with the number of cells transmitted on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryCongestionDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryCongestionDroppedCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryCongestionDroppedCount.setDescription('The counter associated with the number of cells dropped due to congestion on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryInvalidCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryInvalidCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryInvalidCellCount.setDescription('The counter associated with the number of invalid cells encountered on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryErroredOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryErroredOAMCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryErroredOAMCellCount.setDescription('The counter associated with the number of errored OAM cells encountered on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryValidOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryValidOAMCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryValidOAMCellCount.setDescription('The counter associated with the number of valid OAM cells encountered on all ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryTxOverrunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryTxOverrunCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryTxOverrunCount.setDescription('The counter associated with the number of times the output queue of the ATM interfaces on a line interface unit was overrun in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryMissingHeaderCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryMissingHeaderCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryMissingHeaderCellCount.setDescription('The counter associated with the number of times a physical cell is found missing an internal header in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryNonRoutableCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryNonRoutableCellCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryNonRoutableCellCount.setDescription('The counter associated with the number of non routable cells encountered on all of the ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryVcSearchFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryVcSearchFailedCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryVcSearchFailedCount.setDescription('The counter associated with the number of virtual ciruit search failures encountered on all of the ATM interfaces on a line interface unit in a particular 15-minute interval in the past 24 hours.')
hneAtmLiuHistoryInternalParityErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryInternalParityErrorCount.setStatus('current')
if mibBuilder.loadTexts: hneAtmLiuHistoryInternalParityErrorCount.setDescription('The counter associated with the number of internal parity errors encountered in a particular 15-minute interval in the past 24 hours.')
hneVclCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9), )
if mibBuilder.loadTexts: hneVclCurrentTable.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentTable.setDescription('The HNE ATM Virtual Channel Link Current table.')
hneVclCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: hneVclCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentEntry.setDescription('An entry in the HNE vitual channel link current entry table. An entry contains virtual channel statistics.')
hneVclCurrentBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentBIP16Count.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentBIP16Count.setDescription('The counter associated with the number of virtual channel cells with a Bit Interleave Parity (BIP) error in the current 15 minute interval.')
hneVclCurrentRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentRxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) received within virtual channel cells in the current 15 minute interval.')
hneVclCurrentRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentRxLostCellCount.setDescription('The counter associated with the number of received cells lost within an ingress virtual channel in the current 15 minute interval.')
hneVclCurrentRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentRxMisinsertedCellCount.setDescription('The counter associated with the number of received cells misinserted in an igress virtual channel in the current 15 minute interval.')
hneVclCurrentRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentRxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) received in virtual channel in the current 15 minute interval.')
hneVclCurrentTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentTxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) virtual channel cells transmitted in the current 15 minute interval.')
hneVclCurrentTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentTxLostCellCount.setDescription('The counter associated with the number of transmitted cells lost within an eggress virtual channel in the current 15 minute interval.')
hneVclCurrentTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentTxMisinsertedCellCount.setDescription('The counter associated with the number of transmitted cells misinserted within a eggress virtual channel in the current 15 minute interval.')
hneVclCurrentTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVclCurrentTxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) virtual channel cells transmitted in the current 15 minute interval.')
hneVclHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10), )
if mibBuilder.loadTexts: hneVclHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryTable.setDescription('The HNE ATM Virtual Channel Link History table.')
hneVclHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: hneVclHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryEntry.setDescription('An entry in the HNE vitual channel link history entry table. An entry contains virtual channel link statistics.')
hneVclHistoryBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryBIP16Count.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryBIP16Count.setDescription('The counter associated with the number of virtual channel cells with a Bit Interleave Parity (BIP) error in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryRxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) received within virtual channel cells in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryRxLostCellCount.setDescription('The counter associated with the number of received cells lost within an ingress virtual channel in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryRxMisinsertedCellCount.setDescription('The counter associated with the number of received cells misinserted within an igress virtual channel in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryRxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) received in virtual channel in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryTxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) virtual channel cells transmitted in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryTxLostCellCount.setDescription('The counter associated with the number of transmitted cells lost within an eggress virtual channel in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryTxMisinsertedCellCount.setDescription('The counter associated with the number of transmitted cells misinserted within a eggress virtual channel in a particular 15-minute interval in the past 24 hours.')
hneVclHistoryTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVclHistoryTxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) virtual channel cells transmitted in a particular 15-minute interval in the past 24 hours.')
hneVplCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11), )
if mibBuilder.loadTexts: hneVplCurrentTable.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentTable.setDescription('The HNE ATM Virtual Path Link Current table.')
hneVplCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: hneVplCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentEntry.setDescription('An entry in the HNE vitual path link current entry table. An entry contains virtual path statistics.')
hneVplCurrentBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentBIP16Count.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentBIP16Count.setDescription('The counter associated with the number of virtual path cells with a Bit Interleave Parity error (BIP) in the current 15 minute interval.')
hneVplCurrentRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentRxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) received within virtual path cells in the current 15 minute interval.')
hneVplCurrentRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentRxLostCellCount.setDescription('The counter associated with the number of received cells lost within an ingress virtual path in the current 15 minute interval.')
hneVplCurrentRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentRxMisinsertedCellCount.setDescription('The counter associated with the number of received cells misinserted within an igress virtual path in the current 15 minute interval.')
hneVplCurrentRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentRxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) received in virtual path in the current 15 minute interval.')
hneVplCurrentTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentTxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) virtual path cells transmitted in the current 15 minute interval.')
hneVplCurrentTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentTxLostCellCount.setDescription('The counter associated with the number of transmitted cells lost within an eggress virtual path in the current 15 minute interval.')
hneVplCurrentTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentTxMisinsertedCellCount.setDescription('The counter associated with the number of transmitted cells misinserted within a eggress virtual path in the current 15 minute interval.')
hneVplCurrentTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVplCurrentTxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) virtual path cells transmitted in the current 15 minute interval.')
hneVplHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12), )
if mibBuilder.loadTexts: hneVplHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryTable.setDescription('The HNE ATM Virtual Path Link History table.')
hneVplHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: hneVplHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryEntry.setDescription('An entry in the HNE vitual path link history entry table. An entry contains virtual path statistics.')
hneVplHistoryBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryBIP16Count.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryBIP16Count.setDescription('The counter associated with the number of virtual path cells with a Bit Interleave Parity error (BIP) in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryRxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) received within virtual path cells in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryRxLostCellCount.setDescription('The counter associated with the number of received cells lost within an ingress virtual path in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryRxMisinsertedCellCount.setDescription('The counter associated with the number of received cells misinserted within an igress virtual path in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryRxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) received in virtual path in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxSECBCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryTxSECBCount.setDescription('The counter associated with the number of Severely Errored Cell Blocks (SECB) virtual path cells transmitted in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxLostCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryTxLostCellCount.setDescription('The counter associated with the number of transmitted cells lost within an eggress virtual path in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxMisinsertedCellCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryTxMisinsertedCellCount.setDescription('The counter associated with the number of transmitted cells misinserted within a eggress virtual path in a particular 15-minute interval in the past 24 hours.')
hneVplHistoryTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxBIPVCount.setStatus('current')
if mibBuilder.loadTexts: hneVplHistoryTxBIPVCount.setDescription('The counter associated with the number of Bit Interleave Parity Violations (BIPV) virtual path cells transmitted in a particular 15-minute interval in the past 24 hours.')
mibBuilder.exportSymbols("SALIX-HNE-MIB", hneSysSyncClockMode=hneSysSyncClockMode, hneSonetPathRowStatus=hneSonetPathRowStatus, hneTdmGroup=hneTdmGroup, hneSonetPathIntervalTable=hneSonetPathIntervalTable, hneCompliances=hneCompliances, hneAtmLiuCurrentNonRoutableCellCount=hneAtmLiuCurrentNonRoutableCellCount, hneAtmLiuHistoryErroredOAMCellCount=hneAtmLiuHistoryErroredOAMCellCount, hneAtmLiuCurrentValidOAMCellCount=hneAtmLiuCurrentValidOAMCellCount, hneVclHistoryRxBIPVCount=hneVclHistoryRxBIPVCount, hneAtmLiuHistoryInternalParityErrorCount=hneAtmLiuHistoryInternalParityErrorCount, hneVclHistoryBIP16Count=hneVclHistoryBIP16Count, hneMIBStats=hneMIBStats, hneVplCurrentBIP16Count=hneVplCurrentBIP16Count, hneSonetPathIntervalRxNegPointerJustCount=hneSonetPathIntervalRxNegPointerJustCount, hneVplCurrentRxSECBCount=hneVplCurrentRxSECBCount, hneSystemHost=hneSystemHost, hneSysSyncPrimaryRefLine=hneSysSyncPrimaryRefLine, hneSonetProtectionInterfaceLow=hneSonetProtectionInterfaceLow, hneSysSyncRevertiveSwitch=hneSysSyncRevertiveSwitch, hneAtmfM4TcAdaptorEntry=hneAtmfM4TcAdaptorEntry, hneVclHistoryTxSECBCount=hneVclHistoryTxSECBCount, hneMIB=hneMIB, hneVplHistoryRxMisinsertedCellCount=hneVplHistoryRxMisinsertedCellCount, hneVplCurrentTxMisinsertedCellCount=hneVplCurrentTxMisinsertedCellCount, hneSonetProtectionBiDirectional=hneSonetProtectionBiDirectional, hneSonetProtectionInterfaceWorking=hneSonetProtectionInterfaceWorking, hneVplCurrentRxBIPVCount=hneVplCurrentRxBIPVCount, hneSonetPathCurrentEntry=hneSonetPathCurrentEntry, hneCompliance=hneCompliance, hneSonetPathCurrentTxNegPointerJustCount=hneSonetPathCurrentTxNegPointerJustCount, hneAtmLiuCurrentEntry=hneAtmLiuCurrentEntry, hneSysSyncSecondaryRefLine=hneSysSyncSecondaryRefLine, hneVclCurrentRxSECBCount=hneVclCurrentRxSECBCount, hneAtmLiuHistoryTable=hneAtmLiuHistoryTable, hneSonetPathSpeMicMode=hneSonetPathSpeMicMode, hneVclCurrentTxLostCellCount=hneVclCurrentTxLostCellCount, hneSonetPathIntervalRxPosPointerJustCount=hneSonetPathIntervalRxPosPointerJustCount, hneAtmLiuCurrentMissingHeaderCellCount=hneAtmLiuCurrentMissingHeaderCellCount, hneAtmfM4=hneAtmfM4, hneTdmCrossConnectOperStatus=hneTdmCrossConnectOperStatus, hneAtmLiuHistoryVcSearchFailedCount=hneAtmLiuHistoryVcSearchFailedCount, hneSysHsfProtect=hneSysHsfProtect, hneSysSyncFreeRunAlarm=hneSysSyncFreeRunAlarm, hneVclCurrentTxMisinsertedCellCount=hneVclCurrentTxMisinsertedCellCount, HnePlugInUnitType=HnePlugInUnitType, hneTdmCrossConnectTable=hneTdmCrossConnectTable, hneMIBCompliance=hneMIBCompliance, hneAtmInterfaceValueAddedModeEnabled=hneAtmInterfaceValueAddedModeEnabled, hneAtmLiuCurrentRxCellCount=hneAtmLiuCurrentRxCellCount, hneVclHistoryTxBIPVCount=hneVclHistoryTxBIPVCount, hneSonetPathCurrentTxPosPointerJustCount=hneSonetPathCurrentTxPosPointerJustCount, hneAtmLiuCurrentCongestionDroppedCount=hneAtmLiuCurrentCongestionDroppedCount, hneAtmfM4TcAdaptorTable=hneAtmfM4TcAdaptorTable, hneAtmLiuCurrentVcSearchFailedCount=hneAtmLiuCurrentVcSearchFailedCount, hneVclCurrentRxMisinsertedCellCount=hneVclCurrentRxMisinsertedCellCount, hneAtmLiuHistoryPhysLayerCellCount=hneAtmLiuHistoryPhysLayerCellCount, hneVplHistoryTxMisinsertedCellCount=hneVplHistoryTxMisinsertedCellCount, hneSonetProtectionTable=hneSonetProtectionTable, hneMIBObjects=hneMIBObjects, hneSysSyncPrimaryRefLineState=hneSysSyncPrimaryRefLineState, hneVplHistoryTable=hneVplHistoryTable, hneSysSyncWorking=hneSysSyncWorking, hneVclHistoryRxSECBCount=hneVclHistoryRxSECBCount, hneAtmfM4TcHecErroredCellAction=hneAtmfM4TcHecErroredCellAction, hneAtmLiuHistoryCongestionDroppedCount=hneAtmLiuHistoryCongestionDroppedCount, hneAtmLiuCurrentInvalidCellCount=hneAtmLiuCurrentInvalidCellCount, hneSysSyncConfiguredActiveRef=hneSysSyncConfiguredActiveRef, hneAtmGroup=hneAtmGroup, hneAtmLiuHistoryMissingHeaderCellCount=hneAtmLiuHistoryMissingHeaderCellCount, hneSysSyncProtect=hneSysSyncProtect, hneSonetPathIntervalEntry=hneSonetPathIntervalEntry, hneVplHistoryTxBIPVCount=hneVplHistoryTxBIPVCount, hneSonetProtectionEntry=hneSonetProtectionEntry, hneVplCurrentRxMisinsertedCellCount=hneVplCurrentRxMisinsertedCellCount, hneVplHistoryEntry=hneVplHistoryEntry, hneAtmLiuCurrentTxOverrunCount=hneAtmLiuCurrentTxOverrunCount, hneSonetLineTable=hneSonetLineTable, hneSonetPathContentType=hneSonetPathContentType, hneVclCurrentEntry=hneVclCurrentEntry, hneVplCurrentTxLostCellCount=hneVplCurrentTxLostCellCount, hneSystemHsf=hneSystemHsf, hneAtmfM4Group=hneAtmfM4Group, hneVplHistoryBIP16Count=hneVplHistoryBIP16Count, hneSonetPathCurrentRxPosPointerJustCount=hneSonetPathCurrentRxPosPointerJustCount, hneVplCurrentTxBIPVCount=hneVplCurrentTxBIPVCount, hnePlugInUnit=hnePlugInUnit, hneSonetPathEntry=hneSonetPathEntry, hneSonetPathCurrentRxNegPointerJustCount=hneSonetPathCurrentRxNegPointerJustCount, hneAtmLiuCurrentErroredOAMCellCount=hneAtmLiuCurrentErroredOAMCellCount, hneSysSyncAutoRefSwitch=hneSysSyncAutoRefSwitch, hneSystemSync=hneSystemSync, hneAtmVplVamMode=hneAtmVplVamMode, hneTdmCrossConnectPathTerminationPoint2=hneTdmCrossConnectPathTerminationPoint2, hneSonetPathIntervalTxPosPointerJustCount=hneSonetPathIntervalTxPosPointerJustCount, hneSystem=hneSystem, hneVplCurrentEntry=hneVplCurrentEntry, hneSonetProtectionInterfaceHigh=hneSonetProtectionInterfaceHigh, hneAtmLiuHistoryRxCellCount=hneAtmLiuHistoryRxCellCount, hneTdmCrossConnectEntry=hneTdmCrossConnectEntry, hneSonetPathReceiveTraceMessage=hneSonetPathReceiveTraceMessage, hneAtmVplEntry=hneAtmVplEntry, hneVplCurrentRxLostCellCount=hneVplCurrentRxLostCellCount, hneTdm=hneTdm, hneAtmTrafficDescrParamIndexNext=hneAtmTrafficDescrParamIndexNext, hneVclCurrentTxSECBCount=hneVclCurrentTxSECBCount, hneGroups=hneGroups, hneSysSyncCurrentActiveRef=hneSysSyncCurrentActiveRef, hneSystemGroup=hneSystemGroup, hneAtmInterfaceConfEntry=hneAtmInterfaceConfEntry, hneVplCurrentTable=hneVplCurrentTable, hneSonetPathOverheadLoopThroughModeEnabled=hneSonetPathOverheadLoopThroughModeEnabled, hneAtmVplTable=hneAtmVplTable, hneVclHistoryTxMisinsertedCellCount=hneVclHistoryTxMisinsertedCellCount, hneSysSyncSecondaryRefLineState=hneSysSyncSecondaryRefLineState, hneAtmLiuHistoryNonRoutableCellCount=hneAtmLiuHistoryNonRoutableCellCount, hneVclHistoryTable=hneVclHistoryTable, hneSonetLineDccSelection=hneSonetLineDccSelection, hneAtmLiuHistoryValidOAMCellCount=hneAtmLiuHistoryValidOAMCellCount, hneSonetGroup=hneSonetGroup, hneSonetLineEntry=hneSonetLineEntry, hneVplHistoryTxSECBCount=hneVplHistoryTxSECBCount, hneSonetLineOverheadLoopThroughModeEnabled=hneSonetLineOverheadLoopThroughModeEnabled, hneSonetPathIntervalTxNegPointerJustCount=hneSonetPathIntervalTxNegPointerJustCount, hneAtmInterfaceConfTable=hneAtmInterfaceConfTable, hneSysSyncForcedState=hneSysSyncForcedState, hneAtmLiuCurrentInternalParityErrorCount=hneAtmLiuCurrentInternalParityErrorCount, hneSonetPathTable=hneSonetPathTable, hneSonetProtectionRevertive=hneSonetProtectionRevertive, hneVplCurrentTxSECBCount=hneVplCurrentTxSECBCount, hneAtmLiuHistoryEntry=hneAtmLiuHistoryEntry, hneVplHistoryRxBIPVCount=hneVplHistoryRxBIPVCount, hneSysSyncTimingMode=hneSysSyncTimingMode, hneMIBTraps=hneMIBTraps, hneSonetPathCurrentTable=hneSonetPathCurrentTable, hneAtmLiuCurrentTable=hneAtmLiuCurrentTable, hneVclHistoryRxLostCellCount=hneVclHistoryRxLostCellCount, hneTdmCrossConnectRowStatus=hneTdmCrossConnectRowStatus, hneSysHsfWorking=hneSysHsfWorking, hneAtmLiuHistoryTxOverrunCount=hneAtmLiuHistoryTxOverrunCount, hneAtm=hneAtm, hneSonetLineTimingSource=hneSonetLineTimingSource, hneSonetProtectionConfig=hneSonetProtectionConfig, hneAtmLiuHistoryInvalidCellCount=hneAtmLiuHistoryInvalidCellCount, hneVclCurrentRxLostCellCount=hneVclCurrentRxLostCellCount, hneVclCurrentTxBIPVCount=hneVclCurrentTxBIPVCount, PYSNMP_MODULE_ID=hneMIB, hneAtmLiuCurrentPhysLayerCellCount=hneAtmLiuCurrentPhysLayerCellCount, hneVplHistoryRxLostCellCount=hneVplHistoryRxLostCellCount, hneSonetPathTransmitTraceMessage=hneSonetPathTransmitTraceMessage, hneSonet=hneSonet, hneVclHistoryRxMisinsertedCellCount=hneVclHistoryRxMisinsertedCellCount, hneAtmLiuHistoryTxCellCount=hneAtmLiuHistoryTxCellCount, hneVplHistoryTxLostCellCount=hneVplHistoryTxLostCellCount, hneVclCurrentBIP16Count=hneVclCurrentBIP16Count, hneVplHistoryRxSECBCount=hneVplHistoryRxSECBCount, hneVclCurrentRxBIPVCount=hneVclCurrentRxBIPVCount, hneVclHistoryEntry=hneVclHistoryEntry, hneVclCurrentTable=hneVclCurrentTable, hneVclHistoryTxLostCellCount=hneVclHistoryTxLostCellCount, hneTdmCrossConnectPathTerminationPoint1=hneTdmCrossConnectPathTerminationPoint1, hneAtmLiuCurrentTxCellCount=hneAtmLiuCurrentTxCellCount)
