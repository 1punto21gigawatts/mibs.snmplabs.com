#
# PySNMP MIB module CISCO-WAN-T38-FAXRELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-T38-FAXRELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, IpAddress, ObjectIdentity, Counter32, Bits, Unsigned32, iso, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "IpAddress", "ObjectIdentity", "Counter32", "Bits", "Unsigned32", "iso", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanT38FaxRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 19))
ciscoWanT38FaxRelayMIB.setRevisions(('2004-02-19 00:00', '2002-06-01 00:00', '2002-04-12 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanT38FaxRelayMIB.setRevisionsDescriptions(('Update descriptions in the MIB.', 'Added new object t38T30ECM. changed t38Redundancy status from current to deprecated. ', 'Added new varbind t38Redundancy into t38FaxRelayGrpTable, changed the default value for t38HsDataPacketSize. ',))
if mibBuilder.loadTexts: ciscoWanT38FaxRelayMIB.setLastUpdated('200402190000Z')
if mibBuilder.loadTexts: ciscoWanT38FaxRelayMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanT38FaxRelayMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoWanT38FaxRelayMIB.setDescription('The MIB module for configuring T.38 fax relay protocol parameters. This MIB will be used in VoIP(Voice over IP) applications. ')
ciscoWanT38FaxRelayMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 1))
t38FaxRelayGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1))
t38FaxRelayGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1), )
if mibBuilder.loadTexts: t38FaxRelayGrpTable.setStatus('current')
if mibBuilder.loadTexts: t38FaxRelayGrpTable.setDescription('This table contains configuration information about various fax relay parameters used in VoIP calls on voice interface. ')
t38FaxRelayGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-T38-FAXRELAY-MIB", "t38vismDs1Number"))
if mibBuilder.loadTexts: t38FaxRelayGrpEntry.setStatus('current')
if mibBuilder.loadTexts: t38FaxRelayGrpEntry.setDescription('An entry is created when a DS1 interface is configured. An entry is deleted when a DS1 interface is removed. All configurations information in an entry is applied to a VoIP call when the VoIP call is placed on the DS1 interface. ')
t38vismDs1Number = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: t38vismDs1Number.setStatus('current')
if mibBuilder.loadTexts: t38vismDs1Number.setDescription('This object identifies the unique DS1 value for a T1/E1 interface. ')
t38MaxFaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fx2400bps", 1), ("fx4800bps", 2), ("fx7200bps", 3), ("fx9600bps", 4), ("fx12000bps", 5), ("fx14400bps", 6))).clone('fx14400bps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38MaxFaxTxRate.setStatus('current')
if mibBuilder.loadTexts: t38MaxFaxTxRate.setDescription("This object is used for configuring the maximum fax transmission rate. 'fx2400bps' - maximum transmission rate in 2400 bps. 'fx4800bps' - maximum transmission rate in 4800 bps. 'fx7200bps' - maximum transmission rate in 7200 bps. 'fx9600bps' - maximum transmission rate in 9600 bps. 'fx12000bps' - maximum transmission rate in 12000 bps. 'fx14400bps' - maximum transmission rate in 14400 bps. ")
t38FaxInfoFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38FaxInfoFieldSize.setStatus('deprecated')
if mibBuilder.loadTexts: t38FaxInfoFieldSize.setDescription('This object is used to configure the fax information field size in bytes. ')
t38HsDataPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40))).clone(namedValues=NamedValues(("tenms", 10), ("twentyms", 20), ("thirtyms", 30), ("fortyms", 40))).clone('thirtyms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38HsDataPacketSize.setStatus('current')
if mibBuilder.loadTexts: t38HsDataPacketSize.setDescription("This object specifies the size of primary high speed(HS) - the data packet transmitted after the first phase of a T.38 call. 'tenms' - size of the HS in 10 millisecond. 'twentyms' - size of the HS in 20 millisecond. 'thirtyms' - size of the HS in 30 millisecond. 'fortyms' - size of the HS in 40 millisecond. ")
t38LsDataRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38LsDataRedundancy.setStatus('current')
if mibBuilder.loadTexts: t38LsDataRedundancy.setDescription('This object determines the extent of the internet fax protocol(IFP) packet transmission redundancy for the low-speed control information exchanged during the first phase of a T.38 fax relay connection. Depending on whether forward error correction(FEC) is enabled via the t38ErrorCorrection object, t38LsDataRedundancy has different meaning. If FEC is disabled, then t38LsDataRedundancy is the maximum number of prior IFP packets within an unnumbered datagram protocol transport layer (UDPTL) packet carrying low speed information, not counting the primary or current IFP packet. If FEC is enabled, then t38LsDataRedundancy is the maximum number of FEC messages within a UDPTL packet carrying low speed information. ')
t38HsDataRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38HsDataRedundancy.setStatus('current')
if mibBuilder.loadTexts: t38HsDataRedundancy.setDescription('This object determines the extent of the IFP packet transmission redundancy for the high-speed control and image information exchanged following the initial low-speed phase of a T.38 fax relay connection. Depending on whether FEC is enabled via the t38ErrorCorrection object, t38HsDataRedundancy has different meanings. If FEC is disabled, then t38HsDataRedundancy is the maximum number of prior IFP packets within a UDPTL packet carrying high speed information, not counting the primary or current IFP packet. If FEC is enabled, then t38HsDataRedundancy is the maximum number of FEC messages within a UDPTL packet carrying high speed information. ')
t38TCFmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localTCF", 1), ("networkTCF", 2))).clone('networkTCF')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38TCFmethod.setStatus('current')
if mibBuilder.loadTexts: t38TCFmethod.setDescription('This object determines the method used to verify the TCF(Training Check Field). For UDP-based fax transport, its value should be set to networkTCF. For TCP-based fax transport, its value should be set to localTCF. A value of localTCF may be used in rare circumstances for UDP-based fax transport. A value of networkTCF implies that date rate management is done end-to-end between the group 3 fax terminals, in a manner similar to the PSTN(Public Switched Telephone Network). In this case, the TCF training signal is passed transparently by the IP network. A value of localTCF implies that media gateways are actively involved in the training and data rate management procedure, including the generation of the TCF training signal. Data rate management is done by one of the media gateways on the basis of local results and results forwarded over the IP network by the other gateway. The other gateway generates the TCF training signal towards its group 3 fax terminal. ')
t38ErrCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38ErrCorrection.setStatus('deprecated')
if mibBuilder.loadTexts: t38ErrCorrection.setDescription('This object is used to enable/disable the FEC scheme for UDP-based fax transport. ')
t38NSFOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38NSFOverride.setStatus('current')
if mibBuilder.loadTexts: t38NSFOverride.setDescription('This object is used to enable/disable the gateway to override the NSF(Non-Standard Facilities) code in the following T.30 signals: NSF, NSC (Non-Standard Facilities Command) and NSS (Non-Standard Facilities Set-up). The NSF code is overridden to prevent the group 3 fax machines from synchronizing with each other on the basis of a protocol other the ITU T-series recommendations. If this proprietary synchronization is prevented, the group 3 fax machines will synchronize to the standard T-series protocol. This action is necessary if the fax relay capability of the media gateway is limited to the T-series recommendations. As defined in T.35, the NSF code consists of a one-byte Country Code, a two-byte Terminal Provider Code (also called the Vendor Code), and a variable-length (up to 255 bytes) Terminal Provider-Oriented Code. If t38NSFOverride is enabled, the Country Code and Terminal Provider Code are overridden with the values of the t38NSFCountryCode and t38NSFVendorCode respectively, while the Terminal Provider-Oriented Code (which is a bit-map of manufacturer-specific capabilities) is set to all-zeros. ')
t38NSFCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(173)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38NSFCountryCode.setReference('Per ITU T.35 section 3.1 ')
if mibBuilder.loadTexts: t38NSFCountryCode.setStatus('current')
if mibBuilder.loadTexts: t38NSFCountryCode.setDescription('The Country Code in the NSF code is a single-byte field identifying the country where the group 3 fax equipment with non-standard capabilities were manufactured. There are un ratified proposals on the table to extend this to a two-byte field. If the fax relay capability of the gateway is limited to the ITU T-series protocol, the value of the t38NSFCountryCode object is to be written into the Country Code field to preclude non-standard synchronization of the group 3 faxs terminals. Since a value of 0x00 refers to Japan, and a value of 0xFF is a Country Code extension mechanism, these cannot be used to disable non-standard synchronization. The t38NSFCountryCode value used to override NSF-based synchronization is 0xAD (173). If the Country Code is extended to two bytes in the future, the second byte will be set to 0x00. In conjunction with this Country Code, a t38NSFVendorCode value of 0x0051 is used for NSF suppression. It is not possible to use a value of 0x0000 for this suppression since it refers to Compression Labs. To realize NSF suppression, all bytes in the Terminal Provider-Oriented Code field, which describes the manufacturer-specific capabilities, are set to zeros. ')
t38NSFVendorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(81)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38NSFVendorCode.setReference('Per ITU T.35 section 3.2 ')
if mibBuilder.loadTexts: t38NSFVendorCode.setStatus('current')
if mibBuilder.loadTexts: t38NSFVendorCode.setDescription('The Vendor Code (also called the Terminal Provider Code) in the NSF code is a two-byte field identifying the manufacturer of the group 3 fax equipment with non-standard capabilities. If the fax relay capability of the gateway is limited to the ITU T-series protocol, the value of the t38NSFVendorCode object is to be written into the Vendor Code (Terminal Provider Code) field to preclude non-standard synchronization of the group 3 fax terminals. Since a value of 0x0000 refers to Compression Labs, it cannot be used to disable non-standard synchronization. The t38NSFVendorCode value used to override NSF-based synchronization is 0x0051 (81). To realize NSF suppression, this is used in conjunction with the appropriate Country Code referring to the United States, and in conjunction with the setting of all bytes in the Terminal Provider-Oriented Code field, which describes the manufacturer-specific capabilities, to zeros. ')
t38NseAckTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38NseAckTimeOut.setStatus('current')
if mibBuilder.loadTexts: t38NseAckTimeOut.setDescription('This object defines a timeout value in milliseconds for a provision able timer. This timer is started after sending a NSE(Named Signal Event) 200 while waiting for the NSE 201 acknowledgement or NSE 202 negative acknowledgement. Expiration of the response timer will indicate that the request to switch to T.38 has been rejected or discarded by the far end. The default value is 1 second (1000 ms) and this value can only be set in the increments of 250 ms. ')
t38FxLCO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("gwAndPt", 1), ("gw", 2), ("ptAndGw", 3), ("pt", 4), ("off", 5))).clone('gwAndPt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38FxLCO.setStatus('current')
if mibBuilder.loadTexts: t38FxLCO.setDescription("This object is a configurable default value for the fx(fax option) in LCO(Local Connection Option). In the absence of the MGCP fx LCO, this default value will be used. The MGCP fx LCO will always override this object. The meanings of these enumerated types are: 'gwAndPt': means gateway controlled fax relay is preferred over fax pass through. 'gw': means gateway controlled fax relay (using NSEs). 'ptAndGw': means fax pass through is preferred over gateway controlled fax relay. 'pt': means fax pass through. 'off': means Do not do gateway controlled T.38 fax relay. This does not preclude upspeeding or alteration of silence suppression or echo cancellation settings for the connection. ")
t38Redundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38Redundancy.setStatus('deprecated')
if mibBuilder.loadTexts: t38Redundancy.setDescription('This object is used to enable/disable the Redundancy scheme for UDP-based fax transport. ')
t38T30ECM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 19, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38T30ECM.setStatus('current')
if mibBuilder.loadTexts: t38T30ECM.setDescription('This object is used to enable/disable T.30 Error Correcting Mode(ECM). ECM is a feature implemented by many new fax devices which improves image quality and page compression capabilities through a reliable image data transmission protocol -- ECM. If fax calls are failing due to high packet loss then disabling T.30 ECM may improve the success rate. ')
t38NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 2))
t38Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 2, 0))
t38FaxRelayMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 3))
t38FaxRelayMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 3, 1))
t38FaxRelayMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 19, 3, 2))
t38FaxRelayMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 19, 3, 1, 1)).setObjects(("CISCO-WAN-T38-FAXRELAY-MIB", "t38FaxRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t38FaxRelayMIBCompliance = t38FaxRelayMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: t38FaxRelayMIBCompliance.setDescription('The compliance statement for t38 fax relay group which implement t38FaxRelayGrp MIB. ')
t38FaxRelayMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 19, 3, 1, 2)).setObjects(("CISCO-WAN-T38-FAXRELAY-MIB", "t38FaxRelayGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t38FaxRelayMIBComplianceRev1 = t38FaxRelayMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: t38FaxRelayMIBComplianceRev1.setDescription('The compliance statement for t38 fax relay group which implement t38FaxRelayGrp MIB. ')
t38FaxRelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 19, 3, 2, 1)).setObjects(("CISCO-WAN-T38-FAXRELAY-MIB", "t38MaxFaxTxRate"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38FaxInfoFieldSize"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38HsDataPacketSize"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38LsDataRedundancy"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38HsDataRedundancy"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38TCFmethod"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38ErrCorrection"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NSFOverride"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NSFCountryCode"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NSFVendorCode"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NseAckTimeOut"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38FxLCO"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38Redundancy"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38T30ECM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t38FaxRelayGroup = t38FaxRelayGroup.setStatus('deprecated')
if mibBuilder.loadTexts: t38FaxRelayGroup.setDescription('This group contains objects related to configuration of T38 fax relay. ')
t38FaxRelayGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 19, 3, 2, 2)).setObjects(("CISCO-WAN-T38-FAXRELAY-MIB", "t38MaxFaxTxRate"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38HsDataPacketSize"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38LsDataRedundancy"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38HsDataRedundancy"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38TCFmethod"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NSFOverride"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NSFCountryCode"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NSFVendorCode"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38NseAckTimeOut"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38FxLCO"), ("CISCO-WAN-T38-FAXRELAY-MIB", "t38T30ECM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t38FaxRelayGroupRev1 = t38FaxRelayGroupRev1.setStatus('current')
if mibBuilder.loadTexts: t38FaxRelayGroupRev1.setDescription('The collection of objects that were supported earlier but deprecated now. ')
mibBuilder.exportSymbols("CISCO-WAN-T38-FAXRELAY-MIB", t38LsDataRedundancy=t38LsDataRedundancy, t38FaxRelayGroup=t38FaxRelayGroup, t38FaxRelayMIBComplianceRev1=t38FaxRelayMIBComplianceRev1, t38T30ECM=t38T30ECM, t38FaxRelayGrpEntry=t38FaxRelayGrpEntry, t38NSFVendorCode=t38NSFVendorCode, t38FaxRelayMIBCompliance=t38FaxRelayMIBCompliance, t38HsDataPacketSize=t38HsDataPacketSize, t38MaxFaxTxRate=t38MaxFaxTxRate, t38FaxRelayGrpTable=t38FaxRelayGrpTable, t38FaxRelayMIBConformance=t38FaxRelayMIBConformance, t38FaxRelayMIBCompliances=t38FaxRelayMIBCompliances, ciscoWanT38FaxRelayMIB=ciscoWanT38FaxRelayMIB, ciscoWanT38FaxRelayMIBObjects=ciscoWanT38FaxRelayMIBObjects, t38Redundancy=t38Redundancy, PYSNMP_MODULE_ID=ciscoWanT38FaxRelayMIB, t38vismDs1Number=t38vismDs1Number, t38HsDataRedundancy=t38HsDataRedundancy, t38NseAckTimeOut=t38NseAckTimeOut, t38NSFCountryCode=t38NSFCountryCode, t38Notifications=t38Notifications, t38FaxRelayMIBGroups=t38FaxRelayMIBGroups, t38NSFOverride=t38NSFOverride, t38NotificationPrefix=t38NotificationPrefix, t38ErrCorrection=t38ErrCorrection, t38FaxRelayGrp=t38FaxRelayGrp, t38FaxInfoFieldSize=t38FaxInfoFieldSize, t38FxLCO=t38FxLCO, t38TCFmethod=t38TCFmethod, t38FaxRelayGroupRev1=t38FaxRelayGroupRev1)
