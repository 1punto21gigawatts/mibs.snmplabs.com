#
# PySNMP MIB module WINDOWS-NT-PERFORMANCE-EXCHANGE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WINDOWS-NT-PERFORMANCE-EXCHANGE
# Produced by pysmi-0.3.4 at Wed May  1 15:36:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, enterprises, Counter64, ObjectIdentity, iso, Bits, Integer32, ModuleIdentity, IpAddress, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "enterprises", "Counter64", "ObjectIdentity", "iso", "Bits", "Integer32", "ModuleIdentity", "IpAddress", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
microsoft = MibIdentifier((1, 3, 6, 1, 4, 1, 311))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 1))
os = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 1, 3))
winnt = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1))
mSExchangeMTA = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1))
mtaAdjacentMTAAssociations = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaAdjacentMTAAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: mtaAdjacentMTAAssociations.setDescription('Adjacent MTA Associations is the number of open associations this MTA has to other MTAs.')
mtaMessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaMessagesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaMessagesPerSec.setDescription('Messages/sec is the rate that messages are processed.')
mtaMessageBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaMessageBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaMessageBytesPerSec.setDescription('Message Bytes/sec is the rate that message bytes are processed.')
mtaFreeElements = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaFreeElements.setStatus('mandatory')
if mibBuilder.loadTexts: mtaFreeElements.setDescription('Free Elements is the number of free buffer elements in the MTA pool.')
mtaFreeHeaders = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaFreeHeaders.setStatus('mandatory')
if mibBuilder.loadTexts: mtaFreeHeaders.setDescription('Free Headers is the number of free buffer headers in the MTA pool.')
mtaAdminConnections = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaAdminConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mtaAdminConnections.setDescription('Admin Connections is the number of Microsoft Exchange Administrator programs connected to this MTA.')
mtaThreadsInUse = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaThreadsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: mtaThreadsInUse.setDescription('Threads in Use is the number of threads in use by the MTA (does not include RPC threads). This number can be used to determine whether additional processors could be of benefit.')
mtaWorkQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaWorkQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: mtaWorkQueueLength.setDescription('Work Queue Length is the number of outstanding messages in the Work Queue, which indicates the number of messages not yet processed to completion by the MTA.')
mtaXAPIGateways = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaXAPIGateways.setStatus('mandatory')
if mibBuilder.loadTexts: mtaXAPIGateways.setDescription('XAPI Gateways is the number of gateways connected to the MTA using the XAPI MT/OM interface. A single gateway may have multiple XAPI gateway sessions.')
mtaXAPIClients = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaXAPIClients.setStatus('mandatory')
if mibBuilder.loadTexts: mtaXAPIClients.setDescription('XAPI Clients is the number of XAPI clients connected to the MTA using the XAPI MA/OM interface. A single client may have multiple XAPI client sessions.')
mtaDiskFileDeletesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaDiskFileDeletesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaDiskFileDeletesPerSec.setDescription('Disk File Deletes/sec is the rate of disk file delete operations.')
mtaDiskFileSyncsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaDiskFileSyncsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaDiskFileSyncsPerSec.setDescription('Disk File Syncs/sec is the rate of disk file sync operations.')
mtaDiskFileOpensPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaDiskFileOpensPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaDiskFileOpensPerSec.setDescription('Disk File Opens/sec is the rate of disk file open operations.')
mtaDiskFileReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaDiskFileReadsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaDiskFileReadsPerSec.setDescription('Disk File Reads/sec is the rate of disk file read operations.')
mtaDiskFileWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaDiskFileWritesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaDiskFileWritesPerSec.setDescription('Disk File Writes/sec is the rate of disk file write operations.')
mtaExDSReadCallsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaExDSReadCallsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaExDSReadCallsPerSec.setDescription('ExDS Read Calls/sec is the rate of read calls to the directory service.')
mtaXAPIReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaXAPIReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaXAPIReceiveBytesPerSec.setDescription('XAPI Receive Bytes/sec is the rate that bytes are received over a XAPI connection.')
mtaXAPITransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaXAPITransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaXAPITransmitBytesPerSec.setDescription('XAPI Transmit Bytes/sec is the rate that bytes are transmitted over a XAPI connection.')
mtaAdminInterfaceReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaAdminInterfaceReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaAdminInterfaceReceiveBytesPerSec.setDescription('Admin Interface Receive Bytes/sec is the rate that bytes are received over an Admin connection.')
mtaAdminInterfaceTransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaAdminInterfaceTransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaAdminInterfaceTransmitBytesPerSec.setDescription('Admin Interface Transmit Bytes/sec is the rate that bytes are transmitted over an Admin connection.')
mtaLANReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaLANReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaLANReceiveBytesPerSec.setDescription('LAN Receive Bytes/sec is the rate that bytes are received over a LAN from MTAs.')
mtaLANTransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaLANTransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaLANTransmitBytesPerSec.setDescription('LAN Transmit Bytes/sec is the rate that bytes are transmitted over a LAN to MTAs.')
mtaRASReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaRASReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaRASReceiveBytesPerSec.setDescription('RAS Receive Bytes/sec is the rate that bytes are received over a RAS connection.')
mtaRASTransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaRASTransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaRASTransmitBytesPerSec.setDescription('RAS Transmit Bytes/sec is the rate that bytes are transmitted over a RAS connection.')
mtaTCPPerIPReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTCPPerIPReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTCPPerIPReceiveBytesPerSec.setDescription('TCP/IP Receive Bytes/sec is the rate that bytes are received over a TCP/IP connection.')
mtaTCPPerIPTransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTCPPerIPTransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTCPPerIPTransmitBytesPerSec.setDescription('TCP/IP Transmit Bytes/sec is the rate that bytes are transmitted over a TCP/IP connection.')
mtaTP4ReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTP4ReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTP4ReceiveBytesPerSec.setDescription('TP4 Receive Bytes/sec is the rate that bytes are received over a TP4 connection.')
mtaTP4TransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTP4TransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTP4TransmitBytesPerSec.setDescription('TP4 Transmit Bytes/sec is the rate that bytes are transmitted over a TP4 connection.')
mtaX25ReceiveBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaX25ReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaX25ReceiveBytesPerSec.setDescription('X.25 Receive Bytes/sec is the rate that bytes are received over an X.25 connection.')
mtaX25TransmitBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaX25TransmitBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: mtaX25TransmitBytesPerSec.setDescription('X.25 Transmit Bytes/sec is the rate that bytes are transmitted over an X.25 connection.')
mtaDeferredDeliveryMsgs = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaDeferredDeliveryMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: mtaDeferredDeliveryMsgs.setDescription('Deferred Delivery Msgs is the total number of deferred delivery messages currently stored in the MTA.')
mtaTotalRecipientsQueued = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTotalRecipientsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTotalRecipientsQueued.setDescription('Total Recipients Queued is the total number of recipients specified in all messages currently stored in the MTA.')
mtaTotalSuccessfulConversions = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTotalSuccessfulConversions.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTotalSuccessfulConversions.setDescription('Total Successful Conversions is the total number of messages successfully converted from one form to another since MTA initialization.')
mtaTotalFailedConversions = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTotalFailedConversions.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTotalFailedConversions.setDescription('Total Failed Conversions is the total number of messages which failed to be converted from one form to another since MTA initialization.')
mtaTotalLoopsDetected = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTotalLoopsDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTotalLoopsDetected.setDescription('Total Loops Detected is the total number of messages detected to have looped since MTA initialization.')
mtaInboundMessagesTotal = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaInboundMessagesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: mtaInboundMessagesTotal.setDescription('Inbound Messages Total is the total number of messages received since MTA initialization.')
mtaOutboundMessagesTotal = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaOutboundMessagesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: mtaOutboundMessagesTotal.setDescription('Outbound Messages Total is the total number of messages transmitted since MTA initialization.')
mtaInboundBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaInboundBytesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: mtaInboundBytesTotal.setDescription('Inbound Bytes Total is the total volume of message content received since MTA initialization, measured in kilobytes.')
mtaWorkQueueBytes = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaWorkQueueBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mtaWorkQueueBytes.setDescription('Work Queue Bytes is the total volume of message content currently stored in the MTA, measured in kilobytes.')
mtaOutboundBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaOutboundBytesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: mtaOutboundBytesTotal.setDescription('Outbound Bytes Total is the total volume of message content transmitted since MTA initialization, measured in kilobytes.')
mtaTotalRecipientsInbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTotalRecipientsInbound.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTotalRecipientsInbound.setDescription('Total Recipients Inbound is the total number of recipients specified in all messages received since MTA initialization.')
mtaTotalRecipientsOutbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTotalRecipientsOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: mtaTotalRecipientsOutbound.setDescription('Total Recipients Outbound is the total number of recipients specified in all messages transmitted since MTA initialization.')
connmSExchangeMTA_ConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2), ).setLabel("connmSExchangeMTA-ConnectionsTable")
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsTable.setDescription("A table containing performance information for instances of 'mSExchangeMTA-Connections' objects.")
connmSExchangeMTA_ConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1), ).setLabel("connmSExchangeMTA-ConnectionsEntry").setIndexNames((0, "WINDOWS-NT-PERFORMANCE-EXCHANGE", "connmSExchangeMTA-ConnectionsIndex"))
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsEntry.setDescription("Performance information for one particular instance of 'mSExchangeMTA-Connections' object.")
connmSExchangeMTA_ConnectionsIndex = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 1), Integer32()).setLabel("connmSExchangeMTA-ConnectionsIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsIndex.setDescription('Index.')
connmSExchangeMTA_ConnectionsInstance = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 2), DisplayString()).setLabel("connmSExchangeMTA-ConnectionsInstance").setMaxAccess("readonly")
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsInstance.setStatus('mandatory')
if mibBuilder.loadTexts: connmSExchangeMTA_ConnectionsInstance.setDescription('Instance name.')
connAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connAssociations.setDescription('Associations is the number of associations between the MTA and the connected entity. MTAs may open multiple associations if additional transfer throughput is necessary.')
connReceiveBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connReceiveBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: connReceiveBytesPerSec.setDescription('Receive Bytes/sec is the rate that bytes are received from the connected entity.')
connSendBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSendBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: connSendBytesPerSec.setDescription('Send Bytes/sec is the rate that bytes are sent to the connected entity.')
connReceiveMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connReceiveMessagesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: connReceiveMessagesPerSec.setDescription('Receive Messages/sec is the rate that messages are received from the connected entity.')
connSendMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSendMessagesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: connSendMessagesPerSec.setDescription('Send Messages/sec is the rate that messages are sent to the connected entity.')
connQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: connQueueLength.setDescription('Queue Length is the number of outstanding messages queued for transfer to the entity.')
connConnectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConnectorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connConnectorIndex.setDescription('Connector Index is a unique index associated with a connector entity.')
connInboundRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connInboundRejectedTotal.setStatus('mandatory')
if mibBuilder.loadTexts: connInboundRejectedTotal.setDescription('Inbound Rejected Total is the total number of messages rejected from this entity since MTA initialization.')
connTotalRecipientsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTotalRecipientsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: connTotalRecipientsQueued.setDescription("Total Recipients Queued is the total number of recipients specified in all messages currently stored in this entity's queue.")
connOldestMessageQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOldestMessageQueued.setStatus('mandatory')
if mibBuilder.loadTexts: connOldestMessageQueued.setDescription("Oldest Message Queued is the time (secs) since the oldest message in this entity's queue was placed in the queue.")
connCurrentInboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCurrentInboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connCurrentInboundAssociations.setDescription('Current Inbound Associations is the current number of inbound (remote initiated) associations with the entity.')
connCurrentOutboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCurrentOutboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connCurrentOutboundAssociations.setDescription('Current Outbound Associations is the current number of outbound (locally initiated) associations with the entity.')
connCumulativeInboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCumulativeInboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connCumulativeInboundAssociations.setDescription('Cumulative Inbound Associations is the total number of inbound (remote initiated) associations with the entity, since MTA initialization.')
connCumulativeOutboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCumulativeOutboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connCumulativeOutboundAssociations.setDescription('Cumulative Outbound Associations is the total number of outbound (locally initiated) associations with the entity, since MTA initialization.')
connLastInboundAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLastInboundAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: connLastInboundAssociation.setDescription('Last Inbound Association is the time (secs) since the last time an inbound (remote initiated) association for this entity was active.')
connLastOutboundAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLastOutboundAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: connLastOutboundAssociation.setDescription('Last Outbound Association is the time (secs) since the last time an outbound (locally initiated) association for this entity was active.')
connRejectedInboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRejectedInboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connRejectedInboundAssociations.setDescription('Rejected Inbound Associations is the total number of inbound (remote initiated) associations that have been rejected, since MTA initialization.')
connFailedOutboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFailedOutboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: connFailedOutboundAssociations.setDescription('Failed Outbound Associations is the total number of outbound (locally initiated) associations that have failed, since MTA initialization.')
connNextAssociationRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connNextAssociationRetry.setStatus('mandatory')
if mibBuilder.loadTexts: connNextAssociationRetry.setDescription('Next Association Retry is the time (secs since 00:00 1st Jan 1970) when this entity is next scheduled to attempt to open an association.')
connInboundRejectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connInboundRejectReason.setStatus('mandatory')
if mibBuilder.loadTexts: connInboundRejectReason.setDescription('Inbound Reject Reason is the reject reason code, if any, for the last association rejected from this entity.')
connOutboundFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOutboundFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: connOutboundFailureReason.setDescription('Outbound Failure Reason is the failure reason code, if any, for the last association attempt to this entity.')
connInboundMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connInboundMessagesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: connInboundMessagesTotal.setDescription('Inbound Messages Total is the total number of messages received from this entity since MTA initialization.')
connOutboundMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOutboundMessagesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: connOutboundMessagesTotal.setDescription('Outbound Messages Total is the total number of messages transmitted to this entity since MTA initialization.')
connInboundBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connInboundBytesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: connInboundBytesTotal.setDescription('Inbound Bytes Total is the total volume of message content received from this entity since MTA initialization, measured in kilobytes.')
connQueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connQueuedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: connQueuedBytes.setDescription("Queued Bytes is the total volume of message content currently stored in this entity's queue, measured in kilobytes.")
connOutboundBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOutboundBytesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: connOutboundBytesTotal.setDescription('Outbound Bytes Total is the total volume of message content transmitted to this entity since MTA initialization, measured in kilobytes.')
connTotalRecipientsInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTotalRecipientsInbound.setStatus('mandatory')
if mibBuilder.loadTexts: connTotalRecipientsInbound.setDescription('Total Recipients Inbound is the total number of recipients specified in all messages received from this entity since MTA initialization.')
connTotalRecipientsOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTotalRecipientsOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: connTotalRecipientsOutbound.setDescription('Total Recipients Outbound is the total number of recipients specified in all messages transmitted to this entity since MTA initialization.')
mSExchangeIMC = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3))
imsQueuedMTS_IN = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 1), Integer32()).setLabel("imsQueuedMTS-IN").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsQueuedMTS_IN.setStatus('mandatory')
if mibBuilder.loadTexts: imsQueuedMTS_IN.setDescription('The number of messages awaiting final delivery in MS Exchange Server')
imsBytesQueuedMTS_IN = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 2), Integer32()).setLabel("imsBytesQueuedMTS-IN").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsBytesQueuedMTS_IN.setStatus('mandatory')
if mibBuilder.loadTexts: imsBytesQueuedMTS_IN.setDescription('The size, in bytes, of the messages that have been converted from Internet Mail and are awaiting final delivery within MS Exchange Server')
imsMessagesEnteringMTS_IN = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 3), Integer32()).setLabel("imsMessagesEnteringMTS-IN").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsMessagesEnteringMTS_IN.setStatus('mandatory')
if mibBuilder.loadTexts: imsMessagesEnteringMTS_IN.setDescription('The number of messages entering the MTS-IN folder after conversion from Internet Mail format per hour')
imsQueuedMTS_OUT = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 4), Integer32()).setLabel("imsQueuedMTS-OUT").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsQueuedMTS_OUT.setStatus('mandatory')
if mibBuilder.loadTexts: imsQueuedMTS_OUT.setDescription('The number of messages waiting to be converted to Internet Mail format')
imsBytesQueuedMTS_OUT = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 5), Integer32()).setLabel("imsBytesQueuedMTS-OUT").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsBytesQueuedMTS_OUT.setStatus('mandatory')
if mibBuilder.loadTexts: imsBytesQueuedMTS_OUT.setDescription('The size, in bytes, of the messages waiting to be converted to Internet Mail format')
imsMessagesEnteringMTS_OUT = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 6), Integer32()).setLabel("imsMessagesEnteringMTS-OUT").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsMessagesEnteringMTS_OUT.setStatus('mandatory')
if mibBuilder.loadTexts: imsMessagesEnteringMTS_OUT.setDescription('Messages that have entered the Internet Mail Service')
imsMessagesLeavingMTS_OUT = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 7), Integer32()).setLabel("imsMessagesLeavingMTS-OUT").setMaxAccess("readonly")
if mibBuilder.loadTexts: imsMessagesLeavingMTS_OUT.setStatus('mandatory')
if mibBuilder.loadTexts: imsMessagesLeavingMTS_OUT.setDescription('The number of messages entering the Outbound Queue per hour')
imsConnectionsInbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsConnectionsInbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsConnectionsInbound.setDescription('The number of current SMTP connections to the Internet Mail Service established by other SMTP hosts')
imsConnectionsOutbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsConnectionsOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsConnectionsOutbound.setDescription('The number of current SMTP connections the Internet Mail Service has established to other SMTP hosts')
imsConnectionsTotalOutbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsConnectionsTotalOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsConnectionsTotalOutbound.setDescription('The total number of successful SMTP connections that the Internet Mail Service has established since it was started')
imsConnectionsTotalInbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsConnectionsTotalInbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsConnectionsTotalInbound.setDescription('The total number of SMTP connections the Internet Mail Service has accepted from other hosts since it was started')
imsConnectionsTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsConnectionsTotalRejected.setStatus('mandatory')
if mibBuilder.loadTexts: imsConnectionsTotalRejected.setDescription('The total number of SMTP connections that the Internet Mail Service has rejected from other hosts since it was started')
imsConnectionsTotalFailed = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsConnectionsTotalFailed.setStatus('mandatory')
if mibBuilder.loadTexts: imsConnectionsTotalFailed.setDescription('The total number of SMTP connections the Internet Mail Service has attempted to other hosts that failed since it was started')
imsQueuedOutbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsQueuedOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsQueuedOutbound.setDescription('The number of messages from MS Exchange Server, that are queued to be delivered to the Internet')
imsQueuedInbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsQueuedInbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsQueuedInbound.setDescription('The number of messages received from the Internet destined for MS Exchange Server')
imsNDRsTotalInbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsNDRsTotalInbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsNDRsTotalInbound.setDescription('The total number of Non-delivery reports generated for outbound mail')
imsNDRsTotalOutbound = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsNDRsTotalOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: imsNDRsTotalOutbound.setDescription('The total number of Non-delivery reports generated for inbound mail')
imsTotalInboundKilobytes = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalInboundKilobytes.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalInboundKilobytes.setDescription('The total kilobytes of message data transferred into the MS Exchange Server')
imsTotalOutboundKilobytes = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalOutboundKilobytes.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalOutboundKilobytes.setDescription('The total kilobytes of message data transferred out of the MS Exchange Server')
imsInboundMessagesTotal = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsInboundMessagesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: imsInboundMessagesTotal.setDescription('The total number of Internet messages delivered into MS Exchange Server')
imsOutboundMessagesTotal = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsOutboundMessagesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: imsOutboundMessagesTotal.setDescription('The total number of outbound messages delivered to their destinations')
imsInboundBytesPerHr = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsInboundBytesPerHr.setStatus('mandatory')
if mibBuilder.loadTexts: imsInboundBytesPerHr.setDescription('The hourly rate of bytes transferred to the MS Exchange Server')
imsOutboundBytesPerHr = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsOutboundBytesPerHr.setStatus('mandatory')
if mibBuilder.loadTexts: imsOutboundBytesPerHr.setDescription('The hourly rate of bytes transferred to the Internet')
imsInboundMessagesPerHr = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsInboundMessagesPerHr.setStatus('mandatory')
if mibBuilder.loadTexts: imsInboundMessagesPerHr.setDescription('The hourly rate messages are transferred to the MS Exchange server')
imsOutboundMessagesPerHr = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsOutboundMessagesPerHr.setStatus('mandatory')
if mibBuilder.loadTexts: imsOutboundMessagesPerHr.setDescription('The hourly rate messages are transferred to the Internet')
imsOutboundConnectionsPerHr = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsOutboundConnectionsPerHr.setStatus('mandatory')
if mibBuilder.loadTexts: imsOutboundConnectionsPerHr.setDescription('The hourly rate at which outbound connections were made')
imsInboundConnectionsPerHr = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsInboundConnectionsPerHr.setStatus('mandatory')
if mibBuilder.loadTexts: imsInboundConnectionsPerHr.setDescription('The hourly rate at which inbound connections were received')
imsTotalMessagesQueued = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalMessagesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalMessagesQueued.setDescription('Total messages waiting in the Internet Mail Service queues')
imsTotalKilobytesQueued = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalKilobytesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalKilobytesQueued.setDescription('Total kilobytes of message data queued in the Internet Mail Service queues')
imsTotalInboundRecipients = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalInboundRecipients.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalInboundRecipients.setDescription('Total number of recipients processed inbound since the Internet Mail Service was started')
imsTotalOutboundRecipients = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalOutboundRecipients.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalOutboundRecipients.setDescription('Total number of recipients processed outbound since the Internet Mail Service was started')
imsTotalRecipientsQueued = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalRecipientsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalRecipientsQueued.setDescription('Total number of recipients in the Internet Mail Service queues')
imsTotalSuccessfulConversions = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalSuccessfulConversions.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalSuccessfulConversions.setDescription('Total message format conversions between internet format and Exchange format that succeeded.')
imsTotalFailedConversions = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalFailedConversions.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalFailedConversions.setDescription('Total message format conversions between internet format and Exchange format that failed.')
imsTotalLoopsDetected = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 1, 3, 1, 1, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imsTotalLoopsDetected.setStatus('mandatory')
if mibBuilder.loadTexts: imsTotalLoopsDetected.setDescription('Total number of messages NDRd because they appeared to be looping infinitely.')
mibBuilder.exportSymbols("WINDOWS-NT-PERFORMANCE-EXCHANGE", mtaWorkQueueBytes=mtaWorkQueueBytes, mtaThreadsInUse=mtaThreadsInUse, mtaTotalLoopsDetected=mtaTotalLoopsDetected, mtaXAPITransmitBytesPerSec=mtaXAPITransmitBytesPerSec, mtaInboundBytesTotal=mtaInboundBytesTotal, connOutboundBytesTotal=connOutboundBytesTotal, imsConnectionsOutbound=imsConnectionsOutbound, imsConnectionsTotalFailed=imsConnectionsTotalFailed, connInboundMessagesTotal=connInboundMessagesTotal, imsTotalLoopsDetected=imsTotalLoopsDetected, imsTotalInboundKilobytes=imsTotalInboundKilobytes, mtaMessageBytesPerSec=mtaMessageBytesPerSec, mtaDiskFileReadsPerSec=mtaDiskFileReadsPerSec, imsQueuedMTS_OUT=imsQueuedMTS_OUT, connQueuedBytes=connQueuedBytes, connConnectorIndex=connConnectorIndex, imsQueuedOutbound=imsQueuedOutbound, os=os, imsInboundMessagesPerHr=imsInboundMessagesPerHr, software=software, mtaTotalSuccessfulConversions=mtaTotalSuccessfulConversions, performance=performance, imsBytesQueuedMTS_OUT=imsBytesQueuedMTS_OUT, connInboundRejectReason=connInboundRejectReason, mtaRASReceiveBytesPerSec=mtaRASReceiveBytesPerSec, connRejectedInboundAssociations=connRejectedInboundAssociations, imsTotalSuccessfulConversions=imsTotalSuccessfulConversions, mtaTotalRecipientsInbound=mtaTotalRecipientsInbound, connTotalRecipientsInbound=connTotalRecipientsInbound, connmSExchangeMTA_ConnectionsTable=connmSExchangeMTA_ConnectionsTable, mtaMessagesPerSec=mtaMessagesPerSec, imsTotalMessagesQueued=imsTotalMessagesQueued, connCurrentInboundAssociations=connCurrentInboundAssociations, mtaRASTransmitBytesPerSec=mtaRASTransmitBytesPerSec, mtaLANReceiveBytesPerSec=mtaLANReceiveBytesPerSec, imsOutboundMessagesTotal=imsOutboundMessagesTotal, mSExchangeMTA=mSExchangeMTA, imsNDRsTotalInbound=imsNDRsTotalInbound, mtaX25TransmitBytesPerSec=mtaX25TransmitBytesPerSec, connCumulativeOutboundAssociations=connCumulativeOutboundAssociations, connmSExchangeMTA_ConnectionsInstance=connmSExchangeMTA_ConnectionsInstance, mtaTP4TransmitBytesPerSec=mtaTP4TransmitBytesPerSec, microsoft=microsoft, connTotalRecipientsQueued=connTotalRecipientsQueued, connNextAssociationRetry=connNextAssociationRetry, imsQueuedInbound=imsQueuedInbound, imsConnectionsInbound=imsConnectionsInbound, mtaTotalRecipientsQueued=mtaTotalRecipientsQueued, mtaInboundMessagesTotal=mtaInboundMessagesTotal, connReceiveBytesPerSec=connReceiveBytesPerSec, mSExchangeIMC=mSExchangeIMC, imsTotalRecipientsQueued=imsTotalRecipientsQueued, mtaAdminInterfaceTransmitBytesPerSec=mtaAdminInterfaceTransmitBytesPerSec, connFailedOutboundAssociations=connFailedOutboundAssociations, connTotalRecipientsOutbound=connTotalRecipientsOutbound, imsNDRsTotalOutbound=imsNDRsTotalOutbound, imsMessagesLeavingMTS_OUT=imsMessagesLeavingMTS_OUT, connCumulativeInboundAssociations=connCumulativeInboundAssociations, imsConnectionsTotalRejected=imsConnectionsTotalRejected, imsBytesQueuedMTS_IN=imsBytesQueuedMTS_IN, mtaAdminInterfaceReceiveBytesPerSec=mtaAdminInterfaceReceiveBytesPerSec, imsTotalKilobytesQueued=imsTotalKilobytesQueued, imsOutboundConnectionsPerHr=imsOutboundConnectionsPerHr, mtaLANTransmitBytesPerSec=mtaLANTransmitBytesPerSec, imsInboundMessagesTotal=imsInboundMessagesTotal, connAssociations=connAssociations, mtaTCPPerIPTransmitBytesPerSec=mtaTCPPerIPTransmitBytesPerSec, connmSExchangeMTA_ConnectionsIndex=connmSExchangeMTA_ConnectionsIndex, connQueueLength=connQueueLength, imsInboundConnectionsPerHr=imsInboundConnectionsPerHr, imsMessagesEnteringMTS_IN=imsMessagesEnteringMTS_IN, imsConnectionsTotalInbound=imsConnectionsTotalInbound, imsInboundBytesPerHr=imsInboundBytesPerHr, imsTotalOutboundKilobytes=imsTotalOutboundKilobytes, winnt=winnt, connInboundRejectedTotal=connInboundRejectedTotal, connCurrentOutboundAssociations=connCurrentOutboundAssociations, connInboundBytesTotal=connInboundBytesTotal, imsOutboundBytesPerHr=imsOutboundBytesPerHr, mtaTotalFailedConversions=mtaTotalFailedConversions, mtaDeferredDeliveryMsgs=mtaDeferredDeliveryMsgs, connmSExchangeMTA_ConnectionsEntry=connmSExchangeMTA_ConnectionsEntry, mtaOutboundBytesTotal=mtaOutboundBytesTotal, imsMessagesEnteringMTS_OUT=imsMessagesEnteringMTS_OUT, mtaDiskFileDeletesPerSec=mtaDiskFileDeletesPerSec, connLastInboundAssociation=connLastInboundAssociation, mtaTCPPerIPReceiveBytesPerSec=mtaTCPPerIPReceiveBytesPerSec, mtaXAPIGateways=mtaXAPIGateways, imsOutboundMessagesPerHr=imsOutboundMessagesPerHr, mtaFreeElements=mtaFreeElements, mtaXAPIClients=mtaXAPIClients, connOutboundMessagesTotal=connOutboundMessagesTotal, connReceiveMessagesPerSec=connReceiveMessagesPerSec, mtaX25ReceiveBytesPerSec=mtaX25ReceiveBytesPerSec, mtaXAPIReceiveBytesPerSec=mtaXAPIReceiveBytesPerSec, imsTotalInboundRecipients=imsTotalInboundRecipients, mtaTotalRecipientsOutbound=mtaTotalRecipientsOutbound, mtaOutboundMessagesTotal=mtaOutboundMessagesTotal, imsConnectionsTotalOutbound=imsConnectionsTotalOutbound, connOldestMessageQueued=connOldestMessageQueued, systems=systems, imsTotalOutboundRecipients=imsTotalOutboundRecipients, connOutboundFailureReason=connOutboundFailureReason, mtaDiskFileSyncsPerSec=mtaDiskFileSyncsPerSec, imsQueuedMTS_IN=imsQueuedMTS_IN, mtaDiskFileOpensPerSec=mtaDiskFileOpensPerSec, mtaExDSReadCallsPerSec=mtaExDSReadCallsPerSec, connSendMessagesPerSec=connSendMessagesPerSec, mtaAdminConnections=mtaAdminConnections, imsTotalFailedConversions=imsTotalFailedConversions, mtaWorkQueueLength=mtaWorkQueueLength, connLastOutboundAssociation=connLastOutboundAssociation, connSendBytesPerSec=connSendBytesPerSec, mtaDiskFileWritesPerSec=mtaDiskFileWritesPerSec, mtaFreeHeaders=mtaFreeHeaders, mtaTP4ReceiveBytesPerSec=mtaTP4ReceiveBytesPerSec, mtaAdjacentMTAAssociations=mtaAdjacentMTAAssociations)
