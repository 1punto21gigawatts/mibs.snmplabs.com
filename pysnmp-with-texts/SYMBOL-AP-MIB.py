#
# PySNMP MIB module SYMBOL-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBOL-AP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Bits, MibIdentifier, Counter64, iso, Unsigned32, ObjectIdentity, IpAddress, Gauge32, NotificationType, ModuleIdentity, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Bits", "MibIdentifier", "Counter64", "iso", "Unsigned32", "ObjectIdentity", "IpAddress", "Gauge32", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter32")
DisplayString, TruthValue, TextualConvention, TestAndIncr, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "TestAndIncr", "PhysAddress")
ccPortalTxRetriesPkts08, ccWlanRxPktsAt1Mb, ccPortalRxUndecryptablePkts, ccPortalSettingsMeshClientWlanIndex, ccMuRxOctetsUcast, ccMuRxPktsAt22Mb, ccWlanTxPktsAt48Mb, ccMuTxOctetsAt12Mb, ccPortalSumStatsShortPktsPerSecRx100, ccPortalTxPktsAt36Mb, ccPortalTxOctetsAt18Mb, ccMuTxRetriesOctets07, ccPortalSettingsDefaultDtimPrd3, ccWlanTxOctetsAt22Mb, ccMuPortalIndex, ccWlanTxPktsUcast, ccMuRxPktsUcast, ccPortalSettingsSipActiveSessCnt, ccMuTxRetriesFailed, ccMuTxRetries05, ccPortalSumStatsShortPktsPerSec100, ccWlanTxRetriesOctets09, ccWlanAuthEapRadius1Port, ccWlanCryptoWpaTwoKeyToUse, ccPortalSigStatsNoiseSumSquares, ccWlanRxUndecryptablePkts, ccPortalSigStatsNoiseSum, ccPortalRxOctetsAt6Mb, ccPortalSumStatsShortAvgMuSnr, ccWlanSumStatsLongPktsPerSec100, ccPortalTxPktsUcast, ccPortalTxRetriesPkts01, ccPortalRxOctetsAt18Mb, ccWlanTxRetriesPkts14, ccMuRxOctetsAt1Mb, ccWlanAuthEapReauthenticationPeriod, ccMuRxOctetsAt54Mb, ccPortalState, ccPortalIpAddress, ccWlanSigStatsSignalWorst, ccPortalSettingsSecBeacon, ccWlanMuAclRowStatus, ccMuTxPktsAt5pt5Mb, ccPortalSettingsDefaultBeaconInt, ccMuSigStatsSignalSumSquares, ccMuTxRetries03, ccWlanTxPktsAt9Mb, ccWlanQosWMEProfileVideoAifsn, ccMuTxPktsAt11Mb, ccWlanTxOctetsAt11Mb, ccWlanVoicePrioritization, ccWlanTxOctetsAt48Mb, ccWlanTxRetriesPktsNone, ccPortalSystemStatsProbeRespRetries3OrMore, ccPortalTxRetriesPkts07, ccPortalRxPktsAt12Mb, ccPortalSumStatsShortNumPkts, ccPortalSigStatsNoiseWorst, ccWlanCryptoWpaKeyRotationInterval, ccPortalRxPktsAt48Mb, ccPortalAdoptionStartMac, ccMuSumStatsLongAvgMuSnr, ccPortalSumStatsLongPp10kRfUtil, ccWlanTxRetriesOctets03, ccWlanQosWMEProfileIndex, ccMuSigStatsSignalBest, ccMuTxRetriesOctets03, ccPortalSigStatsSignalBest, ccWlanCryptoWpaKey, ccPortalTxRetriesOctets04, ccWlanQosWMETrafficDestPortStart, ccWlanTxRetriesPkts11, ccPortalTxRetriesPktsNone, ccWlanQosMonitorSent, ccMuTxRetriesOctets08, cc802dt1xPortAuthPass, ccPortalSettingsDtimPrd, ccWlanSumStatsShortTotalMus, ccWlanSumStatsLongAvgMuSnr, ccPortalSumStatsShortPp10kRxUndecrypt, ccWlanSigStatsSnrSumSquares, ccWlanTxRetriesPkts13, ccMuPowerMode, ccMuTxPktsAt12Mb, ccPortalSettingsSipInActiveSessCnt, ccPortalRxPktsAt1Mb, ccPortalSumStatsLongTxAvgRetries100, ccMuTxRetries08, ccMuEncryptionMethod, ccWlanTxRetriesOctets04, ccMuTxPktsAt1Mb, ccMuTxOctetsAt22Mb, ccPortalCfgRadioPowerLevel, ccWlanThresholdRate, ccMuRxPktsAt6Mb, ccPortalTxPktsAt6Mb, ccMuSumStatsShortPp10kNUcastPkts, ccMuRxPktsAt2Mb, ccWlanCryptoKeyguardKey1, ccMuTxRetriesOctets05, ccPortalSumStatsShortPp10kDropped, ccWlanWeight, ccPortalSettingsBasicRates, ccMuSumStatsShortAvgMuSnr, ccMuSumStatsShortThroughputRx, ccPortalOptions, ccMuSigStatsNoiseSum, ccMuRxRssiMostRecent, ccPortalCfgRadioPowerInMW, ccMuIsDataReady, ccWlanRxOctetsNUcast, ccWlanSumStatsShortNumPkts, ccPortalSystemStatsBeaconsTxOctets, ccWlanRxPktsNUcast, ccMuRxOctetsAt24Mb, ccPortalTxOctetsAt5pt5Mb, ccPortalTxOctetsAt48Mb, ccWlanEnable, ccPortalTxRetriesPkts14, ccPortalSigStatsSnrBest, ccMuRxPktsAt36Mb, ccMuMeshMode, ccWlanTxRetriesOctetsNone, ccPortalMeshAvailableBaseMac, ccWlanTxRetriesPkts06, ccMuTxRetriesOctets13, ccWlanTxRetriesOctets14, ccMuTxOctetsAt2Mb, ccPortalTxRetriesOctets10, ccWlanPortalsAdopted, ccPortalSettingsDtimPrd4, ccPortalSumStatsShortTotalMus, ccMuRxOctetsAt36Mb, ccMuSumStatsShortAvgMuNoise, ccMuSumStatsLongAvgBitSpeed, ccWlanTxPktsAt1Mb, ccMuSumStatsLongPp10kDropped, ccPortalTxPktsAt2Mb, ccPortalTxOctetsAt1Mb, ccPortalTxRetriesPkts12, ccMuTxRetries11, ccPortalSystemStatsProbeRespRetries1, ccPortalCfgRadioDefaultPlacement, ccWlanSigStatsNoiseSum, ccPortalTxRetriesPkts13, ccMuTxRetries04, ccPortalTxOctetsAt6Mb, ccMuIpAddr, ccPortalTxRetriesPkts09, ccWlanCryptoWpaTwoFastRoamPreAuth, ccWlanAuthKerberosRealmName, ccWlanCryptoWepKey2, ccPortalCfgRadioDefaultChannelMode, ccPortalSumStatsLongPp10kNUcastPkts, ccWlanAuthEapRadiusAcctMuRetries, ccMuRxOctetsAt2Mb, ccWlanSumStatsLongNumPkts, ccPortalTxRetriesOctets09, ccMuRxOctetsAt12Mb, ccMuRxRssiSumSquares, ccPortalRadioType, ccWlanSumStatsShortAvgMuNoise, ccWlanSumStatsShortPktsPerSecRx100, ccMuTxRetriesOctets06, ccWlanQosWMEProfileVideoECwmin, ccPortalSumStatsShortTimestamp, ccWlanRxOctetsAt11Mb, ccWlanQosWMEProfileBackgroundTxopsTime, ccWlanCryptoWpaTwoFastRoamKeyCache, ccWlanTxPktsAt5pt5Mb, ccWlanQosWMETrafficDestMask, ccPortalRxPktsAt9Mb, ccPortalSumStatsLongPp10kRxUndecrypt, ccWlanAuthEapServerTimeout, ccPortalSigStatsSignalWorst, ccMuTxRetriesNone, ccPortalTxOctetsAt36Mb, ccPortalSumStatsLongTimestamp, ccWlanAuthEapMuQuietPeriod, ccPortalSettingsDefaultPriWlan, ccWlanAuthEapReauthenticationMaxRetries, ccPortalSumStatsLongAvgMuSnr, ccPortalSettingsBGMode, ccWlanMuAclEndingMac, ccMuRxOctetsAt5pt5Mb, ccMuSumStatsLongTimestamp, ccWlanTxRetriesOctets01, ccPortalMeshPreferredBaseRowStatus, ccMuTxRetries14, ccMuTxOctetsAt1Mb, ccWlanRxOctetsAt2Mb, ccWlanAuthKerberosKdcPortR, ccPortalTxPktsAt54Mb, ccPortalCfgRadioDesPowerLevel, ccPortalSumStatsLongPp10kTxMaxRetries, ccPortalTxRetriesPkts10, ccWlanCryptoWpaTwoKeyRotationInterval, ccMuTxRetriesOctets14, ccWlanRxPktsAt12Mb, ccPortalSettingsSupportedRates, ccWlanMuAclIndex, ccWlanTxOctetsAt5pt5Mb, ccPortalNumberOfBss, cc802dt1xPortAuthSetAp300, ccPortalRxOctetsAt9Mb, ccMuLastMac, ccPortalLocation, ccMuSigStatsSnrWorst, ccMuSumStatsShortTimestamp, ccPortalTxOctetsUcast, ccPortalRxPktsAt11Mb, ccWlanTxRetriesOctets07, ccPortalCfgRadioDesPlacement, ccPortalTxRetriesOctetsNone, ccMuTxOctetsAt9Mb, ccPortalPointersToWlans, ccWlanCryptoWpaTwoBcastKeyRotation, ccWlanQosWMETrafficAccessCategory, ccMuTxRetriesOctets02, ccWlanAuthEapMuTxPeriod, ccMuSigStatsSnrSumSquares, ccWlanLastActivity, ccWlanCryptoWpaBcastKeyRotation, ccMuSumStatsShortTxAvgRetries100, ccPortalSettingsDefaultShortPreamble, ccPortalTxRetriesPkts02, ccWlanAuthKerberosKdcServerIp1, ccWlanTxPktsAt18Mb, ccWlanRxOctetsAt48Mb, ccWlanSumStatsLongPp10kNUcastPkts, ccMuSumStatsLongPktsPerSecTx100, ccWlanSumStatsLongSkip1, ccWlanAuthKerberosUsername, ccPortalSigStatsSignalMostRecent, ccPortalSIPCacMode, ccPortalCfgRadioPosChannel, ccMuType, ccWlanQosWMEProfileBackgroundECwmax, ccWlanTxRetriesPkts03, ccPortalBackgroundNoiseSum, ccWlanMuAclStartingMac, ccPortalAdoptionEndMac, ccMuTxRetries10, ccWlanRxOctetsAt54Mb, ccMuSumStatsLongAvgMuSignal, ccPortalAssociatedMus, ccPortalAdoptionRowStatus, ccPortalRxPktsAt36Mb, ccMuTxRetries07, ccMuSigStatsNoiseSumSquares, ccWlanSumStatsShortPp10kRxUndecrypt, ccPortalTxOctetsAt12Mb, ccWlanAuthKerberosKdcPort1, ccWlanAuthEapRadius2SharedSecret, ccWlanAuthEapRadius2Port, ccWlanRxPktsAt54Mb, ccMuSumStatsLongThroughput, ccPortalSigStatsNoiseMostRecent, ccWlanSumStatsShortTxAvgRetries100, ccPortalCfgRadioChannelMode, ccWlanSumStatsShortPp10kTxWithRetries, ccMuTxRetries06, ccWlanIndex, ccWlanQosWMETrafficSrcIp, ccMuTxRetriesOctets04, ccMuSumStatsLongPp10kTxWithRetries, ccPortalLastMac, ccWlanRxPktsAt18Mb, ccMuWlanName, ccMuTxRetries13, ccMuTxRetriesOctets12, ccPortalRxOctetsAt24Mb, ccPortalSumStatsLongPktsPerSecTx100, ccMuSumStatsLongThroughputRx, ccWlanTxPktsAt22Mb, ccMuSumStatsShortPktsPerSecTx100, ccPortalTxOctetsAt9Mb, ccWlanQosWMEProfileVoiceAifsn, ccPortalTxRetriesOctets02, ccWlanRxPktsAt22Mb, ccPortalLastActivity, ccWlanTxOctetsAt6Mb, ccPortalSumStatsLongAvgMuNoise, ccPortalRxOctetsAt12Mb, ccMuSumStatsShortThroughputTx, ccPortalTxRetriesOctets01, ccPortalSettingsUniSpread, ccPortalSettingsRevertAp, ccPortalTxRetriesOctets08, ccPortalCfgRadioChannel, ccMuTxOctetsUcast, ccMuRxPktsAt48Mb, ccMuTxRetriesOctets09, ccPortalSettingsDefaultUniSpread, ccWlanSumStatsShortThroughputTx, ccPortalSettingsBeaconInt, ccMuTxRetriesOctetsFailed, ccPortalSettingsMeshClientEnable, ccMuSumStatsShortPktsPerSecRx100, ccPortalSumStatsShortThroughput, ccWlanSumStatsShortPp10kDropped, ccPortalSigStatsSignalSum, ccPortalTxRetriesOctets05, ccWlanRxOctetsAt36Mb, ccWlanRxOctetsAt9Mb, ccWlanQosWMETrafficSrcMask, ccMuSumStatsShortPp10kDropped, ccWlanRxOctetsUcast, ccWlanQosWMEProfileBestEffortAifsn, ccPortalSumStatsShortAvgMuSignal, ccMuTxPktsAt6Mb, ccWlanTxOctetsAt12Mb, ccWlanSumStatsLongAvgMuNoise, ccMuRxPktsAt54Mb, ccMuTxRetries15, cc802dt1xPortAuthLogin, ccWlanSumStatsShortTimestamp, ccPortalCfgRadioDefaultDesChannel, ccPortalRxPktsAt6Mb, ccPortalRxOctetsAt22Mb, ccPortalName, ccPortalSettingsDetector, ccMuSumStatsShortPp10kRxUndecrypt, ccPortalLastAdoption, ccMuMac, ccPortalSettingsDefaultDtimPrd4, ccMuLastPortal, ccPortalLegacyMode, ccWlanSumStatsLongPktsPerSecTx100, ccWlanVlanId, ccPortalSystemStatsProbeReqRx, ccPortalTxRetriesPkts15, ccPortalCfgRadioRemapChannel, ccWlanSumStatsLongTxAvgRetries100, ccWlanTxOctetsAt9Mb, ccMuTxRetriesTotal, ccMuSumStatsShortThroughput, ccWlanAuthEapMuTimeout, ccPortalSumStatsShortThroughputTx, ccMuTxOctetsAt54Mb, ccWlanTxPktsAt2Mb, ccWlanTxOctetsAt24Mb, ccMuTxRetriesOctets01, ccSubnetEntry, ccWlanAnswerBroadcastEss, ccWlanMuInactivityTimeout, ccMuSumStatsLongNumPkts, ccWlanRxOctetsAt1Mb, ccMuSigStatsSignalMostRecent, ccMuSigStatsSignalSum, ccPortalSettingsAdoptedWlan, ccWlanQosMonitorDropped, ccPortalCfgRadioDefaultPowerInMW, ccWlanTxPktsAt6Mb, ccWlanSigStatsSignalSumSquares, ccWlanRxPktsAt48Mb, ccPortalSettingsShortPreamble, ccWlanCryptoWepKey1, ccWlanAuthEapRadiusAcctMuTimeout, ccWlanQosWMEProfileVoiceECwmax, ccPortalSettingsMeshMaxClients, ccPortalMeshAvailableBaseRssi, ccPortalTxRetriesPkts05, ccWlanSumStatsLongThroughputTx, ccPortalTxPktsAt12Mb, ccPortalSigStatsNoiseBest, ccMuTxRetriesOctets15, ccWlanSigStatsNoiseWorst, ccPortalRxPktsNUcast, ccPortalSumStatsLongThroughput, ccMuSigStatsNoiseWorst, ccWlanSumStatsLongThroughputRx, ccWlanCryptoWpaPassphrase, ccPortalMac, ccMuTxRetriesMostRecent, ccWlanTxRetriesPkts05, ccWlanCryptoWepPassKey, ccPortalSigStatsNumPkts, ccPortalTxOctetsAt11Mb, ccWlanQosWMETrafficIndex, ccPortalSystemStatsProbeRespTxOctets, ccWlanSigStatsNoiseSumSquares, ccMuTxOctetsAt11Mb, ccPortalRxOctetsAt1Mb, ccWlanSigStatsNumPkts, ccMuTxRetriesOctets10, ccMuTxPktsAt48Mb, ccPortalTxRetriesOctets12, ccPortalSumStatsLongPp10kDropped, ccWlanRxPktsAt36Mb, ccPortalTxPktsAt22Mb, ccMuRxPktsAt24Mb, ccMuTxPktsUcast, ccPortalTxPowerLevel, ccMuRxOctetsAt11Mb, ccWlanMuAclName, ccWlanSumStatsShortThroughputRx, ccWlanAuthEapReauthenticationEnable, ccWlanCryptoWepKeyToUse, ccWlanTxRetriesOctets02, ccWlanTxRetriesOctets06, ccPortalTxRetriesOctets15, ccPortalSumStatsLongTotalMus, ccPortalChannel, ccMuTxPktsAt36Mb, ccWlanRxOctetsAt18Mb, ccPortalRxOctetsAt54Mb, ccWlanTxRetriesPkts04, ccPortalTxPktsAt5pt5Mb, ccWlanAuthEapSyslogSeverIp, ccPortalSettingsLocation, ccMuRxPktsAt18Mb, ccWlanCryptoWepKey3, ccWlanSubnet, ccPortalCfgRadioDesChannel, ccPortalSettingsDefaultBGMode, ccPortalSumStatsShortPp10kTxMaxRetries, ccPortalTxRetriesPkts06, ccPortalBackgroundNoiseWorst, ccPortalTxRetriesOctets14, ccMuSumStatsShortPp10kTxWithRetries, ccMuTxRetriesOctetsNone, ccPortalCfgRadioPosPowerLevel, ccPortalCfgRadioDefaultSet, ccPortalSettingsDefaultSupportedRates, ccWlanTxRetriesOctets11, ccPortalTxRetriesOctetsFailed, ccWlanQosWMEProfileBackgroundAifsn, ccMuRxRssiSum, ccMuSumStatsLongTxAvgRetries100, ccMuRxPktsNUcast, ccWlanAuthEapRadius1SharedSecret, ccWlanQosWMETrafficRowStatus, ccPortalRxPktsAt22Mb, ccPortalRxOctetsAt11Mb, ccWlanCryptoKeyguardKeyToUse, ccMuRxPktsAt9Mb, ccPortalSettingsDefaultRtsThresh, ccWlanTxRetriesPktsFailed, ccPortalTxPktsAt18Mb, ccWlanRxOctetsAt22Mb, ccPortalSettingsDefaultDtimPrd, ccPortalSettingsDefaultAntenna, ccWlanSigStatsSignalBest, ccPortalBackgroundNoiseBest, ccPortalSettingsPriWlan, ccMuSumStatsShortAvgBitSpeed, ccWlanTxOctetsAt18Mb, ccMuAuthenticationMethod, ccWlanEncryption, ccWlanAuthKerberosKdcPort2, ccMuSumStatsLongPktsPerSecRx100, ccWlanAuthentication, ccWlanSigStatsNoiseBest, ccMuRadioType, ccMuLastActivity, ccPortalTxPktsAt24Mb, ccPortalTxPktsAt48Mb, ccPortalSettingsDefaultBasicRates, ccWlanSumStatsShortPktsPerSecTx100, ccWlanSigStatsSignalSum, ccMuRxOctetsNUcast, ccWlanQosWMEProfileVideoTxopsTime, ccPortalCfgRadioSet, ccPortalCfgRadioDesPowerInMW, ccPortalSumStatsShortTxAvgRetries100, ccPortalRxOctetsAt5pt5Mb, ccPortalBackgroundNoiseSumSquares, ccWlanTxRetriesPkts02, ccWlanTxRetriesPkts01, ccPortalSettingsWMEProfile, ccWlanTxOctetsUcast, ccPortalCfgRadioDefaultChannel, ccPortalTxRetriesPkts04, ccPortalIndex, ccPortalCfgRadioDefaultReset, ccMuVlanId, ccWlanRxOctetsAt6Mb, ccWlanCryptoKeyguardKey4, ccPortalSumStatsShortPp10kNUcastPkts, ccMuSumStatsShortPktsPerSec100, ccWlanName, ccWlanRxPktsAt6Mb, ccWlanQosWMEProfileBestEffortTxopsTime, ccPortalRxOctetsAt48Mb, ccPortalTxRetriesOctets13, ccPortalMeshAvailableBaseChannel, ccPortalTxRetriesPkts03, ccWlanQosWMEProfileVideoECwmax, ccPortalRxPktsAt2Mb, ccPortalSystemStatsProbeRespRetries2, ccPortalModeLegacy, ccWlanSumStatsLongThroughput, ccWlanAuthEapRadiusAcctMode, ccMuLastReason, ccPortalRadioRemapChannel, ccWlanSumStatsShortAvgMuSnr, ccWlanQosWMEProfileBestEffortECwmax, ccWlanQosWMEProfileVoiceECwmin, ccWlanTxRetriesOctetsFailed, ccPortalSumStatsShortPktsPerSecTx100, ccPortalSettingsDefaultDtimPrd2, ccPortalSettingsAntenna, ccPortalSettingsMeshAutoBaseSelection, ccPortalSumStatsShortPp10kTxWithRetries, ccMuTxOctetsAt36Mb, ccPortalTxOctetsAt54Mb, ccPortalCfgRadioDefaultPosPowerLevel, ccPortalRxPktsAt54Mb, ccWlanQosWMETrafficDestIp, ccWlanTxRetriesPkts09, ccWlanQosWMEProfileBestEffortECwmin, ccPortalAdoptionIndex, ccPortalSettingsDefaultIndex, ccMuRxPktsAt12Mb, ccPortalCfgRadioDefaultDesPowerLevel, ccPortalRxPktsAt18Mb, ccWlanMulticastAddr2, ccMuTxRetries02, ccWlanQosWMEProfileBackgroundECwmin, ccWlanTxRetriesOctets15, ccWlanTxOctetsAt2Mb, ccMuSumStatsLongPktsPerSec100, ccPortalRxOctetsAt2Mb, ccPortalCfgRadioPlacement, ccPortalRxPktsUcast, ccPortalSettingsDefaultSecBeacon, ccMuRxPktsAt5pt5Mb, ccMuTxOctetsAt18Mb, ccMuRxRssiNumPkts, ccMuTxRetriesOctets11, ccWlanRxPktsAt24Mb, ccWlanSumStatsShortPktsPerSec100, ccPortalTxRetriesOctets03, ccMuRxOctetsAt6Mb, ccWlanCryptoKeyguardKey3, ccWlanTxRetriesPkts08, ccWlanTxRetriesOctets08, ccPortalNumberOfEss, ccPortalTxRetriesOctets07, ccWlanAuthKerberosKdcServerIpR, ccPortalSigStatsSnrSumSquares, ccPortalSumStatsShortAvgBitSpeed, ccWlanTxRetriesPkts15, ccPortalBackgroundNoiseNumSamples, ccWlanSumStatsShortAvgMuSignal, ccWlanAuthEapRadius2Server, ccPortalSystemStatsProbeRespRetriesFailed, ccWlanCryptoKeyguardKey2, ccMuTxPktsAt22Mb, ccWlanQosWMEPriorityConversion, ccWlanTxPktsAt11Mb, ccWlanTxOctetsAt1Mb, ccPortalTxRetriesOctets11, ccMuSigStatsSnrSum, ccMuSumStatsShortAvgMuSignal, ccWlanTxPktsAt12Mb, ccPortalSettingsSipAllowedSessCnt, ccPortalSettingsMeshBaseChannel, ccWlanSumStatsShortSkip1, ccWlanRxPktsAt11Mb, ccMuTxOctetsAt6Mb, ccWlanCryptoWepKey4, ccMuSigStatsNoiseMostRecent, ccMuTxPktsAt24Mb, ccWlanTxRetriesPkts12, ccPortalSumStatsShortAvgMuNoise, ccPortalSumStatsLongPktsPerSec100, ccWlanTxRetriesOctets12, ccMuTxPktsAt9Mb, ccWlanTxOctetsAt54Mb, ccWlanSumStatsShortPp10kNUcastPkts, ccWlanSumStatsLongPp10kRxUndecrypt, ccWlanTxRetriesOctets05, ccMuTxRetries09, ccWlanRxOctetsAt24Mb, ccMuSumStatsShortNumPkts, ccWlanQosWMEProfileVoiceTxopsTime, ccPortalSettingsDtimPrd3, ccPortalTxOctetsAt2Mb, ccPortalSettingsDtimPrd2, ccWlanTxRetriesOctets10, ccWlanTxPktsAt36Mb, ccMuTxPktsAt2Mb, ccWlanRxPktsUcast, ccPortalSettingsRtsThresh, ccMuRxPktsAt11Mb, ccWlanSigStatsSnrWorst, ccMuPortalMac, ccWlanQosWMEWlanProfile, ccWlanWEPSharedMode, ccPortalRxOctetsAt36Mb, ccWlanQosWMETrafficDestPortEnd, ccMuRxOctetsAt48Mb, ccMuSymbolRogueApEna, ccWlanMulticastAddr1, ccPortalSumStatsLongAvgBitSpeed, ccPortalMeshPreferredBaseMac, ccPortalSumStatsLongThroughputRx, ccMuSigStatsNoiseBest, ccPortalSumStatsLongPktsPerSecRx100, ccMuTxRetries12, ccPortalRxPktsAt5pt5Mb, ccMuTxPktsAt18Mb, ccMuSigStatsSnrMostRecent, ccWlanAuthEapSyslogMode, ccWlanSumStatsLongPktsPerSecRx100, ccPortalRxOctetsNUcast, ccPortalRxPktsAt24Mb, ccWlanRxPktsAt9Mb, ccPortalSumStatsLongThroughputTx, ccPortalSigStatsSnrMostRecent, ccPortalSumStatsShortPp10kRfUtil, ccPortalSystemStatsBeaconsTx, ccMuTxRetries01, ccWlanTxRetriesPkts10, ccPortalAdoptionWlanPointers, ccPortalSystemStatsProbeRespRetriesNone, ccPortalSettingsSipRoamedSessCnt, ccWlanAuthEapServerMaxRetries, ccWlanAuthKerberosKdcServerIp2, ccWlanTxRetriesOctets13, ccPortalTxPktsAt11Mb, ccWlanSumStatsShortAvgBitSpeed, ccMuRxOctetsAt9Mb, ccWlanSumStatsLongPp10kDropped, ccWlanCryptoWpaTwoAllowTkipClient, ccWlanSumStatsLongAvgBitSpeed, ccMuSumStatsLongAvgMuNoise, ccMuSupportedRates, ccPortalPointerToAp, ccPortalTxPktsAt9Mb, ccPortalSettingsMeshBaseEnable, ccMuRxOctetsAt22Mb, ccWlanRxOctetsAt5pt5Mb, ccPortalCfgRadioReset, ccPortalTxOctetsAt22Mb, ccWlanAuthEapMuMaxRetries, ccWlanQosWMETrafficSrcPortStart, ccWlanCryptoWpaKeyToUse, ccPortalLastReason, ccPortalRxOctetsUcast, ccMuTxOctetsAt24Mb, ccWlanAuthKerberosPassword, ccPortalTxPktsAt1Mb, ccWlanSumStatsLongPp10kTxWithRetries, ccPortalTxOctetsAt24Mb, ccWlanMuAclDefault, ccMuRxOctetsAt18Mb, ccWlanCryptoKeyguardPasskey, ccWlanRxOctetsAt12Mb, ccPortalTxRetriesPkts11, ccWlanTxPktsAt24Mb, ccWlanSecBeacon, ccPortalCfgRadioDefaultPosChannel, ccPortalTxRetriesOctets06, ccMuRxPktsAt1Mb, ccMuSumStatsLongPp10kNUcastPkts, ccWlanRxPktsAt2Mb, ccWlanSigStatsSnrBest, ccWlanQosWMEProfileRowStatus, ccPortalSumStatsLongNumPkts, ccWlanAuthEapRadius1Server, ccWlanSigStatsSnrSum, ccPortalCfgRadioDefaultDesPlacement, ccWlanTxPktsAt54Mb, ccPortalSigStatsSnrWorst, ccPortalSigStatsSnrSum, ccPortalSumStatsShortThroughputRx, ccMuSigStatsSignalWorst, ccMuTxOctetsAt48Mb, ccWlanCryptoWpaTwoPassphrase, ccWlanEssid, ccWlanDisallowMuToMu, ccWlanSumStatsLongTotalMus, ccMuTxOctetsAt5pt5Mb, ccWanVpnEntry, ccWlanCryptoWpaTwoKey, ccPortalCfgRadioDefaultDesPowerInMW, ccPortalCfgRadioDefaultPowerLevel, ccWlanBwShareMode, ccWlanSumStatsShortThroughput, ccWlanSumStatsLongAvgMuSignal, ccWlanTxRetriesPkts07, ccWlanQosWMEProfileName, ccMuSumStatsLongThroughputTx, ccWlanTxOctetsAt36Mb, ccPortalSystemStatsProbeReqRxOctets, ccPortalSigStatsSignalSumSquares, ccMuSumStatsLongPp10kRxUndecrypt, ccWlanRxPktsAt5pt5Mb, ccPortalSumStatsLongPp10kTxWithRetries, ccMuSigStatsNumPkts, ccWlanCryptoUseWpa2, ccWlanSumStatsLongTimestamp, ccPortalSettingsName, ccMuRxUndecryptablePkts, ccMuSigStatsSnrBest, ccPortalSumStatsLongAvgMuSignal, ccMuWlanIndex, ccPortalTxRetriesPktsFailed, ccMuTxPktsAt54Mb, ccWlanQosWMETrafficSrcPortEnd = mibBuilder.importSymbols("SYMBOL-CC-WS2000-MIB", "ccPortalTxRetriesPkts08", "ccWlanRxPktsAt1Mb", "ccPortalRxUndecryptablePkts", "ccPortalSettingsMeshClientWlanIndex", "ccMuRxOctetsUcast", "ccMuRxPktsAt22Mb", "ccWlanTxPktsAt48Mb", "ccMuTxOctetsAt12Mb", "ccPortalSumStatsShortPktsPerSecRx100", "ccPortalTxPktsAt36Mb", "ccPortalTxOctetsAt18Mb", "ccMuTxRetriesOctets07", "ccPortalSettingsDefaultDtimPrd3", "ccWlanTxOctetsAt22Mb", "ccMuPortalIndex", "ccWlanTxPktsUcast", "ccMuRxPktsUcast", "ccPortalSettingsSipActiveSessCnt", "ccMuTxRetriesFailed", "ccMuTxRetries05", "ccPortalSumStatsShortPktsPerSec100", "ccWlanTxRetriesOctets09", "ccWlanAuthEapRadius1Port", "ccWlanCryptoWpaTwoKeyToUse", "ccPortalSigStatsNoiseSumSquares", "ccWlanRxUndecryptablePkts", "ccPortalSigStatsNoiseSum", "ccPortalRxOctetsAt6Mb", "ccPortalSumStatsShortAvgMuSnr", "ccWlanSumStatsLongPktsPerSec100", "ccPortalTxPktsUcast", "ccPortalTxRetriesPkts01", "ccPortalRxOctetsAt18Mb", "ccWlanTxRetriesPkts14", "ccMuRxOctetsAt1Mb", "ccWlanAuthEapReauthenticationPeriod", "ccMuRxOctetsAt54Mb", "ccPortalState", "ccPortalIpAddress", "ccWlanSigStatsSignalWorst", "ccPortalSettingsSecBeacon", "ccWlanMuAclRowStatus", "ccMuTxPktsAt5pt5Mb", "ccPortalSettingsDefaultBeaconInt", "ccMuSigStatsSignalSumSquares", "ccMuTxRetries03", "ccWlanTxPktsAt9Mb", "ccWlanQosWMEProfileVideoAifsn", "ccMuTxPktsAt11Mb", "ccWlanTxOctetsAt11Mb", "ccWlanVoicePrioritization", "ccWlanTxOctetsAt48Mb", "ccWlanTxRetriesPktsNone", "ccPortalSystemStatsProbeRespRetries3OrMore", "ccPortalTxRetriesPkts07", "ccPortalRxPktsAt12Mb", "ccPortalSumStatsShortNumPkts", "ccPortalSigStatsNoiseWorst", "ccWlanCryptoWpaKeyRotationInterval", "ccPortalRxPktsAt48Mb", "ccPortalAdoptionStartMac", "ccMuSumStatsLongAvgMuSnr", "ccPortalSumStatsLongPp10kRfUtil", "ccWlanTxRetriesOctets03", "ccWlanQosWMEProfileIndex", "ccMuSigStatsSignalBest", "ccMuTxRetriesOctets03", "ccPortalSigStatsSignalBest", "ccWlanCryptoWpaKey", "ccPortalTxRetriesOctets04", "ccWlanQosWMETrafficDestPortStart", "ccWlanTxRetriesPkts11", "ccPortalTxRetriesPktsNone", "ccWlanQosMonitorSent", "ccMuTxRetriesOctets08", "cc802dt1xPortAuthPass", "ccPortalSettingsDtimPrd", "ccWlanSumStatsShortTotalMus", "ccWlanSumStatsLongAvgMuSnr", "ccPortalSumStatsShortPp10kRxUndecrypt", "ccWlanSigStatsSnrSumSquares", "ccWlanTxRetriesPkts13", "ccMuPowerMode", "ccMuTxPktsAt12Mb", "ccPortalSettingsSipInActiveSessCnt", "ccPortalRxPktsAt1Mb", "ccPortalSumStatsLongTxAvgRetries100", "ccMuTxRetries08", "ccMuEncryptionMethod", "ccWlanTxRetriesOctets04", "ccMuTxPktsAt1Mb", "ccMuTxOctetsAt22Mb", "ccPortalCfgRadioPowerLevel", "ccWlanThresholdRate", "ccMuRxPktsAt6Mb", "ccPortalTxPktsAt6Mb", "ccMuSumStatsShortPp10kNUcastPkts", "ccMuRxPktsAt2Mb", "ccWlanCryptoKeyguardKey1", "ccMuTxRetriesOctets05", "ccPortalSumStatsShortPp10kDropped", "ccWlanWeight", "ccPortalSettingsBasicRates", "ccMuSumStatsShortAvgMuSnr", "ccMuSumStatsShortThroughputRx", "ccPortalOptions", "ccMuSigStatsNoiseSum", "ccMuRxRssiMostRecent", "ccPortalCfgRadioPowerInMW", "ccMuIsDataReady", "ccWlanRxOctetsNUcast", "ccWlanSumStatsShortNumPkts", "ccPortalSystemStatsBeaconsTxOctets", "ccWlanRxPktsNUcast", "ccMuRxOctetsAt24Mb", "ccPortalTxOctetsAt5pt5Mb", "ccPortalTxOctetsAt48Mb", "ccWlanEnable", "ccPortalTxRetriesPkts14", "ccPortalSigStatsSnrBest", "ccMuRxPktsAt36Mb", "ccMuMeshMode", "ccWlanTxRetriesOctetsNone", "ccPortalMeshAvailableBaseMac", "ccWlanTxRetriesPkts06", "ccMuTxRetriesOctets13", "ccWlanTxRetriesOctets14", "ccMuTxOctetsAt2Mb", "ccPortalTxRetriesOctets10", "ccWlanPortalsAdopted", "ccPortalSettingsDtimPrd4", "ccPortalSumStatsShortTotalMus", "ccMuRxOctetsAt36Mb", "ccMuSumStatsShortAvgMuNoise", "ccMuSumStatsLongAvgBitSpeed", "ccWlanTxPktsAt1Mb", "ccMuSumStatsLongPp10kDropped", "ccPortalTxPktsAt2Mb", "ccPortalTxOctetsAt1Mb", "ccPortalTxRetriesPkts12", "ccMuTxRetries11", "ccPortalSystemStatsProbeRespRetries1", "ccPortalCfgRadioDefaultPlacement", "ccWlanSigStatsNoiseSum", "ccPortalTxRetriesPkts13", "ccMuTxRetries04", "ccPortalTxOctetsAt6Mb", "ccMuIpAddr", "ccPortalTxRetriesPkts09", "ccWlanCryptoWpaTwoFastRoamPreAuth", "ccWlanAuthKerberosRealmName", "ccWlanCryptoWepKey2", "ccPortalCfgRadioDefaultChannelMode", "ccPortalSumStatsLongPp10kNUcastPkts", "ccWlanAuthEapRadiusAcctMuRetries", "ccMuRxOctetsAt2Mb", "ccWlanSumStatsLongNumPkts", "ccPortalTxRetriesOctets09", "ccMuRxOctetsAt12Mb", "ccMuRxRssiSumSquares", "ccPortalRadioType", "ccWlanSumStatsShortAvgMuNoise", "ccWlanSumStatsShortPktsPerSecRx100", "ccMuTxRetriesOctets06", "ccWlanQosWMEProfileVideoECwmin", "ccPortalSumStatsShortTimestamp", "ccWlanRxOctetsAt11Mb", "ccWlanQosWMEProfileBackgroundTxopsTime", "ccWlanCryptoWpaTwoFastRoamKeyCache", "ccWlanTxPktsAt5pt5Mb", "ccWlanQosWMETrafficDestMask", "ccPortalRxPktsAt9Mb", "ccPortalSumStatsLongPp10kRxUndecrypt", "ccWlanAuthEapServerTimeout", "ccPortalSigStatsSignalWorst", "ccMuTxRetriesNone", "ccPortalTxOctetsAt36Mb", "ccPortalSumStatsLongTimestamp", "ccWlanAuthEapMuQuietPeriod", "ccPortalSettingsDefaultPriWlan", "ccWlanAuthEapReauthenticationMaxRetries", "ccPortalSumStatsLongAvgMuSnr", "ccPortalSettingsBGMode", "ccWlanMuAclEndingMac", "ccMuRxOctetsAt5pt5Mb", "ccMuSumStatsLongTimestamp", "ccWlanTxRetriesOctets01", "ccPortalMeshPreferredBaseRowStatus", "ccMuTxRetries14", "ccMuTxOctetsAt1Mb", "ccWlanRxOctetsAt2Mb", "ccWlanAuthKerberosKdcPortR", "ccPortalTxPktsAt54Mb", "ccPortalCfgRadioDesPowerLevel", "ccPortalSumStatsLongPp10kTxMaxRetries", "ccPortalTxRetriesPkts10", "ccWlanCryptoWpaTwoKeyRotationInterval", "ccMuTxRetriesOctets14", "ccWlanRxPktsAt12Mb", "ccPortalSettingsSupportedRates", "ccWlanMuAclIndex", "ccWlanTxOctetsAt5pt5Mb", "ccPortalNumberOfBss", "cc802dt1xPortAuthSetAp300", "ccPortalRxOctetsAt9Mb", "ccMuLastMac", "ccPortalLocation", "ccMuSigStatsSnrWorst", "ccMuSumStatsShortTimestamp", "ccPortalTxOctetsUcast", "ccPortalRxPktsAt11Mb", "ccWlanTxRetriesOctets07", "ccPortalCfgRadioDesPlacement", "ccPortalTxRetriesOctetsNone", "ccMuTxOctetsAt9Mb", "ccPortalPointersToWlans", "ccWlanCryptoWpaTwoBcastKeyRotation", "ccWlanQosWMETrafficAccessCategory", "ccMuTxRetriesOctets02", "ccWlanAuthEapMuTxPeriod", "ccMuSigStatsSnrSumSquares", "ccWlanLastActivity", "ccWlanCryptoWpaBcastKeyRotation", "ccMuSumStatsShortTxAvgRetries100", "ccPortalSettingsDefaultShortPreamble", "ccPortalTxRetriesPkts02", "ccWlanAuthKerberosKdcServerIp1", "ccWlanTxPktsAt18Mb", "ccWlanRxOctetsAt48Mb", "ccWlanSumStatsLongPp10kNUcastPkts", "ccMuSumStatsLongPktsPerSecTx100", "ccWlanSumStatsLongSkip1", "ccWlanAuthKerberosUsername", "ccPortalSigStatsSignalMostRecent", "ccPortalSIPCacMode", "ccPortalCfgRadioPosChannel", "ccMuType", "ccWlanQosWMEProfileBackgroundECwmax", "ccWlanTxRetriesPkts03", "ccPortalBackgroundNoiseSum", "ccWlanMuAclStartingMac", "ccPortalAdoptionEndMac", "ccMuTxRetries10", "ccWlanRxOctetsAt54Mb", "ccMuSumStatsLongAvgMuSignal", "ccPortalAssociatedMus", "ccPortalAdoptionRowStatus", "ccPortalRxPktsAt36Mb", "ccMuTxRetries07", "ccMuSigStatsNoiseSumSquares", "ccWlanSumStatsShortPp10kRxUndecrypt", "ccPortalTxOctetsAt12Mb", "ccWlanAuthKerberosKdcPort1", "ccWlanAuthEapRadius2SharedSecret", "ccWlanAuthEapRadius2Port", "ccWlanRxPktsAt54Mb", "ccMuSumStatsLongThroughput", "ccPortalSigStatsNoiseMostRecent", "ccWlanSumStatsShortTxAvgRetries100", "ccPortalCfgRadioChannelMode", "ccWlanSumStatsShortPp10kTxWithRetries", "ccMuTxRetries06", "ccWlanIndex", "ccWlanQosWMETrafficSrcIp", "ccMuTxRetriesOctets04", "ccMuSumStatsLongPp10kTxWithRetries", "ccPortalLastMac", "ccWlanRxPktsAt18Mb", "ccMuWlanName", "ccMuTxRetries13", "ccMuTxRetriesOctets12", "ccPortalRxOctetsAt24Mb", "ccPortalSumStatsLongPktsPerSecTx100", "ccMuSumStatsLongThroughputRx", "ccWlanTxPktsAt22Mb", "ccMuSumStatsShortPktsPerSecTx100", "ccPortalTxOctetsAt9Mb", "ccWlanQosWMEProfileVoiceAifsn", "ccPortalTxRetriesOctets02", "ccWlanRxPktsAt22Mb", "ccPortalLastActivity", "ccWlanTxOctetsAt6Mb", "ccPortalSumStatsLongAvgMuNoise", "ccPortalRxOctetsAt12Mb", "ccMuSumStatsShortThroughputTx", "ccPortalTxRetriesOctets01", "ccPortalSettingsUniSpread", "ccPortalSettingsRevertAp", "ccPortalTxRetriesOctets08", "ccPortalCfgRadioChannel", "ccMuTxOctetsUcast", "ccMuRxPktsAt48Mb", "ccMuTxRetriesOctets09", "ccPortalSettingsDefaultUniSpread", "ccWlanSumStatsShortThroughputTx", "ccPortalSettingsBeaconInt", "ccMuTxRetriesOctetsFailed", "ccPortalSettingsMeshClientEnable", "ccMuSumStatsShortPktsPerSecRx100", "ccPortalSumStatsShortThroughput", "ccWlanSumStatsShortPp10kDropped", "ccPortalSigStatsSignalSum", "ccPortalTxRetriesOctets05", "ccWlanRxOctetsAt36Mb", "ccWlanRxOctetsAt9Mb", "ccWlanQosWMETrafficSrcMask", "ccMuSumStatsShortPp10kDropped", "ccWlanRxOctetsUcast", "ccWlanQosWMEProfileBestEffortAifsn", "ccPortalSumStatsShortAvgMuSignal", "ccMuTxPktsAt6Mb", "ccWlanTxOctetsAt12Mb", "ccWlanSumStatsLongAvgMuNoise", "ccMuRxPktsAt54Mb", "ccMuTxRetries15", "cc802dt1xPortAuthLogin", "ccWlanSumStatsShortTimestamp", "ccPortalCfgRadioDefaultDesChannel", "ccPortalRxPktsAt6Mb", "ccPortalRxOctetsAt22Mb", "ccPortalName", "ccPortalSettingsDetector", "ccMuSumStatsShortPp10kRxUndecrypt", "ccPortalLastAdoption", "ccMuMac", "ccPortalSettingsDefaultDtimPrd4", "ccMuLastPortal", "ccPortalLegacyMode", "ccWlanSumStatsLongPktsPerSecTx100", "ccWlanVlanId", "ccPortalSystemStatsProbeReqRx", "ccPortalTxRetriesPkts15", "ccPortalCfgRadioRemapChannel", "ccWlanSumStatsLongTxAvgRetries100", "ccWlanTxOctetsAt9Mb", "ccMuTxRetriesTotal", "ccMuSumStatsShortThroughput", "ccWlanAuthEapMuTimeout", "ccPortalSumStatsShortThroughputTx", "ccMuTxOctetsAt54Mb", "ccWlanTxPktsAt2Mb", "ccWlanTxOctetsAt24Mb", "ccMuTxRetriesOctets01", "ccSubnetEntry", "ccWlanAnswerBroadcastEss", "ccWlanMuInactivityTimeout", "ccMuSumStatsLongNumPkts", "ccWlanRxOctetsAt1Mb", "ccMuSigStatsSignalMostRecent", "ccMuSigStatsSignalSum", "ccPortalSettingsAdoptedWlan", "ccWlanQosMonitorDropped", "ccPortalCfgRadioDefaultPowerInMW", "ccWlanTxPktsAt6Mb", "ccWlanSigStatsSignalSumSquares", "ccWlanRxPktsAt48Mb", "ccPortalSettingsShortPreamble", "ccWlanCryptoWepKey1", "ccWlanAuthEapRadiusAcctMuTimeout", "ccWlanQosWMEProfileVoiceECwmax", "ccPortalSettingsMeshMaxClients", "ccPortalMeshAvailableBaseRssi", "ccPortalTxRetriesPkts05", "ccWlanSumStatsLongThroughputTx", "ccPortalTxPktsAt12Mb", "ccPortalSigStatsNoiseBest", "ccMuTxRetriesOctets15", "ccWlanSigStatsNoiseWorst", "ccPortalRxPktsNUcast", "ccPortalSumStatsLongThroughput", "ccMuSigStatsNoiseWorst", "ccWlanSumStatsLongThroughputRx", "ccWlanCryptoWpaPassphrase", "ccPortalMac", "ccMuTxRetriesMostRecent", "ccWlanTxRetriesPkts05", "ccWlanCryptoWepPassKey", "ccPortalSigStatsNumPkts", "ccPortalTxOctetsAt11Mb", "ccWlanQosWMETrafficIndex", "ccPortalSystemStatsProbeRespTxOctets", "ccWlanSigStatsNoiseSumSquares", "ccMuTxOctetsAt11Mb", "ccPortalRxOctetsAt1Mb", "ccWlanSigStatsNumPkts", "ccMuTxRetriesOctets10", "ccMuTxPktsAt48Mb", "ccPortalTxRetriesOctets12", "ccPortalSumStatsLongPp10kDropped", "ccWlanRxPktsAt36Mb", "ccPortalTxPktsAt22Mb", "ccMuRxPktsAt24Mb", "ccMuTxPktsUcast", "ccPortalTxPowerLevel", "ccMuRxOctetsAt11Mb", "ccWlanMuAclName", "ccWlanSumStatsShortThroughputRx", "ccWlanAuthEapReauthenticationEnable", "ccWlanCryptoWepKeyToUse", "ccWlanTxRetriesOctets02", "ccWlanTxRetriesOctets06", "ccPortalTxRetriesOctets15", "ccPortalSumStatsLongTotalMus", "ccPortalChannel", "ccMuTxPktsAt36Mb", "ccWlanRxOctetsAt18Mb", "ccPortalRxOctetsAt54Mb", "ccWlanTxRetriesPkts04", "ccPortalTxPktsAt5pt5Mb", "ccWlanAuthEapSyslogSeverIp", "ccPortalSettingsLocation", "ccMuRxPktsAt18Mb", "ccWlanCryptoWepKey3", "ccWlanSubnet", "ccPortalCfgRadioDesChannel", "ccPortalSettingsDefaultBGMode", "ccPortalSumStatsShortPp10kTxMaxRetries", "ccPortalTxRetriesPkts06", "ccPortalBackgroundNoiseWorst", "ccPortalTxRetriesOctets14", "ccMuSumStatsShortPp10kTxWithRetries", "ccMuTxRetriesOctetsNone", "ccPortalCfgRadioPosPowerLevel", "ccPortalCfgRadioDefaultSet", "ccPortalSettingsDefaultSupportedRates", "ccWlanTxRetriesOctets11", "ccPortalTxRetriesOctetsFailed", "ccWlanQosWMEProfileBackgroundAifsn", "ccMuRxRssiSum", "ccMuSumStatsLongTxAvgRetries100", "ccMuRxPktsNUcast", "ccWlanAuthEapRadius1SharedSecret", "ccWlanQosWMETrafficRowStatus", "ccPortalRxPktsAt22Mb", "ccPortalRxOctetsAt11Mb", "ccWlanCryptoKeyguardKeyToUse", "ccMuRxPktsAt9Mb", "ccPortalSettingsDefaultRtsThresh", "ccWlanTxRetriesPktsFailed", "ccPortalTxPktsAt18Mb", "ccWlanRxOctetsAt22Mb", "ccPortalSettingsDefaultDtimPrd", "ccPortalSettingsDefaultAntenna", "ccWlanSigStatsSignalBest", "ccPortalBackgroundNoiseBest", "ccPortalSettingsPriWlan", "ccMuSumStatsShortAvgBitSpeed", "ccWlanTxOctetsAt18Mb", "ccMuAuthenticationMethod", "ccWlanEncryption", "ccWlanAuthKerberosKdcPort2", "ccMuSumStatsLongPktsPerSecRx100", "ccWlanAuthentication", "ccWlanSigStatsNoiseBest", "ccMuRadioType", "ccMuLastActivity", "ccPortalTxPktsAt24Mb", "ccPortalTxPktsAt48Mb", "ccPortalSettingsDefaultBasicRates", "ccWlanSumStatsShortPktsPerSecTx100", "ccWlanSigStatsSignalSum", "ccMuRxOctetsNUcast", "ccWlanQosWMEProfileVideoTxopsTime", "ccPortalCfgRadioSet", "ccPortalCfgRadioDesPowerInMW", "ccPortalSumStatsShortTxAvgRetries100", "ccPortalRxOctetsAt5pt5Mb", "ccPortalBackgroundNoiseSumSquares", "ccWlanTxRetriesPkts02", "ccWlanTxRetriesPkts01", "ccPortalSettingsWMEProfile", "ccWlanTxOctetsUcast", "ccPortalCfgRadioDefaultChannel", "ccPortalTxRetriesPkts04", "ccPortalIndex", "ccPortalCfgRadioDefaultReset", "ccMuVlanId", "ccWlanRxOctetsAt6Mb", "ccWlanCryptoKeyguardKey4", "ccPortalSumStatsShortPp10kNUcastPkts", "ccMuSumStatsShortPktsPerSec100", "ccWlanName", "ccWlanRxPktsAt6Mb", "ccWlanQosWMEProfileBestEffortTxopsTime", "ccPortalRxOctetsAt48Mb", "ccPortalTxRetriesOctets13", "ccPortalMeshAvailableBaseChannel", "ccPortalTxRetriesPkts03", "ccWlanQosWMEProfileVideoECwmax", "ccPortalRxPktsAt2Mb", "ccPortalSystemStatsProbeRespRetries2", "ccPortalModeLegacy", "ccWlanSumStatsLongThroughput", "ccWlanAuthEapRadiusAcctMode", "ccMuLastReason", "ccPortalRadioRemapChannel", "ccWlanSumStatsShortAvgMuSnr", "ccWlanQosWMEProfileBestEffortECwmax", "ccWlanQosWMEProfileVoiceECwmin", "ccWlanTxRetriesOctetsFailed", "ccPortalSumStatsShortPktsPerSecTx100", "ccPortalSettingsDefaultDtimPrd2", "ccPortalSettingsAntenna", "ccPortalSettingsMeshAutoBaseSelection", "ccPortalSumStatsShortPp10kTxWithRetries", "ccMuTxOctetsAt36Mb", "ccPortalTxOctetsAt54Mb", "ccPortalCfgRadioDefaultPosPowerLevel", "ccPortalRxPktsAt54Mb", "ccWlanQosWMETrafficDestIp", "ccWlanTxRetriesPkts09", "ccWlanQosWMEProfileBestEffortECwmin", "ccPortalAdoptionIndex", "ccPortalSettingsDefaultIndex", "ccMuRxPktsAt12Mb", "ccPortalCfgRadioDefaultDesPowerLevel", "ccPortalRxPktsAt18Mb", "ccWlanMulticastAddr2", "ccMuTxRetries02", "ccWlanQosWMEProfileBackgroundECwmin", "ccWlanTxRetriesOctets15", "ccWlanTxOctetsAt2Mb", "ccMuSumStatsLongPktsPerSec100", "ccPortalRxOctetsAt2Mb", "ccPortalCfgRadioPlacement", "ccPortalRxPktsUcast", "ccPortalSettingsDefaultSecBeacon", "ccMuRxPktsAt5pt5Mb", "ccMuTxOctetsAt18Mb", "ccMuRxRssiNumPkts", "ccMuTxRetriesOctets11", "ccWlanRxPktsAt24Mb", "ccWlanSumStatsShortPktsPerSec100", "ccPortalTxRetriesOctets03", "ccMuRxOctetsAt6Mb", "ccWlanCryptoKeyguardKey3", "ccWlanTxRetriesPkts08", "ccWlanTxRetriesOctets08", "ccPortalNumberOfEss", "ccPortalTxRetriesOctets07", "ccWlanAuthKerberosKdcServerIpR", "ccPortalSigStatsSnrSumSquares", "ccPortalSumStatsShortAvgBitSpeed", "ccWlanTxRetriesPkts15", "ccPortalBackgroundNoiseNumSamples", "ccWlanSumStatsShortAvgMuSignal", "ccWlanAuthEapRadius2Server", "ccPortalSystemStatsProbeRespRetriesFailed", "ccWlanCryptoKeyguardKey2", "ccMuTxPktsAt22Mb", "ccWlanQosWMEPriorityConversion", "ccWlanTxPktsAt11Mb", "ccWlanTxOctetsAt1Mb", "ccPortalTxRetriesOctets11", "ccMuSigStatsSnrSum", "ccMuSumStatsShortAvgMuSignal", "ccWlanTxPktsAt12Mb", "ccPortalSettingsSipAllowedSessCnt", "ccPortalSettingsMeshBaseChannel", "ccWlanSumStatsShortSkip1", "ccWlanRxPktsAt11Mb", "ccMuTxOctetsAt6Mb", "ccWlanCryptoWepKey4", "ccMuSigStatsNoiseMostRecent", "ccMuTxPktsAt24Mb", "ccWlanTxRetriesPkts12", "ccPortalSumStatsShortAvgMuNoise", "ccPortalSumStatsLongPktsPerSec100", "ccWlanTxRetriesOctets12", "ccMuTxPktsAt9Mb", "ccWlanTxOctetsAt54Mb", "ccWlanSumStatsShortPp10kNUcastPkts", "ccWlanSumStatsLongPp10kRxUndecrypt", "ccWlanTxRetriesOctets05", "ccMuTxRetries09", "ccWlanRxOctetsAt24Mb", "ccMuSumStatsShortNumPkts", "ccWlanQosWMEProfileVoiceTxopsTime", "ccPortalSettingsDtimPrd3", "ccPortalTxOctetsAt2Mb", "ccPortalSettingsDtimPrd2", "ccWlanTxRetriesOctets10", "ccWlanTxPktsAt36Mb", "ccMuTxPktsAt2Mb", "ccWlanRxPktsUcast", "ccPortalSettingsRtsThresh", "ccMuRxPktsAt11Mb", "ccWlanSigStatsSnrWorst", "ccMuPortalMac", "ccWlanQosWMEWlanProfile", "ccWlanWEPSharedMode", "ccPortalRxOctetsAt36Mb", "ccWlanQosWMETrafficDestPortEnd", "ccMuRxOctetsAt48Mb", "ccMuSymbolRogueApEna", "ccWlanMulticastAddr1", "ccPortalSumStatsLongAvgBitSpeed", "ccPortalMeshPreferredBaseMac", "ccPortalSumStatsLongThroughputRx", "ccMuSigStatsNoiseBest", "ccPortalSumStatsLongPktsPerSecRx100", "ccMuTxRetries12", "ccPortalRxPktsAt5pt5Mb", "ccMuTxPktsAt18Mb", "ccMuSigStatsSnrMostRecent", "ccWlanAuthEapSyslogMode", "ccWlanSumStatsLongPktsPerSecRx100", "ccPortalRxOctetsNUcast", "ccPortalRxPktsAt24Mb", "ccWlanRxPktsAt9Mb", "ccPortalSumStatsLongThroughputTx", "ccPortalSigStatsSnrMostRecent", "ccPortalSumStatsShortPp10kRfUtil", "ccPortalSystemStatsBeaconsTx", "ccMuTxRetries01", "ccWlanTxRetriesPkts10", "ccPortalAdoptionWlanPointers", "ccPortalSystemStatsProbeRespRetriesNone", "ccPortalSettingsSipRoamedSessCnt", "ccWlanAuthEapServerMaxRetries", "ccWlanAuthKerberosKdcServerIp2", "ccWlanTxRetriesOctets13", "ccPortalTxPktsAt11Mb", "ccWlanSumStatsShortAvgBitSpeed", "ccMuRxOctetsAt9Mb", "ccWlanSumStatsLongPp10kDropped", "ccWlanCryptoWpaTwoAllowTkipClient", "ccWlanSumStatsLongAvgBitSpeed", "ccMuSumStatsLongAvgMuNoise", "ccMuSupportedRates", "ccPortalPointerToAp", "ccPortalTxPktsAt9Mb", "ccPortalSettingsMeshBaseEnable", "ccMuRxOctetsAt22Mb", "ccWlanRxOctetsAt5pt5Mb", "ccPortalCfgRadioReset", "ccPortalTxOctetsAt22Mb", "ccWlanAuthEapMuMaxRetries", "ccWlanQosWMETrafficSrcPortStart", "ccWlanCryptoWpaKeyToUse", "ccPortalLastReason", "ccPortalRxOctetsUcast", "ccMuTxOctetsAt24Mb", "ccWlanAuthKerberosPassword", "ccPortalTxPktsAt1Mb", "ccWlanSumStatsLongPp10kTxWithRetries", "ccPortalTxOctetsAt24Mb", "ccWlanMuAclDefault", "ccMuRxOctetsAt18Mb", "ccWlanCryptoKeyguardPasskey", "ccWlanRxOctetsAt12Mb", "ccPortalTxRetriesPkts11", "ccWlanTxPktsAt24Mb", "ccWlanSecBeacon", "ccPortalCfgRadioDefaultPosChannel", "ccPortalTxRetriesOctets06", "ccMuRxPktsAt1Mb", "ccMuSumStatsLongPp10kNUcastPkts", "ccWlanRxPktsAt2Mb", "ccWlanSigStatsSnrBest", "ccWlanQosWMEProfileRowStatus", "ccPortalSumStatsLongNumPkts", "ccWlanAuthEapRadius1Server", "ccWlanSigStatsSnrSum", "ccPortalCfgRadioDefaultDesPlacement", "ccWlanTxPktsAt54Mb", "ccPortalSigStatsSnrWorst", "ccPortalSigStatsSnrSum", "ccPortalSumStatsShortThroughputRx", "ccMuSigStatsSignalWorst", "ccMuTxOctetsAt48Mb", "ccWlanCryptoWpaTwoPassphrase", "ccWlanEssid", "ccWlanDisallowMuToMu", "ccWlanSumStatsLongTotalMus", "ccMuTxOctetsAt5pt5Mb", "ccWanVpnEntry", "ccWlanCryptoWpaTwoKey", "ccPortalCfgRadioDefaultDesPowerInMW", "ccPortalCfgRadioDefaultPowerLevel", "ccWlanBwShareMode", "ccWlanSumStatsShortThroughput", "ccWlanSumStatsLongAvgMuSignal", "ccWlanTxRetriesPkts07", "ccWlanQosWMEProfileName", "ccMuSumStatsLongThroughputTx", "ccWlanTxOctetsAt36Mb", "ccPortalSystemStatsProbeReqRxOctets", "ccPortalSigStatsSignalSumSquares", "ccMuSumStatsLongPp10kRxUndecrypt", "ccWlanRxPktsAt5pt5Mb", "ccPortalSumStatsLongPp10kTxWithRetries", "ccMuSigStatsNumPkts", "ccWlanCryptoUseWpa2", "ccWlanSumStatsLongTimestamp", "ccPortalSettingsName", "ccMuRxUndecryptablePkts", "ccMuSigStatsSnrBest", "ccPortalSumStatsLongAvgMuSignal", "ccMuWlanIndex", "ccPortalTxRetriesPktsFailed", "ccMuTxPktsAt54Mb", "ccWlanQosWMETrafficSrcPortEnd")
moduleid = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 11, 3, 1))
moduleid.setRevisions(('2009-12-30 13:36',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: moduleid.setRevisionsDescriptions(('apLoadCfg modified to support SFTP',))
if mibBuilder.loadTexts: moduleid.setLastUpdated('200912301336Z')
if mibBuilder.loadTexts: moduleid.setOrganization('Symbol WSD (Wireless Infrastructure Division, San Jose)')
if mibBuilder.loadTexts: moduleid.setContactInfo('Carl Mower cmower@symbol.com')
if mibBuilder.loadTexts: moduleid.setDescription(' ')
class SinglePointer(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class MultiPointer63(Bits):
    namedValues = NamedValues(("null", 0), ("referToEntry001", 1), ("referToEntry002", 2), ("referToEntry003", 3), ("referToEntry004", 4), ("referToEntry005", 5), ("referToEntry006", 6), ("referToEntry007", 7), ("referToEntry008", 8), ("referToEntry009", 9), ("referToEntry010", 10), ("referToEntry011", 11), ("referToEntry012", 12), ("referToEntry013", 13), ("referToEntry014", 14), ("referToEntry015", 15), ("referToEntry016", 16), ("referToEntry017", 17), ("referToEntry018", 18), ("referToEntry019", 19), ("referToEntry020", 20), ("referToEntry021", 21), ("referToEntry022", 22), ("referToEntry023", 23), ("referToEntry024", 24), ("referToEntry025", 25), ("referToEntry026", 26), ("referToEntry027", 27), ("referToEntry028", 28), ("referToEntry029", 29), ("referToEntry030", 30), ("referToEntry031", 31), ("referToEntry032", 32), ("referToEntry033", 33), ("referToEntry034", 34), ("referToEntry035", 35), ("referToEntry036", 36), ("referToEntry037", 37), ("referToEntry038", 38), ("referToEntry039", 39), ("referToEntry040", 40), ("referToEntry041", 41), ("referToEntry042", 42), ("referToEntry043", 43), ("referToEntry044", 44), ("referToEntry045", 45), ("referToEntry046", 46), ("referToEntry047", 47), ("referToEntry048", 48), ("referToEntry049", 49), ("referToEntry050", 50), ("referToEntry051", 51), ("referToEntry052", 52), ("referToEntry053", 53), ("referToEntry054", 54), ("referToEntry055", 55), ("referToEntry056", 56), ("referToEntry057", 57), ("referToEntry058", 58), ("referToEntry059", 59), ("referToEntry060", 60), ("referToEntry061", 61), ("referToEntry062", 62), ("referToEntry063", 63))

class MultiPointer255(Bits):
    namedValues = NamedValues(("null", 0), ("referToEntry001", 1), ("referToEntry002", 2), ("referToEntry003", 3), ("referToEntry004", 4), ("referToEntry005", 5), ("referToEntry006", 6), ("referToEntry007", 7), ("referToEntry008", 8), ("referToEntry009", 9), ("referToEntry010", 10), ("referToEntry011", 11), ("referToEntry012", 12), ("referToEntry013", 13), ("referToEntry014", 14), ("referToEntry015", 15), ("referToEntry016", 16), ("referToEntry017", 17), ("referToEntry018", 18), ("referToEntry019", 19), ("referToEntry020", 20), ("referToEntry021", 21), ("referToEntry022", 22), ("referToEntry023", 23), ("referToEntry024", 24), ("referToEntry025", 25), ("referToEntry026", 26), ("referToEntry027", 27), ("referToEntry028", 28), ("referToEntry029", 29), ("referToEntry030", 30), ("referToEntry031", 31), ("referToEntry032", 32), ("referToEntry033", 33), ("referToEntry034", 34), ("referToEntry035", 35), ("referToEntry036", 36), ("referToEntry037", 37), ("referToEntry038", 38), ("referToEntry039", 39), ("referToEntry040", 40), ("referToEntry041", 41), ("referToEntry042", 42), ("referToEntry043", 43), ("referToEntry044", 44), ("referToEntry045", 45), ("referToEntry046", 46), ("referToEntry047", 47), ("referToEntry048", 48), ("referToEntry049", 49), ("referToEntry050", 50), ("referToEntry051", 51), ("referToEntry052", 52), ("referToEntry053", 53), ("referToEntry054", 54), ("referToEntry055", 55), ("referToEntry056", 56), ("referToEntry057", 57), ("referToEntry058", 58), ("referToEntry059", 59), ("referToEntry060", 60), ("referToEntry061", 61), ("referToEntry062", 62), ("referToEntry063", 63), ("referToEntry064", 64), ("referToEntry065", 65), ("referToEntry066", 66), ("referToEntry067", 67), ("referToEntry068", 68), ("referToEntry069", 69), ("referToEntry070", 70), ("referToEntry071", 71), ("referToEntry072", 72), ("referToEntry073", 73), ("referToEntry074", 74), ("referToEntry075", 75), ("referToEntry076", 76), ("referToEntry077", 77), ("referToEntry078", 78), ("referToEntry079", 79), ("referToEntry080", 80), ("referToEntry081", 81), ("referToEntry082", 82), ("referToEntry083", 83), ("referToEntry084", 84), ("referToEntry085", 85), ("referToEntry086", 86), ("referToEntry087", 87), ("referToEntry088", 88), ("referToEntry089", 89), ("referToEntry090", 90), ("referToEntry091", 91), ("referToEntry092", 92), ("referToEntry093", 93), ("referToEntry094", 94), ("referToEntry095", 95), ("referToEntry096", 96), ("referToEntry097", 97), ("referToEntry098", 98), ("referToEntry099", 99), ("referToEntry100", 100), ("referToEntry101", 101), ("referToEntry102", 102), ("referToEntry103", 103), ("referToEntry104", 104), ("referToEntry105", 105), ("referToEntry106", 106), ("referToEntry107", 107), ("referToEntry108", 108), ("referToEntry109", 109), ("referToEntry110", 110), ("referToEntry111", 111), ("referToEntry112", 112), ("referToEntry113", 113), ("referToEntry114", 114), ("referToEntry115", 115), ("referToEntry116", 116), ("referToEntry117", 117), ("referToEntry118", 118), ("referToEntry119", 119), ("referToEntry120", 120), ("referToEntry121", 121), ("referToEntry122", 122), ("referToEntry123", 123), ("referToEntry124", 124), ("referToEntry125", 125), ("referToEntry126", 126), ("referToEntry127", 127), ("referToEntry128", 128), ("referToEntry129", 129), ("referToEntry130", 130), ("referToEntry131", 131), ("referToEntry132", 132), ("referToEntry133", 133), ("referToEntry134", 134), ("referToEntry135", 135), ("referToEntry136", 136), ("referToEntry137", 137), ("referToEntry138", 138), ("referToEntry139", 139), ("referToEntry140", 140), ("referToEntry141", 141), ("referToEntry142", 142), ("referToEntry143", 143), ("referToEntry144", 144), ("referToEntry145", 145), ("referToEntry146", 146), ("referToEntry147", 147), ("referToEntry148", 148), ("referToEntry149", 149), ("referToEntry150", 150), ("referToEntry151", 151), ("referToEntry152", 152), ("referToEntry153", 153), ("referToEntry154", 154), ("referToEntry155", 155), ("referToEntry156", 156), ("referToEntry157", 157), ("referToEntry158", 158), ("referToEntry159", 159), ("referToEntry160", 160), ("referToEntry161", 161), ("referToEntry162", 162), ("referToEntry163", 163), ("referToEntry164", 164), ("referToEntry165", 165), ("referToEntry166", 166), ("referToEntry167", 167), ("referToEntry168", 168), ("referToEntry169", 169), ("referToEntry170", 170), ("referToEntry171", 171), ("referToEntry172", 172), ("referToEntry173", 173), ("referToEntry174", 174), ("referToEntry175", 175), ("referToEntry176", 176), ("referToEntry177", 177), ("referToEntry178", 178), ("referToEntry179", 179), ("referToEntry180", 180), ("referToEntry181", 181), ("referToEntry182", 182), ("referToEntry183", 183), ("referToEntry184", 184), ("referToEntry185", 185), ("referToEntry186", 186), ("referToEntry187", 187), ("referToEntry188", 188), ("referToEntry189", 189), ("referToEntry190", 190), ("referToEntry191", 191), ("referToEntry192", 192), ("referToEntry193", 193), ("referToEntry194", 194), ("referToEntry195", 195), ("referToEntry196", 196), ("referToEntry197", 197), ("referToEntry198", 198), ("referToEntry199", 199), ("referToEntry200", 200), ("referToEntry201", 201), ("referToEntry202", 202), ("referToEntry203", 203), ("referToEntry204", 204), ("referToEntry205", 205), ("referToEntry206", 206), ("referToEntry207", 207), ("referToEntry208", 208), ("referToEntry209", 209), ("referToEntry210", 210), ("referToEntry211", 211), ("referToEntry212", 212), ("referToEntry213", 213), ("referToEntry214", 214), ("referToEntry215", 215), ("referToEntry216", 216), ("referToEntry217", 217), ("referToEntry218", 218), ("referToEntry219", 219), ("referToEntry220", 220), ("referToEntry221", 221), ("referToEntry222", 222), ("referToEntry223", 223), ("referToEntry224", 224), ("referToEntry225", 225), ("referToEntry226", 226), ("referToEntry227", 227), ("referToEntry228", 228), ("referToEntry229", 229), ("referToEntry230", 230), ("referToEntry231", 231), ("referToEntry232", 232), ("referToEntry233", 233), ("referToEntry234", 234), ("referToEntry235", 235), ("referToEntry236", 236), ("referToEntry237", 237), ("referToEntry238", 238), ("referToEntry239", 239), ("referToEntry240", 240), ("referToEntry241", 241), ("referToEntry242", 242), ("referToEntry243", 243), ("referToEntry244", 244), ("referToEntry245", 245), ("referToEntry246", 246), ("referToEntry247", 247), ("referToEntry248", 248), ("referToEntry249", 249), ("referToEntry250", 250), ("referToEntry251", 251), ("referToEntry252", 252), ("referToEntry253", 253), ("referToEntry254", 254)) + NamedValues(("referToEntry255", 255))

class DoActionNow(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class RadioType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("radio802dot11A", 1), ("radio802dot11B", 2), ("radio802dot11G", 3), ("radio802dot11FH", 4))

class Password(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class StaticRowEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PartsPer10k(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class ScaleBy100(Unsigned32):
    pass

class AbbrevRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 6))
    namedValues = NamedValues(("createAndGo", 4), ("destroy", 6))

class DoActionShowProgress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class HexPassword(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TransmitRate(Bits):
    namedValues = NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13))

class AllowedChannels(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165))
    namedValues = NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9), ("channel10", 10), ("channel11", 11), ("channel12", 12), ("channel13", 13), ("channel14", 14), ("channel36", 36), ("channel40", 40), ("channel44", 44), ("channel48", 48), ("channel52", 52), ("channel56", 56), ("channel60", 60), ("channel64", 64), ("channel100", 100), ("channel104", 104), ("channel108", 108), ("channel112", 112), ("channel116", 116), ("channel120", 120), ("channel124", 124), ("channel128", 128), ("channel132", 132), ("channel136", 136), ("channel140", 140), ("channel149", 149), ("channel153", 153), ("channel157", 157), ("channel161", 161), ("channel165", 165))

class RowStatus(TextualConvention, Integer32):
    description = "The RowStatus textual convention is used to manage the creation and deletion of conceptual rows, and is used as the value of the SYNTAX clause for the status column of a conceptual row (as described in Section 7.7.1 of [2].) The status column has six defined values: - `active', which indicates that the conceptual row is available for use by the managed device; - `notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - `notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - `createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - `createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - `destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except `notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: `notReady', `notInService' or `active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value `active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value `notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value `notReady'). NOTE WELL This textual convention may be used for a MIB table, irrespective of whether the values of that table's conceptual rows are able to be modified while it is active, or whether its conceptual rows must be taken out of service in order to be modified. That is, it is the responsibility of the DESCRIPTION clause of the status column to specify whether the status column must not be `active' in order for the value of some other column of the same conceptual row to be modified. If such a specification is made, affected columns may be changed by an SNMP set PDU if the RowStatus would not be equal to `active' either immediately before or after processing the PDU. In other words, if the PDU also contained a varbind that would change the RowStatus value, the column in question may be changed if the RowStatus was not equal to `active' as the PDU was received, or if the varbind sets the status to a value other than 'active'. Also note that whenever any elements of a row exist, the RowStatus column must also exist. To summarize the effect of having a conceptual row with a status column having a SYNTAX clause value of RowStatus, consider the following state diagram: STATE +--------------+-----------+-------------+------------- | A | B | C | D | |status col.|status column| |status column | is | is |status column ACTION |does not exist| notReady | notInService| is active --------------+--------------+-----------+-------------+------------- set status |noError ->D|inconsist- |inconsistent-|inconsistent- column to | or | entValue| Value| Value createAndGo |inconsistent- | | | | Value| | | --------------+--------------+-----------+-------------+------------- set status |noError see 1|inconsist- |inconsistent-|inconsistent- column to | or | entValue| Value| Value createAndWait |wrongValue | | | --------------+--------------+-----------+-------------+------------- set status |inconsistent- |inconsist- |noError |noError column to | Value| entValue| | active | | | | | | or | | | | | | | |see 2 ->D| ->D| ->D --------------+--------------+-----------+-------------+------------- set status |inconsistent- |inconsist- |noError |noError ->C column to | Value| entValue| | notInService | | | | | | or | | or | | | | | |see 3 ->C| ->C|wrongValue --------------+--------------+-----------+-------------+------------- set status |noError |noError |noError |noError column to | | | | destroy | ->A| ->A| ->A| ->A --------------+--------------+-----------+-------------+------------- set any other |see 4 |noError |noError |see 5 column to some| | | | value | | see 1| ->C| ->D --------------+--------------+-----------+-------------+------------- (1) goto B or C, depending on information available to the agent. (2) if other variable bindings included in the same PDU, provide values for all columns which are missing but required, then return noError and goto D. (3) if other variable bindings included in the same PDU, provide values for all columns which are missing but required, then return noError and goto C. (4) at the discretion of the agent, the return value may be either: inconsistentName: because the agent does not choose to create such an instance when the corresponding RowStatus instance does not exist, or inconsistentValue: if the supplied value is inconsistent with the state of some other MIB object's value, or noError: because the agent chooses to create the instance. If noError is returned, then the instance of the status column must also be created, and the new state is B or C, depending on the information available to the agent. If inconsistentName or inconsistentValue is returned, the row remains in state A. (5) depending on the MIB definition for the column/table, either noError or inconsistentValue may be returned. NOTE: Other processing of the set request may result in a response other than noError being returned, e.g., wrongValue, noCreation, etc. Conceptual Row Creation There are four potential interactions when creating a conceptual row: selecting an instance-identifier which is not in use; creating the conceptual row; initializing any objects for which the agent does not supply a default; and, making the conceptual row available for use by the managed device. Interaction 1: Selecting an Instance-Identifier The algorithm used to select an instance-identifier varies for each conceptual row. In some cases, the instance- identifier is semantically significant, e.g., the destination address of a route, and a management station selects the instance-identifier according to the semantics. In other cases, the instance-identifier is used solely to distinguish conceptual rows, and a management station without specific knowledge of the conceptual row might examine the instances present in order to determine an unused instance-identifier. (This approach may be used, but it is often highly sub-optimal; however, it is also a questionable practice for a naive management station to attempt conceptual row creation.) Alternately, the MIB module which defines the conceptual row might provide one or more objects which provide assistance in determining an unused instance-identifier. For example, if the conceptual row is indexed by an integer-value, then an object having an integer-valued SYNTAX clause might be defined for such a purpose, allowing a management station to issue a management protocol retrieval operation. In order to avoid unnecessary collisions between competing management stations, `adjacent' retrievals of this object should be different. Finally, the management station could select a pseudo-random number to use as the index. In the event that this index was already in use and an inconsistentValue was returned in response to the management protocol set operation, the management station should simply select a new pseudo-random number and retry the operation. A MIB designer should choose between the two latter algorithms based on the size of the table (and therefore the efficiency of each algorithm). For tables in which a large number of entries are expected, it is recommended that a MIB object be defined that returns an acceptable index for creation. For tables with small numbers of entries, it is recommended that the latter pseudo-random index mechanism be used. Interaction 2: Creating the Conceptual Row Once an unused instance-identifier has been selected, the management station determines if it wishes to create and activate the conceptual row in one transaction or in a negotiated set of interactions. Interaction 2a: Creating and Activating the Conceptual Row The management station must first determine the column requirements, i.e., it must determine those columns for which it must or must not provide values. Depending on the complexity of the table and the management station's knowledge of the agent's capabilities, this determination can be made locally by the management station. Alternately, the management station issues a management protocol get operation to examine all columns in the conceptual row that it wishes to create. In response, for each column, there are three possible outcomes: - a value is returned, indicating that some other management station has already created this conceptual row. We return to interaction 1. - the exception `noSuchInstance' is returned, indicating that the agent implements the object-type associated with this column, and that this column in at least one conceptual row would be accessible in the MIB view used by the retrieval were it to exist. For those columns to which the agent provides read-create access, the `noSuchInstance' exception tells the management station that it should supply a value for this column when the conceptual row is to be created. - the exception `noSuchObject' is returned, indicating that the agent does not implement the object-type associated with this column or that there is no conceptual row for which this column would be accessible in the MIB view used by the retrieval. As such, the management station can not issue any management protocol set operations to create an instance of this column. Once the column requirements have been determined, a management protocol set operation is accordingly issued. This operation also sets the new instance of the status column to `createAndGo'. When the agent processes the set operation, it verifies that it has sufficient information to make the conceptual row available for use by the managed device. The information available to the agent is provided by two sources: the management protocol set operation which creates the conceptual row, and, implementation-specific defaults supplied by the agent (note that an agent must provide implementation-specific defaults for at least those objects which it implements as read-only). If there is sufficient information available, then the conceptual row is created, a `noError' response is returned, the status column is set to `active', and no further interactions are necessary (i.e., interactions 3 and 4 are skipped). If there is insufficient information, then the conceptual row is not created, and the set operation fails with an error of `inconsistentValue'. On this error, the management station can issue a management protocol retrieval operation to determine if this was because it failed to specify a value for a required column, or, because the selected instance of the status column already existed. In the latter case, we return to interaction 1. In the former case, the management station can re-issue the set operation with the additional information, or begin interaction 2 again using `createAndWait' in order to negotiate creation of the conceptual row. NOTE WELL Regardless of the method used to determine the column requirements, it is possible that the management station might deem a column necessary when, in fact, the agent will not allow that particular columnar instance to be created or written. In this case, the management protocol set operation will fail with an error such as `noCreation' or `notWritable'. In this case, the management station decides whether it needs to be able to set a value for that particular columnar instance. If not, the management station re-issues the management protocol set operation, but without setting a value for that particular columnar instance; otherwise, the management station aborts the row creation algorithm. Interaction 2b: Negotiating the Creation of the Conceptual Row The management station issues a management protocol set operation which sets the desired instance of the status column to `createAndWait'. If the agent is unwilling to process a request of this sort, the set operation fails with an error of `wrongValue'. (As a consequence, such an agent must be prepared to accept a single management protocol set operation, i.e., interaction 2a above, containing all of the columns indicated by its column requirements.) Otherwise, the conceptual row is created, a `noError' response is returned, and the status column is immediately set to either `notInService' or `notReady', depending on whether it has sufficient information to make the conceptual row available for use by the managed device. If there is sufficient information available, then the status column is set to `notInService'; otherwise, if there is insufficient information, then the status column is set to `notReady'. Regardless, we proceed to interaction 3. Interaction 3: Initializing non-defaulted Objects The management station must now determine the column requirements. It issues a management protocol get operation to examine all columns in the created conceptual row. In the response, for each column, there are three possible outcomes: - a value is returned, indicating that the agent implements the object-type associated with this column and had sufficient information to provide a value. For those columns to which the agent provides read-create access (and for which the agent allows their values to be changed after their creation), a value return tells the management station that it may issue additional management protocol set operations, if it desires, in order to change the value associated with this column. - the exception `noSuchInstance' is returned, indicating that the agent implements the object-type associated with this column, and that this column in at least one conceptual row would be accessible in the MIB view used by the retrieval were it to exist. However, the agent does not have sufficient information to provide a value, and until a value is provided, the conceptual row may not be made available for use by the managed device. For those columns to which the agent provides read-create access, the `noSuchInstance' exception tells the management station that it must issue additional management protocol set operations, in order to provide a value associated with this column. - the exception `noSuchObject' is returned, indicating that the agent does not implement the object-type associated with this column or that there is no conceptual row for which this column would be accessible in the MIB view used by the retrieval. As such, the management station can not issue any management protocol set operations to create an instance of this column. If the value associated with the status column is `notReady', then the management station must first deal with all `noSuchInstance' columns, if any. Having done so, the value of the status column becomes `notInService', and we proceed to interaction 4. Interaction 4: Making the Conceptual Row Available Once the management station is satisfied with the values associated with the columns of the conceptual row, it issues a management protocol set operation to set the status column to `active'. If the agent has sufficient information to make the conceptual row available for use by the managed device, the management protocol set operation succeeds (a `noError' response is returned). Otherwise, the management protocol set operation fails with an error of `inconsistentValue'. NOTE WELL A conceptual row having a status column with value `notInService' or `notReady' is unavailable to the managed device. As such, it is possible for the managed device to create its own instances during the time between the management protocol set operation which sets the status column to `createAndWait' and the management protocol set operation which sets the status column to `active'. In this case, when the management protocol set operation is issued to set the status column to `active', the values held in the agent supersede those used by the managed device. If the management station is prevented from setting the status column to `active' (e.g., due to management station or network failure) the conceptual row will be left in the `notInService' or `notReady' state, consuming resources indefinitely. The agent must detect conceptual rows that have been in either state for an abnormally long period of time and remove them. It is the responsibility of the DESCRIPTION clause of the status column to indicate what an abnormally long period of time would be. This period of time should be long enough to allow for human response time (including `think time') between the creation of the conceptual row and the setting of the status to `active'. In the absense of such information in the DESCRIPTION clause, it is suggested that this period be approximately 5 minutes in length. This removal action applies not only to newly-created rows, but also to previously active rows which are set to, and left in, the notInService state for a prolonged period exceeding that which is considered normal for such a conceptual row. Conceptual Row Suspension When a conceptual row is `active', the management station may issue a management protocol set operation which sets the instance of the status column to `notInService'. If the agent is unwilling to do so, the set operation fails with an error of `wrongValue'. Otherwise, the conceptual row is taken out of service, and a `noError' response is returned. It is the responsibility of the DESCRIPTION clause of the status column to indicate under what circumstances the status column should be taken out of service (e.g., in order for the value of some other column of the same conceptual row to be modified). Conceptual Row Deletion For deletion of conceptual rows, a management protocol set operation is issued which sets the instance of the status column to `destroy'. This request may be made regardless of the current value of the status column (e.g., it is possible to delete conceptual rows which are either `notReady', `notInService' or `active'.) If the operation succeeds, then all instances associated with the conceptual row are immediately removed."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class DateAndTime(TextualConvention, OctetString):
    description = "A date-time specification. field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 1992-5-26,13:30:15.0,-4:0 Note that if only local time is known, then timezone information (fields 8-10) is not present."
    status = 'current'
    displayHint = '2d-1d-1d,1d:1d:1d.1d,1a1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class EthernetType(TextualConvention, OctetString):
    description = 'Represents Ethernet Types.'
    status = 'current'
    displayHint = '1x '
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

symbol = MibIdentifier((1, 3, 6, 1, 4, 1, 388))
wsd = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11))
sysoids = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 1))
ap5131 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 2))
if mibBuilder.loadTexts: ap5131.setStatus('current')
if mibBuilder.loadTexts: ap5131.setDescription('AP5131 with 1 WAN port, 1 LAN ports.')
ap5181 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 3))
if mibBuilder.loadTexts: ap5181.setStatus('current')
if mibBuilder.loadTexts: ap5181.setDescription('AP5131 with 1 WAN port, 1 LAN ports, 533Mhz processor speed.')
ap7131 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 4))
if mibBuilder.loadTexts: ap7131.setStatus('current')
if mibBuilder.loadTexts: ap7131.setDescription('AP7131')
ap7181 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 5))
if mibBuilder.loadTexts: ap7181.setStatus('current')
if mibBuilder.loadTexts: ap7181.setDescription('AP7181.')
abgAP = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3))
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 3))
dot1xPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1))
dot1xAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1), )
if mibBuilder.loadTexts: dot1xAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each port. An entry appears in this table for each port that may authenticate access to itself. ')
dot1xAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigEntry.setDescription('The configuration information for an Authenticator PAE. ')
dot1xPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dot1xPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: dot1xPaePortNumber.setDescription('The Port number associated with this Port.')
dot1xPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("intialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPaeState.setStatus('current')
if mibBuilder.loadTexts: dot1xPaeState.setDescription('The current value of the Authenticator PAE state machine. ')
dot1xAuthBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendAuthState.setDescription('The current state of the Backend Authentication state machine. ')
dot1xAuthAdminControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAdminControlledDirections.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAdminControlledDirections.setDescription('The current value of the administrative controlled directions parameter for the Port.')
dot1xAuthOperControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthOperControlledDirections.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthOperControlledDirections.setDescription('The current value of the operational controlled directions parameter for the Port. ')
dot1xAuthAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortStatus.setDescription('The current value of the controlled Port status parameter for the Port. ')
dot1xAuthAuthControlledPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortControl.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortControl.setDescription('The current value of the controlled Port control parameter for the Port. ')
dot1xAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine. ')
dot1xAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine. ')
dot1xAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine. ')
dot1xAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine. ')
dot1xAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine. ')
dot1xAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine. ')
dot1xAuthReAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine')
dot1xAuthKeyTxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthKeyTxEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthKeyTxEnabled.setDescription('The value of the keyTransmissionEnabled constant currently in use by the Authenticator PAE state machine.')
dot1xAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2), )
if mibBuilder.loadTexts: dot1xAuthStatsTable.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthStatsTable.setDescription('A table that contains the statistics objects for the Authenticator PAE associated with each Port. An entry appears in this table for each port that may authenticate access to itself. ')
dot1xAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthStatsEntry.setDescription('The statistics information for an Authenticator PAE. ')
dot1xAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator. ')
dot1xAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolFramesTx.setDescription('The number of EAPOL frames of any type that have been transmitted by this Authenticator. ')
dot1xAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolStartFramesRx.setDescription('The number of EAPOL Start frames that have been received by this Authenticator. ')
dot1xAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator. ')
dot1xAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator. ')
dot1xAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator. ')
dot1xAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator. ')
dot1xAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapolReqFramesTx.setDescription('The number of EAP Request frames (other than Rq/Id frames) that have been transmitted by this Authenticator. ')
dot1xAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognized.')
dot1xAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid. ')
dot1xAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frame. ')
dot1xAuthLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameSource.setDescription('The source MAC address carried in the most recently received EAPOL frame. ')
dot1xAuthDiagTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3), )
if mibBuilder.loadTexts: dot1xAuthDiagTable.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthDiagTable.setDescription('A table that contains the diagnostics objects for the Authenticator PAE associated with each Port. An entry appears in this table for each port that may authenticate access to itself. ')
dot1xAuthDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthDiagEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthDiagEntry.setDescription('The diagnostics information for an Authenticator PAE. ')
dot1xAuthEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEntersConnecting.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEntersConnecting.setDescription('Counts the number of times that the state machine transitions to the CONNECTING state from any other state. ')
dot1xAuthEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapLogoffsWhileConnecting.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEapLogoffsWhileConnecting.setDescription('Counts the number of times that the state machine transitions from CONNECTING to DISCONNECTED as a result of receiving an EAPOL-Logoff message. ')
dot1xAuthEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEntersAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthEntersAuthenticating.setDescription('Counts the number of times that the state machine transitions from CONNECTING to AUTHENTICATING, as a result of an EAP-Response/Identity message being received from the Supplicant. ')
dot1xAuthAuthSuccessWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthSuccessWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthSuccessWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to AUTHENTICATED, as a result of the Backend Authentication state machine indicating successful authentication of the Supplicant (authSuccess = TRUE).')
dot1xAuthAuthTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthTimeoutsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthTimeoutsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of the Backend Authentication state machine indicating authentication timeout (authTimeout = TRUE). ')
dot1xAuthAuthFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthFailWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthFailWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to HELD, as a result of the Backend Authentication state machine indicating authentication failure (authFail = TRUE). ')
dot1xAuthAuthReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of a reauthentication request (reAuthenticate = TRUE). ')
dot1xAuthAuthEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Start message being received from the Supplicant. ')
dot1xAuthAuthEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Logoff message being received from the Supplicant. ')
dot1xAuthAuthReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of a reauthentication request (reAuthenticate = TRUE). ')
dot1xAuthAuthEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of an EAPOL-Start message being received from the Supplicant. ')
dot1xAuthAuthEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to DISCONNECTED, as a result of an EAPOL-Logoff message being received from the Supplicant. ')
dot1xAuthBackendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendResponses.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendResponses.setDescription('Counts the number of times that the state machine sends an initial Access-Request packet to the Authentication server (i.e., executes sendRespToServer on entry to the RESPONSE state). Indicates that the Authenticator attempted communication with the Authentication Server. ')
dot1xAuthBackendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendAccessChallenges.setDescription('Counts the number of times that the state machine receives an initial Access-Challenge packet from the Authentication server (i.e., aReq becomes TRUE, causing exit from the RESPONSE state). Indicates that the Authentication Server has communication with the Authenticator. ')
dot1xAuthBackendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendOtherRequestsToSupplicant.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendOtherRequestsToSupplicant.setDescription('Counts the number of times that the state machine sends an EAP-Request packet (other than an Identity, Notification, Failure or Success message) to the Supplicant (i.e., executes txReq on entry to the REQUEST state). Indicates that the Authenticator chose an EAP-method.')
dot1xAuthBackendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendNonNakResponsesFromSupplicant.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendNonNakResponsesFromSupplicant.setDescription("Counts the number of times that the state machine receives a response from the Supplicant to an initial EAP-Request, and the response is something other than EAP-NAK (i.e., rxResp becomes TRUE, causing the state machine to transition from REQUEST to RESPONSE, and the response is not an EAP-NAK). Indicates that the Supplicant can respond to the Authenticator's chosen EAP-method. ")
dot1xAuthBackendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendAuthSuccesses.setDescription('Counts the number of times that the state machine receives an EAP-Success message from the Authentication Server (i.e., aSuccess becomes TRUE, causing a transition from RESPONSE to SUCCESS). Indicates that the Supplicant has successfully authenticated to the Authentication Server. ')
dot1xAuthBackendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthFails.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthBackendAuthFails.setDescription('Counts the number of times that the state machine receives an EAP-Failure message from the Authentication Server (i.e., aFail becomes TRUE, causing a transition from RESPONSE to FAIL). Indicates that the Supplicant has not authenticated to the Authentication Server. ')
dot1xAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4), )
if mibBuilder.loadTexts: dot1xAuthSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionStatsTable.setDescription('A table that contains the session statistics objects for the Authenticator PAE associated with each Port. An entry appears in this table for each port that may authenticate access to itself. ')
dot1xAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionStatsEntry.setDescription('The session statistics information for an Authenticator PAE. This shows the current values being collected for each session that is still in progress, or the final values for the last valid session on each port where there is no session currently active. ')
dot1xAuthSessionOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionOctetsRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionOctetsRx.setDescription('The number of octets received in user data frames on this Port during the session. ')
dot1xAuthSessionOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionOctetsTx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionOctetsTx.setDescription('The number of octets transmitted in user data frames on this Port during the session. ')
dot1xAuthSessionFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionFramesRx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionFramesRx.setDescription('The number of user data frames received on this Port during the session. ')
dot1xAuthSessionFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionFramesTx.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionFramesTx.setDescription('The number of user data frames transmitted on this Port during the session. ')
dot1xAuthSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionId.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionId.setDescription('A unique identifier for the session, in the form of a printable ASCII string of at least three characters. ')
dot1xAuthSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionAuthenticMethod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionAuthenticMethod.setDescription('The authentication method used to establish the session. ')
dot1xAuthSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionTime.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionTime.setDescription('The duration of the session in seconds. ')
dot1xAuthSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionTerminateCause.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionTerminateCause.setDescription('The reason for the session termination.')
dot1xAuthSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionUserName.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSessionUserName.setDescription('The User-Name representing the identity of the Supplicant PAE. ')
apRf = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4))
apRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1))
apRadioSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1), )
if mibBuilder.loadTexts: apRadioSettingsTable.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsTable.setDescription('Use apRadioSettingsTable to view and set the properties of the radios. ')
apRadioSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsEntry.setDescription(' ')
apRadioSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioSettingsIndex.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsIndex.setDescription(' Simple index.')
apRadioSettingsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsEnable.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsEnable.setDescription('Row enable.')
apRadioSettingsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aRadio", 1), ("bgRadio", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBand.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBand.setDescription("In a system that contains only 1 radio, Radio 1 can be configured for 802.11b/g or 802.11a. In a system that contains 2 radios, Radio 1 will be configured for 802.11b/g and Radio 2 will be configured for 802.11a regardless of the user setting. One will get a set-fail if attempts to make a change. Note that 'aRadio' means an 802.11a standard radio that uses the 5.0 GHz band, and, 'bgRadio' means an 802.11b and 802.11g standards radio that use the 2.4 GHz band. An 802.11n radio can use both 2.4 GHz and/or 5.0 GHz bands, so, both these values are applicable for an 802.11n radio.")
apRadioSettingsPointersToWlans = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 4), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsPointersToWlans.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsPointersToWlans.setDescription('This scalar points to multiple WLANs that use this radio.')
apRadioSettingsName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("radio802dt11a", 1), ("radio802dt11bg", 2), ("radio802dt11n2400MHz", 3), ("radio802dt11n5000MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsName.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsName.setDescription("Name of Radio. Note that 'radio802dt11a' means an 802.11a standard radio that uses the 5GHz band, and, 'radio802dt11bg' means an 802.11b and 802.11g standards radio that use the 2.4 GHz band. An 802.11n radio can use both 2.4 GHz and/or 5.0 GHz bands, so, both these values are applicable for an 802.11n radio.")
apRadioSettingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsMacAddress.setDescription('MAC address of the radio.')
apRadioSettingsAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDiversity", 1), ("primaryOnly", 2), ("secondaryOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsAntenna.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsAntenna.setDescription('The antenna diversity setting for the radio. Note that this setting does not apply for an 802.11n radio.')
apRadioSettingsShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsShortPreamble.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsShortPreamble.setDescription('Enable support for Short Preamble when MUs associate with the Access Point. Enabling Short Preamble may cause incompatibility with some older clients.')
apRadioSettingsRtsThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsRtsThresh.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsRtsThresh.setDescription('The Request To Send(RTS) threshold(in bytes) for use by the radio for the WLAN.')
apRadioSettingsBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBeaconInt.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBeaconInt.setDescription('Specify a beacon interval in units of 1,000 microseconds (K-us). This is a multiple of the DTIM (apRadioSettingDtimPrd) value, for example, 100 : 10. ')
apRadioSettingsDtimPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsDtimPrd.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsDtimPrd.setDescription("Specify a period for the Delivery Traffic Indication Message (DTIM). This is a divisor of the beacon interval (in milliseconds), for example, 10 : 100. Note that this object's status is current for 802.11n radios, whereas it is obsolete for a/b/g radios.")
apRadioSettingsBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBasicRates.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBasicRates.setDescription('List of basic rates for the radio. Note that this setting does not apply for an 802.11n radio.')
apRadioSettingsSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsSupportedRates.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsSupportedRates.setDescription('List of supported rates for the radio.')
apRadioSettingsBGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modeBandG", 1), ("modeG", 2), ("modeB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBGMode.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBGMode.setDescription('Radio mode. Note that this setting does not apply for an 802.11n radio. Please use the object apRadioNSettingsMode under apRadioNSettingsTable for 802.11n radios.')
apRadioSettingsBackgroundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundMode.setStatus('obsolete')
if mibBuilder.loadTexts: apRadioSettingsBackgroundMode.setDescription('This QOS parameter is used by the AP for the Background access category.')
apRadioSettingsBackgroundCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundCwMin.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBackgroundCwMin.setDescription('This QOS parameter is used by the AP for the Background access category.')
apRadioSettingsBackgroundCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundCwMax.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBackgroundCwMax.setDescription('This QOS parameter is used by the AP for the Background access category.')
apRadioSettingsBackgroundAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundAifsn.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBackgroundAifsn.setDescription('This QOS parameter is used by the AP for the Background access category.')
apRadioSettingsBackgroundTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBackgroundTxopsTime.setDescription('This QOS parameter is used by the AP for the Background access category.')
apRadioSettingsBackgroundTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsBackgroundTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBackgroundTxopsTimeInMS.setDescription('This QOS parameter is used by the AP for the Background access category.')
apRadioSettingsBestEffortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortMode.setStatus('obsolete')
if mibBuilder.loadTexts: apRadioSettingsBestEffortMode.setDescription('This QOS parameter is used by the AP for the Best Effort access category.')
apRadioSettingsBestEffortCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortCwMin.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBestEffortCwMin.setDescription('This QOS parameter is used by the AP for the Best Effort access category.')
apRadioSettingsBestEffortCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortCwMax.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBestEffortCwMax.setDescription('This QOS parameter is used by the AP for the Best Effort access category.')
apRadioSettingsBestEffortAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortAifsn.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBestEffortAifsn.setDescription('This QOS parameter is used by the AP for the Best Effort access category.')
apRadioSettingsBestEffortTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBestEffortTxopsTime.setDescription('This QOS parameter is used by the AP for the Best Effort access category.')
apRadioSettingsBestEffortTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsBestEffortTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsBestEffortTxopsTimeInMS.setDescription('This QOS parameter is used by the AP for the Best Effort access category.')
apRadioSettingsVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoMode.setStatus('obsolete')
if mibBuilder.loadTexts: apRadioSettingsVideoMode.setDescription('This QOS parameter is used by the AP for the Video access category.')
apRadioSettingsVideoCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoCwMin.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVideoCwMin.setDescription('This QOS parameter is used by the AP for the Video access category.')
apRadioSettingsVideoCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoCwMax.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVideoCwMax.setDescription('This QOS parameter is used by the AP for the Video access category.')
apRadioSettingsVideoAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoAifsn.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVideoAifsn.setDescription('This QOS parameter is used by the AP for the Video access category.')
apRadioSettingsVideoTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVideoTxopsTime.setDescription('This QOS parameter is used by the AP for the Video access category.')
apRadioSettingsVideoTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsVideoTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVideoTxopsTimeInMS.setDescription('This QOS parameter is used by the AP for the Video access category.')
apRadioSettingsVoiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceMode.setStatus('obsolete')
if mibBuilder.loadTexts: apRadioSettingsVoiceMode.setDescription('This QOS parameter is used by the AP for the Voice access category.')
apRadioSettingsVoiceCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceCwMin.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVoiceCwMin.setDescription('This QOS parameter is used by the AP for the Voice access category.')
apRadioSettingsVoiceCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceCwMax.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVoiceCwMax.setDescription('This QOS parameter is used by the AP for the Voice access category.')
apRadioSettingsVoiceAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceAifsn.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVoiceAifsn.setDescription('This QOS parameter is used by the AP for the Voice access category.')
apRadioSettingsVoiceTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVoiceTxopsTime.setDescription('This QOS parameter is used by the AP for the Voice access category.')
apRadioSettingsVoiceTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsVoiceTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsVoiceTxopsTimeInMS.setDescription('This QOS parameter is used by the AP for the Voice access category.')
apRadioSettingsE2BMapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsE2BMapMessage.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsE2BMapMessage.setDescription('Global ESS to BSS mapping status message.')
apRadioSettingsERPProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsERPProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsERPProtectionStatus.setDescription('Whether ERP Protection is ON or OFF.')
apRadioSettingsWMMQosParam = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("manual", 1), ("wifi11agn", 2), ("wifi11b", 3), ("default11agn", 4), ("default11b", 5), ("voice11agn", 6), ("voice11b", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsWMMQosParam.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsWMMQosParam.setDescription('Pre-Programmed WMM QOS Parameters. manual - Modify parameters wifi11agn - WiFi 11a/11g/11n defaults wifi11b - WiFi 11b defaults default11agn - Symbol 11a/11g/11n defaults default11b - Symbol 11b defaults voice11agn - Symbol 11a/11g/11n voice params voice11b - Symbol 11b voice params')
apRadioSettingsQBSSChannelBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsQBSSChannelBeaconInt.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsQBSSChannelBeaconInt.setDescription('Channel Utilization Beacon Intervals for QBSS Load Element (802.11e)')
apRadioSettingsQBSSLoadElementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsQBSSLoadElementMode.setStatus('current')
if mibBuilder.loadTexts: apRadioSettingsQBSSLoadElementMode.setDescription('Enable/Disable QBSS Load Element.')
apRadioCfgTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2), )
if mibBuilder.loadTexts: apRadioCfgTable.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgTable.setDescription('Use apRadioCfgTable to view and set the radio properties of the Access Points. The process can be broken down into the following steps: 1. Set apRadioCfgReset to TRUE. 2. Set apRadioCfgDesPlacement 3. Get apRadioCfgPosChannel 4. Set apRadioCfgDesChannel 5. Get apRadioCfgPosPowerLevel 6. Set apRadioCfgDesPowerLevel 7. Get apRadioCfgPowerInMW 8. Set and pull progress of apRadioCfgSet 9. Validate the configuration has been set by getting apRadioCfgPlacement apRadioCfgChannel apRadioCfgPowerLevel ')
apRadioCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioCfgEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgEntry.setDescription(' ')
apRadioCfgChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("userSelect", 1), ("autoSelect", 2), ("uniformSpreading", 3), ("autoSelect40", 4), ("uniformSpreading40", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgChannelMode.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgChannelMode.setDescription('Channel Mode for the Radio. The user is allowed to enter the apRadioDesChannel value only if the Channel Mode is Set to userSelect. The values autoSelect40(4) and uniformSpreading40(5) are applicable only in case of 802.11n radios.')
apRadioCfgDesPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgDesPlacement.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgDesPlacement.setDescription('The desired placement for radio.')
apRadioCfgPosChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("bchannel12", 12), ("bchannel13", 13), ("bchannel14", 14), ("achannel36", 15), ("achannel40", 16), ("achannel44", 17), ("achannel48", 18), ("achannel52", 19), ("achannel56", 20), ("achannel60", 21), ("achannel64", 22), ("achannel149", 23), ("achannel153", 24), ("achannel157", 25), ("achannel161", 26), ("achannel165", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPosChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgPosChannel.setDescription('The possible channels that can be set when placement = apRadioCfgDesPlacement.')
apRadioCfgDesChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("bchannel12", 12), ("bchannel13", 13), ("bchannel14", 14), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161), ("achannel165", 165)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgDesChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgDesChannel.setDescription('The desired channel for radio. Please do not use this object for an access point that supports 802.11n radio. Use apRadioNCfgDesChannel instead.')
apRadioCfgPosPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPosPowerLevel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgPosPowerLevel.setDescription('The max possible power level (dBm) that can be set when channel= apRadioCfgDesChannel. The range is 4 to 20 dBm.')
apRadioCfgDesPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgDesPowerLevel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgDesPowerLevel.setDescription('The desired power level (dBm) for radio. The following power levels are available 4dBm=3mW, 5dBm=3mW, 6dBm=4mW, 7dBm=5mW, 8dBm=6mW, 9dBm=8mW, 10dBm=10mW, 11dBm=13mW, 12dBm=16mW, 13dBm=20mW, 14dBm=25mW, 15dBm=32mW, 16dBm=40mW, 17dBm=50mW, 18dBm=63mW, 19dBm=79mW, 20dBm=100mW Note: Power level allowed depends on radio type, channel and country of operation.')
apRadioCfgDesPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgDesPowerInMW.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgDesPowerInMW.setDescription('apRadioCfgDesPowerLevel in mW.')
apRadioCfgSet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 8), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgSet.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgSet.setDescription('Validate values in apRadioCfgDes_ fields. If it is a valid combination, configure the switch with this combination and set apRadioCfg_ to these values.')
apRadioCfgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 9), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgReset.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgReset.setDescription('Reset the following OIDs. apRadioCfgDesPlacement apRadioCfgDesChannel apRadioCfgDesPowerLevel apRadioCfgPosChannel apRadioCfgPosPowerLevel apRadioCfgPowerInMW ')
apRadioCfgPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPlacement.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgPlacement.setDescription('The placement configuration for radio.')
apRadioCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161), ("achannel165", 165)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgChannel.setDescription('The channel configuration for radio.')
apRadioCfgPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPowerLevel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgPowerLevel.setDescription('The power level (dBm) configuration for radio.')
apRadioCfgPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPowerInMW.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgPowerInMW.setDescription('apRadioCfgPowerLevel in mW.')
apRadioCfgRfFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wlan", 1), ("wips", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgRfFunction.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgRfFunction.setDescription('WLAN or WIPS sensor operation mode for the Radio.')
apRadioCfgExceptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 15), Bits().clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("bchannel12", 12), ("bchannel13", 13), ("bchannel14", 14), ("achannel36", 15), ("achannel40", 16), ("achannel44", 17), ("achannel48", 18), ("achannel52", 19), ("achannel56", 20), ("achannel60", 21), ("achannel64", 22), ("achannel149", 23), ("achannel153", 24), ("achannel157", 25), ("achannel161", 26), ("achannel165", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgExceptionChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioCfgExceptionChannel.setDescription('The channels that will be excluded from scanning when channelMode is autoSelect.')
apRadioWlanBssTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 3), )
if mibBuilder.loadTexts: apRadioWlanBssTable.setStatus('current')
if mibBuilder.loadTexts: apRadioWlanBssTable.setDescription('Table of BSSIDs mapped to WLANs.')
apRadioWlanBssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apRadioWlanBssEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioWlanBssEntry.setDescription(' ')
apRadioWlanBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioWlanBssid.setStatus('current')
if mibBuilder.loadTexts: apRadioWlanBssid.setDescription('BSSID assigned to this particular WLAN.')
apRadioBssTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4), )
if mibBuilder.loadTexts: apRadioBssTable.setStatus('current')
if mibBuilder.loadTexts: apRadioBssTable.setDescription("Use apRadioBssTable to view and set the properties of the Bss's. ")
apRadioBssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioBssIndex"))
if mibBuilder.loadTexts: apRadioBssEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioBssEntry.setDescription(' ')
apRadioBssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioBssIndex.setStatus('current')
if mibBuilder.loadTexts: apRadioBssIndex.setDescription(' ')
apRadioBssPrimaryWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioBssPrimaryWlan.setStatus('current')
if mibBuilder.loadTexts: apRadioBssPrimaryWlan.setDescription('Primary WLAN used by the AP to send beacons.')
apRadioBssDtimPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioBssDtimPrd.setStatus('current')
if mibBuilder.loadTexts: apRadioBssDtimPrd.setDescription('Specify a period for the Delivery Traffic Indication Message (DTIM). This is a divisor of the beacon interval (in milliseconds), for example, 10 : 100. Note that BSS DTIM period is not supported for 802.11n radios.')
apRadioE2BMapStatusTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5), )
if mibBuilder.loadTexts: apRadioE2BMapStatusTable.setStatus('current')
if mibBuilder.loadTexts: apRadioE2BMapStatusTable.setDescription('The table describes the ESS to BSS mapping status.')
apRadioE2BMapStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apRadioE2BMapStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioE2BMapStatusEntry.setDescription(' ')
apRadioE2BMapStatusBcMcEncCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("open", 1), ("wep64", 2), ("wep128", 3), ("keyguard", 4), ("wpaTkip", 5), ("wpa2Ccmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioE2BMapStatusBcMcEncCipher.setStatus('current')
if mibBuilder.loadTexts: apRadioE2BMapStatusBcMcEncCipher.setDescription('Broadcast/Mulitcast Encryption cipher based on the ESS to BSS mapping.')
apRadioE2BMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioE2BMapStatus.setStatus('current')
if mibBuilder.loadTexts: apRadioE2BMapStatus.setDescription('ESS to BSS map status.')
apRadioE2BMapStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioE2BMapStatusMessage.setStatus('current')
if mibBuilder.loadTexts: apRadioE2BMapStatusMessage.setDescription('ESS to BSS map status message.')
apRadioMesh = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6))
apRadioMeshTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1), )
if mibBuilder.loadTexts: apRadioMeshTable.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshTable.setDescription('Table for MESH configuration for Radio.')
apRadioMeshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioMeshEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshEntry.setDescription(' ')
apRadioMeshBaseBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshBaseBridgeMode.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshBaseBridgeMode.setDescription('MESH base bridge mode for radio.')
apRadioMeshMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshMaxClients.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshMaxClients.setDescription('Maximum number of MESH client bridges.')
apRadioMeshClientBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshClientBridgeMode.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshClientBridgeMode.setDescription('MESH client bridge mode for radio.')
apRadioMeshWlanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 4), SinglePointer().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshWlanPtr.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshWlanPtr.setDescription('MESH client bridge WLAN. For the value 0 there is no WLAN assigned for Client Bridge connection.')
apRadioMeshConnAutoSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshConnAutoSelect.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshConnAutoSelect.setDescription('Enable/Disable the MESH Auto Connection Select Mode.')
apRadioMeshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("uplinkDetect", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshTimeout.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshTimeout.setDescription('Mesh Timeout Status.')
apRadioMeshTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshTimeoutValue.setDescription('If Mesh is not connected after Timeout period (in seconds), stop the AP from sending beacons.')
apRadioMeshAvailableConnTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2), )
if mibBuilder.loadTexts: apRadioMeshAvailableConnTable.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshAvailableConnTable.setDescription('Table of Available Base Bridge MESH connections.')
apRadioMeshAvailableConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioMeshAvailableConnIndex"))
if mibBuilder.loadTexts: apRadioMeshAvailableConnEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshAvailableConnEntry.setDescription(' ')
apRadioMeshAvailableConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioMeshAvailableConnIndex.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshAvailableConnIndex.setDescription('Simple Index.')
apRadioMeshAvailableConnMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioMeshAvailableConnMac.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshAvailableConnMac.setDescription('Mac Address of Available Base Bridge.')
apRadioMeshAvailableConnChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioMeshAvailableConnChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshAvailableConnChannel.setDescription('Channel of Available Base Bridge.')
apRadioMeshAvailableConnRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioMeshAvailableConnRssi.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshAvailableConnRssi.setDescription('RSSI value of Available Base Bridge.')
apRadioMeshPreferredConnTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3), )
if mibBuilder.loadTexts: apRadioMeshPreferredConnTable.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshPreferredConnTable.setDescription('Table of Preferred Base Bridge MESH connections.')
apRadioMeshPreferredConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioMeshPreferredConnIndex"))
if mibBuilder.loadTexts: apRadioMeshPreferredConnEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshPreferredConnEntry.setDescription(' ')
apRadioMeshPreferredConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioMeshPreferredConnIndex.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshPreferredConnIndex.setDescription('Simple Index.')
apRadioMeshPreferredConnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshPreferredConnPriority.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshPreferredConnPriority.setDescription('Preferred Base Bridge Priority.')
apRadioMeshPreferredConnMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshPreferredConnMac.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshPreferredConnMac.setDescription('Preferred Base Bridge MAC Address.')
apRadioMeshPreferredConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 4), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshPreferredConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: apRadioMeshPreferredConnRowStatus.setDescription('Row Status used to add or delete entries.')
apRadioWlanBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 7), )
if mibBuilder.loadTexts: apRadioWlanBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: apRadioWlanBandwidthTable.setDescription('Table of Radio Wlan Bandwidth management.')
apRadioWlanBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 7, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apRadioWlanBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioWlanBandwidthEntry.setDescription(' ')
apRadioWlanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioWlanWeight.setStatus('current')
if mibBuilder.loadTexts: apRadioWlanWeight.setDescription('The weight to be used when QoS for all WLANs is set to weighted-round-robin. Note that the sum of all weights across all WLANs need not total 100. ')
apRadioNSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8), )
if mibBuilder.loadTexts: apRadioNSettingsTable.setStatus('current')
if mibBuilder.loadTexts: apRadioNSettingsTable.setDescription("This table adds 802.11n specific settings for an 'n' radio in addition to the common settings under apRadioSettingsTable.")
apRadioNSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioNSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioNSettingsEntry.setDescription('An 802.11n radio settings entry.')
apRadioNSettingsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("modeA", 1), ("modeB", 2), ("modeG", 3), ("modeN2400MHz", 4), ("modeN5000MHz", 5), ("modeAandN", 6), ("modeBandG", 7), ("modeGandN", 8), ("modeBGandN", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNSettingsMode.setStatus('current')
if mibBuilder.loadTexts: apRadioNSettingsMode.setDescription('The modes available for an 802.11n radio depend on the radio band. For 5.0 GHz (11an), the modes are: modeA modeN5000MHz modeAandN For 2.4 GHz (11bgn), the modes are: modeBGandN modeBandG modeGandN modeB modeG modeN2400MHz')
apRadioNSettingsHTProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pureHt", 1), ("nonHtStaOnChannel", 2), ("htWith20MHzOnlySta", 3), ("nonHtStaAssociated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNSettingsHTProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: apRadioNSettingsHTProtectionStatus.setDescription('This is a new setting for 802.11n radios that indicates the HT Protection Status. The possible values are: Pure HT (1) non-HT STA on Channel (2) HT with 20 MHz-only STA (3) non-HT STA associated (4)')
apRadioNSettingsBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1and2Mbps", 1), ("rate1and2and5point5and11Mbps", 2), ("rate1and2and5point5and11and6and12and24Mbps", 3), ("rate6and12and24Mbps", 4), ("rateMCS0to7", 5), ("rate6and12and24MbpsandMCS0to7", 6), ("rate1and2and5point5and11and6and12and24MbpsandMCS0to7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNSettingsBasicRates.setStatus('current')
if mibBuilder.loadTexts: apRadioNSettingsBasicRates.setDescription('For basic rate the following options are available: (1) 1 and 2 Mbps (2) 1, 2, 5.5 and 11 Mbps (3) 1, 2, 5.5, 11 and 6, 12, 24 Mbps (4) 6, 12 and 24 Mbps (5) MCS 0-7 (6) 6, 12 and 24 Mbps and MCS 0-7 (7) 1, 2, 5.5, 11 and 6, 12, 24 Mbps and MCS 0-7')
apRadioNCfgTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9), )
if mibBuilder.loadTexts: apRadioNCfgTable.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgTable.setDescription('Description.')
apRadioNCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioNCfgEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgEntry.setDescription('Description.')
apRadioNCfgPosChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 1), Bits().clone(namedValues=NamedValues(("null", 0), ("bgnChannel1", 1), ("bgnChannel2", 2), ("bgnChannel3", 3), ("bgnChannel4", 4), ("bgnChannel5", 5), ("bgnChannel6", 6), ("bgnChannel7", 7), ("bgnChannel8", 8), ("bgnChannel9", 9), ("bgnChannel10", 10), ("bgnChannel11", 11), ("bgnChannel12", 12), ("bgnChannel13", 13), ("bgnChannel14", 14), ("anChannel36", 15), ("anChannel40", 16), ("anChannel44", 17), ("anChannel48", 18), ("anChannel52", 19), ("anChannel56", 20), ("anChannel60", 21), ("anChannel64", 22), ("anChannel100", 23), ("anChannel104", 24), ("anChannel108", 25), ("anChannel112", 26), ("anChannel116", 27), ("anChannel120", 28), ("anChannel124", 29), ("anChannel128", 30), ("anChannel132", 31), ("anChannel136", 32), ("anChannel140", 33), ("anChannel149", 34), ("anChannel153", 35), ("anChannel157", 36), ("anChannel161", 37), ("anChannel165", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgPosChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgPosChannel.setDescription('The possible channels that can be set when placement = apRadioCfgDesPlacement')
apRadioNCfgDesChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 2), AllowedChannels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgDesChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgDesChannel.setDescription("The desired channel for the 'n' radio. When changing 802.11n channels, make changes in the following order: 1) Width (apRadioNCfgChannelWidth) 2) Offset (apRadioNCfgChannelOffset) 3) Channel (apRadioNCfgDesChannel)")
apRadioNCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgChannel.setDescription("The channel configuration for the 'n' radio.")
apRadioNCfgChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twentyMHz", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgChannelWidth.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgChannelWidth.setDescription('When this value is set to twentyMhz, the AP works on 20MHz mode for both transmit and receive operations. dynamic: The 20/40 MHz operation is a dynamic feature in which the AP can receive packets from clients that use 20 MHz of bandwidth while transmitting a packet OR that use 40 MHz of bandwidth while transmitting a packet. Likewise, the AP can send packets either with a bandwidth of 20 or 40 MHz. When changing 802.11n channels, make changes in the following order: 1) Width (apRadioNCfgChannelWidth) 2) Offset (apRadioNCfgChannelOffset) 3) Channel (apRadioNCfgDesChannel)')
apRadioNCfgAmsduAggregationMaxRecvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3839))).clone(namedValues=NamedValues(("size3839", 3839)))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgAmsduAggregationMaxRecvSize.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgAmsduAggregationMaxRecvSize.setDescription('The AP will always be enabled to receive AMSDU frames. The user will be able to set the AMSDU limit to 3839 bytes. This value will be advertised in the HT Capabilities element. The user may be able to enable and disable the transmission of AMSDU frames in future releases.')
apRadioNCfgAmsduTransmitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgAmsduTransmitEnabled.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgAmsduTransmitEnabled.setDescription('When set to TRUE it enables the transmission of AMSDU frames. Setting it to FALSE disable AMSDU transmission. This object is not supported in the current release, hence it will not be returned during a get/get-next/walk.')
apRadioNCfgAmpduAggregationMaxRecvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8191, 16383, 32767, 65535))).clone(namedValues=NamedValues(("size0", 0), ("size8191", 8191), ("size16383", 16383), ("size32767", 32767), ("size65535", 65535)))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduAggregationMaxRecvSize.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgAmpduAggregationMaxRecvSize.setDescription('This value is used to tell other stations the maximum length AMPDU that they can send. The allowed values are: 0 bytes (special case, to disable AMPDU rx-limit). 8191 bytes 16383 bytes 32767 bytes 65535 bytes.')
apRadioNCfgAmpduAggregationDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 250, 500, 1000, 2000, 4000, 8000))).clone(namedValues=NamedValues(("zero", 0), ("onefourth", 250), ("onehalf", 500), ("one", 1000), ("two", 2000), ("four", 4000), ("eight", 8000)))).setUnits('nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduAggregationDensity.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgAmpduAggregationDensity.setDescription('Used to configure the AMPDU density which controls how close together the MPDUs are within the AMPDU. The choices are: 0 (none), 1/4 usec, 1/2 usec, 1 usec, 2 usec, 4 usec and 8 usec. Since SNMP cannot represent fractions or decimals, the enumerations are given multiplied by 1000 i.e. in nanoseconds.')
apRadioNCfgAmpduTransmitSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduTransmitSizeLimit.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgAmpduTransmitSizeLimit.setDescription('This is a threshold that controls when the AP will setup a Block ACK agreement with a client to begin aggregating, that is, sending A-MPDU frames, to that client. It takes a range from 0-65535 bytes. ')
apRadioNCfgShortGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgShortGuardInterval.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgShortGuardInterval.setDescription('This is a boolean. The 802.11n AP has an option to configure short guard interval(SGI). The possible values of guard interval are 400ns or 800ns. When the user turns SGI on, both 400ns and 800ns will be enabled together. When the user turns SGI off, only 800ns will be enabled. ')
apRadioNCfgAmpduTransmitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduTransmitEnabled.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgAmpduTransmitEnabled.setDescription('When set to TRUE it enables the transmission of AMPDU frames. Setting it to FALSE disable AMPDU transmission.')
apRadioNCfgChannelOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("above", 2), ("below", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgChannelOffset.setStatus('current')
if mibBuilder.loadTexts: apRadioNCfgChannelOffset.setDescription('The channel offset. When changing 802.11n channels, make changes in the following order: 1) Width (apRadioNCfgChannelWidth) 2) Offset (apRadioNCfgChannelOffset) 3) Channel (apRadioNCfgDesChannel)')
apRadioNMcsRateTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10), )
if mibBuilder.loadTexts: apRadioNMcsRateTable.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRateTable.setDescription('The AP with the 802.11n radio supports modulation coding schemes (MCS) 0-15. This maps to the table entries 1-16. To the user, this is part of the Set Rates function.')
apRadioNMcsRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioNMcsRateIndex"))
if mibBuilder.loadTexts: apRadioNMcsRateEntry.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRateEntry.setDescription("An entry which gives the MCS supported by an 'n' radio in the AP.")
apRadioNMcsRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRateIndex.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRateIndex.setDescription('MCS index, from 1-16, corresponding to schemes 0-15.')
apRadioNMcsRate20MHzChanSgiDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 2), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate20MHzChanSgiDisabled.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRate20MHzChanSgiDisabled.setDescription('Rate on 20MHz channel with SGI disabled')
apRadioNMcsRate20MHzChanSgiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 3), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate20MHzChanSgiEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: apRadioNMcsRate20MHzChanSgiEnabled.setDescription('Rate on 20MHz channel with SGI enabled')
apRadioNMcsRate40MHzChanSgiDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 4), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate40MHzChanSgiDisabled.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRate40MHzChanSgiDisabled.setDescription('Rate on 40MHz channel with SGI disabled')
apRadioNMcsRate40MHzChanSgiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 5), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate40MHzChanSgiEnabled.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRate40MHzChanSgiEnabled.setDescription('Rate on 40MHz channel with SGI enabled.')
apRadioNMcsRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("supported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNMcsRateType.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRateType.setDescription('Whether this MCS rate is basic or supported.')
apRadioNMcsRateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNMcsRateEnabled.setStatus('current')
if mibBuilder.loadTexts: apRadioNMcsRateEnabled.setDescription("Whether this MCS is disabled (false), or, enabled (true) for this 'n' radio.")
apWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2))
apWlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1), )
if mibBuilder.loadTexts: apWlanTable.setStatus('current')
if mibBuilder.loadTexts: apWlanTable.setDescription('Table of wireless LANs configured on the AP.')
apWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apWlanEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanEntry.setDescription(' ')
apWlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanIndex.setStatus('current')
if mibBuilder.loadTexts: apWlanIndex.setDescription('Simple index.')
apWlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanName.setStatus('current')
if mibBuilder.loadTexts: apWlanName.setDescription('Name of the WLAN.')
apWlanEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanEssid.setStatus('current')
if mibBuilder.loadTexts: apWlanEssid.setDescription('ESSID of the WLAN.')
apWlanUseRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noneBand", 0), ("bgRadio", 1), ("aRadio", 2), ("bothBand", 3), ("nRadio2400MHz", 4), ("nRadio5000MHz", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanUseRadio.setStatus('current')
if mibBuilder.loadTexts: apWlanUseRadio.setDescription('Use either 802.11a radio or 802.11b/g radio, or, for 802.11n radios, select the frequency band i.e. 2.4 GHz or 5.0 GHz.')
apWlanMaxMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMaxMus.setStatus('current')
if mibBuilder.loadTexts: apWlanMaxMus.setDescription('Maximum number of MU associations is allowed for the WLAN. The total number of MUs for the entire AP cannot exceed 127.')
apWlanAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 6), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAclPolicy.setStatus('current')
if mibBuilder.loadTexts: apWlanAclPolicy.setDescription('Point to the ACL policy used for this WLAN.')
apWlanSecurityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 7), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecurityPolicy.setStatus('current')
if mibBuilder.loadTexts: apWlanSecurityPolicy.setDescription('Point to the Security policy used for this WLAN.')
apWlanQosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 8), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicy.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicy.setDescription('Point to the QOS policy used for this WLAN.')
apWlanAuthKerberosUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanAuthKerberosUsername.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosUsername.setDescription('Kerberos Username which is the same as the ESSID if the WLAN uses Kerberos Authentication')
apWlanAuthKerberosPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 10), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosPassword.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosPassword.setDescription('Kerberos Password for authenticating the AP to the KDC.')
apWlanDisallowMuToMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanDisallowMuToMu.setStatus('current')
if mibBuilder.loadTexts: apWlanDisallowMuToMu.setDescription('Set to true to prohibit MU-to-MU communication.')
apWlanUseSecureBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanUseSecureBeacon.setStatus('current')
if mibBuilder.loadTexts: apWlanUseSecureBeacon.setDescription('Enable the Secure Beacon checkbox to disallow the Access Point from broadcasting an ESSID in its beacons. This is a safeguard to prevent intruders from tapping into the WLAN. Consider this security measure for a private, corporate network.')
apWlanAnswerBroadcastEss = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAnswerBroadcastEss.setStatus('current')
if mibBuilder.loadTexts: apWlanAnswerBroadcastEss.setDescription('Answer broadcast ESS.')
apWlanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanWeight.setStatus('obsolete')
if mibBuilder.loadTexts: apWlanWeight.setDescription('The weight to be used when QoS for all WLANs is set to weighted-round-robin. Note that the sum of all weights across all WLANs need not total 100. ')
apWlanVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeDynamic", 1), ("modeStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanVlanMode.setStatus('current')
if mibBuilder.loadTexts: apWlanVlanMode.setDescription('VLAN mode can either Dynamic or Static.')
apWlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 16), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanVlanId.setStatus('current')
if mibBuilder.loadTexts: apWlanVlanId.setDescription('Point to the VLAN id corresponding to WLAN.')
apWlanSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSubnet.setStatus('current')
if mibBuilder.loadTexts: apWlanSubnet.setDescription('The LAN to which a WLAN is mapped.')
apWlanClientBackHaul = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanClientBackHaul.setStatus('current')
if mibBuilder.loadTexts: apWlanClientBackHaul.setDescription('Enable/Disable MESH Client Backhaul on this WLAN.')
apWlanHotspot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanHotspot.setStatus('current')
if mibBuilder.loadTexts: apWlanHotspot.setDescription('Enable or Disable Hotspot functionality on this WLAN.')
apWlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanEnable.setStatus('current')
if mibBuilder.loadTexts: apWlanEnable.setDescription('Row enable/disable.')
apWlanMuIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: apWlanMuIdleTimeout.setDescription('Maximum MU idle time in minutes.')
apWlanSecPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2), )
if mibBuilder.loadTexts: apWlanSecPolicyTable.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyTable.setDescription('Security Policy that can be used by different WLANs.')
apWlanSecPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanSecPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyEntry.setDescription(' ')
apWlanSecPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanSecPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyIndex.setDescription('Simple index.')
apWlanSecPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyName.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyName.setDescription('Name of security policy.')
apWlanSecPolicyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authNone", 1), ("auth802dot1xEap", 2), ("authKerberos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyAuthentication.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyAuthentication.setDescription('If auth802dot1xEap, additional EAP settings for this WLAN will be used from the matching entry in the apWlanAuthEapTable. Likewise, if authKerberos, use the settings in the matching entry in the apWlanAuthKerberosTable.')
apWlanSecPolicyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cryptoNone", 1), ("cryptoWep40", 2), ("cryptoWep128", 3), ("cryptoKeyguardMcm", 4), ("cryptoWpaTkip", 5), ("cryptoCcmp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyEncryption.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyEncryption.setDescription('If cryptoWep40 or cryptoWep128, additional WEP settings for this WLAN will be used from the matching entry in the apWlanCryptoWepTable. Likewise, if cryptoWpaTkip, use the settings in the matching entry in the apWlanCryptoTkipTable. Likewise, if cryptoKeyguardMcm, use the settings in the matching entry in the apWlanCryptoKeyguardTable. Likewise, if cryptoCcmp, use the settings in the matching entry in the apWlanCryptoCcmpTable.')
apWlanSecPolicyPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 5), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanSecPolicyPointerToWlan.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyPointerToWlan.setDescription('Points to the WLAN which have this particular security policy.')
apWlanSecPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 6), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: apWlanSecPolicyRowStatus.setDescription('Row Status used for Creation or Deletion.')
apWlanAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3))
apWlanAuthEapTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1), )
if mibBuilder.loadTexts: apWlanAuthEapTable.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapTable.setDescription('Table of EAP authentication settings for each Security Policy using this method.')
apWlanAuthEapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanAuthEapEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapEntry.setDescription(' ')
apWlanAuthEapReauthenticationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationEnable.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationEnable.setDescription('Enable reauthentication.')
apWlanAuthEapReauthenticationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationPeriod.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationPeriod.setDescription('Reauthentication period.')
apWlanAuthEapReauthenticationMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationMaxRetries.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationMaxRetries.setDescription('Reauthentication max retries.')
apWlanAuthEapRadius1Server = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius1Server.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadius1Server.setDescription('IP address of the primary RADIUS server. Use 127.0.0.1 to use the Local Radius Server on the AP5131.')
apWlanAuthEapRadius1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius1Port.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadius1Port.setDescription('Port number of the primary RADIUS server.')
apWlanAuthEapRadius1SharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 6), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius1SharedSecret.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadius1SharedSecret.setDescription('Shared secret of the primary RADIUS server.')
apWlanAuthEapRadius2Server = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius2Server.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadius2Server.setDescription('IP address of the secondary RADIUS server. Use 127.0.0.1 to use the Local Radius Server on the AP5131.')
apWlanAuthEapRadius2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius2Port.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadius2Port.setDescription('Port number of the secondary RADIUS server.')
apWlanAuthEapRadius2SharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 9), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius2SharedSecret.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadius2SharedSecret.setDescription('Shared secret of the secondary RADIUS server.')
apWlanAuthEapMuQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapMuQuietPeriod.setDescription('MU quiet period.')
apWlanAuthEapMuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuTimeout.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapMuTimeout.setDescription('MU timeout.')
apWlanAuthEapMuTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuTxPeriod.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapMuTxPeriod.setDescription('MU Tx period.')
apWlanAuthEapMuMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuMaxRetries.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapMuMaxRetries.setDescription('MU max retries.')
apWlanAuthEapServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapServerTimeout.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapServerTimeout.setDescription('Server timeout.')
apWlanAuthEapServerMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapServerMaxRetries.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapServerMaxRetries.setDescription('Server max retries.')
apWlanAuthEapRadiusAcctMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMode.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMode.setDescription('Radius Accounting Mode.')
apWlanAuthEapRadiusAcctMuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMuTimeout.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMuTimeout.setDescription('Radius Accounting MU Timeout value')
apWlanAuthEapRadiusAcctMuRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMuRetries.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMuRetries.setDescription('Radius Accounting Number of MU Retries.')
apWlanAuthEapSyslogMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapSyslogMode.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapSyslogMode.setDescription('Syslogging Mode.')
apWlanAuthEapSyslogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapSyslogServerIp.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapSyslogServerIp.setDescription('Syslog Server IP Address.')
apWlanAuthEapRadiusExtAcctServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtAcctServer.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtAcctServer.setDescription('External Radius Accounting Server IP Address.')
apWlanAuthEapRadiusExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtPort.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtPort.setDescription('Port number of the external RADIUS server.')
apWlanAuthEapRadiusExtSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 23), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtSharedSecret.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtSharedSecret.setDescription('Shared secret of the external RADIUS server.')
apWlanAuthKerberosTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2), )
if mibBuilder.loadTexts: apWlanAuthKerberosTable.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosTable.setDescription('Table of Kerberos authentication settings for each Security Policy using this method.')
apWlanAuthKerberosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanAuthKerberosEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosEntry.setDescription(' ')
apWlanAuthKerberosRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosRealmName.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosRealmName.setDescription('Realm name.')
apWlanAuthKerberosKdcServerIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIp1.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIp1.setDescription('Primary KDC server IP addr.')
apWlanAuthKerberosKdcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPort1.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPort1.setDescription('Primary KDC port.')
apWlanAuthKerberosKdcServerIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIp2.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIp2.setDescription('Backup KDC server IP addr.')
apWlanAuthKerberosKdcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPort2.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPort2.setDescription('Backup KDC port.')
apWlanAuthKerberosKdcServerIpR = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIpR.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIpR.setDescription('Remote KDC server IP addr.')
apWlanAuthKerberosKdcPortR = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPortR.setStatus('current')
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPortR.setDescription('Remote KDC port.')
apWlanCrypto = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4))
apWlanCryptoWepTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1), )
if mibBuilder.loadTexts: apWlanCryptoWepTable.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepTable.setDescription('Table of WEP encryption settings for each Security Policy using this method.')
apWlanCryptoWepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoWepEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepEntry.setDescription(' ')
apWlanCryptoWepPassKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 1), Password().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepPassKey.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepPassKey.setDescription('Pass key. If this value is written, the four WepKey1..4 will be overwritten.')
apWlanCryptoWepKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey1.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepKey1.setDescription('WEP key #1 exactly 13 octets for WEP-128 (104-bit key); exactly 5 octets for WEP-64 (40-bit key). ')
apWlanCryptoWepKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey2.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepKey2.setDescription('WEP key #2 exactly 13 octets for WEP-128 (104-bit key); exactly 5 octets for WEP-64 (40-bit key).')
apWlanCryptoWepKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey3.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepKey3.setDescription('WEP key #3 exactly 13 octets for WEP-128 (104-bit key); exactly 5 octets for WEP-64 (40-bit key).')
apWlanCryptoWepKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey4.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepKey4.setDescription('WEP key #4 exactly 13 octets for WEP-128 (104-bit key); exactly 5 octets for WEP-64 (40-bit key).')
apWlanCryptoWepKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKeyToUse.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepKeyToUse.setDescription('Specifies which WEP key to use.')
apWlanCryptoWepMixedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepMixedMode.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoWepMixedMode.setDescription('Allow WEP128 clients')
apWlanCryptoTkipTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2), )
if mibBuilder.loadTexts: apWlanCryptoTkipTable.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipTable.setDescription('Table of WPA-TKIP encryption settings for each Security Policy using this method.')
apWlanCryptoTkipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoTkipEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipEntry.setDescription(' ')
apWlanCryptoTkipBcastKeyRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipBcastKeyRotation.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipBcastKeyRotation.setDescription('Use broadcast key rotation.')
apWlanCryptoTkipKeyRotationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipKeyRotationInterval.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipKeyRotationInterval.setDescription('Broadcast key rotation, (if enabled), occurs every this many seconds.')
apWlanCryptoTkipKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useAsciiPassphrase", 1), ("use256bitKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipKeyToUse.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipKeyToUse.setDescription('Specifies whether to use ASCII Passphrase or 256-bit Hex Key.')
apWlanCryptoTkipPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipPassphrase.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipPassphrase.setDescription('ASCII Passphrase.')
apWlanCryptoTkipKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipKey.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipKey.setDescription('WPA/TKIP 256 bit Key. No need to enter key if ASCII passphrase is entered.')
apWlanCryptoTkipAllowWpa2Client = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipAllowWpa2Client.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipAllowWpa2Client.setDescription('Allows WPA2 TKIP.')
apWlanCryptoTkipFastRoamPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipFastRoamPreAuth.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoTkipFastRoamPreAuth.setDescription('Allows Pre-Authentication.')
apWlanCryptoCcmpTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3), )
if mibBuilder.loadTexts: apWlanCryptoCcmpTable.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpTable.setDescription('Table of WPA2-CCMP encryption settings for each Security Policy using this method.')
apWlanCryptoCcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoCcmpEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpEntry.setDescription(' ')
apWlanCryptoCcmpBcastKeyRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpBcastKeyRotation.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpBcastKeyRotation.setDescription('Use broadcast key rotation.')
apWlanCryptoCcmpKeyRotationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpKeyRotationInterval.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpKeyRotationInterval.setDescription('Broadcast key rotation, (if enabled), occurs every this many seconds.')
apWlanCryptoCcmpKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useAsciiPassphrase", 1), ("use256bitKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpKeyToUse.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpKeyToUse.setDescription('Specifies whether to use ASCII Passphrase or 256-bit Hex Key.')
apWlanCryptoCcmpPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpPassphrase.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpPassphrase.setDescription('ASCII Passphrase.')
apWlanCryptoCcmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpKey.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpKey.setDescription('WPA2/CCMP 256 bit Key. No need to enter key if ASCII passphrase is entered.')
apWlanCryptoCcmpMixedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpMixedMode.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpMixedMode.setDescription('Allow WPA-TKIP clients')
apWlanCryptoCcmpFastRoamPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpFastRoamPreAuth.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoCcmpFastRoamPreAuth.setDescription('Enabling this option enables a client associated with one Access Point to carry out an 802.1x authentication with another Access Point before it roams over to it. The Access Point will cache the keying information of the client until it roams to the new Access Point. This enables the roaming the client to start sending and receiving data sooner by not having to do 802.1x authentication after it roams. Note: This option only works when 802.1x authentication is enabled for the WLAN. ')
apWlanCryptoKeyguardTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4), )
if mibBuilder.loadTexts: apWlanCryptoKeyguardTable.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardTable.setDescription('Table of KeyGuard-MCM encryption settings for each Security Policy using this method.')
apWlanCryptoKeyguardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoKeyguardEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardEntry.setDescription(' ')
apWlanCryptoKeyguardPassKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardPassKey.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardPassKey.setDescription('Pass key. If this value is written, the four KeyguardKey1..4 will be overwritten.')
apWlanCryptoKeyguardKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey1.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey1.setDescription('Key #1.')
apWlanCryptoKeyguardKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey2.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey2.setDescription('Key #2.')
apWlanCryptoKeyguardKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey3.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey3.setDescription('Key #3.')
apWlanCryptoKeyguardKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey4.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey4.setDescription('Key #4.')
apWlanCryptoKeyguardKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKeyToUse.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardKeyToUse.setDescription('Specifies which WEP key to use.')
apWlanCryptoKeyguardMixedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardMixedMode.setStatus('current')
if mibBuilder.loadTexts: apWlanCryptoKeyguardMixedMode.setDescription('Allow WEP128 clients')
apWlanMuAclPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5), )
if mibBuilder.loadTexts: apWlanMuAclPolicyTable.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyTable.setDescription('Access Control List that can be used by different WLANs.')
apWlanMuAclPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanMuAclPolicyIndex"))
if mibBuilder.loadTexts: apWlanMuAclPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyEntry.setDescription(' ')
apWlanMuAclPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanMuAclPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyIndex.setDescription('Simple index.')
apWlanMuAclPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPolicyName.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyName.setDescription('Name of the Access Control policy.')
apWlanMuAclPolicyAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPolicyAccessMode.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyAccessMode.setDescription('MUs match this policy can either be Allowed or Denied association.')
apWlanMuAclPolicyPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 4), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanMuAclPolicyPointerToWlan.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyPointerToWlan.setDescription('Points to the WLAN which have this particular MU Acl policy.')
apWlanMuAclPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPolicyRowStatus.setDescription('Row Status.')
apWlanMuAclTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6), )
if mibBuilder.loadTexts: apWlanMuAclTable.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclTable.setDescription('Table describing ACLs for allowing or denying, (depending on default behavior for the WLAN specified in apWlanMuAclPolicyTable), MU association with each WLAN.')
apWlanMuAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanMuAclIndex"))
if mibBuilder.loadTexts: apWlanMuAclEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclEntry.setDescription(' ')
apWlanMuAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanMuAclIndex.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclIndex.setDescription('Simple index.')
apWlanMuAclStartingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclStartingMac.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclStartingMac.setDescription('Starting MAC address in a range of addresses.')
apWlanMuAclEndingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclEndingMac.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclEndingMac.setDescription('Ending MAC address in a range of addresses.')
apWlanMuAclPointerToAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 4), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPointerToAclPolicy.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclPointerToAclPolicy.setDescription('Pointer to the ACL policy that this row belongs.')
apWlanMuAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: apWlanMuAclRowStatus.setDescription('Row status.')
apWlanQosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7), )
if mibBuilder.loadTexts: apWlanQosPolicyTable.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyTable.setDescription('QoS Policy that can be used by different WLANs.')
apWlanQosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanQosPolicyIndex"))
if mibBuilder.loadTexts: apWlanQosPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyEntry.setDescription(' ')
apWlanQosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanQosPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyIndex.setDescription('Simple index.')
apWlanQosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyName.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyName.setDescription('Name of the QoS policy.')
apWlanEnableWMM = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanEnableWMM.setStatus('current')
if mibBuilder.loadTexts: apWlanEnableWMM.setDescription('Enable WiFi Multimedia Extension support.')
apWlanWMMQosParam = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("manual", 1), ("wifi11agn", 2), ("wifi11b", 3), ("default11agn", 4), ("default11b", 5), ("voice11agn", 6), ("voice11b", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanWMMQosParam.setStatus('current')
if mibBuilder.loadTexts: apWlanWMMQosParam.setDescription('Pre-Programmed WMM QOS Parameters. manual - Modify parameters wifi11agn - WiFi 11a/11g/11n defaults wifi11b - WiFi 11b defaults default11agn - Symbol 11a/11g/11n defaults default11b - Symbol 11b defaults voice11agn - Symbol 11a/11g/11n voice params voice11b - Symbol 11b voice params')
apWlanQosPolicyBackgroundCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundCwMin.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundCwMin.setDescription('This QoS parameter is to be used by the MU for the Background access category.')
apWlanQosPolicyBackgroundCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundCwMax.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundCwMax.setDescription('This QoS parameter is to be used by the MU for the Background access category.')
apWlanQosPolicyBackgroundAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundAifsn.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundAifsn.setDescription('This QoS parameter is to be used by the MU for the Background access category.')
apWlanQosPolicyBackgroundTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundTxopsTime.setDescription('This QoS parameter is to be used by the MU for the Background access category.')
apWlanQosPolicyBackgroundTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundTxopsTimeInMS.setDescription('This QoS parameter is to be used by the MU for the Background access category.')
apWlanQosPolicyBestEffortCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortCwMin.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortCwMin.setDescription('This QoS parameter is to be used by the MU for the Best Effort access category.')
apWlanQosPolicyBestEffortCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortCwMax.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortCwMax.setDescription('This QoS parameter is to be used by the MU for the Best Effort access category.')
apWlanQosPolicyBestEffortAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortAifsn.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortAifsn.setDescription('This QoS parameter is to be used by the MU for the Best Effort access category.')
apWlanQosPolicyBestEffortTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortTxopsTime.setDescription('This QoS parameter is to be used by the MU for the Best Effort access category.')
apWlanQosPolicyBestEffortTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortTxopsTimeInMS.setDescription('This QoS parameter is to be used by the MU for the Best Effort access category.')
apWlanQosPolicyVideoCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoCwMin.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVideoCwMin.setDescription('This QoS parameter is to be used by the MU for the Video access category.')
apWlanQosPolicyVideoCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoCwMax.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVideoCwMax.setDescription('This QoS parameter is to be used by the MU for the Video access category.')
apWlanQosPolicyVideoAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoAifsn.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVideoAifsn.setDescription('This QoS parameter is to be used by the MU for the Video access category.')
apWlanQosPolicyVideoTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVideoTxopsTime.setDescription('This QoS parameter is to be used by the MU for the Video access category.')
apWlanQosPolicyVideoTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyVideoTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVideoTxopsTimeInMS.setDescription('This QoS parameter is to be used by the MU for the Video access category.')
apWlanQosPolicyVoiceCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceCwMin.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVoiceCwMin.setDescription('This QoS parameter is to be used by the MU for the Voice access category.')
apWlanQosPolicyVoiceCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceCwMax.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVoiceCwMax.setDescription('This QoS parameter is to be used by the MU for the Voice access category.')
apWlanQosPolicyVoiceAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceAifsn.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVoiceAifsn.setDescription('This QoS parameter is to be used by the MU for the Voice access category.')
apWlanQosPolicyVoiceTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceTxopsTime.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVoiceTxopsTime.setDescription('This QoS parameter is to be used by the MU for the Voice access category.')
apWlanQosPolicyVoiceTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceTxopsTimeInMS.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyVoiceTxopsTimeInMS.setDescription('This QoS parameter is to be used by the MU for the Voice access category.')
apWlanVoicePrioritization = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanVoicePrioritization.setStatus('current')
if mibBuilder.loadTexts: apWlanVoicePrioritization.setDescription('Support legacy voice prioritization.')
apWlanMulticastAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 26), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMulticastAddr1.setStatus('current')
if mibBuilder.loadTexts: apWlanMulticastAddr1.setDescription('Multicast address 1.')
apWlanMulticastAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 27), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMulticastAddr2.setStatus('current')
if mibBuilder.loadTexts: apWlanMulticastAddr2.setDescription('Multicast address 2.')
apWlanQosPolicyPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 28), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyPointerToWlan.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyPointerToWlan.setDescription('Points to the WLAN which have this particular QOS policy.')
apWlanQosPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 29), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: apWlanQosPolicyRowStatus.setDescription('Row Status.')
apWlanBwShareModeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 8), )
if mibBuilder.loadTexts: apWlanBwShareModeTable.setStatus('current')
if mibBuilder.loadTexts: apWlanBwShareModeTable.setDescription('Description.')
apWlanBwShareModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 8, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apWlanBwShareModeEntry.setStatus('current')
if mibBuilder.loadTexts: apWlanBwShareModeEntry.setDescription('Description.')
apWlanBwShareMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("firstInFirstOut", 0), ("roundRobin", 1), ("weightedRoundRobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanBwShareMode.setStatus('current')
if mibBuilder.loadTexts: apWlanBwShareMode.setDescription("This variable configures the manner in which bandwidth is shared among the WLANs. Only in mode 'weightedRoundRobin' are the apRadioWlanWeight values for each Radio and WLAN used.")
apHotSpot = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3))
apHotSpotWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2), )
if mibBuilder.loadTexts: apHotSpotWhiteListTable.setStatus('current')
if mibBuilder.loadTexts: apHotSpotWhiteListTable.setDescription('Table of White List entires for HotSpot for the WLANs.')
apHotSpotWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"), (0, "SYMBOL-AP-MIB", "apHotSpotWhiteListIndex"))
if mibBuilder.loadTexts: apHotSpotWhiteListEntry.setStatus('current')
if mibBuilder.loadTexts: apHotSpotWhiteListEntry.setDescription(' ')
apHotSpotWhiteListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apHotSpotWhiteListIndex.setStatus('current')
if mibBuilder.loadTexts: apHotSpotWhiteListIndex.setDescription('Simple Index 1...10')
apHotSpotWhiteListWalledGardenIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotWhiteListWalledGardenIp.setStatus('current')
if mibBuilder.loadTexts: apHotSpotWhiteListWalledGardenIp.setDescription('IP Address of White List entries')
apHotSpotWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1, 3), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotWhiteListRowStatus.setStatus('current')
if mibBuilder.loadTexts: apHotSpotWhiteListRowStatus.setDescription('Value to control row creation/deletion.')
apHotSpotTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1), )
if mibBuilder.loadTexts: apHotSpotTable.setStatus('current')
if mibBuilder.loadTexts: apHotSpotTable.setDescription('Table for Hotspot configuration.')
apHotSpotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apHotSpotEntry.setStatus('current')
if mibBuilder.loadTexts: apHotSpotEntry.setDescription(' ')
apHotSpotDefaultFileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("externalURL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotDefaultFileMode.setStatus('current')
if mibBuilder.loadTexts: apHotSpotDefaultFileMode.setDescription('Default File Mode for Login, Welcome and Fail Pages.')
apHotSpotExternalLoginPageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotExternalLoginPageUrl.setStatus('current')
if mibBuilder.loadTexts: apHotSpotExternalLoginPageUrl.setDescription('Login Page URL on external server.')
apHotSpotExternalWelomePageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotExternalWelomePageUrl.setStatus('current')
if mibBuilder.loadTexts: apHotSpotExternalWelomePageUrl.setDescription('Welcome Page URL on external server.')
apHotSpotExternalFailPageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotExternalFailPageUrl.setStatus('current')
if mibBuilder.loadTexts: apHotSpotExternalFailPageUrl.setDescription('Fail Page URL on external server.')
apHotSpotPriRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotPriRadiusServerIp.setStatus('current')
if mibBuilder.loadTexts: apHotSpotPriRadiusServerIp.setDescription('IP Address of Primary Radius Server. Use 127.0.0.1 to use the Local Radius Server on the AP5131.')
apHotSpotPriRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotPriRadiusPort.setStatus('current')
if mibBuilder.loadTexts: apHotSpotPriRadiusPort.setDescription('Port for Primary Radius Server.')
apHotSpotPriRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 7), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotPriRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: apHotSpotPriRadiusSecret.setDescription('Shared Secret for Primary Radius Server.')
apHotSpotSecRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotSecRadiusServerIp.setStatus('current')
if mibBuilder.loadTexts: apHotSpotSecRadiusServerIp.setDescription('IP Address of Secondary Radius Server. Use 127.0.0.1 to use the Local Radius Server on the AP5131.')
apHotSpotSecRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotSecRadiusPort.setStatus('current')
if mibBuilder.loadTexts: apHotSpotSecRadiusPort.setDescription('Port for Secondary Radius Server.')
apHotSpotSecRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 10), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotSecRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: apHotSpotSecRadiusSecret.setDescription('Shared Secret for Secondary Radius Server.')
apHotSpotRadiusAcctMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctMode.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusAcctMode.setDescription('Radius Accounting Mode.')
apHotSpotRadiusAcctServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctServerIp.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusAcctServerIp.setDescription('External Accounting Radius Server.')
apHotSpotRadiusAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctPort.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusAcctPort.setDescription('Port for External Accounting Radius Server.')
apHotSpotRadiusAcctSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 14), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctSecret.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusAcctSecret.setDescription('Shared Secret for External Accounting Radius Server.')
apHotSpotRadiusAcctTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctTimeout.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusAcctTimeout.setDescription('Radius Accounting Timeout value.')
apHotSpotRadiusAcctRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctRetryCount.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusAcctRetryCount.setDescription('Radius Accounting Retry Count value.')
apHotSpotRadiusSessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusSessMode.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusSessMode.setDescription('Radius Session Timeout Mode (Applicable only for Internal Radius Server)')
apHotSpotRadiusSessTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusSessTimeout.setStatus('current')
if mibBuilder.loadTexts: apHotSpotRadiusSessTimeout.setDescription('Radius Session Timeout (Applicable only for Internal Radius Server)')
apMus = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4))
apMuLocationing = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1))
apMuLocationingEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingEnable.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingEnable.setDescription('Enable/disable MU Locationing feature. ')
apMuLocationingClear = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 2), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingClear.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingClear.setDescription('Setting this value to TRUE clears all apMuLocationingTable entries. Any probe request heard after that event will be treated as newly heard.')
apMuLocationingMaxMus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingMaxMus.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingMaxMus.setDescription("Maximum number of MU's to be reported in the apMuLocationingTable. The minimum number is 20 and maximum 200. ")
apMuLocationingTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4), )
if mibBuilder.loadTexts: apMuLocationingTable.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingTable.setDescription('The switch shall store the information received in the probe request messages in this table. ')
apMuLocationingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMuLocationingIndex"))
if mibBuilder.loadTexts: apMuLocationingEntry.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingEntry.setDescription('Description.')
apMuLocationingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2400))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apMuLocationingIndex.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingIndex.setDescription('Simple index.')
apMuLocationingMuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingMuMac.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingMuMac.setDescription('MAC address of the MU.')
apMuLocationingPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingPortalMac.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingPortalMac.setDescription('MAC address of the Portal.')
apMuLocationingSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingSignalStrength.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingSignalStrength.setDescription('Received Signal Strength in dBm by the Heard Portal.')
apMuLocationingHeardChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingHeardChannel.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingHeardChannel.setDescription('Describes on which channel probe is heard.')
apMuLocationingHeardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingHeardTime.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingHeardTime.setDescription('Describes the time when this probe is heard.')
apMuLocationingAddEntryToTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5), )
if mibBuilder.loadTexts: apMuLocationingAddEntryToTable.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddEntryToTable.setDescription('The switch shall provide option to append information to apMuLocationingTable.')
apMuLocationingAddEntryToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMuLocationingIndex"))
if mibBuilder.loadTexts: apMuLocationingAddEntryToEntry.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddEntryToEntry.setDescription('Description.')
apMuLocationingAddMuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddMuMac.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddMuMac.setDescription('MAC address of the MU.')
apMuLocationingAddPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddPortalMac.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddPortalMac.setDescription('MAC address of the Portal.')
apMuLocationingAddSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddSignalStrength.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddSignalStrength.setDescription('Received Signal Strength in dBm by the Heard Portal.')
apMuLocationingAddHeardChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddHeardChannel.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddHeardChannel.setDescription('Describes on which channel probe is heard.')
apMuLocationingAddHeardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddHeardTime.setStatus('current')
if mibBuilder.loadTexts: apMuLocationingAddHeardTime.setDescription('Describes the time when this probe is heard.')
apIpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5))
apIpFilterPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1), )
if mibBuilder.loadTexts: apIpFilterPolicyTable.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyTable.setDescription('Table of Global IP Filter Policies')
apIpFilterPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apIpFilterPolicyIndex"))
if mibBuilder.loadTexts: apIpFilterPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyEntry.setDescription(' ')
apIpFilterPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyIndex.setDescription('Simple Index')
apIpFilterPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyName.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyName.setDescription('IP Filter Policy Name. It has to be unique for every policy.')
apIpFilterPolicyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 103, 108, 255, 256))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("pim", 103), ("comp", 108), ("rawip", 255), ("all", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyProtocol.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyProtocol.setDescription('IP Filter Policy Protocol Number.')
apIpFilterPolicyStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyStartPort.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyStartPort.setDescription('IP Filter Policy Starting Port Number')
apIpFilterPolicyEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyEndPort.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyEndPort.setDescription('IP Filter Policy Ending Port Number')
apIpFilterPolicySrcStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcStartIp.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicySrcStartIp.setDescription('IP Filter Policy Source Start IP Address.')
apIpFilterPolicySrcEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcEndIp.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicySrcEndIp.setDescription('IP Filter Policy Source End IP Address.')
apIpFilterPolicyDestStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyDestStartIp.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyDestStartIp.setDescription('IP Filter Policy Dest Start IP Address.')
apIpFilterPolicyDestEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyDestEndIp.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyDestEndIp.setDescription('IP Filter Policy Dest End IP Address.')
apIpFilterPolicyUseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterPolicyUseStatus.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyUseStatus.setDescription('Description.Indicates whether filter is used by any of the WLAN IP Filter Tables or the TRUNK IP Filter Table. If got used then displays YES otherwise NO.')
apIpFilterPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 11), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicyRowStatus.setDescription('Row Status for creation and deletion of policies.')
apIpFilterPolicySrcStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcStartPort.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicySrcStartPort.setDescription('IP Filter Policy Source Starting Port Number')
apIpFilterPolicySrcEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcEndPort.setStatus('current')
if mibBuilder.loadTexts: apIpFilterPolicySrcEndPort.setDescription('IP Filter Policy Source Ending Port Number')
apIpFilterWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2))
apIpFilterWlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1), )
if mibBuilder.loadTexts: apIpFilterWlanTable.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanTable.setDescription('IP Filter for WLAN')
apIpFilterWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apIpFilterWlanEntry.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanEntry.setDescription(' ')
apIpFilterWlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanMode.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanMode.setDescription('IP Filter Mode.')
apIpFilterWlanDefInAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanDefInAction.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanDefInAction.setDescription('IP Filter Default IN Action.')
apIpFilterWlanDefOutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanDefOutAction.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanDefOutAction.setDescription('IP Filter Default OUT Action.')
apIpFilterWlanInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterWlanInPackets.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanInPackets.setDescription('Number of incoming packets allowed or denied as a result of the default policy')
apIpFilterWlanOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterWlanOutPackets.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanOutPackets.setDescription('Number of outgoing packets allowed or denied as a result of the default policy')
apIpFilterWlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2), )
if mibBuilder.loadTexts: apIpFilterWlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyTable.setDescription('IP Filter Policy for WLANs.')
apIpFilterWlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"), (0, "SYMBOL-AP-MIB", "apIpFilterWlanPolicyIndex"))
if mibBuilder.loadTexts: apIpFilterWlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyEntry.setDescription(' ')
apIpFilterWlanPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterWlanPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyIndex.setDescription('Simple Index.')
apIpFilterWlanPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyPolicy.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyPolicy.setDescription('Single Pointer to the Global IP Filter Policy.')
apIpFilterWlanPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyDirection.setDescription('IP Filter Policy Direction.')
apIpFilterWlanPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyAction.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyAction.setDescription('IP Filter Policy Action.')
apIpFilterWlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyRowStatus.setDescription('Row Status for creation and deletion.')
apIpFilterWlanPolicyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterWlanPolicyPackets.setStatus('current')
if mibBuilder.loadTexts: apIpFilterWlanPolicyPackets.setDescription('Number of packets allowed or denied as a result of this policy.')
apIpFilterLan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3))
apIpFilterLanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1), )
if mibBuilder.loadTexts: apIpFilterLanTable.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanTable.setDescription('IP Filter for WLAN')
apIpFilterLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apIpFilterLanIndex"))
if mibBuilder.loadTexts: apIpFilterLanEntry.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanEntry.setDescription(' ')
apIpFilterLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterLanIndex.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanIndex.setDescription('Description.')
apIpFilterLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanMode.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanMode.setDescription('IP Filter Mode.')
apIpFilterLanDefInAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanDefInAction.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanDefInAction.setDescription('IP Filter Default IN Action.')
apIpFilterLanDefOutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanDefOutAction.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanDefOutAction.setDescription('IP Filter Default OUT Action.')
apIpFilterLanInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterLanInPackets.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanInPackets.setDescription('Number of incoming packets allowed or denied as a result of the default policy')
apIpFilterLanOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterLanOutPackets.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanOutPackets.setDescription('Number of outgoing packets allowed or denied as a result of the default policy.')
apIpFilterLanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2), )
if mibBuilder.loadTexts: apIpFilterLanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyTable.setDescription('IP Filter Policy for WAN Trunk Port.')
apIpFilterLanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apIpFilterLanIndex"), (0, "SYMBOL-AP-MIB", "apIpFilterLanPolicyIndex"))
if mibBuilder.loadTexts: apIpFilterLanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyEntry.setDescription(' ')
apIpFilterLanPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterLanPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyIndex.setDescription('Simple Index.')
apIpFilterLanPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyPolicy.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyPolicy.setDescription('Single Pointer to the Global IP Filter Policy.')
apIpFilterLanPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyDirection.setDescription('IP Filter Policy Direction.')
apIpFilterLanPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyAction.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyAction.setDescription('IP Filter Policy Action.')
apIpFilterLanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyRowStatus.setDescription('Row Status for creation and deletion.')
apIpFilterLanPolicyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterLanPolicyPackets.setStatus('current')
if mibBuilder.loadTexts: apIpFilterLanPolicyPackets.setDescription('Number of packets allowed or denied as a result of this policy.')
apReliableMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6))
apReliableMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastMode.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMode.setDescription('Enable / Disable Reliable Multicast feature.')
apReliableMulticastWlan = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastWlan.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastWlan.setDescription('WLAN (ESSID) on which reliable multicast feature will be enabled.')
apReliableMulticastMaxStreams = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastMaxStreams.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMaxStreams.setDescription('Maximum number of streams to be serviced by the reliable Multicast Feature.')
apReliableMulticastStandaloneMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastStandaloneMode.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastStandaloneMode.setDescription('Enable / Disable Standalone mode for Reliable Multicast. In this mode, the AP can operate without a Multicast Router on the network.')
apReliableMulticastIgmpQueryVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastIgmpQueryVersion.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastIgmpQueryVersion.setDescription('IGMP version for the queries to be sent. IGMP query is sent on MU association and when standalone mode is enabled.')
apReliableMulticastIgmpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastIgmpQueryInterval.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastIgmpQueryInterval.setDescription('The IGMP query interval (in seconds) to be used in standalone mode.')
apReliableMulticastTxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastTxMulticast.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastTxMulticast.setDescription('Description.')
apReliableMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8), )
if mibBuilder.loadTexts: apReliableMulticastTable.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastTable.setDescription('Table of IPv4 Multicast addresses configured for Reliable Multicast')
apReliableMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apReliableMulticastAddrIndex"))
if mibBuilder.loadTexts: apReliableMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastEntry.setDescription('Entry of IPv4 Multicast addresses configured for Reliable Multicast')
apReliableMulticastAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apReliableMulticastAddrIndex.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastAddrIndex.setDescription('Description.')
apReliableMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastAddress.setDescription('IPv4 Multicast Address')
apReliableMulticastTableRowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastTableRowEnable.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastTableRowEnable.setDescription('Row status for Reliable Multicast address table. Set to FALSE to delete a row. Should be TRUE while creating the row.')
apReliableMulticastMUTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9), )
if mibBuilder.loadTexts: apReliableMulticastMUTable.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMUTable.setDescription('Table of MUs being serviced by the reliable multicast feature.')
apReliableMulticastMUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apReliableMulticastMUStatsIndex"))
if mibBuilder.loadTexts: apReliableMulticastMUEntry.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMUEntry.setDescription('Description.')
apReliableMulticastMUStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apReliableMulticastMUStatsIndex.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMUStatsIndex.setDescription('Description.')
apReliableMulticastMUStatsIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReliableMulticastMUStatsIPAddr.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMUStatsIPAddr.setDescription('IPv4 Multicast Address.')
apReliableMulticastMUMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReliableMulticastMUMacAddr.setStatus('current')
if mibBuilder.loadTexts: apReliableMulticastMUMacAddr.setDescription('Mac Address of Mobile Units.')
apSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5))
apWan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1))
apWanVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1))
apWanVpnTunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1))
apWanVpnKeyAutoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1, 1), )
if mibBuilder.loadTexts: apWanVpnKeyAutoTable.setStatus('current')
if mibBuilder.loadTexts: apWanVpnKeyAutoTable.setDescription('Table of Auto Key Setting entries.')
apWanVpnKeyAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1, 1, 1), )
ccWanVpnEntry.registerAugmentions(("SYMBOL-AP-MIB", "apWanVpnKeyAutoEntry"))
apWanVpnKeyAutoEntry.setIndexNames(*ccWanVpnEntry.getIndexNames())
if mibBuilder.loadTexts: apWanVpnKeyAutoEntry.setStatus('current')
if mibBuilder.loadTexts: apWanVpnKeyAutoEntry.setDescription(' ')
apWanVpnKeyAutoSALifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 4294967295)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanVpnKeyAutoSALifeTime.setStatus('current')
if mibBuilder.loadTexts: apWanVpnKeyAutoSALifeTime.setDescription('The number of seconds that the security association is valid. This is an augumentation to ccWanVpnKeyAutoTable and this particular column for Security Association Life Time has been added as it was missing from the WS2000 MIB.')
apWanPppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2))
apWanPppoeClientTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1), )
if mibBuilder.loadTexts: apWanPppoeClientTable.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientTable.setDescription('Description.')
apWanPppoeClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWanPppoeClientIndex"))
if mibBuilder.loadTexts: apWanPppoeClientEntry.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientEntry.setDescription('Description.')
apWanPppoeClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWanPppoeClientIndex.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientIndex.setDescription('Description.')
apWanPppoeClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientIp.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientIp.setDescription('Description.')
apWanPppoeClientGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientGateway.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientGateway.setDescription('Description.')
apWanPppoeClientPrimaryDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientPrimaryDNSServer.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientPrimaryDNSServer.setDescription('Description.')
apWanPppoeClientSecondaryDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientSecondaryDNSServer.setStatus('current')
if mibBuilder.loadTexts: apWanPppoeClientSecondaryDNSServer.setDescription('Description.')
apWanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3))
apWanPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: apWanPortAutoNegotiation.setDescription('Wan Ethernet Port Auto-Negotiation Value.')
apWanPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tenMbps", 0), ("hundredMbps", 1), ("oneGbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanPortSpeed.setStatus('current')
if mibBuilder.loadTexts: apWanPortSpeed.setDescription('Wan Ethernet Port Speed Value. AP5131 does not support oneGbps.')
apWanPortDuplex = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanPortDuplex.setStatus('current')
if mibBuilder.loadTexts: apWanPortDuplex.setDescription('Wan Ethernet Port Duplex Value.')
apWanDynDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4))
apWanDynDNSMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSMode.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSMode.setDescription('Enable/Disable DynDNS feature on WAN interface.')
apWanDynDNSTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2), )
if mibBuilder.loadTexts: apWanDynDNSTable.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSTable.setDescription('Table of DynDNS configuration entries.')
apWanDynDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWanDynDNSIndex"))
if mibBuilder.loadTexts: apWanDynDNSEntry.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSEntry.setDescription('Description.')
apWanDynDNSUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSUsername.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUsername.setDescription('DynDNS Username which is used to access DynDNS service. The user has to create an account in the DynDNS.org site to get a username and password.')
apWanDynDNSPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSPassword.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSPassword.setDescription('DynDNS Password used to access DynDNS service. The user has to create an account in the DynDNS.org site to get a username and password')
apWanDynDNSHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSHostname.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSHostname.setDescription('DynDNS Hostname which has be linked to the WAN IP address. The hostname entry has to be made in the DynDNS.org site.')
apWanDynDNSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWanDynDNSIndex.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSIndex.setDescription('Index for apWanDynDNSTable.')
apWanDynDNSUpdateResponseTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3), )
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseTable.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseTable.setDescription('Table to display the DynDNS update respone.')
apWanDynDNSUpdateResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWanDynDNSUpdateResponseIndex"))
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseEntry.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseEntry.setDescription('Description.')
apWanDynDNSUpdateHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanDynDNSUpdateHostname.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUpdateHostname.setDescription('The DynDNS hostname which is linked to the WAN IP Address in the DynDNS.org database.')
apWanDynDNSUpdateIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanDynDNSUpdateIp.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUpdateIp.setDescription('The WAN IP address which is linked with the hostname in the DynDNS.org site.')
apWanDynDNSUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanDynDNSUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUpdateStatus.setDescription('DynDNS update response received from the DynDNS.org.')
apWanDynDNSUpdateResponseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseIndex.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseIndex.setDescription('Index for apWanDynDNSUpdateResponseTable.')
apWanDynDNSPerformUpdate = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSPerformUpdate.setStatus('current')
if mibBuilder.loadTexts: apWanDynDNSPerformUpdate.setDescription('Perform Manual DynDNS Update. An update request to update the WAN IP and hostname is sent to DynDNS.org.')
apLan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2))
apLanEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanEnable.setStatus('deprecated')
if mibBuilder.loadTexts: apLanEnable.setDescription('Enable LAN port.')
apLanTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("hardwareDefect", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTimeOut.setStatus('current')
if mibBuilder.loadTexts: apLanTimeOut.setDescription('LAN Timeout Status')
apLanTimeOutValue = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTimeOutValue.setStatus('current')
if mibBuilder.loadTexts: apLanTimeOutValue.setDescription('If LAN is not connected after Timeout period (in seconds), stop the AP from sending beacons.')
apLanVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanVlanEnable.setStatus('obsolete')
if mibBuilder.loadTexts: apLanVlanEnable.setDescription('Enable VLAN.')
apLanAdminVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanAdminVlanTag.setStatus('obsolete')
if mibBuilder.loadTexts: apLanAdminVlanTag.setDescription('Management VLAN Tag.')
apLanNativeVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanNativeVlanTag.setStatus('obsolete')
if mibBuilder.loadTexts: apLanNativeVlanTag.setDescription('Native VLAN Tag.')
apLan802dt1xAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 17))
apLan802dt1xAuthLogin = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 17, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLan802dt1xAuthLogin.setStatus('current')
if mibBuilder.loadTexts: apLan802dt1xAuthLogin.setDescription('802.1x AP Authentication username.')
apLan802dt1xAuthPass = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 17, 3), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLan802dt1xAuthPass.setStatus('current')
if mibBuilder.loadTexts: apLan802dt1xAuthPass.setDescription('802.1x AP Authentication password.')
apLanVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18))
apVlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1), )
if mibBuilder.loadTexts: apVlanTable.setStatus('current')
if mibBuilder.loadTexts: apVlanTable.setDescription('Table of VLAN entries.')
apVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apVlanIndex"))
if mibBuilder.loadTexts: apVlanEntry.setStatus('current')
if mibBuilder.loadTexts: apVlanEntry.setDescription(' ')
apVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apVlanIndex.setStatus('current')
if mibBuilder.loadTexts: apVlanIndex.setDescription('Simple Index (1...16)')
apVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanId.setStatus('current')
if mibBuilder.loadTexts: apVlanId.setDescription('VLAN id.')
apVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanName.setStatus('current')
if mibBuilder.loadTexts: apVlanName.setDescription('VLAN name.')
apVlanPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 4), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apVlanPointerToWlan.setStatus('current')
if mibBuilder.loadTexts: apVlanPointerToWlan.setDescription('Pointer to WLAN associated with this particular VLAN.')
apVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: apVlanRowStatus.setDescription('Row Status.')
apSubnet = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19))
apSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1), )
if mibBuilder.loadTexts: apSubnetTable.setStatus('current')
if mibBuilder.loadTexts: apSubnetTable.setDescription('Table of Subnets.')
apSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1), )
ccSubnetEntry.registerAugmentions(("SYMBOL-AP-MIB", "apSubnetEntry"))
apSubnetEntry.setIndexNames(*ccSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: apSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: apSubnetEntry.setDescription(' ')
apSubnetDhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dhcpClient", 1), ("dhcpServer", 2), ("dhcpNone", 3), ("dhcpBootp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetDhcpState.setStatus('current')
if mibBuilder.loadTexts: apSubnetDhcpState.setDescription('Specifies how Subnet gets its IP address/mask.')
apSubnetVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetVlanEnable.setStatus('current')
if mibBuilder.loadTexts: apSubnetVlanEnable.setDescription('Enable VLAN.')
apSubnetTypeFilterAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetTypeFilterAccessMode.setStatus('current')
if mibBuilder.loadTexts: apSubnetTypeFilterAccessMode.setDescription('Packets can either be Forwarded or Discarded.')
apSubnetAdminVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetAdminVlanTag.setStatus('current')
if mibBuilder.loadTexts: apSubnetAdminVlanTag.setDescription('Management VLAN Tag.')
apSubnetNativeVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetNativeVlanTag.setStatus('current')
if mibBuilder.loadTexts: apSubnetNativeVlanTag.setDescription('Native VLAN Tag.')
apLanTypeFilterAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTypeFilterAccessMode.setStatus('obsolete')
if mibBuilder.loadTexts: apLanTypeFilterAccessMode.setDescription('Packets can either be Forwarded or Discarded.')
apLanTypeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21), )
if mibBuilder.loadTexts: apLanTypeFilterTable.setStatus('current')
if mibBuilder.loadTexts: apLanTypeFilterTable.setDescription('Table describing ACLs for allowing or denying, (depending on default behavior for the WLAN specified in apLanTypeFilterAccessMode), MU association with each WLAN.')
apLanTypeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanTypeFilterSubnetIndex"), (0, "SYMBOL-AP-MIB", "apLanTypeFilterIndex"))
if mibBuilder.loadTexts: apLanTypeFilterEntry.setStatus('current')
if mibBuilder.loadTexts: apLanTypeFilterEntry.setDescription(' ')
apLanTypeFilterSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanTypeFilterSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: apLanTypeFilterSubnetIndex.setDescription('Subnet Index for Type Filter')
apLanTypeFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanTypeFilterIndex.setStatus('current')
if mibBuilder.loadTexts: apLanTypeFilterIndex.setDescription('Simple index.')
apLanTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 3), EthernetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTypeFilter.setStatus('current')
if mibBuilder.loadTexts: apLanTypeFilter.setDescription('Ethernet type to be filtered.')
apLanTypeFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 4), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTypeFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: apLanTypeFilterRowStatus.setDescription('Row status.')
apLanEthernetPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanEthernetPort.setStatus('current')
if mibBuilder.loadTexts: apLanEthernetPort.setDescription('The Subnet to which the LAN ethernet port is mapped.')
apLanBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23), )
if mibBuilder.loadTexts: apLanBridgeTable.setStatus('current')
if mibBuilder.loadTexts: apLanBridgeTable.setDescription('Table for Bridge Spanning Tree for a Subnet.')
apLanBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1), )
ccSubnetEntry.registerAugmentions(("SYMBOL-AP-MIB", "apLanBridgeEntry"))
apLanBridgeEntry.setIndexNames(*ccSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: apLanBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: apLanBridgeEntry.setDescription(' ')
apLanBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgePriority.setStatus('current')
if mibBuilder.loadTexts: apLanBridgePriority.setDescription('Bridge Priority')
apLanBridgeMaxMsgAge = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeMaxMsgAge.setStatus('current')
if mibBuilder.loadTexts: apLanBridgeMaxMsgAge.setDescription('Bridge Max Message Age Time.')
apLanBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: apLanBridgeHelloTime.setDescription('Bridge Hello Time.')
apLanBridgeFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: apLanBridgeFwdDelay.setDescription('Bridge Forward Delay.')
apLanBridgeEntryAgeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeEntryAgeout.setStatus('current')
if mibBuilder.loadTexts: apLanBridgeEntryAgeout.setDescription('Bridge Forwarding Database Ageout value.')
apLanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24))
apLanPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: apLanPortAutoNegotiation.setDescription('Lan Ethernet Port Auto-Negotiation Value.')
apLanPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tenMbps", 0), ("hundredMbps", 1), ("oneGbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanPortSpeed.setStatus('current')
if mibBuilder.loadTexts: apLanPortSpeed.setDescription('Lan Ethernet Port Speed Value. AP5131 does not support oneGbps.')
apLanPortDuplex = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanPortDuplex.setStatus('current')
if mibBuilder.loadTexts: apLanPortDuplex.setDescription('Lan Ethernet Port Duplex Value.')
apWnmpPing = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3))
apWnmpPingDestMu = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingDestMu.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingDestMu.setDescription("Ping Destination MU Mac Address. This address has to match one of the MU's in the ccMUInfo table.")
apWnmpPingDestAP = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingDestAP.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingDestAP.setDescription("Ping Destination AP Mac Address. This address has to match one of the AP's in apKnownApTable.")
apWnmpPingDest = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mu", 1), ("ap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingDest.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingDest.setDescription('The destination type of the ping. It can be either an MU or an AP.')
apWnmpPingNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 539))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingNum.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingNum.setDescription('Number of pings.')
apWnmpPingPacketLength = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 539))).setUnits('byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingPacketLength.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingPacketLength.setDescription('Length of the Wnmp ping packet.')
apWnmpPingPacketData = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingPacketData.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingPacketData.setDescription('The one-byte data pattern used to fill the Wnmp ping packet.')
apWnmpPingAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingAction.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingAction.setDescription('Start and stop ping. Switching from stop to start state will reset apWnmpPingNumResponses to 0.')
apWnmpPingNumResponses = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWnmpPingNumResponses.setStatus('current')
if mibBuilder.loadTexts: apWnmpPingNumResponses.setDescription('Number of ping responses received from the destination.')
apFlashLed = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 4))
apFlashLedDestAP = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 4, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlashLedDestAP.setStatus('current')
if mibBuilder.loadTexts: apFlashLedDestAP.setDescription("Led flash destination AP Mac Address. This address has to match one of the AP's in apKnownApTable.")
apFlashLedAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlashLedAction.setStatus('current')
if mibBuilder.loadTexts: apFlashLedAction.setDescription('Turn the led action on or off.')
apKnownAPList = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5))
apKnownApTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1), )
if mibBuilder.loadTexts: apKnownApTable.setStatus('current')
if mibBuilder.loadTexts: apKnownApTable.setDescription('Table of Known AP Lists.')
apKnownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apKnownApIndex"))
if mibBuilder.loadTexts: apKnownApEntry.setStatus('current')
if mibBuilder.loadTexts: apKnownApEntry.setDescription(' ')
apKnownApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apKnownApIndex.setStatus('current')
if mibBuilder.loadTexts: apKnownApIndex.setDescription('Simple Index.')
apKnownApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApMac.setStatus('current')
if mibBuilder.loadTexts: apKnownApMac.setDescription('MAC Address of the LAN port')
apKnownApIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApIp.setStatus('current')
if mibBuilder.loadTexts: apKnownApIp.setDescription('IP Address of the LAN port')
apKnownApChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApChannel1.setStatus('current')
if mibBuilder.loadTexts: apKnownApChannel1.setDescription('Channel for Radio1 in Dual Radio setup')
apKnownApChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApChannel2.setStatus('current')
if mibBuilder.loadTexts: apKnownApChannel2.setDescription('Channel for Radio2 in Dual Radio setup')
apKnownApMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApMu.setStatus('current')
if mibBuilder.loadTexts: apKnownApMu.setDescription('Number of MUs associated.')
apKnownApKbPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApKbPerSec.setStatus('current')
if mibBuilder.loadTexts: apKnownApKbPerSec.setDescription('Kilo Bytes in/out per second.')
apKnownApPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: apKnownApPktsPerSec.setDescription('The number of combined input and output packets per sec')
apKnownApRadioType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("radioA", 1), ("radioB", 2), ("radioBG", 3), ("radioFH", 4), ("radioN", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadioType1.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadioType1.setDescription('Radio Type of the first radio in Dual Radio setup')
apKnownApRadioType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("radioA", 1), ("radioB", 2), ("radioBG", 3), ("radioFH", 4), ("radioN", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadioType2.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadioType2.setDescription('Radio Type of the second radio in Dual Radio setup')
apKnownApType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("ap5131", 1), ("ap4131", 2), ("ap41x1", 3), ("ap302x", 4), ("ap71x1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApType.setStatus('current')
if mibBuilder.loadTexts: apKnownApType.setDescription('Hardware Type.')
apKnownApFwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApFwVers.setStatus('current')
if mibBuilder.loadTexts: apKnownApFwVers.setDescription('Firmware Version')
apKnownApUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApUnitName.setStatus('current')
if mibBuilder.loadTexts: apKnownApUnitName.setDescription('System Name.')
apKnownApEssName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApEssName.setStatus('current')
if mibBuilder.loadTexts: apKnownApEssName.setDescription('ESSID of the particular WLAN.')
apKnownApSendCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 15), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKnownApSendCfg.setStatus('current')
if mibBuilder.loadTexts: apKnownApSendCfg.setDescription('Copy Configuration file button. When set to 1 the config file of our AP shall be copied onto the Known AP specified.')
apKnownApSendCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApSendCfgStatus.setStatus('current')
if mibBuilder.loadTexts: apKnownApSendCfgStatus.setDescription('Whether a copy cfg operation succeeded. ')
apKnownApRadio1ClientBridgeMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 17), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac1.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac1.setDescription('Client Bridge MAC Address 1 on Radio 1.')
apKnownApRadio1ClientBridgeMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 18), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac2.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac2.setDescription('Client Bridge MAC Address 2 on Radio 1.')
apKnownApRadio1ClientBridgeMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 19), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac3.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac3.setDescription('Client Bridge MAC Address 3 on Radio 1.')
apKnownApRadio2ClientBridgeMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 20), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac1.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac1.setDescription('Client Bridge MAC Address 1 on Radio 2.')
apKnownApRadio2ClientBridgeMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 21), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac2.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac2.setDescription('Client Bridge MAC Address 2 on Radio 2.')
apKnownApRadio2ClientBridgeMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac3.setStatus('current')
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac3.setDescription('Client Bridge MAC Address 3 on Radio 2.')
apAap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6))
apAapSwitchAutoDiscoveryEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchAutoDiscoveryEnable.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchAutoDiscoveryEnable.setDescription('The value true means Hybrid AP Switch Auto Discovery is enabled and false means it is disabled.')
apAapSwitchDiscoveryInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("lan1", 2), ("lan2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryInterface.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryInterface.setDescription('Hybrid AP Switch Discovery Interface.')
apAapSwitchDiscoveryIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3), )
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressTable.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressTable.setDescription('Table of static IP addresses used in Switch Discovery for Hybrid AP. ')
apAapSwitchDiscoveryIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddressIndex"))
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressEntry.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressEntry.setDescription('apSwitchDiscoveryIPAddressEntry')
apAapSwitchDiscoveryIPAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressIndex.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressIndex.setDescription('Simple Index (1...6)')
apAapSwitchDiscoveryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddress.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddress.setDescription('Hybrid AP Switch Discovery IP Address.')
apAapSwitchDiscoveryIPAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destroy", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressRowStatus.setDescription('Simple Row Status.')
apAapSwitchDiscoveryDomainName = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryDomainName.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryDomainName.setDescription('Hybrid AP Switch Discovery Domain Name.')
apAapSwitchDiscoveryPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryPort.setStatus('current')
if mibBuilder.loadTexts: apAapSwitchDiscoveryPort.setDescription('Hybrid AP Switch Discovery Port.')
apAapPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 6), Password().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapPassphrase.setStatus('current')
if mibBuilder.loadTexts: apAapPassphrase.setDescription('Hybrid AP Passphrase. Before the AP sends the first packet to request mode and configuration, the switch and the AP should establish a secure link with this pre-shared key or passphrase.')
apAapTunnelToSwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapTunnelToSwitchEnable.setStatus('current')
if mibBuilder.loadTexts: apAapTunnelToSwitchEnable.setDescription('This boolean is used by the AP to determine if it needs to establish a secure IPSEC tunnel to the switch.')
apAapAcKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapAcKeepAlive.setStatus('current')
if mibBuilder.loadTexts: apAapAcKeepAlive.setDescription('AC Keepalive Period.')
apAapAdoptionState = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standAlone", 1), ("waiting", 2), ("adoptionFailed", 3), ("adopted", 4), ("connectionLoss", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAapAdoptionState.setStatus('current')
if mibBuilder.loadTexts: apAapAdoptionState.setDescription('The adoption state of the hybrid AP.')
apAapAdoptingSwitchIP = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAapAdoptingSwitchIP.setStatus('current')
if mibBuilder.loadTexts: apAapAdoptingSwitchIP.setDescription('The IP address of the switch that has currently adopted this hybrid AP. If the AP is not adopted it gives the IP address of the switch that last adopted the AP. This value is null if the AP has never been adopted.')
apNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6))
apMuVlan = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1)).setObjects(("SYMBOL-AP-MIB", "apTrapMuMac"), ("SYMBOL-AP-MIB", "apTrapRadioMac"), ("SYMBOL-AP-MIB", "apTrapVlanId"))
if mibBuilder.loadTexts: apMuVlan.setStatus('current')
if mibBuilder.loadTexts: apMuVlan.setDescription('A MU has been associated with this Radio Address.')
apLanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 2)).setObjects(("SYMBOL-AP-MIB", "apTrapLanMonitorMode"), ("SYMBOL-AP-MIB", "apTrapLanMonitorReason"))
if mibBuilder.loadTexts: apLanMonitor.setStatus('current')
if mibBuilder.loadTexts: apLanMonitor.setDescription('Radios are either been SHUTTING DOWN or RESTORING because of a certain activity at LAN Port.')
apWpaCounterMeasure = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 3)).setObjects(("SYMBOL-AP-MIB", "apTrapWpaCounterMeasureEssid"))
if mibBuilder.loadTexts: apWpaCounterMeasure.setStatus('current')
if mibBuilder.loadTexts: apWpaCounterMeasure.setDescription('When a subsequent MIC failure occurs within 60 seconds of the preceding failure, the AP will disassociate all associated STAs. The AP will not deliver any class 3 TKIP encrypted data frames to or from any peer as well as disallow new associations for a period of 60 seconds.')
apMuHotspotState = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 4)).setObjects(("SYMBOL-AP-MIB", "apTrapCtrlMuMac"), ("SYMBOL-AP-MIB", "apTrapCtrlMuHotspotStateChange"))
if mibBuilder.loadTexts: apMuHotspotState.setStatus('current')
if mibBuilder.loadTexts: apMuHotspotState.setDescription('An MU is either Authenticated or Deauthenticated on a Hotspot enabled WLAN. Upon authenticating with a Radius Server the state of the MU is changed from HOTSPOT to DATA_READY and the vice versa upon Time out or Logging out of that particular MU.')
apDynDNSUpdate = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 5)).setObjects(("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateIp"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateHostname"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateStatus"))
if mibBuilder.loadTexts: apDynDNSUpdate.setStatus('current')
if mibBuilder.loadTexts: apDynDNSUpdate.setDescription('A DynDNS Update has been sent to DynDns.org')
apTrapCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000))
apTrapCtrlEnableTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1), )
if mibBuilder.loadTexts: apTrapCtrlEnableTable.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlEnableTable.setDescription('Table of Trap Enable entries.')
apTrapCtrlEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apTrapCtrlEnableIndex"))
if mibBuilder.loadTexts: apTrapCtrlEnableEntry.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlEnableEntry.setDescription(' ')
apTrapCtrlEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlEnableIndex.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlEnableIndex.setDescription('Simple Index.')
apTrapCtrlEnableName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlEnableName.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlEnableName.setDescription('Name of the Trap.')
apTrapCtrlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlEnable.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlEnable.setDescription('Enable/Disbale a particular Trap.')
apTrapCtrlRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlRateLimit.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlRateLimit.setDescription('The max rate at which SNMP traps/notifications will be sent from the switch. If the switch detects a particular condition and it has NOT been at least this many seconds since the last trap/notification, this current event will NOT result in a trap/notification. If this value is set to 0, every such event results in a trap/notification. Factory-default state is 10 [seconds]. ')
apTrapCtrlSumStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3))
apTrapCtrlSumStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1), )
if mibBuilder.loadTexts: apTrapCtrlSumStatsTable.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsTable.setDescription("This table configures thresholds that can be monitored for - all MUs and/or - all Portals and/or - all WLANs and/or - for the entire switch When a given threshold is crossed, it generates the appropriate corresponding notification, (ccSumStats_: _MU, _Portal, _WLAN, or _Switch). Some thresholds result in notifications when exceeded, and some when the current value sinks below the threshold. This is indicated by the wording of the entry in the entry's _Descr value. In all cases, the summary stat being monitored is the Short value, never the Long value. Note that for thresholds of type thresholdsAvgMuSignal & thresholdsAvgMuNoise, the values being 'watched' are actually negative. In these cases the threshold is specified as a Unsigned32. For example, if you wish to trap on Signal being worse than -75dBm, enter '70'. This works since a user would never want to trap on a threshold of Sinal worse than +10dBm. (SNR is not an issue, since that is a positive value). Any values reported as var-binds in the resultant trap(s) are likewise reported as positive values.")
apTrapCtrlSumStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apTrapCtrlSumStatsIndex"))
if mibBuilder.loadTexts: apTrapCtrlSumStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsEntry.setDescription('The rows/instances in this table occur at the exact same indices as the corresponding monitored data occurs in the _SumStats tables. For example, row #2 / instance .2 represents the threshold(s) for the _PktsPerSec values for MU, Portal, WLAN, and Switch. If a given threshold does not make sense for one of those 4 entities, its corresponding TruthValue will be false.')
apTrapCtrlSumStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("unusedTimestamp", 1), ("unusedNumPkts", 2), ("thresholdsPktsPerSec", 3), ("unusedPktsPerSecTx", 4), ("unusedPktsPerSecRx", 5), ("thresholdsThroughput", 6), ("unusedThroughputTx", 7), ("unusedThroughputRx", 8), ("thresholdsAvgBitSpeed", 9), ("thresholdsAvgMuSignal", 10), ("thresholdsAvgMuNoise", 11), ("thresholdsAvgMuSnr", 12), ("thresholdsPctNUcastPkts", 13), ("thresholdsPpmTxWithRetires", 14), ("thresholdsPpmTxDropped", 15), ("thresholdsTxAvgRetries", 16), ("thresholdsPpmRxUndecrypt", 17), ("thresholdsTotalMus", 18), ("thresholdsPctRfUtil", 19), ("thresholdsPctDropped", 20)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlSumStatsIndex.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsIndex.setDescription('Index into table. Note that specific thresholds occur at specific instance values as denoted by the enumeration values assigned to this variable.')
apTrapCtrlSumStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsDescr.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsDescr.setDescription('Description of the threshold.')
apTrapCtrlSumStatsUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsUnits.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsUnits.setDescription('Units of the threshold.')
apTrapCtrlSumStatsCanBeSetMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetMu.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetMu.setDescription('If true, the threshold can be set for MUs. If false, attempting the threshold will return a READ-ONLY.')
apTrapCtrlSumStatsThresholdMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdMu.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdMu.setDescription('The threshold for all MUs. If 0, no threshold checking is performed.( multipled by 100)')
apTrapCtrlSumStatsCanBeSetRadioA = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioA.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioA.setDescription('If true, the threshold can be set for radio a. If false, attempting the threshold will return a READ-ONLY. Note that this object does not apply to 802.11n radios. Please use either apTrapCtrlSumStatsCanBeSetRadioN2400MHz or apTrapCtrlSumStatsCanBeSetRadioN5000MHz for 802.11n radios.')
apTrapCtrlSumStatsThresholdRadioA = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioA.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioA.setDescription("The threshold for radio a. If 0, no threshold checking is performed.( multipled by 100, except for 'No. of MUs associated', index 9) Note that this object does not apply to 802.11n radios. Please use either apTrapCtrlSumStatsThresholdRadioN2400MHz or apTrapCtrlSumStatsThresholdRadioN5000MHz for 802.11n radios.")
apTrapCtrlSumStatsCanBeSetRadioBG = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioBG.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioBG.setDescription('If true, the threshold can be set for radio b/g. If false, attempting the threshold will return a READ-ONLY. Note that this object does not apply to 802.11n radios. Please use either apTrapCtrlSumStatsCanBeSetRadioN2400MHz or apTrapCtrlSumStatsCanBeSetRadioN5000MHz for 802.11n radios.')
apTrapCtrlSumStatsThresholdRadioBG = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioBG.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioBG.setDescription("The threshold for radio b/g. If 0, no threshold checking is performed.( multipled by 100, except for 'No. of MUs associated', index 9) Note that this object does not apply to 802.11n radios. Please use either apTrapCtrlSumStatsThresholdRadioN2400MHz or apTrapCtrlSumStatsThresholdRadioN5000MHz for 802.11n radios.")
apTrapCtrlSumStatsCanBeSetWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetWlan.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetWlan.setDescription('If true, the threshold can be set for Wlans. If false, attempting the threshold will return a READ-ONLY.')
apTrapCtrlSumStatsThresholdWlans = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdWlans.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdWlans.setDescription("The threshold for all Wlans. If 0, no threshold checking is performed.( multipled by 100, except for 'No. of MUs associated', index 9)")
apTrapCtrlSumStatsCanBeSetAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetAccessPoint.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetAccessPoint.setDescription('If true, the threshold can be set for the entire access point. If false, attempting the threshold will return a READ-ONLY.')
apTrapCtrlSumStatsThresholdAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdAccessPoint.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdAccessPoint.setDescription("The threshold for the entire Access Point. If 0, no threshold checking is performed.( multipled by 100, except for 'No. of MUs associated', index 9)")
apTrapCtrlSumStatsCanBeSetRadioN5000MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioN5000MHz.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioN5000MHz.setDescription('If true, the threshold can be set for radio n, 5.0 GHz frequency band. If false, attempting the threshold will return a READ-ONLY.')
apTrapCtrlSumStatsThresholdRadioN5000MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioN5000MHz.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioN5000MHz.setDescription("The threshold for radio n, 5.0 GHz frequency band. If 0, no threshold checking is performed.( multipled by 100, except for 'No. of MUs associated', index 9).")
apTrapCtrlSumStatsCanBeSetRadioN2400MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioN2400MHz.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioN2400MHz.setDescription('If true, the threshold can be set for radio n, 2.4 GHz frequency band. If false, attempting the threshold will return a READ-ONLY.')
apTrapCtrlSumStatsThresholdRadioN2400MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioN2400MHz.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioN2400MHz.setDescription("The threshold for radio n, 2.4 GHz frequency band. If 0, no threshold checking is performed.( multipled by 100, except for 'No. of MUs associated', index 9).")
apTrapMuVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4))
apTrapMuMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4, 1), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapMuMac.setStatus('current')
if mibBuilder.loadTexts: apTrapMuMac.setDescription('MU that has been associated.')
apTrapRadioMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4, 2), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapRadioMac.setStatus('current')
if mibBuilder.loadTexts: apTrapRadioMac.setDescription('Radio to be which MU has been associated.')
apTrapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapVlanId.setStatus('current')
if mibBuilder.loadTexts: apTrapVlanId.setDescription('Dynamic VLAN ID assigned to the MU.')
apTrapLanMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 5))
apTrapLanMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radioShutdown", 1), ("radioRestore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapLanMonitorMode.setStatus('current')
if mibBuilder.loadTexts: apTrapLanMonitorMode.setDescription('Action taken by the Radios either Shutting Down or Restoring Up.')
apTrapLanMonitorReason = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("hardwareDetect", 2), ("timeout", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapLanMonitorReason.setStatus('current')
if mibBuilder.loadTexts: apTrapLanMonitorReason.setDescription('Activity at the LAN port which caused this event to happen.')
apTrapWpaCounterMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 6))
apTrapWpaCounterMeasureEssid = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 6, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapWpaCounterMeasureEssid.setStatus('current')
if mibBuilder.loadTexts: apTrapWpaCounterMeasureEssid.setDescription('ESSID for which MIC failure happened.')
apTrapCtrlMuHotspotState = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 7))
apTrapCtrlMuMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 7, 1), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlMuMac.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlMuMac.setDescription('The MAC Address of the MU which undergoes a state changed on a Hotspot enabled WLAN.')
apTrapCtrlMuHotspotStateChange = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fromHotspotToDataReady", 1), ("fromDataReadyToHotspot", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlMuHotspotStateChange.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlMuHotspotStateChange.setDescription('The change in the state of an MU associated on a Hotspot enabled WLAN.')
apTrapCtrlDynDNSUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8))
apTrapCtrlDynDNSUpdateIp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateIp.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateIp.setDescription('Description.')
apTrapCtrlDynDNSUpdateHostname = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateHostname.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateHostname.setDescription('Description.')
apTrapCtrlDynDNSUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateStatus.setDescription('Description.')
apRap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 7))
apRapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1))
apRapControlDetectors = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1, 1))
apRapDetectorMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scanDisable", 1), ("scanA", 2), ("scanBG", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRapDetectorMode.setStatus('current')
if mibBuilder.loadTexts: apRapDetectorMode.setDescription('Detector Mode and Band for RF scan. It can either be specified to A band or BG band. This setting does not apply to 802.11n radios.')
apRapDetectorABGMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRapDetectorABGMode.setStatus('current')
if mibBuilder.loadTexts: apRapDetectorABGMode.setDescription('Detector Mode to scan both A and BG Bands. apRapDetectorMode is used to determine which radio to use. This setting does not apply to 802.11n radios.')
apLoadCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 8))
apLoadCfgOperation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unspecified", 1), ("ftpConfigServerToAP", 2), ("ftpConfigAPToServer", 3), ("tftpConfigServerToAP", 4), ("tftpConfigAPToServer", 5), ("sftpConfigServerToAP", 6), ("sftpConfigAPToServer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgOperation.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgOperation.setDescription('Specifies the type and direction of the transfer to perform involving the configuration file.')
apLoadCfgServerPath = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgServerPath.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgServerPath.setDescription("The path to the firmware on the SFTP/TFTP/FTP server. Remember that the type of separator varies depending on the operating system of the server. For Windows, use '\\', for Unix use '/'. No path need be specified, (in which case the default directory for the SFTP/TFTP/FTP server will be used); if a path is specified, remember to terminate it with a trailing '/' or '\\'.")
apLoadCfgServerFilename = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgServerFilename.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgServerFilename.setDescription('The name, (on the server), of the configuration file to load/store from/to the server.')
apLoadCfgServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgServerIpAddr.setDescription('IP address of the server used for a configuration file load/store operation.')
apLoadCfgFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgFtpUsername.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgFtpUsername.setDescription('Username for FTP LoadCfg operations.')
apLoadCfgFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgFtpPassword.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgFtpPassword.setDescription('Password for FTP LoadCfg operations.')
apLoadCfgStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgStart.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgStart.setDescription('Set this value to start the configuration file operation. Note that unlike a firmware load, the actual FTP/TFTP/SFTP transfer does begin virtually immediately.')
apLoadCfgOperationsDone = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadCfgOperationsDone.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgOperationsDone.setDescription('This value counts the total number of configuration file transfers completed, (whether they succeed or fail). The SNMP manager should save the value of this counter just before starting a LoadCfg operation, and then wait for this value to increment before checking the Result and/or Success values.')
apLoadCfgResult = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadCfgResult.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgResult.setDescription('This value reflects the result of the most-recent configuration file load/store.')
apLoadCfgSuccess = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadCfgSuccess.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgSuccess.setDescription('The success/failure status of the most recent configuration file load/store.')
apStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9))
apWanClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 1), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanClearStats.setStatus('current')
if mibBuilder.loadTexts: apWanClearStats.setDescription('Clear the WAN stats.')
apLanClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanClearStats.setStatus('current')
if mibBuilder.loadTexts: apLanClearStats.setDescription('Clear the LAN stats. For clearing LAN1 stats set to lan1 (1) and for clearing LAN2 stats set to lan2 (2).')
apRadioClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioClearStats.setStatus('current')
if mibBuilder.loadTexts: apRadioClearStats.setDescription('Clear the Radio stats.')
apWlanClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanClearStats.setStatus('current')
if mibBuilder.loadTexts: apWlanClearStats.setDescription('Clear the WLAN stats.')
apMuClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 5), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuClearStats.setStatus('current')
if mibBuilder.loadTexts: apMuClearStats.setDescription('Clear the MU stats.')
apKnownAPClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 6), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKnownAPClearStats.setStatus('current')
if mibBuilder.loadTexts: apKnownAPClearStats.setDescription('Clear the Known AP List.')
apWirelessAPStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7))
apMeshStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1), )
if mibBuilder.loadTexts: apMeshStatsTable.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsTable.setDescription('MESH Bridge Statistics')
apMeshStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMeshStatsIndex"))
if mibBuilder.loadTexts: apMeshStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsEntry.setDescription(' ')
apMeshStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apMeshStatsIndex.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsIndex.setDescription('Simple Index.')
apMeshStatsConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("baseBridge", 2), ("clientBridge", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsConnType.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsConnType.setDescription('MESH Connection Type.')
apMeshStatsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsMac.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsMac.setDescription('MAC Address.')
apMeshStatsWlanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 4), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsWlanPtr.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsWlanPtr.setDescription('WLAN Pointer.')
apMeshStatsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11bg", 2), ("dot11n2400MHz", 3), ("dot11n5000MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsRadioType.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsRadioType.setDescription("Radio Type. 'dot11a' means an 802.11a standard radio that uses the 5GHz band. 'dot11bg' means an 802.11b and 802.11g standards radio that uses the 2.4 GHz band. 'dot11n' means an 802.11n radio can use both 2.4 GHz and/or 5 GHz bands.")
apMeshStatsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsThroughput.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsThroughput.setDescription('Throughput (x 100).')
apMeshStatsAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsAvgBitSpeed.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsAvgBitSpeed.setDescription('Average Bit Speed (x 100).')
apMeshStatsRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsRetries.setStatus('current')
if mibBuilder.loadTexts: apMeshStatsRetries.setDescription('Retries (x 100).')
apMeshBridgeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2), )
if mibBuilder.loadTexts: apMeshBridgeStatsTable.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsTable.setDescription('MESH Wireless Bridge Statistics.')
apMeshBridgeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMeshBridgeStatsIndex"))
if mibBuilder.loadTexts: apMeshBridgeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsEntry.setDescription(' ')
apMeshBridgeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apMeshBridgeStatsIndex.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsIndex.setDescription('Simple Index.')
apMeshBridgeStatsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsMac.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsMac.setDescription('MAC Address.')
apMeshBridgeStatsWlanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 3), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsWlanPtr.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsWlanPtr.setDescription('WLAN Pointer.')
apMeshBridgeStatsLanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 4), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsLanPtr.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsLanPtr.setDescription('LAN Pointer.')
apMeshBridgeStatsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11bg", 2), ("dot11n2400MHz", 3), ("dot11n5000MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsRadioType.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsRadioType.setDescription("Radio Type. 'dot11a' means an 802.11a standard radio that uses the 5GHz band. 'dot11bg' means an 802.11b and 802.11g standards radio that uses the 2.4 GHz band. 'dot11n' means an 802.11n radio can use both 2.4 GHz and/or 5 GHz bands.")
apMeshBridgeStatsAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eap", 2), ("kerberos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAuthType.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsAuthType.setDescription('Authentication method.')
apMeshBridgeStatsEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("wep64", 2), ("wep128", 3), ("keyguard", 4), ("wpaTkip", 5), ("wpa2Ccmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsEncType.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsEncType.setDescription('Encryption method.')
apMeshBridgeStatsPktsPerSecRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPktsPerSecRx.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsPktsPerSecRx.setDescription('Packets received per second.')
apMeshBridgeStatsPksPerSecTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPksPerSecTx.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsPksPerSecTx.setDescription('Packets transmitted per second.')
apMeshBridgeStatsPktsPerSecTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPktsPerSecTotal.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsPktsPerSecTotal.setDescription('Total Packets per second.')
apMeshBridgeStatsThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputRx.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputRx.setDescription('Throughput received (x 100).')
apMeshBridgeStatsThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputTx.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputTx.setDescription('Throughput transmitted (x 100).')
apMeshBridgeStatsThroughputTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputTotal.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputTotal.setDescription('Total Throughput (x 100).')
apMeshBridgeStatsAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgBitSpeed.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsAvgBitSpeed.setDescription('Average Bit Speed (x 100).')
apMeshBridgeStatsAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuSignal.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuSignal.setDescription('Average MU Signal (x 100).')
apMeshBridgeStatsAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuNoise.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuNoise.setDescription('Average MU Noise (x 100).')
apMeshBridgeStatsAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuSnr.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuSnr.setDescription('Average MU Signal to Noise ratio (x 100).')
apMeshBridgeStatsAvgRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgRetries.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsAvgRetries.setDescription('Average Retries (x 100).')
apMeshBridgeStatsPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPktsDropped.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsPktsDropped.setDescription('Percentage of Packets dropped (x 100).')
apMeshBridgeStatsUndecryptablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsUndecryptablePkts.setStatus('current')
if mibBuilder.loadTexts: apMeshBridgeStatsUndecryptablePkts.setDescription('Percentage of Undecryptable Packets (x 100).')
apLanSTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3), )
if mibBuilder.loadTexts: apLanSTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsTable.setDescription('Table of LAN Spanning Tree Statistics.')
apLanSTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1), )
ccSubnetEntry.registerAugmentions(("SYMBOL-AP-MIB", "apLanSTPStatsEntry"))
apLanSTPStatsEntry.setIndexNames(*ccSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: apLanSTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsEntry.setDescription(' ')
apLanSTPStatsDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsDesignatedRoot.setDescription('Designated Root.')
apLanSTPStatsBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeId.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsBridgeId.setDescription('Bridge ID.')
apLanSTPStatsRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsRootPort.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsRootPort.setDescription('Root Port.')
apLanSTPStatsRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsRootPathCost.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsRootPathCost.setDescription('Root Path Cost.')
apLanSTPStatsBridgeMaxMsgAge = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeMaxMsgAge.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsBridgeMaxMsgAge.setDescription('Bridge Max Message Age.')
apLanSTPStatsBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsBridgeHelloTime.setDescription('Bridge Hello Time.')
apLanSTPStatsBridgeFwDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeFwDelay.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsBridgeFwDelay.setDescription('Bridge Forward Delay.')
apLanSTPStatsPortIntfTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4), )
if mibBuilder.loadTexts: apLanSTPStatsPortIntfTable.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfTable.setDescription('Table of LAN Spanning Tree Port Interface Statistics.')
apLanSTPStatsPortIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanSTPStatsPortIntfLanIndex"), (0, "SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPortIndex"))
if mibBuilder.loadTexts: apLanSTPStatsPortIntfEntry.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfEntry.setDescription(' ')
apLanSTPStatsPortIntfLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfLanIndex.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfLanIndex.setDescription('LAN index.')
apLanSTPStatsPortIntfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPortIndex.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPortIndex.setDescription('Port Index.')
apLanSTPStatsPortIntfPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPortName.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPortName.setDescription('Port Name.')
apLanSTPStatsPortIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("blocking", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfState.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfState.setDescription('State of the Port.')
apLanSTPStatsPortIntfPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPathCost.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPathCost.setDescription('Path Cost.')
apLanSTPStatsPortIntfDsgRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgRoot.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgRoot.setDescription('Designated Root.')
apLanSTPStatsPortIntfDsgBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgBridge.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgBridge.setDescription('Designated Bridge.')
apLanSTPStatsPortIntfDsgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgPort.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgPort.setDescription('Designated Port.')
apLanSTPStatsPortIntfDsgCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgCost.setStatus('current')
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgCost.setDescription('Designated Cost.')
apnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8))
apnRadioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1), )
if mibBuilder.loadTexts: apnRadioStatsTable.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsTable.setDescription('APN radio statistics table.')
apnRadioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apnRadioStatsIndex"))
if mibBuilder.loadTexts: apnRadioStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsEntry.setDescription('APN radio statistics entry.')
apnRadioStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsIndex.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsIndex.setDescription('A simple integer index to the apnRadioStatsTable.')
apnRadioStatsBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsBssid.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsBssid.setDescription('The BSSID (MAC address) of the radio.')
apnRadioStatsApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsApSsid.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsApSsid.setDescription('The SSID of the AP.')
apnRadioStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsChannel.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsChannel.setDescription('The channel number for the radio.')
apnRadioStatsExtnChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsExtnChannel.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsExtnChannel.setDescription('The extension channel for the radio, when in 40MHz.')
apnRadioStatsRssiAvgAcrossAntennas = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsRssiAvgAcrossAntennas.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsRssiAvgAcrossAntennas.setDescription('The average RSSI of all the antennas combined together.')
apnRadioStatsChannelWidthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twentyMHz", 1), ("fortyMHz", 2), ("pco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsChannelWidthMode.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsChannelWidthMode.setDescription('The channel bandwidth mode for the radio.')
apnRadioStatsOpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("freq2400MHz", 1), ("freq5000MHz", 2), ("freq2400MHzAnd5000MHz", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsOpFreq.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsOpFreq.setDescription('The operational frequency for the radio.')
apnRadioStatsNumPktsRxSGI400ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxSGI400ns.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxSGI400ns.setDescription('Number of packets received by this radio with Short Guard Interval of 400ns.')
apnRadioStatsNumPktsRxSGI800ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxSGI800ns.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxSGI800ns.setDescription('Number of packets received by this radio with Short Guard Interval of 800ns.')
apnRadioStatsNumPktsTxSGI400ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxSGI400ns.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxSGI400ns.setDescription('Number of packets transmitted by this radio with Short Guard Interval of 400ns.')
apnRadioStatsNumPktsTxSGI800ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxSGI800ns.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxSGI800ns.setDescription('Number of packets transmitted by this radio with Short Guard Interval of 800ns.')
apnRadioStatsNumPktsRxChanWidth20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxChanWidth20MHz.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxChanWidth20MHz.setDescription('Number of packets received by this radio with channel width 20 MHz.')
apnRadioStatsNumPktsRxChanWidth40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxChanWidth40MHz.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxChanWidth40MHz.setDescription('Number of packets received by this radio with channel width 40 MHz.')
apnRadioStatsNumPktsTxChanWidth20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxChanWidth20MHz.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxChanWidth20MHz.setDescription('Number of packets transmitted by this radio with channel width 20 MHz.')
apnRadioStatsNumPktsTxChanWidth40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxChanWidth40MHz.setStatus('current')
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxChanWidth40MHz.setDescription('Number of packets transmitted by this radio with channel width 40 MHz.')
apnPortalRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2), )
if mibBuilder.loadTexts: apnPortalRxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsTable.setDescription('For each 802.11n Portal on the AP, this table describes counts of packets received at each speed.')
apnPortalRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalRxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsEntry.setDescription('An entry in the portal received packets table.')
apnPortalRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt1Mb.setDescription('Number of pkts received via this Portal at 1 Mbps.')
apnPortalRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt2Mb.setDescription('Number of pkts received via this Portal at 2 Mbps.')
apnPortalRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt5pt5Mb.setDescription('Number of pkts received via this Portal at 5.5 Mbps.')
apnPortalRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt6Mb.setDescription('Number of pkts received via this Portal at 6 Mbps.')
apnPortalRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt9Mb.setDescription('Number of pkts received via this Portal at 9 Mbps.')
apnPortalRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt11Mb.setDescription('Number of pkts received via this Portal at 11 Mbps.')
apnPortalRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt12Mb.setDescription('Number of pkts received via this Portal at 12 Mbps.')
apnPortalRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt18Mb.setDescription('Number of pkts received via this Portal at 18 Mbps.')
apnPortalRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt24Mb.setDescription('Number of pkts received via this Portal at 24 Mbps.')
apnPortalRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt36Mb.setDescription('Number of pkts received via this Portal at 36 Mbps.')
apnPortalRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt48Mb.setDescription('Number of pkts received via this Portal at 48 Mbps.')
apnPortalRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAt54Mb.setDescription('Number of pkts received via this Portal at 54 Mbps.')
apnPortalRxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS0.setDescription('Number of pkts received via this Portal at MCS 0 rate.')
apnPortalRxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS1.setDescription('Number of pkts received via this Portal at MCS 1 rate.')
apnPortalRxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS2.setDescription('Number of pkts received via this Portal at MCS 2 rate.')
apnPortalRxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS3.setDescription('Number of pkts received via this Portal at MCS 3 rate.')
apnPortalRxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS4.setDescription('Number of pkts received via this Portal at MCS 4 rate.')
apnPortalRxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS5.setDescription('Number of pkts received via this Portal at MCS 5 rate.')
apnPortalRxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS6.setDescription('Number of pkts received via this Portal at MCS 6 rate.')
apnPortalRxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS7.setDescription('Number of pkts received via this Portal at MCS 7 rate.')
apnPortalRxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS8.setDescription('Number of pkts received via this Portal at MCS 8 rate.')
apnPortalRxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS9.setDescription('Number of pkts received via this Portal at MCS 9 rate.')
apnPortalRxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS10.setDescription('Number of pkts received via this Portal at MCS 10 rate.')
apnPortalRxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS11.setDescription('Number of pkts received via this Portal at MCS 11 rate.')
apnPortalRxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS12.setDescription('Number of pkts received via this Portal at MCS 12 rate.')
apnPortalRxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS13.setDescription('Number of pkts received via this Portal at MCS 13 rate.')
apnPortalRxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS14.setDescription('Number of pkts received via this Portal at MCS 14 rate.')
apnPortalRxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS15.setDescription('Number of pkts received via this Portal at MCS 15 rate.')
apnPortalTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3), )
if mibBuilder.loadTexts: apnPortalTxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsTable.setDescription('For each 802.11n Portal on the AP, this table describes counts of packets transmitted at each speed.')
apnPortalTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalTxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsEntry.setDescription('An entry in the portal transmitted packets table.')
apnPortalTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt1Mb.setDescription('Number of pkts transmitted via this Portal at 1 Mbps.')
apnPortalTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt2Mb.setDescription('Number of pkts transmitted via this Portal at 2 Mbps.')
apnPortalTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt5pt5Mb.setDescription('Number of pkts transmitted via this Portal at 5.5 Mbps.')
apnPortalTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt6Mb.setDescription('Number of pkts transmitted via this Portal at 6 Mbps.')
apnPortalTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt9Mb.setDescription('Number of pkts transmitted via this Portal at 9 Mbps.')
apnPortalTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt11Mb.setDescription('Number of pkts transmitted via this Portal at 11 Mbps.')
apnPortalTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt12Mb.setDescription('Number of pkts transmitted via this Portal at 12 Mbps.')
apnPortalTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt18Mb.setDescription('Number of pkts transmitted via this Portal at 18 Mbps.')
apnPortalTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt24Mb.setDescription('Number of pkts transmitted via this Portal at 24 Mbps.')
apnPortalTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt36Mb.setDescription('Number of pkts transmitted via this Portal at 36 Mbps.')
apnPortalTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt48Mb.setDescription('Number of pkts transmitted via this Portal at 48 Mbps.')
apnPortalTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAt54Mb.setDescription('Number of pkts transmitted via this Portal at 54 Mbps.')
apnPortalTxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS0.setDescription('Number of pkts transmitted via this Portal at MCS 0 rate.')
apnPortalTxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS1.setDescription('Number of pkts transmitted via this Portal at MCS 1 rate.')
apnPortalTxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS2.setDescription('Number of pkts transmitted via this Portal at MCS 2 rate.')
apnPortalTxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS3.setDescription('Number of pkts transmitted via this Portal at MCS 3 rate.')
apnPortalTxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS4.setDescription('Number of pkts transmitted via this Portal at MCS 4 rate.')
apnPortalTxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS5.setDescription('Number of pkts transmitted via this Portal at MCS 5 rate.')
apnPortalTxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS6.setDescription('Number of pkts transmitted via this Portal at MCS 6 rate.')
apnPortalTxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS7.setDescription('Number of pkts transmitted via this Portal at MCS 7 rate.')
apnPortalTxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS8.setDescription('Number of pkts transmitted via this Portal at MCS 8 rate.')
apnPortalTxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS9.setDescription('Number of pkts transmitted via this Portal at MCS 9 rate.')
apnPortalTxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS10.setDescription('Number of pkts transmitted via this Portal at MCS 10 rate.')
apnPortalTxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS11.setDescription('Number of pkts transmitted via this Portal at MCS 11 rate.')
apnPortalTxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS12.setDescription('Number of pkts transmitted via this Portal at MCS 12 rate.')
apnPortalTxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS13.setDescription('Number of pkts transmitted via this Portal at MCS 13 rate.')
apnPortalTxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS14.setDescription('Number of pkts transmitted via this Portal at MCS 14 rate.')
apnPortalTxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS15.setDescription('Number of pkts transmitted via this Portal at MCS 15 rate.')
apnPortalRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4), )
if mibBuilder.loadTexts: apnPortalRxOctetsTable.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsTable.setDescription('For each 802.11n Portal on this AP, this table describes counts of octets received at each speed.')
apnPortalRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalRxOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsEntry.setDescription('An entry in the portal received octets table.')
apnPortalRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt1Mb.setDescription('Number of octets received via this Portal at 1 Mbps.')
apnPortalRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt2Mb.setDescription('Number of octets received via this Portal at 2 Mbps.')
apnPortalRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt5pt5Mb.setDescription('Number of octets received via this Portal at 5.5 Mbps.')
apnPortalRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt6Mb.setDescription('Number of octets received via this Portal at 6 Mbps.')
apnPortalRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt9Mb.setDescription('Number of octets received via this Portal at 9 Mbps.')
apnPortalRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt11Mb.setDescription('Number of octets received via this Portal at 11 Mbps.')
apnPortalRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt12Mb.setDescription('Number of octets received via this Portal at 12 Mbps.')
apnPortalRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt18Mb.setDescription('Number of octets received via this Portal at 18 Mbps.')
apnPortalRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt24Mb.setDescription('Number of octets received via this Portal at 24 Mbps.')
apnPortalRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt36Mb.setDescription('Number of octets received via this Portal at 36 Mbps.')
apnPortalRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt48Mb.setDescription('Number of octets received via this Portal at 48 Mbps.')
apnPortalRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAt54Mb.setDescription('Number of octets received via this Portal at 54 Mbps.')
apnPortalRxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS0.setDescription('Number of octets received via this Portal at MCS 0 rate.')
apnPortalRxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS1.setDescription('Number of octets received via this Portal at MCS 1 rate.')
apnPortalRxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS2.setDescription('Number of octets received via this Portal at MCS 2 rate.')
apnPortalRxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS3.setDescription('Number of octets received via this Portal at MCS 3 rate.')
apnPortalRxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS4.setDescription('Number of octets received via this Portal at MCS 4 rate.')
apnPortalRxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS5.setDescription('Number of octets received via this Portal at MCS 5 rate.')
apnPortalRxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS6.setDescription('Number of octets received via this Portal at MCS 6 rate.')
apnPortalRxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS7.setDescription('Number of octets received via this Portal at MCS 7 rate.')
apnPortalRxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS8.setDescription('Number of octets received via this Portal at MCS 8 rate.')
apnPortalRxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS9.setDescription('Number of octets received via this Portal at MCS 9 rate.')
apnPortalRxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS10.setDescription('Number of octets received via this Portal at MCS 10 rate.')
apnPortalRxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS11.setDescription('Number of octets received via this Portal at MCS 11 rate.')
apnPortalRxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS12.setDescription('Number of octets received via this Portal at MCS 12 rate.')
apnPortalRxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS13.setDescription('Number of octets received via this Portal at MCS 13 rate.')
apnPortalRxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS14.setDescription('Description.Number of octets received via this Portal at MCS 14 rate.')
apnPortalRxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS15.setDescription('Number of octets received via this Portal at MCS 15 rate.')
apnPortalTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5), )
if mibBuilder.loadTexts: apnPortalTxOctetsTable.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsTable.setDescription('For each 802.11n Portal on this AP, this table describes counts of octets transmitted at each speed.')
apnPortalTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalTxOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsEntry.setDescription('An entry in the portal transmitted octets table.')
apnPortalTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt1Mb.setDescription('Number of octets transmitted via this Portal at 1 Mbps.')
apnPortalTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt2Mb.setDescription('Number of octets transmitted via this Portal at 2 Mbps.')
apnPortalTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt5pt5Mb.setDescription('Number of octets transmitted via this Portal at 5.5 Mbps.')
apnPortalTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt6Mb.setDescription('Number of octets transmitted via this Portal at 6 Mbps.')
apnPortalTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt9Mb.setDescription('Number of octets transmitted via this Portal at 9 Mbps.')
apnPortalTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt11Mb.setDescription('Number of octets transmitted via this Portal at 11 Mbps.')
apnPortalTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt12Mb.setDescription('Number of octets transmitted via this Portal at 12 Mbps.')
apnPortalTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt18Mb.setDescription('Number of octets transmitted via this Portal at 18 Mbps.')
apnPortalTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt24Mb.setDescription('Number of octets transmitted via this Portal at 24 Mbps.')
apnPortalTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt36Mb.setDescription('Number of octets transmitted via this Portal at 36 Mbps.')
apnPortalTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt48Mb.setDescription('Number of octets transmitted via this Portal at 48 Mbps.')
apnPortalTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAt54Mb.setDescription('Number of octets transmitted via this Portal at 54 Mbps.')
apnPortalTxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS0.setDescription('Number of octets transmitted via this Portal at MCS 0 rate.')
apnPortalTxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS1.setDescription('Number of octets transmitted via this Portal at MCS 1 rate.')
apnPortalTxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS2.setDescription('Number of octets transmitted via this Portal at MCS 2 rate.')
apnPortalTxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS3.setDescription('Number of octets transmitted via this Portal at MCS 3 rate.')
apnPortalTxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS4.setDescription('Number of octets transmitted via this Portal at MCS 4 rate.')
apnPortalTxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS5.setDescription('Number of octets transmitted via this Portal at MCS 5 rate.')
apnPortalTxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS6.setDescription('Number of octets transmitted via this Portal at MCS 6 rate.')
apnPortalTxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS7.setDescription('Number of octets transmitted via this Portal at MCS 7 rate.')
apnPortalTxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS8.setDescription('Number of octets transmitted via this Portal at MCS 8 rate.')
apnPortalTxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS9.setDescription('Number of octets transmitted via this Portal at MCS 9 rate.')
apnPortalTxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS10.setDescription('Number of octets transmitted via this Portal at MCS 10 rate.')
apnPortalTxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS11.setDescription('Number of octets transmitted via this Portal at MCS 11 rate.')
apnPortalTxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS12.setDescription('Number of octets transmitted via this Portal at MCS 12 rate.')
apnPortalTxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS13.setDescription('Number of octets transmitted via this Portal at MCS 13 rate.')
apnPortalTxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS14.setDescription('Number of octets transmitted via this Portal at MCS 14 rate.')
apnPortalTxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS15.setDescription('Number of octets transmitted via this Portal at MCS 15 rate.')
apnMuRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6), )
if mibBuilder.loadTexts: apnMuRxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsTable.setDescription('For each mobile unit associated to an 802.11n Portal on the AP, this table describes counts of packets received at each speed.')
apnMuRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuRxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsEntry.setDescription(' ')
apnMuRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt1Mb.setDescription('Number of pkts received via this Portal at 1 and 2 Mbps.')
apnMuRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt2Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnMuRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt5pt5Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnMuRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt6Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt9Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps.')
apnMuRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt11Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt12Mb.setDescription('Number of pkts received via this Portal at MCS 0 to 7 rates.')
apnMuRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt18Mb.setDescription('Description.')
apnMuRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt24Mb.setDescription('Description.')
apnMuRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt36Mb.setDescription('Description.')
apnMuRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt48Mb.setDescription('Description.')
apnMuRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAt54Mb.setDescription('Description.')
apnMuRxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS0.setDescription('Description.')
apnMuRxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS1.setDescription('Description.')
apnMuRxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS2.setDescription('Description.')
apnMuRxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS3.setDescription('Description.')
apnMuRxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS4.setDescription('Description.')
apnMuRxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS5.setDescription('Description.')
apnMuRxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS6.setDescription('Description.')
apnMuRxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS7.setDescription('Description.')
apnMuRxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS8.setDescription('Description.')
apnMuRxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS9.setDescription('Description.')
apnMuRxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS10.setDescription('Description.')
apnMuRxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS11.setDescription('Description.')
apnMuRxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS12.setDescription('Description.')
apnMuRxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS13.setDescription('Description.')
apnMuRxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS14.setDescription('Description.')
apnMuRxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnMuRxPktsAtMCS15.setDescription('Description.')
apnMuTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7), )
if mibBuilder.loadTexts: apnMuTxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsTable.setDescription('For each mobile unit associated to an 802.11n Portal on the AP, this table describes counts of packets transmitted at each speed.')
apnMuTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuTxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsEntry.setDescription(' ')
apnMuTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt1Mb.setDescription('Number of pkts transmitted via this Portal at 1 and 2 Mbps.')
apnMuTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt2Mb.setDescription('Number of pkts transmitted via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnMuTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt5pt5Mb.setDescription('Number of pkts transmitted via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnMuTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt6Mb.setDescription('Number of pkts transmitted via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt9Mb.setDescription('Number of pkts transmitted via this Portal at 6, 12 and 24 Mbps.')
apnMuTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt11Mb.setDescription('Number of pkts transmitted via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt12Mb.setDescription('Number of pkts transmitted via this Portal at MCS 0 to 7 rates.')
apnMuTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt18Mb.setDescription('Description.')
apnMuTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt24Mb.setDescription('Description.')
apnMuTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt36Mb.setDescription('Description.')
apnMuTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt48Mb.setDescription('Description.')
apnMuTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAt54Mb.setDescription('Description.')
apnMuTxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS0.setDescription('Description.')
apnMuTxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS1.setDescription('Description.')
apnMuTxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS2.setDescription('Description.')
apnMuTxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS3.setDescription('Description.')
apnMuTxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS4.setDescription('Description.')
apnMuTxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS5.setDescription('Description.')
apnMuTxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS6.setDescription('Description.')
apnMuTxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS7.setDescription('Description.')
apnMuTxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS8.setDescription('Description.')
apnMuTxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS9.setDescription('Description.')
apnMuTxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS10.setDescription('Description.')
apnMuTxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS11.setDescription('Description.')
apnMuTxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS12.setDescription('Description.')
apnMuTxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS13.setDescription('Description.')
apnMuTxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS14.setDescription('Description.')
apnMuTxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnMuTxPktsAtMCS15.setDescription('Description.')
apnMuRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8), )
if mibBuilder.loadTexts: apnMuRxOctetsTable.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsTable.setDescription('For each mobile unit associated to an 802.11n Portal on the AP, this table describes counts of octets received at each speed.')
apnMuRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuRxOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsEntry.setDescription(' ')
apnMuRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt1Mb.setDescription('Number of octets received via this Portal at 1 and 2 Mbps.')
apnMuRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt2Mb.setDescription('Number of octets received via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnMuRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt5pt5Mb.setDescription('Number of octets received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnMuRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt6Mb.setDescription('Number of octets received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt9Mb.setDescription('Number of octets received via this Portal at 6, 12 and 24 Mbps.')
apnMuRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt11Mb.setDescription('Number of octets received via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt12Mb.setDescription('Number of octets received via this Portal at MCS 0 to 7 rates.')
apnMuRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt18Mb.setDescription('Description.')
apnMuRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt24Mb.setDescription('Description.')
apnMuRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt36Mb.setDescription('Description.')
apnMuRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt48Mb.setDescription('Description.')
apnMuRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAt54Mb.setDescription('Description.')
apnMuRxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS0.setDescription('Description.')
apnMuRxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS1.setDescription('Description.')
apnMuRxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS2.setDescription('Description.')
apnMuRxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS3.setDescription('Description.')
apnMuRxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS4.setDescription('Description.')
apnMuRxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS5.setDescription('Description.')
apnMuRxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS6.setDescription('Description.')
apnMuRxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS7.setDescription('Description.')
apnMuRxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS8.setDescription('Description.')
apnMuRxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS9.setDescription('Description.')
apnMuRxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS10.setDescription('Description.')
apnMuRxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS11.setDescription('Description.')
apnMuRxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS12.setDescription('Description.')
apnMuRxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS13.setDescription('Description.')
apnMuRxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS14.setDescription('Description.')
apnMuRxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS15.setDescription('Description.')
apnMuTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9), )
if mibBuilder.loadTexts: apnMuTxOctetsTable.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsTable.setDescription('For each mobile unit associated to an 802.11n Portal on the AP, this table describes counts of octets transmitted at each speed.')
apnMuTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuTxOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsEntry.setDescription(' ')
apnMuTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt1Mb.setDescription('Number octets transmitted via this Portal at 1 and 2 Mbps.')
apnMuTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt2Mb.setDescription('Number octets transmitted via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnMuTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt5pt5Mb.setDescription('Number octets transmitted via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnMuTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt6Mb.setDescription('Number octets transmitted via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt9Mb.setDescription('Number octets transmitted via this Portal at 6, 12 and 24 Mbps.')
apnMuTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt11Mb.setDescription('Number octets transmitted via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnMuTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt12Mb.setDescription('Number octets transmitted via this Portal at MCS 0 to 7 rates.')
apnMuTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt18Mb.setDescription('Description.')
apnMuTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt24Mb.setDescription('Description.')
apnMuTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt36Mb.setDescription('Description.')
apnMuTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt48Mb.setDescription('Description.')
apnMuTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAt54Mb.setDescription('Description.')
apnMuTxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS0.setDescription('Description.')
apnMuTxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS1.setDescription('Description.')
apnMuTxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS2.setDescription('Description.')
apnMuTxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS3.setDescription('Description.')
apnMuTxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS4.setDescription('Description.')
apnMuTxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS5.setDescription('Description.')
apnMuTxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS6.setDescription('Description.')
apnMuTxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS7.setDescription('Description.')
apnMuTxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS8.setDescription('Description.')
apnMuTxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS9.setDescription('Description.')
apnMuTxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS10.setDescription('Description.')
apnMuTxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS11.setDescription('Description.')
apnMuTxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS12.setDescription('Description.')
apnMuTxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS13.setDescription('Description.')
apnMuTxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS14.setDescription('Description.')
apnMuTxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS15.setDescription('Description.')
apnWlanRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10), )
if mibBuilder.loadTexts: apnWlanRxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsTable.setDescription('For each wlan on the 802.11n Portal on the AP, this table describes counts of packets received at each speed.')
apnWlanRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanRxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsEntry.setDescription(' ')
apnWlanRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt1Mb.setDescription('Number of pkts received via this Portal at 1 and 2 Mbps.')
apnWlanRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt2Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnWlanRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt5pt5Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnWlanRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt6Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt9Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps.')
apnWlanRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt11Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt12Mb.setDescription('Number of pkts received via this Portal at MCS 0 to 7 rates.')
apnWlanRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt18Mb.setDescription('Description.')
apnWlanRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt24Mb.setDescription('Description.')
apnWlanRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt36Mb.setDescription('Description.')
apnWlanRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt48Mb.setDescription('Description.')
apnWlanRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAt54Mb.setDescription('Description.')
apnWlanRxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS0.setDescription('Description.')
apnWlanRxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS1.setDescription('Description.')
apnWlanRxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS2.setDescription('Description.')
apnWlanRxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS3.setDescription('Description.')
apnWlanRxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS4.setDescription('Description.')
apnWlanRxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS5.setDescription('Description.')
apnWlanRxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS6.setDescription('Description.')
apnWlanRxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS7.setDescription('Description.')
apnWlanRxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS8.setDescription('Description.')
apnWlanRxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS9.setDescription('Description.')
apnWlanRxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS10.setDescription('Description.')
apnWlanRxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS11.setDescription('Description.')
apnWlanRxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS12.setDescription('Description.')
apnWlanRxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS13.setDescription('Description.')
apnWlanRxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS14.setDescription('Description.')
apnWlanRxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS15.setDescription('Description.')
apnWlanTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11), )
if mibBuilder.loadTexts: apnWlanTxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsTable.setDescription('For each wlan on the 802.11n Portal on the AP, this table describes counts of packets transmitted at each speed.')
apnWlanTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanTxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsEntry.setDescription(' ')
apnWlanTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt1Mb.setDescription('Number of pkts received via this Portal at 1 and 2 Mbps.')
apnWlanTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt2Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnWlanTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt5pt5Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnWlanTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt6Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt9Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps.')
apnWlanTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt11Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt12Mb.setDescription('Number of pkts received via this Portal at MCS 0 to 7 rates.')
apnWlanTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt18Mb.setDescription('Description.')
apnWlanTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt24Mb.setDescription('Description.')
apnWlanTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt36Mb.setDescription('Description.')
apnWlanTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt48Mb.setDescription('Description.')
apnWlanTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAt54Mb.setDescription('Description.')
apnWlanTxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS0.setDescription('Description.')
apnWlanTxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS1.setDescription('Description.')
apnWlanTxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS2.setDescription('Description.')
apnWlanTxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS3.setDescription('Description.')
apnWlanTxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS4.setDescription('Description.')
apnWlanTxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS5.setDescription('Description.')
apnWlanTxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS6.setDescription('Description.')
apnWlanTxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS7.setDescription('Description.')
apnWlanTxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS8.setDescription('Description.')
apnWlanTxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS9.setDescription('Description.')
apnWlanTxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS10.setDescription('Description.')
apnWlanTxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS11.setDescription('Description.')
apnWlanTxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS12.setDescription('Description.')
apnWlanTxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS13.setDescription('Description.')
apnWlanTxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS14.setDescription('Description.')
apnWlanTxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS15.setDescription('Description.')
apnWlanRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12), )
if mibBuilder.loadTexts: apnWlanRxOctetsTable.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsTable.setDescription('For each wlan on the 802.11n Portal on the AP, this table describes counts of octets received at each speed.')
apnWlanRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanRxOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsEntry.setDescription(' ')
apnWlanRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt1Mb.setDescription('Number of pkts received via this Portal at 1 and 2 Mbps.')
apnWlanRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt2Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnWlanRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt5pt5Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnWlanRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt6Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt9Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps.')
apnWlanRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt11Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt12Mb.setDescription('Number of pkts received via this Portal at MCS 0 to 7 rates.')
apnWlanRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt18Mb.setDescription('Description.')
apnWlanRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt24Mb.setDescription('Description.')
apnWlanRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt36Mb.setDescription('Description.')
apnWlanRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt48Mb.setDescription('Description.')
apnWlanRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAt54Mb.setDescription('Description.')
apnWlanRxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS0.setDescription('Description.')
apnWlanRxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS1.setDescription('Description.')
apnWlanRxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS2.setDescription('Description.')
apnWlanRxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS3.setDescription('Description.')
apnWlanRxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS4.setDescription('Description.')
apnWlanRxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS5.setDescription('Description.')
apnWlanRxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS6.setDescription('Description.')
apnWlanRxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS7.setDescription('Description.')
apnWlanRxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS8.setDescription('Description.')
apnWlanRxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS9.setDescription('Description.')
apnWlanRxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS10.setDescription('Description.')
apnWlanRxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS11.setDescription('Description.')
apnWlanRxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS12.setDescription('Description.')
apnWlanRxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS13.setDescription('Description.')
apnWlanRxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS14.setDescription('Description.')
apnWlanRxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS15.setDescription('Description.')
apnWlanTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13), )
if mibBuilder.loadTexts: apnWlanTxOctetsTable.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsTable.setDescription('For each wlan on the 802.11n Portal on the AP, this table describes counts of octets transmitted at each speed.')
apnWlanTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanTxOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsEntry.setDescription(' ')
apnWlanTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt1Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt1Mb.setDescription('Number of pkts received via this Portal at 1 and 2 Mbps.')
apnWlanTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt2Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt2Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps.')
apnWlanTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt5pt5Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt5pt5Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps.')
apnWlanTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt6Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt6Mb.setDescription('Number of pkts received via this Portal at 1, 2, 5.5 and 11 Mbps, and, 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt9Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt9Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps.')
apnWlanTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt11Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt11Mb.setDescription('Number of pkts received via this Portal at 6, 12 and 24 Mbps as well as at MCS 0 to 7 rates.')
apnWlanTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt12Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt12Mb.setDescription('Number of pkts received via this Portal at MCS 0 to 7 rates.')
apnWlanTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt18Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt18Mb.setDescription('Description.')
apnWlanTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt24Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt24Mb.setDescription('Description.')
apnWlanTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt36Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt36Mb.setDescription('Description.')
apnWlanTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt48Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt48Mb.setDescription('Description.')
apnWlanTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt54Mb.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAt54Mb.setDescription('Description.')
apnWlanTxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS0.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS0.setDescription('Description.')
apnWlanTxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS1.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS1.setDescription('Description.')
apnWlanTxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS2.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS2.setDescription('Description.')
apnWlanTxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS3.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS3.setDescription('Description.')
apnWlanTxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS4.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS4.setDescription('Description.')
apnWlanTxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS5.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS5.setDescription('Description.')
apnWlanTxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS6.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS6.setDescription('Description.')
apnWlanTxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS7.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS7.setDescription('Description.')
apnWlanTxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS8.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS8.setDescription('Description.')
apnWlanTxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS9.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS9.setDescription('Description.')
apnWlanTxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS10.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS10.setDescription('Description.')
apnWlanTxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS11.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS11.setDescription('Description.')
apnWlanTxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS12.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS12.setDescription('Description.')
apnWlanTxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS13.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS13.setDescription('Description.')
apnWlanTxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS14.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS14.setDescription('Description.')
apnWlanTxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS15.setStatus('current')
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS15.setDescription('Description.')
apDiagStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9))
apDiagCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1))
apDiagCpuLoad1Min = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagCpuLoad1Min.setStatus('current')
if mibBuilder.loadTexts: apDiagCpuLoad1Min.setDescription('% of CPU load averaged over 1 min.')
apDiagCpuLoad5Min = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagCpuLoad5Min.setStatus('current')
if mibBuilder.loadTexts: apDiagCpuLoad5Min.setDescription('% of CPU load averaged over 5 mins.')
apDiagCpuLoad15Min = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagCpuLoad15Min.setStatus('current')
if mibBuilder.loadTexts: apDiagCpuLoad15Min.setDescription('% of CPU load averaged over 15 mins.')
apDiagRamStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2))
apDiagRamTotal = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2, 1), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagRamTotal.setStatus('current')
if mibBuilder.loadTexts: apDiagRamTotal.setDescription('Total RAM available in the system ')
apDiagRamUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2, 2), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagRamUsed.setStatus('current')
if mibBuilder.loadTexts: apDiagRamUsed.setDescription('Total RAM used in the system ')
apDiagRamPercentageUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagRamPercentageUsed.setStatus('current')
if mibBuilder.loadTexts: apDiagRamPercentageUsed.setDescription('% of total RAM used. Precision is to the degree of 0.1 % ')
apLanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10))
apLanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1), )
if mibBuilder.loadTexts: apLanInfoTable.setStatus('current')
if mibBuilder.loadTexts: apLanInfoTable.setDescription('Description.')
apLanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanInfoIndex"))
if mibBuilder.loadTexts: apLanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: apLanInfoEntry.setDescription('Description.')
apLanInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanInfoIndex.setStatus('current')
if mibBuilder.loadTexts: apLanInfoIndex.setDescription('Description.')
apLanInfoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoEnabled.setStatus('current')
if mibBuilder.loadTexts: apLanInfoEnabled.setDescription('Is LAN enabled.')
apLanInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoIpAddress.setStatus('current')
if mibBuilder.loadTexts: apLanInfoIpAddress.setDescription('LAN ip address')
apLanInfoNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoNetworkMask.setStatus('current')
if mibBuilder.loadTexts: apLanInfoNetworkMask.setDescription('LAN network mask.')
apLanInfoEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoEthernetAddress.setStatus('current')
if mibBuilder.loadTexts: apLanInfoEthernetAddress.setDescription('Description.')
apLanInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 6), Unsigned32()).setUnits('mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: apLanInfoSpeed.setDescription('Lan Ethernet Port Speed.')
apLanInfoDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoDuplexMode.setStatus('current')
if mibBuilder.loadTexts: apLanInfoDuplexMode.setDescription('Lan ethernet port duplex mode.')
apLanRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2), )
if mibBuilder.loadTexts: apLanRxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apLanRxPktsTable.setDescription('Description.')
apLanRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanInfoIndex"))
if mibBuilder.loadTexts: apLanRxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apLanRxPktsEntry.setDescription('Description.')
apLanRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxPkts.setStatus('current')
if mibBuilder.loadTexts: apLanRxPkts.setDescription('Count of packets received.')
apLanRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxBytes.setStatus('current')
if mibBuilder.loadTexts: apLanRxBytes.setDescription('Count of bytes received.')
apLanRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxErrors.setStatus('current')
if mibBuilder.loadTexts: apLanRxErrors.setDescription('Count of errors received.')
apLanRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxDropped.setStatus('current')
if mibBuilder.loadTexts: apLanRxDropped.setDescription('Count of received packets dropped.')
apLanRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: apLanRxFrameErrors.setDescription('Count of received frame errors.')
apLanTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4), )
if mibBuilder.loadTexts: apLanTxPktsTable.setStatus('current')
if mibBuilder.loadTexts: apLanTxPktsTable.setDescription('Description.')
apLanTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanInfoIndex"))
if mibBuilder.loadTexts: apLanTxPktsEntry.setStatus('current')
if mibBuilder.loadTexts: apLanTxPktsEntry.setDescription('Description.')
apLanTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxPkts.setStatus('current')
if mibBuilder.loadTexts: apLanTxPkts.setDescription('Count of packets transmitted.')
apLanTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxBytes.setStatus('current')
if mibBuilder.loadTexts: apLanTxBytes.setDescription('Count of bytes transmitted.')
apLanTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxErrors.setStatus('current')
if mibBuilder.loadTexts: apLanTxErrors.setDescription('Count of errors transmitted.')
apLanTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxDropped.setStatus('current')
if mibBuilder.loadTexts: apLanTxDropped.setDescription('Count of transmitted packets dropped.')
apLanTxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: apLanTxFrameErrors.setDescription('Count of transmitted carrier errors.')
apMgmtAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 10))
apMgmtAccessToAllow = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 1), Bits().clone(namedValues=NamedValues(("fromLan1AppletHttp", 0), ("fromLan1AppletHttps", 1), ("fromLan1CliTelnet", 2), ("fromLan1Ssh", 3), ("fromLan1Snmp", 4), ("fromLan2AppletHttp", 5), ("fromLan2AppletHttps", 6), ("fromLan2CliTelnet", 7), ("fromLan2Ssh", 8), ("fromLan2Snmp", 9), ("fromWanAppletHttp", 10), ("fromWanAppletHttps", 11), ("fromWanCliTelnet", 12), ("fromWanSsh", 13), ("fromWanSnmp", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMgmtAccessToAllow.setStatus('current')
if mibBuilder.loadTexts: apMgmtAccessToAllow.setDescription('Types of network management access to permit.')
apTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2))
apTrustedHostEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrustedHostEnable.setStatus('current')
if mibBuilder.loadTexts: apTrustedHostEnable.setDescription('Enable trusted host feature.')
apTrustedHostRangeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2), )
if mibBuilder.loadTexts: apTrustedHostRangeTable.setStatus('current')
if mibBuilder.loadTexts: apTrustedHostRangeTable.setDescription('Table of trusted host ip ranges.')
apTrustedHostRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apTrustedHostRangeIndex"))
if mibBuilder.loadTexts: apTrustedHostRangeEntry.setStatus('current')
if mibBuilder.loadTexts: apTrustedHostRangeEntry.setDescription('Trusted host ip range table entry.')
apTrustedHostRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrustedHostRangeIndex.setStatus('current')
if mibBuilder.loadTexts: apTrustedHostRangeIndex.setDescription('Trusted host ip range index.')
apTrustedHostRangeLowerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrustedHostRangeLowerIp.setStatus('current')
if mibBuilder.loadTexts: apTrustedHostRangeLowerIp.setDescription('Lower bound of ip address range.')
apTrustedHostRangeUpperIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrustedHostRangeUpperIp.setStatus('current')
if mibBuilder.loadTexts: apTrustedHostRangeUpperIp.setDescription('Upper bound of ip address range.')
apRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 11))
apRouterDefaultGatewayInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2), ("wan", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRouterDefaultGatewayInterface.setStatus('current')
if mibBuilder.loadTexts: apRouterDefaultGatewayInterface.setDescription('Interface whose Default Gateway is used when both LAN and WAN are DHCP clients.')
apManualTime = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 12))
apManualCurrSystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apManualCurrSystemDateTime.setStatus('current')
if mibBuilder.loadTexts: apManualCurrSystemDateTime.setDescription('Current System Time of the AP 5131.')
apManualTimeZoneSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2))
apManualTimeZoneTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1), )
if mibBuilder.loadTexts: apManualTimeZoneTable.setStatus('current')
if mibBuilder.loadTexts: apManualTimeZoneTable.setDescription('Table of all the Time Zones.')
apManualTimeZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apManualTimeZoneIndex"))
if mibBuilder.loadTexts: apManualTimeZoneEntry.setStatus('current')
if mibBuilder.loadTexts: apManualTimeZoneEntry.setDescription(' ')
apManualTimeZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 550))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apManualTimeZoneIndex.setStatus('current')
if mibBuilder.loadTexts: apManualTimeZoneIndex.setDescription('Simple Index.')
apManualTimeZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apManualTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: apManualTimeZoneName.setDescription('Time Zone Name.')
apManualExpectedTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 2), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedTimeZone.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedTimeZone.setDescription('Expected Time Zone to be set. This is a pointer to an entry in the apManualTimeZoneTable.')
apManualTimeZoneSet = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualTimeZoneSet.setStatus('current')
if mibBuilder.loadTexts: apManualTimeZoneSet.setDescription('Set the expected time zone for the system.')
apManualDateTimeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3))
apManualExpectedYear = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1970, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedYear.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedYear.setDescription('Expected year to be SET.')
apManualExpectedMonth = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedMonth.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedMonth.setDescription('Expected month to be SET.')
apManualExpectedDay = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedDay.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedDay.setDescription('Expected day to be SET.')
apManualExpectedHour = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedHour.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedHour.setDescription('Expected hour to be SET.')
apManualExpectedMinutes = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedMinutes.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedMinutes.setDescription('Expected minutes to be SET.')
apManualExpectedSeconds = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedSeconds.setStatus('current')
if mibBuilder.loadTexts: apManualExpectedSeconds.setDescription('Expected seconds to be SET.')
apManualDateTimeSet = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 7), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualDateTimeSet.setStatus('current')
if mibBuilder.loadTexts: apManualDateTimeSet.setDescription('Set the expected values in System Date and Time.')
apAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 13))
apLoginMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 13, 1))
apLoginMessageMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 13, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoginMessageMode.setStatus('current')
if mibBuilder.loadTexts: apLoginMessageMode.setDescription('Login Message Mode: Enabled/Disabled')
apLoginMessageText = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoginMessageText.setStatus('current')
if mibBuilder.loadTexts: apLoginMessageText.setDescription('Login Message Text which gets displayed at the time of login, if Login Message mode is enabled. 1-511 characters are allowed for Login Text Message. Note: Carriage Return (\\0A) is not supported by SNMP.')
apRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 14))
apRadiusUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1))
apRadiusUsersGroupTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1), )
if mibBuilder.loadTexts: apRadiusUsersGroupTable.setStatus('current')
if mibBuilder.loadTexts: apRadiusUsersGroupTable.setDescription('Description.')
apRadiusUsersGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadiusUsersGroup"))
if mibBuilder.loadTexts: apRadiusUsersGroupEntry.setStatus('current')
if mibBuilder.loadTexts: apRadiusUsersGroupEntry.setDescription('Description.')
apRadiusUsersGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusUsersGroup.setStatus('current')
if mibBuilder.loadTexts: apRadiusUsersGroup.setDescription('Description.')
apRadiusUsersGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1, 2), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusUsersGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: apRadiusUsersGroupRowStatus.setDescription('Description.')
apRadiusUsersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusUsersGroupId.setStatus('current')
if mibBuilder.loadTexts: apRadiusUsersGroupId.setDescription('Description.')
apRadiusAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2))
apRadiusAccessTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1), )
if mibBuilder.loadTexts: apRadiusAccessTable.setStatus('current')
if mibBuilder.loadTexts: apRadiusAccessTable.setDescription('Description.')
apRadiusAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadiusUsersGroup"))
if mibBuilder.loadTexts: apRadiusAccessEntry.setStatus('current')
if mibBuilder.loadTexts: apRadiusAccessEntry.setDescription('Description.')
apRadiusAccessWlanPtrs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("null", 0), ("wlan1", 1), ("wlan2", 2), ("wlan3", 3), ("wlan4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusAccessWlanPtrs.setStatus('current')
if mibBuilder.loadTexts: apRadiusAccessWlanPtrs.setDescription('Description.')
apRadiusAccessTimeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusAccessTimeRule.setStatus('current')
if mibBuilder.loadTexts: apRadiusAccessTimeRule.setDescription('Description.')
apWips = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 15))
apWipsPrimaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWipsPrimaryServerAddr.setStatus('current')
if mibBuilder.loadTexts: apWipsPrimaryServerAddr.setDescription('The IP address of the primary WIPS server. If the IP address is unknown, the value is 0.0.0.0.')
apWipsSecondaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWipsSecondaryServerAddr.setStatus('current')
if mibBuilder.loadTexts: apWipsSecondaryServerAddr.setDescription('The IP address of the secondary WIPS server. If the IP address is unknown, the value is 0.0.0.0.')
apPower = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 16))
apPowerMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeAuto", 1), ("mode3af", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPowerMode.setStatus('current')
if mibBuilder.loadTexts: apPowerMode.setDescription('Set the power mode to auto(1) or 3af(2). NOTE WELL: Changing the power mode will restart the AP.')
apPowerDefRadio = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radio1", 1), ("radio2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPowerDefRadio.setStatus('current')
if mibBuilder.loadTexts: apPowerDefRadio.setDescription('Set the default radio to radio1(1) or radio2(2). NOTE WELL: Changing the default radio will restart the AP.')
apPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("power3af", 1), ("mid", 2), ("fullAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPowerStatus.setStatus('current')
if mibBuilder.loadTexts: apPowerStatus.setDescription('Current power status - 3af(1), mid(2) or full available (3)')
apGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000))
apGroupsV1dot0 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1))
dot1xGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 1)).setObjects(("SYMBOL-AP-MIB", "dot1xPaePortNumber"), ("SYMBOL-AP-MIB", "dot1xPaeState"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAuthState"), ("SYMBOL-AP-MIB", "dot1xAuthAdminControlledDirections"), ("SYMBOL-AP-MIB", "dot1xAuthOperControlledDirections"), ("SYMBOL-AP-MIB", "dot1xAuthAuthControlledPortStatus"), ("SYMBOL-AP-MIB", "dot1xAuthAuthControlledPortControl"), ("SYMBOL-AP-MIB", "dot1xAuthQuietPeriod"), ("SYMBOL-AP-MIB", "dot1xAuthTxPeriod"), ("SYMBOL-AP-MIB", "dot1xAuthSuppTimeout"), ("SYMBOL-AP-MIB", "dot1xAuthServerTimeout"), ("SYMBOL-AP-MIB", "dot1xAuthMaxReq"), ("SYMBOL-AP-MIB", "dot1xAuthReAuthPeriod"), ("SYMBOL-AP-MIB", "dot1xAuthReAuthEnabled"), ("SYMBOL-AP-MIB", "dot1xAuthKeyTxEnabled"), ("SYMBOL-AP-MIB", "dot1xAuthEapolFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolStartFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolLogoffFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolRespIdFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolRespFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolReqIdFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolReqFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthInvalidEapolFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapLengthErrorFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthLastEapolFrameVersion"), ("SYMBOL-AP-MIB", "dot1xAuthLastEapolFrameSource"), ("SYMBOL-AP-MIB", "dot1xAuthEntersConnecting"), ("SYMBOL-AP-MIB", "dot1xAuthEapLogoffsWhileConnecting"), ("SYMBOL-AP-MIB", "dot1xAuthEntersAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthSuccessWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthTimeoutsWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthFailWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthReauthsWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapStartsWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapLogoffWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthReauthsWhileAuthenticated"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapStartsWhileAuthenticated"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapLogoffWhileAuthenticated"), ("SYMBOL-AP-MIB", "dot1xAuthBackendResponses"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAccessChallenges"), ("SYMBOL-AP-MIB", "dot1xAuthBackendOtherRequestsToSupplicant"), ("SYMBOL-AP-MIB", "dot1xAuthBackendNonNakResponsesFromSupplicant"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAuthSuccesses"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAuthFails"), ("SYMBOL-AP-MIB", "dot1xAuthSessionOctetsRx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionOctetsTx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionId"), ("SYMBOL-AP-MIB", "dot1xAuthSessionAuthenticMethod"), ("SYMBOL-AP-MIB", "dot1xAuthSessionTime"), ("SYMBOL-AP-MIB", "dot1xAuthSessionTerminateCause"), ("SYMBOL-AP-MIB", "dot1xAuthSessionUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot1xGroup = dot1xGroup.setStatus('current')
if mibBuilder.loadTexts: dot1xGroup.setDescription(' ')
apRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 2)).setObjects(("SYMBOL-AP-MIB", "apRadioSettingsIndex"), ("SYMBOL-AP-MIB", "apRadioSettingsName"), ("SYMBOL-AP-MIB", "apRadioSettingsMacAddress"), ("SYMBOL-AP-MIB", "apRadioSettingsAntenna"), ("SYMBOL-AP-MIB", "apRadioSettingsShortPreamble"), ("SYMBOL-AP-MIB", "apRadioSettingsRtsThresh"), ("SYMBOL-AP-MIB", "apRadioSettingsBeaconInt"), ("SYMBOL-AP-MIB", "apRadioSettingsEnable"), ("SYMBOL-AP-MIB", "apRadioSettingsBand"), ("SYMBOL-AP-MIB", "apRadioSettingsPointersToWlans"), ("SYMBOL-AP-MIB", "apRadioCfgDesPlacement"), ("SYMBOL-AP-MIB", "apRadioCfgPosChannel"), ("SYMBOL-AP-MIB", "apRadioCfgDesChannel"), ("SYMBOL-AP-MIB", "apRadioCfgPosPowerLevel"), ("SYMBOL-AP-MIB", "apRadioCfgDesPowerLevel"), ("SYMBOL-AP-MIB", "apRadioCfgPowerInMW"), ("SYMBOL-AP-MIB", "apRadioCfgSet"), ("SYMBOL-AP-MIB", "apRadioCfgReset"), ("SYMBOL-AP-MIB", "apRadioCfgPlacement"), ("SYMBOL-AP-MIB", "apRadioCfgChannel"), ("SYMBOL-AP-MIB", "apRadioCfgPowerLevel"), ("SYMBOL-AP-MIB", "apRadioBssIndex"), ("SYMBOL-AP-MIB", "apRadioBssPrimaryWlan"), ("SYMBOL-AP-MIB", "apWlanMuAclPointerToAclPolicy"), ("SYMBOL-AP-MIB", "apRadioSettingsBasicRates"), ("SYMBOL-AP-MIB", "apRadioSettingsSupportedRates"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundTxopsTime"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortTxopsTime"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoTxopsTime"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceTxopsTime"), ("SYMBOL-AP-MIB", "apWlanIndex"), ("SYMBOL-AP-MIB", "apWlanName"), ("SYMBOL-AP-MIB", "apWlanEssid"), ("SYMBOL-AP-MIB", "apWlanEnable"), ("SYMBOL-AP-MIB", "apWlanUseRadio"), ("SYMBOL-AP-MIB", "apWlanMaxMus"), ("SYMBOL-AP-MIB", "apWlanAclPolicy"), ("SYMBOL-AP-MIB", "apWlanSecurityPolicy"), ("SYMBOL-AP-MIB", "apWlanQosPolicy"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosPassword"), ("SYMBOL-AP-MIB", "apWlanDisallowMuToMu"), ("SYMBOL-AP-MIB", "apWlanUseSecureBeacon"), ("SYMBOL-AP-MIB", "apWlanAnswerBroadcastEss"), ("SYMBOL-AP-MIB", "apWlanSecPolicyIndex"), ("SYMBOL-AP-MIB", "apWlanSecPolicyName"), ("SYMBOL-AP-MIB", "apWlanSecPolicyAuthentication"), ("SYMBOL-AP-MIB", "apWlanSecPolicyEncryption"), ("SYMBOL-AP-MIB", "apWlanAuthEapReauthenticationEnable"), ("SYMBOL-AP-MIB", "apWlanAuthEapReauthenticationPeriod"), ("SYMBOL-AP-MIB", "apWlanAuthEapReauthenticationMaxRetries"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius1Server"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius1Port"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius1SharedSecret"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius2Server"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius2Port"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius2SharedSecret"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuQuietPeriod"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuTimeout"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuTxPeriod"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuMaxRetries"), ("SYMBOL-AP-MIB", "apWlanAuthEapServerTimeout"), ("SYMBOL-AP-MIB", "apWlanAuthEapServerMaxRetries"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosRealmName"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcServerIp1"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcPort1"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcServerIp2"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcPort2"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcServerIpR"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcPortR"), ("SYMBOL-AP-MIB", "apWlanCryptoWepPassKey"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey1"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey2"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey3"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey4"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKeyToUse"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipBcastKeyRotation"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipKeyRotationInterval"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipKeyToUse"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipPassphrase"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipKey"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpBcastKeyRotation"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpKeyRotationInterval"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpKeyToUse"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpPassphrase"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpKey"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey1"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey2"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey3"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey4"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKeyToUse"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyIndex"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyName"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyAccessMode"), ("SYMBOL-AP-MIB", "apWlanMuAclIndex"), ("SYMBOL-AP-MIB", "apWlanMuAclStartingMac"), ("SYMBOL-AP-MIB", "apWlanMuAclEndingMac"), ("SYMBOL-AP-MIB", "apWlanMuAclRowStatus"), ("SYMBOL-AP-MIB", "apWlanQosPolicyIndex"), ("SYMBOL-AP-MIB", "apWlanQosPolicyName"), ("SYMBOL-AP-MIB", "apWlanEnableWMM"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundTxopsTime"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortTxopsTime"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoTxopsTime"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceTxopsTime"), ("SYMBOL-AP-MIB", "apWlanVoicePrioritization"), ("SYMBOL-AP-MIB", "apWlanMulticastAddr1"), ("SYMBOL-AP-MIB", "apWlanVlanId"), ("SYMBOL-AP-MIB", "apWlanSecPolicyRowStatus"), ("SYMBOL-AP-MIB", "apWlanMulticastAddr2"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusAcctMode"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusAcctMuTimeout"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusAcctMuRetries"), ("SYMBOL-AP-MIB", "apWlanAuthEapSyslogMode"), ("SYMBOL-AP-MIB", "apWlanAuthEapSyslogServerIp"), ("SYMBOL-AP-MIB", "apWlanSecPolicyPointerToWlan"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyPointerToWlan"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyRowStatus"), ("SYMBOL-AP-MIB", "apWlanQosPolicyPointerToWlan"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioSettingsBGMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioCfgDesPowerInMW"), ("SYMBOL-AP-MIB", "apWlanQosPolicyRowStatus"), ("SYMBOL-AP-MIB", "apWlanBwShareMode"), ("SYMBOL-AP-MIB", "apRadioE2BMapStatus"), ("SYMBOL-AP-MIB", "apRadioE2BMapStatusMessage"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpFastRoamPreAuth"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpMixedMode"), ("SYMBOL-AP-MIB", "apRadioCfgChannelMode"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosUsername"), ("SYMBOL-AP-MIB", "apRadioWlanBssid"), ("SYMBOL-AP-MIB", "apRadioSettingsE2BMapMessage"), ("SYMBOL-AP-MIB", "apRadioCfgRfFunction"), ("SYMBOL-AP-MIB", "apIpFilterPolicyIndex"), ("SYMBOL-AP-MIB", "apIpFilterPolicyName"), ("SYMBOL-AP-MIB", "apIpFilterPolicyProtocol"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcStartIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcEndIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicyDestStartIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicyDestEndIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicyUseStatus"), ("SYMBOL-AP-MIB", "apIpFilterPolicyRowStatus"), ("SYMBOL-AP-MIB", "apIpFilterWlanMode"), ("SYMBOL-AP-MIB", "apIpFilterWlanDefInAction"), ("SYMBOL-AP-MIB", "apIpFilterWlanDefOutAction"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyIndex"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyPolicy"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyDirection"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyAction"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyRowStatus"), ("SYMBOL-AP-MIB", "apIpFilterLanMode"), ("SYMBOL-AP-MIB", "apIpFilterLanDefInAction"), ("SYMBOL-AP-MIB", "apIpFilterLanDefOutAction"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyIndex"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyPolicy"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyDirection"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyAction"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyRowStatus"), ("SYMBOL-AP-MIB", "apIpFilterLanIndex"), ("SYMBOL-AP-MIB", "apWlanMuIdleTimeout"), ("SYMBOL-AP-MIB", "apRadioCfgExceptionChannel"), ("SYMBOL-AP-MIB", "apRadioNSettingsMode"), ("SYMBOL-AP-MIB", "apRadioNSettingsHTProtectionStatus"), ("SYMBOL-AP-MIB", "apRadioNSettingsBasicRates"), ("SYMBOL-AP-MIB", "apRadioNCfgPosChannel"), ("SYMBOL-AP-MIB", "apRadioNCfgDesChannel"), ("SYMBOL-AP-MIB", "apRadioNCfgChannel"), ("SYMBOL-AP-MIB", "apRadioNCfgChannelWidth"), ("SYMBOL-AP-MIB", "apRadioNCfgAmsduAggregationMaxRecvSize"), ("SYMBOL-AP-MIB", "apRadioNCfgAmsduTransmitEnabled"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduAggregationMaxRecvSize"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduAggregationDensity"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduTransmitSizeLimit"), ("SYMBOL-AP-MIB", "apRadioNCfgShortGuardInterval"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduTransmitEnabled"), ("SYMBOL-AP-MIB", "apRadioNCfgChannelOffset"), ("SYMBOL-AP-MIB", "apRadioNMcsRateIndex"), ("SYMBOL-AP-MIB", "apRadioNMcsRate20MHzChanSgiDisabled"), ("SYMBOL-AP-MIB", "apRadioNMcsRate40MHzChanSgiDisabled"), ("SYMBOL-AP-MIB", "apRadioNMcsRate40MHzChanSgiEnabled"), ("SYMBOL-AP-MIB", "apRadioNMcsRateType"), ("SYMBOL-AP-MIB", "apRadioNMcsRateEnabled"), ("SYMBOL-AP-MIB", "apPowerMode"), ("SYMBOL-AP-MIB", "apPowerDefRadio"), ("SYMBOL-AP-MIB", "apPowerStatus"), ("SYMBOL-AP-MIB", "apIpFilterWlanInPackets"), ("SYMBOL-AP-MIB", "apIpFilterWlanOutPackets"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyPackets"), ("SYMBOL-AP-MIB", "apIpFilterLanInPackets"), ("SYMBOL-AP-MIB", "apIpFilterLanOutPackets"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyPackets"), ("SYMBOL-AP-MIB", "apWlanVlanMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioE2BMapStatusBcMcEncCipher"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardPassKey"), ("SYMBOL-AP-MIB", "apIpFilterPolicyStartPort"), ("SYMBOL-AP-MIB", "apIpFilterPolicyEndPort"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcStartPort"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcEndPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRfGroup = apRfGroup.setStatus('current')
if mibBuilder.loadTexts: apRfGroup.setDescription(' ')
apSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 3)).setObjects(("SYMBOL-AP-MIB", "apVlanIndex"), ("SYMBOL-AP-MIB", "apVlanId"), ("SYMBOL-AP-MIB", "apVlanRowStatus"), ("SYMBOL-AP-MIB", "apVlanPointerToWlan"), ("SYMBOL-AP-MIB", "apVlanName"), ("SYMBOL-AP-MIB", "apWnmpPingDestMu"), ("SYMBOL-AP-MIB", "apWnmpPingDestAP"), ("SYMBOL-AP-MIB", "apWnmpPingDest"), ("SYMBOL-AP-MIB", "apWnmpPingNum"), ("SYMBOL-AP-MIB", "apWnmpPingPacketLength"), ("SYMBOL-AP-MIB", "apWnmpPingPacketData"), ("SYMBOL-AP-MIB", "apWnmpPingAction"), ("SYMBOL-AP-MIB", "apWnmpPingNumResponses"), ("SYMBOL-AP-MIB", "apFlashLedDestAP"), ("SYMBOL-AP-MIB", "apFlashLedAction"), ("SYMBOL-AP-MIB", "apKnownApMac"), ("SYMBOL-AP-MIB", "apKnownApIndex"), ("SYMBOL-AP-MIB", "apKnownApIp"), ("SYMBOL-AP-MIB", "apKnownApMu"), ("SYMBOL-AP-MIB", "apKnownApType"), ("SYMBOL-AP-MIB", "apKnownApUnitName"), ("SYMBOL-AP-MIB", "apKnownApPktsPerSec"), ("SYMBOL-AP-MIB", "apSubnetDhcpState"), ("SYMBOL-AP-MIB", "apLan802dt1xAuthLogin"), ("SYMBOL-AP-MIB", "apLan802dt1xAuthPass"), ("SYMBOL-AP-MIB", "apKnownApKbPerSec"), ("SYMBOL-AP-MIB", "apKnownApFwVers"), ("SYMBOL-AP-MIB", "apLanTypeFilterIndex"), ("SYMBOL-AP-MIB", "apLanTypeFilter"), ("SYMBOL-AP-MIB", "apLanTypeFilterRowStatus"), ("SYMBOL-AP-MIB", "apWanVpnKeyAutoSALifeTime"), ("SYMBOL-AP-MIB", "apLanTimeOutValue"), ("SYMBOL-AP-MIB", "apLanTimeOut"), ("SYMBOL-AP-MIB", "apKnownApEssName"), ("SYMBOL-AP-MIB", "apKnownApRadioType1"), ("SYMBOL-AP-MIB", "apKnownApRadioType2"), ("SYMBOL-AP-MIB", "apKnownApChannel1"), ("SYMBOL-AP-MIB", "apKnownApChannel2"), ("SYMBOL-AP-MIB", "apKnownApSendCfgStatus"), ("SYMBOL-AP-MIB", "apKnownApSendCfg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSwitchGroup = apSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: apSwitchGroup.setDescription(' ')
apTrapCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 4)).setObjects(("SYMBOL-AP-MIB", "apTrapCtrlRateLimit"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsIndex"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsDescr"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsUnits"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetMu"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdMu"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioA"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioA"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioBG"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioBG"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetWlan"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdWlans"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetAccessPoint"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdAccessPoint"), ("SYMBOL-AP-MIB", "apTrapCtrlEnableIndex"), ("SYMBOL-AP-MIB", "apTrapCtrlEnableName"), ("SYMBOL-AP-MIB", "apTrapCtrlEnable"), ("SYMBOL-AP-MIB", "apTrapRadioMac"), ("SYMBOL-AP-MIB", "apTrapLanMonitorReason"), ("SYMBOL-AP-MIB", "apTrapWpaCounterMeasureEssid"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioN2400MHz"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioN2400MHz"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioN5000MHz"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioN5000MHz"), ("SYMBOL-AP-MIB", "apTrapLanMonitorMode"), ("SYMBOL-AP-MIB", "apTrapMuMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apTrapCtrlGroup = apTrapCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: apTrapCtrlGroup.setDescription(' ')
apRapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 5)).setObjects(("SYMBOL-AP-MIB", "apRapDetectorMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRapGroup = apRapGroup.setStatus('current')
if mibBuilder.loadTexts: apRapGroup.setDescription(' ')
apLoadCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 6)).setObjects(("SYMBOL-AP-MIB", "apLoadCfgOperation"), ("SYMBOL-AP-MIB", "apLoadCfgServerPath"), ("SYMBOL-AP-MIB", "apLoadCfgServerFilename"), ("SYMBOL-AP-MIB", "apLoadCfgServerIpAddr"), ("SYMBOL-AP-MIB", "apLoadCfgFtpUsername"), ("SYMBOL-AP-MIB", "apLoadCfgFtpPassword"), ("SYMBOL-AP-MIB", "apLoadCfgStart"), ("SYMBOL-AP-MIB", "apLoadCfgOperationsDone"), ("SYMBOL-AP-MIB", "apLoadCfgResult"), ("SYMBOL-AP-MIB", "apLoadCfgSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLoadCfgGroup = apLoadCfgGroup.setStatus('current')
if mibBuilder.loadTexts: apLoadCfgGroup.setDescription(' ')
apStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 7))
for _apStatsGroup_obj in [[("SYMBOL-AP-MIB", "apWanClearStats"), ("SYMBOL-AP-MIB", "apLanClearStats"), ("SYMBOL-AP-MIB", "apRadioClearStats"), ("SYMBOL-AP-MIB", "apWlanClearStats"), ("SYMBOL-AP-MIB", "apMuClearStats"), ("SYMBOL-AP-MIB", "apKnownAPClearStats"), ("SYMBOL-AP-MIB", "apDiagRamTotal"), ("SYMBOL-AP-MIB", "apnRadioStatsIndex"), ("SYMBOL-AP-MIB", "apnRadioStatsBssid"), ("SYMBOL-AP-MIB", "apnRadioStatsApSsid"), ("SYMBOL-AP-MIB", "apnRadioStatsChannel"), ("SYMBOL-AP-MIB", "apnRadioStatsExtnChannel"), ("SYMBOL-AP-MIB", "apnRadioStatsRssiAvgAcrossAntennas"), ("SYMBOL-AP-MIB", "apnRadioStatsChannelWidthMode"), ("SYMBOL-AP-MIB", "apnRadioStatsOpFreq"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxSGI400ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxSGI800ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxSGI400ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxSGI800ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxChanWidth20MHz"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxChanWidth40MHz"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxChanWidth20MHz"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxChanWidth40MHz"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt18Mb")], [("SYMBOL-AP-MIB", "apnWlanRxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apLanRxDropped"), ("SYMBOL-AP-MIB", "apLanRxFrameErrors"), ("SYMBOL-AP-MIB", "apLanInfoSpeed"), ("SYMBOL-AP-MIB", "apLanInfoDuplexMode"), ("SYMBOL-AP-MIB", "apLanRxPkts"), ("SYMBOL-AP-MIB", "apLanRxBytes"), ("SYMBOL-AP-MIB", "apLanRxErrors"), ("SYMBOL-AP-MIB", "apLanInfoIndex"), ("SYMBOL-AP-MIB", "apLanInfoEnabled"), ("SYMBOL-AP-MIB", "apLanInfoIpAddress"), ("SYMBOL-AP-MIB", "apLanInfoNetworkMask"), ("SYMBOL-AP-MIB", "apLanInfoEthernetAddress"), ("SYMBOL-AP-MIB", "apLanTxPkts"), ("SYMBOL-AP-MIB", "apLanTxBytes"), ("SYMBOL-AP-MIB", "apLanTxErrors"), ("SYMBOL-AP-MIB", "apLanTxDropped"), ("SYMBOL-AP-MIB", "apLanTxFrameErrors"), ("SYMBOL-AP-MIB", "apDiagRamUsed"), ("SYMBOL-AP-MIB", "apDiagCpuLoad1Min"), ("SYMBOL-AP-MIB", "apDiagCpuLoad5Min"), ("SYMBOL-AP-MIB", "apDiagCpuLoad15Min"), ("SYMBOL-AP-MIB", "apDiagRamPercentageUsed")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        apStatsGroup = apStatsGroup.setObjects(*_apStatsGroup_obj)
    else:
        apStatsGroup = apStatsGroup.setObjects(*_apStatsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apStatsGroup = apStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apStatsGroup.setDescription(' ')
apNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 8)).setObjects(("SYMBOL-AP-MIB", "apWpaCounterMeasure"), ("SYMBOL-AP-MIB", "apLanMonitor"), ("SYMBOL-AP-MIB", "apMuVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNotificationsGroup = apNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apNotificationsGroup.setDescription(' ')
apGroupsV1dot1 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2))
apGroupV1dot1variables = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 1)).setObjects(("SYMBOL-AP-MIB", "apSubnetTypeFilterAccessMode"), ("SYMBOL-AP-MIB", "apSubnetVlanEnable"), ("SYMBOL-AP-MIB", "apLanTypeFilterSubnetIndex"), ("SYMBOL-AP-MIB", "apMgmtAccessToAllow"), ("SYMBOL-AP-MIB", "apTrapCtrlMuMac"), ("SYMBOL-AP-MIB", "apTrapCtrlMuHotspotStateChange"), ("SYMBOL-AP-MIB", "apHotSpotDefaultFileMode"), ("SYMBOL-AP-MIB", "apHotSpotExternalLoginPageUrl"), ("SYMBOL-AP-MIB", "apHotSpotExternalWelomePageUrl"), ("SYMBOL-AP-MIB", "apHotSpotExternalFailPageUrl"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctMode"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctTimeout"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctRetryCount"), ("SYMBOL-AP-MIB", "apHotSpotPriRadiusServerIp"), ("SYMBOL-AP-MIB", "apHotSpotPriRadiusPort"), ("SYMBOL-AP-MIB", "apHotSpotPriRadiusSecret"), ("SYMBOL-AP-MIB", "apHotSpotSecRadiusServerIp"), ("SYMBOL-AP-MIB", "apHotSpotSecRadiusPort"), ("SYMBOL-AP-MIB", "apHotSpotSecRadiusSecret"), ("SYMBOL-AP-MIB", "apHotSpotWhiteListIndex"), ("SYMBOL-AP-MIB", "apHotSpotWhiteListWalledGardenIp"), ("SYMBOL-AP-MIB", "apHotSpotWhiteListRowStatus"), ("SYMBOL-AP-MIB", "apLanEthernetPort"), ("SYMBOL-AP-MIB", "apWlanSubnet"), ("SYMBOL-AP-MIB", "apRouterDefaultGatewayInterface"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusExtAcctServer"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusExtPort"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusExtSharedSecret"), ("SYMBOL-AP-MIB", "apManualCurrSystemDateTime"), ("SYMBOL-AP-MIB", "apManualTimeZoneIndex"), ("SYMBOL-AP-MIB", "apManualTimeZoneName"), ("SYMBOL-AP-MIB", "apManualExpectedTimeZone"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctServerIp"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctPort"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctSecret"), ("SYMBOL-AP-MIB", "apRadioSettingsERPProtectionStatus"), ("SYMBOL-AP-MIB", "apWlanClientBackHaul"), ("SYMBOL-AP-MIB", "apKnownApIndex"), ("SYMBOL-AP-MIB", "apKnownApRadio1ClientBridgeMac1"), ("SYMBOL-AP-MIB", "apKnownApRadio1ClientBridgeMac2"), ("SYMBOL-AP-MIB", "apKnownApRadio1ClientBridgeMac3"), ("SYMBOL-AP-MIB", "apKnownApRadio2ClientBridgeMac1"), ("SYMBOL-AP-MIB", "apKnownApRadio2ClientBridgeMac2"), ("SYMBOL-AP-MIB", "apKnownApRadio2ClientBridgeMac3"), ("SYMBOL-AP-MIB", "apWanPppoeClientIndex"), ("SYMBOL-AP-MIB", "apWanPppoeClientIp"), ("SYMBOL-AP-MIB", "apWanPppoeClientGateway"), ("SYMBOL-AP-MIB", "apWanPppoeClientPrimaryDNSServer"), ("SYMBOL-AP-MIB", "apWanPppoeClientSecondaryDNSServer"), ("SYMBOL-AP-MIB", "apSubnetAdminVlanTag"), ("SYMBOL-AP-MIB", "apSubnetNativeVlanTag"), ("SYMBOL-AP-MIB", "apRadioBssDtimPrd"), ("SYMBOL-AP-MIB", "apWlanHotspot"), ("SYMBOL-AP-MIB", "apManualTimeZoneSet"), ("SYMBOL-AP-MIB", "apManualExpectedYear"), ("SYMBOL-AP-MIB", "apManualExpectedMonth"), ("SYMBOL-AP-MIB", "apManualExpectedDay"), ("SYMBOL-AP-MIB", "apManualExpectedHour"), ("SYMBOL-AP-MIB", "apManualExpectedMinutes"), ("SYMBOL-AP-MIB", "apManualExpectedSeconds"), ("SYMBOL-AP-MIB", "apManualDateTimeSet"), ("SYMBOL-AP-MIB", "apWlanWMMQosParam"), ("SYMBOL-AP-MIB", "apRadioSettingsWMMQosParam"), ("SYMBOL-AP-MIB", "apRadioMeshBaseBridgeMode"), ("SYMBOL-AP-MIB", "apRadioMeshMaxClients"), ("SYMBOL-AP-MIB", "apRadioMeshClientBridgeMode"), ("SYMBOL-AP-MIB", "apRadioMeshWlanPtr"), ("SYMBOL-AP-MIB", "apLanBridgePriority"), ("SYMBOL-AP-MIB", "apLanBridgeMaxMsgAge"), ("SYMBOL-AP-MIB", "apMeshStatsIndex"), ("SYMBOL-AP-MIB", "apMeshStatsConnType"), ("SYMBOL-AP-MIB", "apMeshStatsMac"), ("SYMBOL-AP-MIB", "apMeshStatsWlanPtr"), ("SYMBOL-AP-MIB", "apMeshStatsRadioType"), ("SYMBOL-AP-MIB", "apMeshStatsThroughput"), ("SYMBOL-AP-MIB", "apMeshStatsAvgBitSpeed"), ("SYMBOL-AP-MIB", "apMeshStatsRetries"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsIndex"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsMac"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsWlanPtr"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsLanPtr"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsRadioType"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAuthType"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsEncType"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPktsPerSecRx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPksPerSecTx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPktsPerSecTotal"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsThroughputRx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsThroughputTx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsThroughputTotal"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgBitSpeed"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgMuSignal"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgMuNoise"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgMuSnr"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgRetries"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPktsDropped"), ("SYMBOL-AP-MIB", "apLanSTPStatsDesignatedRoot"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeId"), ("SYMBOL-AP-MIB", "apLanSTPStatsRootPort"), ("SYMBOL-AP-MIB", "apLanSTPStatsRootPathCost"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeMaxMsgAge"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeHelloTime"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeFwDelay"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfLanIndex"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPortIndex"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPortName"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfState"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPathCost"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgRoot"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgBridge"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgPort"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgCost"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardMixedMode"), ("SYMBOL-AP-MIB", "apWlanCryptoWepMixedMode"), ("SYMBOL-AP-MIB", "apRadioMeshConnAutoSelect"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnIndex"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnMac"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnChannel"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnRssi"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnPriority"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnMac"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnRowStatus"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnIndex"), ("SYMBOL-AP-MIB", "apTrapVlanId"), ("SYMBOL-AP-MIB", "apHotSpotRadiusSessMode"), ("SYMBOL-AP-MIB", "apHotSpotRadiusSessTimeout"), ("SYMBOL-AP-MIB", "apLanPortDuplex"), ("SYMBOL-AP-MIB", "apLanPortSpeed"), ("SYMBOL-AP-MIB", "apLanPortAutoNegotiation"), ("SYMBOL-AP-MIB", "apWanPortDuplex"), ("SYMBOL-AP-MIB", "apWanPortSpeed"), ("SYMBOL-AP-MIB", "apWanPortAutoNegotiation"), ("SYMBOL-AP-MIB", "apRadioMeshTimeout"), ("SYMBOL-AP-MIB", "apRadioMeshTimeoutValue"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipFastRoamPreAuth"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipAllowWpa2Client"), ("SYMBOL-AP-MIB", "apWanDynDNSMode"), ("SYMBOL-AP-MIB", "apWanDynDNSUsername"), ("SYMBOL-AP-MIB", "apWanDynDNSPassword"), ("SYMBOL-AP-MIB", "apWanDynDNSHostname"), ("SYMBOL-AP-MIB", "apWanDynDNSIndex"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateHostname"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateIp"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateStatus"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateResponseIndex"), ("SYMBOL-AP-MIB", "apWanDynDNSPerformUpdate"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateIp"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateHostname"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateStatus"), ("SYMBOL-AP-MIB", "apLoginMessageMode"), ("SYMBOL-AP-MIB", "apLoginMessageText"), ("SYMBOL-AP-MIB", "apRadioSettingsQBSSChannelBeaconInt"), ("SYMBOL-AP-MIB", "apRadioWlanWeight"), ("SYMBOL-AP-MIB", "apRadiusUsersGroup"), ("SYMBOL-AP-MIB", "apRadiusUsersGroupRowStatus"), ("SYMBOL-AP-MIB", "apRadiusUsersGroupId"), ("SYMBOL-AP-MIB", "apRadiusAccessWlanPtrs"), ("SYMBOL-AP-MIB", "apRadiusAccessTimeRule"), ("SYMBOL-AP-MIB", "apRadioSettingsQBSSLoadElementMode"), ("SYMBOL-AP-MIB", "apRapDetectorABGMode"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsUndecryptablePkts"), ("SYMBOL-AP-MIB", "apLanBridgeHelloTime"), ("SYMBOL-AP-MIB", "apLanBridgeFwdDelay"), ("SYMBOL-AP-MIB", "apLanBridgeEntryAgeout"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddressRowStatus"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddress"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddressIndex"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryPort"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryInterface"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryDomainName"), ("SYMBOL-AP-MIB", "apAapTunnelToSwitchEnable"), ("SYMBOL-AP-MIB", "apAapAcKeepAlive"), ("SYMBOL-AP-MIB", "apAapAdoptionState"), ("SYMBOL-AP-MIB", "apAapAdoptingSwitchIP"), ("SYMBOL-AP-MIB", "apMuLocationingIndex"), ("SYMBOL-AP-MIB", "apMuLocationingMuMac"), ("SYMBOL-AP-MIB", "apMuLocationingPortalMac"), ("SYMBOL-AP-MIB", "apMuLocationingSignalStrength"), ("SYMBOL-AP-MIB", "apMuLocationingHeardChannel"), ("SYMBOL-AP-MIB", "apMuLocationingHeardTime"), ("SYMBOL-AP-MIB", "apMuLocationingAddMuMac"), ("SYMBOL-AP-MIB", "apMuLocationingAddPortalMac"), ("SYMBOL-AP-MIB", "apMuLocationingAddSignalStrength"), ("SYMBOL-AP-MIB", "apMuLocationingAddHeardChannel"), ("SYMBOL-AP-MIB", "apMuLocationingAddHeardTime"), ("SYMBOL-AP-MIB", "apAapPassphrase"), ("SYMBOL-AP-MIB", "apWipsSecondaryServerAddr"), ("SYMBOL-AP-MIB", "apWipsPrimaryServerAddr"), ("SYMBOL-AP-MIB", "apTrustedHostEnable"), ("SYMBOL-AP-MIB", "apTrustedHostRangeIndex"), ("SYMBOL-AP-MIB", "apTrustedHostRangeLowerIp"), ("SYMBOL-AP-MIB", "apTrustedHostRangeUpperIp"), ("SYMBOL-AP-MIB", "apAapSwitchAutoDiscoveryEnable"), ("SYMBOL-AP-MIB", "apMuLocationingEnable"), ("SYMBOL-AP-MIB", "apMuLocationingClear"), ("SYMBOL-AP-MIB", "apMuLocationingMaxMus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1variables = apGroupV1dot1variables.setStatus('current')
if mibBuilder.loadTexts: apGroupV1dot1variables.setDescription('Description.')
apGroupV1dot1obsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 2)).setObjects(("SYMBOL-AP-MIB", "apLanAdminVlanTag"), ("SYMBOL-AP-MIB", "apLanNativeVlanTag"), ("SYMBOL-AP-MIB", "apRadioSettingsDtimPrd"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceMode"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundMode"), ("SYMBOL-AP-MIB", "apWlanWeight"), ("SYMBOL-AP-MIB", "apLanTypeFilterAccessMode"), ("SYMBOL-AP-MIB", "apLanVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1obsoleted = apGroupV1dot1obsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: apGroupV1dot1obsoleted.setDescription('Description.')
apGroupV1dot1deprecated = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 3)).setObjects(("SYMBOL-AP-MIB", "apLanEnable"), ("SYMBOL-AP-MIB", "apRadioNMcsRate20MHzChanSgiEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1deprecated = apGroupV1dot1deprecated.setStatus('deprecated')
if mibBuilder.loadTexts: apGroupV1dot1deprecated.setDescription('Description.')
apGroupV1dot1notifications = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 4)).setObjects(("SYMBOL-AP-MIB", "apMuHotspotState"), ("SYMBOL-AP-MIB", "apDynDNSUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1notifications = apGroupV1dot1notifications.setStatus('current')
if mibBuilder.loadTexts: apGroupV1dot1notifications.setDescription('Description.')
apGroupsV2dot2 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 3))
apGroupV2dot2variables = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 3, 1)).setObjects(("SYMBOL-AP-MIB", "apReliableMulticastMode"), ("SYMBOL-AP-MIB", "apReliableMulticastWlan"), ("SYMBOL-AP-MIB", "apReliableMulticastStandaloneMode"), ("SYMBOL-AP-MIB", "apReliableMulticastIgmpQueryVersion"), ("SYMBOL-AP-MIB", "apReliableMulticastIgmpQueryInterval"), ("SYMBOL-AP-MIB", "apReliableMulticastAddrIndex"), ("SYMBOL-AP-MIB", "apReliableMulticastAddress"), ("SYMBOL-AP-MIB", "apReliableMulticastMUStatsIPAddr"), ("SYMBOL-AP-MIB", "apReliableMulticastMUMacAddr"), ("SYMBOL-AP-MIB", "apReliableMulticastTxMulticast"), ("SYMBOL-AP-MIB", "apReliableMulticastTableRowEnable"), ("SYMBOL-AP-MIB", "apReliableMulticastMUStatsIndex"), ("SYMBOL-AP-MIB", "apReliableMulticastMaxStreams"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV2dot2variables = apGroupV2dot2variables.setStatus('current')
if mibBuilder.loadTexts: apGroupV2dot2variables.setDescription('Description.')
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apnPortalRxOctetsAtMCS11=apnPortalRxOctetsAtMCS11, apMuLocationingAddHeardChannel=apMuLocationingAddHeardChannel, apManualTimeZoneSet=apManualTimeZoneSet, apWlanCryptoWepKey4=apWlanCryptoWepKey4, apRadioMeshAvailableConnEntry=apRadioMeshAvailableConnEntry, apRadioCfgDesPowerInMW=apRadioCfgDesPowerInMW, apnPortalTxPktsAt12Mb=apnPortalTxPktsAt12Mb, apnMuRxPktsAtMCS4=apnMuRxPktsAtMCS4, apMuHotspotState=apMuHotspotState, apnWlanTxPktsAt24Mb=apnWlanTxPktsAt24Mb, apMeshStatsRetries=apMeshStatsRetries, apTrustedHost=apTrustedHost, apnPortalTxPktsAt11Mb=apnPortalTxPktsAt11Mb, apWlanAuthEapRadiusAcctMuRetries=apWlanAuthEapRadiusAcctMuRetries, apLoginMessageText=apLoginMessageText, apnMuTxPktsAt2Mb=apnMuTxPktsAt2Mb, apnPortalRxOctetsAtMCS8=apnPortalRxOctetsAtMCS8, apnWlanTxPktsAt6Mb=apnWlanTxPktsAt6Mb, apIpFilterPolicyIndex=apIpFilterPolicyIndex, apWlanSecPolicyName=apWlanSecPolicyName, apMeshBridgeStatsUndecryptablePkts=apMeshBridgeStatsUndecryptablePkts, apGroupV1dot1notifications=apGroupV1dot1notifications, apnPortalRxPktsAtMCS5=apnPortalRxPktsAtMCS5, apWanPppoeClientPrimaryDNSServer=apWanPppoeClientPrimaryDNSServer, apRadioNCfgAmpduAggregationDensity=apRadioNCfgAmpduAggregationDensity, apnWlanRxPktsAtMCS7=apnWlanRxPktsAtMCS7, apnWlanTxOctetsAtMCS0=apnWlanTxOctetsAtMCS0, dot1xAuthBackendAuthFails=dot1xAuthBackendAuthFails, apRadioE2BMapStatusEntry=apRadioE2BMapStatusEntry, apMuLocationingTable=apMuLocationingTable, apLan802dt1xAuthLogin=apLan802dt1xAuthLogin, apnMuRxPktsAt11Mb=apnMuRxPktsAt11Mb, apnWlanTxPktsAtMCS6=apnWlanTxPktsAtMCS6, apWlanEntry=apWlanEntry, apLanMonitor=apLanMonitor, apnWlanTxPktsAt5pt5Mb=apnWlanTxPktsAt5pt5Mb, apWlanAuthKerberosKdcPort1=apWlanAuthKerberosKdcPort1, apWlanQosPolicyEntry=apWlanQosPolicyEntry, apWlanSecPolicyEncryption=apWlanSecPolicyEncryption, apIpFilterLanInPackets=apIpFilterLanInPackets, apPowerMode=apPowerMode, apFlashLed=apFlashLed, apnMuTxOctetsAtMCS5=apnMuTxOctetsAtMCS5, apRadioWlanBssid=apRadioWlanBssid, dot1xAuthSessionStatsEntry=dot1xAuthSessionStatsEntry, apMeshBridgeStatsPktsPerSecTotal=apMeshBridgeStatsPktsPerSecTotal, apLanInfoDuplexMode=apLanInfoDuplexMode, dot1xAuthAuthReauthsWhileAuthenticating=dot1xAuthAuthReauthsWhileAuthenticating, apRadioSettingsVideoCwMax=apRadioSettingsVideoCwMax, apnPortalTxOctetsAtMCS8=apnPortalTxOctetsAtMCS8, apRadioSettingsTable=apRadioSettingsTable, apnWlanRxOctetsAt1Mb=apnWlanRxOctetsAt1Mb, apRapControl=apRapControl, apRadioNMcsRate20MHzChanSgiDisabled=apRadioNMcsRate20MHzChanSgiDisabled, apAapTunnelToSwitchEnable=apAapTunnelToSwitchEnable, apHotSpot=apHotSpot, apWlanSecPolicyEntry=apWlanSecPolicyEntry, apWlanMuAclPolicyRowStatus=apWlanMuAclPolicyRowStatus, apWlanQosPolicyBackgroundTxopsTimeInMS=apWlanQosPolicyBackgroundTxopsTimeInMS, apWanPppoeClientIp=apWanPppoeClientIp, apLan=apLan, apLoadCfgStart=apLoadCfgStart, apnPortalRxOctetsAtMCS1=apnPortalRxOctetsAtMCS1, apnMuTxOctetsAt12Mb=apnMuTxOctetsAt12Mb, apHotSpotDefaultFileMode=apHotSpotDefaultFileMode, apRadioCfgRfFunction=apRadioCfgRfFunction, apDiagCpuStats=apDiagCpuStats, apnRadioStatsEntry=apnRadioStatsEntry, apLoadCfgFtpPassword=apLoadCfgFtpPassword, apManualTimeZoneIndex=apManualTimeZoneIndex, apnMuRxPktsAtMCS6=apnMuRxPktsAtMCS6, apWlanAnswerBroadcastEss=apWlanAnswerBroadcastEss, apnPortalRxOctetsAt18Mb=apnPortalRxOctetsAt18Mb, apnWlanTxOctetsAtMCS15=apnWlanTxOctetsAtMCS15, apRadioSettingsBackgroundMode=apRadioSettingsBackgroundMode, dot1xAuthSessionFramesRx=dot1xAuthSessionFramesRx, apWlanCryptoWepKey3=apWlanCryptoWepKey3, apWanDynDNSUpdateIp=apWanDynDNSUpdateIp, apLanInfoEntry=apLanInfoEntry, apRadiusAccessWlanPtrs=apRadiusAccessWlanPtrs, apnPortalTxOctetsAt12Mb=apnPortalTxOctetsAt12Mb, apManualDateTimeSet=apManualDateTimeSet, apMeshBridgeStatsPktsPerSecRx=apMeshBridgeStatsPktsPerSecRx, apWlanAuthEapRadiusExtPort=apWlanAuthEapRadiusExtPort, apWlanSecurityPolicy=apWlanSecurityPolicy, apMuLocationingMuMac=apMuLocationingMuMac, apnPortalRxOctetsEntry=apnPortalRxOctetsEntry, apWlanAuthEapRadius2SharedSecret=apWlanAuthEapRadius2SharedSecret, apWanPppoeClientGateway=apWanPppoeClientGateway, apWlanMuAclIndex=apWlanMuAclIndex, apnPortalRxPktsAt9Mb=apnPortalRxPktsAt9Mb, apWlanName=apWlanName, apWlanQosPolicyBackgroundCwMin=apWlanQosPolicyBackgroundCwMin, apRadioMeshEntry=apRadioMeshEntry, apWlanQosPolicyVoiceAifsn=apWlanQosPolicyVoiceAifsn, apnPortalRxPktsAt5pt5Mb=apnPortalRxPktsAt5pt5Mb, apLanEthernetPort=apLanEthernetPort, apRadioNCfgEntry=apRadioNCfgEntry, apnWlanTxOctetsAtMCS2=apnWlanTxOctetsAtMCS2, dot1xAuthStatsEntry=dot1xAuthStatsEntry, apWanDynDNSPerformUpdate=apWanDynDNSPerformUpdate, apLanTxPktsEntry=apLanTxPktsEntry, apWlanClientBackHaul=apWlanClientBackHaul, apIpFilterLanMode=apIpFilterLanMode, apnMuRxOctetsAt11Mb=apnMuRxOctetsAt11Mb, apMgmtAccess=apMgmtAccess, apRadioMeshPreferredConnMac=apRadioMeshPreferredConnMac, apnMuRxPktsAtMCS14=apnMuRxPktsAtMCS14, apWlanAuthKerberosTable=apWlanAuthKerberosTable, dot1xAuthEapolRespFramesRx=dot1xAuthEapolRespFramesRx, apnPortalTxPktsAt54Mb=apnPortalTxPktsAt54Mb, apWanVpnKeyAutoEntry=apWanVpnKeyAutoEntry, apHotSpotSecRadiusServerIp=apHotSpotSecRadiusServerIp, TransmitRate=TransmitRate, dot1xAuthSessionOctetsTx=dot1xAuthSessionOctetsTx, apTrapCtrlMuHotspotState=apTrapCtrlMuHotspotState, apKnownApRadio2ClientBridgeMac3=apKnownApRadio2ClientBridgeMac3, apnWlanTxOctetsAt12Mb=apnWlanTxOctetsAt12Mb, apnMuTxPktsAt36Mb=apnMuTxPktsAt36Mb, apnPortalRxPktsAt48Mb=apnPortalRxPktsAt48Mb, apRadioMeshAvailableConnTable=apRadioMeshAvailableConnTable, apRadioNMcsRateIndex=apRadioNMcsRateIndex, apnPortalTxOctetsAtMCS15=apnPortalTxOctetsAtMCS15, DoActionShowProgress=DoActionShowProgress, apRapDetectorABGMode=apRapDetectorABGMode, apRadioSettingsPointersToWlans=apRadioSettingsPointersToWlans, apIpFilterPolicyEndPort=apIpFilterPolicyEndPort, apnRadioStatsNumPktsTxChanWidth20MHz=apnRadioStatsNumPktsTxChanWidth20MHz, dot1xGroup=dot1xGroup, apRadioSettingsVoiceTxopsTime=apRadioSettingsVoiceTxopsTime, apTrapCtrlMuHotspotStateChange=apTrapCtrlMuHotspotStateChange, apManualExpectedMonth=apManualExpectedMonth, apRadioNCfgAmpduTransmitEnabled=apRadioNCfgAmpduTransmitEnabled, apReliableMulticastMaxStreams=apReliableMulticastMaxStreams, apDiagRamStats=apDiagRamStats, dot1xAuthAuthControlledPortStatus=dot1xAuthAuthControlledPortStatus, apRadioWlanBandwidthEntry=apRadioWlanBandwidthEntry, apRadioE2BMapStatusTable=apRadioE2BMapStatusTable, dot1xAuthBackendAuthSuccesses=dot1xAuthBackendAuthSuccesses, apnMuRxPktsAt12Mb=apnMuRxPktsAt12Mb, apnMuTxPktsAt54Mb=apnMuTxPktsAt54Mb, dot1xAuthAuthEapStartsWhileAuthenticating=dot1xAuthAuthEapStartsWhileAuthenticating, apWlanAuthKerberosEntry=apWlanAuthKerberosEntry, apKnownApRadio2ClientBridgeMac2=apKnownApRadio2ClientBridgeMac2, apnPortalRxOctetsAtMCS15=apnPortalRxOctetsAtMCS15, RadioType=RadioType, apLanSTPStatsPortIntfPortName=apLanSTPStatsPortIntfPortName, apRadioMeshPreferredConnTable=apRadioMeshPreferredConnTable, apnPortalRxOctetsAt48Mb=apnPortalRxOctetsAt48Mb, apReliableMulticastStandaloneMode=apReliableMulticastStandaloneMode, apTrapCtrlSumStatsThresholdRadioN5000MHz=apTrapCtrlSumStatsThresholdRadioN5000MHz, apWlanBwShareModeTable=apWlanBwShareModeTable, apDiagRamPercentageUsed=apDiagRamPercentageUsed, apGroupV2dot2variables=apGroupV2dot2variables, apWanDynDNSUpdateResponseIndex=apWanDynDNSUpdateResponseIndex, apMuLocationingEntry=apMuLocationingEntry, apRadioSettingsBestEffortCwMax=apRadioSettingsBestEffortCwMax, dot1xAuthKeyTxEnabled=dot1xAuthKeyTxEnabled, apLanTypeFilterRowStatus=apLanTypeFilterRowStatus, apnMuRxOctetsAtMCS8=apnMuRxOctetsAtMCS8, apWpaCounterMeasure=apWpaCounterMeasure, apNotificationsGroup=apNotificationsGroup, dot1xAuthAuthReauthsWhileAuthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apLoadCfgOperation=apLoadCfgOperation, apHotSpotRadiusAcctSecret=apHotSpotRadiusAcctSecret, apWlanMuAclPolicyTable=apWlanMuAclPolicyTable, apRadioNCfgTable=apRadioNCfgTable, apHotSpotRadiusAcctMode=apHotSpotRadiusAcctMode, apAapSwitchDiscoveryIPAddressIndex=apAapSwitchDiscoveryIPAddressIndex, dot1xAuthSessionId=dot1xAuthSessionId, apTrapCtrlSumStatsCanBeSetAccessPoint=apTrapCtrlSumStatsCanBeSetAccessPoint, apnPortalRxPktsAtMCS13=apnPortalRxPktsAtMCS13, apRadioSettingsBackgroundAifsn=apRadioSettingsBackgroundAifsn, apnWlanTxPktsAtMCS7=apnWlanTxPktsAtMCS7, apMeshBridgeStatsRadioType=apMeshBridgeStatsRadioType, apLanSTPStatsPortIntfLanIndex=apLanSTPStatsPortIntfLanIndex, apRadioSettingsName=apRadioSettingsName, apnMuTxOctetsAtMCS6=apnMuTxOctetsAtMCS6, apnWlanRxPktsAtMCS6=apnWlanRxPktsAtMCS6, apRadioSettingsVoiceCwMax=apRadioSettingsVoiceCwMax, apWlanCryptoCcmpFastRoamPreAuth=apWlanCryptoCcmpFastRoamPreAuth, apSubnetTable=apSubnetTable, apVlanPointerToWlan=apVlanPointerToWlan, apKnownApEntry=apKnownApEntry, apTrapCtrlSumStatsCanBeSetRadioN5000MHz=apTrapCtrlSumStatsCanBeSetRadioN5000MHz, apnMuRxOctetsAt18Mb=apnMuRxOctetsAt18Mb, apWlanAuthEapRadius1Port=apWlanAuthEapRadius1Port, apRadioSettingsBeaconInt=apRadioSettingsBeaconInt, apWlanCryptoCcmpKeyRotationInterval=apWlanCryptoCcmpKeyRotationInterval, apIpFilterLan=apIpFilterLan, apWlanQosPolicyVideoTxopsTimeInMS=apWlanQosPolicyVideoTxopsTimeInMS, apKnownApKbPerSec=apKnownApKbPerSec, apnPortalTxOctetsAtMCS12=apnPortalTxOctetsAtMCS12, apManualTimeZoneTable=apManualTimeZoneTable, apRadioSettingsEntry=apRadioSettingsEntry, apnPortalRxOctetsAtMCS4=apnPortalRxOctetsAtMCS4, apWlanSubnet=apWlanSubnet, apnPortalTxOctetsAt5pt5Mb=apnPortalTxOctetsAt5pt5Mb, apnWlanRxOctetsAtMCS0=apnWlanRxOctetsAtMCS0, apTrapCtrlDynDNSUpdateHostname=apTrapCtrlDynDNSUpdateHostname, apnPortalTxPktsAtMCS8=apnPortalTxPktsAtMCS8, apWlanCryptoKeyguardKey4=apWlanCryptoKeyguardKey4, apWlanMuAclPolicyPointerToWlan=apWlanMuAclPolicyPointerToWlan, apnMuRxPktsAtMCS11=apnMuRxPktsAtMCS11, apnMuTxOctetsAtMCS7=apnMuTxOctetsAtMCS7, apnWlanTxOctetsAt11Mb=apnWlanTxOctetsAt11Mb, apLanInfoNetworkMask=apLanInfoNetworkMask, apnPortalTxOctetsAt48Mb=apnPortalTxOctetsAt48Mb, apWlanQosPolicyIndex=apWlanQosPolicyIndex, apnMuTxOctetsAtMCS8=apnMuTxOctetsAtMCS8, apNotifications=apNotifications, apTrapCtrlSumStatsTable=apTrapCtrlSumStatsTable, apnMuTxPktsAtMCS8=apnMuTxPktsAtMCS8, apWlanCryptoCcmpKey=apWlanCryptoCcmpKey, apLanTxFrameErrors=apLanTxFrameErrors, apHotSpotExternalFailPageUrl=apHotSpotExternalFailPageUrl, apnWlanTxPktsAtMCS10=apnWlanTxPktsAtMCS10, apnMuTxOctetsAt36Mb=apnMuTxOctetsAt36Mb, apWlanCryptoKeyguardKeyToUse=apWlanCryptoKeyguardKeyToUse, apWlanQosPolicyVideoTxopsTime=apWlanQosPolicyVideoTxopsTime, apWlanCryptoTkipKeyToUse=apWlanCryptoTkipKeyToUse, apnWlanRxOctetsAtMCS4=apnWlanRxOctetsAtMCS4, apReliableMulticastMUStatsIndex=apReliableMulticastMUStatsIndex, apTrustedHostRangeEntry=apTrustedHostRangeEntry, apWlanDisallowMuToMu=apWlanDisallowMuToMu, apWlanAclPolicy=apWlanAclPolicy, apHotSpotWhiteListWalledGardenIp=apHotSpotWhiteListWalledGardenIp, apSubnetDhcpState=apSubnetDhcpState, apnPortalRxOctetsAt11Mb=apnPortalRxOctetsAt11Mb, apWlanCryptoTkipKey=apWlanCryptoTkipKey, apnMuRxPktsTable=apnMuRxPktsTable, apnMuRxPktsAt36Mb=apnMuRxPktsAt36Mb, apWlanCryptoTkipEntry=apWlanCryptoTkipEntry, apRadioMeshWlanPtr=apRadioMeshWlanPtr, apLanSTPStatsTable=apLanSTPStatsTable, apWanDynDNSIndex=apWanDynDNSIndex, apnMuTxPktsAtMCS1=apnMuTxPktsAtMCS1, apTrapRadioMac=apTrapRadioMac, apLanAdminVlanTag=apLanAdminVlanTag, apnMuTxOctetsAtMCS13=apnMuTxOctetsAtMCS13, apIpFilterPolicySrcStartIp=apIpFilterPolicySrcStartIp, apnWlanTxPktsTable=apnWlanTxPktsTable, apTrapCtrlSumStatsCanBeSetRadioBG=apTrapCtrlSumStatsCanBeSetRadioBG, apnRadioStatsBssid=apnRadioStatsBssid, apnWlanTxOctetsAt2Mb=apnWlanTxOctetsAt2Mb, apnWlanRxOctetsAtMCS10=apnWlanRxOctetsAtMCS10, apGroupV1dot1deprecated=apGroupV1dot1deprecated, apWlanAuthKerberosUsername=apWlanAuthKerberosUsername, apnMuTxPktsAtMCS6=apnMuTxPktsAtMCS6, apnWlanRxOctetsAt54Mb=apnWlanRxOctetsAt54Mb, apnWlanTxOctetsAtMCS5=apnWlanTxOctetsAtMCS5, dot1xAuthStatsTable=dot1xAuthStatsTable, apnWlanRxPktsAt48Mb=apnWlanRxPktsAt48Mb, apnWlanRxOctetsAt6Mb=apnWlanRxOctetsAt6Mb)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apWanDynDNSUsername=apWanDynDNSUsername, apMuLocationingSignalStrength=apMuLocationingSignalStrength, apWlanCryptoKeyguardTable=apWlanCryptoKeyguardTable, apWlanUseSecureBeacon=apWlanUseSecureBeacon, apWlanQosPolicyPointerToWlan=apWlanQosPolicyPointerToWlan, apLanSTPStatsBridgeId=apLanSTPStatsBridgeId, apnPortalTxPktsAt18Mb=apnPortalTxPktsAt18Mb, apManualDateTimeSetting=apManualDateTimeSetting, apRadioSettingsRtsThresh=apRadioSettingsRtsThresh, apRadioSettingsVideoAifsn=apRadioSettingsVideoAifsn, apnPortalRxPktsAtMCS1=apnPortalRxPktsAtMCS1, apnMuRxOctetsAtMCS13=apnMuRxOctetsAtMCS13, AbbrevRowStatus=AbbrevRowStatus, apWanDynDNSUpdateHostname=apWanDynDNSUpdateHostname, apnMuTxPktsTable=apnMuTxPktsTable, apnMuTxOctetsAtMCS14=apnMuTxOctetsAtMCS14, apnWlanRxPktsAtMCS12=apnWlanRxPktsAtMCS12, apRadioWlanBandwidthTable=apRadioWlanBandwidthTable, apWlanAuthEapRadiusAcctMuTimeout=apWlanAuthEapRadiusAcctMuTimeout, apDiagStats=apDiagStats, apWnmpPing=apWnmpPing, apRadioBssDtimPrd=apRadioBssDtimPrd, apnRadioStatsRssiAvgAcrossAntennas=apnRadioStatsRssiAvgAcrossAntennas, apnMuTxPktsAt12Mb=apnMuTxPktsAt12Mb, apWanPort=apWanPort, apDiagRamUsed=apDiagRamUsed, apHotSpotPriRadiusPort=apHotSpotPriRadiusPort, apLanBridgeTable=apLanBridgeTable, apManualTimeZoneEntry=apManualTimeZoneEntry, apWanClearStats=apWanClearStats, apnStats=apnStats, apMeshBridgeStatsTable=apMeshBridgeStatsTable, ap7131=ap7131, apnWlanTxOctetsAtMCS6=apnWlanTxOctetsAtMCS6, apIpFilterLanPolicyPolicy=apIpFilterLanPolicyPolicy, apnRadioStatsNumPktsRxSGI800ns=apnRadioStatsNumPktsRxSGI800ns, apnMuTxOctetsEntry=apnMuTxOctetsEntry, apnPortalTxPktsAtMCS5=apnPortalTxPktsAtMCS5, apRadioSettingsIndex=apRadioSettingsIndex, apnMuTxOctetsAtMCS2=apnMuTxOctetsAtMCS2, apStats=apStats, apPowerDefRadio=apPowerDefRadio, apRadioSettingsVoiceTxopsTimeInMS=apRadioSettingsVoiceTxopsTimeInMS, apTrapVlanId=apTrapVlanId, apHotSpotWhiteListEntry=apHotSpotWhiteListEntry, apWlanCryptoTkipBcastKeyRotation=apWlanCryptoTkipBcastKeyRotation, apRapDetectorMode=apRapDetectorMode, apIpFilterWlanPolicyDirection=apIpFilterWlanPolicyDirection, apnMuRxPktsAt2Mb=apnMuRxPktsAt2Mb, apnMuTxPktsAt48Mb=apnMuTxPktsAt48Mb, apnMuTxPktsAtMCS0=apnMuTxPktsAtMCS0, apnWlanRxPktsAt9Mb=apnWlanRxPktsAt9Mb, apWlanQosPolicyVoiceCwMax=apWlanQosPolicyVoiceCwMax, apnWlanRxOctetsAtMCS2=apnWlanRxOctetsAtMCS2, apWlanAuthEapRadius1Server=apWlanAuthEapRadius1Server, apWlanQosPolicyVoiceTxopsTime=apWlanQosPolicyVoiceTxopsTime, apWlanQosPolicyName=apWlanQosPolicyName, apnWlanTxPktsAtMCS2=apnWlanTxPktsAtMCS2, apReliableMulticastIgmpQueryInterval=apReliableMulticastIgmpQueryInterval, apIpFilterWlanMode=apIpFilterWlanMode, apManualTimeZoneName=apManualTimeZoneName, apKnownApChannel1=apKnownApChannel1, apManualExpectedSeconds=apManualExpectedSeconds, apMuClearStats=apMuClearStats, apnPortalTxPktsAtMCS6=apnPortalTxPktsAtMCS6, apnPortalRxPktsAt24Mb=apnPortalRxPktsAt24Mb, apnMuTxPktsAtMCS12=apnMuTxPktsAtMCS12, apDiagCpuLoad15Min=apDiagCpuLoad15Min, apKnownApEssName=apKnownApEssName, dot1xAuthAdminControlledDirections=dot1xAuthAdminControlledDirections, apRadioBssTable=apRadioBssTable, apRadioMeshTable=apRadioMeshTable, apRadioNCfgChannelOffset=apRadioNCfgChannelOffset, apnMuTxOctetsAtMCS9=apnMuTxOctetsAtMCS9, apRadioCfgDesPowerLevel=apRadioCfgDesPowerLevel, apnPortalTxOctetsAt36Mb=apnPortalTxOctetsAt36Mb, apGroupsV1dot1=apGroupsV1dot1, apIpFilterWlanInPackets=apIpFilterWlanInPackets, apWnmpPingDestAP=apWnmpPingDestAP, apRadioSettingsAntenna=apRadioSettingsAntenna, apIpFilterLanPolicyIndex=apIpFilterLanPolicyIndex, apnRadioStatsApSsid=apnRadioStatsApSsid, apLanTypeFilter=apLanTypeFilter, apAapAcKeepAlive=apAapAcKeepAlive, apnMuRxOctetsAt6Mb=apnMuRxOctetsAt6Mb, apReliableMulticastMUEntry=apReliableMulticastMUEntry, apMus=apMus, apWanPppoeClientSecondaryDNSServer=apWanPppoeClientSecondaryDNSServer, apnWlanRxOctetsAtMCS11=apnWlanRxOctetsAtMCS11, apnWlanTxOctetsAt48Mb=apnWlanTxOctetsAt48Mb, apLanTypeFilterEntry=apLanTypeFilterEntry, apRadioSettingsQBSSLoadElementMode=apRadioSettingsQBSSLoadElementMode, PYSNMP_MODULE_ID=moduleid, apnPortalTxOctetsAtMCS13=apnPortalTxOctetsAtMCS13, apGroupsV2dot2=apGroupsV2dot2, apMuLocationingMaxMus=apMuLocationingMaxMus, apnPortalTxPktsEntry=apnPortalTxPktsEntry, apLanPortAutoNegotiation=apLanPortAutoNegotiation, apLanSTPStatsBridgeHelloTime=apLanSTPStatsBridgeHelloTime, apnWlanTxOctetsAtMCS8=apnWlanTxOctetsAtMCS8, apnWlanRxPktsAtMCS3=apnWlanRxPktsAtMCS3, apAapSwitchDiscoveryPort=apAapSwitchDiscoveryPort, apWlanCryptoKeyguardKey2=apWlanCryptoKeyguardKey2, symbol=symbol, apnPortalRxPktsAtMCS9=apnPortalRxPktsAtMCS9, apIpFilterLanEntry=apIpFilterLanEntry, apnPortalTxOctetsAtMCS14=apnPortalTxOctetsAtMCS14, apRadioCfgDesPlacement=apRadioCfgDesPlacement, apWlanSecPolicyRowStatus=apWlanSecPolicyRowStatus, apLanBridgeFwdDelay=apLanBridgeFwdDelay, apWlanMulticastAddr2=apWlanMulticastAddr2, apWlanMuAclEndingMac=apWlanMuAclEndingMac, apnPortalTxPktsAt1Mb=apnPortalTxPktsAt1Mb, apnPortalTxPktsAtMCS12=apnPortalTxPktsAtMCS12, apMuLocationingAddSignalStrength=apMuLocationingAddSignalStrength, apMgmtAccessToAllow=apMgmtAccessToAllow, apLanPortSpeed=apLanPortSpeed, apAapSwitchDiscoveryIPAddressTable=apAapSwitchDiscoveryIPAddressTable, dot1xAuthEapolFramesRx=dot1xAuthEapolFramesRx, apRadioSettingsBackgroundTxopsTimeInMS=apRadioSettingsBackgroundTxopsTimeInMS, apMuLocationing=apMuLocationing, apIpFilterLanOutPackets=apIpFilterLanOutPackets, apWlanMuAclPolicyAccessMode=apWlanMuAclPolicyAccessMode, apnMuTxPktsAt6Mb=apnMuTxPktsAt6Mb, apnMuRxOctetsTable=apnMuRxOctetsTable, apRadioSettingsVoiceCwMin=apRadioSettingsVoiceCwMin, apSubnetNativeVlanTag=apSubnetNativeVlanTag, apnPortalTxOctetsTable=apnPortalTxOctetsTable, dot1xAuthSessionOctetsRx=dot1xAuthSessionOctetsRx, apnMuTxOctetsAtMCS3=apnMuTxOctetsAtMCS3, apWan=apWan, apRadioNCfgChannelWidth=apRadioNCfgChannelWidth, apMeshBridgeStatsAvgMuSnr=apMeshBridgeStatsAvgMuSnr, apRadioMeshPreferredConnEntry=apRadioMeshPreferredConnEntry, apWlanSecPolicyPointerToWlan=apWlanSecPolicyPointerToWlan, apIpFilterLanPolicyTable=apIpFilterLanPolicyTable, apnWlanRxOctetsAt9Mb=apnWlanRxOctetsAt9Mb, apnWlanTxPktsAt54Mb=apnWlanTxPktsAt54Mb, apWirelessAPStats=apWirelessAPStats, apnPortalRxPktsEntry=apnPortalRxPktsEntry, apnWlanRxPktsAtMCS1=apnWlanRxPktsAtMCS1, apnPortalRxPktsTable=apnPortalRxPktsTable, apRadioCfgPlacement=apRadioCfgPlacement, apWlanCryptoTkipAllowWpa2Client=apWlanCryptoTkipAllowWpa2Client, apnPortalRxPktsAtMCS8=apnPortalRxPktsAtMCS8, apKnownApUnitName=apKnownApUnitName, apReliableMulticastIgmpQueryVersion=apReliableMulticastIgmpQueryVersion, apWlanMuAclPolicyIndex=apWlanMuAclPolicyIndex, apWlanMuAclStartingMac=apWlanMuAclStartingMac, apRadiusUsers=apRadiusUsers, apLanTxPktsTable=apLanTxPktsTable, apTrapCtrlSumStatsDescr=apTrapCtrlSumStatsDescr, dot1xAuthBackendAuthState=dot1xAuthBackendAuthState, apMuLocationingClear=apMuLocationingClear, apnPortalTxPktsAtMCS13=apnPortalTxPktsAtMCS13, apRadiusUsersGroupId=apRadiusUsersGroupId, apWlanAuthEapSyslogMode=apWlanAuthEapSyslogMode, apLanTxBytes=apLanTxBytes, dot1xAuthSessionTerminateCause=dot1xAuthSessionTerminateCause, apMuVlan=apMuVlan, ap7181=ap7181, apRouterDefaultGatewayInterface=apRouterDefaultGatewayInterface, apVlanName=apVlanName, apnWlanRxOctetsAt2Mb=apnWlanRxOctetsAt2Mb, apRadioSettingsVideoCwMin=apRadioSettingsVideoCwMin, apnWlanRxOctetsAtMCS12=apnWlanRxOctetsAtMCS12, apMeshStatsAvgBitSpeed=apMeshStatsAvgBitSpeed, apWnmpPingDestMu=apWnmpPingDestMu, apLanSTPStatsPortIntfState=apLanSTPStatsPortIntfState, apnWlanTxPktsAtMCS5=apnWlanTxPktsAtMCS5, apRadioNMcsRateTable=apRadioNMcsRateTable, dot1xAuthAuthFailWhileAuthenticating=dot1xAuthAuthFailWhileAuthenticating, apnPortalRxPktsAtMCS12=apnPortalRxPktsAtMCS12, apWips=apWips, apKnownApRadioType1=apKnownApRadioType1, apKnownApRadioType2=apKnownApRadioType2, apWanPppoe=apWanPppoe, apLoadCfgSuccess=apLoadCfgSuccess, apKnownApRadio1ClientBridgeMac3=apKnownApRadio1ClientBridgeMac3, apnPortalRxOctetsAtMCS12=apnPortalRxOctetsAtMCS12, apTrapCtrlEnableEntry=apTrapCtrlEnableEntry, apMeshStatsEntry=apMeshStatsEntry, apnPortalRxPktsAtMCS15=apnPortalRxPktsAtMCS15, apWlanCryptoKeyguardEntry=apWlanCryptoKeyguardEntry, apnMuTxOctetsAt9Mb=apnMuTxOctetsAt9Mb, apnWlanRxPktsAtMCS4=apnWlanRxPktsAtMCS4, apnWlanRxOctetsAt24Mb=apnWlanRxOctetsAt24Mb, apTrapCtrlEnable=apTrapCtrlEnable, apWlanAuthEapRadiusExtAcctServer=apWlanAuthEapRadiusExtAcctServer, apSwitch=apSwitch, apWanDynDNSUpdateResponseEntry=apWanDynDNSUpdateResponseEntry, apKnownApChannel2=apKnownApChannel2, apnMuTxOctetsAtMCS12=apnMuTxOctetsAtMCS12, apRadioNMcsRate40MHzChanSgiDisabled=apRadioNMcsRate40MHzChanSgiDisabled, apRouter=apRouter, apRadioNCfgShortGuardInterval=apRadioNCfgShortGuardInterval, apKnownAPList=apKnownAPList, apRadioNMcsRateEntry=apRadioNMcsRateEntry, apnMuRxOctetsAtMCS0=apnMuRxOctetsAtMCS0, apnPortalTxOctetsAt1Mb=apnPortalTxOctetsAt1Mb, dot1xAuthTxPeriod=dot1xAuthTxPeriod, apnWlanRxPktsAt18Mb=apnWlanRxPktsAt18Mb, apWlanQosPolicyTable=apWlanQosPolicyTable, apTrapCtrlSumStatsThresholdRadioN2400MHz=apTrapCtrlSumStatsThresholdRadioN2400MHz, apWlanQosPolicyVoiceCwMin=apWlanQosPolicyVoiceCwMin, apnMuTxOctetsAtMCS4=apnMuTxOctetsAtMCS4, apnMuTxPktsEntry=apnMuTxPktsEntry, apnWlanRxOctetsAtMCS15=apnWlanRxOctetsAtMCS15, apLanTypeFilterIndex=apLanTypeFilterIndex, apLanBridgeHelloTime=apLanBridgeHelloTime, apMuLocationingAddMuMac=apMuLocationingAddMuMac, apnWlanTxOctetsAtMCS1=apnWlanTxOctetsAtMCS1, dot1xAuthServerTimeout=dot1xAuthServerTimeout, apWanVpnKeyAutoTable=apWanVpnKeyAutoTable, apWanPppoeClientTable=apWanPppoeClientTable, apnPortalTxPktsAtMCS2=apnPortalTxPktsAtMCS2, apWlanAuthEapServerTimeout=apWlanAuthEapServerTimeout, apRadioNCfgAmsduTransmitEnabled=apRadioNCfgAmsduTransmitEnabled, dot1xAuthSessionTime=dot1xAuthSessionTime, apnPortalTxOctetsAtMCS11=apnPortalTxOctetsAtMCS11, apTrustedHostEnable=apTrustedHostEnable, apRadioCfgEntry=apRadioCfgEntry, apHotSpotEntry=apHotSpotEntry, apKnownAPClearStats=apKnownAPClearStats, DateAndTime=DateAndTime, apLoadCfgServerPath=apLoadCfgServerPath, apRadioWlanBssTable=apRadioWlanBssTable, apnPortalTxOctetsAt9Mb=apnPortalTxOctetsAt9Mb, apRadioSettingsWMMQosParam=apRadioSettingsWMMQosParam, apWlanAuthEapMuQuietPeriod=apWlanAuthEapMuQuietPeriod, apWanPortSpeed=apWanPortSpeed, apRf=apRf, apnRadioStatsNumPktsRxChanWidth40MHz=apnRadioStatsNumPktsRxChanWidth40MHz, apRadiusAccessTable=apRadiusAccessTable, dot1xAuthOperControlledDirections=dot1xAuthOperControlledDirections, apHotSpotWhiteListRowStatus=apHotSpotWhiteListRowStatus, dot1xAuthEapolStartFramesRx=dot1xAuthEapolStartFramesRx, apIpFilterPolicyTable=apIpFilterPolicyTable, apnPortalTxOctetsAtMCS6=apnPortalTxOctetsAtMCS6, apnPortalTxOctetsAtMCS4=apnPortalTxOctetsAtMCS4, apGroupsV1dot0=apGroupsV1dot0, apWlanCryptoTkipKeyRotationInterval=apWlanCryptoTkipKeyRotationInterval, apnMuRxOctetsAt2Mb=apnMuRxOctetsAt2Mb, apnMuTxOctetsTable=apnMuTxOctetsTable, apnWlanTxPktsAtMCS9=apnWlanTxPktsAtMCS9, apRfGroup=apRfGroup, apnPortalTxPktsTable=apnPortalTxPktsTable, apnWlanRxPktsAt5pt5Mb=apnWlanRxPktsAt5pt5Mb, apnMuRxOctetsAt5pt5Mb=apnMuRxOctetsAt5pt5Mb, apnWlanTxPktsAtMCS13=apnWlanTxPktsAtMCS13, apLanTxErrors=apLanTxErrors, apMuLocationingIndex=apMuLocationingIndex, apnWlanRxPktsAtMCS14=apnWlanRxPktsAtMCS14, apIpFilterLanPolicyDirection=apIpFilterLanPolicyDirection)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apMeshStatsIndex=apMeshStatsIndex, apMeshBridgeStatsIndex=apMeshBridgeStatsIndex, apnWlanTxOctetsAtMCS4=apnWlanTxOctetsAtMCS4, apnWlanTxPktsAt9Mb=apnWlanTxPktsAt9Mb, dot1xAuthAuthControlledPortControl=dot1xAuthAuthControlledPortControl, apHotSpotWhiteListIndex=apHotSpotWhiteListIndex, apnPortalTxPktsAtMCS3=apnPortalTxPktsAtMCS3, apManualExpectedHour=apManualExpectedHour, apRadioCfgDesChannel=apRadioCfgDesChannel, dot1xAuthBackendResponses=dot1xAuthBackendResponses, apnMuRxPktsAtMCS8=apnMuRxPktsAtMCS8, dot1xAuthEapolReqIdFramesTx=dot1xAuthEapolReqIdFramesTx, apnPortalRxOctetsAt54Mb=apnPortalRxOctetsAt54Mb, apWlanAuthKerberosKdcServerIpR=apWlanAuthKerberosKdcServerIpR, apHotSpotPriRadiusServerIp=apHotSpotPriRadiusServerIp, apnPortalTxPktsAtMCS0=apnPortalTxPktsAtMCS0, dot1xAuthEapLengthErrorFramesRx=dot1xAuthEapLengthErrorFramesRx, apWlanAuthEapTable=apWlanAuthEapTable, apnPortalRxPktsAt2Mb=apnPortalRxPktsAt2Mb, apRadioCfgReset=apRadioCfgReset, apnWlanRxOctetsAt48Mb=apnWlanRxOctetsAt48Mb, apWlanMuAclTable=apWlanMuAclTable, apLoadCfgServerFilename=apLoadCfgServerFilename, apManualTimeZoneSetting=apManualTimeZoneSetting, ap5181=ap5181, apnPortalTxPktsAt36Mb=apnPortalTxPktsAt36Mb, apnWlanRxOctetsTable=apnWlanRxOctetsTable, apnMuRxOctetsAtMCS12=apnMuRxOctetsAtMCS12, apWanVpn=apWanVpn, apLanRxPktsTable=apLanRxPktsTable, apWlanQosPolicyBestEffortTxopsTimeInMS=apWlanQosPolicyBestEffortTxopsTimeInMS, apSubnetVlanEnable=apSubnetVlanEnable, apIpFilterWlanEntry=apIpFilterWlanEntry, apRadioNCfgDesChannel=apRadioNCfgDesChannel, apMuLocationingAddEntryToTable=apMuLocationingAddEntryToTable, apIpFilterWlanPolicyEntry=apIpFilterWlanPolicyEntry, apReliableMulticastTableRowEnable=apReliableMulticastTableRowEnable, apKnownApFwVers=apKnownApFwVers, apRadioMeshMaxClients=apRadioMeshMaxClients, apnWlanTxOctetsTable=apnWlanTxOctetsTable, apReliableMulticastAddrIndex=apReliableMulticastAddrIndex, apRadioMeshTimeoutValue=apRadioMeshTimeoutValue, apnPortalTxOctetsAtMCS3=apnPortalTxOctetsAtMCS3, apManualExpectedDay=apManualExpectedDay, apWlanCryptoKeyguardPassKey=apWlanCryptoKeyguardPassKey, apRadioNCfgAmpduTransmitSizeLimit=apRadioNCfgAmpduTransmitSizeLimit, apnMuRxPktsEntry=apnMuRxPktsEntry, apIpFilterPolicyDestEndIp=apIpFilterPolicyDestEndIp, apReliableMulticastTxMulticast=apReliableMulticastTxMulticast, apnWlanRxPktsAtMCS2=apnWlanRxPktsAtMCS2, apWlanAuthEapRadius2Server=apWlanAuthEapRadius2Server, apnWlanRxPktsAt54Mb=apnWlanRxPktsAt54Mb, apRadioMeshPreferredConnIndex=apRadioMeshPreferredConnIndex, apLanBridgeEntry=apLanBridgeEntry, apnPortalTxOctetsAtMCS5=apnPortalTxOctetsAtMCS5, apRadioBssIndex=apRadioBssIndex, apWlanUseRadio=apWlanUseRadio, apnWlanTxOctetsAt6Mb=apnWlanTxOctetsAt6Mb, apnWlanTxOctetsAtMCS11=apnWlanTxOctetsAtMCS11, apnPortalTxOctetsAt11Mb=apnPortalTxOctetsAt11Mb, dot1xAuthDiagTable=dot1xAuthDiagTable, apRadioBssPrimaryWlan=apRadioBssPrimaryWlan, apnMuRxPktsAtMCS0=apnMuRxPktsAtMCS0, apnMuRxPktsAtMCS2=apnMuRxPktsAtMCS2, apTrapCtrlMuMac=apTrapCtrlMuMac, apRadioNSettingsEntry=apRadioNSettingsEntry, apVlanRowStatus=apVlanRowStatus, apnMuTxPktsAtMCS3=apnMuTxPktsAtMCS3, apnMuTxOctetsAt18Mb=apnMuTxOctetsAt18Mb, apPower=apPower, apIpFilterLanTable=apIpFilterLanTable, apnMuRxOctetsAtMCS5=apnMuRxOctetsAtMCS5, apWlanCryptoKeyguardKey3=apWlanCryptoKeyguardKey3, apLanSTPStatsPortIntfPathCost=apLanSTPStatsPortIntfPathCost, apnMuTxPktsAtMCS14=apnMuTxPktsAtMCS14, apRadiusAccess=apRadiusAccess, apWlanQosPolicyVideoCwMin=apWlanQosPolicyVideoCwMin, apWanVpnKeyAutoSALifeTime=apWanVpnKeyAutoSALifeTime, apRadioSettingsBestEffortTxopsTimeInMS=apRadioSettingsBestEffortTxopsTimeInMS, apnWlanTxPktsAtMCS8=apnWlanTxPktsAtMCS8, apRadiusUsersGroupTable=apRadiusUsersGroupTable, apnPortalTxOctetsAtMCS0=apnPortalTxOctetsAtMCS0, apLoginMessage=apLoginMessage, apnWlanRxPktsEntry=apnWlanRxPktsEntry, apWlanCryptoWepKey1=apWlanCryptoWepKey1, apnWlanRxOctetsAt18Mb=apnWlanRxOctetsAt18Mb, apTrapLanMonitorMode=apTrapLanMonitorMode, apHotSpotRadiusAcctTimeout=apHotSpotRadiusAcctTimeout, apMuLocationingHeardChannel=apMuLocationingHeardChannel, apWlanCryptoWepMixedMode=apWlanCryptoWepMixedMode, dot1xAuthBackendOtherRequestsToSupplicant=dot1xAuthBackendOtherRequestsToSupplicant, apHotSpotRadiusSessMode=apHotSpotRadiusSessMode, apLanTypeFilterAccessMode=apLanTypeFilterAccessMode, dot1xAuthBackendNonNakResponsesFromSupplicant=dot1xAuthBackendNonNakResponsesFromSupplicant, apWlanAuthEapReauthenticationPeriod=apWlanAuthEapReauthenticationPeriod, AllowedChannels=AllowedChannels, apKnownApType=apKnownApType, apWlanVlanId=apWlanVlanId, apnWlanTxPktsAt2Mb=apnWlanTxPktsAt2Mb, apRadio=apRadio, apnWlanRxOctetsAtMCS3=apnWlanRxOctetsAtMCS3, apTrustedHostRangeTable=apTrustedHostRangeTable, apLoginMessageMode=apLoginMessageMode, apLanTimeOutValue=apLanTimeOutValue, apnWlanTxOctetsAtMCS3=apnWlanTxOctetsAtMCS3, apLanSTPStatsPortIntfDsgRoot=apLanSTPStatsPortIntfDsgRoot, apWlanCryptoWepTable=apWlanCryptoWepTable, apHotSpotRadiusAcctServerIp=apHotSpotRadiusAcctServerIp, apnMuRxPktsAtMCS3=apnMuRxPktsAtMCS3, apRadiusUsersGroupEntry=apRadiusUsersGroupEntry, apIpFilterWlanOutPackets=apIpFilterWlanOutPackets, apMeshBridgeStatsAvgBitSpeed=apMeshBridgeStatsAvgBitSpeed, apnPortalTxOctetsAtMCS1=apnPortalTxOctetsAtMCS1, apTrapCtrlEnableIndex=apTrapCtrlEnableIndex, apnPortalTxPktsAtMCS7=apnPortalTxPktsAtMCS7, apIpFilterPolicyUseStatus=apIpFilterPolicyUseStatus, apnMuRxOctetsAt24Mb=apnMuRxOctetsAt24Mb, apnWlanTxPktsAt18Mb=apnWlanTxPktsAt18Mb, apMuLocationingAddPortalMac=apMuLocationingAddPortalMac, apnWlanRxOctetsAtMCS14=apnWlanRxOctetsAtMCS14, apnPortalRxOctetsAtMCS5=apnPortalRxOctetsAtMCS5, apRadioSettingsBand=apRadioSettingsBand, apRadioSettingsShortPreamble=apRadioSettingsShortPreamble, apLanClearStats=apLanClearStats, apnPortalRxPktsAt12Mb=apnPortalRxPktsAt12Mb, apRadioSettingsVideoTxopsTimeInMS=apRadioSettingsVideoTxopsTimeInMS, apKnownApIp=apKnownApIp, apTrapCtrlSumStats=apTrapCtrlSumStats, apWlanCryptoCcmpKeyToUse=apWlanCryptoCcmpKeyToUse, apTrapCtrlSumStatsUnits=apTrapCtrlSumStatsUnits, apMeshBridgeStatsPktsDropped=apMeshBridgeStatsPktsDropped, apTrapLanMonitorReason=apTrapLanMonitorReason, dot1xAuthBackendAccessChallenges=dot1xAuthBackendAccessChallenges, apTrapCtrlSumStatsIndex=apTrapCtrlSumStatsIndex, apRadioNMcsRate20MHzChanSgiEnabled=apRadioNMcsRate20MHzChanSgiEnabled, apWlanAuthEapEntry=apWlanAuthEapEntry, apnPortalTxOctetsAt54Mb=apnPortalTxOctetsAt54Mb, apLanInfoIpAddress=apLanInfoIpAddress, dot1x=dot1x, apRadioSettingsBasicRates=apRadioSettingsBasicRates, apnWlanTxOctetsAtMCS9=apnWlanTxOctetsAtMCS9, apLanTypeFilterSubnetIndex=apLanTypeFilterSubnetIndex, apnWlanRxPktsAtMCS9=apnWlanRxPktsAtMCS9, ScaleBy100=ScaleBy100, apWlanQosPolicyBackgroundCwMax=apWlanQosPolicyBackgroundCwMax, dot1xPaeState=dot1xPaeState, dot1xAuthAuthEapStartsWhileAuthenticated=dot1xAuthAuthEapStartsWhileAuthenticated, apLanInfoIndex=apLanInfoIndex, MultiPointer63=MultiPointer63, dot1xAuthEapolLogoffFramesRx=dot1xAuthEapolLogoffFramesRx, apTrapCtrlGroup=apTrapCtrlGroup, apRadioSettingsVideoMode=apRadioSettingsVideoMode, apWlanQosPolicy=apWlanQosPolicy, apHotSpotTable=apHotSpotTable, apIpFilterWlanDefOutAction=apIpFilterWlanDefOutAction, apLanTxPkts=apLanTxPkts, apIpFilterPolicyDestStartIp=apIpFilterPolicyDestStartIp, apnPortalRxPktsAtMCS6=apnPortalRxPktsAtMCS6, dot1xAuthMaxReq=dot1xAuthMaxReq, apWlanMuAclEntry=apWlanMuAclEntry, apTrapWpaCounterMeasure=apTrapWpaCounterMeasure, dot1xAuthLastEapolFrameVersion=dot1xAuthLastEapolFrameVersion, apnPortalTxOctetsAtMCS7=apnPortalTxOctetsAtMCS7, apWlanCryptoCcmpBcastKeyRotation=apWlanCryptoCcmpBcastKeyRotation, dot1xAuthInvalidEapolFramesRx=dot1xAuthInvalidEapolFramesRx, apWlanCrypto=apWlanCrypto, apnPortalTxPktsAtMCS9=apnPortalTxPktsAtMCS9, apLanInfoEthernetAddress=apLanInfoEthernetAddress, apnWlanRxOctetsAtMCS6=apnWlanRxOctetsAtMCS6, apnMuRxPktsAtMCS9=apnMuRxPktsAtMCS9, apnRadioStatsNumPktsTxChanWidth40MHz=apnRadioStatsNumPktsTxChanWidth40MHz, apWanDynDNSEntry=apWanDynDNSEntry, apnMuTxPktsAt9Mb=apnMuTxPktsAt9Mb, apRadioMeshClientBridgeMode=apRadioMeshClientBridgeMode, apnWlanRxOctetsAtMCS7=apnWlanRxOctetsAtMCS7, apMeshStatsTable=apMeshStatsTable, dot1xAuthAuthEapLogoffWhileAuthenticated=dot1xAuthAuthEapLogoffWhileAuthenticated, apnMuRxPktsAt24Mb=apnMuRxPktsAt24Mb, apnMuTxOctetsAt2Mb=apnMuTxOctetsAt2Mb, apMeshStatsRadioType=apMeshStatsRadioType, apLanSTPStatsRootPort=apLanSTPStatsRootPort, apnPortalRxPktsAt36Mb=apnPortalRxPktsAt36Mb, apMeshStatsThroughput=apMeshStatsThroughput, apnMuRxOctetsAtMCS3=apnMuRxOctetsAtMCS3, apLanSTPStatsPortIntfEntry=apLanSTPStatsPortIntfEntry, apnMuRxPktsAt48Mb=apnMuRxPktsAt48Mb, apnWlanTxOctetsAtMCS10=apnWlanTxOctetsAtMCS10, apWlanAuthKerberosKdcServerIp1=apWlanAuthKerberosKdcServerIp1, apRadioSettingsEnable=apRadioSettingsEnable, apIpFilterWlanPolicyTable=apIpFilterWlanPolicyTable, apnMuTxOctetsAt6Mb=apnMuTxOctetsAt6Mb, apnMuTxOctetsAt24Mb=apnMuTxOctetsAt24Mb, apnWlanTxPktsAt48Mb=apnWlanTxPktsAt48Mb, apnPortalRxPktsAt11Mb=apnPortalRxPktsAt11Mb, apRadioNCfgAmpduAggregationMaxRecvSize=apRadioNCfgAmpduAggregationMaxRecvSize, apGroupV1dot1obsoleted=apGroupV1dot1obsoleted, apWlanMuAclPointerToAclPolicy=apWlanMuAclPointerToAclPolicy, apnMuTxPktsAtMCS2=apnMuTxPktsAtMCS2, apWlan=apWlan, apIpFilterLanPolicyEntry=apIpFilterLanPolicyEntry, apLanSTPStatsRootPathCost=apLanSTPStatsRootPathCost, DoActionNow=DoActionNow, apLanSTPStatsPortIntfDsgBridge=apLanSTPStatsPortIntfDsgBridge, apnPortalRxOctetsAtMCS13=apnPortalRxOctetsAtMCS13, apnMuTxPktsAt24Mb=apnMuTxPktsAt24Mb, apnWlanTxPktsAtMCS1=apnWlanTxPktsAtMCS1, moduleid=moduleid, apWlanAuthEapReauthenticationMaxRetries=apWlanAuthEapReauthenticationMaxRetries, apWnmpPingNumResponses=apWnmpPingNumResponses, apWlanAuthEapServerMaxRetries=apWlanAuthEapServerMaxRetries, apLoadCfgFtpUsername=apLoadCfgFtpUsername, apRadioCfgPowerLevel=apRadioCfgPowerLevel, apWanDynDNSUpdateStatus=apWanDynDNSUpdateStatus, apLanSTPStatsBridgeFwDelay=apLanSTPStatsBridgeFwDelay, dot1xAuthAuthTimeoutsWhileAuthenticating=dot1xAuthAuthTimeoutsWhileAuthenticating, apnRadioStatsTable=apnRadioStatsTable, apIpFilterPolicyProtocol=apIpFilterPolicyProtocol, apAap=apAap, PartsPer10k=PartsPer10k, apnPortalTxOctetsAt18Mb=apnPortalTxOctetsAt18Mb, apnMuRxPktsAt5pt5Mb=apnMuRxPktsAt5pt5Mb, apnWlanRxPktsAtMCS0=apnWlanRxPktsAtMCS0, apLanSTPStatsPortIntfDsgPort=apLanSTPStatsPortIntfDsgPort, apnMuRxOctetsAtMCS7=apnMuRxOctetsAtMCS7, apnWlanTxOctetsAtMCS14=apnWlanTxOctetsAtMCS14, apWnmpPingNum=apWnmpPingNum, apWlanAuthEapRadius2Port=apWlanAuthEapRadius2Port, apWlanQosPolicyVideoAifsn=apWlanQosPolicyVideoAifsn, apKnownApMu=apKnownApMu, apnWlanRxPktsAt12Mb=apnWlanRxPktsAt12Mb, apWlanAuthEapRadiusExtSharedSecret=apWlanAuthEapRadiusExtSharedSecret, apIpFilterWlan=apIpFilterWlan, apnPortalRxPktsAtMCS4=apnPortalRxPktsAtMCS4, apWlanSecPolicyIndex=apWlanSecPolicyIndex, dot1xAuthEntersConnecting=dot1xAuthEntersConnecting, apnWlanRxPktsAtMCS8=apnWlanRxPktsAtMCS8, apnMuTxOctetsAtMCS10=apnMuTxOctetsAtMCS10, apPowerStatus=apPowerStatus, apnMuTxPktsAt5pt5Mb=apnMuTxPktsAt5pt5Mb, apLanRxPkts=apLanRxPkts, apHotSpotRadiusAcctPort=apHotSpotRadiusAcctPort, dot1xAuthSessionAuthenticMethod=dot1xAuthSessionAuthenticMethod, apWlanBwShareModeEntry=apWlanBwShareModeEntry, apMuLocationingEnable=apMuLocationingEnable, dot1xAuthSessionUserName=dot1xAuthSessionUserName, apTrapCtrlDynDNSUpdateIp=apTrapCtrlDynDNSUpdateIp, apWnmpPingDest=apWnmpPingDest, dot1xAuthReAuthPeriod=dot1xAuthReAuthPeriod, apnPortalRxOctetsAt36Mb=apnPortalRxOctetsAt36Mb, apnMuRxPktsAt9Mb=apnMuRxPktsAt9Mb, apTrapCtrlSumStatsThresholdAccessPoint=apTrapCtrlSumStatsThresholdAccessPoint, apnPortalRxPktsAtMCS3=apnPortalRxPktsAtMCS3, apWnmpPingPacketData=apWnmpPingPacketData, apnPortalRxOctetsAtMCS3=apnPortalRxOctetsAtMCS3)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apnMuTxPktsAt1Mb=apnMuTxPktsAt1Mb, apnMuTxPktsAtMCS15=apnMuTxPktsAtMCS15, apRadioNCfgAmsduAggregationMaxRecvSize=apRadioNCfgAmsduAggregationMaxRecvSize, dot1xAuthReAuthEnabled=dot1xAuthReAuthEnabled, apnPortalRxPktsAtMCS11=apnPortalRxPktsAtMCS11, apIpFilterPolicyStartPort=apIpFilterPolicyStartPort, apVlanTable=apVlanTable, apLanInfoSpeed=apLanInfoSpeed, apManualExpectedYear=apManualExpectedYear, apnPortalTxPktsAt2Mb=apnPortalTxPktsAt2Mb, apnWlanTxOctetsAtMCS13=apnWlanTxOctetsAtMCS13, dot1xAuthSessionStatsTable=dot1xAuthSessionStatsTable, apRadioNSettingsMode=apRadioNSettingsMode, apWanPortDuplex=apWanPortDuplex, apRadioMeshAvailableConnChannel=apRadioMeshAvailableConnChannel, apRadioMeshPreferredConnRowStatus=apRadioMeshPreferredConnRowStatus, apRadioSettingsMacAddress=apRadioSettingsMacAddress, apWlanIndex=apWlanIndex, apHotSpotPriRadiusSecret=apHotSpotPriRadiusSecret, apWanVpnTunnelConfig=apWanVpnTunnelConfig, apFlashLedDestAP=apFlashLedDestAP, apRadioE2BMapStatusMessage=apRadioE2BMapStatusMessage, apWlanCryptoCcmpMixedMode=apWlanCryptoCcmpMixedMode, apIpFilterPolicyRowStatus=apIpFilterPolicyRowStatus, apnPortalRxOctetsAt5pt5Mb=apnPortalRxOctetsAt5pt5Mb, apManualCurrSystemDateTime=apManualCurrSystemDateTime, apnPortalRxPktsAtMCS10=apnPortalRxPktsAtMCS10, apnMuRxPktsAtMCS15=apnMuRxPktsAtMCS15, apVlanEntry=apVlanEntry, apnMuTxPktsAtMCS10=apnMuTxPktsAtMCS10, dot1xAuthAuthEapLogoffWhileAuthenticating=dot1xAuthAuthEapLogoffWhileAuthenticating, apIpFilterWlanPolicyAction=apIpFilterWlanPolicyAction, apLan802dt1xAuth=apLan802dt1xAuth, apnWlanTxPktsAtMCS0=apnWlanTxPktsAtMCS0, apTrapCtrlDynDNSUpdateStatus=apTrapCtrlDynDNSUpdateStatus, apHotSpotWhiteListTable=apHotSpotWhiteListTable, apKnownApTable=apKnownApTable, apLoadCfg=apLoadCfg, apRapGroup=apRapGroup, dot1xAuthAuthSuccessWhileAuthenticating=dot1xAuthAuthSuccessWhileAuthenticating, apnWlanRxOctetsAt11Mb=apnWlanRxOctetsAt11Mb, apnPortalTxOctetsAtMCS9=apnPortalTxOctetsAtMCS9, apnMuRxOctetsAtMCS2=apnMuRxOctetsAtMCS2, apnWlanTxPktsAtMCS11=apnWlanTxPktsAtMCS11, apLanPortDuplex=apLanPortDuplex, apMeshBridgeStatsThroughputTx=apMeshBridgeStatsThroughputTx, apWnmpPingPacketLength=apWnmpPingPacketLength, apHotSpotExternalLoginPageUrl=apHotSpotExternalLoginPageUrl, apRadioCfgExceptionChannel=apRadioCfgExceptionChannel, dot1xAuthLastEapolFrameSource=dot1xAuthLastEapolFrameSource, apLanRxDropped=apLanRxDropped, apRadioCfgChannel=apRadioCfgChannel, SinglePointer=SinglePointer, apRadioSettingsBestEffortMode=apRadioSettingsBestEffortMode, apWlanCryptoCcmpPassphrase=apWlanCryptoCcmpPassphrase, apTrapCtrlEnableTable=apTrapCtrlEnableTable, apnMuRxOctetsAtMCS10=apnMuRxOctetsAtMCS10, apnMuTxOctetsAtMCS15=apnMuTxOctetsAtMCS15, apKnownApIndex=apKnownApIndex, apWlanEnable=apWlanEnable, apManualExpectedMinutes=apManualExpectedMinutes, apRadiusAccessEntry=apRadiusAccessEntry, apWlanWMMQosParam=apWlanWMMQosParam, apnPortalTxPktsAt6Mb=apnPortalTxPktsAt6Mb, apRadioSettingsBGMode=apRadioSettingsBGMode, apWlanAuthKerberosRealmName=apWlanAuthKerberosRealmName, apnPortalTxPktsAt24Mb=apnPortalTxPktsAt24Mb, apnPortalRxOctetsAt9Mb=apnPortalRxOctetsAt9Mb, apnMuRxOctetsAtMCS11=apnMuRxOctetsAtMCS11, apWlanCryptoKeyguardMixedMode=apWlanCryptoKeyguardMixedMode, apWlanQosPolicyVoiceTxopsTimeInMS=apWlanQosPolicyVoiceTxopsTimeInMS, apReliableMulticastMode=apReliableMulticastMode, apReliableMulticast=apReliableMulticast, apnPortalTxPktsAtMCS15=apnPortalTxPktsAtMCS15, apRadioSettingsBackgroundCwMax=apRadioSettingsBackgroundCwMax, apnPortalTxOctetsEntry=apnPortalTxOctetsEntry, apnPortalTxOctetsAt24Mb=apnPortalTxOctetsAt24Mb, apLanInfoEnabled=apLanInfoEnabled, apReliableMulticastWlan=apReliableMulticastWlan, apnMuRxPktsAt1Mb=apnMuRxPktsAt1Mb, apReliableMulticastEntry=apReliableMulticastEntry, apnPortalRxOctetsAt2Mb=apnPortalRxOctetsAt2Mb, apLanTxDropped=apLanTxDropped, apnWlanRxPktsAt6Mb=apnWlanRxPktsAt6Mb, apnMuRxOctetsAtMCS1=apnMuRxOctetsAtMCS1, dot1xAuthEapolFramesTx=dot1xAuthEapolFramesTx, apRadioCfgChannelMode=apRadioCfgChannelMode, apWlanBwShareMode=apWlanBwShareMode, apFlashLedAction=apFlashLedAction, apnMuRxOctetsAtMCS9=apnMuRxOctetsAtMCS9, apTrapMuVlan=apTrapMuVlan, apnWlanRxPktsAtMCS13=apnWlanRxPktsAtMCS13, apnMuTxPktsAtMCS5=apnMuTxPktsAtMCS5, apnPortalRxOctetsAtMCS14=apnPortalRxOctetsAtMCS14, apMeshBridgeStatsAvgRetries=apMeshBridgeStatsAvgRetries, apnRadioStatsNumPktsRxChanWidth20MHz=apnRadioStatsNumPktsRxChanWidth20MHz, apnMuTxPktsAtMCS4=apnMuTxPktsAtMCS4, sysoids=sysoids, apWlanMulticastAddr1=apWlanMulticastAddr1, apLanNativeVlanTag=apLanNativeVlanTag, apnMuTxOctetsAt54Mb=apnMuTxOctetsAt54Mb, apnWlanRxPktsAtMCS15=apnWlanRxPktsAtMCS15, apWlanCryptoWepEntry=apWlanCryptoWepEntry, apnWlanTxPktsEntry=apnWlanTxPktsEntry, apMeshBridgeStatsEncType=apMeshBridgeStatsEncType, apWlanMuAclRowStatus=apWlanMuAclRowStatus, apnPortalRxOctetsAt24Mb=apnPortalRxOctetsAt24Mb, apKnownApRadio2ClientBridgeMac1=apKnownApRadio2ClientBridgeMac1, apWlanQosPolicyBackgroundTxopsTime=apWlanQosPolicyBackgroundTxopsTime, apRadioCfgPosPowerLevel=apRadioCfgPosPowerLevel, apnWlanRxOctetsAtMCS1=apnWlanRxOctetsAtMCS1, apWlanQosPolicyBestEffortAifsn=apWlanQosPolicyBestEffortAifsn, apReliableMulticastMUStatsIPAddr=apReliableMulticastMUStatsIPAddr, apTrapCtrlSumStatsThresholdMu=apTrapCtrlSumStatsThresholdMu, apnMuRxPktsAtMCS7=apnMuRxPktsAtMCS7, apnWlanTxOctetsAtMCS12=apnWlanTxOctetsAtMCS12, apLanInfoTable=apLanInfoTable, apnMuTxOctetsAt48Mb=apnMuTxOctetsAt48Mb, apWlanClearStats=apWlanClearStats, apWlanAuthKerberosKdcPort2=apWlanAuthKerberosKdcPort2, apRadioNMcsRateType=apRadioNMcsRateType, apAapSwitchDiscoveryIPAddressRowStatus=apAapSwitchDiscoveryIPAddressRowStatus, apMeshBridgeStatsAuthType=apMeshBridgeStatsAuthType, apLanRxFrameErrors=apLanRxFrameErrors, apIpFilterLanDefInAction=apIpFilterLanDefInAction, apIpFilterWlanPolicyPolicy=apIpFilterWlanPolicyPolicy, apnMuRxPktsAt54Mb=apnMuRxPktsAt54Mb, apLanTimeOut=apLanTimeOut, apManualExpectedTimeZone=apManualExpectedTimeZone, apnPortalTxOctetsAt2Mb=apnPortalTxOctetsAt2Mb, apRadioSettingsVoiceAifsn=apRadioSettingsVoiceAifsn, dot1xAuthQuietPeriod=dot1xAuthQuietPeriod, apnMuRxPktsAtMCS1=apnMuRxPktsAtMCS1, apTrapCtrlRateLimit=apTrapCtrlRateLimit, apWlanQosPolicyBackgroundAifsn=apWlanQosPolicyBackgroundAifsn, apRadioMeshAvailableConnMac=apRadioMeshAvailableConnMac, dot1xAuthSuppTimeout=dot1xAuthSuppTimeout, apDynDNSUpdate=apDynDNSUpdate, apnPortalTxPktsAtMCS11=apnPortalTxPktsAtMCS11, apMeshBridgeStatsThroughputTotal=apMeshBridgeStatsThroughputTotal, apnPortalRxPktsAtMCS2=apnPortalRxPktsAtMCS2, apTrustedHostRangeIndex=apTrustedHostRangeIndex, apGroups=apGroups, apRap=apRap, apRadioMeshAvailableConnRssi=apRadioMeshAvailableConnRssi, apManualTime=apManualTime, apIpFilterLanIndex=apIpFilterLanIndex, dot1xAuthEapolReqFramesTx=dot1xAuthEapolReqFramesTx, apWlanCryptoTkipFastRoamPreAuth=apWlanCryptoTkipFastRoamPreAuth, apRadioWlanBssEntry=apRadioWlanBssEntry, apKnownApSendCfgStatus=apKnownApSendCfgStatus, apnPortalRxPktsAt54Mb=apnPortalRxPktsAt54Mb, apLanVlanEnable=apLanVlanEnable, apnMuTxPktsAtMCS7=apnMuTxPktsAtMCS7, apWlanSecPolicyAuthentication=apWlanSecPolicyAuthentication, apnMuRxOctetsAt36Mb=apnMuRxOctetsAt36Mb, apnRadioStatsNumPktsTxSGI800ns=apnRadioStatsNumPktsTxSGI800ns, ap5131=ap5131, dot1xAuthSessionFramesTx=dot1xAuthSessionFramesTx, apRadioSettingsBestEffortTxopsTime=apRadioSettingsBestEffortTxopsTime, apWlanCryptoCcmpEntry=apWlanCryptoCcmpEntry, dot1xPaeAuthenticator=dot1xPaeAuthenticator, apAapPassphrase=apAapPassphrase, apLoadCfgResult=apLoadCfgResult, apWanPppoeClientIndex=apWanPppoeClientIndex, apnWlanTxOctetsAt24Mb=apnWlanTxOctetsAt24Mb, apnWlanRxPktsAtMCS11=apnWlanRxPktsAtMCS11, apnWlanTxOctetsAt1Mb=apnWlanTxOctetsAt1Mb, apMuLocationingAddHeardTime=apMuLocationingAddHeardTime, apnWlanTxPktsAtMCS15=apnWlanTxPktsAtMCS15, apSwitchGroup=apSwitchGroup, apKnownApPktsPerSec=apKnownApPktsPerSec, apIpFilterLanPolicyPackets=apIpFilterLanPolicyPackets, apnPortalRxOctetsAtMCS6=apnPortalRxOctetsAtMCS6, apDiagCpuLoad1Min=apDiagCpuLoad1Min, apRadioE2BMapStatusBcMcEncCipher=apRadioE2BMapStatusBcMcEncCipher, apnMuTxPktsAtMCS11=apnMuTxPktsAtMCS11, apnWlanRxOctetsAt5pt5Mb=apnWlanRxOctetsAt5pt5Mb, EthernetType=EthernetType, apnMuTxOctetsAtMCS11=apnMuTxOctetsAtMCS11, apLanStats=apLanStats, apWlanTable=apWlanTable, apWlanMuIdleTimeout=apWlanMuIdleTimeout, apTrapCtrlSumStatsCanBeSetRadioN2400MHz=apTrapCtrlSumStatsCanBeSetRadioN2400MHz, apRadioSettingsQBSSChannelBeaconInt=apRadioSettingsQBSSChannelBeaconInt, apWanPortAutoNegotiation=apWanPortAutoNegotiation, apWlanCryptoWepKeyToUse=apWlanCryptoWepKeyToUse, apnPortalRxPktsAt1Mb=apnPortalRxPktsAt1Mb, apWlanCryptoTkipPassphrase=apWlanCryptoTkipPassphrase, apRadioCfgPowerInMW=apRadioCfgPowerInMW, apnPortalRxOctetsAt6Mb=apnPortalRxOctetsAt6Mb, apWanDynDNSHostname=apWanDynDNSHostname, apAapSwitchDiscoveryIPAddressEntry=apAapSwitchDiscoveryIPAddressEntry, apLanPort=apLanPort, apnWlanTxOctetsAt54Mb=apnWlanTxOctetsAt54Mb, apLanSTPStatsDesignatedRoot=apLanSTPStatsDesignatedRoot, apWlanAuthEapMuMaxRetries=apWlanAuthEapMuMaxRetries, apnPortalTxPktsAtMCS10=apnPortalTxPktsAtMCS10, apWnmpPingAction=apWnmpPingAction, apWlanMuAclPolicyEntry=apWlanMuAclPolicyEntry, apWlanAuthEapMuTimeout=apWlanAuthEapMuTimeout, apRadiusServer=apRadiusServer, apnPortalRxPktsAt6Mb=apnPortalRxPktsAt6Mb, apSubnetTypeFilterAccessMode=apSubnetTypeFilterAccessMode, apRadioWlanWeight=apRadioWlanWeight, apRadioBssEntry=apRadioBssEntry, apnMuTxOctetsAtMCS0=apnMuTxOctetsAtMCS0, apRadiusUsersGroupRowStatus=apRadiusUsersGroupRowStatus, apIpFilterPolicyEntry=apIpFilterPolicyEntry, apWanDynDNSPassword=apWanDynDNSPassword, apTrapCtrlSumStatsThresholdRadioA=apTrapCtrlSumStatsThresholdRadioA, apIpFilterPolicySrcStartPort=apIpFilterPolicySrcStartPort, apLoadCfgServerIpAddr=apLoadCfgServerIpAddr, apMeshBridgeStatsEntry=apMeshBridgeStatsEntry, apAapAdoptionState=apAapAdoptionState, apMeshBridgeStatsThroughputRx=apMeshBridgeStatsThroughputRx, apnWlanRxPktsAt1Mb=apnWlanRxPktsAt1Mb, apRadioNCfgPosChannel=apRadioNCfgPosChannel, apnMuRxPktsAtMCS5=apnMuRxPktsAtMCS5, apTrapCtrlSumStatsThresholdWlans=apTrapCtrlSumStatsThresholdWlans, apTrapCtrlSumStatsCanBeSetWlan=apTrapCtrlSumStatsCanBeSetWlan, apnPortalTxOctetsAtMCS10=apnPortalTxOctetsAtMCS10, apWlanQosPolicyRowStatus=apWlanQosPolicyRowStatus, apnMuRxOctetsAt48Mb=apnMuRxOctetsAt48Mb, apnRadioStatsExtnChannel=apnRadioStatsExtnChannel, RowStatus=RowStatus, apTrustedHostRangeLowerIp=apTrustedHostRangeLowerIp, apWlanAuthEapRadiusAcctMode=apWlanAuthEapRadiusAcctMode, apTrustedHostRangeUpperIp=apTrustedHostRangeUpperIp, apnWlanTxPktsAtMCS4=apnWlanTxPktsAtMCS4, dot1xAuthEapLogoffsWhileConnecting=dot1xAuthEapLogoffsWhileConnecting, apnMuTxOctetsAt11Mb=apnMuTxOctetsAt11Mb, apWlanQosPolicyVideoCwMax=apWlanQosPolicyVideoCwMax, dot1xPaePortNumber=dot1xPaePortNumber, apTrapMuMac=apTrapMuMac, apAdmin=apAdmin, apLoadCfgGroup=apLoadCfgGroup, StaticRowEnable=StaticRowEnable, apnPortalTxPktsAt48Mb=apnPortalTxPktsAt48Mb, apnWlanRxOctetsAtMCS9=apnWlanRxOctetsAtMCS9, apRadioNSettingsHTProtectionStatus=apRadioNSettingsHTProtectionStatus, apTrapCtrl=apTrapCtrl, apWlanCryptoWepKey2=apWlanCryptoWepKey2, apnWlanRxPktsAt24Mb=apnWlanRxPktsAt24Mb, apRadioNMcsRate40MHzChanSgiEnabled=apRadioNMcsRate40MHzChanSgiEnabled, apRadioSettingsBackgroundCwMin=apRadioSettingsBackgroundCwMin, apRadioNCfgChannel=apRadioNCfgChannel, apLanSTPStatsPortIntfPortIndex=apLanSTPStatsPortIntfPortIndex, apWlanVoicePrioritization=apWlanVoicePrioritization, apSubnetAdminVlanTag=apSubnetAdminVlanTag, apWipsSecondaryServerAddr=apWipsSecondaryServerAddr, apRadioMesh=apRadioMesh, apMuLocationingAddEntryToEntry=apMuLocationingAddEntryToEntry, apnWlanRxPktsAt36Mb=apnWlanRxPktsAt36Mb)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apDiagRamTotal=apDiagRamTotal, apRadioSettingsSupportedRates=apRadioSettingsSupportedRates, apnWlanTxOctetsEntry=apnWlanTxOctetsEntry, apRadiusUsersGroup=apRadiusUsersGroup, HexPassword=HexPassword, apRadioNSettingsTable=apRadioNSettingsTable, apnPortalRxPktsAtMCS0=apnPortalRxPktsAtMCS0, apTrapCtrlSumStatsThresholdRadioBG=apTrapCtrlSumStatsThresholdRadioBG, apWlanAuth=apWlanAuth, apWlanAuthEapReauthenticationEnable=apWlanAuthEapReauthenticationEnable, apWlanCryptoTkipTable=apWlanCryptoTkipTable, apHotSpotRadiusAcctRetryCount=apHotSpotRadiusAcctRetryCount, apWlanAuthEapRadius1SharedSecret=apWlanAuthEapRadius1SharedSecret, apRadioNMcsRateEnabled=apRadioNMcsRateEnabled, apWlanCryptoWepPassKey=apWlanCryptoWepPassKey, apIpFilterWlanPolicyPackets=apIpFilterWlanPolicyPackets, apSubnet=apSubnet, apAapSwitchAutoDiscoveryEnable=apAapSwitchAutoDiscoveryEnable, apnMuRxOctetsAt9Mb=apnMuRxOctetsAt9Mb, apnMuRxPktsAt18Mb=apnMuRxPktsAt18Mb, apnMuTxOctetsAt1Mb=apnMuTxOctetsAt1Mb, apnMuRxOctetsAtMCS15=apnMuRxOctetsAtMCS15, apRadioSettingsBestEffortAifsn=apRadioSettingsBestEffortAifsn, apLanVlan=apLanVlan, apnPortalTxPktsAtMCS4=apnPortalTxPktsAtMCS4, apAapAdoptingSwitchIP=apAapAdoptingSwitchIP, apWlanCryptoKeyguardKey1=apWlanCryptoKeyguardKey1, apWlanEnableWMM=apWlanEnableWMM, apReliableMulticastAddress=apReliableMulticastAddress, apnMuTxPktsAt18Mb=apnMuTxPktsAt18Mb, dot1xAuthEapolRespIdFramesRx=dot1xAuthEapolRespIdFramesRx, apRadioMeshPreferredConnPriority=apRadioMeshPreferredConnPriority, apIpFilterPolicySrcEndIp=apIpFilterPolicySrcEndIp, apnMuTxPktsAt11Mb=apnMuTxPktsAt11Mb, apKnownApSendCfg=apKnownApSendCfg, apTrapLanMonitor=apTrapLanMonitor, apnMuTxPktsAtMCS13=apnMuTxPktsAtMCS13, apIpFilterLanPolicyRowStatus=apIpFilterLanPolicyRowStatus, apnPortalTxPktsAtMCS1=apnPortalTxPktsAtMCS1, apLan802dt1xAuthPass=apLan802dt1xAuthPass, apWlanAuthKerberosKdcPortR=apWlanAuthKerberosKdcPortR, apIpFilterLanDefOutAction=apIpFilterLanDefOutAction, apIpFilterWlanTable=apIpFilterWlanTable, apLanEnable=apLanEnable, apnMuTxOctetsAt5pt5Mb=apnMuTxOctetsAt5pt5Mb, apnWlanRxOctetsAt12Mb=apnWlanRxOctetsAt12Mb, dot1xAuthConfigEntry=dot1xAuthConfigEntry, apMeshBridgeStatsMac=apMeshBridgeStatsMac, apWlanAuthEapMuTxPeriod=apWlanAuthEapMuTxPeriod, apLanBridgeEntryAgeout=apLanBridgeEntryAgeout, apRapControlDetectors=apRapControlDetectors, apKnownApMac=apKnownApMac, apReliableMulticastMUTable=apReliableMulticastMUTable, apnWlanTxOctetsAt18Mb=apnWlanTxOctetsAt18Mb, Password=Password, apHotSpotExternalWelomePageUrl=apHotSpotExternalWelomePageUrl, apTrapCtrlSumStatsEntry=apTrapCtrlSumStatsEntry, apKnownApRadio1ClientBridgeMac2=apKnownApRadio1ClientBridgeMac2, dot1xAuthEntersAuthenticating=dot1xAuthEntersAuthenticating, apMeshBridgeStatsWlanPtr=apMeshBridgeStatsWlanPtr, apnPortalRxOctetsAtMCS9=apnPortalRxOctetsAtMCS9, apRadioSettingsDtimPrd=apRadioSettingsDtimPrd, MultiPointer255=MultiPointer255, dot1xAuthDiagEntry=dot1xAuthDiagEntry, apnPortalRxOctetsAtMCS10=apnPortalRxOctetsAtMCS10, apWanDynDNSUpdateResponseTable=apWanDynDNSUpdateResponseTable, apRadioSettingsVideoTxopsTime=apRadioSettingsVideoTxopsTime, apTrapCtrlDynDNSUpdate=apTrapCtrlDynDNSUpdate, apnPortalTxOctetsAtMCS2=apnPortalTxOctetsAtMCS2, apnMuRxOctetsAt12Mb=apnMuRxOctetsAt12Mb, apnRadioStatsChannelWidthMode=apnRadioStatsChannelWidthMode, apnWlanTxPktsAt1Mb=apnWlanTxPktsAt1Mb, apRadioMeshConnAutoSelect=apRadioMeshConnAutoSelect, apWlanMaxMus=apWlanMaxMus, apRadioMeshBaseBridgeMode=apRadioMeshBaseBridgeMode, apnWlanRxOctetsAt36Mb=apnWlanRxOctetsAt36Mb, apRadioCfgPosChannel=apRadioCfgPosChannel, apHotSpotSecRadiusPort=apHotSpotSecRadiusPort, apStatsGroup=apStatsGroup, apnPortalTxOctetsAt6Mb=apnPortalTxOctetsAt6Mb, apRadioE2BMapStatus=apRadioE2BMapStatus, apnMuRxOctetsEntry=apnMuRxOctetsEntry, apWlanHotspot=apWlanHotspot, apWlanAuthKerberosKdcServerIp2=apWlanAuthKerberosKdcServerIp2, apnWlanTxPktsAtMCS14=apnWlanTxPktsAtMCS14, apnWlanTxOctetsAt9Mb=apnWlanTxOctetsAt9Mb, wsd=wsd, apVlanIndex=apVlanIndex, apWlanWeight=apWlanWeight, apIpFilterWlanPolicyRowStatus=apIpFilterWlanPolicyRowStatus, apTrapCtrlSumStatsCanBeSetRadioA=apTrapCtrlSumStatsCanBeSetRadioA, apWlanQosPolicyBestEffortCwMax=apWlanQosPolicyBestEffortCwMax, apWanDynDNS=apWanDynDNS, apnMuRxOctetsAtMCS14=apnMuRxOctetsAtMCS14, apnMuTxOctetsAtMCS1=apnMuTxOctetsAtMCS1, apRadiusAccessTimeRule=apRadiusAccessTimeRule, apRadioSettingsBestEffortCwMin=apRadioSettingsBestEffortCwMin, apWanDynDNSMode=apWanDynDNSMode, apnWlanTxPktsAt11Mb=apnWlanTxPktsAt11Mb, apDiagCpuLoad5Min=apDiagCpuLoad5Min, apnMuTxPktsAtMCS9=apnMuTxPktsAtMCS9, apnWlanRxPktsTable=apnWlanRxPktsTable, apLanSTPStatsEntry=apLanSTPStatsEntry, apAapSwitchDiscoveryDomainName=apAapSwitchDiscoveryDomainName, apnWlanTxPktsAt36Mb=apnWlanTxPktsAt36Mb, apWlanSecPolicyTable=apWlanSecPolicyTable, apnPortalRxOctetsAtMCS7=apnPortalRxOctetsAtMCS7, apAapSwitchDiscoveryInterface=apAapSwitchDiscoveryInterface, apLanSTPStatsPortIntfTable=apLanSTPStatsPortIntfTable, apnWlanRxOctetsAtMCS13=apnWlanRxOctetsAtMCS13, apLanTypeFilterTable=apLanTypeFilterTable, apLanSTPStatsBridgeMaxMsgAge=apLanSTPStatsBridgeMaxMsgAge, apnWlanTxOctetsAt36Mb=apnWlanTxOctetsAt36Mb, apWlanVlanMode=apWlanVlanMode, apLanBridgeMaxMsgAge=apLanBridgeMaxMsgAge, apWlanAuthEapSyslogServerIp=apWlanAuthEapSyslogServerIp, apnMuRxOctetsAt54Mb=apnMuRxOctetsAt54Mb, apRadioClearStats=apRadioClearStats, apnWlanTxPktsAtMCS3=apnWlanTxPktsAtMCS3, apnPortalRxPktsAtMCS14=apnPortalRxPktsAtMCS14, apKnownApRadio1ClientBridgeMac1=apKnownApRadio1ClientBridgeMac1, apLoadCfgOperationsDone=apLoadCfgOperationsDone, apAapSwitchDiscoveryIPAddress=apAapSwitchDiscoveryIPAddress, apWlanAuthKerberosPassword=apWlanAuthKerberosPassword, apWlanCryptoCcmpTable=apWlanCryptoCcmpTable, apWlanQosPolicyBestEffortTxopsTime=apWlanQosPolicyBestEffortTxopsTime, apRadioMeshTimeout=apRadioMeshTimeout, apTrapWpaCounterMeasureEssid=apTrapWpaCounterMeasureEssid, apMeshStatsMac=apMeshStatsMac, apnPortalRxOctetsAt1Mb=apnPortalRxOctetsAt1Mb, apnPortalTxPktsAtMCS14=apnPortalTxPktsAtMCS14, apLanRxErrors=apLanRxErrors, apTrapCtrlSumStatsCanBeSetMu=apTrapCtrlSumStatsCanBeSetMu, apIpFilterPolicyName=apIpFilterPolicyName, apRadioSettingsBackgroundTxopsTime=apRadioSettingsBackgroundTxopsTime, apHotSpotSecRadiusSecret=apHotSpotSecRadiusSecret, apMeshBridgeStatsAvgMuNoise=apMeshBridgeStatsAvgMuNoise, apnRadioStatsOpFreq=apnRadioStatsOpFreq, apnRadioStatsNumPktsTxSGI400ns=apnRadioStatsNumPktsTxSGI400ns, apRadioSettingsERPProtectionStatus=apRadioSettingsERPProtectionStatus, apMeshStatsConnType=apMeshStatsConnType, apnWlanTxOctetsAt5pt5Mb=apnWlanTxOctetsAt5pt5Mb, apIpFilterWlanDefInAction=apIpFilterWlanDefInAction, apMeshBridgeStatsPksPerSecTx=apMeshBridgeStatsPksPerSecTx, apMuLocationingPortalMac=apMuLocationingPortalMac, apnWlanRxOctetsEntry=apnWlanRxOctetsEntry, apRadioCfgSet=apRadioCfgSet, apnPortalRxPktsAtMCS7=apnPortalRxPktsAtMCS7, apnPortalRxOctetsAtMCS2=apnPortalRxOctetsAtMCS2, apGroupV1dot1variables=apGroupV1dot1variables, apIpFilter=apIpFilter, apnPortalTxPktsAt9Mb=apnPortalTxPktsAt9Mb, apRadioCfgTable=apRadioCfgTable, apnMuRxPktsAt6Mb=apnMuRxPktsAt6Mb, apnWlanTxOctetsAtMCS7=apnWlanTxOctetsAtMCS7, dot1xAuthConfigTable=dot1xAuthConfigTable, apRadioSettingsE2BMapMessage=apRadioSettingsE2BMapMessage, apnRadioStatsIndex=apnRadioStatsIndex, apnPortalRxOctetsAt12Mb=apnPortalRxOctetsAt12Mb, apnMuRxPktsAtMCS10=apnMuRxPktsAtMCS10, apnWlanRxPktsAtMCS5=apnWlanRxPktsAtMCS5, apWipsPrimaryServerAddr=apWipsPrimaryServerAddr, apIpFilterWlanPolicyIndex=apIpFilterWlanPolicyIndex, apnMuRxPktsAtMCS13=apnMuRxPktsAtMCS13, apWlanQosPolicyBestEffortCwMin=apWlanQosPolicyBestEffortCwMin, apRadioNSettingsBasicRates=apRadioNSettingsBasicRates, apnPortalRxOctetsAtMCS0=apnPortalRxOctetsAtMCS0, apnPortalRxOctetsTable=apnPortalRxOctetsTable, apnMuRxOctetsAt1Mb=apnMuRxOctetsAt1Mb, apnWlanRxPktsAt2Mb=apnWlanRxPktsAt2Mb, apnRadioStatsNumPktsRxSGI400ns=apnRadioStatsNumPktsRxSGI400ns, apWlanMuAclPolicyName=apWlanMuAclPolicyName, apIpFilterPolicySrcEndPort=apIpFilterPolicySrcEndPort, apWanDynDNSTable=apWanDynDNSTable, apReliableMulticastMUMacAddr=apReliableMulticastMUMacAddr, apRadioMeshAvailableConnIndex=apRadioMeshAvailableConnIndex, apLanSTPStatsPortIntfDsgCost=apLanSTPStatsPortIntfDsgCost, apnWlanTxPktsAt12Mb=apnWlanTxPktsAt12Mb, apVlanId=apVlanId, apSubnetEntry=apSubnetEntry, abgAP=abgAP, apMuLocationingHeardTime=apMuLocationingHeardTime, apnMuRxOctetsAtMCS4=apnMuRxOctetsAtMCS4, apnWlanRxPktsAtMCS10=apnWlanRxPktsAtMCS10, apWanPppoeClientEntry=apWanPppoeClientEntry, apnPortalTxPktsAt5pt5Mb=apnPortalTxPktsAt5pt5Mb, apMeshBridgeStatsLanPtr=apMeshBridgeStatsLanPtr, apIpFilterLanPolicyAction=apIpFilterLanPolicyAction, apMeshStatsWlanPtr=apMeshStatsWlanPtr, apMeshBridgeStatsAvgMuSignal=apMeshBridgeStatsAvgMuSignal, apnPortalRxPktsAt18Mb=apnPortalRxPktsAt18Mb, apnMuRxOctetsAtMCS6=apnMuRxOctetsAtMCS6, apnWlanTxPktsAtMCS12=apnWlanTxPktsAtMCS12, apHotSpotRadiusSessTimeout=apHotSpotRadiusSessTimeout, apTrapCtrlEnableName=apTrapCtrlEnableName, apnWlanRxOctetsAtMCS8=apnWlanRxOctetsAtMCS8, apnWlanRxOctetsAtMCS5=apnWlanRxOctetsAtMCS5, apLanRxPktsEntry=apLanRxPktsEntry, apReliableMulticastTable=apReliableMulticastTable, apWlanEssid=apWlanEssid, apnMuRxPktsAtMCS12=apnMuRxPktsAtMCS12, apnRadioStatsChannel=apnRadioStatsChannel, apRadioSettingsVoiceMode=apRadioSettingsVoiceMode, apnWlanRxPktsAt11Mb=apnWlanRxPktsAt11Mb, apLanRxBytes=apLanRxBytes, apLanBridgePriority=apLanBridgePriority)
