#
# PySNMP MIB module ENTERASYS-VRRP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-VRRP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:04:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, TimeTicks, Unsigned32, Counter32, Bits, Gauge32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "Counter32", "Bits", "Gauge32", "Integer32", "iso")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
vrrpOperationsInetAddrType, VrId = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperationsInetAddrType", "VrId")
etsysVrrpExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64))
etsysVrrpExtMIB.setRevisions(('2009-08-10 19:43',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysVrrpExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysVrrpExtMIB.setLastUpdated('200908101943Z')
if mibBuilder.loadTexts: etsysVrrpExtMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysVrrpExtMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysVrrpExtMIB.setDescription('The Enterasys Networks Proprietary MIB module for entities implementing VRRP. This MIB provides read-write access to configuration objects not provided in the standard VRRP MIB (draft-ietf-vrrp-unified-spec-02.txt).')
etsysVrrpExtOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1))
etsysVrrpExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 2))
etsysVrrpExtOperTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1), )
if mibBuilder.loadTexts: etsysVrrpExtOperTable.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperTable.setDescription("Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of 'EtsysVrrpExtOperEntry' items.")
etsysVrrpExtOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtOperVrId"))
if mibBuilder.loadTexts: etsysVrrpExtOperEntry.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperEntry.setDescription('An entry in the etsysVrrpExtOperTable containing the operational characteristics of a virtual router. On a VRRP router, a given virtual router is identified by a combination of the ifIndex and VRID.')
etsysVrrpExtOperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1, 1, 1), VrId())
if mibBuilder.loadTexts: etsysVrrpExtOperVrId.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperVrId.setDescription('This object contains the Virtual Router Identifier (VRID).')
etsysVrrpExtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("ifDown", 4), ("preemptDelay", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysVrrpExtOperState.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperState.setDescription("The current state of the virtual router. This object has six defined values - `initialize', which indicates that all the virtual router is waiting for a startup event. - `backup', which indicates the virtual router is monitoring the availability of the master router. - `master', which indicates that the virtual router is forwarding packets for IP addresses that are associated with this router. - 'ifDown', which indicates that the interface the virtual router is configured on is operationally down. - 'preemptDelay', which indiciates that the virtual router is going to transition to master once the preempt delay timer has expired.")
etsysVrrpExtOperAcceptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysVrrpExtOperAcceptMode.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperAcceptMode.setDescription("Controls whether a virtual router in Master state will accept packets addressed to the address owner's address as its own if it is not the address owner. Default is False.")
etsysVrrpExtOperPreemptModeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysVrrpExtOperPreemptModeDelay.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperPreemptModeDelay.setDescription('The time interval, in seconds, before the backup router will become master if vrrpOperPreemptMode is set to true.')
etsysVrrpExtOperCriticalIpAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysVrrpExtOperCriticalIpAddrCount.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtOperCriticalIpAddrCount.setDescription('The number of Critical IP addresses that are associated with this virtual router. This number is equal to the number of rows in the etsysVrrpExtCriticalIpAddrTable that correspond to a given IF index/VRID pair.')
etsysVrrpExtCriticalIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 2), )
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrTable.setDescription('The table of critical IP addresses associated with a virtual router.')
etsysVrrpExtCriticalIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtOperVrId"), (0, "VRRP-MIB", "vrrpOperationsInetAddrType"), (0, "ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtCriticalIpAddr"))
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrEntry.setDescription('An entry in the table contains an IP address that is a critical interface. If the IP address goes down then the operational priority shall be decremented by the value of the critical IP priority. The operation priority shall not be adjusted for virtual routers who own the associated address')
etsysVrrpExtCriticalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 2, 1, 1), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddr.setDescription('The assigned IP addresses that represents a critical interface.')
etsysVrrpExtCriticalIpAddrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrPriority.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrPriority.setDescription('This object specifies value the virtual routers operational priority should be decremented by when a critical interface goes down.')
etsysVrrpExtCriticalIpAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrState.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrState.setDescription("The current state of the critical IP address. This object has two defined values - `up', which indicates that critical IP is reachable. - `down', which indicates that critical IP is not reachable.")
etsysVrrpExtCriticalIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtCriticalIpAddrRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. Setting this object to createAndGo(4) or createAndWait(5) results in the addition of an associated address for a virtual router. Destroying(6) the entry or setting it to notInService(2) removes the associated address from the virtual router. The use of other values is implementation-dependent.')
etsysVrrpExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 2, 1))
etsysVrrpExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 2, 2))
etsysVrrpExtMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 2, 2, 1)).setObjects(("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtOperState"), ("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtOperAcceptMode"), ("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtOperPreemptModeDelay"), ("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtOperCriticalIpAddrCount"), ("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtCriticalIpAddrPriority"), ("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtCriticalIpAddrState"), ("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtCriticalIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysVrrpExtMIBGroup = etsysVrrpExtMIBGroup.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtMIBGroup.setDescription('Conformance group for VRRP Extensions operations.')
etsysVrrpExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 64, 2, 1, 1)).setObjects(("ENTERASYS-VRRP-EXT-MIB", "etsysVrrpExtMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysVrrpExtMIBCompliance = etsysVrrpExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysVrrpExtMIBCompliance.setDescription('The core compliance statement for all VRRP Extensions implementations.')
mibBuilder.exportSymbols("ENTERASYS-VRRP-EXT-MIB", etsysVrrpExtOperAcceptMode=etsysVrrpExtOperAcceptMode, etsysVrrpExtCriticalIpAddrState=etsysVrrpExtCriticalIpAddrState, etsysVrrpExtOperPreemptModeDelay=etsysVrrpExtOperPreemptModeDelay, PYSNMP_MODULE_ID=etsysVrrpExtMIB, etsysVrrpExtOperTable=etsysVrrpExtOperTable, etsysVrrpExtMIB=etsysVrrpExtMIB, etsysVrrpExtMIBGroup=etsysVrrpExtMIBGroup, etsysVrrpExtCriticalIpAddrEntry=etsysVrrpExtCriticalIpAddrEntry, etsysVrrpExtMIBGroups=etsysVrrpExtMIBGroups, etsysVrrpExtCriticalIpAddrTable=etsysVrrpExtCriticalIpAddrTable, etsysVrrpExtOperEntry=etsysVrrpExtOperEntry, etsysVrrpExtCriticalIpAddr=etsysVrrpExtCriticalIpAddr, etsysVrrpExtCriticalIpAddrPriority=etsysVrrpExtCriticalIpAddrPriority, etsysVrrpExtMIBCompliances=etsysVrrpExtMIBCompliances, etsysVrrpExtOperCriticalIpAddrCount=etsysVrrpExtOperCriticalIpAddrCount, etsysVrrpExtMIBCompliance=etsysVrrpExtMIBCompliance, etsysVrrpExtOperVrId=etsysVrrpExtOperVrId, etsysVrrpExtCriticalIpAddrRowStatus=etsysVrrpExtCriticalIpAddrRowStatus, etsysVrrpExtOperations=etsysVrrpExtOperations, etsysVrrpExtOperState=etsysVrrpExtOperState, etsysVrrpExtConformance=etsysVrrpExtConformance)
