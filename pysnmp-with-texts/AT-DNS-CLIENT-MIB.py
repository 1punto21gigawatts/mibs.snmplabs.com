#
# PySNMP MIB module AT-DNS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-DNS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
modules, = mibBuilder.importSymbols("AT-SMI-MIB", "modules")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, iso, Integer32, Counter32, MibIdentifier, ObjectIdentity, ModuleIdentity, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "iso", "Integer32", "Counter32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "Bits")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
atDNSClient = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1))
atDNSClient.setRevisions(('2010-06-14 04:45', '2008-09-18 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: atDNSClient.setRevisionsDescriptions(('MIB revision history dates in descriptions updated.', 'Initial Revision',))
if mibBuilder.loadTexts: atDNSClient.setLastUpdated('201006140445Z')
if mibBuilder.loadTexts: atDNSClient.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: atDNSClient.setContactInfo(' http://www.alliedtelesis.com')
if mibBuilder.loadTexts: atDNSClient.setDescription('This MIB file contains definitions of managed objects for the Allied Telesis DNS Client configuration.')
atDns = ObjectIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501))
if mibBuilder.loadTexts: atDns.setStatus('current')
if mibBuilder.loadTexts: atDns.setDescription('Description.')
atDNSServerIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDNSServerIndexNext.setStatus('current')
if mibBuilder.loadTexts: atDNSServerIndexNext.setDescription("This object represents the next available value for the object 'atDNSServerIndex'. For creating an entry in the 'atDNSServerTable', a management application should read this object, get the value and use the same.")
atDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 2), )
if mibBuilder.loadTexts: atDNSServerTable.setStatus('current')
if mibBuilder.loadTexts: atDNSServerTable.setDescription('This table contains information about the Domain Name System (DNS) Server configurations in the system.')
atDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 2, 1), ).setIndexNames((0, "AT-DNS-CLIENT-MIB", "atDNSServerIndex"))
if mibBuilder.loadTexts: atDNSServerEntry.setStatus('current')
if mibBuilder.loadTexts: atDNSServerEntry.setDescription('An Entry representing the information about a DNS Server configuration. ')
atDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: atDNSServerIndex.setStatus('current')
if mibBuilder.loadTexts: atDNSServerIndex.setDescription("This object represents the index corresponding to the particular DNS Server configuration in the system. For creation of new entry, the value of this object should be same as that of the value of 'atDNSServerIndexNext' object. If this is not the case, then the entry creation will fail.")
atDNSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDNSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: atDNSServerAddrType.setDescription("This object represents the Inet Address type of the 'atDNSServerAddr' object. It's value should be of the values list below: unknown(0), ipv4(1), ipv6(2), ipv4z(3), ipv6z(4), dns(16) ")
atDNSServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDNSServerAddr.setStatus('current')
if mibBuilder.loadTexts: atDNSServerAddr.setDescription("This object represents the address of the DNS Server. This object is a current object for row creation. When a new row is created, this object is set with a default value '0.0.0.0', and the management application should change it to a desired value by a SET operation.")
atDNSServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 501, 1, 2, 1, 4), RowStatus().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDNSServerStatus.setStatus('current')
if mibBuilder.loadTexts: atDNSServerStatus.setDescription("The Status of this row. The reading of this object should have a value of 'active(1)', for an existing row. For creation of new entry, a management application should set this object with value 'createAndGo(4)', and using the same value as that got from reading object 'atDNSServerIndexNext', as the index for the new entry. When an entry is created, the object 'atDNSServerAddr' in the entry is set with a default value '0.0.0.0'. The management application should change it to a desired value with a SET operation. For deletion of entry, a management application should set this object with value 'destroy(6)'. Once an entry is deleted, other entries in the table which have bigger index than the deleted one, will be indexed again. Therefore a management application can effectively delete multiple entries by repeating the SET operation using the same index. An attempt to SET this object with value other than 'createAndGo' or 'destroy' will fail.")
mibBuilder.exportSymbols("AT-DNS-CLIENT-MIB", PYSNMP_MODULE_ID=atDNSClient, atDns=atDns, atDNSServerAddrType=atDNSServerAddrType, atDNSServerAddr=atDNSServerAddr, atDNSClient=atDNSClient, atDNSServerStatus=atDNSServerStatus, atDNSServerEntry=atDNSServerEntry, atDNSServerIndexNext=atDNSServerIndexNext, atDNSServerIndex=atDNSServerIndex, atDNSServerTable=atDNSServerTable)
