#
# PySNMP MIB module DULD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DULD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, Integer32, NotificationType, Gauge32, iso, TimeTicks, ObjectIdentity, MibIdentifier, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "Gauge32", "iso", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
swDULDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 87))
if mibBuilder.loadTexts: swDULDMIB.setLastUpdated('0911250000Z')
if mibBuilder.loadTexts: swDULDMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swDULDMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swDULDMIB.setDescription('The unidirectional link detection module MIB for the proprietary enterprise.')
swDULDMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 87, 1))
swDULDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1), )
if mibBuilder.loadTexts: swDULDTable.setStatus('current')
if mibBuilder.loadTexts: swDULDTable.setDescription('The management information of the unidirectional link detection.')
swDULDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1), ).setIndexNames((0, "DULD-MIB", "swDULDPort"))
if mibBuilder.loadTexts: swDULDEntry.setStatus('current')
if mibBuilder.loadTexts: swDULDEntry.setDescription('A list of information contained in swDULDTable.')
swDULDPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: swDULDPort.setStatus('current')
if mibBuilder.loadTexts: swDULDPort.setDescription('This object indicates the port index.')
swDULDAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDULDAdminState.setStatus('current')
if mibBuilder.loadTexts: swDULDAdminState.setDescription('This object indicates the unidirectional link detection configuration status.')
swDULDOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDULDOperStatus.setStatus('current')
if mibBuilder.loadTexts: swDULDOperStatus.setDescription('This object is determined by local and remote port supporting OAM and unidirectional detection. If both local and remote port support OAM and unidirectional detection, it is enabled(1),else it is disabled(2).')
swDULDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDULDMode.setStatus('current')
if mibBuilder.loadTexts: swDULDMode.setDescription('This object indicates the mode for unidirectional link detection. shutdown: if any unidirectional link is detected, disable the port and log an event. normal: only log an event when a unidirectional link is detected.')
swDULDDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDULDDiscoveryTime.setStatus('current')
if mibBuilder.loadTexts: swDULDDiscoveryTime.setDescription("This object indicates the neighbor's discovery time for unidirectional link detection.")
swDULDLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 87, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("bidirectional", 2), ("tx-fault", 3), ("rx-fault", 4), ("link-down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDULDLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swDULDLinkStatus.setDescription('This object indicates the link status, which is a result of unidirectional link detection.')
mibBuilder.exportSymbols("DULD-MIB", PYSNMP_MODULE_ID=swDULDMIB, swDULDPort=swDULDPort, swDULDMIB=swDULDMIB, swDULDEntry=swDULDEntry, swDULDMgmt=swDULDMgmt, swDULDLinkStatus=swDULDLinkStatus, swDULDOperStatus=swDULDOperStatus, swDULDMode=swDULDMode, swDULDDiscoveryTime=swDULDDiscoveryTime, swDULDAdminState=swDULDAdminState, swDULDTable=swDULDTable)
