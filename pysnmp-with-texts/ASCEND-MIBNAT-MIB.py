#
# PySNMP MIB module ASCEND-MIBNAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBNAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, Bits, Integer32, MibIdentifier, NotificationType, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, IpAddress, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Bits", "Integer32", "MibIdentifier", "NotificationType", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "IpAddress", "iso", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibnatProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 95))
mibnatProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 95, 1), )
if mibBuilder.loadTexts: mibnatProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibnatProfileTable.setDescription('A list of mibnatProfile profile entries.')
mibnatProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1), ).setIndexNames((0, "ASCEND-MIBNAT-MIB", "natProfile-NatProfile"))
if mibBuilder.loadTexts: mibnatProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibnatProfileEntry.setDescription('A mibnatProfile entry containing objects that maps to the parameters of mibnatProfile profile.')
natProfile_NatRouting = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("natProfile-NatRouting").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_NatRouting.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_NatRouting.setDescription('A boolean. When set to TRUE it translates all the lan addresses to dynamicaly assigned internet address.')
natProfile_NatProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 3), DisplayString()).setLabel("natProfile-NatProfile").setMaxAccess("readonly")
if mibBuilder.loadTexts: natProfile_NatProfile.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_NatProfile.setDescription('The name of this NAT profile, used in other types of profiles to refer to this NAT profile.')
natProfile_NatLan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("natlanSingleIp", 1), ("natlanMultiIp", 2), ("natlanPoolIp", 3)))).setLabel("natProfile-NatLan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_NatLan.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_NatLan.setDescription('Which NAT addressing option to use.')
natProfile_DefaultServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 5), IpAddress()).setLabel("natProfile-DefaultServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_DefaultServer.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_DefaultServer.setDescription('The LAN address of the Default Server on the Lan side')
natProfile_TunnelServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 6), IpAddress()).setLabel("natProfile-TunnelServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_TunnelServer.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_TunnelServer.setDescription('The IP address of the Tunnel Server on the Lan side')
natProfile_FrameRelayAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 7), IpAddress()).setLabel("natProfile-FrameRelayAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_FrameRelayAddress.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_FrameRelayAddress.setDescription('The Frame Relay/ATM VC user assigned IP address')
natProfile_StickyAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("natProfile-StickyAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StickyAddress.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StickyAddress.setDescription('A Boolen. When set to TRUE enables the sticky IP address feature - the router will try to retain the last IP address it got from the host by negotiating it with the host.')
natProfile_StickyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 9), Integer32()).setLabel("natProfile-StickyTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StickyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StickyTimeout.setDescription('A number. Represents the number of minutes the router will try to request the sticky IP address counting from the end of the last session.')
natProfile_NoNatAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 10), IpAddress()).setLabel("natProfile-NoNatAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_NoNatAddress.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_NoNatAddress.setDescription('Address of subnet which should be exempted from Network Address Translation. An address of 0.0.0.0 means that selective NAT is disabled.')
natProfile_AlternateNaptAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 11), IpAddress()).setLabel("natProfile-AlternateNaptAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_AlternateNaptAddress.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_AlternateNaptAddress.setDescription('Public address to use on the WAN for sindle-address NAT instead of the address negotiated via IPCP. A value of 0.0.0.0 means use the address negotiated via IPCP.')
natProfile_NaptIdleTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 12), Integer32()).setLabel("natProfile-NaptIdleTcpTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_NaptIdleTcpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_NaptIdleTcpTimeout.setDescription('The flush timer interval in minutes for idle TCP connection entries in the NAPT table. Defaults to 24 hours.')
natProfile_NatAddrPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 14), Integer32()).setLabel("natProfile-NatAddrPoolNum").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_NatAddrPoolNum.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_NatAddrPoolNum.setDescription('Designates the address pool to use for Address Pool NAT.')
natProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("natProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_Action_o.setDescription('')
mibnatProfile_StaticMappingsTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 95, 2), ).setLabel("mibnatProfile-StaticMappingsTable")
if mibBuilder.loadTexts: mibnatProfile_StaticMappingsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibnatProfile_StaticMappingsTable.setDescription('A list of mibnatProfile__static_mappings profile entries.')
mibnatProfile_StaticMappingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1), ).setLabel("mibnatProfile-StaticMappingsEntry").setIndexNames((0, "ASCEND-MIBNAT-MIB", "natProfile-StaticMappings-NatProfile"), (0, "ASCEND-MIBNAT-MIB", "natProfile-StaticMappings-Index-o"))
if mibBuilder.loadTexts: mibnatProfile_StaticMappingsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibnatProfile_StaticMappingsEntry.setDescription('A mibnatProfile__static_mappings entry containing objects that maps to the parameters of mibnatProfile__static_mappings profile.')
natProfile_StaticMappings_NatProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 8), DisplayString()).setLabel("natProfile-StaticMappings-NatProfile").setMaxAccess("readonly")
if mibBuilder.loadTexts: natProfile_StaticMappings_NatProfile.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_NatProfile.setDescription('')
natProfile_StaticMappings_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 1), Integer32()).setLabel("natProfile-StaticMappings-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: natProfile_StaticMappings_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_Index_o.setDescription('')
natProfile_StaticMappings_ValidEntry = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("natProfile-StaticMappings-ValidEntry").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StaticMappings_ValidEntry.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_ValidEntry.setDescription('When TRUE, this filter entry has been defined and properly initialized. When FALSE, this entry should be skipped')
natProfile_StaticMappings_DestPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 4), Integer32()).setLabel("natProfile-StaticMappings-DestPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StaticMappings_DestPort.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_DestPort.setDescription('The destPort represents the destination port number from TCP/UDP packets from the Wan to the Lan.')
natProfile_StaticMappings_Protocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("smTcp", 1), ("smUdp", 2)))).setLabel("natProfile-StaticMappings-Protocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StaticMappings_Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_Protocol.setDescription('The protocol represents the protocol type')
natProfile_StaticMappings_LocalPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 6), Integer32()).setLabel("natProfile-StaticMappings-LocalPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StaticMappings_LocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_LocalPort.setDescription('The localPort represents the local port number for machines on the Lan side.')
natProfile_StaticMappings_LocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 95, 2, 1, 7), IpAddress()).setLabel("natProfile-StaticMappings-LocalAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: natProfile_StaticMappings_LocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: natProfile_StaticMappings_LocalAddress.setDescription('The localAddress represents the local IP Address of machines on the Lan side.')
mibBuilder.exportSymbols("ASCEND-MIBNAT-MIB", natProfile_StaticMappings_LocalPort=natProfile_StaticMappings_LocalPort, natProfile_StickyAddress=natProfile_StickyAddress, natProfile_NatAddrPoolNum=natProfile_NatAddrPoolNum, mibnatProfileTable=mibnatProfileTable, natProfile_StaticMappings_ValidEntry=natProfile_StaticMappings_ValidEntry, natProfile_StaticMappings_DestPort=natProfile_StaticMappings_DestPort, natProfile_NatProfile=natProfile_NatProfile, natProfile_StaticMappings_Protocol=natProfile_StaticMappings_Protocol, natProfile_FrameRelayAddress=natProfile_FrameRelayAddress, natProfile_Action_o=natProfile_Action_o, natProfile_StaticMappings_LocalAddress=natProfile_StaticMappings_LocalAddress, mibnatProfile_StaticMappingsTable=mibnatProfile_StaticMappingsTable, natProfile_StickyTimeout=natProfile_StickyTimeout, natProfile_NatRouting=natProfile_NatRouting, natProfile_StaticMappings_Index_o=natProfile_StaticMappings_Index_o, natProfile_DefaultServer=natProfile_DefaultServer, mibnatProfileEntry=mibnatProfileEntry, natProfile_AlternateNaptAddress=natProfile_AlternateNaptAddress, natProfile_NoNatAddress=natProfile_NoNatAddress, mibnatProfile=mibnatProfile, DisplayString=DisplayString, natProfile_NaptIdleTcpTimeout=natProfile_NaptIdleTcpTimeout, mibnatProfile_StaticMappingsEntry=mibnatProfile_StaticMappingsEntry, natProfile_StaticMappings_NatProfile=natProfile_StaticMappings_NatProfile, natProfile_NatLan=natProfile_NatLan, natProfile_TunnelServer=natProfile_TunnelServer)
