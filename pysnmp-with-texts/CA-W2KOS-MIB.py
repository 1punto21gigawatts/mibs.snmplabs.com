#
# PySNMP MIB module CA-W2KOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CA-W2KOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:43:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, NotificationType, NotificationType, MibIdentifier, Bits, ObjectIdentity, Integer32, TimeTicks, ModuleIdentity, Counter32, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "NotificationType", "NotificationType", "MibIdentifier", "Bits", "ObjectIdentity", "Integer32", "TimeTicks", "ModuleIdentity", "Counter32", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cai = MibIdentifier((1, 3, 6, 1, 4, 1, 791))
caiSysMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2))
tng = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10))
agents = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2))
caiW2kOs = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43))
w2kConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1))
w2kStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2))
w2kAvailableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3))
w2kHistoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4))
w2kConfigGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1))
w2kConfigSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 2))
w2kConfigCpuGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3))
w2kConfigMemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 4))
w2kConfigLVolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5))
w2kConfigMntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6))
w2kConfigDfsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7))
w2kConfigQuotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8))
w2kConfigDirGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9))
w2kConfigFileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10))
w2kConfigProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11))
w2kConfigSrvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12))
w2kConfigJobGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13))
w2kConfigSessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14))
w2kConfigPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15))
w2kConfigNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16))
w2kConfigRegGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17))
w2kStatusGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1))
w2kStatusCpuGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2))
w2kStatusMemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3))
w2kStatusLVolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4))
w2kStatusMntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5))
w2kStatusDfsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6))
w2kStatusQuotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7))
w2kStatusDirGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8))
w2kStatusFileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9))
w2kStatusProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10))
w2kStatusSrvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11))
w2kStatusJobGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12))
w2kStatusSessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13))
w2kStatusPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14))
w2kStatusNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15))
w2kStatusRegGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16))
w2kAvailLVolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1))
w2kAvailMntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2))
w2kAvailDfsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3))
w2kAvailQuotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4))
w2kAvailProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5))
w2kAvailSrvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6))
w2kAvailJobGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7))
w2kAvailSessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8))
w2kAvailPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9))
w2kConfigGeneralAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralAgentVersion.setDescription('&<caiW2kOs.100>The currently installed version of the agent.')
w2kConfigGeneralColdStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralColdStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralColdStartTime.setDescription('&<caiW2kOs.101>The date and time that the agent was last started.')
w2kConfigGeneralWarmStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralWarmStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralWarmStartTime.setDescription("&<caiW2kOs.102>The date and time that the agent's configuration was last changed.")
w2kConfigGeneralCpuPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralCpuPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralCpuPollTime.setDescription('&<caiW2kOs.103>The date and time that the agent last polled the processor information.')
w2kConfigGeneralMemPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralMemPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralMemPollTime.setDescription('&<caiW2kOs.104>The date and time that the agent last polled the memory information.')
w2kConfigGeneralLVolPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralLVolPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralLVolPollTime.setDescription('&<caiW2kOs.105>The date and time that the agent last polled the logical volume information.')
w2kConfigGeneralMntPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralMntPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralMntPollTime.setDescription('&<caiW2kOs.106>The date and time that the agent last polled the mounts information.')
w2kConfigGeneralDfsPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralDfsPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralDfsPollTime.setDescription('&<caiW2kOs.107>The date and time that the agent last polled the distributed file system link information.')
w2kConfigGeneralQuotPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralQuotPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralQuotPollTime.setDescription('&<caiW2kOs.108>The date and time that the agent last polled the quota information.')
w2kConfigGeneralDirPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralDirPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralDirPollTime.setDescription('&<caiW2kOs.109>The date and time that the agent last polled the directory information.')
w2kConfigGeneralFilePollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralFilePollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralFilePollTime.setDescription('&<caiW2kOs.110>The date and time that the agent last polled the file information.')
w2kConfigGeneralProcPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralProcPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralProcPollTime.setDescription('&<caiW2kOs.111>The date and time that the agent last polled the process information.')
w2kConfigGeneralSrvcPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralSrvcPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralSrvcPollTime.setDescription('&<caiW2kOs.112>The date and time that the agent last polled the service information.')
w2kConfigGeneralJobPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralJobPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralJobPollTime.setDescription('&<caiW2kOs.113>The date and time that the agent last polled the job information.')
w2kConfigGeneralSessPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralSessPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralSessPollTime.setDescription('&<caiW2kOs.114>The date and time that the agent last polled the session information.')
w2kConfigGeneralPrnPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralPrnPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralPrnPollTime.setDescription('&<caiW2kOs.115>The date and time that the agent last polled the printer information.')
w2kConfigGeneralNetPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralNetPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralNetPollTime.setDescription('&<caiW2kOs.116>The date and time that the agent last polled the network interface information.')
w2kConfigGeneralRegPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigGeneralRegPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigGeneralRegPollTime.setDescription('&<caiW2kOs.117>The date and time that the agent last polled the registry entry information.')
w2kConfigSysNodeName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigSysNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSysNodeName.setDescription('&<caiW2kOs.118>The node name of the system.')
w2kConfigSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSysVersion.setDescription('&<caiW2kOs.119>The OS version (build, service pack, etc.) of the system.')
w2kConfigSysBios = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigSysBios.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSysBios.setDescription('&<caiW2kOs.120>The BIOS version (date, revision, etc.) of the system.')
w2kConfigSysColdStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigSysColdStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSysColdStartTime.setDescription('&<caiW2kOs.121>The date and time that the system was last started.')
w2kConfigCpuPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuPollInterval.setDescription('&<caiW2kOs.122>The time (in seconds) between the polling of the processor information. Valid values are greater than or equal to 30.')
w2kConfigCpuPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuPollMethod.setDescription("&<caiW2kOs.123>If set to 'disabled', the agent no more retrieves the processor information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigCpuLoadLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuLoadLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuLoadLag.setDescription('&<caiW2kOs.124>The number of consecutive poll intervals that the threshold has to be (b)reached before the status changes. Valid values are greater than 0.')
w2kConfigCpuLoadWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 4), Integer32().clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuLoadWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuLoadWarn.setDescription('&<caiW2kOs.125>Warning threshold for the utilization of the processor (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kConfigCpuLoadCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 5), Integer32().clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuLoadCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuLoadCrit.setDescription('&<caiW2kOs.126>Critical threshold for the utilization of the processor (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kConfigCpuLoadMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuLoadMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuLoadMonitor.setDescription('&<caiW2kOs.127>Flag indicating whether the utilization of the processor should be monitored and if so, which threshold should be compared with.')
w2kConfigCpuLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigCpuLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigCpuLossAction.setDescription('&<caiW2kOs.128>Flag defining the severity if the loss of the processor is detected or whether to remove this watcher in that case.')
w2kConfigMemPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 4, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMemPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMemPollInterval.setDescription('&<caiW2kOs.129>The time (in seconds) between the polling of the memory information. Valid values are greater than or equal to 30.')
w2kConfigMemPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMemPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMemPollMethod.setDescription("&<caiW2kOs.130>If set to 'disabled', the agent no more retrieves the memory information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigLVolPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolPollInterval.setDescription('&<caiW2kOs.131>The time (in seconds) between the polling of the logical volume information. Valid values are greater than or equal to 30.')
w2kConfigLVolPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolPollMethod.setDescription("&<caiW2kOs.132>If set to 'disabled', the agent no more retrieves the logical volume information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigLVolAutoPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 3), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoPollInterval.setDescription('&<caiW2kOs.133>The time (in minutes), when a new auto discovery process is started. Valid values are greater than or equal to 30 or set to -1. If set to -1, auto discovery of logical volumes will no more be made.')
w2kConfigLVolFragPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 4), Integer32().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolFragPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolFragPollInterval.setDescription('&<caiW2kOs.134>The time (in hours), when the fragmentation determination of the watched logical volumes is started again (triggered by the next polling or a get request). The agent will not determine the fragmentation every standard poll interval, because it is a long lasting task. Valid values are greater than or equal to 1 or set to -1. After a set on this attribute, the fragmentation determination will be started new by the next polling or by a get request. If set to -1, the fragmentation is no more polled.')
w2kConfigLVolName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolName.setDescription('&<caiW2kOs.135>Name of the watcher to be added/removed, monitoring a logical volume with this name. If adding an auto discovery watcher, this name can be a wildcarded logical volume name filtering the logical volumes to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered logical volume a watcher will be created. Important: This name is case insensitive.')
w2kConfigLVolDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigLVolAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigLVolSizeWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 8), DisplayString().clone('70%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolSizeWarn.setDescription("&<caiW2kOs.138>Warning threshold in megabytes, either for the free (by appending a 'F') or for the used logical volume size. The used size can also be defined as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 0 and smaller (in case of 'free' greater) than the critical threshold.")
w2kConfigLVolSizeCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 9), DisplayString().clone('90%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolSizeCrit.setDescription("&<caiW2kOs.139>Critical threshold in megabytes, either for the free (by appending a 'F') or for the used logical volume size. The used size can also be defined as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 1 and greater (in case of 'free' smaller) than the warning threshold.")
w2kConfigLVolSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolSizeMonitor.setDescription('&<caiW2kOs.140>Flag indicating whether the used logical volume size should be monitored and if so, which threshold should be compared with.')
w2kConfigLVolSizeDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 11), DisplayString().clone('1%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolSizeDWarn.setDescription("&<caiW2kOs.141>Warning threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in used logical volume size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in megabytes or as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 0 and smaller than the critical threshold.")
w2kConfigLVolSizeDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 12), DisplayString().clone('2%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolSizeDCrit.setDescription("&<caiW2kOs.142>Critical threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in used logical volume size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in megabytes or as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 1 and greater than the warning threshold.")
w2kConfigLVolSizeDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolSizeDMonitor.setDescription('&<caiW2kOs.143>Flag indicating whether the delta in used logical volume size should be monitored and if so, which threshold should be compared with.')
w2kConfigLVolTPutWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 14), Integer32().clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolTPutWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolTPutWarn.setDescription('&<caiW2kOs.144>Warning threshold for the throughput rate (kilobytes per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigLVolTPutCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 15), Integer32().clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolTPutCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolTPutCrit.setDescription('&<caiW2kOs.145>Critical threshold for the throughput rate (kilobytes per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigLVolTPutMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolTPutMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolTPutMonitor.setDescription('&<caiW2kOs.146>Flag indicating whether the throughput rate should be monitored and if so, which threshold should be compared with.')
w2kConfigLVolFragWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 17), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolFragWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolFragWarn.setDescription('&<caiW2kOs.147>Warning threshold for the file fragmentation (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kConfigLVolFragCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 18), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolFragCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolFragCrit.setDescription('&<caiW2kOs.148>Critical threshold for the file fragmentation (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kConfigLVolFragMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolFragMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolFragMonitor.setDescription('&<caiW2kOs.149>Flag indicating whether the file fragmentation should be monitored and if so, which threshold should be compared with.')
w2kConfigLVolLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolLossAction.setDescription('&<caiW2kOs.150>Flag defining the severity if the loss of the logical volume is detected or whether to remove this watcher in that case.')
w2kConfigLVolAutoTableWatcherName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoTableWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoTableWatcherName.setDescription('&<caiW2kOs.151>Name of the watcher to be added in the auto discovery table.')
w2kConfigLVolButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3), ("add-auto", 4), ("remove-auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolButton.setDescription('&<caiW2kOs.152>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group, or to add or remove an auto discovery watcher with the current value of the auto table watcher name attribute in this group.')
w2kConfigLVolAutoTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23), )
if mibBuilder.loadTexts: w2kConfigLVolAutoTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoTable.setDescription('&<caiW2kOs.153>A table containing all auto discovery watchers for logical volumes.')
w2kConfigLVolAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kConfigLVolAutoWatcherName"))
if mibBuilder.loadTexts: w2kConfigLVolAutoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kConfigLVolAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigLVolAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoWatcherName.setDescription('&<caiW2kOs.155>Name of the auto discovery watcher.')
w2kConfigLVolAutoName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoName.setDescription('&<caiW2kOs.156>Wildcarded logical volume name filtering the logical volumes to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered logical volume a watcher will be created. Important: This name is case insensitive.')
w2kConfigLVolAutoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoDescription.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoAggLag.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeWarn.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeCrit.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeMonitor.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoSizeDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeDWarn.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoSizeDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeDCrit.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoSizeDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoSizeDMonitor.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoTPutWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoTPutWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoTPutWarn.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoTPutCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoTPutCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoTPutCrit.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoTPutMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoTPutMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoTPutMonitor.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoFragWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoFragWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoFragWarn.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoFragCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoFragCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoFragCrit.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoFragMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoFragMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoFragMonitor.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoLossAction.setDescription('&<caiW2kOs.157>Default for auto discovered logical volumes.')
w2kConfigLVolAutoButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 5, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigLVolAutoButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigLVolAutoButton.setDescription('&<caiW2kOs.172>This attribute is used to remove this auto discovery watcher.')
w2kConfigMntPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntPollInterval.setDescription('&<caiW2kOs.173>The time (in seconds) between the polling of the mount information. Valid values are greater than or equal to 30.')
w2kConfigMntPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntPollMethod.setDescription("&<caiW2kOs.174>If set to 'disabled', the agent no more retrieves the mount information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigMntAutoPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 3), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoPollInterval.setDescription('&<caiW2kOs.175>The time (in minutes), when a new auto discovery process is started. Valid values are greater than or equal to 30 or set to -1. If set to -1, auto discovery of mounts will no more be made.')
w2kConfigMntName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntName.setDescription('&<caiW2kOs.176>Name of the watcher to be added/removed, monitoring a mount with this name. If adding an auto discovery watcher, this name can be a wildcarded mount name filtering the mounts to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered mount a watcher will be created. Important: This name is case insensitive.')
w2kConfigMntDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigMntAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigMntRelToMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntRelToMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntRelToMonitor.setDescription('&<caiW2kOs.179>Flag indicating whether a change of the logical volume, mounted by this mount, should be monitored and if so, the level of alert to raise. Note: A change will not occur if the related logical volume is lossed. In that case the mount itself becomes lossed.')
w2kConfigMntLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntLossAction.setDescription('&<caiW2kOs.180>Flag defining the severity if the loss of the mount is detected or whether to remove this watcher in that case.')
w2kConfigMntAutoTableWatcherName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoTableWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoTableWatcherName.setDescription('&<caiW2kOs.151>Name of the watcher to be added in the auto discovery table.')
w2kConfigMntButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3), ("add-auto", 4), ("remove-auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntButton.setDescription('&<caiW2kOs.152>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group, or to add or remove an auto discovery watcher with the current value of the auto table watcher name attribute in this group.')
w2kConfigMntAutoTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11), )
if mibBuilder.loadTexts: w2kConfigMntAutoTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoTable.setDescription('&<caiW2kOs.183>A table containing all auto discovery watchers for mounts.')
w2kConfigMntAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kConfigMntAutoWatcherName"))
if mibBuilder.loadTexts: w2kConfigMntAutoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kConfigMntAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigMntAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoWatcherName.setDescription('&<caiW2kOs.155>Name of the auto discovery watcher.')
w2kConfigMntAutoName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoName.setDescription('&<caiW2kOs.186>Wildcarded mount name filtering the mounts to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered mount a watcher will be created. Important: This name is case insensitive.')
w2kConfigMntAutoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoDescription.setDescription('&<caiW2kOs.187>Default for auto discovered mounts.')
w2kConfigMntAutoAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoAggLag.setDescription('&<caiW2kOs.187>Default for auto discovered mounts.')
w2kConfigMntAutoRelToMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoRelToMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoRelToMonitor.setDescription('&<caiW2kOs.187>Default for auto discovered mounts.')
w2kConfigMntAutoLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoLossAction.setDescription('&<caiW2kOs.187>Default for auto discovered mounts.')
w2kConfigMntAutoButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 6, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigMntAutoButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigMntAutoButton.setDescription('&<caiW2kOs.172>This attribute is used to remove this auto discovery watcher.')
w2kConfigDfsPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsPollInterval.setDescription('&<caiW2kOs.192>The time (in seconds) between the polling of the distributed file system link information. Valid values are greater than or equal to 30.')
w2kConfigDfsPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsPollMethod.setDescription("&<caiW2kOs.193>If set to 'disabled', the agent no more retrieves the distributed file system link information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigDfsAutoPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 3), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoPollInterval.setDescription('&<caiW2kOs.194>The time (in minutes), when a new auto discovery process is started. Valid values are greater than or equal to 30 or set to -1. If set to -1, auto discovery of distributed file system links will no more be made.')
w2kConfigDfsName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsName.setDescription("&<caiW2kOs.195>Name of the watcher to be added/removed, monitoring a distributed file system link with this name. The name consists of the Dfs root name followed by the Dfs link name. These two names are concatenated by a back-slash. The single Dfs root name (without '\\DfsLinkName') can also be used as watcher name, to be able to monitor all Dfs links of a Dfs root. In that case no loss action will be triggered if no Dfs link exists. If adding an auto discovery watcher, this name can be a wildcarded Dfs link name filtering the Dfs links to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered Dfs link a watcher will be created. Important: This name is case insensitive.")
w2kConfigDfsDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigDfsAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigDfsReplicaWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsReplicaWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsReplicaWarn.setDescription('&<caiW2kOs.198>Warning threshold for the number of unavailable replicas of the distributed file system link. Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigDfsReplicaCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 8), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsReplicaCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsReplicaCrit.setDescription('&<caiW2kOs.199>Critical threshold for the number of unavailable replicas of the distributed file system link. Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigDfsReplicaMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsReplicaMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsReplicaMonitor.setDescription('&<caiW2kOs.200>Flag indicating whether the unavailable replicas should be monitored and if so, which threshold should be compared with.')
w2kConfigDfsLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsLossAction.setDescription('&<caiW2kOs.201>Flag defining the severity if the loss of the distributed file system link is detected or whether to remove this watcher in that case.')
w2kConfigDfsAutoTableWatcherName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoTableWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoTableWatcherName.setDescription('&<caiW2kOs.151>Name of the watcher to be added in the auto discovery table.')
w2kConfigDfsButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3), ("add-auto", 4), ("remove-auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsButton.setDescription('&<caiW2kOs.152>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group, or to add or remove an auto discovery watcher with the current value of the auto table watcher name attribute in this group.')
w2kConfigDfsAutoTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13), )
if mibBuilder.loadTexts: w2kConfigDfsAutoTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoTable.setDescription('&<caiW2kOs.204>A table containing all auto discovery watchers for distributed file system links.')
w2kConfigDfsAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kConfigDfsAutoWatcherName"))
if mibBuilder.loadTexts: w2kConfigDfsAutoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kConfigDfsAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigDfsAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoWatcherName.setDescription('&<caiW2kOs.155>Name of the auto discovery watcher.')
w2kConfigDfsAutoName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoName.setDescription('&<caiW2kOs.207>Wildcarded distributed file system link name filtering the Dfs links to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered Dfs link a watcher will be created. Important: This name is case insensitive.')
w2kConfigDfsAutoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoDescription.setDescription('&<caiW2kOs.208>Default for auto discovered distributed file system links.')
w2kConfigDfsAutoAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoAggLag.setDescription('&<caiW2kOs.208>Default for auto discovered distributed file system links.')
w2kConfigDfsAutoReplicaWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoReplicaWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoReplicaWarn.setDescription('&<caiW2kOs.208>Default for auto discovered distributed file system links.')
w2kConfigDfsAutoReplicaCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoReplicaCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoReplicaCrit.setDescription('&<caiW2kOs.208>Default for auto discovered distributed file system links.')
w2kConfigDfsAutoReplicaMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoReplicaMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoReplicaMonitor.setDescription('&<caiW2kOs.208>Default for auto discovered distributed file system links.')
w2kConfigDfsAutoLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoLossAction.setDescription('&<caiW2kOs.208>Default for auto discovered distributed file system links.')
w2kConfigDfsAutoButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 7, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDfsAutoButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDfsAutoButton.setDescription('&<caiW2kOs.172>This attribute is used to remove this auto discovery watcher.')
w2kConfigQuotPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotPollInterval.setDescription('&<caiW2kOs.215>The time (in seconds) between the polling of the quota information. Valid values are greater than or equal to 30.')
w2kConfigQuotPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotPollMethod.setDescription("&<caiW2kOs.216>If set to 'disabled', the agent no more retrieves the quota information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigQuotLVolName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotLVolName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotLVolName.setDescription('&<caiW2kOs.217>Logical volume name of the watcher to be added/removed, monitoring a quota with this logical volume name. The name specifies the logical volume on which this quota exists. Important: This name is case insensitive.')
w2kConfigQuotUserName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotUserName.setDescription("&<caiW2kOs.218>User name of the watcher to be added/removed, monitoring a quota with this user name. The name specifies the user for whom this quota exists and is in the form 'domainName\\userName' or 'userName@domainName'. Important: This name is case insensitive.")
w2kConfigQuotDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigQuotAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigQuotExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotExist.setDescription('&<caiW2kOs.221>Flag indicating whether to raise an alert if a quota is existent or if it is not-existent.')
w2kConfigQuotExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotExistMonitor.setDescription('&<caiW2kOs.222>Flag indicating whether the existence of the quota should be monitored and if so, the level of alert to raise.')
w2kConfigQuotSizeWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 9), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotSizeWarn.setDescription('&<caiW2kOs.223>Warning threshold for the used quota size in kilobytes. Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigQuotSizeCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 10), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotSizeCrit.setDescription('&<caiW2kOs.224>Critical threshold for the used quota size in kilobytes. Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigQuotSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotSizeMonitor.setDescription('&<caiW2kOs.225>Flag indicating whether the used quota size should be monitored and if so, which threshold should be compared with.')
w2kConfigQuotButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigQuotButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigQuotButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kConfigDirPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirPollInterval.setDescription('&<caiW2kOs.227>The time (in seconds) between the polling of the directory information. Valid values are greater than or equal to 30.')
w2kConfigDirPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirPollMethod.setDescription("&<caiW2kOs.228>If set to 'disabled', the agent no more retrieves the directory information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigDirName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirName.setDescription('&<caiW2kOs.229>Name of the watcher to be added/removed, monitoring a directory with this name. Important: This name is case insensitive.')
w2kConfigDirDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigDirAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigDirExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirExist.setDescription('&<caiW2kOs.232>Flag indicating whether to raise an alert if a directory is existent or if it is not-existent.')
w2kConfigDirExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirExistMonitor.setDescription('&<caiW2kOs.233>Flag indicating whether the existence of the directory should be monitored and if so, the level of alert to raise.')
w2kConfigDirTimeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirTimeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirTimeMonitor.setDescription('&<caiW2kOs.234>Flag indicating whether the latest timestamp (of all files and all subfolders, including the given folder) should be monitored and if so, the level of alert to raise.')
w2kConfigDirSizeWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 9), DisplayString().clone('150%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirSizeWarn.setDescription("&<caiW2kOs.235>Warning threshold for the total directory size (all files in the given folder and in all subfolders), either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 0 and smaller than the critical threshold.")
w2kConfigDirSizeCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 10), DisplayString().clone('200%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirSizeCrit.setDescription("&<caiW2kOs.236>Critical threshold for the total directory size (all files in the given folder and in all subfolders), either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 1 and greater than the warning threshold.")
w2kConfigDirSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirSizeMonitor.setDescription('&<caiW2kOs.237>Flag indicating whether the total directory size should be monitored and if so, which threshold should be compared with.')
w2kConfigDirSizeDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 12), DisplayString().clone('1%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirSizeDWarn.setDescription("&<caiW2kOs.238>Warning threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in total directory size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the total directory size (by appending a '%'). Valid values are greater than 0 and smaller than the critical threshold.")
w2kConfigDirSizeDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 13), DisplayString().clone('2%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirSizeDCrit.setDescription("&<caiW2kOs.239>Critical threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in total directory size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the total directory size (by appending a '%'). Valid values are greater than 1 and greater than the warning threshold.")
w2kConfigDirSizeDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirSizeDMonitor.setDescription('&<caiW2kOs.240>Flag indicating whether the delta in total directory size should be monitored and if so, which threshold should be compared with.')
w2kConfigDirEntryWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 15), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirEntryWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirEntryWarn.setDescription('&<caiW2kOs.241>Warning threshold for the number of entries (sum of files and folders in the given folder and in all subfolders). Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigDirEntryCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 16), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirEntryCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirEntryCrit.setDescription('&<caiW2kOs.242>Critical threshold for the number of entries (sum of files and folders in the given folder and in all subfolders). Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigDirEntryMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirEntryMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirEntryMonitor.setDescription('&<caiW2kOs.243>Flag indicating whether the number of entries should be monitored and if so, which threshold should be compared with.')
w2kConfigDirButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigDirButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigDirButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kConfigFilePollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFilePollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFilePollInterval.setDescription('&<caiW2kOs.245>The time (in seconds) between the polling of the file information. Valid values are greater than or equal to 30.')
w2kConfigFilePollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFilePollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFilePollMethod.setDescription("&<caiW2kOs.246>If set to 'disabled', the agent no more retrieves the file information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileName.setDescription('&<caiW2kOs.247>Name of the watcher to be added/removed, monitoring a file with this name. Important: This name is case insensitive.')
w2kConfigFileDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigFileAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigFileExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileExist.setDescription('&<caiW2kOs.250>Flag indicating whether to raise an alert if a file is existent or if it is not-existent.')
w2kConfigFileExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileExistMonitor.setDescription('&<caiW2kOs.251>Flag indicating whether the existence of the file should be monitored and if so, the level of alert to raise.')
w2kConfigFileTimeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileTimeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileTimeMonitor.setDescription('&<caiW2kOs.252>Flag indicating whether the timestamp of the file should be monitored and if so, the level of alert to raise.')
w2kConfigFileSizeWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 9), DisplayString().clone('150%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileSizeWarn.setDescription("&<caiW2kOs.253>Warning threshold for the file size, either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 0 and smaller than the critical threshold.")
w2kConfigFileSizeCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 10), DisplayString().clone('200%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileSizeCrit.setDescription("&<caiW2kOs.254>Critical threshold for the file size, either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 1 and greater than the warning threshold.")
w2kConfigFileSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileSizeMonitor.setDescription('&<caiW2kOs.255>Flag indicating whether the file size should be monitored and if so, which threshold should be compared with.')
w2kConfigFileSizeDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 12), DisplayString().clone('1%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileSizeDWarn.setDescription("&<caiW2kOs.256>Warning threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in file size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the file size (by appending a '%'). Valid values are greater than 0 and smaller than the critical threshold.")
w2kConfigFileSizeDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 13), DisplayString().clone('2%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileSizeDCrit.setDescription("&<caiW2kOs.257>Critical threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in file size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the file size (by appending a '%'). Valid values are greater than 1 and greater than the warning threshold.")
w2kConfigFileSizeDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileSizeDMonitor.setDescription('&<caiW2kOs.258>Flag indicating whether the delta in file size should be monitored and if so, which threshold should be compared with.')
w2kConfigFileButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigFileButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigFileButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kConfigProcPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcPollInterval.setDescription('&<caiW2kOs.260>The time (in seconds) between the polling of the process information. Valid values are greater than or equal to 30.')
w2kConfigProcPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcPollMethod.setDescription("&<caiW2kOs.261>If set to 'disabled', the agent no more retrieves the process information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigProcProcName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcProcName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcProcName.setDescription("&<caiW2kOs.262>Process name of the watcher to be added/removed, monitoring a process with this process name. An asterisk '*' can be used as process name or can be prepended/appended to it, in order to widen the scope of processes this watcher monitors. Important: This name is case insensitive.")
w2kConfigProcPathName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcPathName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcPathName.setDescription("&<caiW2kOs.263>Path name of the watcher to be added/removed, monitoring a process with this path name. An asterisk '*' can be used as path name or can be prepended/appended to it, in order to widen the scope of processes this watcher monitors. Important: This name is case insensitive.")
w2kConfigProcUserName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcUserName.setDescription("&<caiW2kOs.264>User name of the watcher to be added/removed, monitoring a process started by this user. An asterisk '*' can be used as user name or can be prepended/appended to it, in order to widen the scope of processes this watcher monitors. Important: This name is case insensitive.")
w2kConfigProcDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigProcAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigProcInstMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcInstMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcInstMin.setDescription('&<caiW2kOs.267>Minimum threshold for the number of process instances. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kConfigProcInstMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcInstMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcInstMax.setDescription('&<caiW2kOs.268>Maximum threshold for the number of process instances. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kConfigProcInstMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcInstMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcInstMonitor.setDescription('&<caiW2kOs.269>Flag indicating whether the number of process instances should be monitored and if so, the level of alert to raise.')
w2kConfigProcChildMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcChildMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcChildMin.setDescription('&<caiW2kOs.270>Minimum threshold for the number of childprocesses of the process. If there is more than one process instance, the minimum of all instances is compared with this value. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kConfigProcChildMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 12), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcChildMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcChildMax.setDescription('&<caiW2kOs.271>Maximum threshold for the number of childprocesses of the process. If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kConfigProcChildMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcChildMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcChildMonitor.setDescription("&<caiW2kOs.272>Flag indicating whether the number of childprocesses of the process should be monitored and if so, the level of alert to raise. Note: This metric decreases agent performance much more than any other metric. For this reason the default is 'do-not-monitor'.")
w2kConfigProcThreadMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcThreadMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcThreadMin.setDescription('&<caiW2kOs.273>Minimum threshold for the number of threads of the process. If there is more than one process instance, the minimum of all instances is compared with this value. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kConfigProcThreadMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 15), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcThreadMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcThreadMax.setDescription('&<caiW2kOs.274>Maximum threshold for the number of threads of the process. If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kConfigProcThreadMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcThreadMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcThreadMonitor.setDescription('&<caiW2kOs.275>Flag indicating whether the number of threads of the process should be monitored and if so, the level of alert to raise.')
w2kConfigProcMemoryWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 17), Integer32().clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcMemoryWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcMemoryWarn.setDescription('&<caiW2kOs.276>Warning threshold for the memory usage of the process (in kilobytes). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigProcMemoryCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 18), Integer32().clone(40000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcMemoryCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcMemoryCrit.setDescription('&<caiW2kOs.277>Critical threshold for the memory usage of the process (in kilobytes). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigProcMemoryMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcMemoryMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcMemoryMonitor.setDescription('&<caiW2kOs.278>Flag indicating whether the memory usage of the process should be monitored and if so, which threshold should be compared with.')
w2kConfigProcCpuWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 20), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcCpuWarn.setDescription('&<caiW2kOs.279>Warning threshold for the CPU usage of the process (as percentage value of 100). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are 1 to 99 and smaller than the critical threshold.')
w2kConfigProcCpuCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 21), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcCpuCrit.setDescription('&<caiW2kOs.280>Critical threshold for the CPU usage of the process (as percentage value of 100). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are 2 to 100 and greater than the warning threshold.')
w2kConfigProcCpuMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcCpuMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcCpuMonitor.setDescription('&<caiW2kOs.281>Flag indicating whether the CPU usage of the process should be monitored and if so, which threshold should be compared with.')
w2kConfigProcButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 11, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigProcButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigProcButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kConfigSrvcPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcPollInterval.setDescription('&<caiW2kOs.283>The time (in seconds) between the polling of the service information. Valid values are greater than or equal to 30.')
w2kConfigSrvcPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcPollMethod.setDescription("&<caiW2kOs.284>If set to 'disabled', the agent no more retrieves the service information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigSrvcAutoPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 3), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoPollInterval.setDescription('&<caiW2kOs.285>The time (in minutes), when a new auto discovery process is started. Valid values are greater than or equal to 30 or set to -1. If set to -1, auto discovery of services will no more be made.')
w2kConfigSrvcName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcName.setDescription('&<caiW2kOs.286>Name of the watcher to be added/removed, monitoring a service with this name. If adding an auto discovery watcher, this name can be a wildcarded service name filtering the services to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered service a watcher will be created. Important: This name is case insensitive.')
w2kConfigSrvcDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigSrvcAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigSrvcExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcExist.setDescription('&<caiW2kOs.289>Flag indicating whether to raise an alert if a service is existent or if it is not-existent.')
w2kConfigSrvcExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcExistMonitor.setDescription('&<caiW2kOs.290>Flag indicating whether the existence of the service should be monitored and if so, the level of alert to raise.')
w2kConfigSrvcActive = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-be-active", 1), ("should-not-be-active", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcActive.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcActive.setDescription('&<caiW2kOs.291>Flag indicating whether to raise an alert if an existent service is active or if it is inactive.')
w2kConfigSrvcActiveMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcActiveMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcActiveMonitor.setDescription('&<caiW2kOs.292>Flag indicating whether the activity of the service should be monitored and if so, the level of alert to raise.')
w2kConfigSrvcAutoTableWatcherName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoTableWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoTableWatcherName.setDescription('&<caiW2kOs.151>Name of the watcher to be added in the auto discovery table.')
w2kConfigSrvcButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3), ("add-auto", 4), ("remove-auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcButton.setDescription('&<caiW2kOs.152>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group, or to add or remove an auto discovery watcher with the current value of the auto table watcher name attribute in this group.')
w2kConfigSrvcAutoTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13), )
if mibBuilder.loadTexts: w2kConfigSrvcAutoTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoTable.setDescription('&<caiW2kOs.295>A table containing all auto discovery watchers for services.')
w2kConfigSrvcAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kConfigSrvcAutoWatcherName"))
if mibBuilder.loadTexts: w2kConfigSrvcAutoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kConfigSrvcAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigSrvcAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoWatcherName.setDescription('&<caiW2kOs.155>Name of the auto discovery watcher.')
w2kConfigSrvcAutoName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoName.setDescription('&<caiW2kOs.298>Wildcarded service name filtering the services to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered service a watcher will be created. Important: This name is case insensitive.')
w2kConfigSrvcAutoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoDescription.setDescription('&<caiW2kOs.299>Default for auto discovered services.')
w2kConfigSrvcAutoAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoAggLag.setDescription('&<caiW2kOs.299>Default for auto discovered services.')
w2kConfigSrvcAutoExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoExist.setDescription('&<caiW2kOs.299>Default for auto discovered services.')
w2kConfigSrvcAutoExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoExistMonitor.setDescription('&<caiW2kOs.299>Default for auto discovered services.')
w2kConfigSrvcAutoActive = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-be-active", 1), ("should-not-be-active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoActive.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoActive.setDescription('&<caiW2kOs.299>Default for auto discovered services.')
w2kConfigSrvcAutoActiveMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoActiveMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoActiveMonitor.setDescription('&<caiW2kOs.299>Default for auto discovered services.')
w2kConfigSrvcAutoButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 12, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSrvcAutoButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSrvcAutoButton.setDescription('&<caiW2kOs.172>This attribute is used to remove this auto discovery watcher.')
w2kConfigJobPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobPollInterval.setDescription('&<caiW2kOs.306>The time (in seconds) between the polling of the job information. Valid values are greater than or equal to 30.')
w2kConfigJobPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobPollMethod.setDescription("&<caiW2kOs.307>If set to 'disabled', the agent no more retrieves the job information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigJobName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobName.setDescription('&<caiW2kOs.308>Name of the watcher to be added/removed, monitoring a job with this name. Important: This name is case insensitive.')
w2kConfigJobDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigJobAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigJobExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobExist.setDescription('&<caiW2kOs.311>Flag indicating whether to raise an alert if a job is existent or if it is not-existent.')
w2kConfigJobExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobExistMonitor.setDescription('&<caiW2kOs.312>Flag indicating whether the existence of the job should be monitored and if so, the level of alert to raise.')
w2kConfigJobProcessMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobProcessMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobProcessMin.setDescription('&<caiW2kOs.313>Minimum threshold for the number of active processes associated with the job. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kConfigJobProcessMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 9), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobProcessMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobProcessMax.setDescription('&<caiW2kOs.314>Maximum threshold for the number of active processes associated with the job. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kConfigJobProcessMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobProcessMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobProcessMonitor.setDescription('&<caiW2kOs.315>Flag indicating whether the number of active processes associated with the job should be monitored and if so, the level of alert to raise.')
w2kConfigJobCpuWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 11), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobCpuWarn.setDescription('&<caiW2kOs.316>Warning threshold for the CPU usage of the job (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kConfigJobCpuCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 12), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobCpuCrit.setDescription('&<caiW2kOs.317>Critical threshold for the CPU usage of the job (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kConfigJobCpuMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobCpuMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobCpuMonitor.setDescription('&<caiW2kOs.318>Flag indicating whether the CPU usage of the job should be monitored and if so, which threshold should be compared with.')
w2kConfigJobButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigJobButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigJobButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kConfigSessPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessPollInterval.setDescription('&<caiW2kOs.320>The time (in seconds) between the polling of the session information. Valid values are greater than or equal to 30.')
w2kConfigSessPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessPollMethod.setDescription("&<caiW2kOs.321>If set to 'disabled', the agent no more retrieves the session information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigSessClientName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessClientName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessClientName.setDescription("&<caiW2kOs.322>Client name of the watcher to be added/removed, monitoring a session with this client name. The client name is the name of the host, from where this session was initiated. An asterisk '*' can be used as client name or can be prepended/appended to it, in order to widen the scope of sessions this watcher monitors. Important: This name is case insensitive.")
w2kConfigSessUserName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessUserName.setDescription("&<caiW2kOs.323>User name of the watcher to be added/removed, monitoring a session with this user name. The user name specifies the user, who logged in and is in the form 'domainName\\userName'. An asterisk '*' can be used as user name or can be prepended/appended to it, in order to widen the scope of sessions this watcher monitors. Important: This name is case insensitive.")
w2kConfigSessDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigSessAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigSessInstMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessInstMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessInstMin.setDescription('&<caiW2kOs.326>Minimum threshold for the number of session instances. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kConfigSessInstMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 8), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessInstMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessInstMax.setDescription('&<caiW2kOs.327>Maximum threshold for the number of session instances. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kConfigSessInstMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessInstMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessInstMonitor.setDescription('&<caiW2kOs.328>Flag indicating whether the number of session instances should be monitored and if so, the level of alert to raise.')
w2kConfigSessMemoryWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 10), Integer32().clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessMemoryWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessMemoryWarn.setDescription('&<caiW2kOs.329>Warning threshold for the memory usage of the session (in kilobytes). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigSessMemoryCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 11), Integer32().clone(40000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessMemoryCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessMemoryCrit.setDescription('&<caiW2kOs.330>Critical threshold for the memory usage of the session (in kilobytes). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigSessMemoryMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessMemoryMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessMemoryMonitor.setDescription('&<caiW2kOs.331>Flag indicating whether the memory usage of the session should be monitored and if so, which threshold should be compared with.')
w2kConfigSessCpuWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 13), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessCpuWarn.setDescription('&<caiW2kOs.332>Warning threshold for the CPU usage of the session (as percentage value of 100). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are 1 to 99 and smaller than the critical threshold.')
w2kConfigSessCpuCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 14), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessCpuCrit.setDescription('&<caiW2kOs.333>Critical threshold for the CPU usage of the session (as percentage value of 100). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are 2 to 100 and greater than the warning threshold.')
w2kConfigSessCpuMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessCpuMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessCpuMonitor.setDescription('&<caiW2kOs.334>Flag indicating whether the CPU usage of the session should be monitored and if so, which threshold should be compared with.')
w2kConfigSessButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigSessButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigSessButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kConfigPrnPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnPollInterval.setDescription('&<caiW2kOs.336>The time (in seconds) between the polling of the printer information. Valid values are greater than or equal to 30.')
w2kConfigPrnPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnPollMethod.setDescription("&<caiW2kOs.337>If set to 'disabled', the agent no more retrieves the printer information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigPrnAutoPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 3), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoPollInterval.setDescription('&<caiW2kOs.338>The time (in minutes), when a new auto discovery process is started. Valid values are greater than or equal to 30 or set to -1. If set to -1, auto discovery of printers will no more be made.')
w2kConfigPrnName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnName.setDescription('&<caiW2kOs.339>Name of the watcher to be added/removed, monitoring a local printer with this name. If adding an auto discovery watcher, this name can be a wildcarded printer name filtering the printers to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered printer a watcher will be created. Important: This name is case insensitive.')
w2kConfigPrnDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigPrnAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigPrnEventMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnEventMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnEventMonitor.setDescription('&<caiW2kOs.342>Flag indicating whether the occurence of printer events should be monitored and if so, the level of alert to raise.')
w2kConfigPrnQueueWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 8), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnQueueWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnQueueWarn.setDescription("&<caiW2kOs.343>Warning threshold for the number of jobs in the printer's queue. Valid values are greater than 0 and smaller than the critical threshold.")
w2kConfigPrnQueueCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 9), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnQueueCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnQueueCrit.setDescription("&<caiW2kOs.344>Critical threshold for the number of jobs in the printer's queue. Valid values are greater than 1 and greater than the warning threshold.")
w2kConfigPrnQueueMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnQueueMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnQueueMonitor.setDescription("&<caiW2kOs.345>Flag indicating whether the printer's job queue should be monitored and if so, which threshold should be compared with.")
w2kConfigPrnLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnLossAction.setDescription('&<caiW2kOs.346>Flag defining the severity if the loss of the printer is detected or whether to remove this watcher in that case.')
w2kConfigPrnAutoTableWatcherName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoTableWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoTableWatcherName.setDescription('&<caiW2kOs.151>Name of the watcher to be added in the auto discovery table.')
w2kConfigPrnButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3), ("add-auto", 4), ("remove-auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnButton.setDescription('&<caiW2kOs.152>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group, or to add or remove an auto discovery watcher with the current value of the auto table watcher name attribute in this group.')
w2kConfigPrnAutoTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14), )
if mibBuilder.loadTexts: w2kConfigPrnAutoTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoTable.setDescription('&<caiW2kOs.349>A table containing all auto discovery watchers for printers.')
w2kConfigPrnAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kConfigPrnAutoWatcherName"))
if mibBuilder.loadTexts: w2kConfigPrnAutoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kConfigPrnAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kConfigPrnAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoWatcherName.setDescription('&<caiW2kOs.155>Name of the auto discovery watcher.')
w2kConfigPrnAutoName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoName.setDescription('&<caiW2kOs.352>Wildcarded printer name filtering the printers to be auto discovered (any backslash in the wildcarded name must be doubled). For each auto discovered printer a watcher will be created. Important: This name is case insensitive.')
w2kConfigPrnAutoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoDescription.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoAggLag.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoEventMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoEventMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoEventMonitor.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoQueueWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoQueueWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoQueueWarn.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoQueueCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoQueueCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoQueueCrit.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoQueueMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoQueueMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoQueueMonitor.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoLossAction.setDescription('&<caiW2kOs.353>Default for auto discovered printers.')
w2kConfigPrnAutoButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 15, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigPrnAutoButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigPrnAutoButton.setDescription('&<caiW2kOs.172>This attribute is used to remove this auto discovery watcher.')
w2kConfigNetPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetPollInterval.setDescription('&<caiW2kOs.361>The time (in seconds) between the polling of the network interface information. Valid values are greater than or equal to 30.')
w2kConfigNetPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetPollMethod.setDescription("&<caiW2kOs.362>If set to 'disabled', the agent no more retrieves the network interface information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigNetAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigNetInPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 4), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetInPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetInPktWarn.setDescription('&<caiW2kOs.364>Warning threshold for the rate of received packets over TCP/IP connections (packets per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigNetInPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 5), Integer32().clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetInPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetInPktCrit.setDescription('&<caiW2kOs.365>Critical threshold for the rate of received packets over TCP/IP connections (packets per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigNetInPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetInPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetInPktMonitor.setDescription('&<caiW2kOs.366>Flag indicating whether the received packets rate should be monitored and if so, which threshold should be compared with.')
w2kConfigNetOutPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 7), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetOutPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetOutPktWarn.setDescription('&<caiW2kOs.367>Warning threshold for the rate of sent packets over TCP/IP connections (packets per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigNetOutPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 8), Integer32().clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetOutPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetOutPktCrit.setDescription('&<caiW2kOs.368>Critical threshold for the rate of sent packets over TCP/IP connections (packets per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigNetOutPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetOutPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetOutPktMonitor.setDescription('&<caiW2kOs.369>Flag indicating whether the sent packets rate should be monitored and if so, which threshold should be compared with.')
w2kConfigNetInErrDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 10), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetInErrDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetInErrDWarn.setDescription('&<caiW2kOs.370>Warning threshold for the rate of received errors over TCP/IP connections (errors per poll interval). Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigNetInErrDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 11), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetInErrDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetInErrDCrit.setDescription('&<caiW2kOs.371>Critical threshold for the rate of received errors over TCP/IP connections (errors per poll interval). Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigNetInErrDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetInErrDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetInErrDMonitor.setDescription('&<caiW2kOs.372>Flag indicating whether the received errors rate should be monitored and if so, which threshold should be compared with.')
w2kConfigNetOutErrDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 13), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetOutErrDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetOutErrDWarn.setDescription('&<caiW2kOs.373>Warning threshold for the rate of sent errors over TCP/IP connections (errors per poll interval). Valid values are greater than 0 and smaller than the critical threshold.')
w2kConfigNetOutErrDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 14), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetOutErrDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetOutErrDCrit.setDescription('&<caiW2kOs.374>Critical threshold for the rate of sent errors over TCP/IP connections (errors per poll interval). Valid values are greater than 1 and greater than the warning threshold.')
w2kConfigNetOutErrDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetOutErrDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetOutErrDMonitor.setDescription('&<caiW2kOs.375>Flag indicating whether the sent errors rate should be monitored and if so, which threshold should be compared with.')
w2kConfigNetLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 16, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigNetLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigNetLossAction.setDescription('&<caiW2kOs.376>Flag defining the severity if the loss of the network interface is detected or whether to remove this watcher in that case.')
w2kConfigRegPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 1), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegPollInterval.setDescription('&<caiW2kOs.377>The time (in seconds) between the polling of the registry entry information. Valid values are greater than or equal to 30.')
w2kConfigRegPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("poll-interval-only", 2), ("poll-interval-and-query", 3), ("query-only", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegPollMethod.setDescription("&<caiW2kOs.378>If set to 'disabled', the agent no more retrieves the registry entry information (not by polling, nor by get request) and sets all statuses to ok. If set to 'poll-interval-only', the agent only retrieves the information by polling, but not by get request. If set to 'poll-interval-and-query', the agent retrieves the information in both cases (polling and get request). If set to 'query-only', the agent retrieves the information for get requests only.")
w2kConfigRegName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegName.setDescription('&<caiW2kOs.379>Name of the watcher to be added/removed, monitoring a registry entry with this name. The name is the complete registry path ending with the registry leaf name. If the leaf name contains a backslash, the leaf name must be quoted with double quotes. Important: This name is case insensitive.')
w2kConfigRegDescription = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kConfigRegAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kConfigRegExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegExist.setDescription('&<caiW2kOs.382>Flag indicating whether to raise an alert if a registry entry is existent or if it is not-existent.')
w2kConfigRegExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegExistMonitor.setDescription('&<caiW2kOs.383>Flag indicating whether the existence of the registry entry should be monitored and if so, the level of alert to raise.')
w2kConfigRegValueRef = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 8), DisplayString().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegValueRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegValueRef.setDescription("&<caiW2kOs.384>This attribute is used as the reference value the registry entry is compared with. If the condition is one of 'should-be-equal', 'should-not-be-equal', 'should-be-below' or 'should-be-above', this reference value must be set by the user. In case of 'should-not-change', by setting the status button attribute to 'reset-value', the reference value is set to the current value of the registry entry.")
w2kConfigRegValueCond = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("should-be-equal", 1), ("should-not-be-equal", 2), ("should-be-below", 3), ("should-be-above", 4), ("should-not-change", 5))).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegValueCond.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegValueCond.setDescription("&<caiW2kOs.385>Flag indicating whether to raise an alert if a registry entry does not fullfill the given condition compared with the reference value attribute. 'should-be-below' and 'should-be-above' is only allowed for entries with type DWORD. For entries with type Binary 'should-not-change' is the only possible value.")
w2kConfigRegValueMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegValueMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegValueMonitor.setDescription('&<caiW2kOs.386>Flag indicating whether the value of the registry entry should be monitored and if so, the level of alert to raise.')
w2kConfigRegButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 1, 17, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kConfigRegButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kConfigRegButton.setDescription('&<caiW2kOs.226>This attribute is used to add or remove a watcher with the current value of the watcher name attribute in this group.')
w2kStatusGeneralTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralTotalCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralTotalCount.setDescription('&<caiW2kOs.388>The number of all monitored resources.')
w2kStatusGeneralTotalWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralTotalWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralTotalWarn.setDescription('&<caiW2kOs.389>The number of all monitored resources in a warning status.')
w2kStatusGeneralTotalCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralTotalCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralTotalCrit.setDescription('&<caiW2kOs.390>The number of all monitored resources in a critical status.')
w2kStatusGeneralCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralCpuCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralCpuCount.setDescription('&<caiW2kOs.391>The number of monitored processors (including the processors total value).')
w2kStatusGeneralCpuWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralCpuWarn.setDescription('&<caiW2kOs.392>The number of monitored processors in a warning state.')
w2kStatusGeneralCpuCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralCpuCrit.setDescription('&<caiW2kOs.393>The number of monitored processors in a critical state.')
w2kStatusGeneralMemCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralMemCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralMemCount.setDescription('&<caiW2kOs.394>The number of monitored memory resources.')
w2kStatusGeneralMemWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralMemWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralMemWarn.setDescription('&<caiW2kOs.395>The number of monitored memory resources in a warning state.')
w2kStatusGeneralMemCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralMemCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralMemCrit.setDescription('&<caiW2kOs.396>The number of monitored memory resources in a critical state.')
w2kStatusGeneralLVolCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralLVolCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralLVolCount.setDescription('&<caiW2kOs.397>The number of monitored logical volumes.')
w2kStatusGeneralLVolWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralLVolWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralLVolWarn.setDescription('&<caiW2kOs.398>The number of monitored logical volumes in a warning state.')
w2kStatusGeneralLVolCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralLVolCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralLVolCrit.setDescription('&<caiW2kOs.399>The number of monitored logical volumes in a critical state.')
w2kStatusGeneralMntCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralMntCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralMntCount.setDescription('&<caiW2kOs.400>The number of monitored mounts.')
w2kStatusGeneralMntWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralMntWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralMntWarn.setDescription('&<caiW2kOs.401>The number of monitored mounts in a warning state.')
w2kStatusGeneralMntCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralMntCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralMntCrit.setDescription('&<caiW2kOs.402>The number of monitored mounts in a critical state.')
w2kStatusGeneralDfsCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralDfsCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralDfsCount.setDescription('&<caiW2kOs.403>The number of monitored distributed file system links.')
w2kStatusGeneralDfsWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralDfsWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralDfsWarn.setDescription('&<caiW2kOs.404>The number of monitored distributed file system links in a warning state.')
w2kStatusGeneralDfsCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralDfsCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralDfsCrit.setDescription('&<caiW2kOs.405>The number of monitored distributed file system links in a critical state.')
w2kStatusGeneralQuotCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralQuotCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralQuotCount.setDescription('&<caiW2kOs.406>The number of monitored quotas.')
w2kStatusGeneralQuotWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralQuotWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralQuotWarn.setDescription('&<caiW2kOs.407>The number of monitored quotas in a warning state.')
w2kStatusGeneralQuotCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralQuotCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralQuotCrit.setDescription('&<caiW2kOs.408>The number of monitored quotas in a critical state.')
w2kStatusGeneralDirCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralDirCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralDirCount.setDescription('&<caiW2kOs.409>The number of monitored directories.')
w2kStatusGeneralDirWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralDirWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralDirWarn.setDescription('&<caiW2kOs.410>The number of monitored directories in a warning state.')
w2kStatusGeneralDirCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralDirCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralDirCrit.setDescription('&<caiW2kOs.411>The number of monitored directories in a critical state.')
w2kStatusGeneralFileCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralFileCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralFileCount.setDescription('&<caiW2kOs.412>The number of monitored files.')
w2kStatusGeneralFileWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralFileWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralFileWarn.setDescription('&<caiW2kOs.413>The number of monitored files in a warning state.')
w2kStatusGeneralFileCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralFileCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralFileCrit.setDescription('&<caiW2kOs.414>The number of monitored files in a critical state.')
w2kStatusGeneralProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralProcCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralProcCount.setDescription('&<caiW2kOs.415>The number of monitored processes.')
w2kStatusGeneralProcWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralProcWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralProcWarn.setDescription('&<caiW2kOs.416>The number of monitored processes in a warning state.')
w2kStatusGeneralProcCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralProcCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralProcCrit.setDescription('&<caiW2kOs.417>The number of monitored processes in a critical state.')
w2kStatusGeneralSrvcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralSrvcCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralSrvcCount.setDescription('&<caiW2kOs.418>The number of monitored services.')
w2kStatusGeneralSrvcWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralSrvcWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralSrvcWarn.setDescription('&<caiW2kOs.419>The number of monitored services in a warning state.')
w2kStatusGeneralSrvcCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralSrvcCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralSrvcCrit.setDescription('&<caiW2kOs.420>The number of monitored services in a critical state.')
w2kStatusGeneralJobCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralJobCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralJobCount.setDescription('&<caiW2kOs.421>The number of monitored jobs.')
w2kStatusGeneralJobWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralJobWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralJobWarn.setDescription('&<caiW2kOs.422>The number of monitored jobs in a warning state.')
w2kStatusGeneralJobCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralJobCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralJobCrit.setDescription('&<caiW2kOs.423>The number of monitored jobs in a critical state.')
w2kStatusGeneralSessCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralSessCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralSessCount.setDescription('&<caiW2kOs.424>The number of monitored sessions.')
w2kStatusGeneralSessWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralSessWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralSessWarn.setDescription('&<caiW2kOs.425>The number of monitored sessions in a warning state.')
w2kStatusGeneralSessCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralSessCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralSessCrit.setDescription('&<caiW2kOs.426>The number of monitored sessions in a critical state.')
w2kStatusGeneralPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralPrnCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralPrnCount.setDescription('&<caiW2kOs.427>The number of monitored printers.')
w2kStatusGeneralPrnWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralPrnWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralPrnWarn.setDescription('&<caiW2kOs.428>The number of monitored printers in a warning state.')
w2kStatusGeneralPrnCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralPrnCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralPrnCrit.setDescription('&<caiW2kOs.429>The number of monitored printers in a critical state.')
w2kStatusGeneralNetCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralNetCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralNetCount.setDescription('&<caiW2kOs.430>The number of monitored network interfaces (including the network interfaces total value).')
w2kStatusGeneralNetWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralNetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralNetWarn.setDescription('&<caiW2kOs.431>The number of monitored network interfaces in a warning state.')
w2kStatusGeneralNetCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralNetCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralNetCrit.setDescription('&<caiW2kOs.432>The number of monitored network interfaces in a critical state.')
w2kStatusGeneralRegCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralRegCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralRegCount.setDescription('&<caiW2kOs.433>The number of monitored registry entries.')
w2kStatusGeneralRegWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralRegWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralRegWarn.setDescription('&<caiW2kOs.434>The number of monitored registry entries in a warning state.')
w2kStatusGeneralRegCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusGeneralRegCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusGeneralRegCrit.setDescription('&<caiW2kOs.435>The number of monitored registry entries in a critical state.')
w2kStatusCpuTotalLoadValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadValue.setDescription('&<caiW2kOs.436>The current total utilization of all processors (as percentage value of 100).')
w2kStatusCpuTotalLoadLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadLagValue.setDescription('&<caiW2kOs.437>The number of consecutive poll intervals that the threshold had been (b)reached.')
w2kStatusCpuTotalLoadLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadLag.setDescription('&<caiW2kOs.124>The number of consecutive poll intervals that the threshold has to be (b)reached before the status changes. Valid values are greater than 0.')
w2kStatusCpuTotalLoadWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 4), Integer32().clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadWarn.setDescription('&<caiW2kOs.439>Warning threshold for the total utilization of all processors (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kStatusCpuTotalLoadCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 5), Integer32().clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadCrit.setDescription('&<caiW2kOs.440>Critical threshold for the total utilization of all processors (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kStatusCpuTotalLoadMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadMonitor.setDescription('&<caiW2kOs.441>Flag indicating whether the total utilization of all processors should be monitored and if so, which threshold should be compared with.')
w2kStatusCpuTotalLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalLoadStatus.setDescription("&<caiW2kOs.442>The current status of the total utilization of all processors as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusCpuTotalCallBackRef = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuTotalCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTotalCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuCount.setDescription('&<caiW2kOs.444>The number of entries in the w2kStatusCpuTable.')
w2kStatusCpuTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10), )
if mibBuilder.loadTexts: w2kStatusCpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuTable.setDescription('&<caiW2kOs.445>A table containing information about all monitored processors.')
w2kStatusCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusCpuName"))
if mibBuilder.loadTexts: w2kStatusCpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuName.setDescription('&<caiW2kOs.447>Name of the watcher, monitoring a processor with the processor identification number contained in this dummy name.')
w2kStatusCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuType.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuType.setDescription('&<caiW2kOs.448>The type of the processor.')
w2kStatusCpuAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuAggStatus.setDescription("&<caiW2kOs.449>The current status of the processor as a 'worst case' aggregate of all its statuses.")
w2kStatusCpuLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuLoadValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadValue.setDescription('&<caiW2kOs.450>The current processor utilization (as percentage value of 100).')
w2kStatusCpuLoadLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuLoadLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadLagValue.setDescription('&<caiW2kOs.437>The number of consecutive poll intervals that the threshold had been (b)reached.')
w2kStatusCpuLoadLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuLoadLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadLag.setDescription('&<caiW2kOs.124>The number of consecutive poll intervals that the threshold has to be (b)reached before the status changes. Valid values are greater than 0.')
w2kStatusCpuLoadWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuLoadWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadWarn.setDescription('&<caiW2kOs.125>Warning threshold for the utilization of the processor (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kStatusCpuLoadCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuLoadCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadCrit.setDescription('&<caiW2kOs.126>Critical threshold for the utilization of the processor (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kStatusCpuLoadMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuLoadMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadMonitor.setDescription('&<caiW2kOs.127>Flag indicating whether the utilization of the processor should be monitored and if so, which threshold should be compared with.')
w2kStatusCpuLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuLoadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLoadStatus.setDescription("&<caiW2kOs.456>The current status of the processor utilization as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusCpuLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusCpuLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLossAction.setDescription('&<caiW2kOs.128>Flag defining the severity if the loss of the processor is detected or whether to remove this watcher in that case.')
w2kStatusCpuLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuLossStatus.setDescription("&<caiW2kOs.458>The current status of the processor's loss as determined by the loss action.")
w2kStatusCpuCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 2, 10, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusCpuCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusCpuCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusMemVirtTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemVirtTotal.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtTotal.setDescription('&<caiW2kOs.460>The total size of the virtual memory on the system that can be committed (in kilobytes). The virtual memory comprises the physical and the paging memory.')
w2kStatusMemVirtValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemVirtValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtValue.setDescription('&<caiW2kOs.461>The size of the currently committed virtual memory (in kilobytes).')
w2kStatusMemVirtLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemVirtLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtLagValue.setDescription('&<caiW2kOs.437>The number of consecutive poll intervals that the threshold had been (b)reached.')
w2kStatusMemVirtLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 4), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemVirtLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtLag.setDescription('&<caiW2kOs.124>The number of consecutive poll intervals that the threshold has to be (b)reached before the status changes. Valid values are greater than 0.')
w2kStatusMemVirtWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemVirtWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtWarnValue.setDescription('&<caiW2kOs.464>The actual warning threshold in committed kilobytes derived from the configured warning threshold.')
w2kStatusMemVirtCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemVirtCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtCritValue.setDescription('&<caiW2kOs.465>The actual critical threshold in committed kilobytes derived from the configured critical threshold.')
w2kStatusMemVirtWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 7), DisplayString().clone('70%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemVirtWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtWarn.setDescription("&<caiW2kOs.466>Warning threshold in kilobytes, either for the free (by appending a 'F') or for the committed virtual memory. The committed value can also be defined as a percentage value of the total size (by appending a '%'). Valid values are greater than 0 and smaller (in case of 'free' greater) critical threshold.")
w2kStatusMemVirtCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 8), DisplayString().clone('90%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemVirtCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtCrit.setDescription("&<caiW2kOs.467>Critical threshold in kilobytes, either for the free (by appending a 'F') or for the committed virtual memory. The committed value can also be defined as a percentage value of the total size (by appending a '%'). Valid values are greater than 1 and greater (in case of 'free' smaller) warning threshold.")
w2kStatusMemVirtMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemVirtMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtMonitor.setDescription('&<caiW2kOs.468>Flag indicating whether the virtual memory should be monitored and if so, which threshold should be compared with.')
w2kStatusMemVirtStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemVirtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemVirtStatus.setDescription("&<caiW2kOs.469>The current status of the virtual memory as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusMemPhysTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPhysTotal.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysTotal.setDescription('&<caiW2kOs.470>The total size of the physical memory on the system (in kilobytes).')
w2kStatusMemPhysValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPhysValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysValue.setDescription('&<caiW2kOs.471>The size of the currently used physical memory (in kilobytes).')
w2kStatusMemPhysLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPhysLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysLagValue.setDescription('&<caiW2kOs.437>The number of consecutive poll intervals that the threshold had been (b)reached.')
w2kStatusMemPhysLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 14), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPhysLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysLag.setDescription('&<caiW2kOs.124>The number of consecutive poll intervals that the threshold has to be (b)reached before the status changes. Valid values are greater than 0.')
w2kStatusMemPhysWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPhysWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysWarnValue.setDescription('&<caiW2kOs.474>The actual warning threshold in used kilobytes derived from the configured warning threshold.')
w2kStatusMemPhysCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPhysCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysCritValue.setDescription('&<caiW2kOs.475>The actual critical threshold in used kilobytes derived from the configured critical threshold.')
w2kStatusMemPhysWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 17), DisplayString().clone('70%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPhysWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysWarn.setDescription("&<caiW2kOs.476>Warning threshold in kilobytes, either for the free (by appending a 'F') or for the used physical memory. The used value can also be defined as a percentage value of the total size (by appending a '%'). Valid values are greater than 0 and smaller (in case of 'free' greater) critical threshold.")
w2kStatusMemPhysCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 18), DisplayString().clone('90%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPhysCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysCrit.setDescription("&<caiW2kOs.477>Critical threshold in kilobytes, either for the free (by appending a 'F') or for the used physical memory. The used value can also be defined as a percentage value of the total size (by appending a '%'). Valid values are greater than 1 and greater (in case of 'free' smaller) warning threshold.")
w2kStatusMemPhysMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPhysMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysMonitor.setDescription('&<caiW2kOs.478>Flag indicating whether the physical memory should be monitored and if so, which threshold should be compared with.')
w2kStatusMemPhysStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPhysStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPhysStatus.setDescription("&<caiW2kOs.479>The current status of the physical memory as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusMemPageTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageTotal.setDescription('&<caiW2kOs.480>The total size of the paging memory on the system (in kilobytes).')
w2kStatusMemPageValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPageValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageValue.setDescription('&<caiW2kOs.481>The size of the currently used paging memory (in kilobytes).')
w2kStatusMemPageLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPageLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageLagValue.setDescription('&<caiW2kOs.437>The number of consecutive poll intervals that the threshold had been (b)reached.')
w2kStatusMemPageLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 24), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPageLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageLag.setDescription('&<caiW2kOs.124>The number of consecutive poll intervals that the threshold has to be (b)reached before the status changes. Valid values are greater than 0.')
w2kStatusMemPageWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPageWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageWarnValue.setDescription('&<caiW2kOs.474>The actual warning threshold in used kilobytes derived from the configured warning threshold.')
w2kStatusMemPageCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPageCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageCritValue.setDescription('&<caiW2kOs.475>The actual critical threshold in used kilobytes derived from the configured critical threshold.')
w2kStatusMemPageWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 27), DisplayString().clone('70%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPageWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageWarn.setDescription("&<caiW2kOs.486>Warning threshold in kilobytes, either for the free (by appending a 'F') or for the used paging memory. The used value can also be defined as a percentage value of the total size (by appending a '%'). Valid values are greater than 0 and smaller (in case of 'free' greater) critical threshold.")
w2kStatusMemPageCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 28), DisplayString().clone('90%')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPageCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageCrit.setDescription("&<caiW2kOs.487>Critical threshold in kilobytes, either for the free (by appending a 'F') or for the used paging memory. The used value can also be defined as a percentage value of the total size (by appending a '%'). Valid values are greater than 1 and greater (in case of 'free' smaller) warning threshold.")
w2kStatusMemPageMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMemPageMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageMonitor.setDescription('&<caiW2kOs.488>Flag indicating whether the paging memory should be monitored and if so, which threshold should be compared with.')
w2kStatusMemPageStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemPageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemPageStatus.setDescription("&<caiW2kOs.489>The current status of the paging memory as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusMemCallBackRef = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 3, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMemCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMemCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusLVolCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolCount.setDescription('&<caiW2kOs.491>The number of entries in the w2kStatusLVolTable.')
w2kStatusLVolTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2), )
if mibBuilder.loadTexts: w2kStatusLVolTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolTable.setDescription('&<caiW2kOs.492>A table containing information about all monitored logical volumes.')
w2kStatusLVolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusLVolName"))
if mibBuilder.loadTexts: w2kStatusLVolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusLVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolName.setDescription('&<caiW2kOs.494>Name of the watcher, monitoring a logical volume with this name. Important: This name is case insensitive.')
w2kStatusLVolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusLVolMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolMounts.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolMounts.setDescription('&<caiW2kOs.496>A list of the mount points, where this logical volume is mounted on.')
w2kStatusLVolInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolInfo.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolInfo.setDescription('&<caiW2kOs.497>Information about the format (e.g. NTFS), the alternate name (e.g. used in PerfMon) and the label of the logical volume. The alternate name may be empty. The single values are delimited by a pipe sign.')
w2kStatusLVolAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolAutoWatcherName.setDescription('&<caiW2kOs.498>Name of the auto discovery watcher, which created this watcher.')
w2kStatusLVolAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusLVolAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusLVolAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolAggStatus.setDescription("&<caiW2kOs.501>The current status of the logical volume as a 'worst case' aggregate of all its statuses.")
w2kStatusLVolSizeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeTotal.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeTotal.setDescription('&<caiW2kOs.502>The total size of the logical volume (in megabytes).')
w2kStatusLVolSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeValue.setDescription('&<caiW2kOs.503>The current value of the used logical volume size (in megabytes).')
w2kStatusLVolSizeWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeWarnValue.setDescription('&<caiW2kOs.504>The actual warning threshold in used megabytes derived from the configured warning threshold.')
w2kStatusLVolSizeCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeCritValue.setDescription('&<caiW2kOs.505>The actual critical threshold in used megabytes derived from the configured critical threshold.')
w2kStatusLVolSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeWarn.setDescription("&<caiW2kOs.138>Warning threshold in megabytes, either for the free (by appending a 'F') or for the used logical volume size. The used size can also be defined as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 0 and smaller (in case of 'free' greater) than the critical threshold.")
w2kStatusLVolSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeCrit.setDescription("&<caiW2kOs.139>Critical threshold in megabytes, either for the free (by appending a 'F') or for the used logical volume size. The used size can also be defined as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 1 and greater (in case of 'free' smaller) than the warning threshold.")
w2kStatusLVolSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeMonitor.setDescription('&<caiW2kOs.140>Flag indicating whether the used logical volume size should be monitored and if so, which threshold should be compared with.')
w2kStatusLVolSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeStatus.setDescription("&<caiW2kOs.509>The current status of the used logical volume size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusLVolSizeDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDValue.setDescription('&<caiW2kOs.510>The current value of the delta in used logical volume size monitored in the last polling interval (in megabytes). In case of shrinkage this is a negative number.')
w2kStatusLVolSizeDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeDWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDWarnValue.setDescription('&<caiW2kOs.511>The actual warning threshold in megabytes derived from the configured warning threshold.')
w2kStatusLVolSizeDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeDCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDCritValue.setDescription('&<caiW2kOs.512>The actual critical threshold in megabytes derived from the configured critical threshold.')
w2kStatusLVolSizeDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDWarn.setDescription("&<caiW2kOs.141>Warning threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in used logical volume size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in megabytes or as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 0 and smaller than the critical threshold.")
w2kStatusLVolSizeDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDCrit.setDescription("&<caiW2kOs.142>Critical threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in used logical volume size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in megabytes or as a percentage value of the total logical volume size (by appending a '%'). Valid values are greater than 1 and greater than the warning threshold.")
w2kStatusLVolSizeDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDMonitor.setDescription('&<caiW2kOs.143>Flag indicating whether the delta in used logical volume size should be monitored and if so, which threshold should be compared with.')
w2kStatusLVolSizeDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolSizeDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolSizeDStatus.setDescription("&<caiW2kOs.516>The current status of delta in used logical volume size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusLVolTPutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolTPutValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolTPutValue.setDescription('&<caiW2kOs.517>The current value of the throughput rate (kilobytes per second).')
w2kStatusLVolTPutWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolTPutWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolTPutWarn.setDescription('&<caiW2kOs.144>Warning threshold for the throughput rate (kilobytes per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusLVolTPutCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolTPutCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolTPutCrit.setDescription('&<caiW2kOs.145>Critical threshold for the throughput rate (kilobytes per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusLVolTPutMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolTPutMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolTPutMonitor.setDescription('&<caiW2kOs.146>Flag indicating whether the throughput rate should be monitored and if so, which threshold should be compared with.')
w2kStatusLVolTPutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolTPutStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolTPutStatus.setDescription("&<caiW2kOs.521>The current status of the throughput rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusLVolFragValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolFragValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolFragValue.setDescription('&<caiW2kOs.522>The current value of the file fragmentation (as percentage value of 100).')
w2kStatusLVolFragWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolFragWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolFragWarn.setDescription('&<caiW2kOs.147>Warning threshold for the file fragmentation (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kStatusLVolFragCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolFragCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolFragCrit.setDescription('&<caiW2kOs.148>Critical threshold for the file fragmentation (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kStatusLVolFragMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolFragMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolFragMonitor.setDescription('&<caiW2kOs.149>Flag indicating whether the file fragmentation should be monitored and if so, which threshold should be compared with.')
w2kStatusLVolFragStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolFragStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolFragStatus.setDescription("&<caiW2kOs.526>The current status of the file fragmentation as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusLVolLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolLossAction.setDescription('&<caiW2kOs.150>Flag defining the severity if the loss of the logical volume is detected or whether to remove this watcher in that case.')
w2kStatusLVolLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolLossStatus.setDescription("&<caiW2kOs.528>The current status of the logical volume's loss as determined by the loss action.")
w2kStatusLVolCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusLVolCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusLVolButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusLVolButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusLVolButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusMntCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntCount.setDescription('&<caiW2kOs.531>The number of entries in the w2kStatusMntTable.')
w2kStatusMntTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2), )
if mibBuilder.loadTexts: w2kStatusMntTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntTable.setDescription('&<caiW2kOs.532>A table containing information about all monitored mounts.')
w2kStatusMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusMntName"))
if mibBuilder.loadTexts: w2kStatusMntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusMntName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntName.setDescription('&<caiW2kOs.534>Name of the watcher, monitoring a mount with this name. Important: This name is case insensitive.')
w2kStatusMntDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMntDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusMntAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntAutoWatcherName.setDescription('&<caiW2kOs.498>Name of the auto discovery watcher, which created this watcher.')
w2kStatusMntAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusMntAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMntAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusMntAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntAggStatus.setDescription("&<caiW2kOs.539>The current status of the mount as a 'worst case' aggregate of all its statuses.")
w2kStatusMntRelToValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntRelToValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntRelToValue.setDescription('&<caiW2kOs.540>The name of the current logical volume, which this mount is mounting.')
w2kStatusMntRelToRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntRelToRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntRelToRef.setDescription("&<caiW2kOs.541>The reference name, which is the name of the logical volume, mounted by this mount when this watcher was created or when the last 'reset-relTo' has been made.")
w2kStatusMntRelToMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMntRelToMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntRelToMonitor.setDescription('&<caiW2kOs.179>Flag indicating whether a change of the logical volume, mounted by this mount, should be monitored and if so, the level of alert to raise. Note: A change will not occur if the related logical volume is lossed. In that case the mount itself becomes lossed.')
w2kStatusMntRelToStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntRelToStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntRelToStatus.setDescription("&<caiW2kOs.543>The current status of the mount's relation. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusMntLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMntLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntLossAction.setDescription('&<caiW2kOs.180>Flag defining the severity if the loss of the mount is detected or whether to remove this watcher in that case.')
w2kStatusMntLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntLossStatus.setDescription("&<caiW2kOs.545>The current status of the mount's loss as determined by the loss action.")
w2kStatusMntCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusMntCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusMntButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("remove", 2), ("reset-relTo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusMntButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusMntButton.setDescription("&<caiW2kOs.547>This attribute is used to remove this watcher or to reset the 'related to' reference to the current value of the mount.")
w2kStatusDfsCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsCount.setDescription('&<caiW2kOs.548>The number of entries in the w2kStatusDfsTable.')
w2kStatusDfsTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2), )
if mibBuilder.loadTexts: w2kStatusDfsTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsTable.setDescription('&<caiW2kOs.549>A table containing information about all monitored distributed file system links.')
w2kStatusDfsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusDfsName"))
if mibBuilder.loadTexts: w2kStatusDfsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusDfsName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsName.setDescription("&<caiW2kOs.551>Name of the watcher, monitoring a distributed file system link with this name. The name consists of the Dfs root name followed by the Dfs link name. These two names are concatenated by a back-slash. The single Dfs root name (without '\\DfsLinkName') can also be used as watcher name, to be able to monitor all Dfs links of a Dfs root. In that case no loss action will be triggered if no Dfs link exists. Important: This name is case insensitive.")
w2kStatusDfsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusDfsIds = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsIds.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsIds.setDescription('&<caiW2kOs.553>A pipe sign separated list of those replicas of the distributed file system link, that are unavailable.')
w2kStatusDfsAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsAutoWatcherName.setDescription('&<caiW2kOs.498>Name of the auto discovery watcher, which created this watcher.')
w2kStatusDfsAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusDfsAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusDfsAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsAggStatus.setDescription("&<caiW2kOs.557>The current status of the distributed file system link as a 'worst case' aggregate of all its statuses.")
w2kStatusDfsReplicaTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsReplicaTotal.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsReplicaTotal.setDescription('&<caiW2kOs.558>The total number of replicas of the distributed file system link.')
w2kStatusDfsReplicaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsReplicaValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsReplicaValue.setDescription("&<caiW2kOs.559>The current value of the unavailable replicas number. Replicas set to 'offline' are also counted as being unavailable.")
w2kStatusDfsReplicaWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsReplicaWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsReplicaWarn.setDescription('&<caiW2kOs.198>Warning threshold for the number of unavailable replicas of the distributed file system link. Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusDfsReplicaCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsReplicaCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsReplicaCrit.setDescription('&<caiW2kOs.199>Critical threshold for the number of unavailable replicas of the distributed file system link. Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusDfsReplicaMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsReplicaMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsReplicaMonitor.setDescription('&<caiW2kOs.200>Flag indicating whether the unavailable replicas should be monitored and if so, which threshold should be compared with.')
w2kStatusDfsReplicaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsReplicaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsReplicaStatus.setDescription("&<caiW2kOs.563>The current status of the unavailable replicas number as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusDfsLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsLossAction.setDescription('&<caiW2kOs.201>Flag defining the severity if the loss of the distributed file system link is detected or whether to remove this watcher in that case.')
w2kStatusDfsLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsLossStatus.setDescription("&<caiW2kOs.565>The current status of the distributed file system link's loss as determined by the loss action.")
w2kStatusDfsCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDfsCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusDfsButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDfsButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDfsButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusQuotCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotCount.setDescription('&<caiW2kOs.568>The number of entries in the w2kStatusQuotTable.')
w2kStatusQuotTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2), )
if mibBuilder.loadTexts: w2kStatusQuotTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotTable.setDescription('&<caiW2kOs.569>A table containing information about all monitored quotas.')
w2kStatusQuotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusQuotLVolName"), (0, "CA-W2KOS-MIB", "w2kStatusQuotUserName"))
if mibBuilder.loadTexts: w2kStatusQuotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusQuotLVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotLVolName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotLVolName.setDescription('&<caiW2kOs.571>Logical volume name of the watcher, monitoring a quota with this logical volume name. The name specifies the logical volume on which this quota exists. Important: This name is case insensitive.')
w2kStatusQuotUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotUserName.setDescription("&<caiW2kOs.572>User name of the watcher, monitoring a quota with this user name. The name specifies the user for whom this quota exists and is in the form 'domainName\\userName' or 'userName@domainName'. Important: This name is case insensitive.")
w2kStatusQuotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusQuotAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusQuotAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusQuotAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotAggStatus.setDescription("&<caiW2kOs.576>The current status of the quota as a 'worst case' aggregate of all its statuses.")
w2kStatusQuotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotExist.setDescription('&<caiW2kOs.221>Flag indicating whether to raise an alert if a quota is existent or if it is not-existent.')
w2kStatusQuotExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotExistMonitor.setDescription('&<caiW2kOs.222>Flag indicating whether the existence of the quota should be monitored and if so, the level of alert to raise.')
w2kStatusQuotExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotExistStatus.setDescription('&<caiW2kOs.579>The current status of the quota existence.')
w2kStatusQuotSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotSizeValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotSizeValue.setDescription('&<caiW2kOs.580>The current value of the used quota size (in kilobytes).')
w2kStatusQuotSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotSizeWarn.setDescription('&<caiW2kOs.581>Warning threshold for the used quota size (in kilobytes). Initial this equals the warning level of the Windows 2000 quota management. Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusQuotSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotSizeCrit.setDescription('&<caiW2kOs.582>Critical threshold for the used quota size (in kilobytes). Initial this equals the quota limit of the Windows 2000 quota management. Valid values are greater than 1 and graeter warning threshold.')
w2kStatusQuotSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotSizeMonitor.setDescription('&<caiW2kOs.225>Flag indicating whether the used quota size should be monitored and if so, which threshold should be compared with.')
w2kStatusQuotSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotSizeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotSizeStatus.setDescription("&<caiW2kOs.584>The current status of the used quota size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusQuotCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusQuotCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusQuotButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusQuotButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusQuotButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusDirCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirCount.setDescription('&<caiW2kOs.587>The number of entries in the w2kStatusDirTable.')
w2kStatusDirTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2), )
if mibBuilder.loadTexts: w2kStatusDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirTable.setDescription('&<caiW2kOs.588>A table containing information about all monitored directories.')
w2kStatusDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusDirName"))
if mibBuilder.loadTexts: w2kStatusDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirName.setDescription('&<caiW2kOs.590>Name of the watcher, monitoring a directory with this name. Important: This name is case insensitive.')
w2kStatusDirDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusDirAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusDirAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusDirAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirAggStatus.setDescription("&<caiW2kOs.594>The current status of the directory as a 'worst case' aggregate of all its statuses.")
w2kStatusDirExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirExist.setDescription('&<caiW2kOs.232>Flag indicating whether to raise an alert if a directory is existent or if it is not-existent.')
w2kStatusDirExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirExistMonitor.setDescription('&<caiW2kOs.233>Flag indicating whether the existence of the directory should be monitored and if so, the level of alert to raise.')
w2kStatusDirExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirExistStatus.setDescription('&<caiW2kOs.597>The current status of the directory existence.')
w2kStatusDirTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirTimeValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirTimeValue.setDescription("&<caiW2kOs.598>The current value of the latest timestamp. If the directory does not exist, the timestamp value is set to '1970-01-01 01:00:00'.")
w2kStatusDirTimeRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirTimeRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirTimeRef.setDescription("&<caiW2kOs.599>The reference timestamp, which is the timestamp of the directory when this watcher was created or when the last 'reset-time' has been made. If the directory does not exist, the reference timestamp is set to '1970-01-01 01:00:00'.")
w2kStatusDirTimeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirTimeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirTimeMonitor.setDescription('&<caiW2kOs.234>Flag indicating whether the latest timestamp (of all files and all subfolders, including the given folder) should be monitored and if so, the level of alert to raise.')
w2kStatusDirTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirTimeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirTimeStatus.setDescription("&<caiW2kOs.601>The current status of the latest timestamp. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusDirSizeRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeRef.setDescription('&<caiW2kOs.602>The total size of the directory at the time when this watcher was created (in kilobytes).')
w2kStatusDirSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeValue.setDescription('&<caiW2kOs.603>The current value of the total directory size (in kilobytes).')
w2kStatusDirSizeWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeWarnValue.setDescription('&<caiW2kOs.604>The actual warning threshold in kilobytes derived from the configured warning threshold.')
w2kStatusDirSizeCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeCritValue.setDescription('&<caiW2kOs.605>The actual critical threshold in kilobytes derived from the configured critical threshold.')
w2kStatusDirSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeWarn.setDescription("&<caiW2kOs.235>Warning threshold for the total directory size (all files in the given folder and in all subfolders), either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 0 and smaller than the critical threshold.")
w2kStatusDirSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeCrit.setDescription("&<caiW2kOs.236>Critical threshold for the total directory size (all files in the given folder and in all subfolders), either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 1 and greater than the warning threshold.")
w2kStatusDirSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeMonitor.setDescription('&<caiW2kOs.237>Flag indicating whether the total directory size should be monitored and if so, which threshold should be compared with.')
w2kStatusDirSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeStatus.setDescription("&<caiW2kOs.609>The current status of the total directory size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusDirSizeDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDValue.setDescription('&<caiW2kOs.610>The current value of the delta in total directory size monitored in the last polling interval (in kilobytes). In case of shrinkage this is a negative number.')
w2kStatusDirSizeDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeDWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDWarnValue.setDescription('&<caiW2kOs.604>The actual warning threshold in kilobytes derived from the configured warning threshold.')
w2kStatusDirSizeDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeDCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDCritValue.setDescription('&<caiW2kOs.605>The actual critical threshold in kilobytes derived from the configured critical threshold.')
w2kStatusDirSizeDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDWarn.setDescription("&<caiW2kOs.238>Warning threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in total directory size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the total directory size (by appending a '%'). Valid values are greater than 0 and smaller than the critical threshold.")
w2kStatusDirSizeDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDCrit.setDescription("&<caiW2kOs.239>Critical threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in total directory size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the total directory size (by appending a '%'). Valid values are greater than 1 and greater than the warning threshold.")
w2kStatusDirSizeDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDMonitor.setDescription('&<caiW2kOs.240>Flag indicating whether the delta in total directory size should be monitored and if so, which threshold should be compared with.')
w2kStatusDirSizeDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirSizeDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirSizeDStatus.setDescription("&<caiW2kOs.616>The current status of the delta in total directory size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusDirEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirEntryValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirEntryValue.setDescription('&<caiW2kOs.617>The current value of the number of files.')
w2kStatusDirEntryWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirEntryWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirEntryWarn.setDescription('&<caiW2kOs.241>Warning threshold for the number of entries (sum of files and folders in the given folder and in all subfolders). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusDirEntryCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirEntryCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirEntryCrit.setDescription('&<caiW2kOs.242>Critical threshold for the number of entries (sum of files and folders in the given folder and in all subfolders). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusDirEntryMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirEntryMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirEntryMonitor.setDescription('&<caiW2kOs.243>Flag indicating whether the number of entries should be monitored and if so, which threshold should be compared with.')
w2kStatusDirEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirEntryStatus.setDescription("&<caiW2kOs.621>The current status of the number of entries as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusDirCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusDirCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusDirButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 8, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("remove", 2), ("reset-time", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusDirButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusDirButton.setDescription('&<caiW2kOs.623>This attribute is used to remove this watcher or to reset the time reference to the current value.')
w2kStatusFileCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileCount.setDescription('&<caiW2kOs.624>The number of entries in the w2kStatusFileTable.')
w2kStatusFileTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2), )
if mibBuilder.loadTexts: w2kStatusFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileTable.setDescription('&<caiW2kOs.625>A table containing information about all monitored files.')
w2kStatusFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusFileName"))
if mibBuilder.loadTexts: w2kStatusFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileName.setDescription('&<caiW2kOs.627>Name of the watcher, monitoring a file with this name. Important: This name is case insensitive.')
w2kStatusFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusFileAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusFileAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusFileAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileAggStatus.setDescription("&<caiW2kOs.631>The current status of the file as a 'worst case' aggregate of all its statuses.")
w2kStatusFileExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileExist.setDescription('&<caiW2kOs.250>Flag indicating whether to raise an alert if a file is existent or if it is not-existent.')
w2kStatusFileExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileExistMonitor.setDescription('&<caiW2kOs.251>Flag indicating whether the existence of the file should be monitored and if so, the level of alert to raise.')
w2kStatusFileExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileExistStatus.setDescription('&<caiW2kOs.634>The current status of the file existence.')
w2kStatusFileTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileTimeValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileTimeValue.setDescription("&<caiW2kOs.635>The current value of the latest timestamp. If the file does not exist, the timestamp value is set to '1970-01-01 01:00:00'.")
w2kStatusFileTimeRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileTimeRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileTimeRef.setDescription("&<caiW2kOs.636>The reference timestamp, which is the timestamp of the file when this watcher was created or when the last 'reset-time' has been made. If the file does not exist, the reference timestamp is set to '1970-01-01 01:00:00'.")
w2kStatusFileTimeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileTimeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileTimeMonitor.setDescription('&<caiW2kOs.252>Flag indicating whether the timestamp of the file should be monitored and if so, the level of alert to raise.')
w2kStatusFileTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileTimeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileTimeStatus.setDescription("&<caiW2kOs.601>The current status of the latest timestamp. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusFileSizeRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeRef.setDescription('&<caiW2kOs.639>The size of the file at the time when this watcher was created (in kilobytes).')
w2kStatusFileSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeValue.setDescription('&<caiW2kOs.640>The current value of the file size (in kilobytes).')
w2kStatusFileSizeWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeWarnValue.setDescription('&<caiW2kOs.604>The actual warning threshold in kilobytes derived from the configured warning threshold.')
w2kStatusFileSizeCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeCritValue.setDescription('&<caiW2kOs.605>The actual critical threshold in kilobytes derived from the configured critical threshold.')
w2kStatusFileSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeWarn.setDescription("&<caiW2kOs.253>Warning threshold for the file size, either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 0 and smaller than the critical threshold.")
w2kStatusFileSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeCrit.setDescription("&<caiW2kOs.254>Critical threshold for the file size, either in kilobytes or as a percentage value of the original size (by appending a '%'). The original size is the size when this watcher was created. Valid values are greater than 1 and greater than the warning threshold.")
w2kStatusFileSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeMonitor.setDescription('&<caiW2kOs.255>Flag indicating whether the file size should be monitored and if so, which threshold should be compared with.')
w2kStatusFileSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeStatus.setDescription("&<caiW2kOs.646>The current status of the file size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusFileSizeDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDValue.setDescription('&<caiW2kOs.647>The current value of the delta in file size monitored in the last polling interval (in kilobytes). In case of shrinkage this is a negative number.')
w2kStatusFileSizeDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeDWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDWarnValue.setDescription('&<caiW2kOs.604>The actual warning threshold in kilobytes derived from the configured warning threshold.')
w2kStatusFileSizeDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeDCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDCritValue.setDescription('&<caiW2kOs.605>The actual critical threshold in kilobytes derived from the configured critical threshold.')
w2kStatusFileSizeDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDWarn.setDescription("&<caiW2kOs.256>Warning threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in file size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the file size (by appending a '%'). Valid values are greater than 0 and smaller than the critical threshold.")
w2kStatusFileSizeDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDCrit.setDescription("&<caiW2kOs.257>Critical threshold, either for the growth (by appending a '+') or for the shrinkage (by appending a '-') or for the absolute delta in file size monitored in one poll interval. Growth, shrinkage and absolute delta can be given in kilobytes or as a percentage value of the file size (by appending a '%'). Valid values are greater than 1 and greater than the warning threshold.")
w2kStatusFileSizeDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDMonitor.setDescription('&<caiW2kOs.258>Flag indicating whether the delta in file size should be monitored and if so, which threshold should be compared with.')
w2kStatusFileSizeDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileSizeDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileSizeDStatus.setDescription("&<caiW2kOs.653>The current status of the delta in file size as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusFileCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusFileCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusFileButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 9, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("remove", 2), ("reset-time", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusFileButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusFileButton.setDescription('&<caiW2kOs.623>This attribute is used to remove this watcher or to reset the time reference to the current value.')
w2kStatusProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCount.setDescription('&<caiW2kOs.656>The number of entries in the w2kStatusProcTable.')
w2kStatusProcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2), )
if mibBuilder.loadTexts: w2kStatusProcTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcTable.setDescription('&<caiW2kOs.657>A table containing information about all monitored processes.')
w2kStatusProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusProcProcName"), (0, "CA-W2KOS-MIB", "w2kStatusProcPathName"), (0, "CA-W2KOS-MIB", "w2kStatusProcUserName"))
if mibBuilder.loadTexts: w2kStatusProcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusProcProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcProcName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcProcName.setDescription("&<caiW2kOs.659>Process name of the watcher, monitoring a process with this process name. An asterisk '*' can be used as process name or can be prepended/appended to it, in order to widen the scope of processes this watcher monitors. Important: This name is case insensitive.")
w2kStatusProcPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcPathName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcPathName.setDescription("&<caiW2kOs.660>Path name of the watcher, monitoring a process with this path name. An asterisk '*' can be used as path name or can be prepended/appended to it, in order to widen the scope of processes this watcher monitors. Important: This name is case insensitive.")
w2kStatusProcUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcUserName.setDescription("&<caiW2kOs.661>User name of the watcher, monitoring a process started by this user. An asterisk '*' can be used as user name or can be prepended/appended to it, in order to widen the scope of processes this watcher monitors. Important: This name is case insensitive.")
w2kStatusProcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusProcIds = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcIds.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcIds.setDescription('&<caiW2kOs.663>A pipe sign separated list of the ids of those processes, that (b)reach any threshold (except instance metric).')
w2kStatusProcAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusProcAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusProcAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcAggStatus.setDescription("&<caiW2kOs.666>The current status of the process as a 'worst case' aggregate of all its statuses.")
w2kStatusProcInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcInstValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcInstValue.setDescription('&<caiW2kOs.667>The current value of the process instances number.')
w2kStatusProcInstMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 10), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcInstMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcInstMin.setDescription('&<caiW2kOs.267>Minimum threshold for the number of process instances. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kStatusProcInstMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 11), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcInstMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcInstMax.setDescription('&<caiW2kOs.268>Maximum threshold for the number of process instances. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kStatusProcInstMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcInstMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcInstMonitor.setDescription('&<caiW2kOs.269>Flag indicating whether the number of process instances should be monitored and if so, the level of alert to raise.')
w2kStatusProcInstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcInstStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcInstStatus.setDescription("&<caiW2kOs.671>The current status of the process instances number as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusProcChildMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcChildMinValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcChildMinValue.setDescription('&<caiW2kOs.672>The current minimum value of the number of childprocesses of the process. If there is more than one process instance, this value is the minimum of all instances.')
w2kStatusProcChildMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcChildMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcChildMaxValue.setDescription('&<caiW2kOs.673>The current maximum value of the number of childprocesses of the process. If there is more than one process instance, this value is the maximum of all instances.')
w2kStatusProcChildMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 16), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcChildMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcChildMin.setDescription('&<caiW2kOs.270>Minimum threshold for the number of childprocesses of the process. If there is more than one process instance, the minimum of all instances is compared with this value. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kStatusProcChildMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 17), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcChildMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcChildMax.setDescription('&<caiW2kOs.271>Maximum threshold for the number of childprocesses of the process. If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kStatusProcChildMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcChildMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcChildMonitor.setDescription("&<caiW2kOs.272>Flag indicating whether the number of childprocesses of the process should be monitored and if so, the level of alert to raise. Note: This metric decreases agent performance much more than any other metric. For this reason the default is 'do-not-monitor'.")
w2kStatusProcChildStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcChildStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcChildStatus.setDescription("&<caiW2kOs.677>The current status of the childprocesses number as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusProcThreadMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcThreadMinValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcThreadMinValue.setDescription('&<caiW2kOs.678>The current minimum value of the number of threads of the process. If there is more than one process instance, this value is the minimum of all instances.')
w2kStatusProcThreadMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcThreadMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcThreadMaxValue.setDescription('&<caiW2kOs.679>The current maximum value of the number of threads of the process. If there is more than one process instance, this value is the maximum of all instances.')
w2kStatusProcThreadMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 22), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcThreadMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcThreadMin.setDescription('&<caiW2kOs.273>Minimum threshold for the number of threads of the process. If there is more than one process instance, the minimum of all instances is compared with this value. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kStatusProcThreadMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 23), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcThreadMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcThreadMax.setDescription('&<caiW2kOs.274>Maximum threshold for the number of threads of the process. If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kStatusProcThreadMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcThreadMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcThreadMonitor.setDescription('&<caiW2kOs.275>Flag indicating whether the number of threads of the process should be monitored and if so, the level of alert to raise.')
w2kStatusProcThreadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcThreadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcThreadStatus.setDescription("&<caiW2kOs.683>The current status of the threads number as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusProcMemoryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcMemoryValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcMemoryValue.setDescription("&<caiW2kOs.684>The current value of the memory usage of the process (sum of 'Working Set Size' and 'Used Page File' in kilobytes), build as the maximum over all process instances.")
w2kStatusProcMemoryWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcMemoryWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcMemoryWarn.setDescription('&<caiW2kOs.276>Warning threshold for the memory usage of the process (in kilobytes). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusProcMemoryCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcMemoryCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcMemoryCrit.setDescription('&<caiW2kOs.277>Critical threshold for the memory usage of the process (in kilobytes). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusProcMemoryMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcMemoryMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcMemoryMonitor.setDescription('&<caiW2kOs.278>Flag indicating whether the memory usage of the process should be monitored and if so, which threshold should be compared with.')
w2kStatusProcMemoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcMemoryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcMemoryStatus.setDescription("&<caiW2kOs.688>The current status of the process memory usage as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusProcCpuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcCpuValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCpuValue.setDescription('&<caiW2kOs.689>The current value of the CPU usage of the process (as percentage value of 100), build as the maximum over all process instances.')
w2kStatusProcCpuWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCpuWarn.setDescription('&<caiW2kOs.279>Warning threshold for the CPU usage of the process (as percentage value of 100). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are 1 to 99 and smaller than the critical threshold.')
w2kStatusProcCpuCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCpuCrit.setDescription('&<caiW2kOs.280>Critical threshold for the CPU usage of the process (as percentage value of 100). If there is more than one process instance, the maximum of all instances is compared with this value. Valid values are 2 to 100 and greater than the warning threshold.')
w2kStatusProcCpuMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcCpuMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCpuMonitor.setDescription('&<caiW2kOs.281>Flag indicating whether the CPU usage of the process should be monitored and if so, which threshold should be compared with.')
w2kStatusProcCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcCpuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCpuStatus.setDescription("&<caiW2kOs.693>The current status of the process CPU usage as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusProcCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusProcCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusProcButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 10, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusProcButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusProcButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusSrvcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcCount.setDescription('&<caiW2kOs.696>The number of entries in the w2kStatusSrvcTable.')
w2kStatusSrvcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2), )
if mibBuilder.loadTexts: w2kStatusSrvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcTable.setDescription('&<caiW2kOs.697>A table containing information about all monitored services.')
w2kStatusSrvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusSrvcName"))
if mibBuilder.loadTexts: w2kStatusSrvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcName.setDescription('&<caiW2kOs.699>Name of the watcher, monitoring a service with this name. Important: This name is case insensitive.')
w2kStatusSrvcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusSrvcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcDescr.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcDescr.setDescription('&<caiW2kOs.701>The description of the service.')
w2kStatusSrvcAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcAutoWatcherName.setDescription('&<caiW2kOs.498>Name of the auto discovery watcher, which created this watcher.')
w2kStatusSrvcAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusSrvcAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusSrvcAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcAggStatus.setDescription("&<caiW2kOs.705>The current status of the service as a 'worst case' aggregate of all its statuses.")
w2kStatusSrvcExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcExist.setDescription('&<caiW2kOs.289>Flag indicating whether to raise an alert if a service is existent or if it is not-existent.')
w2kStatusSrvcExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcExistMonitor.setDescription('&<caiW2kOs.290>Flag indicating whether the existence of the service should be monitored and if so, the level of alert to raise.')
w2kStatusSrvcExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcExistStatus.setDescription('&<caiW2kOs.708>The current status of the service existence.')
w2kStatusSrvcActiveValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("active-running", 2), ("active-pausePending", 3), ("active-stopPending", 4), ("notActive-stopped", 5), ("notActive-paused", 6), ("notActive-continuePending", 7), ("notActive-startPending", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcActiveValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcActiveValue.setDescription('&<caiW2kOs.709>The current value of the service activity.')
w2kStatusSrvcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-be-active", 1), ("should-not-be-active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcActive.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcActive.setDescription('&<caiW2kOs.291>Flag indicating whether to raise an alert if an existent service is active or if it is inactive.')
w2kStatusSrvcActiveMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcActiveMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcActiveMonitor.setDescription('&<caiW2kOs.292>Flag indicating whether the activity of the service should be monitored and if so, the level of alert to raise.')
w2kStatusSrvcActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcActiveStatus.setDescription("&<caiW2kOs.712>The current status of the service activity as determined by the condition. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusSrvcCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSrvcCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusSrvcButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 11, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSrvcButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSrvcButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusJobCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCount.setDescription('&<caiW2kOs.715>The number of entries in the w2kStatusJobTable.')
w2kStatusJobTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2), )
if mibBuilder.loadTexts: w2kStatusJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobTable.setDescription('&<caiW2kOs.716>A table containing information about all monitored jobs.')
w2kStatusJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusJobName"))
if mibBuilder.loadTexts: w2kStatusJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobName.setDescription('&<caiW2kOs.718>Name of the watcher, monitoring a job with this name. Important: This name is case insensitive.')
w2kStatusJobDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusJobAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusJobAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusJobAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobAggStatus.setDescription("&<caiW2kOs.722>The current status of the job as a 'worst case' aggregate of all its statuses.")
w2kStatusJobExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobExist.setDescription('&<caiW2kOs.311>Flag indicating whether to raise an alert if a job is existent or if it is not-existent.')
w2kStatusJobExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobExistMonitor.setDescription('&<caiW2kOs.312>Flag indicating whether the existence of the job should be monitored and if so, the level of alert to raise.')
w2kStatusJobExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobExistStatus.setDescription('&<caiW2kOs.725>The current status of the job existence.')
w2kStatusJobProcessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobProcessValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobProcessValue.setDescription('&<caiW2kOs.726>The current value of the active processes number.')
w2kStatusJobProcessMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 10), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobProcessMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobProcessMin.setDescription('&<caiW2kOs.313>Minimum threshold for the number of active processes associated with the job. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kStatusJobProcessMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 11), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobProcessMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobProcessMax.setDescription('&<caiW2kOs.314>Maximum threshold for the number of active processes associated with the job. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kStatusJobProcessMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobProcessMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobProcessMonitor.setDescription('&<caiW2kOs.315>Flag indicating whether the number of active processes associated with the job should be monitored and if so, the level of alert to raise.')
w2kStatusJobProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobProcessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobProcessStatus.setDescription("&<caiW2kOs.730>The current status of the active processes number as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusJobCpuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobCpuValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCpuValue.setDescription("&<caiW2kOs.731>The current value of the job's CPU usage (as percentage value of 100).")
w2kStatusJobCpuWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCpuWarn.setDescription('&<caiW2kOs.316>Warning threshold for the CPU usage of the job (as percentage value of 100). Valid values are 1 to 99 and smaller than the critical threshold.')
w2kStatusJobCpuCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCpuCrit.setDescription('&<caiW2kOs.317>Critical threshold for the CPU usage of the job (as percentage value of 100). Valid values are 2 to 100 and greater than the warning threshold.')
w2kStatusJobCpuMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobCpuMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCpuMonitor.setDescription('&<caiW2kOs.318>Flag indicating whether the CPU usage of the job should be monitored and if so, which threshold should be compared with.')
w2kStatusJobCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobCpuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCpuStatus.setDescription("&<caiW2kOs.735>The current status of the job's CPU usage as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusJobCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusJobCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusJobButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 12, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusJobButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusJobButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusSessCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCount.setDescription('&<caiW2kOs.738>The number of entries in the w2kStatusSessTable.')
w2kStatusSessTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2), )
if mibBuilder.loadTexts: w2kStatusSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessTable.setDescription('&<caiW2kOs.739>A table containing information about all monitored sessions.')
w2kStatusSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusSessClientName"), (0, "CA-W2KOS-MIB", "w2kStatusSessUserName"))
if mibBuilder.loadTexts: w2kStatusSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusSessClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessClientName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessClientName.setDescription("&<caiW2kOs.741>Client name of the watcher, monitoring a session with this client name. The client name is the name of the host, from where this session was initiated. An asterisk '*' can be used as client name or can be prepended/appended to it, in order to widen the scope of sessions this watcher monitors. Important: This name is case insensitive.")
w2kStatusSessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessUserName.setDescription("&<caiW2kOs.742>User name of the watcher, monitoring a session with this user name. The user name specifies the user, who logged in and is in the form 'domainName\\userName'. An asterisk '*' can be used as user name or can be prepended/appended to it, in order to widen the scope of sessions this watcher monitors. Important: This name is case insensitive.")
w2kStatusSessDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusSessIds = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessIds.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessIds.setDescription('&<caiW2kOs.744>A pipe sign separated list of the ids of those sessions, that (b)reach any threshold (except instance metric).')
w2kStatusSessAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusSessAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusSessAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessAggStatus.setDescription("&<caiW2kOs.747>The current status of the session as a 'worst case' aggregate of all its statuses.")
w2kStatusSessInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessInstValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessInstValue.setDescription('&<caiW2kOs.748>The current value of the session instances number.')
w2kStatusSessInstMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 9), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessInstMin.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessInstMin.setDescription('&<caiW2kOs.326>Minimum threshold for the number of session instances. Valid values are greater than or equal to -1 and smaller than or equal to the maximum threshold. Setting to -1 disables the monitoring of the minimum.')
w2kStatusSessInstMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 10), Integer32().clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessInstMax.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessInstMax.setDescription('&<caiW2kOs.327>Maximum threshold for the number of session instances. Valid values are greater than or equal to -1 and greater than or equal to the minimum threshold. Setting to -1 disables the monitoring of the maximum.')
w2kStatusSessInstMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessInstMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessInstMonitor.setDescription('&<caiW2kOs.328>Flag indicating whether the number of session instances should be monitored and if so, the level of alert to raise.')
w2kStatusSessInstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessInstStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessInstStatus.setDescription("&<caiW2kOs.752>The current status of the session instances number as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusSessMemoryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessMemoryValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessMemoryValue.setDescription("&<caiW2kOs.753>The current value of the session's memory usage (sum of 'Working Set Size' and 'Used Page File' in kilobytes), build as the maximum over all session instances.")
w2kStatusSessMemoryWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessMemoryWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessMemoryWarn.setDescription('&<caiW2kOs.329>Warning threshold for the memory usage of the session (in kilobytes). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusSessMemoryCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessMemoryCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessMemoryCrit.setDescription('&<caiW2kOs.330>Critical threshold for the memory usage of the session (in kilobytes). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusSessMemoryMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessMemoryMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessMemoryMonitor.setDescription('&<caiW2kOs.331>Flag indicating whether the memory usage of the session should be monitored and if so, which threshold should be compared with.')
w2kStatusSessMemoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessMemoryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessMemoryStatus.setDescription("&<caiW2kOs.757>The current status of the session's memory usage as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusSessCpuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessCpuValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCpuValue.setDescription("&<caiW2kOs.758>The current value of the session's CPU usage (as percentage value of 100), build as the maximum over all session instances.")
w2kStatusSessCpuWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessCpuWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCpuWarn.setDescription('&<caiW2kOs.332>Warning threshold for the CPU usage of the session (as percentage value of 100). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are 1 to 99 and smaller than the critical threshold.')
w2kStatusSessCpuCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessCpuCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCpuCrit.setDescription('&<caiW2kOs.333>Critical threshold for the CPU usage of the session (as percentage value of 100). If there is more than one session instance, the maximum of all instances is compared with this value. Valid values are 2 to 100 and greater than the warning threshold.')
w2kStatusSessCpuMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessCpuMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCpuMonitor.setDescription('&<caiW2kOs.334>Flag indicating whether the CPU usage of the session should be monitored and if so, which threshold should be compared with.')
w2kStatusSessCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessCpuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCpuStatus.setDescription("&<caiW2kOs.762>The current status of the session's CPU usage as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusSessCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusSessCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusSessButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 13, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusSessButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusSessButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnCount.setDescription('&<caiW2kOs.765>The number of entries in the w2kStatusPrnTable.')
w2kStatusPrnTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2), )
if mibBuilder.loadTexts: w2kStatusPrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnTable.setDescription('&<caiW2kOs.766>A table containing information about all monitored printers.')
w2kStatusPrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusPrnName"))
if mibBuilder.loadTexts: w2kStatusPrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusPrnName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnName.setDescription('&<caiW2kOs.768>Name of the watcher, monitoring a local printer with this name. Important: This name is case insensitive.')
w2kStatusPrnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusPrnAutoWatcherName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnAutoWatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnAutoWatcherName.setDescription('&<caiW2kOs.498>Name of the auto discovery watcher, which created this watcher.')
w2kStatusPrnAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusPrnAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusPrnAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnAggStatus.setDescription("&<caiW2kOs.773>The current status of the printer as a 'worst case' aggregate of all its statuses.")
w2kStatusPrnEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown-no-print-jobs", 1), ("printing", 2), ("paper-error", 3), ("toner-error", 4), ("manual", 5), ("offline", 6), ("paused", 7), ("software-error", 8), ("general-error", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnEventDescr.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnEventDescr.setDescription('&<caiW2kOs.774>The description of the last printer event. Note: Printer events can only be determined if there is a printing job in the printers queue.')
w2kStatusPrnEventMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnEventMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnEventMonitor.setDescription('&<caiW2kOs.342>Flag indicating whether the occurence of printer events should be monitored and if so, the level of alert to raise.')
w2kStatusPrnEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnEventStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnEventStatus.setDescription("&<caiW2kOs.776>The current status of the printer event monitoring. Note: Printer events can only be determined if there is a printing job in the printers queue. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusPrnQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnQueueValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnQueueValue.setDescription("&<caiW2kOs.777>The current value of jobs in the printer's queue.")
w2kStatusPrnQueueWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnQueueWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnQueueWarn.setDescription("&<caiW2kOs.343>Warning threshold for the number of jobs in the printer's queue. Valid values are greater than 0 and smaller than the critical threshold.")
w2kStatusPrnQueueCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnQueueCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnQueueCrit.setDescription("&<caiW2kOs.344>Critical threshold for the number of jobs in the printer's queue. Valid values are greater than 1 and greater than the warning threshold.")
w2kStatusPrnQueueMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnQueueMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnQueueMonitor.setDescription("&<caiW2kOs.345>Flag indicating whether the printer's job queue should be monitored and if so, which threshold should be compared with.")
w2kStatusPrnQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnQueueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnQueueStatus.setDescription("&<caiW2kOs.781>The current status of the printer queue as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusPrnLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnLossAction.setDescription('&<caiW2kOs.346>Flag defining the severity if the loss of the printer is detected or whether to remove this watcher in that case.')
w2kStatusPrnLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnLossStatus.setDescription("&<caiW2kOs.783>The current status of the printer's loss as determined by the loss action.")
w2kStatusPrnCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusPrnCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusPrnButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 14, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusPrnButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusPrnButton.setDescription('&<caiW2kOs.530>This attribute is used to remove this watcher.')
w2kStatusNetTotalAggLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusNetTotalAggLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusNetTotalAggStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalAggStatus.setDescription("&<caiW2kOs.788>The current status of the network interfaces total as a 'worst case' aggregate of all total statuses.")
w2kStatusNetTotalInPktValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalInPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInPktValue.setDescription('&<caiW2kOs.789>The current total value of the received packets rate (packets per second). The total value is the sum of all network interfaces (except the loopback interface).')
w2kStatusNetTotalInPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 5), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalInPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInPktWarn.setDescription('&<caiW2kOs.790>Warning threshold for the total rate of received packets over TCP/IP connections (packets per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetTotalInPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 6), Integer32().clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalInPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInPktCrit.setDescription('&<caiW2kOs.791>Critical threshold for the total rate of received packets over TCP/IP connections (packets per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetTotalInPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalInPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInPktMonitor.setDescription('&<caiW2kOs.792>Flag indicating whether the total rate of received packets should be monitored and if so, which threshold should be compared with.')
w2kStatusNetTotalInPktStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalInPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInPktStatus.setDescription("&<caiW2kOs.793>The current status of the total received packets rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetTotalOutPktValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktValue.setDescription('&<caiW2kOs.794>The current total value of the sent packets rate (packets per second). The total value is the sum of all network interfaces (except the loopback interface).')
w2kStatusNetTotalOutPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 10), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktWarn.setDescription('&<caiW2kOs.795>Warning threshold for the total rate of sent packets over TCP/IP connections (packets per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetTotalOutPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 11), Integer32().clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktCrit.setDescription('&<caiW2kOs.796>Critical threshold for the total rate of sent packets over TCP/IP connections (packets per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetTotalOutPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktMonitor.setDescription('&<caiW2kOs.797>Flag indicating whether the total rate of sent packets should be monitored and if so, which threshold should be compared with.')
w2kStatusNetTotalOutPktStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutPktStatus.setDescription("&<caiW2kOs.798>The current status of the total sent packets rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetTotalInErrDValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDValue.setDescription('&<caiW2kOs.799>The current total value of the received errors rate (errors per poll interval). The total value is the sum of all network interfaces (except the loopback interface).')
w2kStatusNetTotalInErrDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 15), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDWarn.setDescription('&<caiW2kOs.800>Warning threshold for the total rate of received errors over TCP/IP connections (errors per poll interval). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetTotalInErrDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 16), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDCrit.setDescription('&<caiW2kOs.801>Critical threshold for the total rate of received errors over TCP/IP connections (errors per poll interval). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetTotalInErrDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDMonitor.setDescription('&<caiW2kOs.802>Flag indicating whether the total rate of received errors should be monitored and if so, which threshold should be compared with.')
w2kStatusNetTotalInErrDStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalInErrDStatus.setDescription("&<caiW2kOs.803>The current status of the total received errors rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetTotalOutErrDValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDValue.setDescription('&<caiW2kOs.804>The current total value of the sent errors rate (errors per poll interval). The total value is the sum of all network interfaces (except the loopback interface).')
w2kStatusNetTotalOutErrDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 20), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDWarn.setDescription('&<caiW2kOs.805>Warning threshold for the total rate of sent errors over TCP/IP connections (errors per poll interval). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetTotalOutErrDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 21), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDCrit.setDescription('&<caiW2kOs.806>Critical threshold for the total rate of sent errors over TCP/IP connections (errors per poll interval). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetTotalOutErrDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDMonitor.setDescription('&<caiW2kOs.807>Flag indicating whether the total rate of sent errors should be monitored and if so, which threshold should be compared with.')
w2kStatusNetTotalOutErrDStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalOutErrDStatus.setDescription("&<caiW2kOs.808>The current status of the total sent errors rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetTotalCallBackRef = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetTotalCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTotalCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusNetCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetCount.setDescription('&<caiW2kOs.810>The number of entries in the w2kStatusNetTable.')
w2kStatusNetTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26), )
if mibBuilder.loadTexts: w2kStatusNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetTable.setDescription('&<caiW2kOs.811>A table containing information about all monitored network interfaces.')
w2kStatusNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusNetName"))
if mibBuilder.loadTexts: w2kStatusNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetName.setDescription('&<caiW2kOs.813>Name of the watcher, monitoring a network interface with this name.')
w2kStatusNetAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusNetAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusNetAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetAggStatus.setDescription("&<caiW2kOs.816>The current status of the network interface as a 'worst case' aggregate of all its statuses.")
w2kStatusNetInPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetInPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInPktValue.setDescription('&<caiW2kOs.817>The current value of the received packets rate (packets per second).')
w2kStatusNetInPktWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetInPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInPktWarn.setDescription('&<caiW2kOs.364>Warning threshold for the rate of received packets over TCP/IP connections (packets per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetInPktCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetInPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInPktCrit.setDescription('&<caiW2kOs.365>Critical threshold for the rate of received packets over TCP/IP connections (packets per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetInPktMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetInPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInPktMonitor.setDescription('&<caiW2kOs.366>Flag indicating whether the received packets rate should be monitored and if so, which threshold should be compared with.')
w2kStatusNetInPktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetInPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInPktStatus.setDescription("&<caiW2kOs.821>The current status of the received packets rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetOutPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetOutPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutPktValue.setDescription('&<caiW2kOs.822>The current value of the sent packets rate (packets per second).')
w2kStatusNetOutPktWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetOutPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutPktWarn.setDescription('&<caiW2kOs.367>Warning threshold for the rate of sent packets over TCP/IP connections (packets per second). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetOutPktCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetOutPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutPktCrit.setDescription('&<caiW2kOs.368>Critical threshold for the rate of sent packets over TCP/IP connections (packets per second). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetOutPktMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetOutPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutPktMonitor.setDescription('&<caiW2kOs.369>Flag indicating whether the sent packets rate should be monitored and if so, which threshold should be compared with.')
w2kStatusNetOutPktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetOutPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutPktStatus.setDescription("&<caiW2kOs.826>The current status of the sent packets rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetInErrDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetInErrDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInErrDValue.setDescription('&<caiW2kOs.827>The current value of the received errors rate (errors per poll interval).')
w2kStatusNetInErrDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetInErrDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInErrDWarn.setDescription('&<caiW2kOs.370>Warning threshold for the rate of received errors over TCP/IP connections (errors per poll interval). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetInErrDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetInErrDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInErrDCrit.setDescription('&<caiW2kOs.371>Critical threshold for the rate of received errors over TCP/IP connections (errors per poll interval). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetInErrDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetInErrDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInErrDMonitor.setDescription('&<caiW2kOs.372>Flag indicating whether the received errors rate should be monitored and if so, which threshold should be compared with.')
w2kStatusNetInErrDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetInErrDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetInErrDStatus.setDescription("&<caiW2kOs.831>The current status of the received errors rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetOutErrDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetOutErrDValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutErrDValue.setDescription('&<caiW2kOs.832>The current value of the sent errors rate (errors per poll interval).')
w2kStatusNetOutErrDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetOutErrDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutErrDWarn.setDescription('&<caiW2kOs.373>Warning threshold for the rate of sent errors over TCP/IP connections (errors per poll interval). Valid values are greater than 0 and smaller than the critical threshold.')
w2kStatusNetOutErrDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetOutErrDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutErrDCrit.setDescription('&<caiW2kOs.374>Critical threshold for the rate of sent errors over TCP/IP connections (errors per poll interval). Valid values are greater than 1 and greater than the warning threshold.')
w2kStatusNetOutErrDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetOutErrDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutErrDMonitor.setDescription('&<caiW2kOs.375>Flag indicating whether the sent errors rate should be monitored and if so, which threshold should be compared with.')
w2kStatusNetOutErrDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetOutErrDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetOutErrDStatus.setDescription("&<caiW2kOs.836>The current status of the sent errors rate as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusNetLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusNetLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetLossAction.setDescription('&<caiW2kOs.376>Flag defining the severity if the loss of the network interface is detected or whether to remove this watcher in that case.')
w2kStatusNetLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetLossStatus.setDescription("&<caiW2kOs.838>The current status of the network interface's loss as determined by the loss action.")
w2kStatusNetCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 15, 26, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusNetCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusNetCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusRegCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegCount.setDescription('&<caiW2kOs.840>The number of entries in the w2kStatusRegTable.')
w2kStatusRegTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2), )
if mibBuilder.loadTexts: w2kStatusRegTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegTable.setDescription('&<caiW2kOs.841>A table containing information about all monitored registry entries.')
w2kStatusRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kStatusRegName"))
if mibBuilder.loadTexts: w2kStatusRegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kStatusRegName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegName.setDescription('&<caiW2kOs.843>Name of the watcher, monitoring a registry entry with this name. The name is the complete registry path ending with the registry leaf name. If the leaf name contains a backslash, the leaf name must be quoted with double quotes. Important: This name is case insensitive.')
w2kStatusRegDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegDescription.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegDescription.setDescription('&<caiW2kOs.136>Any description for this watcher.')
w2kStatusRegAggLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegAggLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegAggLagValue.setDescription('&<caiW2kOs.499>The number of consecutive poll intervals on which any status was not in the Ok or Up state.')
w2kStatusRegAggLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegAggLag.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegAggLag.setDescription('&<caiW2kOs.137>The number of consecutive poll intervals on which any status is not in the Ok or Up state, before the aggregate status changes. Valid values are greater than 0.')
w2kStatusRegAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegAggStatus.setDescription("&<caiW2kOs.847>The current status of the registry entry as a 'worst case' aggregate of all its statuses.")
w2kStatusRegExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegExist.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegExist.setDescription('&<caiW2kOs.382>Flag indicating whether to raise an alert if a registry entry is existent or if it is not-existent.')
w2kStatusRegExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegExistMonitor.setDescription('&<caiW2kOs.383>Flag indicating whether the existence of the registry entry should be monitored and if so, the level of alert to raise.')
w2kStatusRegExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegExistStatus.setDescription('&<caiW2kOs.850>The current status of the registry entry existence.')
w2kStatusRegValueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegValueValue.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegValueValue.setDescription('&<caiW2kOs.851>The current value of the registry entry.')
w2kStatusRegValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("string", 1), ("binary", 2), ("dword", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegValueType.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegValueType.setDescription('&<caiW2kOs.852>The current type of the registry entry.')
w2kStatusRegValueRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegValueRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegValueRef.setDescription("&<caiW2kOs.384>This attribute is used as the reference value the registry entry is compared with. If the condition is one of 'should-be-equal', 'should-not-be-equal', 'should-be-below' or 'should-be-above', this reference value must be set by the user. In case of 'should-not-change', by setting the status button attribute to 'reset-value', the reference value is set to the current value of the registry entry.")
w2kStatusRegValueCond = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("should-be-equal", 1), ("should-not-be-equal", 2), ("should-be-below", 3), ("should-be-above", 4), ("should-not-change", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegValueCond.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegValueCond.setDescription("&<caiW2kOs.385>Flag indicating whether to raise an alert if a registry entry does not fullfill the given condition compared with the reference value attribute. 'should-be-below' and 'should-be-above' is only allowed for entries with type DWORD. For entries with type Binary 'should-not-change' is the only possible value.")
w2kStatusRegValueMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("down-warning", 2), ("down-critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegValueMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegValueMonitor.setDescription('&<caiW2kOs.386>Flag indicating whether the value of the registry entry should be monitored and if so, the level of alert to raise.')
w2kStatusRegValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down-warning", 3), ("down-critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegValueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegValueStatus.setDescription("&<caiW2kOs.856>The current status of the registry entry as determined by the thresholds. The status 'unknown' means that the current value could not be retrieved from the system.")
w2kStatusRegCallBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kStatusRegCallBackRef.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegCallBackRef.setDescription('&<caiW2kOs.443>The name of the Call-Back reference that should be invoked in case of a status change.')
w2kStatusRegButton = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 2, 16, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("remove", 2), ("reset-value", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kStatusRegButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kStatusRegButton.setDescription("&<caiW2kOs.858>This attribute is used to remove this watcher or to reset the value reference to the current value of the registry entry. The 'reset-value' is only possible in case the condition is 'should-not-change'.")
w2kAvailLVolRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailLVolRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolRefresh.setDescription("&<caiW2kOs.859>Set this value to 'refresh' to let the agent check again for all current logical volumes. The user can not set the value to 'none'.")
w2kAvailLVolCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailLVolCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolCount.setDescription('&<caiW2kOs.860>The number of currently available logical volumes.')
w2kAvailLVolTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 3), )
if mibBuilder.loadTexts: w2kAvailLVolTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolTable.setDescription('&<caiW2kOs.861>A table containing the logical volumes available for monitoring.')
w2kAvailLVolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailLVolName"))
if mibBuilder.loadTexts: w2kAvailLVolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailLVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailLVolName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolName.setDescription('&<caiW2kOs.863>The name of the logical volume.')
w2kAvailLVolMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailLVolMounts.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolMounts.setDescription('&<caiW2kOs.496>A list of the mount points, where this logical volume is mounted on.')
w2kAvailLVolInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailLVolInfo.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolInfo.setDescription('&<caiW2kOs.497>Information about the format (e.g. NTFS), the alternate name (e.g. used in PerfMon) and the label of the logical volume. The alternate name may be empty. The single values are delimited by a pipe sign.')
w2kAvailLVolTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailLVolTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailLVolTime.setDescription('&<caiW2kOs.866>The time when the agent discovered this logical volume and put it into this table.')
w2kAvailMntRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailMntRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntRefresh.setDescription("&<caiW2kOs.867>Set this value to 'refresh' to let the agent check again for all current mounts. The user can not set the value to 'none'.")
w2kAvailMntCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailMntCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntCount.setDescription('&<caiW2kOs.868>The number of currently available mounts.')
w2kAvailMntTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 3), )
if mibBuilder.loadTexts: w2kAvailMntTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntTable.setDescription('&<caiW2kOs.869>A table containing the mounts available for monitoring.')
w2kAvailMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailMntName"))
if mibBuilder.loadTexts: w2kAvailMntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailMntName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailMntName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntName.setDescription('&<caiW2kOs.871>The name of the mount.')
w2kAvailMntRelTo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailMntRelTo.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntRelTo.setDescription('&<caiW2kOs.540>The name of the current logical volume, which this mount is mounting.')
w2kAvailMntTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailMntTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailMntTime.setDescription('&<caiW2kOs.873>The time when the agent discovered this mount and put it into this table.')
w2kAvailDfsRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailDfsRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailDfsRefresh.setDescription("&<caiW2kOs.874>Set this value to 'refresh' to let the agent check again for all current distributed file system links. The user can not set the value to 'none'.")
w2kAvailDfsCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailDfsCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailDfsCount.setDescription('&<caiW2kOs.875>The number of currently available distributed file system links.')
w2kAvailDfsTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3, 3), )
if mibBuilder.loadTexts: w2kAvailDfsTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailDfsTable.setDescription('&<caiW2kOs.876>A table containing the distributed file system links available for monitoring.')
w2kAvailDfsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailDfsName"))
if mibBuilder.loadTexts: w2kAvailDfsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailDfsEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailDfsName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailDfsName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailDfsName.setDescription('&<caiW2kOs.878>The name of the distributed file system link. The name consists of the distributed file system root name followed by the Dfs link name. These two names are concatenated by a back-slash.')
w2kAvailDfsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailDfsTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailDfsTime.setDescription('&<caiW2kOs.879>The time when the agent discovered this distributed file system link and put it into this table.')
w2kAvailQuotRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailQuotRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotRefresh.setDescription("&<caiW2kOs.880>Set this value to 'refresh' to let the agent check again for all current quotas. The user can not set the value to 'none'.")
w2kAvailQuotCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailQuotCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotCount.setDescription('&<caiW2kOs.881>The number of currently available quotas.')
w2kAvailQuotTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3), )
if mibBuilder.loadTexts: w2kAvailQuotTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotTable.setDescription('&<caiW2kOs.882>A table containing the quotas available for monitoring.')
w2kAvailQuotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailQuotLVolName"), (0, "CA-W2KOS-MIB", "w2kAvailQuotUserName"))
if mibBuilder.loadTexts: w2kAvailQuotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailQuotLVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailQuotLVolName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotLVolName.setDescription('&<caiW2kOs.884>The name of the logical volume on which this quota exists.')
w2kAvailQuotUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailQuotUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotUserName.setDescription("&<caiW2kOs.885>The user name for whom this quota exists. The name is in the form 'domainName\\userName' or 'userName@domainName'.")
w2kAvailQuotWarnLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailQuotWarnLevel.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotWarnLevel.setDescription('&<caiW2kOs.886>The quota warning level for this user, as defined in the Windows 2000 quota management. Management applications adding a watcher for this quota should use this value as default warning threshold instead of the value stored in the config group.')
w2kAvailQuotLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailQuotLimit.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotLimit.setDescription('&<caiW2kOs.887>The quota limit for this user, as defined in the Windows 2000 quota management. Management applications adding a watcher for this quota should use this value as default critical threshold instead of the value stored in the config group.')
w2kAvailQuotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailQuotTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailQuotTime.setDescription('&<caiW2kOs.888>The time when the agent discovered this quota and put it into this table.')
w2kAvailProcRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailProcRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcRefresh.setDescription("&<caiW2kOs.889>Set this value to 'refresh' to let the agent check again for all current processes. The user can not set the value to 'none'.")
w2kAvailProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailProcCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcCount.setDescription('&<caiW2kOs.890>The number of currently available processes.')
w2kAvailProcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 3), )
if mibBuilder.loadTexts: w2kAvailProcTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcTable.setDescription('&<caiW2kOs.891>A table containing the processes available for monitoring.')
w2kAvailProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailProcProcName"), (0, "CA-W2KOS-MIB", "w2kAvailProcPathName"), (0, "CA-W2KOS-MIB", "w2kAvailProcUserName"))
if mibBuilder.loadTexts: w2kAvailProcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailProcProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailProcProcName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcProcName.setDescription('&<caiW2kOs.893>The process name of the process.')
w2kAvailProcPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailProcPathName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcPathName.setDescription('&<caiW2kOs.894>The path name of the process.')
w2kAvailProcUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailProcUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcUserName.setDescription('&<caiW2kOs.895>The user name of the process.')
w2kAvailProcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailProcTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailProcTime.setDescription('&<caiW2kOs.896>The time when the agent discovered this process and put it into this table.')
w2kAvailSrvcRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailSrvcRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcRefresh.setDescription("&<caiW2kOs.897>Set this value to 'refresh' to let the agent check again for all current services. The user can not set the value to 'none'.")
w2kAvailSrvcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSrvcCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcCount.setDescription('&<caiW2kOs.898>The number of currently available services.')
w2kAvailSrvcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 3), )
if mibBuilder.loadTexts: w2kAvailSrvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcTable.setDescription('&<caiW2kOs.899>A table containing the services available for monitoring.')
w2kAvailSrvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailSrvcName"))
if mibBuilder.loadTexts: w2kAvailSrvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSrvcName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcName.setDescription('&<caiW2kOs.901>The name of the service.')
w2kAvailSrvcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSrvcDescr.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcDescr.setDescription('&<caiW2kOs.701>The description of the service.')
w2kAvailSrvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSrvcTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSrvcTime.setDescription('&<caiW2kOs.903>The time when the agent discovered this service and put it into this table.')
w2kAvailJobRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailJobRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailJobRefresh.setDescription("&<caiW2kOs.904>Set this value to 'refresh' to let the agent check again for all current jobs. The user can not set the value to 'none'.")
w2kAvailJobCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailJobCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailJobCount.setDescription('&<caiW2kOs.905>The number of currently available jobs.')
w2kAvailJobTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7, 3), )
if mibBuilder.loadTexts: w2kAvailJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailJobTable.setDescription('&<caiW2kOs.906>A table containing the jobs available for monitoring.')
w2kAvailJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailJobName"))
if mibBuilder.loadTexts: w2kAvailJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailJobEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailJobName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailJobName.setDescription('&<caiW2kOs.908>The name of the job.')
w2kAvailJobTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailJobTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailJobTime.setDescription('&<caiW2kOs.909>The time when the agent discovered this job and put it into this table.')
w2kAvailSessRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailSessRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessRefresh.setDescription("&<caiW2kOs.910>Set this value to 'refresh' to let the agent check again for all current sessions. The user can not set the value to 'none'.")
w2kAvailSessCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSessCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessCount.setDescription('&<caiW2kOs.911>The number of currently available sessions.')
w2kAvailSessTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 3), )
if mibBuilder.loadTexts: w2kAvailSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessTable.setDescription('&<caiW2kOs.912>A table containing the sessions available for monitoring.')
w2kAvailSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailSessClientName"), (0, "CA-W2KOS-MIB", "w2kAvailSessUserName"))
if mibBuilder.loadTexts: w2kAvailSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailSessClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSessClientName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessClientName.setDescription('&<caiW2kOs.914>Client name of the session, which is the name of the host, from where this session was initiated.')
w2kAvailSessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSessUserName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessUserName.setDescription("&<caiW2kOs.915>User name of the session, which specifies the user, who logged in and is in the form 'domainName\\userName'.")
w2kAvailSessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailSessTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailSessTime.setDescription('&<caiW2kOs.916>The time when the agent discovered this session and put it into this table.')
w2kAvailPrnRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kAvailPrnRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailPrnRefresh.setDescription("&<caiW2kOs.917>Set this value to 'refresh' to let the agent check again for all configured printers. The user can not set the value to 'none'.")
w2kAvailPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailPrnCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailPrnCount.setDescription('&<caiW2kOs.918>The number of currently available printers. This includes all local printers, but not the network printers.')
w2kAvailPrnTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9, 3), )
if mibBuilder.loadTexts: w2kAvailPrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailPrnTable.setDescription('&<caiW2kOs.919>A table containing the local printers available for monitoring.')
w2kAvailPrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9, 3, 1), ).setIndexNames((0, "CA-W2KOS-MIB", "w2kAvailPrnName"))
if mibBuilder.loadTexts: w2kAvailPrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailPrnEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kAvailPrnName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailPrnName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailPrnName.setDescription('&<caiW2kOs.921>The name of the local printer.')
w2kAvailPrnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 3, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kAvailPrnTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kAvailPrnTime.setDescription('&<caiW2kOs.922>The time when the agent discovered this printer and put it into this table.')
w2kHistoryCpuCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryCpuCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryCpuCollect.setDescription("&<caiW2kOs.923>Set this value to 'yes' to let the agent collect traps of the processor group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryMemCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryMemCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryMemCollect.setDescription("&<caiW2kOs.924>Set this value to 'yes' to let the agent collect traps of the memory group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryLVolCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryLVolCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryLVolCollect.setDescription("&<caiW2kOs.925>Set this value to 'yes' to let the agent collect traps of the logical volume group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryMntCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryMntCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryMntCollect.setDescription("&<caiW2kOs.926>Set this value to 'yes' to let the agent collect traps of the mount group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryDfsCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryDfsCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryDfsCollect.setDescription("&<caiW2kOs.927>Set this value to 'yes' to let the agent collect traps of the distributed file system group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryQuotCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryQuotCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryQuotCollect.setDescription("&<caiW2kOs.928>Set this value to 'yes' to let the agent collect traps of the quota group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryDirCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryDirCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryDirCollect.setDescription("&<caiW2kOs.929>Set this value to 'yes' to let the agent collect traps of the directory group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryFileCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryFileCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryFileCollect.setDescription("&<caiW2kOs.930>Set this value to 'yes' to let the agent collect traps of the file group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryProcCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryProcCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryProcCollect.setDescription("&<caiW2kOs.931>Set this value to 'yes' to let the agent collect traps of the processes group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistorySrvcCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistorySrvcCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistorySrvcCollect.setDescription("&<caiW2kOs.932>Set this value to 'yes' to let the agent collect traps of the services group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryJobCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryJobCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryJobCollect.setDescription("&<caiW2kOs.933>Set this value to 'yes' to let the agent collect traps of the jobs group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistorySessCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistorySessCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistorySessCollect.setDescription("&<caiW2kOs.934>Set this value to 'yes' to let the agent collect traps of the sessions group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryPrnCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryPrnCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryPrnCollect.setDescription("&<caiW2kOs.935>Set this value to 'yes' to let the agent collect traps of the printers group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryNetCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryNetCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryNetCollect.setDescription("&<caiW2kOs.936>Set this value to 'yes' to let the agent collect traps of the network interfaces group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryRegCollect = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryRegCollect.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryRegCollect.setDescription("&<caiW2kOs.937>Set this value to 'yes' to let the agent collect traps of the registry entries group in the history table. If set to 'no' these traps are not stored in the history table.")
w2kHistoryButton = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryButton.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryButton.setDescription("&<caiW2kOs.938>Set this value to 'clear' to let the agent empty the history table. The user can not set the value to 'none'.")
w2kHistoryMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: w2kHistoryMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryMaxEntries.setDescription('&<caiW2kOs.939>The maximum number of entries to be stored in the history table. Valid values are 0 to 100. If set to 0 no history information of traps is stored.')
w2kHistoryCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kHistoryCount.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryCount.setDescription('&<caiW2kOs.940>The number of entries in the history table.')
w2kHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 19), )
if mibBuilder.loadTexts: w2kHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryTable.setDescription('&<caiW2kOs.941>A table containing the last enterprise specific traps the agent arised.')
w2kHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 19, 1), )
if mibBuilder.loadTexts: w2kHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryEntry.setDescription('&<caiW2kOs.154>The table entry.')
w2kHistoryTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 19, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kHistoryTrapName.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryTrapName.setDescription('&<caiW2kOs.943>The name of the trap as defined in the MIB.')
w2kHistoryTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kHistoryTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryTrapNumber.setDescription('&<caiW2kOs.944>The enterprise specific trap type number.')
w2kHistoryTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kHistoryTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryTrapTime.setDescription('&<caiW2kOs.945>The date and time the trap was sent.')
w2kHistoryTrapVarBind = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43, 4, 19, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: w2kHistoryTrapVarBind.setStatus('mandatory')
if mibBuilder.loadTexts: w2kHistoryTrapVarBind.setDescription("&<caiW2kOs.946>A comma separated list of the varbinds the agent sent with the trap. Each element has the form 'attribute=value'.")
w2kCpuTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10000))
if mibBuilder.loadTexts: w2kCpuTotalUnknown.setDescription("&<caiW2kOs.947>The watcher monitoring the processor total changed its status to 'unknown'.")
w2kCpuTotalOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10001))
if mibBuilder.loadTexts: w2kCpuTotalOk.setDescription("&<caiW2kOs.948>The watcher monitoring the processor total changed its status to 'ok'.")
w2kCpuTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10002))
if mibBuilder.loadTexts: w2kCpuTotalWarning.setDescription("&<caiW2kOs.949>The watcher monitoring the processor total changed its status to 'warning'.")
w2kCpuTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10003))
if mibBuilder.loadTexts: w2kCpuTotalCritical.setDescription("&<caiW2kOs.950>The watcher monitoring the processor total changed its status to 'critical'.")
w2kCpuTotalModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10009))
if mibBuilder.loadTexts: w2kCpuTotalModified.setDescription('&<caiW2kOs.951>The watcher configuration for the processor total changed. The varbind list contains the changed attribute with its old value and with its new value.')
w2kCpuUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10990))
if mibBuilder.loadTexts: w2kCpuUnknown.setDescription("&<caiW2kOs.952>A watcher monitoring a processor changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kCpuOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10991))
if mibBuilder.loadTexts: w2kCpuOk.setDescription("&<caiW2kOs.953>A watcher monitoring a processor changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kCpuWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10992))
if mibBuilder.loadTexts: w2kCpuWarning.setDescription("&<caiW2kOs.954>A watcher monitoring a processor changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kCpuCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10993))
if mibBuilder.loadTexts: w2kCpuCritical.setDescription("&<caiW2kOs.955>A watcher monitoring a processor changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kCpuAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10996))
if mibBuilder.loadTexts: w2kCpuAdded.setDescription('&<caiW2kOs.956>A watcher monitoring a processor was added. The varbind list contains the name of the involved resource.')
w2kCpuDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10997))
if mibBuilder.loadTexts: w2kCpuDeleted.setDescription('&<caiW2kOs.957>A watcher monitoring a processor was removed. The varbind list contains the name of the involved resource.')
w2kCpuInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10998))
if mibBuilder.loadTexts: w2kCpuInfo.setDescription('&<caiW2kOs.1070>A watcher monitoring a processor changed a substatus. The varbind list contains detailed information in one string.')
w2kCpuModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,10999))
if mibBuilder.loadTexts: w2kCpuModified.setDescription('&<caiW2kOs.958>The watcher configuration for a processor changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kMemVirtUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11010))
if mibBuilder.loadTexts: w2kMemVirtUnknown.setDescription("&<caiW2kOs.959>The watcher monitoring the virtual memory changed its status to 'unknown'.")
w2kMemVirtOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11011))
if mibBuilder.loadTexts: w2kMemVirtOk.setDescription("&<caiW2kOs.960>The watcher monitoring the virtual memory changed its status to 'ok'.")
w2kMemVirtWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11012))
if mibBuilder.loadTexts: w2kMemVirtWarning.setDescription("&<caiW2kOs.961>The watcher monitoring the virtual memory changed its status to 'warning'.")
w2kMemVirtCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11013))
if mibBuilder.loadTexts: w2kMemVirtCritical.setDescription("&<caiW2kOs.962>The watcher monitoring the virtual memory changed its status to 'critical'.")
w2kMemVirtModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11019))
if mibBuilder.loadTexts: w2kMemVirtModified.setDescription('&<caiW2kOs.963>The watcher configuration for the virtual memory changed. The varbind list contains the changed attribute with its old value and with its new value.')
w2kMemPhysUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11020))
if mibBuilder.loadTexts: w2kMemPhysUnknown.setDescription("&<caiW2kOs.964>The watcher monitoring the physical memory changed its status to 'unknown'.")
w2kMemPhysOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11021))
if mibBuilder.loadTexts: w2kMemPhysOk.setDescription("&<caiW2kOs.965>The watcher monitoring the physical memory changed its status to 'ok'.")
w2kMemPhysWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11022))
if mibBuilder.loadTexts: w2kMemPhysWarning.setDescription("&<caiW2kOs.966>The watcher monitoring the physical memory changed its status to 'warning'.")
w2kMemPhysCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11023))
if mibBuilder.loadTexts: w2kMemPhysCritical.setDescription("&<caiW2kOs.967>The watcher monitoring the physical memory changed its status to 'critical'.")
w2kMemPhysModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11029))
if mibBuilder.loadTexts: w2kMemPhysModified.setDescription('&<caiW2kOs.968>The watcher configuration for the physical memory changed. The varbind list contains the changed attribute with its old value and with its new value.')
w2kMemPageUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11030))
if mibBuilder.loadTexts: w2kMemPageUnknown.setDescription("&<caiW2kOs.969>The watcher monitoring the paging memory changed its status to 'unknown'.")
w2kMemPageOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11031))
if mibBuilder.loadTexts: w2kMemPageOk.setDescription("&<caiW2kOs.970>The watcher monitoring the paging memory changed its status to 'ok'.")
w2kMemPageWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11032))
if mibBuilder.loadTexts: w2kMemPageWarning.setDescription("&<caiW2kOs.971>The watcher monitoring the paging memory changed its status to 'warning'.")
w2kMemPageCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11033))
if mibBuilder.loadTexts: w2kMemPageCritical.setDescription("&<caiW2kOs.972>The watcher monitoring the paging memory changed its status to 'critical'.")
w2kMemPageModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,11039))
if mibBuilder.loadTexts: w2kMemPageModified.setDescription('&<caiW2kOs.973>The watcher configuration for the paging memory changed. The varbind list contains the changed attribute with its old value and with its new value.')
w2kLVolUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12980))
if mibBuilder.loadTexts: w2kLVolUnknown.setDescription("&<caiW2kOs.974>A watcher monitoring a logical volume changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kLVolOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12981))
if mibBuilder.loadTexts: w2kLVolOk.setDescription("&<caiW2kOs.975>A watcher monitoring a logical volume changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kLVolWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12982))
if mibBuilder.loadTexts: w2kLVolWarning.setDescription("&<caiW2kOs.976>A watcher monitoring a logical volume changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kLVolCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12983))
if mibBuilder.loadTexts: w2kLVolCritical.setDescription("&<caiW2kOs.977>A watcher monitoring a logical volume changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kLVolAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12986))
if mibBuilder.loadTexts: w2kLVolAdded.setDescription('&<caiW2kOs.978>A watcher monitoring a logical volume was added. The varbind list contains the name of the involved resource.')
w2kLVolDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12987))
if mibBuilder.loadTexts: w2kLVolDeleted.setDescription('&<caiW2kOs.979>A watcher monitoring a logical volume was removed. The varbind list contains the name of the involved resource.')
w2kLVolInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12988))
if mibBuilder.loadTexts: w2kLVolInfo.setDescription('&<caiW2kOs.1071>A watcher monitoring a logical volume changed a substatus. The varbind list contains detailed information in one string.')
w2kLVolModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,12989))
if mibBuilder.loadTexts: w2kLVolModified.setDescription('&<caiW2kOs.980>The watcher configuration for a logical volume changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kMntUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13980))
if mibBuilder.loadTexts: w2kMntUnknown.setDescription("&<caiW2kOs.981>A watcher monitoring a mount changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kMntOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13981))
if mibBuilder.loadTexts: w2kMntOk.setDescription("&<caiW2kOs.982>A watcher monitoring a mount changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kMntWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13982))
if mibBuilder.loadTexts: w2kMntWarning.setDescription("&<caiW2kOs.983>A watcher monitoring a mount changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kMntCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13983))
if mibBuilder.loadTexts: w2kMntCritical.setDescription("&<caiW2kOs.984>A watcher monitoring a mount changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kMntAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13986))
if mibBuilder.loadTexts: w2kMntAdded.setDescription('&<caiW2kOs.985>A watcher monitoring a mount was added. The varbind list contains the name of the involved resource.')
w2kMntDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13987))
if mibBuilder.loadTexts: w2kMntDeleted.setDescription('&<caiW2kOs.986>A watcher monitoring a mount was removed. The varbind list contains the name of the involved resource.')
w2kMntInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13988))
if mibBuilder.loadTexts: w2kMntInfo.setDescription('&<caiW2kOs.1072>A watcher monitoring a mount changed a substatus. The varbind list contains detailed information in one string.')
w2kMntModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,13989))
if mibBuilder.loadTexts: w2kMntModified.setDescription('&<caiW2kOs.987>The watcher configuration for a mount changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kDfsUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14980))
if mibBuilder.loadTexts: w2kDfsUnknown.setDescription("&<caiW2kOs.988>A watcher monitoring a distributed file system link changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kDfsOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14981))
if mibBuilder.loadTexts: w2kDfsOk.setDescription("&<caiW2kOs.989>A watcher monitoring a distributed file system link changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kDfsWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14982))
if mibBuilder.loadTexts: w2kDfsWarning.setDescription("&<caiW2kOs.990>A watcher monitoring a distributed file system link changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kDfsCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14983))
if mibBuilder.loadTexts: w2kDfsCritical.setDescription("&<caiW2kOs.991>A watcher monitoring a distributed file system link changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kDfsAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14986))
if mibBuilder.loadTexts: w2kDfsAdded.setDescription('&<caiW2kOs.992>A watcher monitoring a distributed file system link was added. The varbind list contains the name of the involved resource.')
w2kDfsDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14987))
if mibBuilder.loadTexts: w2kDfsDeleted.setDescription('&<caiW2kOs.993>A watcher monitoring a distributed file system link was removed. The varbind list contains the name of the involved resource.')
w2kDfsInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14988))
if mibBuilder.loadTexts: w2kDfsInfo.setDescription('&<caiW2kOs.1073>A watcher monitoring a distributed file system link changed a substatus. The varbind list contains detailed information in one string.')
w2kDfsModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,14989))
if mibBuilder.loadTexts: w2kDfsModified.setDescription('&<caiW2kOs.994>The watcher configuration for a distributed file system link changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kQuotUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15980))
if mibBuilder.loadTexts: w2kQuotUnknown.setDescription("&<caiW2kOs.995>A watcher monitoring a quota changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kQuotOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15981))
if mibBuilder.loadTexts: w2kQuotOk.setDescription("&<caiW2kOs.996>A watcher monitoring a quota changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kQuotWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15982))
if mibBuilder.loadTexts: w2kQuotWarning.setDescription("&<caiW2kOs.997>A watcher monitoring a quota changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kQuotCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15983))
if mibBuilder.loadTexts: w2kQuotCritical.setDescription("&<caiW2kOs.998>A watcher monitoring a quota changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kQuotAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15986))
if mibBuilder.loadTexts: w2kQuotAdded.setDescription('&<caiW2kOs.999>A watcher monitoring a quota was added. The varbind list contains the name of the involved resource.')
w2kQuotDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15987))
if mibBuilder.loadTexts: w2kQuotDeleted.setDescription('&<caiW2kOs.1000>A watcher monitoring a quota was removed. The varbind list contains the name of the involved resource.')
w2kQuotInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15988))
if mibBuilder.loadTexts: w2kQuotInfo.setDescription('&<caiW2kOs.1074>A watcher monitoring a quota changed a substatus. The varbind list contains detailed information in one string.')
w2kQuotModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,15989))
if mibBuilder.loadTexts: w2kQuotModified.setDescription('&<caiW2kOs.1001>The watcher configuration for a quota changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kDirUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16980))
if mibBuilder.loadTexts: w2kDirUnknown.setDescription("&<caiW2kOs.1002>A watcher monitoring a directory changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kDirOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16981))
if mibBuilder.loadTexts: w2kDirOk.setDescription("&<caiW2kOs.1003>A watcher monitoring a directory changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kDirWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16982))
if mibBuilder.loadTexts: w2kDirWarning.setDescription("&<caiW2kOs.1004>A watcher monitoring a directory changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kDirCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16983))
if mibBuilder.loadTexts: w2kDirCritical.setDescription("&<caiW2kOs.1005>A watcher monitoring a directory changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kDirAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16986))
if mibBuilder.loadTexts: w2kDirAdded.setDescription('&<caiW2kOs.1006>A watcher monitoring a directory was added. The varbind list contains the name of the involved resource.')
w2kDirDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16987))
if mibBuilder.loadTexts: w2kDirDeleted.setDescription('&<caiW2kOs.1007>A watcher monitoring a directory was removed. The varbind list contains the name of the involved resource.')
w2kDirInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16988))
if mibBuilder.loadTexts: w2kDirInfo.setDescription('&<caiW2kOs.1075>A watcher monitoring a directory changed a substatus. The varbind list contains detailed information in one string.')
w2kDirModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,16989))
if mibBuilder.loadTexts: w2kDirModified.setDescription('&<caiW2kOs.1008>The watcher configuration for a directory changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kFileUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17980))
if mibBuilder.loadTexts: w2kFileUnknown.setDescription("&<caiW2kOs.1009>A watcher monitoring a file changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kFileOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17981))
if mibBuilder.loadTexts: w2kFileOk.setDescription("&<caiW2kOs.1010>A watcher monitoring a file changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kFileWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17982))
if mibBuilder.loadTexts: w2kFileWarning.setDescription("&<caiW2kOs.1011>A watcher monitoring a file changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kFileCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17983))
if mibBuilder.loadTexts: w2kFileCritical.setDescription("&<caiW2kOs.1012>A watcher monitoring a file changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kFileAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17986))
if mibBuilder.loadTexts: w2kFileAdded.setDescription('&<caiW2kOs.1013>A watcher monitoring a file was added. The varbind list contains the name of the involved resource.')
w2kFileDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17987))
if mibBuilder.loadTexts: w2kFileDeleted.setDescription('&<caiW2kOs.1014>A watcher monitoring a file was removed. The varbind list contains the name of the involved resource.')
w2kFileInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17988))
if mibBuilder.loadTexts: w2kFileInfo.setDescription('&<caiW2kOs.1076>A watcher monitoring a file changed a substatus. The varbind list contains detailed information in one string.')
w2kFileModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,17989))
if mibBuilder.loadTexts: w2kFileModified.setDescription('&<caiW2kOs.1015>The watcher configuration for a file changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kProcUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18980))
if mibBuilder.loadTexts: w2kProcUnknown.setDescription("&<caiW2kOs.1016>A watcher monitoring a process changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kProcOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18981))
if mibBuilder.loadTexts: w2kProcOk.setDescription("&<caiW2kOs.1017>A watcher monitoring a process changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kProcWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18982))
if mibBuilder.loadTexts: w2kProcWarning.setDescription("&<caiW2kOs.1018>A watcher monitoring a process changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kProcCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18983))
if mibBuilder.loadTexts: w2kProcCritical.setDescription("&<caiW2kOs.1019>A watcher monitoring a process changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kProcAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18986))
if mibBuilder.loadTexts: w2kProcAdded.setDescription('&<caiW2kOs.1020>A watcher monitoring a process was added. The varbind list contains the name of the involved resource.')
w2kProcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18987))
if mibBuilder.loadTexts: w2kProcDeleted.setDescription('&<caiW2kOs.1021>A watcher monitoring a process was removed. The varbind list contains the name of the involved resource.')
w2kProcInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18988))
if mibBuilder.loadTexts: w2kProcInfo.setDescription('&<caiW2kOs.1077>A watcher monitoring a process changed a substatus. The varbind list contains detailed information in one string.')
w2kProcModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,18989))
if mibBuilder.loadTexts: w2kProcModified.setDescription('&<caiW2kOs.1022>The watcher configuration for a process changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kSrvcUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19980))
if mibBuilder.loadTexts: w2kSrvcUnknown.setDescription("&<caiW2kOs.1023>A watcher monitoring a service changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kSrvcOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19981))
if mibBuilder.loadTexts: w2kSrvcOk.setDescription("&<caiW2kOs.1024>A watcher monitoring a service changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kSrvcWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19982))
if mibBuilder.loadTexts: w2kSrvcWarning.setDescription("&<caiW2kOs.1025>A watcher monitoring a service changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kSrvcCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19983))
if mibBuilder.loadTexts: w2kSrvcCritical.setDescription("&<caiW2kOs.1026>A watcher monitoring a service changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kSrvcAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19986))
if mibBuilder.loadTexts: w2kSrvcAdded.setDescription('&<caiW2kOs.1027>A watcher monitoring a service was added. The varbind list contains the name of the involved resource.')
w2kSrvcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19987))
if mibBuilder.loadTexts: w2kSrvcDeleted.setDescription('&<caiW2kOs.1028>A watcher monitoring a service was removed. The varbind list contains the name of the involved resource.')
w2kSrvcInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19988))
if mibBuilder.loadTexts: w2kSrvcInfo.setDescription('&<caiW2kOs.1078>A watcher monitoring a service changed a substatus. The varbind list contains detailed information in one string.')
w2kSrvcModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,19989))
if mibBuilder.loadTexts: w2kSrvcModified.setDescription('&<caiW2kOs.1029>The watcher configuration for a service changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kJobUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20980))
if mibBuilder.loadTexts: w2kJobUnknown.setDescription("&<caiW2kOs.1030>A watcher monitoring a job changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kJobOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20981))
if mibBuilder.loadTexts: w2kJobOk.setDescription("&<caiW2kOs.1031>A watcher monitoring a job changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kJobWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20982))
if mibBuilder.loadTexts: w2kJobWarning.setDescription("&<caiW2kOs.1032>A watcher monitoring a job changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kJobCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20983))
if mibBuilder.loadTexts: w2kJobCritical.setDescription("&<caiW2kOs.1033>A watcher monitoring a job changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kJobAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20986))
if mibBuilder.loadTexts: w2kJobAdded.setDescription('&<caiW2kOs.1034>A watcher monitoring a job was added. The varbind list contains the name of the involved resource.')
w2kJobDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20987))
if mibBuilder.loadTexts: w2kJobDeleted.setDescription('&<caiW2kOs.1035>A watcher monitoring a job was removed. The varbind list contains the name of the involved resource.')
w2kJobInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20988))
if mibBuilder.loadTexts: w2kJobInfo.setDescription('&<caiW2kOs.1079>A watcher monitoring a job changed a substatus. The varbind list contains detailed information in one string.')
w2kJobModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,20989))
if mibBuilder.loadTexts: w2kJobModified.setDescription('&<caiW2kOs.1036>The watcher configuration for a job changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kSessUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21980))
if mibBuilder.loadTexts: w2kSessUnknown.setDescription("&<caiW2kOs.1037>A watcher monitoring a session changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kSessOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21981))
if mibBuilder.loadTexts: w2kSessOk.setDescription("&<caiW2kOs.1038>A watcher monitoring a session changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kSessWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21982))
if mibBuilder.loadTexts: w2kSessWarning.setDescription("&<caiW2kOs.1039>A watcher monitoring a session changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kSessCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21983))
if mibBuilder.loadTexts: w2kSessCritical.setDescription("&<caiW2kOs.1040>A watcher monitoring a session changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kSessAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21986))
if mibBuilder.loadTexts: w2kSessAdded.setDescription('&<caiW2kOs.1041>A watcher monitoring a session was added. The varbind list contains the name of the involved resource.')
w2kSessDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21987))
if mibBuilder.loadTexts: w2kSessDeleted.setDescription('&<caiW2kOs.1042>A watcher monitoring a session was removed. The varbind list contains the name of the involved resource.')
w2kSessInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21988))
if mibBuilder.loadTexts: w2kSessInfo.setDescription('&<caiW2kOs.1080>A watcher monitoring a session changed a substatus. The varbind list contains detailed information in one string.')
w2kSessModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,21989))
if mibBuilder.loadTexts: w2kSessModified.setDescription('&<caiW2kOs.1043>The watcher configuration for a session changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kPrnUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22980))
if mibBuilder.loadTexts: w2kPrnUnknown.setDescription("&<caiW2kOs.1044>A watcher monitoring a printer changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kPrnOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22981))
if mibBuilder.loadTexts: w2kPrnOk.setDescription("&<caiW2kOs.1045>A watcher monitoring a printer changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kPrnWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22982))
if mibBuilder.loadTexts: w2kPrnWarning.setDescription("&<caiW2kOs.1046>A watcher monitoring a printer changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kPrnCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22983))
if mibBuilder.loadTexts: w2kPrnCritical.setDescription("&<caiW2kOs.1047>A watcher monitoring a printer changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kPrnAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22986))
if mibBuilder.loadTexts: w2kPrnAdded.setDescription('&<caiW2kOs.1048>A watcher monitoring a printer was added. The varbind list contains the name of the involved resource.')
w2kPrnDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22987))
if mibBuilder.loadTexts: w2kPrnDeleted.setDescription('&<caiW2kOs.1049>A watcher monitoring a printer was removed. The varbind list contains the name of the involved resource.')
w2kPrnInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22988))
if mibBuilder.loadTexts: w2kPrnInfo.setDescription('&<caiW2kOs.1081>A watcher monitoring a printer changed a substatus. The varbind list contains detailed information in one string.')
w2kPrnModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,22989))
if mibBuilder.loadTexts: w2kPrnModified.setDescription('&<caiW2kOs.1050>The watcher configuration for a printer changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kNetTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23000))
if mibBuilder.loadTexts: w2kNetTotalUnknown.setDescription("&<caiW2kOs.1051>The watcher monitoring the network interfaces total changed its status to 'unknown'.")
w2kNetTotalOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23001))
if mibBuilder.loadTexts: w2kNetTotalOk.setDescription("&<caiW2kOs.1052>The watcher monitoring the network interfaces total changed its status to 'ok'.")
w2kNetTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23002))
if mibBuilder.loadTexts: w2kNetTotalWarning.setDescription("&<caiW2kOs.1053>The watcher monitoring the network interfaces total changed its status to 'warning'.")
w2kNetTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23003))
if mibBuilder.loadTexts: w2kNetTotalCritical.setDescription("&<caiW2kOs.1054>The watcher monitoring the network interfaces total changed its status to 'critical'.")
w2kNetTotalInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23008))
if mibBuilder.loadTexts: w2kNetTotalInfo.setDescription('&<caiW2kOs.1082>The watcher monitoring the network interfaces total changed a substatus. The varbind list contains detailed information in one string.')
w2kNetTotalModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23009))
if mibBuilder.loadTexts: w2kNetTotalModified.setDescription('&<caiW2kOs.1055>The watcher configuration for the network interfaces total changed. The varbind list contains the changed attribute with its old value and with its new value.')
w2kNetUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23990))
if mibBuilder.loadTexts: w2kNetUnknown.setDescription("&<caiW2kOs.1056>A watcher monitoring a network interface changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kNetOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23991))
if mibBuilder.loadTexts: w2kNetOk.setDescription("&<caiW2kOs.1057>A watcher monitoring a network interface changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kNetWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23992))
if mibBuilder.loadTexts: w2kNetWarning.setDescription("&<caiW2kOs.1058>A watcher monitoring a network interface changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kNetCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23993))
if mibBuilder.loadTexts: w2kNetCritical.setDescription("&<caiW2kOs.1059>A watcher monitoring a network interface changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kNetAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23996))
if mibBuilder.loadTexts: w2kNetAdded.setDescription('&<caiW2kOs.1060>A watcher monitoring a network interface was added. The varbind list contains the name of the involved resource.')
w2kNetDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23997))
if mibBuilder.loadTexts: w2kNetDeleted.setDescription('&<caiW2kOs.1061>A watcher monitoring a network interface was removed. The varbind list contains the name of the involved resource.')
w2kNetInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23998))
if mibBuilder.loadTexts: w2kNetInfo.setDescription('&<caiW2kOs.1083>A watcher monitoring a network interface changed a substatus. The varbind list contains detailed information in one string.')
w2kNetModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,23999))
if mibBuilder.loadTexts: w2kNetModified.setDescription('&<caiW2kOs.1062>The watcher configuration for a network interface changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
w2kRegUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24980))
if mibBuilder.loadTexts: w2kRegUnknown.setDescription("&<caiW2kOs.1063>A watcher monitoring a registry entry changed its status to 'unknown'. The varbind list contains the name of the involved resource.")
w2kRegOk = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24981))
if mibBuilder.loadTexts: w2kRegOk.setDescription("&<caiW2kOs.1064>A watcher monitoring a registry entry changed its status to 'ok'. The varbind list contains the name of the involved resource.")
w2kRegWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24982))
if mibBuilder.loadTexts: w2kRegWarning.setDescription("&<caiW2kOs.1065>A watcher monitoring a registry entry changed its status to 'warning'. The varbind list contains the name of the involved resource.")
w2kRegCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24983))
if mibBuilder.loadTexts: w2kRegCritical.setDescription("&<caiW2kOs.1066>A watcher monitoring a registry entry changed its status to 'critical'. The varbind list contains the name of the involved resource.")
w2kRegAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24986))
if mibBuilder.loadTexts: w2kRegAdded.setDescription('&<caiW2kOs.1067>A watcher monitoring a registry entry was added. The varbind list contains the name of the involved resource.')
w2kRegDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24987))
if mibBuilder.loadTexts: w2kRegDeleted.setDescription('&<caiW2kOs.1068>A watcher monitoring a registry entry was removed. The varbind list contains the name of the involved resource.')
w2kRegInfo = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24988))
if mibBuilder.loadTexts: w2kRegInfo.setDescription('&<caiW2kOs.1084>A watcher monitoring a registry entry changed a substatus. The varbind list contains detailed information in one string.')
w2kRegModified = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 10, 2, 43) + (0,24989))
if mibBuilder.loadTexts: w2kRegModified.setDescription('&<caiW2kOs.1069>The watcher configuration for a registry entry changed. The varbind list contains the name of the involved resource, the changed attribute with its old value and with its new value.')
mibBuilder.exportSymbols("CA-W2KOS-MIB", w2kStatusNetOutPktMonitor=w2kStatusNetOutPktMonitor, w2kStatusSrvcName=w2kStatusSrvcName, w2kConfigCpuLoadMonitor=w2kConfigCpuLoadMonitor, w2kHistoryCount=w2kHistoryCount, w2kConfigQuotAggLag=w2kConfigQuotAggLag, w2kStatusFileEntry=w2kStatusFileEntry, w2kStatusSrvcDescr=w2kStatusSrvcDescr, w2kQuotDeleted=w2kQuotDeleted, w2kStatusFileExistMonitor=w2kStatusFileExistMonitor, w2kStatusDfsGroup=w2kStatusDfsGroup, w2kStatusDfsDescription=w2kStatusDfsDescription, w2kStatusFileTimeValue=w2kStatusFileTimeValue, w2kQuotWarning=w2kQuotWarning, w2kStatusDirAggLag=w2kStatusDirAggLag, w2kStatusDirEntryCrit=w2kStatusDirEntryCrit, w2kStatusMntGroup=w2kStatusMntGroup, w2kStatusQuotGroup=w2kStatusQuotGroup, w2kStatusCpuAggStatus=w2kStatusCpuAggStatus, w2kStatusGeneralQuotWarn=w2kStatusGeneralQuotWarn, w2kConfigSrvcAutoDescription=w2kConfigSrvcAutoDescription, w2kStatusNetInPktStatus=w2kStatusNetInPktStatus, w2kStatusFileSizeCrit=w2kStatusFileSizeCrit, w2kAvailQuotWarnLevel=w2kAvailQuotWarnLevel, w2kStatusDirGroup=w2kStatusDirGroup, w2kStatusPrnAggStatus=w2kStatusPrnAggStatus, w2kConfigProcThreadMax=w2kConfigProcThreadMax, w2kConfigJobAggLag=w2kConfigJobAggLag, w2kStatusMemPageWarnValue=w2kStatusMemPageWarnValue, w2kConfigProcPollMethod=w2kConfigProcPollMethod, w2kQuotCritical=w2kQuotCritical, w2kAvailDfsTable=w2kAvailDfsTable, w2kStatusQuotSizeMonitor=w2kStatusQuotSizeMonitor, w2kConfigMntAutoPollInterval=w2kConfigMntAutoPollInterval, w2kStatusDirEntryMonitor=w2kStatusDirEntryMonitor, w2kStatusFileSizeDCrit=w2kStatusFileSizeDCrit, w2kStatusSessMemoryValue=w2kStatusSessMemoryValue, w2kStatusCpuLoadMonitor=w2kStatusCpuLoadMonitor, w2kConfigDirPollInterval=w2kConfigDirPollInterval, w2kStatusProcThreadMonitor=w2kStatusProcThreadMonitor, w2kStatusCpuCount=w2kStatusCpuCount, w2kQuotOk=w2kQuotOk, w2kConfigDfsAggLag=w2kConfigDfsAggLag, w2kStatusNetTotalOutErrDCrit=w2kStatusNetTotalOutErrDCrit, w2kStatusGeneralDirCrit=w2kStatusGeneralDirCrit, w2kStatusGeneralTotalCount=w2kStatusGeneralTotalCount, w2kConfigLVolLossAction=w2kConfigLVolLossAction, w2kAvailSrvcGroup=w2kAvailSrvcGroup, w2kConfigPrnGroup=w2kConfigPrnGroup, w2kStatusQuotEntry=w2kStatusQuotEntry, w2kConfigRegGroup=w2kConfigRegGroup, w2kConfigNetInErrDCrit=w2kConfigNetInErrDCrit, w2kConfigSrvcExistMonitor=w2kConfigSrvcExistMonitor, w2kStatusNetGroup=w2kStatusNetGroup, w2kStatusDirSizeCritValue=w2kStatusDirSizeCritValue, w2kMntUnknown=w2kMntUnknown, w2kStatusDirTimeValue=w2kStatusDirTimeValue, w2kConfigPrnAutoButton=w2kConfigPrnAutoButton, w2kStatusSessCpuValue=w2kStatusSessCpuValue, w2kStatusSessIds=w2kStatusSessIds, w2kMntModified=w2kMntModified, w2kStatusSrvcAutoWatcherName=w2kStatusSrvcAutoWatcherName, w2kStatusNetOutErrDWarn=w2kStatusNetOutErrDWarn, w2kConfigPrnAutoQueueWarn=w2kConfigPrnAutoQueueWarn, w2kStatusGeneralProcWarn=w2kStatusGeneralProcWarn, w2kStatusFileTimeStatus=w2kStatusFileTimeStatus, w2kAvailQuotTable=w2kAvailQuotTable, w2kStatusLVolGroup=w2kStatusLVolGroup, w2kConfigSrvcActive=w2kConfigSrvcActive, w2kStatusDfsEntry=w2kStatusDfsEntry, w2kQuotModified=w2kQuotModified, w2kStatusSessMemoryCrit=w2kStatusSessMemoryCrit, w2kAvailableGroup=w2kAvailableGroup, w2kConfigPrnAutoAggLag=w2kConfigPrnAutoAggLag, w2kStatusMemVirtLagValue=w2kStatusMemVirtLagValue, w2kStatusPrnGroup=w2kStatusPrnGroup, w2kStatusCpuTotalLoadCrit=w2kStatusCpuTotalLoadCrit, w2kAvailMntName=w2kAvailMntName, w2kHistoryGroup=w2kHistoryGroup, w2kStatusSessUserName=w2kStatusSessUserName, w2kConfigPrnAutoLossAction=w2kConfigPrnAutoLossAction, w2kConfigSrvcDescription=w2kConfigSrvcDescription, w2kConfigNetAggLag=w2kConfigNetAggLag, w2kConfigMntAutoTable=w2kConfigMntAutoTable, w2kStatusGeneralDirWarn=w2kStatusGeneralDirWarn, w2kConfigQuotPollInterval=w2kConfigQuotPollInterval, w2kConfigMemGroup=w2kConfigMemGroup, w2kStatusFileSizeRef=w2kStatusFileSizeRef, w2kStatusSrvcButton=w2kStatusSrvcButton, w2kConfigJobProcessMonitor=w2kConfigJobProcessMonitor, w2kStatusNetTotalOutErrDValue=w2kStatusNetTotalOutErrDValue, w2kConfigPrnAutoQueueMonitor=w2kConfigPrnAutoQueueMonitor, w2kStatusFileExist=w2kStatusFileExist, w2kConfigMntLossAction=w2kConfigMntLossAction, w2kStatusJobProcessMonitor=w2kStatusJobProcessMonitor, w2kConfigDfsAutoWatcherName=w2kConfigDfsAutoWatcherName, w2kStatusDfsAutoWatcherName=w2kStatusDfsAutoWatcherName, w2kStatusMntAutoWatcherName=w2kStatusMntAutoWatcherName, w2kCpuTotalCritical=w2kCpuTotalCritical, w2kConfigFileSizeMonitor=w2kConfigFileSizeMonitor, w2kStatusDirExistMonitor=w2kStatusDirExistMonitor, w2kStatusLVolSizeStatus=w2kStatusLVolSizeStatus, w2kConfigGeneralCpuPollTime=w2kConfigGeneralCpuPollTime, w2kStatusQuotExistStatus=w2kStatusQuotExistStatus, w2kStatusNetTotalOutPktWarn=w2kStatusNetTotalOutPktWarn, w2kStatusFileSizeValue=w2kStatusFileSizeValue, w2kConfigJobCpuMonitor=w2kConfigJobCpuMonitor, w2kMntDeleted=w2kMntDeleted, w2kConfigRegValueRef=w2kConfigRegValueRef, w2kStatusNetTotalOutErrDWarn=w2kStatusNetTotalOutErrDWarn, w2kConfigDirSizeCrit=w2kConfigDirSizeCrit, w2kConfigDirExistMonitor=w2kConfigDirExistMonitor, w2kStatusFileButton=w2kStatusFileButton, w2kStatusRegName=w2kStatusRegName, w2kMemPhysWarning=w2kMemPhysWarning, w2kAvailProcTable=w2kAvailProcTable, w2kStatusGeneralNetWarn=w2kStatusGeneralNetWarn, w2kStatusCpuLoadLag=w2kStatusCpuLoadLag, w2kStatusMemPhysValue=w2kStatusMemPhysValue, w2kStatusQuotUserName=w2kStatusQuotUserName, w2kConfigCpuPollMethod=w2kConfigCpuPollMethod, w2kStatusRegExist=w2kStatusRegExist, w2kStatusCpuTable=w2kStatusCpuTable, w2kConfigLVolAutoAggLag=w2kConfigLVolAutoAggLag, w2kStatusMntRelToValue=w2kStatusMntRelToValue, w2kAvailProcPathName=w2kAvailProcPathName, w2kConfigDfsAutoName=w2kConfigDfsAutoName, w2kHistoryMntCollect=w2kHistoryMntCollect, w2kStatusCpuTotalCallBackRef=w2kStatusCpuTotalCallBackRef, w2kStatusProcCpuMonitor=w2kStatusProcCpuMonitor, w2kStatusDirDescription=w2kStatusDirDescription, w2kStatusGeneralSessCount=w2kStatusGeneralSessCount, w2kStatusSessAggLag=w2kStatusSessAggLag, w2kStatusRegCount=w2kStatusRegCount, w2kSrvcDeleted=w2kSrvcDeleted, w2kConfigPrnName=w2kConfigPrnName, w2kStatusGeneralCpuWarn=w2kStatusGeneralCpuWarn, w2kPrnCritical=w2kPrnCritical, w2kStatusDirSizeWarn=w2kStatusDirSizeWarn, w2kStatusSessGroup=w2kStatusSessGroup, w2kConfigRegExistMonitor=w2kConfigRegExistMonitor, w2kStatusNetInErrDCrit=w2kStatusNetInErrDCrit, w2kStatusMemGroup=w2kStatusMemGroup, w2kSrvcInfo=w2kSrvcInfo, w2kStatusDirSizeRef=w2kStatusDirSizeRef, w2kConfigProcInstMin=w2kConfigProcInstMin, w2kConfigMntDescription=w2kConfigMntDescription, w2kConfigGeneralLVolPollTime=w2kConfigGeneralLVolPollTime, w2kStatusLVolSizeDValue=w2kStatusLVolSizeDValue, w2kStatusDfsCount=w2kStatusDfsCount, w2kStatusMntDescription=w2kStatusMntDescription, w2kStatusGeneralDfsCount=w2kStatusGeneralDfsCount, w2kStatusMemVirtStatus=w2kStatusMemVirtStatus, w2kHistoryFileCollect=w2kHistoryFileCollect, w2kSessCritical=w2kSessCritical, w2kStatusQuotAggLag=w2kStatusQuotAggLag, w2kSessWarning=w2kSessWarning, w2kStatusNetTotalOutPktStatus=w2kStatusNetTotalOutPktStatus, w2kStatusMntRelToRef=w2kStatusMntRelToRef, w2kConfigLVolAutoFragCrit=w2kConfigLVolAutoFragCrit, w2kConfigFileTimeMonitor=w2kConfigFileTimeMonitor, w2kFileWarning=w2kFileWarning, w2kConfigDfsDescription=w2kConfigDfsDescription, w2kConfigRegDescription=w2kConfigRegDescription, w2kCpuInfo=w2kCpuInfo, w2kStatusLVolSizeMonitor=w2kStatusLVolSizeMonitor, w2kStatusJobAggLagValue=w2kStatusJobAggLagValue, w2kStatusNetOutPktValue=w2kStatusNetOutPktValue, w2kProcOk=w2kProcOk, w2kHistoryQuotCollect=w2kHistoryQuotCollect, w2kConfigLVolSizeWarn=w2kConfigLVolSizeWarn, w2kStatusPrnButton=w2kStatusPrnButton, w2kStatusProcCallBackRef=w2kStatusProcCallBackRef, w2kStatusSrvcActiveValue=w2kStatusSrvcActiveValue, w2kConfigJobCpuWarn=w2kConfigJobCpuWarn, w2kHistoryCpuCollect=w2kHistoryCpuCollect, w2kConfigDirSizeMonitor=w2kConfigDirSizeMonitor, w2kStatusPrnQueueMonitor=w2kStatusPrnQueueMonitor, w2kStatusNetCallBackRef=w2kStatusNetCallBackRef, w2kConfigJobCpuCrit=w2kConfigJobCpuCrit, w2kStatusSrvcActiveMonitor=w2kStatusSrvcActiveMonitor, w2kStatusJobTable=w2kStatusJobTable, w2kStatusSrvcCallBackRef=w2kStatusSrvcCallBackRef, w2kConfigLVolTPutCrit=w2kConfigLVolTPutCrit, w2kAvailDfsCount=w2kAvailDfsCount, w2kHistoryNetCollect=w2kHistoryNetCollect, w2kPrnDeleted=w2kPrnDeleted, w2kStatusNetAggStatus=w2kStatusNetAggStatus, w2kLVolInfo=w2kLVolInfo, w2kAvailMntGroup=w2kAvailMntGroup, w2kConfigDirSizeWarn=w2kConfigDirSizeWarn, w2kProcCritical=w2kProcCritical, w2kSessUnknown=w2kSessUnknown, w2kAvailSrvcCount=w2kAvailSrvcCount, w2kFileInfo=w2kFileInfo, agents=agents, w2kConfigJobDescription=w2kConfigJobDescription, w2kConfigSrvcAutoTableWatcherName=w2kConfigSrvcAutoTableWatcherName, w2kConfigNetOutPktWarn=w2kConfigNetOutPktWarn, w2kStatusRegValueCond=w2kStatusRegValueCond, w2kConfigGeneralQuotPollTime=w2kConfigGeneralQuotPollTime, w2kConfigSrvcAutoTable=w2kConfigSrvcAutoTable, w2kConfigPrnPollInterval=w2kConfigPrnPollInterval, w2kConfigPrnAutoTable=w2kConfigPrnAutoTable, w2kConfigGeneralWarmStartTime=w2kConfigGeneralWarmStartTime, w2kStatusNetAggLagValue=w2kStatusNetAggLagValue, w2kNetAdded=w2kNetAdded, w2kStatusSrvcGroup=w2kStatusSrvcGroup, w2kCpuTotalWarning=w2kCpuTotalWarning, w2kConfigQuotUserName=w2kConfigQuotUserName, w2kStatusGeneralPrnCrit=w2kStatusGeneralPrnCrit, w2kConfigSessInstMin=w2kConfigSessInstMin, w2kConfigNetOutPktMonitor=w2kConfigNetOutPktMonitor, w2kStatusFileCallBackRef=w2kStatusFileCallBackRef, w2kStatusPrnCount=w2kStatusPrnCount, w2kStatusRegEntry=w2kStatusRegEntry, w2kStatusDirAggLagValue=w2kStatusDirAggLagValue, w2kConfigLVolAutoLossAction=w2kConfigLVolAutoLossAction, w2kStatusFileAggLagValue=w2kStatusFileAggLagValue, w2kConfigCpuLoadWarn=w2kConfigCpuLoadWarn, w2kStatusQuotCount=w2kStatusQuotCount, w2kCpuAdded=w2kCpuAdded, w2kConfigSessMemoryMonitor=w2kConfigSessMemoryMonitor, w2kConfigLVolAutoFragWarn=w2kConfigLVolAutoFragWarn, w2kStatusSessAggLagValue=w2kStatusSessAggLagValue, w2kConfigDfsReplicaCrit=w2kConfigDfsReplicaCrit, w2kConfigPrnLossAction=w2kConfigPrnLossAction, w2kStatusCpuName=w2kStatusCpuName, w2kStatusNetOutErrDCrit=w2kStatusNetOutErrDCrit, w2kAvailLVolTime=w2kAvailLVolTime, w2kDirWarning=w2kDirWarning, w2kConfigDirEntryMonitor=w2kConfigDirEntryMonitor, w2kStatusDirName=w2kStatusDirName, w2kConfigSessUserName=w2kConfigSessUserName, w2kStatusSessButton=w2kStatusSessButton, w2kAvailQuotRefresh=w2kAvailQuotRefresh, w2kStatusGeneralFileWarn=w2kStatusGeneralFileWarn, w2kPrnOk=w2kPrnOk, w2kConfigProcAggLag=w2kConfigProcAggLag, w2kConfigPrnAutoTableWatcherName=w2kConfigPrnAutoTableWatcherName, w2kStatusSessClientName=w2kStatusSessClientName, w2kConfigNetInPktCrit=w2kConfigNetInPktCrit, w2kConfigFileSizeDWarn=w2kConfigFileSizeDWarn, w2kStatusNetTotalInPktWarn=w2kStatusNetTotalInPktWarn, w2kStatusRegValueRef=w2kStatusRegValueRef, w2kStatusLVolSizeCritValue=w2kStatusLVolSizeCritValue, w2kStatusFileAggLag=w2kStatusFileAggLag, w2kSessModified=w2kSessModified, w2kConfigGroup=w2kConfigGroup, w2kConfigFileAggLag=w2kConfigFileAggLag, w2kStatusMntLossStatus=w2kStatusMntLossStatus, w2kStatusDirTimeStatus=w2kStatusDirTimeStatus, w2kStatusCpuLoadCrit=w2kStatusCpuLoadCrit, w2kConfigDfsAutoAggLag=w2kConfigDfsAutoAggLag, w2kConfigSrvcActiveMonitor=w2kConfigSrvcActiveMonitor)
mibBuilder.exportSymbols("CA-W2KOS-MIB", w2kConfigPrnAggLag=w2kConfigPrnAggLag, w2kStatusLVolAutoWatcherName=w2kStatusLVolAutoWatcherName, w2kStatusMemVirtMonitor=w2kStatusMemVirtMonitor, w2kStatusJobAggLag=w2kStatusJobAggLag, w2kConfigLVolAutoSizeMonitor=w2kConfigLVolAutoSizeMonitor, w2kStatusGeneralSrvcCrit=w2kStatusGeneralSrvcCrit, w2kStatusProcThreadMaxValue=w2kStatusProcThreadMaxValue, w2kStatusMntLossAction=w2kStatusMntLossAction, w2kStatusSrvcDescription=w2kStatusSrvcDescription, w2kStatusProcTable=w2kStatusProcTable, w2kHistoryRegCollect=w2kHistoryRegCollect, w2kStatusJobCpuCrit=w2kStatusJobCpuCrit, w2kStatusQuotSizeCrit=w2kStatusQuotSizeCrit, w2kAvailLVolName=w2kAvailLVolName, w2kHistoryDirCollect=w2kHistoryDirCollect, w2kConfigDirAggLag=w2kConfigDirAggLag, w2kAvailQuotGroup=w2kAvailQuotGroup, w2kConfigProcThreadMin=w2kConfigProcThreadMin, w2kConfigGeneralPrnPollTime=w2kConfigGeneralPrnPollTime, w2kStatusSessCpuMonitor=w2kStatusSessCpuMonitor, w2kLVolOk=w2kLVolOk, w2kConfigMntAutoDescription=w2kConfigMntAutoDescription, w2kStatusJobCpuValue=w2kStatusJobCpuValue, w2kStatusDirTimeMonitor=w2kStatusDirTimeMonitor, w2kStatusFileCount=w2kStatusFileCount, w2kStatusFileName=w2kStatusFileName, w2kAvailLVolTable=w2kAvailLVolTable, w2kConfigMntAutoButton=w2kConfigMntAutoButton, w2kStatusProcPathName=w2kStatusProcPathName, w2kStatusProcCount=w2kStatusProcCount, w2kConfigMntAutoLossAction=w2kConfigMntAutoLossAction, w2kStatusSrvcExistMonitor=w2kStatusSrvcExistMonitor, w2kStatusCpuEntry=w2kStatusCpuEntry, w2kConfigSrvcExist=w2kConfigSrvcExist, w2kAvailQuotCount=w2kAvailQuotCount, w2kConfigLVolFragWarn=w2kConfigLVolFragWarn, w2kStatusMemVirtLag=w2kStatusMemVirtLag, w2kDfsWarning=w2kDfsWarning, w2kStatusPrnAggLagValue=w2kStatusPrnAggLagValue, w2kJobOk=w2kJobOk, w2kStatusDfsLossAction=w2kStatusDfsLossAction, w2kStatusDirSizeDMonitor=w2kStatusDirSizeDMonitor, w2kStatusProcInstValue=w2kStatusProcInstValue, w2kStatusNetOutErrDStatus=w2kStatusNetOutErrDStatus, w2kNetInfo=w2kNetInfo, w2kAvailLVolMounts=w2kAvailLVolMounts, w2kConfigNetLossAction=w2kConfigNetLossAction, w2kStatusJobProcessStatus=w2kStatusJobProcessStatus, w2kStatusProcChildMaxValue=w2kStatusProcChildMaxValue, w2kStatusGeneralJobCount=w2kStatusGeneralJobCount, w2kStatusNetTotalOutErrDMonitor=w2kStatusNetTotalOutErrDMonitor, w2kCpuModified=w2kCpuModified, w2kStatusGeneralMntCount=w2kStatusGeneralMntCount, w2kAvailLVolGroup=w2kAvailLVolGroup, w2kStatusSrvcActiveStatus=w2kStatusSrvcActiveStatus, w2kStatusProcCpuStatus=w2kStatusProcCpuStatus, w2kStatusPrnAutoWatcherName=w2kStatusPrnAutoWatcherName, w2kStatusQuotExist=w2kStatusQuotExist, w2kStatusProcAggLagValue=w2kStatusProcAggLagValue, w2kFileUnknown=w2kFileUnknown, w2kConfigSrvcName=w2kConfigSrvcName, w2kStatusJobName=w2kStatusJobName, w2kConfigProcInstMonitor=w2kConfigProcInstMonitor, w2kConfigJobPollInterval=w2kConfigJobPollInterval, w2kStatusNetInErrDValue=w2kStatusNetInErrDValue, w2kStatusDfsReplicaCrit=w2kStatusDfsReplicaCrit, w2kConfigDfsAutoLossAction=w2kConfigDfsAutoLossAction, w2kConfigQuotLVolName=w2kConfigQuotLVolName, w2kStatusJobCpuWarn=w2kStatusJobCpuWarn, w2kStatusGeneralDfsCrit=w2kStatusGeneralDfsCrit, w2kStatusProcChildStatus=w2kStatusProcChildStatus, w2kFileCritical=w2kFileCritical, w2kStatusLVolButton=w2kStatusLVolButton, w2kStatusMemPhysStatus=w2kStatusMemPhysStatus, w2kStatusProcChildMax=w2kStatusProcChildMax, w2kHistoryMaxEntries=w2kHistoryMaxEntries, w2kStatusGeneralNetCount=w2kStatusGeneralNetCount, w2kStatusCpuGroup=w2kStatusCpuGroup, w2kConfigCpuPollInterval=w2kConfigCpuPollInterval, w2kStatusSrvcAggLagValue=w2kStatusSrvcAggLagValue, w2kStatusProcAggLag=w2kStatusProcAggLag, w2kStatusNetTotalAggLagValue=w2kStatusNetTotalAggLagValue, w2kStatusSessMemoryMonitor=w2kStatusSessMemoryMonitor, w2kStatusLVolTPutStatus=w2kStatusLVolTPutStatus, w2kDirCritical=w2kDirCritical, w2kStatusRegAggStatus=w2kStatusRegAggStatus, w2kConfigDirPollMethod=w2kConfigDirPollMethod, w2kConfigQuotButton=w2kConfigQuotButton, w2kConfigRegPollInterval=w2kConfigRegPollInterval, w2kAvailMntEntry=w2kAvailMntEntry, w2kAvailSessTime=w2kAvailSessTime, w2kConfigGeneralProcPollTime=w2kConfigGeneralProcPollTime, w2kMemPhysModified=w2kMemPhysModified, w2kPrnInfo=w2kPrnInfo, w2kStatusSessInstMax=w2kStatusSessInstMax, w2kConfigJobName=w2kConfigJobName, w2kDirInfo=w2kDirInfo, w2kStatusCpuLoadWarn=w2kStatusCpuLoadWarn, w2kStatusDirSizeDCrit=w2kStatusDirSizeDCrit, w2kConfigGeneralJobPollTime=w2kConfigGeneralJobPollTime, w2kSrvcAdded=w2kSrvcAdded, w2kAvailPrnName=w2kAvailPrnName, w2kConfigPrnQueueWarn=w2kConfigPrnQueueWarn, w2kStatusMemPageStatus=w2kStatusMemPageStatus, w2kAvailSessEntry=w2kAvailSessEntry, w2kDirDeleted=w2kDirDeleted, w2kAvailProcTime=w2kAvailProcTime, w2kConfigLVolAutoButton=w2kConfigLVolAutoButton, w2kConfigProcProcName=w2kConfigProcProcName, w2kAvailSessGroup=w2kAvailSessGroup, w2kStatusNetOutPktCrit=w2kStatusNetOutPktCrit, w2kDirUnknown=w2kDirUnknown, w2kLVolUnknown=w2kLVolUnknown, w2kJobWarning=w2kJobWarning, w2kConfigLVolAutoSizeWarn=w2kConfigLVolAutoSizeWarn, w2kStatusGeneralMntWarn=w2kStatusGeneralMntWarn, w2kStatusDirExistStatus=w2kStatusDirExistStatus, w2kCpuDeleted=w2kCpuDeleted, w2kConfigFilePollInterval=w2kConfigFilePollInterval, w2kStatusMntTable=w2kStatusMntTable, w2kStatusDfsReplicaValue=w2kStatusDfsReplicaValue, w2kStatusRegCallBackRef=w2kStatusRegCallBackRef, w2kConfigDfsAutoDescription=w2kConfigDfsAutoDescription, w2kConfigLVolName=w2kConfigLVolName, w2kConfigProcMemoryWarn=w2kConfigProcMemoryWarn, w2kAvailProcUserName=w2kAvailProcUserName, w2kConfigDfsButton=w2kConfigDfsButton, w2kStatusDfsTable=w2kStatusDfsTable, w2kAvailQuotEntry=w2kAvailQuotEntry, w2kDirAdded=w2kDirAdded, tng=tng, w2kSrvcCritical=w2kSrvcCritical, w2kPrnAdded=w2kPrnAdded, w2kConfigCpuLoadCrit=w2kConfigCpuLoadCrit, w2kConfigMntAutoName=w2kConfigMntAutoName, w2kStatusJobExist=w2kStatusJobExist, w2kDfsDeleted=w2kDfsDeleted, w2kStatusGeneralSessWarn=w2kStatusGeneralSessWarn, w2kStatusJobAggStatus=w2kStatusJobAggStatus, w2kConfigSrvcAutoExist=w2kConfigSrvcAutoExist, w2kConfigLVolAutoPollInterval=w2kConfigLVolAutoPollInterval, w2kConfigLVolAutoTable=w2kConfigLVolAutoTable, w2kHistorySrvcCollect=w2kHistorySrvcCollect, w2kJobModified=w2kJobModified, w2kStatusNetOutErrDMonitor=w2kStatusNetOutErrDMonitor, w2kConfigMemPollMethod=w2kConfigMemPollMethod, w2kConfigQuotGroup=w2kConfigQuotGroup, w2kStatusDirSizeDWarn=w2kStatusDirSizeDWarn, w2kRegDeleted=w2kRegDeleted, w2kConfigMntPollMethod=w2kConfigMntPollMethod, w2kCpuTotalOk=w2kCpuTotalOk, w2kConfigCpuLossAction=w2kConfigCpuLossAction, w2kConfigLVolAutoDescription=w2kConfigLVolAutoDescription, w2kConfigQuotDescription=w2kConfigQuotDescription, w2kConfigProcMemoryCrit=w2kConfigProcMemoryCrit, w2kConfigProcUserName=w2kConfigProcUserName, w2kConfigDirEntryWarn=w2kConfigDirEntryWarn, w2kConfigNetOutErrDCrit=w2kConfigNetOutErrDCrit, w2kConfigDfsGroup=w2kConfigDfsGroup, w2kStatusFileTimeMonitor=w2kStatusFileTimeMonitor, w2kStatusGeneralNetCrit=w2kStatusGeneralNetCrit, w2kMntOk=w2kMntOk, w2kAvailMntTime=w2kAvailMntTime, w2kStatusNetTotalInPktMonitor=w2kStatusNetTotalInPktMonitor, w2kConfigDfsAutoButton=w2kConfigDfsAutoButton, w2kStatusProcChildMinValue=w2kStatusProcChildMinValue, w2kConfigMntButton=w2kConfigMntButton, w2kStatusProcCpuCrit=w2kStatusProcCpuCrit, w2kAvailSessTable=w2kAvailSessTable, w2kMemVirtCritical=w2kMemVirtCritical, w2kConfigSrvcAutoAggLag=w2kConfigSrvcAutoAggLag, w2kConfigPrnButton=w2kConfigPrnButton, w2kConfigLVolAutoName=w2kConfigLVolAutoName, w2kNetTotalUnknown=w2kNetTotalUnknown, w2kStatusCpuTotalLoadLag=w2kStatusCpuTotalLoadLag, w2kAvailMntCount=w2kAvailMntCount, w2kStatusPrnEventDescr=w2kStatusPrnEventDescr, w2kStatusNetTotalInErrDWarn=w2kStatusNetTotalInErrDWarn, w2kPrnUnknown=w2kPrnUnknown, w2kConfigLVolPollInterval=w2kConfigLVolPollInterval, w2kStatusLVolFragWarn=w2kStatusLVolFragWarn, w2kConfigProcInstMax=w2kConfigProcInstMax, w2kAvailSrvcTime=w2kAvailSrvcTime, w2kMemPageCritical=w2kMemPageCritical, w2kStatusLVolSizeTotal=w2kStatusLVolSizeTotal, w2kAvailSessClientName=w2kAvailSessClientName, w2kConfigSessPollInterval=w2kConfigSessPollInterval, w2kConfigJobExistMonitor=w2kConfigJobExistMonitor, w2kConfigLVolSizeDMonitor=w2kConfigLVolSizeDMonitor, w2kConfigProcChildMax=w2kConfigProcChildMax, w2kConfigDfsAutoEntry=w2kConfigDfsAutoEntry, w2kStatusNetTotalInErrDCrit=w2kStatusNetTotalInErrDCrit, w2kStatusLVolSizeCrit=w2kStatusLVolSizeCrit, w2kConfigGeneralAgentVersion=w2kConfigGeneralAgentVersion, w2kConfigDfsAutoReplicaWarn=w2kConfigDfsAutoReplicaWarn, w2kHistoryTrapNumber=w2kHistoryTrapNumber, w2kMemVirtUnknown=w2kMemVirtUnknown, w2kNetUnknown=w2kNetUnknown, w2kStatusDirSizeDStatus=w2kStatusDirSizeDStatus, w2kStatusQuotSizeStatus=w2kStatusQuotSizeStatus, w2kAvailSrvcName=w2kAvailSrvcName, w2kConfigSrvcAggLag=w2kConfigSrvcAggLag, w2kStatusJobProcessMin=w2kStatusJobProcessMin, w2kStatusDirSizeCrit=w2kStatusDirSizeCrit, w2kStatusPrnAggLag=w2kStatusPrnAggLag, w2kConfigSysGroup=w2kConfigSysGroup, w2kConfigNetInPktWarn=w2kConfigNetInPktWarn, w2kStatusFileSizeStatus=w2kStatusFileSizeStatus, w2kLVolModified=w2kLVolModified, w2kConfigDirTimeMonitor=w2kConfigDirTimeMonitor, w2kConfigQuotSizeCrit=w2kConfigQuotSizeCrit, w2kRegAdded=w2kRegAdded, w2kStatusSrvcCount=w2kStatusSrvcCount, w2kConfigFileSizeDCrit=w2kConfigFileSizeDCrit, w2kConfigNetOutErrDMonitor=w2kConfigNetOutErrDMonitor, w2kConfigMntRelToMonitor=w2kConfigMntRelToMonitor, w2kStatusLVolAggLagValue=w2kStatusLVolAggLagValue, w2kStatusGeneralMemCount=w2kStatusGeneralMemCount, w2kStatusLVolFragCrit=w2kStatusLVolFragCrit, w2kMntInfo=w2kMntInfo, w2kConfigProcChildMonitor=w2kConfigProcChildMonitor, w2kStatusSrvcEntry=w2kStatusSrvcEntry, w2kConfigLVolAutoFragMonitor=w2kConfigLVolAutoFragMonitor, w2kStatusNetTotalOutErrDStatus=w2kStatusNetTotalOutErrDStatus, w2kConfigPrnAutoEventMonitor=w2kConfigPrnAutoEventMonitor, w2kStatusRegValueMonitor=w2kStatusRegValueMonitor, w2kConfigLVolButton=w2kConfigLVolButton, w2kCpuTotalUnknown=w2kCpuTotalUnknown, w2kStatusLVolSizeDWarn=w2kStatusLVolSizeDWarn, w2kMemVirtWarning=w2kMemVirtWarning, w2kStatusSrvcAggStatus=w2kStatusSrvcAggStatus, w2kMemPageUnknown=w2kMemPageUnknown, w2kConfigLVolAutoEntry=w2kConfigLVolAutoEntry, w2kConfigNetOutPktCrit=w2kConfigNetOutPktCrit, w2kConfigRegValueMonitor=w2kConfigRegValueMonitor, w2kLVolAdded=w2kLVolAdded, w2kDfsOk=w2kDfsOk, w2kConfigLVolFragCrit=w2kConfigLVolFragCrit, w2kConfigFileSizeWarn=w2kConfigFileSizeWarn, w2kAvailProcEntry=w2kAvailProcEntry, w2kConfigSrvcAutoEntry=w2kConfigSrvcAutoEntry, w2kConfigRegPollMethod=w2kConfigRegPollMethod, w2kConfigJobPollMethod=w2kConfigJobPollMethod, w2kStatusNetInPktWarn=w2kStatusNetInPktWarn, w2kStatusDfsReplicaTotal=w2kStatusDfsReplicaTotal, w2kStatusLVolLossStatus=w2kStatusLVolLossStatus, w2kRegUnknown=w2kRegUnknown, w2kConfigSessButton=w2kConfigSessButton, w2kConfigLVolAutoTPutCrit=w2kConfigLVolAutoTPutCrit, w2kConfigGeneralRegPollTime=w2kConfigGeneralRegPollTime, w2kStatusGeneralQuotCount=w2kStatusGeneralQuotCount, w2kConfigQuotSizeWarn=w2kConfigQuotSizeWarn, w2kStatusDirTable=w2kStatusDirTable, w2kStatusSessCpuCrit=w2kStatusSessCpuCrit)
mibBuilder.exportSymbols("CA-W2KOS-MIB", w2kStatusSrvcExistStatus=w2kStatusSrvcExistStatus, w2kStatusGroup=w2kStatusGroup, w2kStatusDfsName=w2kStatusDfsName, w2kStatusPrnEntry=w2kStatusPrnEntry, w2kConfigSrvcAutoName=w2kConfigSrvcAutoName, w2kConfigFileName=w2kConfigFileName, w2kStatusCpuType=w2kStatusCpuType, w2kConfigQuotExist=w2kConfigQuotExist, w2kConfigSrvcAutoActive=w2kConfigSrvcAutoActive, w2kConfigNetInErrDMonitor=w2kConfigNetInErrDMonitor, w2kStatusMemPageMonitor=w2kStatusMemPageMonitor, w2kStatusProcThreadMinValue=w2kStatusProcThreadMinValue, w2kConfigSrvcAutoActiveMonitor=w2kConfigSrvcAutoActiveMonitor, w2kStatusNetOutErrDValue=w2kStatusNetOutErrDValue, w2kStatusRegButton=w2kStatusRegButton, w2kStatusLVolEntry=w2kStatusLVolEntry, w2kStatusSessEntry=w2kStatusSessEntry, w2kAvailJobCount=w2kAvailJobCount, w2kStatusPrnQueueCrit=w2kStatusPrnQueueCrit, w2kStatusNetAggLag=w2kStatusNetAggLag, w2kStatusGeneralJobCrit=w2kStatusGeneralJobCrit, w2kStatusDirCount=w2kStatusDirCount, w2kConfigLVolDescription=w2kConfigLVolDescription, w2kConfigLVolSizeMonitor=w2kConfigLVolSizeMonitor, w2kStatusDfsReplicaWarn=w2kStatusDfsReplicaWarn, w2kStatusDfsAggLagValue=w2kStatusDfsAggLagValue, w2kFileOk=w2kFileOk, w2kJobInfo=w2kJobInfo, w2kRegCritical=w2kRegCritical, w2kConfigPrnQueueCrit=w2kConfigPrnQueueCrit, w2kConfigRegExist=w2kConfigRegExist, w2kStatusCpuTotalLoadValue=w2kStatusCpuTotalLoadValue, w2kStatusQuotTable=w2kStatusQuotTable, w2kHistorySessCollect=w2kHistorySessCollect, w2kLVolCritical=w2kLVolCritical, w2kStatusPrnQueueStatus=w2kStatusPrnQueueStatus, w2kAvailProcRefresh=w2kAvailProcRefresh, w2kConfigMntAggLag=w2kConfigMntAggLag, w2kConfigMntGroup=w2kConfigMntGroup, w2kLVolDeleted=w2kLVolDeleted, w2kStatusProcThreadMin=w2kStatusProcThreadMin, w2kConfigProcMemoryMonitor=w2kConfigProcMemoryMonitor, w2kStatusLVolCount=w2kStatusLVolCount, w2kStatusDfsButton=w2kStatusDfsButton, w2kStatusFileDescription=w2kStatusFileDescription, w2kStatusPrnQueueValue=w2kStatusPrnQueueValue, w2kSessInfo=w2kSessInfo, w2kStatusNetTotalInErrDStatus=w2kStatusNetTotalInErrDStatus, w2kHistoryProcCollect=w2kHistoryProcCollect, w2kStatusRegDescription=w2kStatusRegDescription, w2kStatusCpuCallBackRef=w2kStatusCpuCallBackRef, w2kConfigRegAggLag=w2kConfigRegAggLag, w2kStatusNetLossAction=w2kStatusNetLossAction, w2kStatusJobCpuStatus=w2kStatusJobCpuStatus, w2kConfigPrnAutoPollInterval=w2kConfigPrnAutoPollInterval, w2kConfigRegButton=w2kConfigRegButton, w2kStatusProcInstStatus=w2kStatusProcInstStatus, w2kStatusCpuTotalLoadLagValue=w2kStatusCpuTotalLoadLagValue, w2kStatusDirSizeDCritValue=w2kStatusDirSizeDCritValue, w2kStatusGeneralPrnCount=w2kStatusGeneralPrnCount, w2kStatusProcInstMax=w2kStatusProcInstMax, w2kStatusMemPageWarn=w2kStatusMemPageWarn, w2kStatusProcThreadStatus=w2kStatusProcThreadStatus, w2kStatusCpuLossAction=w2kStatusCpuLossAction, w2kConfigProcDescription=w2kConfigProcDescription, w2kStatusDirAggStatus=w2kStatusDirAggStatus, w2kStatusMemPageCrit=w2kStatusMemPageCrit, w2kStatusJobCallBackRef=w2kStatusJobCallBackRef, w2kStatusRegValueStatus=w2kStatusRegValueStatus, w2kLVolWarning=w2kLVolWarning, w2kStatusMemPageLag=w2kStatusMemPageLag, w2kStatusLVolCallBackRef=w2kStatusLVolCallBackRef, w2kStatusNetTotalInPktCrit=w2kStatusNetTotalInPktCrit, w2kStatusLVolSizeWarn=w2kStatusLVolSizeWarn, w2kStatusPrnEventStatus=w2kStatusPrnEventStatus, w2kStatusQuotAggLagValue=w2kStatusQuotAggLagValue, w2kConfigFileGroup=w2kConfigFileGroup, w2kDirOk=w2kDirOk, w2kSrvcOk=w2kSrvcOk, w2kStatusNetTotalInErrDValue=w2kStatusNetTotalInErrDValue, w2kStatusGeneralCpuCount=w2kStatusGeneralCpuCount, w2kAvailLVolRefresh=w2kAvailLVolRefresh, w2kHistoryMemCollect=w2kHistoryMemCollect, w2kStatusSessCpuStatus=w2kStatusSessCpuStatus, w2kStatusGeneralDfsWarn=w2kStatusGeneralDfsWarn, w2kStatusPrnQueueWarn=w2kStatusPrnQueueWarn, w2kConfigLVolPollMethod=w2kConfigLVolPollMethod, w2kConfigSrvcPollInterval=w2kConfigSrvcPollInterval, w2kStatusMemVirtValue=w2kStatusMemVirtValue, w2kStatusMemVirtWarn=w2kStatusMemVirtWarn, w2kStatusMemCallBackRef=w2kStatusMemCallBackRef, w2kStatusDirButton=w2kStatusDirButton, w2kConfigSysBios=w2kConfigSysBios, w2kNetTotalOk=w2kNetTotalOk, w2kConfigGeneralGroup=w2kConfigGeneralGroup, w2kConfigPrnQueueMonitor=w2kConfigPrnQueueMonitor, w2kStatusCpuTotalLoadMonitor=w2kStatusCpuTotalLoadMonitor, w2kConfigSrvcButton=w2kConfigSrvcButton, w2kStatusProcButton=w2kStatusProcButton, w2kStatusNetInErrDWarn=w2kStatusNetInErrDWarn, w2kProcUnknown=w2kProcUnknown, w2kConfigJobGroup=w2kConfigJobGroup, w2kConfigMntName=w2kConfigMntName, w2kConfigProcCpuWarn=w2kConfigProcCpuWarn, w2kStatusGeneralCpuCrit=w2kStatusGeneralCpuCrit, w2kStatusGeneralLVolWarn=w2kStatusGeneralLVolWarn, w2kAvailPrnRefresh=w2kAvailPrnRefresh, w2kConfigDirSizeDMonitor=w2kConfigDirSizeDMonitor, w2kConfigSessPollMethod=w2kConfigSessPollMethod, w2kStatusDirEntryValue=w2kStatusDirEntryValue, w2kAvailQuotUserName=w2kAvailQuotUserName, w2kStatusDirSizeStatus=w2kStatusDirSizeStatus, w2kProcAdded=w2kProcAdded, w2kNetCritical=w2kNetCritical, w2kStatusMemPhysCrit=w2kStatusMemPhysCrit, w2kNetDeleted=w2kNetDeleted, w2kStatusDirSizeDWarnValue=w2kStatusDirSizeDWarnValue, w2kConfigFileButton=w2kConfigFileButton, w2kStatusSessInstValue=w2kStatusSessInstValue, w2kMemVirtOk=w2kMemVirtOk, w2kStatusLVolTable=w2kStatusLVolTable, w2kConfigMntAutoEntry=w2kConfigMntAutoEntry, w2kConfigDfsPollMethod=w2kConfigDfsPollMethod, w2kStatusQuotCallBackRef=w2kStatusQuotCallBackRef, w2kConfigLVolGroup=w2kConfigLVolGroup, w2kDfsModified=w2kDfsModified, w2kStatusNetTotalOutPktMonitor=w2kStatusNetTotalOutPktMonitor, w2kStatusJobEntry=w2kStatusJobEntry, w2kStatusLVolTPutValue=w2kStatusLVolTPutValue, w2kConfigQuotPollMethod=w2kConfigQuotPollMethod, w2kStatusNetTotalAggLag=w2kStatusNetTotalAggLag, w2kConfigDirGroup=w2kConfigDirGroup, w2kFileDeleted=w2kFileDeleted, w2kStatusProcInstMonitor=w2kStatusProcInstMonitor, w2kConfigLVolAutoTPutWarn=w2kConfigLVolAutoTPutWarn, w2kStatusMntRelToMonitor=w2kStatusMntRelToMonitor, w2kSessAdded=w2kSessAdded, w2kStatusJobExistStatus=w2kStatusJobExistStatus, w2kStatusRegAggLag=w2kStatusRegAggLag, w2kConfigSrvcAutoWatcherName=w2kConfigSrvcAutoWatcherName, w2kConfigLVolAutoTPutMonitor=w2kConfigLVolAutoTPutMonitor, w2kStatusFileTimeRef=w2kStatusFileTimeRef, w2kAvailQuotLVolName=w2kAvailQuotLVolName, w2kAvailMntTable=w2kAvailMntTable, w2kAvailSessCount=w2kAvailSessCount, w2kStatusGeneralMemWarn=w2kStatusGeneralMemWarn, w2kStatusJobExistMonitor=w2kStatusJobExistMonitor, w2kConfigQuotSizeMonitor=w2kConfigQuotSizeMonitor, w2kConfigSrvcAutoPollInterval=w2kConfigSrvcAutoPollInterval, w2kConfigProcPathName=w2kConfigProcPathName, w2kStatusGeneralMemCrit=w2kStatusGeneralMemCrit, w2kAvailPrnTable=w2kAvailPrnTable, w2kAvailPrnTime=w2kAvailPrnTime, w2kStatusLVolTPutWarn=w2kStatusLVolTPutWarn, w2kStatusQuotSizeValue=w2kStatusQuotSizeValue, w2kJobAdded=w2kJobAdded, w2kStatusJobProcessValue=w2kStatusJobProcessValue, w2kAvailPrnEntry=w2kAvailPrnEntry, w2kStatusSessAggStatus=w2kStatusSessAggStatus, w2kConfigFileSizeDMonitor=w2kConfigFileSizeDMonitor, w2kStatusDfsIds=w2kStatusDfsIds, w2kStatusRegExistStatus=w2kStatusRegExistStatus, w2kConfigSessGroup=w2kConfigSessGroup, w2kStatusCpuLoadValue=w2kStatusCpuLoadValue, w2kHistoryTrapName=w2kHistoryTrapName, w2kAvailSrvcTable=w2kAvailSrvcTable, w2kStatusDfsLossStatus=w2kStatusDfsLossStatus, w2kStatusNetTotalOutPktCrit=w2kStatusNetTotalOutPktCrit, w2kConfigSessCpuWarn=w2kConfigSessCpuWarn, w2kConfigCpuLoadLag=w2kConfigCpuLoadLag, w2kStatusPrnTable=w2kStatusPrnTable, w2kStatusCpuTotalLoadWarn=w2kStatusCpuTotalLoadWarn, w2kNetModified=w2kNetModified, w2kConfigNetOutErrDWarn=w2kConfigNetOutErrDWarn, w2kStatusRegExistMonitor=w2kStatusRegExistMonitor, w2kConfigDfsAutoPollInterval=w2kConfigDfsAutoPollInterval, w2kStatusQuotDescription=w2kStatusQuotDescription, w2kStatusMemPhysTotal=w2kStatusMemPhysTotal, w2kCpuOk=w2kCpuOk, w2kConfigSessMemoryWarn=w2kConfigSessMemoryWarn, w2kStatusMemPhysMonitor=w2kStatusMemPhysMonitor, w2kStatusMntAggLagValue=w2kStatusMntAggLagValue, w2kStatusProcMemoryWarn=w2kStatusProcMemoryWarn, w2kStatusMemPhysLag=w2kStatusMemPhysLag, w2kQuotUnknown=w2kQuotUnknown, w2kConfigLVolAutoSizeCrit=w2kConfigLVolAutoSizeCrit, w2kStatusLVolInfo=w2kStatusLVolInfo, w2kStatusLVolLossAction=w2kStatusLVolLossAction, w2kStatusSessMemoryWarn=w2kStatusSessMemoryWarn, w2kStatusFileSizeDStatus=w2kStatusFileSizeDStatus, w2kAvailSrvcRefresh=w2kAvailSrvcRefresh, w2kFileModified=w2kFileModified, w2kAvailSrvcEntry=w2kAvailSrvcEntry, w2kConfigPrnAutoDescription=w2kConfigPrnAutoDescription, w2kStatusMntRelToStatus=w2kStatusMntRelToStatus, w2kHistoryDfsCollect=w2kHistoryDfsCollect, w2kStatusNetInErrDStatus=w2kStatusNetInErrDStatus, w2kConfigGeneralColdStartTime=w2kConfigGeneralColdStartTime, w2kNetTotalInfo=w2kNetTotalInfo, w2kConfigDirSizeDWarn=w2kConfigDirSizeDWarn, w2kStatusFileSizeDWarn=w2kStatusFileSizeDWarn, w2kAvailDfsRefresh=w2kAvailDfsRefresh, w2kStatusMntCount=w2kStatusMntCount, w2kProcInfo=w2kProcInfo, w2kConfigLVolFragPollInterval=w2kConfigLVolFragPollInterval, w2kConfigMntPollInterval=w2kConfigMntPollInterval, w2kStatusMemPhysWarn=w2kStatusMemPhysWarn, w2kStatusSessInstMin=w2kStatusSessInstMin, w2kStatusGeneralJobWarn=w2kStatusGeneralJobWarn, w2kDfsAdded=w2kDfsAdded, w2kConfigLVolTPutMonitor=w2kConfigLVolTPutMonitor, w2kConfigDfsAutoReplicaCrit=w2kConfigDfsAutoReplicaCrit, w2kMntAdded=w2kMntAdded, w2kMemPhysOk=w2kMemPhysOk, w2kStatusProcCpuValue=w2kStatusProcCpuValue, w2kConfigJobProcessMax=w2kConfigJobProcessMax, w2kConfigLVolAutoTableWatcherName=w2kConfigLVolAutoTableWatcherName, w2kMemPageWarning=w2kMemPageWarning, w2kNetWarning=w2kNetWarning, w2kConfigSessDescription=w2kConfigSessDescription, w2kAvailLVolCount=w2kAvailLVolCount, w2kStatusProcMemoryStatus=w2kStatusProcMemoryStatus, w2kProcWarning=w2kProcWarning, w2kHistoryPrnCollect=w2kHistoryPrnCollect, w2kConfigPrnEventMonitor=w2kConfigPrnEventMonitor, w2kStatusProcMemoryMonitor=w2kStatusProcMemoryMonitor, w2kStatusMemPhysCritValue=w2kStatusMemPhysCritValue, w2kStatusMntEntry=w2kStatusMntEntry, w2kStatusDirExist=w2kStatusDirExist, w2kCpuTotalModified=w2kCpuTotalModified, w2kConfigProcChildMin=w2kConfigProcChildMin, w2kStatusLVolAggLag=w2kStatusLVolAggLag, w2kStatusNetLossStatus=w2kStatusNetLossStatus, w2kStatusMemPageCritValue=w2kStatusMemPageCritValue, w2kStatusRegValueType=w2kStatusRegValueType, w2kStatusMemPageTotal=w2kStatusMemPageTotal, w2kStatusDfsCallBackRef=w2kStatusDfsCallBackRef, w2kMntWarning=w2kMntWarning, w2kStatusFileAggStatus=w2kStatusFileAggStatus, w2kStatusPrnLossStatus=w2kStatusPrnLossStatus, w2kStatusMemPhysWarnValue=w2kStatusMemPhysWarnValue, w2kStatusPrnLossAction=w2kStatusPrnLossAction, cai=cai, w2kStatusFileSizeCritValue=w2kStatusFileSizeCritValue, w2kConfigDfsReplicaMonitor=w2kConfigDfsReplicaMonitor, w2kConfigSessAggLag=w2kConfigSessAggLag, w2kStatusPrnCallBackRef=w2kStatusPrnCallBackRef, w2kConfigLVolFragMonitor=w2kConfigLVolFragMonitor, w2kConfigSessMemoryCrit=w2kConfigSessMemoryCrit, w2kAvailLVolInfo=w2kAvailLVolInfo, w2kAvailMntRefresh=w2kAvailMntRefresh, w2kConfigFilePollMethod=w2kConfigFilePollMethod, w2kStatusRegAggLagValue=w2kStatusRegAggLagValue, w2kConfigGeneralDirPollTime=w2kConfigGeneralDirPollTime)
mibBuilder.exportSymbols("CA-W2KOS-MIB", w2kStatusGeneralMntCrit=w2kStatusGeneralMntCrit, w2kConfigPrnAutoWatcherName=w2kConfigPrnAutoWatcherName, w2kConfigPrnDescription=w2kConfigPrnDescription, w2kConfigDirEntryCrit=w2kConfigDirEntryCrit, w2kAvailDfsName=w2kAvailDfsName, w2kConfigJobExist=w2kConfigJobExist, w2kMemPhysCritical=w2kMemPhysCritical, w2kMemVirtModified=w2kMemVirtModified, w2kStatusDirTimeRef=w2kStatusDirTimeRef, w2kStatusDfsReplicaStatus=w2kStatusDfsReplicaStatus, w2kStatusLVolFragStatus=w2kStatusLVolFragStatus, w2kConfigMntAutoWatcherName=w2kConfigMntAutoWatcherName, w2kStatusSrvcActive=w2kStatusSrvcActive, w2kConfigSysVersion=w2kConfigSysVersion, w2kHistoryLVolCollect=w2kHistoryLVolCollect, w2kSrvcUnknown=w2kSrvcUnknown, w2kHistoryTable=w2kHistoryTable, w2kAvailSessUserName=w2kAvailSessUserName, w2kProcDeleted=w2kProcDeleted, w2kConfigJobButton=w2kConfigJobButton, w2kStatusGeneralFileCount=w2kStatusGeneralFileCount, w2kStatusGeneralFileCrit=w2kStatusGeneralFileCrit, w2kStatusMntAggLag=w2kStatusMntAggLag, w2kStatusMntCallBackRef=w2kStatusMntCallBackRef, w2kAvailLVolEntry=w2kAvailLVolEntry, w2kAvailPrnGroup=w2kAvailPrnGroup, w2kStatusLVolSizeDMonitor=w2kStatusLVolSizeDMonitor, w2kStatusGeneralPrnWarn=w2kStatusGeneralPrnWarn, w2kRegWarning=w2kRegWarning, w2kFileAdded=w2kFileAdded, w2kStatusLVolSizeWarnValue=w2kStatusLVolSizeWarnValue, w2kStatusProcUserName=w2kStatusProcUserName, w2kStatusDirSizeValue=w2kStatusDirSizeValue, w2kStatusProcMemoryValue=w2kStatusProcMemoryValue, w2kConfigGeneralSessPollTime=w2kConfigGeneralSessPollTime, w2kStatusGeneralDirCount=w2kStatusGeneralDirCount, w2kStatusGeneralSessCrit=w2kStatusGeneralSessCrit, w2kStatusFileSizeDValue=w2kStatusFileSizeDValue, w2kStatusQuotExistMonitor=w2kStatusQuotExistMonitor, w2kAvailProcCount=w2kAvailProcCount, w2kJobCritical=w2kJobCritical, w2kStatusJobCount=w2kStatusJobCount, w2kConfigNetInErrDWarn=w2kConfigNetInErrDWarn, w2kConfigDfsAutoTableWatcherName=w2kConfigDfsAutoTableWatcherName, w2kStatusCpuLoadStatus=w2kStatusCpuLoadStatus, w2kStatusCpuTotalLoadStatus=w2kStatusCpuTotalLoadStatus, w2kStatusMntName=w2kStatusMntName, w2kStatusProcMemoryCrit=w2kStatusProcMemoryCrit, w2kDirModified=w2kDirModified, w2kAvailProcGroup=w2kAvailProcGroup, w2kConfigLVolSizeDCrit=w2kConfigLVolSizeDCrit, w2kConfigRegValueCond=w2kConfigRegValueCond, w2kMemPageOk=w2kMemPageOk, w2kStatusGeneralSrvcCount=w2kStatusGeneralSrvcCount, w2kStatusGeneralLVolCount=w2kStatusGeneralLVolCount, w2kStatusMntButton=w2kStatusMntButton, w2kRegInfo=w2kRegInfo, w2kStatusLVolTPutCrit=w2kStatusLVolTPutCrit, w2kAvailDfsTime=w2kAvailDfsTime, w2kStatusMntAggStatus=w2kStatusMntAggStatus, w2kConfigNetInPktMonitor=w2kConfigNetInPktMonitor, w2kAvailJobTime=w2kAvailJobTime, w2kStatusJobCpuMonitor=w2kStatusJobCpuMonitor, w2kStatusSessCpuWarn=w2kStatusSessCpuWarn, caiW2kOs=caiW2kOs, w2kStatusGeneralProcCrit=w2kStatusGeneralProcCrit, w2kStatusNetTotalInErrDMonitor=w2kStatusNetTotalInErrDMonitor, w2kStatusCpuLoadLagValue=w2kStatusCpuLoadLagValue, w2kStatusLVolMounts=w2kStatusLVolMounts, w2kConfigLVolAggLag=w2kConfigLVolAggLag, w2kConfigPrnAutoQueueCrit=w2kConfigPrnAutoQueueCrit, w2kHistoryTrapVarBind=w2kHistoryTrapVarBind, w2kStatusQuotLVolName=w2kStatusQuotLVolName, w2kConfigMntAutoAggLag=w2kConfigMntAutoAggLag, w2kCpuCritical=w2kCpuCritical, w2kMemPageModified=w2kMemPageModified, w2kConfigSrvcGroup=w2kConfigSrvcGroup, w2kProcModified=w2kProcModified, w2kConfigFileExistMonitor=w2kConfigFileExistMonitor, w2kConfigGeneralSrvcPollTime=w2kConfigGeneralSrvcPollTime, w2kConfigProcButton=w2kConfigProcButton, w2kSessDeleted=w2kSessDeleted, w2kNetTotalCritical=w2kNetTotalCritical, w2kStatusGeneralRegCount=w2kStatusGeneralRegCount, w2kConfigDfsPollInterval=w2kConfigDfsPollInterval, w2kConfigSessCpuCrit=w2kConfigSessCpuCrit, w2kStatusDirSizeDValue=w2kStatusDirSizeDValue, w2kStatusNetOutPktWarn=w2kStatusNetOutPktWarn, w2kAvailSessRefresh=w2kAvailSessRefresh, w2kStatusSessInstStatus=w2kStatusSessInstStatus, w2kCpuWarning=w2kCpuWarning, w2kConfigProcGroup=w2kConfigProcGroup, w2kConfigQuotExistMonitor=w2kConfigQuotExistMonitor, w2kConfigDfsName=w2kConfigDfsName, w2kConfigProcPollInterval=w2kConfigProcPollInterval, w2kStatusDfsAggStatus=w2kStatusDfsAggStatus, w2kConfigSrvcPollMethod=w2kConfigSrvcPollMethod, w2kStatusProcIds=w2kStatusProcIds, w2kMntCritical=w2kMntCritical, w2kStatusRegGroup=w2kStatusRegGroup, w2kStatusDirSizeWarnValue=w2kStatusDirSizeWarnValue, w2kRegModified=w2kRegModified, w2kStatusNetInPktCrit=w2kStatusNetInPktCrit, w2kStatusLVolDescription=w2kStatusLVolDescription, w2kPrnModified=w2kPrnModified, w2kQuotAdded=w2kQuotAdded, w2kAvailMntRelTo=w2kAvailMntRelTo, w2kStatusGeneralTotalCrit=w2kStatusGeneralTotalCrit, w2kStatusPrnName=w2kStatusPrnName, w2kConfigSysNodeName=w2kConfigSysNodeName, w2kStatusSessDescription=w2kStatusSessDescription, w2kStatusGeneralGroup=w2kStatusGeneralGroup, w2kRegOk=w2kRegOk, w2kConfigMemPollInterval=w2kConfigMemPollInterval, w2kAvailJobRefresh=w2kAvailJobRefresh, w2kConfigDirButton=w2kConfigDirButton, w2kStatusFileSizeWarn=w2kStatusFileSizeWarn, w2kSrvcModified=w2kSrvcModified, w2kStatusNetOutPktStatus=w2kStatusNetOutPktStatus, w2kStatusFileSizeDCritValue=w2kStatusFileSizeDCritValue, w2kStatusJobProcessMax=w2kStatusJobProcessMax, w2kStatusProcAggStatus=w2kStatusProcAggStatus, w2kConfigPrnAutoEntry=w2kConfigPrnAutoEntry, w2kStatusPrnDescription=w2kStatusPrnDescription, w2kAvailPrnCount=w2kAvailPrnCount, w2kConfigSessInstMonitor=w2kConfigSessInstMonitor, w2kQuotInfo=w2kQuotInfo, w2kStatusMemPageValue=w2kStatusMemPageValue, w2kMemPhysUnknown=w2kMemPhysUnknown, w2kStatusDirCallBackRef=w2kStatusDirCallBackRef, w2kSessOk=w2kSessOk, w2kConfigPrnPollMethod=w2kConfigPrnPollMethod, w2kStatusNetTotalAggStatus=w2kStatusNetTotalAggStatus, w2kAvailDfsEntry=w2kAvailDfsEntry, w2kStatusMemVirtCrit=w2kStatusMemVirtCrit, w2kConfigLVolAutoWatcherName=w2kConfigLVolAutoWatcherName, w2kStatusFileExistStatus=w2kStatusFileExistStatus, w2kStatusDfsReplicaMonitor=w2kStatusDfsReplicaMonitor, w2kStatusMemVirtTotal=w2kStatusMemVirtTotal, w2kStatusLVolAggStatus=w2kStatusLVolAggStatus, w2kStatusProcThreadMax=w2kStatusProcThreadMax, w2kStatusNetCount=w2kStatusNetCount, w2kStatusFileSizeWarnValue=w2kStatusFileSizeWarnValue, w2kConfigDfsAutoTable=w2kConfigDfsAutoTable, w2kConfigDirExist=w2kConfigDirExist, w2kConfigFileDescription=w2kConfigFileDescription, w2kStatusProcInstMin=w2kStatusProcInstMin, w2kStatusNetTotalInPktValue=w2kStatusNetTotalInPktValue, w2kStatusDirSizeMonitor=w2kStatusDirSizeMonitor, w2kStatusNetTotalOutPktValue=w2kStatusNetTotalOutPktValue, w2kStatusJobDescription=w2kStatusJobDescription, w2kHistoryButton=w2kHistoryButton, w2kNetTotalModified=w2kNetTotalModified, w2kConfigNetGroup=w2kConfigNetGroup, w2kStatusLVolFragValue=w2kStatusLVolFragValue, w2kStatusDfsAggLag=w2kStatusDfsAggLag, w2kConfigDfsReplicaWarn=w2kConfigDfsReplicaWarn, w2kStatusQuotButton=w2kStatusQuotButton, w2kAvailProcProcName=w2kAvailProcProcName, w2kDfsCritical=w2kDfsCritical, w2kConfigDfsAutoReplicaMonitor=w2kConfigDfsAutoReplicaMonitor, w2kAvailQuotLimit=w2kAvailQuotLimit, w2kDfsUnknown=w2kDfsUnknown, w2kDfsInfo=w2kDfsInfo, w2kStatusNetTotalCallBackRef=w2kStatusNetTotalCallBackRef, w2kConfigLVolAutoSizeDMonitor=w2kConfigLVolAutoSizeDMonitor, w2kStatusNetInPktValue=w2kStatusNetInPktValue, w2kStatusMemPhysLagValue=w2kStatusMemPhysLagValue, w2kHistoryEntry=w2kHistoryEntry, w2kConfigSessClientName=w2kConfigSessClientName, w2kAvailJobGroup=w2kAvailJobGroup, w2kConfigLVolSizeDWarn=w2kConfigLVolSizeDWarn, w2kHistoryTrapTime=w2kHistoryTrapTime, w2kStatusPrnEventMonitor=w2kStatusPrnEventMonitor, w2kStatusFileSizeDMonitor=w2kStatusFileSizeDMonitor, w2kAvailDfsGroup=w2kAvailDfsGroup, w2kStatusProcCpuWarn=w2kStatusProcCpuWarn, w2kStatusSrvcExist=w2kStatusSrvcExist, w2kStatusQuotSizeWarn=w2kStatusQuotSizeWarn, w2kConfigMntAutoRelToMonitor=w2kConfigMntAutoRelToMonitor, w2kAvailJobTable=w2kAvailJobTable, w2kConfigDirName=w2kConfigDirName, w2kStatusLVolName=w2kStatusLVolName, w2kAvailJobName=w2kAvailJobName, w2kSrvcWarning=w2kSrvcWarning, w2kConfigLVolAutoSizeDCrit=w2kConfigLVolAutoSizeDCrit, w2kStatusProcProcName=w2kStatusProcProcName, w2kStatusFileSizeMonitor=w2kStatusFileSizeMonitor, w2kConfigDfsLossAction=w2kConfigDfsLossAction, w2kStatusLVolSizeDWarnValue=w2kStatusLVolSizeDWarnValue, w2kStatusSessCallBackRef=w2kStatusSessCallBackRef, w2kStatusGeneralRegWarn=w2kStatusGeneralRegWarn, w2kAvailQuotTime=w2kAvailQuotTime, w2kConfigSessInstMax=w2kConfigSessInstMax, caiSysMgr=caiSysMgr, w2kStatusMemPageLagValue=w2kStatusMemPageLagValue, w2kConfigGeneralFilePollTime=w2kConfigGeneralFilePollTime, w2kHistoryJobCollect=w2kHistoryJobCollect, w2kNetOk=w2kNetOk, w2kConfigGeneralNetPollTime=w2kConfigGeneralNetPollTime, w2kConfigDirDescription=w2kConfigDirDescription, w2kConfigSrvcAutoExistMonitor=w2kConfigSrvcAutoExistMonitor, w2kStatusGeneralTotalWarn=w2kStatusGeneralTotalWarn, w2kStatusProcChildMin=w2kStatusProcChildMin, w2kNetTotalWarning=w2kNetTotalWarning, w2kConfigLVolTPutWarn=w2kConfigLVolTPutWarn, w2kStatusSessMemoryStatus=w2kStatusSessMemoryStatus, w2kConfigGeneralMemPollTime=w2kConfigGeneralMemPollTime, w2kConfigProcThreadMonitor=w2kConfigProcThreadMonitor, w2kStatusProcEntry=w2kStatusProcEntry, w2kConfigMntAutoTableWatcherName=w2kConfigMntAutoTableWatcherName, w2kStatusFileTable=w2kStatusFileTable, w2kStatusNetInErrDMonitor=w2kStatusNetInErrDMonitor, w2kJobDeleted=w2kJobDeleted, w2kStatusNetInPktMonitor=w2kStatusNetInPktMonitor, w2kStatusProcGroup=w2kStatusProcGroup, w2kStatusLVolSizeValue=w2kStatusLVolSizeValue, w2kConfigSessCpuMonitor=w2kConfigSessCpuMonitor, w2kStatusMemVirtWarnValue=w2kStatusMemVirtWarnValue, w2kStatusSessCount=w2kStatusSessCount, w2kConfigNetPollMethod=w2kConfigNetPollMethod, w2kStatusCpuLossStatus=w2kStatusCpuLossStatus, w2kConfigProcCpuMonitor=w2kConfigProcCpuMonitor, w2kConfigRegName=w2kConfigRegName, w2kStatusSessInstMonitor=w2kStatusSessInstMonitor, w2kStatusSessTable=w2kStatusSessTable, w2kStatusFileSizeDWarnValue=w2kStatusFileSizeDWarnValue, w2kStatusLVolSizeDCritValue=w2kStatusLVolSizeDCritValue, w2kStatusRegValueValue=w2kStatusRegValueValue, w2kConfigLVolSizeCrit=w2kConfigLVolSizeCrit, w2kStatusLVolTPutMonitor=w2kStatusLVolTPutMonitor, w2kConfigGeneralDfsPollTime=w2kConfigGeneralDfsPollTime, w2kConfigLVolAutoSizeDWarn=w2kConfigLVolAutoSizeDWarn, w2kStatusGeneralRegCrit=w2kStatusGeneralRegCrit, w2kConfigGeneralMntPollTime=w2kConfigGeneralMntPollTime, w2kStatusQuotAggStatus=w2kStatusQuotAggStatus, w2kConfigNetPollInterval=w2kConfigNetPollInterval, w2kStatusNetName=w2kStatusNetName, w2kStatusRegTable=w2kStatusRegTable, w2kStatusGeneralQuotCrit=w2kStatusGeneralQuotCrit, w2kAvailSrvcDescr=w2kAvailSrvcDescr, w2kStatusNetTotalInPktStatus=w2kStatusNetTotalInPktStatus, w2kStatusGeneralSrvcWarn=w2kStatusGeneralSrvcWarn, w2kStatusJobGroup=w2kStatusJobGroup, w2kConfigJobProcessMin=w2kConfigJobProcessMin, w2kStatusGeneralLVolCrit=w2kStatusGeneralLVolCrit, w2kStatusLVolSizeDStatus=w2kStatusLVolSizeDStatus, w2kStatusDirEntryStatus=w2kStatusDirEntryStatus, w2kConfigProcCpuCrit=w2kConfigProcCpuCrit, w2kStatusDirEntryWarn=w2kStatusDirEntryWarn, w2kStatusLVolFragMonitor=w2kStatusLVolFragMonitor, w2kStatusFileGroup=w2kStatusFileGroup, w2kStatusNetEntry=w2kStatusNetEntry, w2kConfigDirSizeDCrit=w2kConfigDirSizeDCrit)
mibBuilder.exportSymbols("CA-W2KOS-MIB", w2kStatusMemVirtCritValue=w2kStatusMemVirtCritValue, w2kAvailJobEntry=w2kAvailJobEntry, w2kStatusProcChildMonitor=w2kStatusProcChildMonitor, w2kJobUnknown=w2kJobUnknown, w2kConfigFileSizeCrit=w2kConfigFileSizeCrit, w2kStatusGeneralProcCount=w2kStatusGeneralProcCount, w2kStatusDirEntry=w2kStatusDirEntry, w2kCpuUnknown=w2kCpuUnknown, w2kStatusLVolSizeDCrit=w2kStatusLVolSizeDCrit, w2kConfigSysColdStartTime=w2kConfigSysColdStartTime, w2kConfigCpuGroup=w2kConfigCpuGroup, w2kStatusNetTable=w2kStatusNetTable, w2kStatusSrvcAggLag=w2kStatusSrvcAggLag, w2kStatusJobButton=w2kStatusJobButton, w2kConfigPrnAutoName=w2kConfigPrnAutoName, w2kPrnWarning=w2kPrnWarning, w2kStatusProcDescription=w2kStatusProcDescription, w2kConfigFileExist=w2kConfigFileExist, w2kConfigSrvcAutoButton=w2kConfigSrvcAutoButton, w2kStatusSrvcTable=w2kStatusSrvcTable)
