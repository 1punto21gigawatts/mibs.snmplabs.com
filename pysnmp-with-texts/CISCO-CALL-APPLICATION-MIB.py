#
# PySNMP MIB module CISCO-CALL-APPLICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CALL-APPLICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, ModuleIdentity, Bits, iso, Integer32, Unsigned32, NotificationType, IpAddress, TimeTicks, MibIdentifier, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Bits", "iso", "Integer32", "Unsigned32", "NotificationType", "IpAddress", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TimeStamp, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention", "TruthValue")
ciscoCallApplicationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 146))
ciscoCallApplicationMIB.setRevisions(('2003-05-13 00:01', '1999-09-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCallApplicationMIB.setRevisionsDescriptions(("The changes to this MIB now provide call application statistics for monitoring the call applications. These call application stats are divided into 3 levels - per gateway level (Global). - per application-type level. - per application-instance level. | Level/State | Active | History | -------------+------------------+---------------- | Global lvl| Gauges | Counters | -------------+------------------+---------------- | App-Type lvl| Gauges records | Counter records | -------------+------------------+---------------- | App-Inst lvl| Not available | Counter records v -------------+------------------+---------------- An applicaiton gateway can have multiple types of call applications aka application scripts. User calls could be handled by any of this application types (scripts). Each user call can trigger an instance of this application type. An Application instance has a set of countres during its active and non-active (history) phase. These are available at App-Inst level records. App-Type level records have aggregated counters/gauges from all the application instances of its application type. Global level has aggregated counters/gauges from all application-type records. Gateway administrators are encouraged to follow a 'top-down' approach for monitoring and troubleshooting. This top-down approach emphasizes on polling 'Global active level gauges' for monitoring load on the gateway and 'Global history level counters' monitoring errors. To find out more details about a particular gauge or counter one can step down a level to App-Type level. Similarly, to find out further details, one can goto a level lower at 'Application-Instnace' for find out more details. Finally, event-logs are available at the lowest level for applicaiton instances. Following changes are as per the above mentioned scheme. - ccapAppGlobalAct group of objects are added to provide 'Active Global lvl' gauges. - ccapAppGlobalHis group of objects are added to provide 'Active Global lvl' gauges. - ccapApplicationTable is extended to provide 'Active App-Type lvl' gauges. - ccapAppTypeHistoryTable is added to provided 'History App-Type lvl' counters. - ccapAppInstanceHistoryTable is added to provide 'History App-Inst lvl' counters. This MIB also provides call application interface stats. The call application interfaces are the servers with which applications do the transactions for various services like HTTP, RTSP, TFTP, SMTP, AAA, ASR (Automatic Speech Recognition), TTS (Text-To-Speech), flash file read, RAM media recordings. Following are the new objects/tables to provide 'Application-Interface' statistics. - ccapAppIntfGlobal group of objects - ccapAppIntfHTTPTable - ccapAppIntfRTSPTable - ccapAppIntfTFTPTable - ccapAppIntfSMTPTable - ccapAppIntfAAAMethodListTable - ccapAppIntfASRTable - ccapAppIntfTTSTable - ccapAppIntfFlash group of objects - ccapAppIntfRAMRecord group of objects This MIB also provides facility to enable and disable statistics monitoring for call application at global level. Applicaion interface statistics can also be enabled/disabled through this MIB. Statistics can also be cleared at Global and App-type levels. Hence, lot of objects which could be reset/cleared are defined as ZeroBasedCounter32 TC based of Gauge32. Clearing operation is done either through MIB objects or through CLI (Command Line Interface). Clear or resetting operation in applied to a group of countres. For each group there is a 'discontinuity' object or 'lastResetTime' object provided which specifies the time when associated group of objects were cleared. Application infrastructure has facility to capture events from active application instances and save them in event log buffer in memory and later to FTP dump file. This is referred as event logging mechanism. Event logging can be enabled and disabled either from IOS CLI's or from SNMP objects provided in this MIB change set. This event log facility is available at 'Active and History App-Inst lvl'. Event logging is also available at 'App-Interface lvl', for per interface-type and per server of each interface type. This MIB provides facility to enable/disable application event log facility for all active application instances. However, the MIB does not provide objects to get the event logs, since they can be bulky and degrade the performance of the system. There are mechanisms to dump the event logs to either stdout or ftp through IOS CLI configurations.", "This MIB allows management of call applications on a network device. A 'call application' is a software module that processes calls, such as data, voice, video, or fax calls. Initial version 199909220000Z, Nov 22nd, 1999.",))
if mibBuilder.loadTexts: ciscoCallApplicationMIB.setLastUpdated('200305130001Z')
if mibBuilder.loadTexts: ciscoCallApplicationMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCallApplicationMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoCallApplicationMIB.setDescription("This MIB allows management of call applications on a network device. A 'call application' is a software module that processes calls, such as data, voice, video, or fax calls. ")
class URLStringOrNull(TextualConvention, OctetString):
    description = 'A Uniform Resource Locator represented in accordance with RFC 1738, or an empty string.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class ServerNameString(TextualConvention, OctetString):
    description = 'This TC describes an objects which represents an unique server identifier. This server identifier string constitutes from server name and/or ipaddress and/or AAA method list and/or part of URL. Typically this TC is used in tables where the INDEX could be DNS name or string form of IP address or part of URL or just a unique string.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

ciscoCallApplicationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1))
ccapConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1))
ccapAppTypeHisStat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2))
ccapAppInstHisStat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3))
ccapAppGblActStat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4))
ccapAppGblHisStat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5))
ccapAppIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6))
ccapApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1), )
if mibBuilder.loadTexts: ccapApplicationTable.setStatus('current')
if mibBuilder.loadTexts: ccapApplicationTable.setDescription('Information about call applications on this managed device. There is an entry in this table for each call application.')
ccapApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppName"))
if mibBuilder.loadTexts: ccapApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: ccapApplicationEntry.setDescription('Information about a call application.')
ccapAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: ccapAppName.setStatus('current')
if mibBuilder.loadTexts: ccapAppName.setDescription('The name of this call application.')
ccapAppLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 2), URLStringOrNull()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccapAppLocation.setStatus('current')
if mibBuilder.loadTexts: ccapAppLocation.setDescription("Identifies the location from where this application is loaded. For built-in applications, the value will always be an empty string. If the location is not specified or not known, value is an empty string. Note that a particular agent may support only certain types of URLs (e.g., only tftp://...). Thus, the valid values of this object are implementation dependent. An agent may respond with an error (e.g., 'wrongValue') to a management SET operation which attempts to modify the value of this object to one which is not supported by the managed device. The value of this object may be changed at any time. However, note that setting this value for an active row will cause the old application to be deleted, and the new application (i.e. the program at the newly-specified URL) to be loaded.")
ccapAppLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("builtIn", 1), ("loading", 2), ("loaded", 3), ("loadFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppLoadState.setStatus('current')
if mibBuilder.loadTexts: ccapAppLoadState.setDescription("The state of this application. For built-in applications, the value read is always 'builtIn'. When this row is made active, the agent attempts to load the application from the URL specified by ccapAppLocation. While loading is in progress, value of this object reads 'loading'. If the application is successfully loaded, the value changes to 'loaded', otherwise the value changes to 'loadFailed'. ")
ccapAppLoadFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("notFound", 3), ("timedOut", 4), ("noPermission", 5), ("badSignature", 6), ("noSpace", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppLoadFailReason.setStatus('current')
if mibBuilder.loadTexts: ccapAppLoadFailReason.setDescription('The reason the last attempted load failed. The possible values are: none - there was no failure other - failure reason is other than those listed below notFound - application was not found timedOut - timed out while loading noPermission - was denied permission badSignature - the application did not have the proper signature. An agent may use an authentication scheme to protect itself. This error indicates that the authentication check failed, hence the application was not loaded. noSpace - lack of memory space. The value is updated after a load attempt. ')
ccapAppDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccapAppDescr.setStatus('current')
if mibBuilder.loadTexts: ccapAppDescr.setDescription('A description of this application. ')
ccapAppCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccapAppCallType.setStatus('current')
if mibBuilder.loadTexts: ccapAppCallType.setDescription('Indicates the types of call that this application can handle. 0 is voice, 1 is fax, 3 is data, 4 is video.')
ccapAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccapAppRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccapAppRowStatus.setDescription("The status of this conceptual row. Note that rows corresponding to built-in applications cannot be modified. Thus, this object is read-only for such rows. This object can not be set to 'active' until a value has been assigned to the corresponding instance of ccapAppLocation. When a row becomes active, the agent attempts to load the application from the location specified by ccapAppLocation. The result of the loading operation can be monitored by the objects ccapAppLoadState and ccapAppLoadError. Deleting a row will cause the agent to unload the corresponding application. ")
ccapAppActiveInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppActiveInstances.setStatus('current')
if mibBuilder.loadTexts: ccapAppActiveInstances.setDescription('Number of application instances currently active of an application type from ccapApplicationTable.')
ccapAppEventLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppEventLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppEventLogging.setDescription('Object by which management station can know if event logging for this application type is enabled or disabled for all the instances of this application type.')
ccapAppPSTNInCallNowConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppPSTNInCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppPSTNInCallNowConn.setDescription('Total number of PSTN incoming calls connected and handled by this application type at this moment.')
ccapAppPSTNOutCallNowConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppPSTNOutCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppPSTNOutCallNowConn.setDescription('Total number of PSTN outgoing calls (placed calls to PSTN) connected and handled by this application type at this moment.')
ccapAppIPInCallNowConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIPInCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppIPInCallNowConn.setDescription('Total number of incoming IP calls connected and handled by this application type at this moment.')
ccapAppIPOutCallNowConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIPOutCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppIPOutCallNowConn.setDescription('Total number of IP outgoing (placed to IP) calls connected and handled by this application type at this moment.')
ccapAppPlaceCallInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppPlaceCallInProgress.setStatus('current')
if mibBuilder.loadTexts: ccapAppPlaceCallInProgress.setDescription('Total number of pending place calls requests from all the active instances of this application type.')
ccapAppHandoffInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppHandoffInProgress.setStatus('current')
if mibBuilder.loadTexts: ccapAppHandoffInProgress.setDescription('Total number of pending handoff requests from all the active instances of this application type.')
ccapAppPromptPlayActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppPromptPlayActive.setStatus('current')
if mibBuilder.loadTexts: ccapAppPromptPlayActive.setDescription('Total number of active prompts for all the active instances of this application type.')
ccapAppRecordingActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppRecordingActive.setStatus('current')
if mibBuilder.loadTexts: ccapAppRecordingActive.setDescription('Total number of active recording for all the active instances of this application type.')
ccapAppTTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTTSActive.setStatus('current')
if mibBuilder.loadTexts: ccapAppTTSActive.setDescription('Total number of active TTS (Text-To-Speech) for all the active instances of this application type.')
ccapAppTypeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2), )
if mibBuilder.loadTexts: ccapAppTypeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHistoryTable.setDescription('Information from history instances of application types.')
ccapAppTypeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppName"))
if mibBuilder.loadTexts: ccapAppTypeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHistoryEntry.setDescription('Information from all the history instances of an IOS call application type.')
ccapAppTypeHisEvtLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisEvtLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisEvtLogging.setDescription('Object by which management station can know if event logging for this application type is enabled or disabled.')
ccapAppTypeHisLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisLastResetTime.setDescription('The time when the application information statistics were last reset for this application type, either through CLI or through ccapAppGblStatsClear object. When the application information system is disabled on the gateway, this object is also reset to zeros.')
ccapAppTypeHisPSTNInCallSetupInd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallSetupInd.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallSetupInd.setDescription('Total number of setup indications received by this application type from the PSTN.')
ccapAppTypeHisPSTNInCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallTotConn.setDescription('Total number of incoming PSTN call legs connected by this application type.')
ccapAppTypeHisPSTNInCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallHandedOut.setDescription('Total number of incoming PSTN call legs that are handed out to another application type because of application handoff operation .')
ccapAppTypeHisPSTNInCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallHandOutRet.setDescription('Total number of incoming PSTN call legs that were handed out with call back to another application, and returned back to this type.')
ccapAppTypeHisPSTNInCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallInHandoff.setDescription('Total number of incoming PSTN call legs that were handed to this application type, with the handoff operation, performed by another application type.')
ccapAppTypeHisPSTNInCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallInHandoffRet.setDescription("The Total number of incoming PSTN call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppTypeHisPSTNInCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallDiscNormal.setDescription("Total number of incoming PSTN call legs that disconnected with 'normal' cause code in this application type.")
ccapAppTypeHisPSTNInCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallDiscUsrErr.setDescription("Total number of incoming PSTN call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppTypeHisPSTNInCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNInCallDiscSysErr.setDescription("Total number of incoming PSTN call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppTypeHisPSTNOutCallSetupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallSetupReq.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallSetupReq.setDescription('Total number of setup requests placed out to PSTN interface, by this application type.')
ccapAppTypeHisPSTNOutCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallTotConn.setDescription('Total number of PSTN placed call legs connected to this application type.')
ccapAppTypeHisPSTNOutCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallHandedOut.setDescription('Total number of outgoing PSTN call legs that are handed out to another application type because of application handoff operation.')
ccapAppTypeHisPSTNOutCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallHandOutRet.setDescription('Total number of outgoing PSTN call legs that were handed out with call back to another application, returned back to this application type.')
ccapAppTypeHisPSTNOutCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallInHandoff.setDescription('Total number of outgoing PSTN call legs that were handed to this application type, with the handoff operation performed by another application type.')
ccapAppTypeHisPSTNOutCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallInHandoffRet.setDescription("The Total number of outgoing PSTN call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppTypeHisPSTNOutCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallDiscNormal.setDescription("Total number of outgoing PSTN call legs that disconnected with 'normal' cause code in this application type.")
ccapAppTypeHisPSTNOutCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallDiscUsrErr.setDescription("Total number of outgoing PSTN call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppTypeHisPSTNOutCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPSTNOutCallDiscSysErr.setDescription("Total number of outgoing PSTN call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppTypeHisIPInCallSetupInd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallSetupInd.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallSetupInd.setDescription('Total number of setup indications received by this application type from the IP interface.')
ccapAppTypeHisIPInCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallTotConn.setDescription('Total number of incoming IP call legs connected by this application type.')
ccapAppTypeHisIPInCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallHandedOut.setDescription('Total number of incoming IP call legs that are handed out to another application type because of application handoff operation.')
ccapAppTypeHisIPInCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallHandOutRet.setDescription('Total number of incoming IP call legs that were handed out with call back to another application, returned back to this type.')
ccapAppTypeHisIPInCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallInHandoff.setDescription('Total number of incoming IP call legs that were handed to this application type, with the handoff operation, performed by another application type.')
ccapAppTypeHisIPInCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallInHandoffRet.setDescription("The Total number of incoming IP call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppTypeHisIPInCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallDiscNormal.setDescription("Total number of incoming IP call legs that disconnected with 'normal' cause code in this application type.")
ccapAppTypeHisIPInCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallDiscUsrErr.setDescription("Total number of incoming IP call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppTypeHisIPInCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPInCallDiscSysErr.setDescription("Total number of incoming IP call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppTypeHisIPOutCallSetupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallSetupReq.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallSetupReq.setDescription('Total number of setup requests placed out to IP interface, by this application type.')
ccapAppTypeHisIPOutCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallTotConn.setDescription('Total number of IP placed call legs connected to this application type.')
ccapAppTypeHisIPOutCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallHandedOut.setDescription('Total number of outgoing IP call legs that are handed out to another application type because of application handoff operation.')
ccapAppTypeHisIPOutCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallHandOutRet.setDescription('Total number of outgoing IP call legs that were handed out with call back to another application, returned back to this application type.')
ccapAppTypeHisIPOutCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallInHandoff.setDescription('Total number of outgoing IP call legs that were handed to this application type, with the handoff operation, performed by another application type.')
ccapAppTypeHisIPOutCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallInHandoffRet.setDescription("The Total number of outgoing IP call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppTypeHisIPOutCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallDiscNormal.setDescription("Total number of outgoing IP call legs that disconnected with 'normal' cause code in this application type.")
ccapAppTypeHisIPOutCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallDiscUsrErr.setDescription("Total number of outgoing IP call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppTypeHisIPOutCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisIPOutCallDiscSysErr.setDescription("Total number of outgoing IP call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppTypeHisPlaceCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 39), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPlaceCallAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPlaceCallAttempts.setDescription('Total number of place call attempts performed by this application type.')
ccapAppTypeHisPlaceCallSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 40), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPlaceCallSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPlaceCallSuccess.setDescription('Total number of placecall attempts performed successfully by this application type.')
ccapAppTypeHisPlaceCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 41), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPlaceCallFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPlaceCallFailure.setDescription('Total number of place call failures seen by this application type.')
ccapAppTypeHisInHandoffCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 42), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisInHandoffCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisInHandoffCallback.setDescription('Total number of incoming handoffs with call back to this application type.')
ccapAppTypeHisInHandoffCallbackRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 43), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisInHandoffCallbackRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisInHandoffCallbackRet.setDescription('Total number of returned incoming handoffs with call back, from this application type.')
ccapAppTypeHisInHandoffNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 44), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisInHandoffNoCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisInHandoffNoCallback.setDescription('Total number of incoming handoffs with no call backs (blind handoffs) received by this application type.')
ccapAppTypeHisOutHandoffCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 45), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisOutHandoffCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisOutHandoffCallback.setDescription('Total number of placed handoffs with call backs (bridged handoffs) from this application type.')
ccapAppTypeHisOutHandoffCallbackRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 46), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisOutHandoffCallbackRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisOutHandoffCallbackRet.setDescription('Total number of returned handoffs with callback (bridged handoffs) to this application type.')
ccapAppTypeHisOutHandoffNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 47), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisOutHandoffNoCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisOutHandoffNoCallback.setDescription('Total number of placed handoffs with no callback (blind handoffs) from this application type.')
ccapAppTypeHisOutHandofffailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 48), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisOutHandofffailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisOutHandofffailures.setDescription('Total number of outgoing handoff failures seen by this application type, while trying to place an outgoing handoff to another application.')
ccapAppTypeHisDocumentReadAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 49), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentReadAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentReadAttempts.setDescription('Total number of document read requests made by this application type.')
ccapAppTypeHisDocumentReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 50), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentReadSuccess.setDescription('Total number of document read by the application type. ')
ccapAppTypeHisDocumentReadFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 51), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentReadFailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentReadFailures.setDescription('Total number of document read errors for this application type.')
ccapAppTypeHisDocumentParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 52), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentParseErrors.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentParseErrors.setDescription('Total number of document parse errors or semantic errors seen by this application.')
ccapAppTypeHisDocumentWriteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 53), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentWriteAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentWriteAttempts.setDescription('Total number of document write attempts by this application type.')
ccapAppTypeHisDocumentWriteSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 54), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentWriteSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentWriteSuccess.setDescription('Total number of document written successfully by this application type.')
ccapAppTypeHisDocumentWriteFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 55), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDocumentWriteFailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDocumentWriteFailures.setDescription('Total number of document write failures for this application type.')
ccapAppTypeHisDTMFAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 56), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDTMFAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDTMFAttempts.setDescription('Total number of attempts to read user DTMF input by this application type.')
ccapAppTypeHisDTMFAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 57), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDTMFAborted.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDTMFAborted.setDescription('Total number of DTMF reads interrupts/aborts by this application type.')
ccapAppTypeHisDTMFNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 58), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDTMFNoMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDTMFNoMatch.setDescription('Total number of DTMF no match events on incorrect user input, seen by this application type.')
ccapAppTypeHisDTMFNoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 59), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDTMFNoInput.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDTMFNoInput.setDescription('Total number of user input timeout on DTMF input seen by this application type.')
ccapAppTypeHisDTMFMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 60), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDTMFMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDTMFMatch.setDescription('Total number of DTMF input matched events seen by this application type.')
ccapAppTypeHisDTMFLongPound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 61), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisDTMFLongPound.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisDTMFLongPound.setDescription("Total number of 'Long-Pound' user interrupts seen by this application type.")
ccapAppTypeHisASRAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 62), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASRAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASRAttempts.setDescription('Total number of ASR (Automatic Speech Recognition) attempts to read user speech input by this application type.')
ccapAppTypeHisASRAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 63), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASRAborted.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASRAborted.setDescription('Total number of ASR (Automatic Speech Recognition) read interrupts/aborts by this application type.')
ccapAppTypeHisASRNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 64), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASRNoMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASRNoMatch.setDescription('Total number of ASR (Automatic Speech Recognition) match events on user speech input, seen by this application.')
ccapAppTypeHisASRNoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 65), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASRNoInput.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASRNoInput.setDescription('Total number of ASR (Automatic Speech Recognition) user speech input timeout events, seen by this application type.')
ccapAppTypeHisASRMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 66), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASRMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASRMatch.setDescription('Total number of ASR (Automatic Speech Recognition) user speech input matched events, seen by this application type.')
ccapAppTypeHisAAAAuthenticateFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 67), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthenticateFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthenticateFailure.setDescription('Total number of AAA Authenticate failures seen by this application type.')
ccapAppTypeHisAAAAuthenticateSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 68), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthenticateSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthenticateSuccess.setDescription('Total number of AAA Authenticate success seen by this application type.')
ccapAppTypeHisAAAAuthorizeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 69), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthorizeFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthorizeFailure.setDescription('Total number of AAA Authorize failures seen by this application type.')
ccapAppTypeHisAAAAuthorizeSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 70), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthorizeSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisAAAAuthorizeSuccess.setDescription('Total number of AAA Authorize success seen by this application type.')
ccapAppTypeHisASNLSubscriptionsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 71), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASNLSubscriptionsSent.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASNLSubscriptionsSent.setDescription('Total number of ASNL subscription sent by this application type.')
ccapAppTypeHisASNLSubscriptionsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 72), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASNLSubscriptionsSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASNLSubscriptionsSuccess.setDescription('Total number of ASNL subscriptions success, seen by this application type.')
ccapAppTypeHisASNLSubscriptionsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 73), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASNLSubscriptionsFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASNLSubscriptionsFailed.setDescription('Total number of ASNL subscription failures, seen by this application type.')
ccapAppTypeHisASNLNotifReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 74), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisASNLNotifReceived.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisASNLNotifReceived.setDescription('Total number of ASNL subscriptions received by this application type.')
ccapAppTypeHisPromptPlayAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 75), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlayAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlayAttempts.setDescription('Total number of prompt play attempts made by this application type.')
ccapAppTypeHisPromptPlaySuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 76), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlaySuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlaySuccess.setDescription('Total number of play prompt success, seen by this application type.')
ccapAppTypeHisPromptPlayFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 77), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlayFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlayFailed.setDescription('Total number of prompt play failures seen by this application type.')
ccapAppTypeHisPromptPlayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 78), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlayDuration.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisPromptPlayDuration.setDescription('Total duration (in seconds), of all the prompt plays performed by this application type.')
ccapAppTypeHisRecordingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 79), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisRecordingAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisRecordingAttempts.setDescription('Total number of record attempts made by this application type.')
ccapAppTypeHisRecordingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 80), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisRecordingSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisRecordingSuccess.setDescription('Total number of recording success, seen by this application type.')
ccapAppTypeHisRecordingFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 81), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisRecordingFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisRecordingFailed.setDescription('Total number of recording failures seen by this application type.')
ccapAppTypeHisRecordingDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 82), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisRecordingDuration.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisRecordingDuration.setDescription('Total duration (in seconds), of all the recordings performed by this application type.')
ccapAppTypeHisTTSAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 83), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisTTSAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisTTSAttempts.setDescription('Total number of TTS (Text-To-Speech) play attempts made by this application type.')
ccapAppTypeHisTTSSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 84), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisTTSSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisTTSSuccess.setDescription('Total number of TTS (Text-To-Speech) play success seen by this application type.')
ccapAppTypeHisTTSFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 2, 2, 1, 85), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppTypeHisTTSFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHisTTSFailed.setDescription('Total number of TTS (Text-To-Speech) play failures seen by this application type.')
ccapAppInstanceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3), )
if mibBuilder.loadTexts: ccapAppInstanceHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstanceHistoryTable.setDescription('Information about history application instances of an active application type. This table provides in details about an application instance when the applicaiton instancae has terminated. Note: Active application instance records are not available in any MIB because application instances when active may change status from active to history very quickly and instance record data is most of the time inconclusive.')
ccapAppInstanceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIndex"))
if mibBuilder.loadTexts: ccapAppInstanceHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstanceHistoryEntry.setDescription('Information about a history instance of a IOS call application. When an application instance is terminated an entry is created. Entry is removed from this table on the following any one condition - a. Maximum number of records (configured via CLI) has reached. b. Maximum number of time (configured via CLI) has reached. In both the above cases oldest history record is purged out.')
ccapAppInstHisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ccapAppInstHisIndex.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing application instance disconnection events. When it reaches the maximum value, an extremely unlikely event, the agent wraps the value back to 1 and may flush existing entries.')
ccapAppInstHisSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisSessionID.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisSessionID.setDescription('A monotonically increasing integer specifying history application instance identification. This number is unique per application gateway. When the counter reaches the maximum value, the gateway wraps the value back to 1.')
ccapAppInstHisAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisAppName.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisAppName.setDescription('The name-tag as specified in the IOS configuration for this history application instance.')
ccapAppInstHisPSTNInCallSetupInd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallSetupInd.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallSetupInd.setDescription('Total number of setup indications received by this application instance from the PSTN.')
ccapAppInstHisPSTNInCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallTotConn.setDescription('Total number of incoming PSTN call legs connected by this application instance.')
ccapAppInstHisPSTNInCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallHandedOut.setDescription('Total number of incoming PSTN call legs that are handed out to another application instance because of application handoff operation .')
ccapAppInstHisPSTNInCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallHandOutRet.setDescription('Total number of incoming PSTN call legs that were handed out with call back to another application, returned back to this instance.')
ccapAppInstHisPSTNInCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallInHandoff.setDescription('Total number of incoming PSTN call legs that were handed to this application instance, with the handoff operation, performed by another application instance.')
ccapAppInstHisPSTNInCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallInHandoffRet.setDescription("The Total number of incoming PSTN call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppInstHisPSTNInCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallDiscNormal.setDescription("Total number of incoming PSTN call legs that disconnected with 'normal' cause code in this application instance.")
ccapAppInstHisPSTNInCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallDiscUsrErr.setDescription("Total number of incoming PSTN call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppInstHisPSTNInCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNInCallDiscSysErr.setDescription("Total number of incoming PSTN call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppInstHisPSTNOutCallSetupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallSetupReq.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallSetupReq.setDescription('Total number of setup requests placed out to PSTN interface, by this application instance.')
ccapAppInstHisPSTNOutCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallTotConn.setDescription('Total number of PSTN placed call legs connected to this application instance.')
ccapAppInstHisPSTNOutCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallHandedOut.setDescription('Total number of outgoing PSTN call legs that are handed out to another application instance because of application handoff operation.')
ccapAppInstHisPSTNOutCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallHandOutRet.setDescription('Total number of outgoing PSTN call legs that were handed out with call back to another application, returned back to this instance.')
ccapAppInstHisPSTNOutCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallInHandoff.setDescription('Total number of outgoing PSTN call legs that were handed to this application instance, with the handoff operation, performed by another application instance.')
ccapAppInstHisPSTNOutCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallInHandoffRet.setDescription("The Total number of outgoing PSTN call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppInstHisPSTNOutCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallDiscNormal.setDescription("Total number of outgoing PSTN call legs that disconnected with 'normal' cause code in this application instance.")
ccapAppInstHisPSTNOutCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallDiscUsrErr.setDescription("Total number of outgoing PSTN call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppInstHisPSTNOutCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPSTNOutCallDiscSysErr.setDescription("Total number of outgoing PSTN call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppInstHisIPInCallSetupInd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallSetupInd.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallSetupInd.setDescription('Total number of setup indications received by this application instance from the IP interface.')
ccapAppInstHisIPInCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallTotConn.setDescription('Total number of incoming IP call legs connected by this application instance.')
ccapAppInstHisIPInCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallHandedOut.setDescription('Total number of incoming IP call legs that are handed out to another application instance because of application handoff operation.')
ccapAppInstHisIPInCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallHandOutRet.setDescription('Total number of incoming IP call legs that were handed out with call back to another application, returned back to this instance.')
ccapAppInstHisIPInCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallInHandoff.setDescription('Total number of incoming IP call legs that were handed to this application instance, with the handoff operation, performed by another application instance.')
ccapAppInstHisIPInCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallInHandoffRet.setDescription("The Total number of incoming IP call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppInstHisIPInCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallDiscNormal.setDescription("Total number of incoming IP call legs that disconnected with 'normal' cause code in this application instance.")
ccapAppInstHisIPInCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallDiscUsrErr.setDescription("Total number of incoming IP call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppInstHisIPInCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPInCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPInCallDiscSysErr.setDescription("Total number of incoming IP call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppInstHisIPOutCallSetupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallSetupReq.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallSetupReq.setDescription('Total number of setup requests placed out to IP interface, by this application instance.')
ccapAppInstHisIPOutCallTotConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallTotConn.setDescription('Total number of IP placed call legs connected to this application instance.')
ccapAppInstHisIPOutCallHandedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallHandedOut.setDescription('Total number of outgoing IP call legs that are handed out to another application instance because of application handoff operation.')
ccapAppInstHisIPOutCallHandOutRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallHandOutRet.setDescription('Total number of outgoing IP call legs that were handed out with call back to another application, returned back to this instance.')
ccapAppInstHisIPOutCallInHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallInHandoff.setDescription('Total number of outgoing IP call legs that were handed to this application instance, with the handoff operation, performed by another application instance.')
ccapAppInstHisIPOutCallInHandoffRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallInHandoffRet.setDescription("The Total number of outgoing IP call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppInstHisIPOutCallDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallDiscNormal.setDescription("Total number of outgoing IP call legs that disconnected with 'normal' cause code in this application instance.")
ccapAppInstHisIPOutCallDiscUsrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallDiscUsrErr.setDescription("Total number of outgoing IP call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppInstHisIPOutCallDiscSysErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisIPOutCallDiscSysErr.setDescription("Total number of outgoing IP call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppInstHisPlaceCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPlaceCallAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPlaceCallAttempts.setDescription('Total number of place call attempts performed by this application instance.')
ccapAppInstHisPlaceCallSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPlaceCallSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPlaceCallSuccess.setDescription('Total number of placecall attempts performed successfully by this application instance.')
ccapAppInstHisPlaceCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPlaceCallFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPlaceCallFailure.setDescription('Total number of place call failures seen by this application instance.')
ccapAppInstHisInHandoffCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisInHandoffCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisInHandoffCallback.setDescription('Total number of incoming handoffs with call back to this application instance.')
ccapAppInstHisInHandoffCallbackRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisInHandoffCallbackRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisInHandoffCallbackRet.setDescription('Total number of returned incoming handoffs with call back from this application instance.')
ccapAppInstHisInHandoffNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisInHandoffNoCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisInHandoffNoCallback.setDescription('Total number of incoming handoffs with no call backs (blind handoff) received by this application instance.')
ccapAppInstHisOutHandoffCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisOutHandoffCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisOutHandoffCallback.setDescription('Total number of placed handoffs with call backs (bridged handoffs) from this application instance.')
ccapAppInstHisOutHandoffCallbackRet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisOutHandoffCallbackRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisOutHandoffCallbackRet.setDescription('Total number of returned handoffs with callback (bridged handoffs) to this application instance.')
ccapAppInstHisOutHandoffNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisOutHandoffNoCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisOutHandoffNoCallback.setDescription('Total number of placed handoffs with no callback (blind handoffs) from this application instance.')
ccapAppInstHisOutHandofffailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisOutHandofffailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisOutHandofffailures.setDescription('Total number of outgoing handoff failures seen by this application instance, while trying to place an outgoing handoff to another application.')
ccapAppInstHisDocumentReadAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentReadAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentReadAttempts.setDescription('Total number of document read requests made by this application instance.')
ccapAppInstHisDocumentReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentReadSuccess.setDescription('Total number of document read by the application instance.')
ccapAppInstHisDocumentReadFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentReadFailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentReadFailures.setDescription('Total number of document read errors for this application instance.')
ccapAppInstHisDocumentParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentParseErrors.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentParseErrors.setDescription('Total number of document parse errors or semantic errors seen by this application.')
ccapAppInstHisDocumentWriteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentWriteAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentWriteAttempts.setDescription('Total number of document write attempts by this application instance.')
ccapAppInstHisDocumentWriteSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentWriteSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentWriteSuccess.setDescription('Total number of document written successfully by this application instance.')
ccapAppInstHisDocumentWriteFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDocumentWriteFailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDocumentWriteFailures.setDescription('Total number of document write failures for this application instance.')
ccapAppInstHisDTMFAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDTMFAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDTMFAttempts.setDescription('Total number of attempts to read user DTMF input by this application instance.')
ccapAppInstHisDTMFAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDTMFAborted.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDTMFAborted.setDescription('Total number of DTMF reads interrupts/aborts by this application instance.')
ccapAppInstHisDTMFNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDTMFNoMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDTMFNoMatch.setDescription('Total number of DTMF no match events on incorrect user input, seen by this application instance.')
ccapAppInstHisDTMFNoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDTMFNoInput.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDTMFNoInput.setDescription('Total number of user input timeout on DTMF input seen by this application instance.')
ccapAppInstHisDTMFMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDTMFMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDTMFMatch.setDescription('Total number of DTMF input matched events seen by this application instance.')
ccapAppInstHisDTMFLongPound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisDTMFLongPound.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisDTMFLongPound.setDescription("Total number of 'Long-Pound' user interrupts seen by this application instance.")
ccapAppInstHisASRAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASRAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASRAttempts.setDescription('Total number of ASR (Automatic Speech Recognition) attempts to read user speech input by this application instance.')
ccapAppInstHisASRAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASRAborted.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASRAborted.setDescription('Total number of ASR (Automatic Speech Recognition) read interrupts/aborts by this application instance.')
ccapAppInstHisASRNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASRNoMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASRNoMatch.setDescription('Total number of ASR (Automatic Speech Recognition) match events on user speech input, seen by this application.')
ccapAppInstHisASRNoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASRNoInput.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASRNoInput.setDescription('Total number of ASR (Automatic Speech Recognition) user speech input timeout events, seen by this application instance.')
ccapAppInstHisASRMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASRMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASRMatch.setDescription('Total number of ASR (Automatic Speech Recognition) user speech input matched events, seen by this application instance.')
ccapAppInstHisAAAAuthenticateFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthenticateFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthenticateFailure.setDescription('Total number of AAA Authenticate failures seen by this application instance.')
ccapAppInstHisAAAAuthenticateSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 69), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthenticateSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthenticateSuccess.setDescription('Total number of AAA Authenticate success seen by this application instance.')
ccapAppInstHisAAAAuthorizeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthorizeFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthorizeFailure.setDescription('Total number of AAA Authorize failures seen by this application instance.')
ccapAppInstHisAAAAuthorizeSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 71), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthorizeSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisAAAAuthorizeSuccess.setDescription('Total number of AAA Authorize success seen by this application instance.')
ccapAppInstHisASNLSubscriptionsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASNLSubscriptionsSent.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASNLSubscriptionsSent.setDescription('Total number of ASNL subscription sent by this application instance.')
ccapAppInstHisASNLSubscriptionsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASNLSubscriptionsSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASNLSubscriptionsSuccess.setDescription('Total number of ASNL subscriptions success, seen by this application instance.')
ccapAppInstHisASNLSubscriptionsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 74), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASNLSubscriptionsFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASNLSubscriptionsFailed.setDescription('Total number of ASNL subscription failures, seen by this application instance.')
ccapAppInstHisASNLNotifReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisASNLNotifReceived.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisASNLNotifReceived.setDescription('Total number of ASNL subscriptions received by this application instance.')
ccapAppInstHisPromptPlayAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPromptPlayAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPromptPlayAttempts.setDescription('Total number of prompt play attempts made by this application instance.')
ccapAppInstHisPromptPlaySuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPromptPlaySuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPromptPlaySuccess.setDescription('Total number of play prompt success, seen by this application instance.')
ccapAppInstHisPromptPlayFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 78), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPromptPlayFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPromptPlayFailed.setDescription('Total number of prompt play failures seen by this application instance.')
ccapAppInstHisPromptPlayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 79), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisPromptPlayDuration.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisPromptPlayDuration.setDescription('Total duration (in seconds), of all the prompt plays performed by this application instance.')
ccapAppInstHisRecordingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisRecordingAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisRecordingAttempts.setDescription('Total number of record attempts made by this application instance.')
ccapAppInstHisRecordingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisRecordingSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisRecordingSuccess.setDescription('Total number of recording success, seen by this application instance.')
ccapAppInstHisRecordingFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 82), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisRecordingFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisRecordingFailed.setDescription('Total number of recording failures seen by this application instance.')
ccapAppInstHisRecordingDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisRecordingDuration.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisRecordingDuration.setDescription('Total duration (in seconds), of all the recordings performed by this application instance.')
ccapAppInstHisTTSAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisTTSAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisTTSAttempts.setDescription('Total number of TTS (Text-To-Speech) play attempts made by this application instance.')
ccapAppInstHisTTSSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisTTSSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisTTSSuccess.setDescription('Total number of TTS (Text-To-Speech) play success seen by this application instance.')
ccapAppInstHisTTSFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHisTTSFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHisTTSFailed.setDescription('Total number of TTS (Text-To-Speech) play failures seen by this application instance.')
ccapAppInstHistEvtLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 3, 3, 1, 87), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppInstHistEvtLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstHistEvtLogging.setDescription('Object by which management station can know if event logging for this application instance is enabled or disabled.')
ccapAppGblActCurrentInstances = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActCurrentInstances.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActCurrentInstances.setDescription('Number of application instances currently active from all application types of ccapApplicationTable on this gateway.')
ccapAppGblActPSTNInCallNowConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActPSTNInCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActPSTNInCallNowConn.setDescription('Total number of PSTN incoming calls connected and handled by this gateway at this moment.')
ccapAppGblActPSTNOutCallNowConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActPSTNOutCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActPSTNOutCallNowConn.setDescription('Total number of PSTN outgoing calls (placed calls to PSTN) connected and handled by this gateway at this moment.')
ccapAppGblActIPInCallNowConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActIPInCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActIPInCallNowConn.setDescription('Total number of incoming IP calls connected and handled by this gateway at this moment.')
ccapAppGblActIPOutCallNowConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActIPOutCallNowConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActIPOutCallNowConn.setDescription('Total number of IP outgoing (placed to IP) calls connected and handled by this gateway at this moment.')
ccapAppGblActPlaceCallInProgress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActPlaceCallInProgress.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActPlaceCallInProgress.setDescription('Total number of pending place calls requests from all the active instances of this gateway.')
ccapAppGblActHandoffInProgress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActHandoffInProgress.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActHandoffInProgress.setDescription('Total number of pending handoff requests from all the active instances of this gateway.')
ccapAppGblActPromptPlayActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActPromptPlayActive.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActPromptPlayActive.setDescription('Total number of active prompts for all the active instances of this gateway.')
ccapAppGblActRecordingActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActRecordingActive.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActRecordingActive.setDescription('Total number of active recording for all the active instances of this gateway.')
ccapAppGblActTTSActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblActTTSActive.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActTTSActive.setDescription('Total number of active TTS (Text-To-Speech) for all the active instances of this gateway.')
ccapAppGblStatsLogging = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppGblStatsLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblStatsLogging.setDescription('Enable or disable the Application Information System for gathering statistics for all the call application types on this gateway.')
ccapAppGblEventLogging = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppGblEventLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblEventLogging.setDescription('Enable or disable the Application Information System for gathering event-logs for all the call application type instances on this gateway.')
ccapAppGblEvtLogflush = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppGblEvtLogflush.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblEvtLogflush.setDescription('Flush the event logs of all the active application instances to the destination ftp server. FTP server destination is specified in the IOS configuration through config CLI. ')
ccapAppGblStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppGblStatsClear.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblStatsClear.setDescription('Perform clearing of the entire Application History Global level stats and History Application Type stats.')
ccapAppGblLastResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 4, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object. When the application information system is disabled on the gateway, this object is also reset to zeros.')
ccapAppGblHisTotalInstances = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisTotalInstances.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisTotalInstances.setDescription('Total number of application instances handled by this gateway since last reboot/reset.')
ccapAppGblHisLastReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisLastReset.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisLastReset.setDescription('Date and Time when the counters were last reset from CLI.')
ccapAppGblHisPSTNInCallSetupInd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallSetupInd.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallSetupInd.setDescription('Total number of setup indications received by this gateway from the PSTN.')
ccapAppGblHisPSTNInCallTotConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallTotConn.setDescription('Total number of incoming PSTN call legs connected by this gateway.')
ccapAppGblHisPSTNInCallHandedOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallHandedOut.setDescription('Total number of incoming PSTN call legs that are handed out to another gateway because of application handoff operation .')
ccapAppGblHisPSTNInCallHandOutRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallHandOutRet.setDescription('Total number of incoming PSTN call legs that were handed out with call back to another application, returned back to this type.')
ccapAppGblHisPSTNInCallInHandoff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallInHandoff.setDescription('Total number of incoming PSTN call legs that were handed to this gateway, with the handoff operation, performed by another gateway.')
ccapAppGblHisPSTNInCallInHandoffRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallInHandoffRet.setDescription("The Total number of incoming PSTN call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppGblHisPSTNInCallDiscNormal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallDiscNormal.setDescription("Total number of incoming PSTN call legs that disconnected with 'normal' cause code in this gateway.")
ccapAppGblHisPSTNInCallDiscUsrErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallDiscUsrErr.setDescription("Total number of incoming PSTN call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppGblHisPSTNInCallDiscSysErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNInCallDiscSysErr.setDescription("Total number of incoming PSTN call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppGblHisPSTNOutCallSetupReq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallSetupReq.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallSetupReq.setDescription('Total number of setup requests placed out to PSTN interface, by this gateway.')
ccapAppGblHisPSTNOutCallTotConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallTotConn.setDescription('Total number of PSTN placed call legs connected to this gateway.')
ccapAppGblHisPSTNOutCallHandedOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallHandedOut.setDescription('Total number of outgoing PSTN call legs that are handed out to another gateway because of application handoff operation.')
ccapAppGblHisPSTNOutCallHandOutRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallHandOutRet.setDescription('Total number of outgoing PSTN call legs that were handed out with call back to another application, returned back to this type.')
ccapAppGblHisPSTNOutCallInHandoff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallInHandoff.setDescription('Total number of outgoing PSTN call legs that were handed to this gateway, with the handoff operation, performed by another gateway.')
ccapAppGblHisPSTNOutCallInHandoffRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallInHandoffRet.setDescription("The Total number of outgoing PSTN call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppGblHisPSTNOutCallDiscNormal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallDiscNormal.setDescription("Total number of outgoing PSTN call legs that disconnected with 'normal' cause code in this gateway.")
ccapAppGblHisPSTNOutCallDiscUsrErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallDiscUsrErr.setDescription("Total number of outgoing PSTN call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppGblHisPSTNOutCallDiscSysErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPSTNOutCallDiscSysErr.setDescription("Total number of outgoing PSTN call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppGblHisIPInCallSetupInd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallSetupInd.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallSetupInd.setDescription('Total number of setup indications received by this gateway from the IP interface.')
ccapAppGblHisIPInCallTotConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallTotConn.setDescription('Total number of incoming IP call legs connected by this gateway.')
ccapAppGblHisIPInCallHandedOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallHandedOut.setDescription('Total number of incoming IP call legs that are handed out to another gateway because of application handoff operation.')
ccapAppGblHisIPInCallHandOutRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallHandOutRet.setDescription('Total number of incoming IP call legs that were handed out with call back to another application, returned back to this type.')
ccapAppGblHisIPInCallInHandoff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallInHandoff.setDescription('Total number of incoming IP call legs that were handed to this gateway, with the handoff operation, performed by another gateway.')
ccapAppGblHisIPInCallInHandoffRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallInHandoffRet.setDescription("The Total number of incoming IP call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppGblHisIPInCallDiscNormal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallDiscNormal.setDescription("Total number of incoming IP call legs that disconnected with 'normal' cause code in this gateway.")
ccapAppGblHisIPInCallDiscUsrErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallDiscUsrErr.setDescription("Total number of incoming IP call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppGblHisIPInCallDiscSysErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPInCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPInCallDiscSysErr.setDescription("Total number of incoming IP call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppGblHisIPOutCallSetupReq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallSetupReq.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallSetupReq.setDescription('Total number of setup requests placed out to IP interface, by this gateway.')
ccapAppGblHisIPOutCallTotConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallTotConn.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallTotConn.setDescription('Total number of IP placed call legs connected to this gateway.')
ccapAppGblHisIPOutCallHandedOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallHandedOut.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallHandedOut.setDescription('Total number of outgoing IP call legs that are handed out to another gateway because of application handoff operation.')
ccapAppGblHisIPOutCallHandOutRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallHandOutRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallHandOutRet.setDescription('Total number of outgoing IP call legs that were handed out with call back to another application, returned back.')
ccapAppGblHisIPOutCallInHandoff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallInHandoff.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallInHandoff.setDescription('Total number of outgoing IP call legs that were handed to this gateway, with the handoff operation, performed by another gateway.')
ccapAppGblHisIPOutCallInHandoffRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallInHandoffRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallInHandoffRet.setDescription("The Total number of outgoing IP call legs returned back as part of 'completed handoff with call back operation'.")
ccapAppGblHisIPOutCallDiscNormal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallDiscNormal.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallDiscNormal.setDescription("Total number of outgoing IP call legs that disconnected with 'normal' cause code in this gateway.")
ccapAppGblHisIPOutCallDiscUsrErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallDiscUsrErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallDiscUsrErr.setDescription("Total number of outgoing IP call legs that disconnected with 'user error' cause code. User error cause code could be 'no answer/busy/timeout'.")
ccapAppGblHisIPOutCallDiscSysErr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallDiscSysErr.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisIPOutCallDiscSysErr.setDescription("Total number of outgoing IP call legs that disconnected with 'system error' cause code. System error cause code could be any thing other than 'normal or user error'.")
ccapAppGblHisPlaceCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 39), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPlaceCallAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPlaceCallAttempts.setDescription('Total number of place call attempts performed by this gateway.')
ccapAppGblHisPlaceCallSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 40), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPlaceCallSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPlaceCallSuccess.setDescription('Total number of placecall attempts performed successfully by this gateway.')
ccapAppGblHisPlaceCallFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 41), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPlaceCallFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPlaceCallFailure.setDescription('Total number of place call failures seen by this gateway.')
ccapAppGblHisInHandoffCallback = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 42), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisInHandoffCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisInHandoffCallback.setDescription('Total number of incoming handoffs with call back to this gateway.')
ccapAppGblHisInHandoffCallbackRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 43), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisInHandoffCallbackRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisInHandoffCallbackRet.setDescription('Total number of returned incoming handoffs with call back, from this gateway.')
ccapAppGblHisInHandoffNoCallback = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 44), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisInHandoffNoCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisInHandoffNoCallback.setDescription('Total number of incoming handoffs with no call backs (blind handoffs) received by this gateway.')
ccapAppGblHisOutHandoffCallback = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 45), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisOutHandoffCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisOutHandoffCallback.setDescription('Total number of placed handoffs with call backs (bridged handoffs) from this gateway.')
ccapAppGblHisOutHandoffCallbackRet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 46), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisOutHandoffCallbackRet.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisOutHandoffCallbackRet.setDescription('Total number of returned handoffs with callback (bridged handoffs) to this gateway.')
ccapAppGblHisOutHandoffNoCallback = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 47), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisOutHandoffNoCallback.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisOutHandoffNoCallback.setDescription('Total number of placed handoffs with no callback (blind handoffs) from this gateway.')
ccapAppGblHisOutHandofffailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 48), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisOutHandofffailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisOutHandofffailures.setDescription('Total number of outgoing handoff failures seen by this gateway, while trying to place an outgoing handoff to another application.')
ccapAppGblHisDocumentReadAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 49), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentReadAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentReadAttempts.setDescription('Total number of document read requests made by this gateway.')
ccapAppGblHisDocumentReadSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 50), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentReadSuccess.setDescription('Total number of document read by the gateway.')
ccapAppGblHisDocumentReadFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 51), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentReadFailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentReadFailures.setDescription('Total number of document read errors for this application gateway.')
ccapAppGblHisDocumentParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 52), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentParseErrors.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentParseErrors.setDescription('Total number of document parse errors or semantic errors seen by this gateway.')
ccapAppGblHisDocumentWriteAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 53), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentWriteAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentWriteAttempts.setDescription('Total number of document write attempts by this application gateway.')
ccapAppGblHisDocumentWriteSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 54), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentWriteSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentWriteSuccess.setDescription('Total number of document written successfully by this gateway.')
ccapAppGblHisDocumentWriteFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 55), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDocumentWriteFailures.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDocumentWriteFailures.setDescription('Total number of document write failures for this gateway.')
ccapAppGblHisDTMFAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 56), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDTMFAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDTMFAttempts.setDescription('Total number of attempts to read user DTMF input by this gateway.')
ccapAppGblHisDTMFAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 57), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDTMFAborted.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDTMFAborted.setDescription('Total number of DTMF reads interrupts/aborts by this gateway.')
ccapAppGblHisDTMFNoMatch = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 58), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDTMFNoMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDTMFNoMatch.setDescription('Total number of DTMF no match events on incorrect user input, seen by this gateway.')
ccapAppGblHisDTMFNoInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 59), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDTMFNoInput.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDTMFNoInput.setDescription('Total number of user input timeout on DTMF input seen by this gateway.')
ccapAppGblHisDTMFMatch = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 60), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDTMFMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDTMFMatch.setDescription('Total number of DTMF input matched events seen by this gateway.')
ccapAppGblHisDTMFLongPound = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 61), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisDTMFLongPound.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisDTMFLongPound.setDescription("Total number of 'Long-Pound' user interrupts seen by this gateway.")
ccapAppGblHisASRAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 62), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASRAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASRAttempts.setDescription('Total number of ASR (Automatic Speech Recognition) attempts to read user speech input by this gateway.')
ccapAppGblHisASRAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 63), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASRAborted.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASRAborted.setDescription('Total number of ASR (Automatic Speech Recognition) read interrupts/aborts by this gateway.')
ccapAppGblHisASRNoMatch = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 64), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASRNoMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASRNoMatch.setDescription('Total number of ASR (Automatic Speech Recognition) match events on user speech input seen, by this gateway.')
ccapAppGblHisASRNoInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 65), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASRNoInput.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASRNoInput.setDescription('Total number of ASR (Automatic Speech Recognition) user speech input timeout events, seen by this gateway.')
ccapAppGblHisASRMatch = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 66), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASRMatch.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASRMatch.setDescription('Total number of ASR (Automatic Speech Recognition) user speech input matched events, seen by this gateway.')
ccapAppGblHisAAAAuthenticateFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 67), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthenticateFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthenticateFailure.setDescription('Total number of AAA Authenticate failures seen by this gateway.')
ccapAppGblHisAAAAuthenticateSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 68), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthenticateSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthenticateSuccess.setDescription('Total number of AAA Authenticate success seen by this gateway.')
ccapAppGblHisAAAAuthorizeFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 69), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthorizeFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthorizeFailure.setDescription('Total number of AAA Authorize failures seen by this gateway.')
ccapAppGblHisAAAAuthorizeSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 70), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthorizeSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisAAAAuthorizeSuccess.setDescription('Total number of AAA Authorize success seen by this gateway.')
ccapAppGblHisASNLSubscriptionsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 71), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASNLSubscriptionsSent.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASNLSubscriptionsSent.setDescription('Total number of ASNL subscription sent by this application type.')
ccapAppGblHisASNLSubscriptionsSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 72), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASNLSubscriptionsSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASNLSubscriptionsSuccess.setDescription('Total number of ASNL subscriptions success, seen by this application gateway.')
ccapAppGblHisASNLSubscriptionsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 73), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASNLSubscriptionsFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASNLSubscriptionsFailed.setDescription('Total number of ASNL subscription failures, seen by this gateway.')
ccapAppGblHisASNLNotifReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 74), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisASNLNotifReceived.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisASNLNotifReceived.setDescription('Total number of ASNL subscriptions received by this gateway.')
ccapAppGblHisPromptPlayAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 75), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPromptPlayAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPromptPlayAttempts.setDescription('Total number of prompt play attempts made by this gateway.')
ccapAppGblHisPromptPlaySuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 76), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPromptPlaySuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPromptPlaySuccess.setDescription('Total number of play prompt success, seen by this gateway.')
ccapAppGblHisPromptPlayFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 77), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPromptPlayFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPromptPlayFailed.setDescription('Total number of prompt play failures seen by this gateway.')
ccapAppGblHisPromptPlayDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 78), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisPromptPlayDuration.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisPromptPlayDuration.setDescription('Total duration (in seconds), of all the prompt plays performed by this gateway.')
ccapAppGblHisRecordingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 79), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisRecordingAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisRecordingAttempts.setDescription('Total number of record attempts made by this application gateway.')
ccapAppGblHisRecordingSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 80), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisRecordingSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisRecordingSuccess.setDescription('Total number of recording success, seen by this application gateway.')
ccapAppGblHisRecordingFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 81), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisRecordingFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisRecordingFailed.setDescription('Total number of recording failures seen by this application gateway.')
ccapAppGblHisRecordingDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 82), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisRecordingDuration.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisRecordingDuration.setDescription('Total duration (in seconds), of all the recordings performed by this gateway.')
ccapAppGblHisTTSAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 83), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisTTSAttempts.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisTTSAttempts.setDescription('Total number of TTS (Text-To-Speech) play attempts made by this gateway.')
ccapAppGblHisTTSSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 84), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisTTSSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisTTSSuccess.setDescription('Total number of TTS (Text-To-Speech) play success seen by this gateway.')
ccapAppGblHisTTSFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 5, 85), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppGblHisTTSFailed.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisTTSFailed.setDescription('Total number of TTS (Text-To-Speech) play failures seen by this gateway.')
ccapAppIntfGblStatsLogging = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppIntfGblStatsLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfGblStatsLogging.setDescription('Enable/ disable the Application Interface Information System to gather statistics for all the application interface types on this gateway. Call application interface types are AAA, ASR, Flash, HTTP, SMTP, RAM, RTSP, TFTP, TTS.')
ccapAppIntfGblEventLogging = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppIntfGblEventLogging.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfGblEventLogging.setDescription('Enable/disable the Application Interface Information System to gather event-logs for all the call application interface types on this gateway. Call application interface types are AAA, ASR, Flash, HTTP, SMTP, RAM, RTSP, TFTP and TTS.')
ccapAppIntfGblEvtLogFlush = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppIntfGblEvtLogFlush.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfGblEvtLogFlush.setDescription('Flush the application interface event logs from all the call application interfaces to the destination ftp server. FTP server destination is specified in the IOS configuration through config Command Line Interface.')
ccapAppIntfGblStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearStats", 1), ("clearEventlog", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccapAppIntfGblStatsClear.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfGblStatsClear.setDescription('Perform resetting of the entire Application Interface stats and/or evtlogs for all the interface types and all the associated servers records. Server records are not purged.')
ccapAppIntfGblLastResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfGblLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfGblLastResetTime.setDescription('The time when the application interface information statistics were last reset, either through CLI or through ccapAppIntfGblStatsClear object. When the application interface information system is disabled on the gateway, this object is also reset to zeros.')
ccapAppIntfHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8), )
if mibBuilder.loadTexts: ccapAppIntfHTTPTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPTable.setDescription('Information about last N most active HTTP unique servers accessed from a call application gateway.')
ccapAppIntfHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPServer"))
if mibBuilder.loadTexts: ccapAppIntfHTTPEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPEntry.setDescription('Information about a HTTP server interface to an application. When applicaiton gateway instances access an external HTTP server, a record entry is created for that server. If a maximum number of servers is reached, then oldest accessed server record is purged. Maximum number of server records to retain is configured through IOS CLI.')
ccapAppIntfHTTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 1), ServerNameString())
if mibBuilder.loadTexts: ccapAppIntfHTTPServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPServer.setDescription('The name or IP address of this HTTP server.')
ccapAppIntfHTTPStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this HTTP server.')
ccapAppIntfHTTPEvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPEvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPEvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this HTTP server.')
ccapAppIntfHTTPGetRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPGetRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPGetRequest.setDescription('Total number of HTTP GET requests sent by call applications to this HTTP server.')
ccapAppIntfHTTPGetSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPGetSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPGetSuccess.setDescription('Total number of successful HTTP GET transactions done from call applications to this HTTP server.')
ccapAppIntfHTTPGetFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPGetFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPGetFailure.setDescription('Total number of failed HTTP GET transactions from call applications to this HTTP server.')
ccapAppIntfHTTPPostRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPPostRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPPostRequest.setDescription('Total number of HTTP POST requests sent by call applications to this HTTP server.')
ccapAppIntfHTTPPostSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPPostSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPPostSuccess.setDescription('Total number of successful HTTP POST transactions done from call applications to this HTTP server.')
ccapAppIntfHTTPPostFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPPostFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPPostFailure.setDescription('Total number of failed HTTP POST transactions from call applications to this HTTP server.')
ccapAppIntfHTTPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPTxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPTxBytes.setDescription('Total number KiloBytes sent from call applications to this HTTP server, since last reset.')
ccapAppIntfHTTPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPRxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPRxBytes.setDescription('Total number of KiloBytes received to call applications from this HTTP server, since last reset.')
ccapAppIntfHTTPMinXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 12), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPMinXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPMinXferRate.setDescription('Minimum transfer rate of all the transactions between call applications and this HTTP server, from the last reset.')
ccapAppIntfHTTPMaxXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 13), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPMaxXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPMaxXferRate.setDescription('Maximum transfer rate of all the transactions between call applications and this HTTP server, from the last reset.')
ccapAppIntfHTTPAvgXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 14), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPAvgXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPAvgXferRate.setDescription('Average transfer rate between call applications and this HTTP server. This is a running average of the last ten transactions or from the last reset if transaction count is less than ten.')
ccapAppIntfHTTPLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 8, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfHTTPLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this HTTP server. When the application information system is disabled on the gateway, this object is also reset to zeros.')
ccapAppIntfRTSPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9), )
if mibBuilder.loadTexts: ccapAppIntfRTSPTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPTable.setDescription('Information about last N most active RTSP unique servers accessed from a call application gateway.')
ccapAppIntfRTSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPServer"))
if mibBuilder.loadTexts: ccapAppIntfRTSPEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPEntry.setDescription('Information about a RTSP server interface to an application. When applicaiton gateway instances access an external RTSP server, a record entry is created for that server. If a maximum number of server records has reached, then oldest accessed server record is purged. Maximum number of server records to retain is configured through IOS CLI.')
ccapAppIntfRTSPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 1), ServerNameString())
if mibBuilder.loadTexts: ccapAppIntfRTSPServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPServer.setDescription('The name or IP address of this RTSP server.')
ccapAppIntfRTSPStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this RTSP server.')
ccapAppIntfRTSPEvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPEvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPEvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this RTSP server.')
ccapAppIntfRTSPReadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPReadRequest.setDescription('Total number of RTSP read requests sent by call applications to this RTSP server.')
ccapAppIntfRTSPReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPReadSuccess.setDescription('Total number of successful RTSP read transactions done from call applications to this RTSP server.')
ccapAppIntfRTSPReadFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPReadFailure.setDescription('Total number of failed RTSP read transactions from call applications to this RTSP server.')
ccapAppIntfRTSPWriteRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPWriteRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPWriteRequest.setDescription('Total number of RTSP write requests sent by call applications to this RTSP server.')
ccapAppIntfRTSPWriteSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPWriteSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPWriteSuccess.setDescription('Total number of successful RTSP write transactions done from call applications to this RTSP server.')
ccapAppIntfRTSPWriteFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPWriteFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPWriteFailure.setDescription('Total number of failed RTSP write transactions from call applications to this RTSP server.')
ccapAppIntfRTSPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPTxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPTxBytes.setDescription('Total number KiloBytes sent from call applications to this RTSP server, since last reset.')
ccapAppIntfRTSPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPRxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPRxBytes.setDescription('Total number of KiloBytes received to call applications from this RTSP server, since last reset.')
ccapAppIntfRTSPMinXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 12), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPMinXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPMinXferRate.setDescription('Minimum transfer rate of all the transactions between call applications and this RTSP server, from last reset.')
ccapAppIntfRTSPMaxXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 13), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPMaxXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPMaxXferRate.setDescription('Maximum transfer rate of all the transactions between call applications and this RTSP server, from the last reset.')
ccapAppIntfRTSPAvgXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 14), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPAvgXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPAvgXferRate.setDescription('Average transfer rate between call applications and this RTSP server. This is a running average of the last ten transactions or from the last reset if transaction count is less than ten.')
ccapAppIntfRTSPLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 9, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRTSPLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this RTSP server. When the application information system is disabled on gateway, this object is also reset to zeros.')
ccapAppIntfTFTPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10), )
if mibBuilder.loadTexts: ccapAppIntfTFTPTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPTable.setDescription('Information about last N most active TFTP unique servers accessed from a call application gateway.')
ccapAppIntfTFTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPServer"))
if mibBuilder.loadTexts: ccapAppIntfTFTPEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPEntry.setDescription('Information about a TFTP server interface to a application. When applicaiton gateway instances access an external TFTP server, a record entry is created for that server. If a maximum number of server is reached, then oldest accessed server record is purged. Maximum number of server records to retain is configured through IOS CLI.')
ccapAppIntfTFTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 1), ServerNameString())
if mibBuilder.loadTexts: ccapAppIntfTFTPServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPServer.setDescription('The name or IP address of this TFTP server.')
ccapAppIntfTFTPStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this TFTP server.')
ccapAppIntfTFTPEvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPEvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPEvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this TFTP server.')
ccapAppIntfTFTPReadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPReadRequest.setDescription('Total number of TFTP read requests sent by call applications to this TFTP server.')
ccapAppIntfTFTPReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPReadSuccess.setDescription('Total number of successful TFTP read transactions done from call applications to this TFTP server.')
ccapAppIntfTFTPReadFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPReadFailure.setDescription('Total number of failed TFTP read transactions from call applications to this TFTP server.')
ccapAppIntfTFTPWriteRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPWriteRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPWriteRequest.setDescription('Total number of TFTP write requests sent by call applications to this TFTP server.')
ccapAppIntfTFTPWriteSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPWriteSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPWriteSuccess.setDescription('Total number of successful TFTP write transactions done from call applications to this TFTP server.')
ccapAppIntfTFTPWriteFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPWriteFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPWriteFailure.setDescription('Total number of failed TFTP write transactions from call applications to this TFTP server.')
ccapAppIntfTFTPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPTxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPTxBytes.setDescription('Total number KiloBytes sent from call applications to this TFTP server, since last reset.')
ccapAppIntfTFTPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPRxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPRxBytes.setDescription('Total number of KiloBytes received to call applications from this TFTP server, since last reset.')
ccapAppIntfTFTPMinXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 12), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPMinXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPMinXferRate.setDescription('Minimum transfer rate of all the transactions between call applications and this TFTP server, from the last reset.')
ccapAppIntfTFTPMaxXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 13), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPMaxXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPMaxXferRate.setDescription('Maximum transfer rate of all the transactions between call applications and this TFTP server, from the last reset.')
ccapAppIntfTFTPAvgXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 14), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPAvgXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPAvgXferRate.setDescription('Average transfer rate between call applications and this TFTP server. This is a running average of the last ten transactions or from the last reset if transaction count is less than ten.')
ccapAppIntfTFTPLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 10, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTFTPLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this TFTP server. When the application information system is disabled on the gateway, this object is also reset to zeros.')
ccapAppIntfFlashReadRequest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfFlashReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfFlashReadRequest.setDescription('Total number of Flash read requests sent by call applications to flash file system on this gateway.')
ccapAppIntfFlashReadSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfFlashReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfFlashReadSuccess.setDescription('Total number of successful flash file read transactions done from call applications on this gateway.')
ccapAppIntfFlashReadFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfFlashReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfFlashReadFailure.setDescription('Total number of failed flash read transactions from call applications on this gateway.')
ccapAppIntfRAMRecordReadRequest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRAMRecordReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordReadRequest.setDescription('Total number of RAM recording read requests sent by call applications on this gateway.')
ccapAppIntfRAMRecordReadSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRAMRecordReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordReadSuccess.setDescription('Total number of successful RAM recording read transactions done from call applications on this gateway.')
ccapAppIntfRAMRecordiongReadFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRAMRecordiongReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordiongReadFailure.setDescription('Total number of RAM recording read transactions failures from call applications on this gateway.')
ccapAppIntfRAMRecordRequest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRAMRecordRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordRequest.setDescription('Total number of RAM recording requests sent by call applications on this gateway.')
ccapAppIntfRAMRecordSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRAMRecordSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordSuccess.setDescription('Total number of successful RAM recordings done from call applications on this gateway.')
ccapAppIntfRAMRecordiongFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfRAMRecordiongFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordiongFailure.setDescription('Total number of RAM recording failures from call applications on this gateway.')
ccapAppIntfSMTPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20), )
if mibBuilder.loadTexts: ccapAppIntfSMTPTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPTable.setDescription('Information about last N most active SMTP unique servers accessed from a call application gateway. When applicaiton gateway instances access an external SMTP server, a record entry is created for that server. If a maximum number of server record has reached, then the oldest accessed server record is purged. Maximum number of server records to retain is configured through IOS CLI.')
ccapAppIntfSMTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPServer"))
if mibBuilder.loadTexts: ccapAppIntfSMTPEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPEntry.setDescription('Information about a SMTP server interface to an application.')
ccapAppIntfSMTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 1), ServerNameString())
if mibBuilder.loadTexts: ccapAppIntfSMTPServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPServer.setDescription('The name or IP address of this SMTP server.')
ccapAppIntfSMTPStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this SMTP server.')
ccapAppIntfSMTPEvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPEvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPEvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this SMTP server.')
ccapAppIntfSMTPReadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPReadRequest.setDescription('Total number of SMTP read requests sent by call applications to this SMTP server.')
ccapAppIntfSMTPReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPReadSuccess.setDescription('Total number of successful SMTP read transactions done from call applications to this SMTP server.')
ccapAppIntfSMTPReadFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPReadFailure.setDescription('Total number of failed SMTP read transactions from call applications to this SMTP server.')
ccapAppIntfSMTPWriteRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPWriteRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPWriteRequest.setDescription('Total number of SMTP write requests sent by call applications to this SMTP server.')
ccapAppIntfSMTPWriteSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPWriteSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPWriteSuccess.setDescription('Total number of successful SMTP write transactions done from call applications to this SMTP server.')
ccapAppIntfSMTPWriteFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPWriteFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPWriteFailure.setDescription('Total number of failed SMTP write transactions from call applications to this SMTP server.')
ccapAppIntfSMTPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPTxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPTxBytes.setDescription('Total number KiloBytes sent from call applications to this SMTP server, since last reset.')
ccapAppIntfSMTPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPRxBytes.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPRxBytes.setDescription('Total number of KiloBytes received to call applications from this SMTP server, since last reset.')
ccapAppIntfSMTPMinXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 12), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPMinXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPMinXferRate.setDescription('Minimum transfer rate of all the transactions between call applications and this SMTP server, from the last reset.')
ccapAppIntfSMTPMaxXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 13), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPMaxXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPMaxXferRate.setDescription('Maximum transfer rate of all the transactions between call applications and this SMTP server, from the last reset.')
ccapAppIntfSMTPAvgXferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 14), ZeroBasedCounter32()).setUnits('KBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPAvgXferRate.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPAvgXferRate.setDescription('Average transfer rate between call applications and this SMTP server. This is a running average of the last ten transactions or from the last reset if transaction count is less than ten.')
ccapAppIntfSMTPLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 20, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfSMTPLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this SMTP server. When the application information system is disabled on gateway, this object is also reset to zeros.')
ccapAppIntfAAAMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21), )
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListTable.setDescription('Information about last N most active AAA method lists accessed from a call application gateway. When applicaiton gateway instances access AAA method list, a record entry is created for that method list. If a maximum number of server is reached, then oldest accessed method list record is purged. Maximum number of method list records to retain is configured through IOS CLI.')
ccapAppIntfAAAMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListServer"))
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListEntry.setDescription('Information about an AAA method list interface to an call application.')
ccapAppIntfAAAMethodListServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListServer.setDescription('The name of this configured AAA method list.')
ccapAppIntfAAAMethodListStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this AAA method list.')
ccapAppIntfAAAMethodListEvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListEvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListEvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this AAA method list.')
ccapAppIntfAAAMethodListReadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListReadRequest.setDescription('Total number of AAA method list read requests sent by call applications to configured AAA method list on this gateway.')
ccapAppIntfAAAMethodListReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListReadSuccess.setDescription('Total number of successful AAA method lists transactions done from call applications on this gateway.')
ccapAppIntfAAAMethodListReadFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListReadFailure.setDescription('Total number of failed AAA method lists transactions from call applications on this gateway. This object does not include the AAA rejects by the servers. It indicates failures due to this gateway and AAA server issues.')
ccapAppIntfAAAMethodListLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 21, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this AAA method list. When the application information system is disabled on gateway, this object is also reset to zeros.')
ccapAppIntfASRTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22), )
if mibBuilder.loadTexts: ccapAppIntfASRTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRTable.setDescription('Information about last N most active ASR (Automatic Speech Recognition ) unique servers accessed from a call application gateway. When applicaiton gateway instances access an external ASR server, a record entry is created for that server. If a maximum number of server records has reached, then the oldest accessed server record is purged. Maximum number of server records to retain is configured through IOS CLI.')
ccapAppIntfASREntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRServer"))
if mibBuilder.loadTexts: ccapAppIntfASREntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASREntry.setDescription('Information about an ASR server interface to an call application.')
ccapAppIntfASRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 1), ServerNameString())
if mibBuilder.loadTexts: ccapAppIntfASRServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRServer.setDescription('The name or IP address of this ASR server.')
ccapAppIntfASRStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfASRStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this ASR server.')
ccapAppIntfASREvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfASREvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASREvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this ASR server.')
ccapAppIntfASRReadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfASRReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRReadRequest.setDescription('Total number of ASR read requests sent by call applications to this ASR server from this gateway.')
ccapAppIntfASRReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfASRReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRReadSuccess.setDescription('Total number of successful ASR transactions done from call applications on this gateway to this ASR server.')
ccapAppIntfASRReadFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfASRReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRReadFailure.setDescription('Total number of failed ASR attempts transactions from call applications to this ASR server.')
ccapAppIntfASRLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 22, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfASRLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this ASR server. When the application information system is disabled on the gateway, this object is also reset to zeros.')
ccapAppIntfTTSTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23), )
if mibBuilder.loadTexts: ccapAppIntfTTSTable.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSTable.setDescription('Information about last N most active TTS (Automatic Speech Recognition ) unique servers accessed from a call application gateway. When applicaiton gateway instances access an external TTS server, a record entry is created for that server. If maximum number of server records has reached, then oldest accessed server record is purged. Maximum number of server records to retain is configured through IOS CLI.')
ccapAppIntfTTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1), ).setIndexNames((1, "CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSServer"))
if mibBuilder.loadTexts: ccapAppIntfTTSEntry.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSEntry.setDescription('Information about an TTS server interface to a call application.')
ccapAppIntfTTSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 1), ServerNameString())
if mibBuilder.loadTexts: ccapAppIntfTTSServer.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSServer.setDescription('The name or IP address of this TTS server.')
ccapAppIntfTTSStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTTSStats.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSStats.setDescription('To display the current configuration of Application Interface Information System for gathering statistics for this TTS server.')
ccapAppIntfTTSEvtLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTTSEvtLog.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSEvtLog.setDescription('To display the current configuration of Application Information System for gathering event-logs for this TTS server.')
ccapAppIntfTTSReadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTTSReadRequest.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSReadRequest.setDescription('Total number of TTS read requests sent by call applications to this TTS server from this gateway.')
ccapAppIntfTTSReadSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTTSReadSuccess.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSReadSuccess.setDescription('Total number of successful TTS transactions done from call applications on this gateway to this TTS server.')
ccapAppIntfTTSReadFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTTSReadFailure.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSReadFailure.setDescription('Total number of failed TTS attempts transactions from call applications to this TTS server.')
ccapAppIntfTTSLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 146, 1, 6, 23, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccapAppIntfTTSLastResetTime.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSLastResetTime.setDescription('The time when the application information statistics were last reset, either through CLI or through ccapAppGblStatsClear object for this TTS server. When the application information system is disabled on the gateway, this object is also reset to zeros.')
ciscoCallApplicationMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 3))
ciscoCallApplicationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 1))
ciscoCallApplicationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2))
ciscoCallApplicationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 1, 1)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapGeneralCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallApplicationMIBCompliance = ciscoCallApplicationMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCallApplicationMIBCompliance.setDescription('The compliance statement for Cisco agents which implement the CISCO-CALL-APPLICATION-MIB.')
ciscoCallApplicationMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 1, 2)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapGeneralCfgGroupRev1"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHistoryGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstanceHistoryGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblCfgGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfGblCfgGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfFlashGroup"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCallApplicationMIBComplianceRev1 = ciscoCallApplicationMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCallApplicationMIBComplianceRev1.setDescription('The compliance statement for Cisco agents which implement the CISCO-CALL-APPLICATION-MIB.')
ccapGeneralCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 1)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppLocation"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppLoadState"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppLoadFailReason"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppDescr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppCallType"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapGeneralCfgGroup = ccapGeneralCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ccapGeneralCfgGroup.setDescription('A collection of objects for general configuration of call applications.')
ccapGeneralCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 2)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppLocation"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppLoadState"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppLoadFailReason"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppDescr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppCallType"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppRowStatus"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppActiveInstances"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppEventLogging"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppPSTNInCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppPSTNOutCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIPInCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIPOutCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppPlaceCallInProgress"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppHandoffInProgress"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppPromptPlayActive"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppRecordingActive"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTTSActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapGeneralCfgGroupRev1 = ccapGeneralCfgGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ccapGeneralCfgGroupRev1.setDescription('A collection of objects for general configuration of call applications and to display current activity of applications.')
ccapAppTypeHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 3)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisEvtLogging"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisLastResetTime"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallSetupInd"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNInCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallSetupReq"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPSTNOutCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallSetupInd"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPInCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallSetupReq"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisIPOutCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPlaceCallAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPlaceCallSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPlaceCallFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisInHandoffCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisInHandoffCallbackRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisInHandoffNoCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisOutHandoffCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisOutHandoffCallbackRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisOutHandoffNoCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisOutHandofffailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentReadAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentReadFailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentParseErrors"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentWriteAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentWriteSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDocumentWriteFailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDTMFAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDTMFAborted"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDTMFNoMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDTMFNoInput"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDTMFMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisDTMFLongPound"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASRAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASRAborted"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASRNoMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASRNoInput"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASRMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisAAAAuthenticateFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisAAAAuthenticateSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisAAAAuthorizeFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisAAAAuthorizeSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASNLSubscriptionsSent"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASNLSubscriptionsSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASNLSubscriptionsFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisASNLNotifReceived"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPromptPlayAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPromptPlaySuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPromptPlayFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisPromptPlayDuration"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisRecordingAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisRecordingSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisRecordingFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisRecordingDuration"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisTTSAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisTTSSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppTypeHisTTSFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppTypeHistoryGroup = ccapAppTypeHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppTypeHistoryGroup.setDescription('A collection of objects to monitor information for each call application type. This provides statistics from all the history instances for that call application type.')
ccapAppInstanceHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 4)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisSessionID"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisAppName"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallSetupInd"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNInCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallSetupReq"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPSTNOutCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallSetupInd"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPInCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallSetupReq"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisIPOutCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPlaceCallAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPlaceCallSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPlaceCallFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisInHandoffCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisInHandoffCallbackRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisInHandoffNoCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisOutHandoffCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisOutHandoffCallbackRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisOutHandoffNoCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisOutHandofffailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentReadAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentReadFailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentParseErrors"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentWriteAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentWriteSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDocumentWriteFailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDTMFAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDTMFAborted"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDTMFNoMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDTMFNoInput"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDTMFMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisDTMFLongPound"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASRAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASRAborted"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASRNoMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASRNoInput"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASRMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisAAAAuthenticateFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisAAAAuthenticateSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisAAAAuthorizeFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisAAAAuthorizeSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASNLSubscriptionsSent"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASNLSubscriptionsSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASNLSubscriptionsFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisASNLNotifReceived"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPromptPlayAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPromptPlaySuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPromptPlayFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisPromptPlayDuration"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisRecordingAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisRecordingSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisRecordingFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisRecordingDuration"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisTTSAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisTTSSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHisTTSFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppInstHistEvtLogging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppInstanceHistoryGroup = ccapAppInstanceHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppInstanceHistoryGroup.setDescription('A collection of objects to display detailed information on an instance of a call applications once the application instance has terminated.')
ccapAppGblActGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 5)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActCurrentInstances"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActPSTNInCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActPSTNOutCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActIPInCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActIPOutCallNowConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActPlaceCallInProgress"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActHandoffInProgress"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActPromptPlayActive"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActRecordingActive"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblActTTSActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppGblActGroup = ccapAppGblActGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblActGroup.setDescription('A collection of objects to display gauges on the current activity for all the active instances from all the call application types on this gateway.')
ccapAppGblCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 6)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppGblStatsLogging"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblEventLogging"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblEvtLogflush"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblStatsClear"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppGblCfgGroup = ccapAppGblCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblCfgGroup.setDescription('A collection of objects for general configuration of call application information system stats and event logs for all the application instances on this gateway and to display current configuration and reset time of statistics.')
ccapAppGblHisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 7)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisTotalInstances"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisLastReset"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallSetupInd"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNInCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallSetupReq"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPSTNOutCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallSetupInd"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPInCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallSetupReq"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallTotConn"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallHandedOut"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallHandOutRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallInHandoff"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallInHandoffRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallDiscNormal"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallDiscUsrErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisIPOutCallDiscSysErr"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPlaceCallAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPlaceCallSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPlaceCallFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisInHandoffCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisInHandoffCallbackRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisInHandoffNoCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisOutHandoffCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisOutHandoffCallbackRet"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisOutHandoffNoCallback"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisOutHandofffailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentReadAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentReadFailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentParseErrors"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentWriteAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentWriteSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDocumentWriteFailures"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDTMFAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDTMFAborted"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDTMFNoMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDTMFNoInput"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDTMFMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisDTMFLongPound"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASRAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASRAborted"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASRNoMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASRNoInput"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASRMatch"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisAAAAuthenticateFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisAAAAuthenticateSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisAAAAuthorizeFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisAAAAuthorizeSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASNLSubscriptionsSent"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASNLSubscriptionsSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASNLSubscriptionsFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisASNLNotifReceived"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPromptPlayAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPromptPlaySuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPromptPlayFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisPromptPlayDuration"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisRecordingAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisRecordingSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisRecordingFailed"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisRecordingDuration"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisTTSAttempts"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisTTSSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppGblHisTTSFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppGblHisGroup = ccapAppGblHisGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppGblHisGroup.setDescription('A collection of objects to display detailed information from the gateway for all the history instances which started from all application-types.')
ccapAppIntfGblCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 8)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfGblStatsLogging"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfGblEventLogging"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfGblEvtLogFlush"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfGblStatsClear"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfGblLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfGblCfgGroup = ccapAppIntfGblCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfGblCfgGroup.setDescription('A collection of objects for general configuration of call application interface information system stats and event logs for all the application interfaces and servers associated with each interface. Also this group is to display current configuration and reset time of statistics for all the interfaces counters.')
ccapAppIntfHTTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 9)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPEvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPGetRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPGetSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPGetFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPPostRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPPostSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPPostFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPTxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPRxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPMinXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPMaxXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPAvgXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfHTTPLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfHTTPGroup = ccapAppIntfHTTPGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfHTTPGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and HTTP servers.')
ccapAppIntfRTSPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 10)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPEvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPWriteRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPWriteSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPWriteFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPTxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPRxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPMinXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPMaxXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPAvgXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRTSPLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfRTSPGroup = ccapAppIntfRTSPGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRTSPGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and RTSP servers.')
ccapAppIntfTFTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 11)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPEvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPWriteRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPWriteSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPWriteFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPTxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPRxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPMinXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPMaxXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPAvgXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTFTPLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfTFTPGroup = ccapAppIntfTFTPGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTFTPGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and TFTP servers.')
ccapAppIntfSMTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 12)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPEvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPWriteRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPWriteSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPWriteFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPTxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPRxBytes"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPMinXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPMaxXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPAvgXferRate"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfSMTPLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfSMTPGroup = ccapAppIntfSMTPGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfSMTPGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and SMTP servers.')
ccapAppIntfAAAMethodListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 13)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListEvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfAAAMethodListLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfAAAMethodListGroup = ccapAppIntfAAAMethodListGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfAAAMethodListGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and AAA methods.')
ccapAppIntfASRGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 14)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASREvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfASRLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfASRGroup = ccapAppIntfASRGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfASRGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and ASR (Automatic Speech Recognition) servers.')
ccapAppIntfTTSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 15)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSStats"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSEvtLog"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfTTSLastResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfTTSGroup = ccapAppIntfTTSGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfTTSGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and TTS (Text To Speech) servers.')
ccapAppIntfFlashGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 16)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfFlashReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfFlashReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfFlashReadFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfFlashGroup = ccapAppIntfFlashGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfFlashGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and Flash file system on the IOS gateway.')
ccapAppIntfRAMRecordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 146, 3, 2, 17)).setObjects(("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordReadRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordReadSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordiongReadFailure"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordRequest"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordSuccess"), ("CISCO-CALL-APPLICATION-MIB", "ccapAppIntfRAMRecordiongFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccapAppIntfRAMRecordGroup = ccapAppIntfRAMRecordGroup.setStatus('current')
if mibBuilder.loadTexts: ccapAppIntfRAMRecordGroup.setDescription('A collection of objects to display statistics related to interaction between application instances and media recording posted and re-read from RAM (memory) on this gateway.')
mibBuilder.exportSymbols("CISCO-CALL-APPLICATION-MIB", ccapAppGblHisDocumentWriteFailures=ccapAppGblHisDocumentWriteFailures, ccapAppIntfHTTPPostRequest=ccapAppIntfHTTPPostRequest, ccapAppInstHisPSTNOutCallDiscUsrErr=ccapAppInstHisPSTNOutCallDiscUsrErr, ccapAppIntfRTSPMinXferRate=ccapAppIntfRTSPMinXferRate, ccapAppIntfRTSPStats=ccapAppIntfRTSPStats, ccapAppGblHisIPOutCallTotConn=ccapAppGblHisIPOutCallTotConn, ccapAppGblHisASNLSubscriptionsSent=ccapAppGblHisASNLSubscriptionsSent, ccapAppTypeHisASRAborted=ccapAppTypeHisASRAborted, ccapAppGblHisPSTNOutCallInHandoff=ccapAppGblHisPSTNOutCallInHandoff, ccapAppGblActPSTNOutCallNowConn=ccapAppGblActPSTNOutCallNowConn, ccapAppTypeHisPSTNInCallDiscSysErr=ccapAppTypeHisPSTNInCallDiscSysErr, ccapAppGblHisPSTNInCallHandOutRet=ccapAppGblHisPSTNInCallHandOutRet, ccapAppTypeHisDocumentWriteSuccess=ccapAppTypeHisDocumentWriteSuccess, ccapAppTypeHisLastResetTime=ccapAppTypeHisLastResetTime, ccapAppIntfRTSPReadFailure=ccapAppIntfRTSPReadFailure, ccapAppGblHisPromptPlayFailed=ccapAppGblHisPromptPlayFailed, ccapAppInstHisDocumentReadFailures=ccapAppInstHisDocumentReadFailures, ccapAppInstHisIPInCallInHandoff=ccapAppInstHisIPInCallInHandoff, ccapAppIntfHTTPLastResetTime=ccapAppIntfHTTPLastResetTime, ccapAppTypeHisPSTNInCallHandedOut=ccapAppTypeHisPSTNInCallHandedOut, ccapAppIntfTTSEntry=ccapAppIntfTTSEntry, ccapAppGblHisPSTNOutCallHandOutRet=ccapAppGblHisPSTNOutCallHandOutRet, ccapAppInstHisIPOutCallSetupReq=ccapAppInstHisIPOutCallSetupReq, ccapAppLocation=ccapAppLocation, ccapAppTypeHisPSTNInCallInHandoff=ccapAppTypeHisPSTNInCallInHandoff, ccapAppLoadState=ccapAppLoadState, ccapAppGblHisDocumentParseErrors=ccapAppGblHisDocumentParseErrors, ccapAppTypeHistoryGroup=ccapAppTypeHistoryGroup, ccapAppTypeHisIPInCallHandedOut=ccapAppTypeHisIPInCallHandedOut, ccapAppIntfGblStatsClear=ccapAppIntfGblStatsClear, ccapAppIntfSMTPAvgXferRate=ccapAppIntfSMTPAvgXferRate, ccapAppGblHisRecordingSuccess=ccapAppGblHisRecordingSuccess, ccapAppInstHisPlaceCallFailure=ccapAppInstHisPlaceCallFailure, ccapAppTypeHisIPOutCallDiscNormal=ccapAppTypeHisIPOutCallDiscNormal, ServerNameString=ServerNameString, ccapAppTypeHisOutHandoffCallback=ccapAppTypeHisOutHandoffCallback, ccapAppInstHisPSTNOutCallDiscSysErr=ccapAppInstHisPSTNOutCallDiscSysErr, PYSNMP_MODULE_ID=ciscoCallApplicationMIB, ccapAppTypeHisInHandoffNoCallback=ccapAppTypeHisInHandoffNoCallback, ccapAppIntfASREvtLog=ccapAppIntfASREvtLog, ccapAppGblHisAAAAuthenticateFailure=ccapAppGblHisAAAAuthenticateFailure, ccapAppGblHisDTMFLongPound=ccapAppGblHisDTMFLongPound, ccapAppIntfSMTPTable=ccapAppIntfSMTPTable, ccapAppInstHisPromptPlayDuration=ccapAppInstHisPromptPlayDuration, ccapAppInstHisPSTNOutCallInHandoff=ccapAppInstHisPSTNOutCallInHandoff, ccapAppGblHisPSTNOutCallSetupReq=ccapAppGblHisPSTNOutCallSetupReq, ccapAppGblHisDTMFAttempts=ccapAppGblHisDTMFAttempts, ccapAppGblActHandoffInProgress=ccapAppGblActHandoffInProgress, ccapAppIntfRAMRecordGroup=ccapAppIntfRAMRecordGroup, ccapAppIntfSMTPReadFailure=ccapAppIntfSMTPReadFailure, ccapAppTypeHisRecordingDuration=ccapAppTypeHisRecordingDuration, ccapAppGblHisPSTNInCallDiscUsrErr=ccapAppGblHisPSTNInCallDiscUsrErr, ccapAppTypeHisPSTNOutCallInHandoffRet=ccapAppTypeHisPSTNOutCallInHandoffRet, ccapAppTypeHistoryTable=ccapAppTypeHistoryTable, ccapAppGblHisDocumentReadAttempts=ccapAppGblHisDocumentReadAttempts, ccapAppInstHisRecordingAttempts=ccapAppInstHisRecordingAttempts, ccapAppIntfTFTPTable=ccapAppIntfTFTPTable, ccapAppGblEventLogging=ccapAppGblEventLogging, ccapAppIntfAAAMethodListEntry=ccapAppIntfAAAMethodListEntry, ccapAppTypeHisIPInCallInHandoff=ccapAppTypeHisIPInCallInHandoff, ccapAppIntfTFTPServer=ccapAppIntfTFTPServer, ccapAppGblActPromptPlayActive=ccapAppGblActPromptPlayActive, ccapAppIntfAAAMethodListReadFailure=ccapAppIntfAAAMethodListReadFailure, ccapAppTypeHisIPOutCallHandOutRet=ccapAppTypeHisIPOutCallHandOutRet, ccapAppGblHisLastReset=ccapAppGblHisLastReset, ccapAppIntfSMTPLastResetTime=ccapAppIntfSMTPLastResetTime, ccapAppIntfTTSGroup=ccapAppIntfTTSGroup, ccapAppGblHisDTMFNoMatch=ccapAppGblHisDTMFNoMatch, ccapAppGblHisPlaceCallAttempts=ccapAppGblHisPlaceCallAttempts, ccapAppGblHisAAAAuthorizeFailure=ccapAppGblHisAAAAuthorizeFailure, ccapAppTypeHisPlaceCallSuccess=ccapAppTypeHisPlaceCallSuccess, ccapAppTypeHisASRNoMatch=ccapAppTypeHisASRNoMatch, ccapAppGblHisDocumentWriteSuccess=ccapAppGblHisDocumentWriteSuccess, ccapAppInstHisIPInCallHandedOut=ccapAppInstHisIPInCallHandedOut, ccapAppGblHisPSTNInCallDiscSysErr=ccapAppGblHisPSTNInCallDiscSysErr, ccapAppIntfTTSStats=ccapAppIntfTTSStats, ccapAppTypeHisIPOutCallDiscUsrErr=ccapAppTypeHisIPOutCallDiscUsrErr, ccapGeneralCfgGroup=ccapGeneralCfgGroup, ccapAppGblHisIPOutCallInHandoffRet=ccapAppGblHisIPOutCallInHandoffRet, ccapAppInstHisAAAAuthorizeFailure=ccapAppInstHisAAAAuthorizeFailure, ccapAppInstHisIPOutCallHandOutRet=ccapAppInstHisIPOutCallHandOutRet, ccapAppGblHisStat=ccapAppGblHisStat, ccapAppTypeHisASRNoInput=ccapAppTypeHisASRNoInput, ccapAppInstHisIPOutCallDiscNormal=ccapAppInstHisIPOutCallDiscNormal, ccapAppInstHisPlaceCallSuccess=ccapAppInstHisPlaceCallSuccess, ccapAppIntfASRReadSuccess=ccapAppIntfASRReadSuccess, ccapAppIntfRTSPEntry=ccapAppIntfRTSPEntry, ccapAppGblHisGroup=ccapAppGblHisGroup, ccapAppIntfHTTPGetSuccess=ccapAppIntfHTTPGetSuccess, ccapAppGblActRecordingActive=ccapAppGblActRecordingActive, ccapAppInstHisPSTNInCallInHandoff=ccapAppInstHisPSTNInCallInHandoff, ccapAppIntfTFTPWriteFailure=ccapAppIntfTFTPWriteFailure, ccapAppIntfRTSPTable=ccapAppIntfRTSPTable, ccapAppIntfHTTPPostFailure=ccapAppIntfHTTPPostFailure, ccapAppInstHisDTMFNoMatch=ccapAppInstHisDTMFNoMatch, ccapAppTypeHisIPInCallDiscUsrErr=ccapAppTypeHisIPInCallDiscUsrErr, ccapAppGblActTTSActive=ccapAppGblActTTSActive, ccapAppIntfGblLastResetTime=ccapAppIntfGblLastResetTime, ccapAppIntfHTTPAvgXferRate=ccapAppIntfHTTPAvgXferRate, ccapAppIntfSMTPEntry=ccapAppIntfSMTPEntry, ccapAppActiveInstances=ccapAppActiveInstances, ccapAppGblHisPSTNInCallInHandoff=ccapAppGblHisPSTNInCallInHandoff, ccapAppTypeHisPSTNOutCallDiscSysErr=ccapAppTypeHisPSTNOutCallDiscSysErr, ccapAppTypeHisDTMFAborted=ccapAppTypeHisDTMFAborted, ccapAppGblHisInHandoffCallbackRet=ccapAppGblHisInHandoffCallbackRet, ccapAppTypeHisOutHandofffailures=ccapAppTypeHisOutHandofffailures, ccapAppInstHisASRNoMatch=ccapAppInstHisASRNoMatch, ccapAppTypeHisDTMFNoInput=ccapAppTypeHisDTMFNoInput, ccapAppTypeHisAAAAuthenticateFailure=ccapAppTypeHisAAAAuthenticateFailure, ccapAppTypeHisIPInCallDiscSysErr=ccapAppTypeHisIPInCallDiscSysErr, ccapAppIntfASREntry=ccapAppIntfASREntry, ccapAppIntfRTSPWriteRequest=ccapAppIntfRTSPWriteRequest, ccapAppGblHisTotalInstances=ccapAppGblHisTotalInstances, ccapAppTypeHisRecordingAttempts=ccapAppTypeHisRecordingAttempts, ccapAppGblHisIPInCallHandedOut=ccapAppGblHisIPInCallHandedOut, ccapAppIntfAAAMethodListReadSuccess=ccapAppIntfAAAMethodListReadSuccess, ccapAppTypeHisPromptPlayDuration=ccapAppTypeHisPromptPlayDuration, ccapAppTTSActive=ccapAppTTSActive, ccapAppGblHisPSTNInCallTotConn=ccapAppGblHisPSTNInCallTotConn, ccapAppIntfHTTPRxBytes=ccapAppIntfHTTPRxBytes, ccapAppTypeHisIPInCallTotConn=ccapAppTypeHisIPInCallTotConn, ccapAppGblHisIPInCallHandOutRet=ccapAppGblHisIPInCallHandOutRet, ccapAppIntfHTTPMaxXferRate=ccapAppIntfHTTPMaxXferRate, ccapAppGblHisIPInCallInHandoff=ccapAppGblHisIPInCallInHandoff, ccapAppInstHisDocumentWriteSuccess=ccapAppInstHisDocumentWriteSuccess, ccapAppTypeHisPSTNInCallInHandoffRet=ccapAppTypeHisPSTNInCallInHandoffRet, ccapAppInstHisDTMFNoInput=ccapAppInstHisDTMFNoInput, ccapAppTypeHisDocumentParseErrors=ccapAppTypeHisDocumentParseErrors, ccapAppInstHisOutHandoffCallbackRet=ccapAppInstHisOutHandoffCallbackRet, ccapAppGblActPlaceCallInProgress=ccapAppGblActPlaceCallInProgress, ccapAppInstHisPSTNInCallTotConn=ccapAppInstHisPSTNInCallTotConn, ccapAppTypeHisASNLSubscriptionsFailed=ccapAppTypeHisASNLSubscriptionsFailed, ccapAppInstHisIPOutCallDiscUsrErr=ccapAppInstHisIPOutCallDiscUsrErr, ccapAppInstHisPSTNOutCallSetupReq=ccapAppInstHisPSTNOutCallSetupReq, ccapAppIntfTTSReadRequest=ccapAppIntfTTSReadRequest, ccapAppInstHisPSTNOutCallHandedOut=ccapAppInstHisPSTNOutCallHandedOut, ccapAppGblHisPlaceCallFailure=ccapAppGblHisPlaceCallFailure, ccapAppIntfTTSLastResetTime=ccapAppIntfTTSLastResetTime, ccapAppIntfHTTPServer=ccapAppIntfHTTPServer, ccapAppTypeHisPSTNOutCallInHandoff=ccapAppTypeHisPSTNOutCallInHandoff, ccapAppInstHisASRMatch=ccapAppInstHisASRMatch, ccapAppGblEvtLogflush=ccapAppGblEvtLogflush, ccapAppGblHisOutHandoffNoCallback=ccapAppGblHisOutHandoffNoCallback, ccapAppIntfHTTPTable=ccapAppIntfHTTPTable, ccapAppInstHisDocumentReadSuccess=ccapAppInstHisDocumentReadSuccess, ccapAppGblHisDocumentWriteAttempts=ccapAppGblHisDocumentWriteAttempts, ccapAppInstHisInHandoffCallbackRet=ccapAppInstHisInHandoffCallbackRet, ccapAppGblHisASNLNotifReceived=ccapAppGblHisASNLNotifReceived, ccapAppGblHisASRMatch=ccapAppGblHisASRMatch, ccapAppTypeHisIPInCallDiscNormal=ccapAppTypeHisIPInCallDiscNormal, ccapAppIntfASRReadFailure=ccapAppIntfASRReadFailure, ccapAppIntfTFTPEvtLog=ccapAppIntfTFTPEvtLog, ccapAppIntfTFTPLastResetTime=ccapAppIntfTFTPLastResetTime, ccapAppInstHisDocumentReadAttempts=ccapAppInstHisDocumentReadAttempts, ccapAppIntfASRReadRequest=ccapAppIntfASRReadRequest, ccapAppInstHisOutHandoffNoCallback=ccapAppInstHisOutHandoffNoCallback, ccapAppIntfRAMRecordSuccess=ccapAppIntfRAMRecordSuccess, ccapAppGblHisRecordingAttempts=ccapAppGblHisRecordingAttempts, ciscoCallApplicationMIBCompliances=ciscoCallApplicationMIBCompliances, ccapConf=ccapConf, ccapAppInstHisPSTNInCallHandOutRet=ccapAppInstHisPSTNInCallHandOutRet, ccapAppIntfRAMRecordRequest=ccapAppIntfRAMRecordRequest, ccapAppIntfTFTPGroup=ccapAppIntfTFTPGroup, ccapAppTypeHisTTSSuccess=ccapAppTypeHisTTSSuccess, ccapAppGblHisDTMFMatch=ccapAppGblHisDTMFMatch, ccapAppInstHistEvtLogging=ccapAppInstHistEvtLogging, ccapAppInstHisIPOutCallHandedOut=ccapAppInstHisIPOutCallHandedOut, ccapAppTypeHisPSTNInCallDiscUsrErr=ccapAppTypeHisPSTNInCallDiscUsrErr, ccapAppIntfTTSEvtLog=ccapAppIntfTTSEvtLog, ccapAppPSTNInCallNowConn=ccapAppPSTNInCallNowConn, ccapAppGblLastResetTime=ccapAppGblLastResetTime, ccapAppIntfTFTPReadRequest=ccapAppIntfTFTPReadRequest, ccapAppIntfTTSReadFailure=ccapAppIntfTTSReadFailure, ccapAppTypeHisDocumentReadFailures=ccapAppTypeHisDocumentReadFailures, ccapAppInstHisIPOutCallTotConn=ccapAppInstHisIPOutCallTotConn, ccapAppTypeHisDocumentWriteFailures=ccapAppTypeHisDocumentWriteFailures, ccapAppInstHisPSTNInCallHandedOut=ccapAppInstHisPSTNInCallHandedOut, ccapAppInstHisDTMFLongPound=ccapAppInstHisDTMFLongPound, ccapAppIntf=ccapAppIntf, ccapAppIntfRTSPReadRequest=ccapAppIntfRTSPReadRequest, ccapAppTypeHisPromptPlaySuccess=ccapAppTypeHisPromptPlaySuccess, ccapAppIntfTFTPRxBytes=ccapAppIntfTFTPRxBytes, ccapAppIntfTFTPMaxXferRate=ccapAppIntfTFTPMaxXferRate, ccapAppInstHisPSTNInCallDiscSysErr=ccapAppInstHisPSTNInCallDiscSysErr, ccapAppTypeHisDTMFLongPound=ccapAppTypeHisDTMFLongPound, ccapAppIntfAAAMethodListStats=ccapAppIntfAAAMethodListStats, ccapAppInstHisIPInCallTotConn=ccapAppInstHisIPInCallTotConn, ccapAppRecordingActive=ccapAppRecordingActive, ccapAppGblHisIPOutCallInHandoff=ccapAppGblHisIPOutCallInHandoff, ccapAppGblHisRecordingDuration=ccapAppGblHisRecordingDuration, ccapAppInstHisPSTNInCallDiscNormal=ccapAppInstHisPSTNInCallDiscNormal, ccapAppTypeHisInHandoffCallbackRet=ccapAppTypeHisInHandoffCallbackRet, ciscoCallApplicationMIBCompliance=ciscoCallApplicationMIBCompliance, ccapAppGblHisDocumentReadSuccess=ccapAppGblHisDocumentReadSuccess, ccapAppGblHisPSTNInCallSetupInd=ccapAppGblHisPSTNInCallSetupInd, ccapAppGblHisPSTNOutCallDiscUsrErr=ccapAppGblHisPSTNOutCallDiscUsrErr, ccapAppInstHisPSTNInCallSetupInd=ccapAppInstHisPSTNInCallSetupInd, ccapAppTypeHisPSTNOutCallDiscUsrErr=ccapAppTypeHisPSTNOutCallDiscUsrErr, ccapAppTypeHisPSTNInCallTotConn=ccapAppTypeHisPSTNInCallTotConn, ccapAppRowStatus=ccapAppRowStatus, ccapAppGblHisIPOutCallDiscNormal=ccapAppGblHisIPOutCallDiscNormal, ccapAppIntfTFTPWriteSuccess=ccapAppIntfTFTPWriteSuccess, ccapAppInstHisASNLNotifReceived=ccapAppInstHisASNLNotifReceived, ccapAppInstHisTTSAttempts=ccapAppInstHisTTSAttempts, ccapAppInstHisIPInCallSetupInd=ccapAppInstHisIPInCallSetupInd, URLStringOrNull=URLStringOrNull, ccapAppGblHisPSTNOutCallHandedOut=ccapAppGblHisPSTNOutCallHandedOut, ccapAppInstHisOutHandoffCallback=ccapAppInstHisOutHandoffCallback, ccapAppPSTNOutCallNowConn=ccapAppPSTNOutCallNowConn, ccapAppGblHisDTMFNoInput=ccapAppGblHisDTMFNoInput, ccapAppTypeHisStat=ccapAppTypeHisStat, ccapAppTypeHisIPInCallInHandoffRet=ccapAppTypeHisIPInCallInHandoffRet, ccapAppTypeHisInHandoffCallback=ccapAppTypeHisInHandoffCallback, ccapAppGblHisASRAborted=ccapAppGblHisASRAborted, ccapGeneralCfgGroupRev1=ccapGeneralCfgGroupRev1, ccapAppGblActIPOutCallNowConn=ccapAppGblActIPOutCallNowConn, ccapAppIPOutCallNowConn=ccapAppIPOutCallNowConn, ccapAppIntfRTSPAvgXferRate=ccapAppIntfRTSPAvgXferRate, ccapAppTypeHisDocumentReadAttempts=ccapAppTypeHisDocumentReadAttempts, ccapAppIntfTFTPEntry=ccapAppIntfTFTPEntry, ccapAppTypeHisPromptPlayFailed=ccapAppTypeHisPromptPlayFailed, ccapAppGblHisPromptPlayAttempts=ccapAppGblHisPromptPlayAttempts, ccapAppGblHisASNLSubscriptionsFailed=ccapAppGblHisASNLSubscriptionsFailed, ccapAppInstanceHistoryEntry=ccapAppInstanceHistoryEntry, ccapAppGblHisIPInCallSetupInd=ccapAppGblHisIPInCallSetupInd, ccapAppTypeHisRecordingSuccess=ccapAppTypeHisRecordingSuccess, ccapAppInstHisInHandoffNoCallback=ccapAppInstHisInHandoffNoCallback, ccapAppIntfHTTPTxBytes=ccapAppIntfHTTPTxBytes, ccapAppInstHisPSTNOutCallDiscNormal=ccapAppInstHisPSTNOutCallDiscNormal, ccapAppIntfTFTPStats=ccapAppIntfTFTPStats, ccapAppTypeHisOutHandoffNoCallback=ccapAppTypeHisOutHandoffNoCallback, ccapAppIntfFlashReadFailure=ccapAppIntfFlashReadFailure, ccapAppGblHisIPInCallInHandoffRet=ccapAppGblHisIPInCallInHandoffRet, ccapAppTypeHisIPOutCallHandedOut=ccapAppTypeHisIPOutCallHandedOut, ccapAppTypeHisASNLSubscriptionsSent=ccapAppTypeHisASNLSubscriptionsSent, ccapAppIntfGblEventLogging=ccapAppIntfGblEventLogging, ccapAppIntfSMTPWriteSuccess=ccapAppIntfSMTPWriteSuccess, ccapAppTypeHisPSTNInCallSetupInd=ccapAppTypeHisPSTNInCallSetupInd, ccapAppInstHisPSTNInCallDiscUsrErr=ccapAppInstHisPSTNInCallDiscUsrErr, ccapAppIntfHTTPEvtLog=ccapAppIntfHTTPEvtLog, ccapAppInstHisPSTNInCallInHandoffRet=ccapAppInstHisPSTNInCallInHandoffRet, ccapApplicationTable=ccapApplicationTable, ccapAppTypeHisASRAttempts=ccapAppTypeHisASRAttempts, ccapAppIntfRTSPGroup=ccapAppIntfRTSPGroup, ccapAppInstHisDTMFAborted=ccapAppInstHisDTMFAborted, ccapAppIntfHTTPEntry=ccapAppIntfHTTPEntry, ccapAppTypeHisPSTNInCallDiscNormal=ccapAppTypeHisPSTNInCallDiscNormal, ccapAppTypeHisIPInCallSetupInd=ccapAppTypeHisIPInCallSetupInd, ccapAppGblHisPSTNInCallInHandoffRet=ccapAppGblHisPSTNInCallInHandoffRet, ccapAppIntfSMTPMaxXferRate=ccapAppIntfSMTPMaxXferRate, ccapAppGblCfgGroup=ccapAppGblCfgGroup, ccapAppIntfASRLastResetTime=ccapAppIntfASRLastResetTime, ccapAppInstHisPromptPlayAttempts=ccapAppInstHisPromptPlayAttempts, ccapAppIntfASRStats=ccapAppIntfASRStats)
mibBuilder.exportSymbols("CISCO-CALL-APPLICATION-MIB", ccapAppGblHisPSTNInCallHandedOut=ccapAppGblHisPSTNInCallHandedOut, ccapAppIntfRTSPTxBytes=ccapAppIntfRTSPTxBytes, ccapAppTypeHisASNLNotifReceived=ccapAppTypeHisASNLNotifReceived, ccapAppInstHisDTMFMatch=ccapAppInstHisDTMFMatch, ccapAppTypeHisPSTNOutCallHandedOut=ccapAppTypeHisPSTNOutCallHandedOut, ccapAppGblHisIPInCallDiscNormal=ccapAppGblHisIPInCallDiscNormal, ccapAppInstHisRecordingFailed=ccapAppInstHisRecordingFailed, ccapAppIPInCallNowConn=ccapAppIPInCallNowConn, ccapAppIntfSMTPEvtLog=ccapAppIntfSMTPEvtLog, ccapAppIntfTTSReadSuccess=ccapAppIntfTTSReadSuccess, ccapAppGblActGroup=ccapAppGblActGroup, ccapAppTypeHistoryEntry=ccapAppTypeHistoryEntry, ccapAppTypeHisDocumentReadSuccess=ccapAppTypeHisDocumentReadSuccess, ccapAppTypeHisAAAAuthorizeSuccess=ccapAppTypeHisAAAAuthorizeSuccess, ccapAppName=ccapAppName, ccapAppGblHisPSTNOutCallTotConn=ccapAppGblHisPSTNOutCallTotConn, ccapAppInstHisASNLSubscriptionsFailed=ccapAppInstHisASNLSubscriptionsFailed, ccapAppIntfGblEvtLogFlush=ccapAppIntfGblEvtLogFlush, ccapAppTypeHisTTSAttempts=ccapAppTypeHisTTSAttempts, ccapAppGblHisASRNoMatch=ccapAppGblHisASRNoMatch, ccapAppTypeHisAAAAuthenticateSuccess=ccapAppTypeHisAAAAuthenticateSuccess, ccapAppGblHisASRAttempts=ccapAppGblHisASRAttempts, ccapAppInstHisSessionID=ccapAppInstHisSessionID, ccapAppGblHisAAAAuthenticateSuccess=ccapAppGblHisAAAAuthenticateSuccess, ccapAppIntfSMTPRxBytes=ccapAppIntfSMTPRxBytes, ccapAppGblActStat=ccapAppGblActStat, ccapAppPlaceCallInProgress=ccapAppPlaceCallInProgress, ccapAppInstHisDocumentWriteAttempts=ccapAppInstHisDocumentWriteAttempts, ccapAppIntfTFTPAvgXferRate=ccapAppIntfTFTPAvgXferRate, ccapAppTypeHisIPInCallHandOutRet=ccapAppTypeHisIPInCallHandOutRet, ccapAppGblHisRecordingFailed=ccapAppGblHisRecordingFailed, ccapAppInstHisASNLSubscriptionsSent=ccapAppInstHisASNLSubscriptionsSent, ccapAppTypeHisOutHandoffCallbackRet=ccapAppTypeHisOutHandoffCallbackRet, ccapAppIntfSMTPServer=ccapAppIntfSMTPServer, ccapAppGblHisIPInCallDiscSysErr=ccapAppGblHisIPInCallDiscSysErr, ccapAppIntfTFTPReadFailure=ccapAppIntfTFTPReadFailure, ccapAppIntfAAAMethodListEvtLog=ccapAppIntfAAAMethodListEvtLog, ccapAppInstHisIPOutCallInHandoffRet=ccapAppInstHisIPOutCallInHandoffRet, ccapAppDescr=ccapAppDescr, ccapAppTypeHisEvtLogging=ccapAppTypeHisEvtLogging, ccapAppInstHisPSTNOutCallHandOutRet=ccapAppInstHisPSTNOutCallHandOutRet, ccapAppInstHisIPInCallDiscUsrErr=ccapAppInstHisIPInCallDiscUsrErr, ccapAppTypeHisTTSFailed=ccapAppTypeHisTTSFailed, ccapAppInstHisPSTNOutCallInHandoffRet=ccapAppInstHisPSTNOutCallInHandoffRet, ccapApplicationEntry=ccapApplicationEntry, ccapAppInstHisIPInCallHandOutRet=ccapAppInstHisIPInCallHandOutRet, ccapAppInstHisAAAAuthenticateFailure=ccapAppInstHisAAAAuthenticateFailure, ccapAppInstHisASRNoInput=ccapAppInstHisASRNoInput, ccapAppGblHisPSTNOutCallInHandoffRet=ccapAppGblHisPSTNOutCallInHandoffRet, ccapAppIntfFlashReadSuccess=ccapAppIntfFlashReadSuccess, ccapAppGblHisTTSSuccess=ccapAppGblHisTTSSuccess, ccapAppIntfRTSPServer=ccapAppIntfRTSPServer, ccapAppLoadFailReason=ccapAppLoadFailReason, ccapAppInstHisIndex=ccapAppInstHisIndex, ccapAppIntfRAMRecordiongReadFailure=ccapAppIntfRAMRecordiongReadFailure, ccapAppTypeHisPlaceCallAttempts=ccapAppTypeHisPlaceCallAttempts, ccapAppIntfRAMRecordiongFailure=ccapAppIntfRAMRecordiongFailure, ccapAppIntfASRGroup=ccapAppIntfASRGroup, ccapAppIntfRTSPReadSuccess=ccapAppIntfRTSPReadSuccess, ccapAppTypeHisIPOutCallInHandoff=ccapAppTypeHisIPOutCallInHandoff, ccapAppGblHisIPOutCallSetupReq=ccapAppGblHisIPOutCallSetupReq, ccapAppTypeHisIPOutCallInHandoffRet=ccapAppTypeHisIPOutCallInHandoffRet, ccapAppTypeHisASNLSubscriptionsSuccess=ccapAppTypeHisASNLSubscriptionsSuccess, ccapAppGblHisASNLSubscriptionsSuccess=ccapAppGblHisASNLSubscriptionsSuccess, ccapAppIntfRTSPWriteFailure=ccapAppIntfRTSPWriteFailure, ccapAppIntfHTTPGroup=ccapAppIntfHTTPGroup, ccapAppTypeHisPSTNOutCallSetupReq=ccapAppTypeHisPSTNOutCallSetupReq, ccapAppIntfHTTPGetFailure=ccapAppIntfHTTPGetFailure, ccapAppGblHisInHandoffNoCallback=ccapAppGblHisInHandoffNoCallback, ccapAppIntfRTSPWriteSuccess=ccapAppIntfRTSPWriteSuccess, ccapAppIntfRTSPLastResetTime=ccapAppIntfRTSPLastResetTime, ccapAppIntfAAAMethodListLastResetTime=ccapAppIntfAAAMethodListLastResetTime, ccapAppInstHisASRAborted=ccapAppInstHisASRAborted, ccapAppIntfFlashGroup=ccapAppIntfFlashGroup, ccapAppTypeHisAAAAuthorizeFailure=ccapAppTypeHisAAAAuthorizeFailure, ccapAppGblHisPlaceCallSuccess=ccapAppGblHisPlaceCallSuccess, ccapAppIntfASRServer=ccapAppIntfASRServer, ccapAppInstHisASRAttempts=ccapAppInstHisASRAttempts, ccapAppInstHisIPOutCallDiscSysErr=ccapAppInstHisIPOutCallDiscSysErr, ccapAppIntfRAMRecordReadSuccess=ccapAppIntfRAMRecordReadSuccess, ccapAppInstHisDocumentWriteFailures=ccapAppInstHisDocumentWriteFailures, ccapAppIntfTTSServer=ccapAppIntfTTSServer, ccapAppIntfRTSPMaxXferRate=ccapAppIntfRTSPMaxXferRate, ccapAppTypeHisDTMFMatch=ccapAppTypeHisDTMFMatch, ccapAppGblHisPSTNOutCallDiscSysErr=ccapAppGblHisPSTNOutCallDiscSysErr, ccapAppPromptPlayActive=ccapAppPromptPlayActive, ccapAppEventLogging=ccapAppEventLogging, ccapAppInstHisIPOutCallInHandoff=ccapAppInstHisIPOutCallInHandoff, ccapAppTypeHisASRMatch=ccapAppTypeHisASRMatch, ccapAppIntfTFTPWriteRequest=ccapAppIntfTFTPWriteRequest, ccapAppInstHisIPInCallInHandoffRet=ccapAppInstHisIPInCallInHandoffRet, ccapAppGblActPSTNInCallNowConn=ccapAppGblActPSTNInCallNowConn, ciscoCallApplicationMIBObjects=ciscoCallApplicationMIBObjects, ccapAppInstHisOutHandofffailures=ccapAppInstHisOutHandofffailures, ccapAppTypeHisDTMFNoMatch=ccapAppTypeHisDTMFNoMatch, ccapAppIntfSMTPMinXferRate=ccapAppIntfSMTPMinXferRate, ccapAppIntfRTSPRxBytes=ccapAppIntfRTSPRxBytes, ccapAppGblHisIPInCallTotConn=ccapAppGblHisIPInCallTotConn, ccapAppIntfSMTPWriteFailure=ccapAppIntfSMTPWriteFailure, ccapAppInstHisAAAAuthenticateSuccess=ccapAppInstHisAAAAuthenticateSuccess, ccapAppInstHisRecordingDuration=ccapAppInstHisRecordingDuration, ccapAppGblHisAAAAuthorizeSuccess=ccapAppGblHisAAAAuthorizeSuccess, ccapAppGblStatsLogging=ccapAppGblStatsLogging, ccapAppIntfTFTPReadSuccess=ccapAppIntfTFTPReadSuccess, ciscoCallApplicationMIBGroups=ciscoCallApplicationMIBGroups, ccapAppTypeHisIPOutCallDiscSysErr=ccapAppTypeHisIPOutCallDiscSysErr, ccapAppIntfTFTPMinXferRate=ccapAppIntfTFTPMinXferRate, ccapAppTypeHisDTMFAttempts=ccapAppTypeHisDTMFAttempts, ccapAppIntfASRTable=ccapAppIntfASRTable, ccapAppTypeHisPSTNOutCallDiscNormal=ccapAppTypeHisPSTNOutCallDiscNormal, ciscoCallApplicationMIBComplianceRev1=ciscoCallApplicationMIBComplianceRev1, ccapAppInstHisTTSSuccess=ccapAppInstHisTTSSuccess, ccapAppInstHisIPInCallDiscSysErr=ccapAppInstHisIPInCallDiscSysErr, ccapAppGblHisASRNoInput=ccapAppGblHisASRNoInput, ccapAppIntfTFTPTxBytes=ccapAppIntfTFTPTxBytes, ccapAppTypeHisPSTNOutCallTotConn=ccapAppTypeHisPSTNOutCallTotConn, ccapAppInstHisDTMFAttempts=ccapAppInstHisDTMFAttempts, ccapAppGblHisOutHandoffCallbackRet=ccapAppGblHisOutHandoffCallbackRet, ccapAppIntfSMTPStats=ccapAppIntfSMTPStats, ccapAppInstHisASNLSubscriptionsSuccess=ccapAppInstHisASNLSubscriptionsSuccess, ccapAppInstHisAAAAuthorizeSuccess=ccapAppInstHisAAAAuthorizeSuccess, ccapAppIntfTTSTable=ccapAppIntfTTSTable, ccapAppTypeHisPlaceCallFailure=ccapAppTypeHisPlaceCallFailure, ccapAppInstHisAppName=ccapAppInstHisAppName, ccapAppIntfAAAMethodListReadRequest=ccapAppIntfAAAMethodListReadRequest, ccapAppTypeHisIPOutCallTotConn=ccapAppTypeHisIPOutCallTotConn, ccapAppGblHisPSTNOutCallDiscNormal=ccapAppGblHisPSTNOutCallDiscNormal, ccapAppGblHisIPOutCallDiscSysErr=ccapAppGblHisIPOutCallDiscSysErr, ccapAppIntfAAAMethodListTable=ccapAppIntfAAAMethodListTable, ccapAppGblHisPromptPlaySuccess=ccapAppGblHisPromptPlaySuccess, ccapAppIntfSMTPGroup=ccapAppIntfSMTPGroup, ccapAppGblHisInHandoffCallback=ccapAppGblHisInHandoffCallback, ccapAppIntfHTTPGetRequest=ccapAppIntfHTTPGetRequest, ccapAppGblActIPInCallNowConn=ccapAppGblActIPInCallNowConn, ccapAppIntfHTTPMinXferRate=ccapAppIntfHTTPMinXferRate, ccapAppGblHisPSTNInCallDiscNormal=ccapAppGblHisPSTNInCallDiscNormal, ccapAppIntfFlashReadRequest=ccapAppIntfFlashReadRequest, ccapAppIntfGblCfgGroup=ccapAppIntfGblCfgGroup, ccapAppInstHisRecordingSuccess=ccapAppInstHisRecordingSuccess, ccapAppInstHisPromptPlayFailed=ccapAppInstHisPromptPlayFailed, ccapAppTypeHisDocumentWriteAttempts=ccapAppTypeHisDocumentWriteAttempts, ccapAppInstHisStat=ccapAppInstHisStat, ccapAppGblHisDocumentReadFailures=ccapAppGblHisDocumentReadFailures, ccapAppGblHisIPOutCallHandOutRet=ccapAppGblHisIPOutCallHandOutRet, ccapAppCallType=ccapAppCallType, ccapAppGblHisIPOutCallHandedOut=ccapAppGblHisIPOutCallHandedOut, ciscoCallApplicationMIBConformance=ciscoCallApplicationMIBConformance, ccapAppGblHisOutHandoffCallback=ccapAppGblHisOutHandoffCallback, ccapAppInstHisTTSFailed=ccapAppInstHisTTSFailed, ccapAppInstHisPromptPlaySuccess=ccapAppInstHisPromptPlaySuccess, ccapAppIntfGblStatsLogging=ccapAppIntfGblStatsLogging, ccapAppGblStatsClear=ccapAppGblStatsClear, ccapAppIntfSMTPReadRequest=ccapAppIntfSMTPReadRequest, ccapAppIntfSMTPReadSuccess=ccapAppIntfSMTPReadSuccess, ccapAppGblHisIPOutCallDiscUsrErr=ccapAppGblHisIPOutCallDiscUsrErr, ccapAppHandoffInProgress=ccapAppHandoffInProgress, ccapAppGblHisDTMFAborted=ccapAppGblHisDTMFAborted, ciscoCallApplicationMIB=ciscoCallApplicationMIB, ccapAppGblHisIPInCallDiscUsrErr=ccapAppGblHisIPInCallDiscUsrErr, ccapAppTypeHisPSTNInCallHandOutRet=ccapAppTypeHisPSTNInCallHandOutRet, ccapAppIntfAAAMethodListGroup=ccapAppIntfAAAMethodListGroup, ccapAppGblActCurrentInstances=ccapAppGblActCurrentInstances, ccapAppGblHisOutHandofffailures=ccapAppGblHisOutHandofffailures, ccapAppIntfSMTPTxBytes=ccapAppIntfSMTPTxBytes, ccapAppTypeHisPSTNOutCallHandOutRet=ccapAppTypeHisPSTNOutCallHandOutRet, ccapAppInstHisInHandoffCallback=ccapAppInstHisInHandoffCallback, ccapAppInstanceHistoryTable=ccapAppInstanceHistoryTable, ccapAppIntfAAAMethodListServer=ccapAppIntfAAAMethodListServer, ccapAppIntfHTTPStats=ccapAppIntfHTTPStats, ccapAppInstHisPlaceCallAttempts=ccapAppInstHisPlaceCallAttempts, ccapAppGblHisTTSFailed=ccapAppGblHisTTSFailed, ccapAppIntfRTSPEvtLog=ccapAppIntfRTSPEvtLog, ccapAppIntfSMTPWriteRequest=ccapAppIntfSMTPWriteRequest, ccapAppGblHisPromptPlayDuration=ccapAppGblHisPromptPlayDuration, ccapAppInstHisPSTNOutCallTotConn=ccapAppInstHisPSTNOutCallTotConn, ccapAppIntfRAMRecordReadRequest=ccapAppIntfRAMRecordReadRequest, ccapAppInstHisDocumentParseErrors=ccapAppInstHisDocumentParseErrors, ccapAppGblHisTTSAttempts=ccapAppGblHisTTSAttempts, ccapAppIntfHTTPPostSuccess=ccapAppIntfHTTPPostSuccess, ccapAppInstanceHistoryGroup=ccapAppInstanceHistoryGroup, ccapAppTypeHisIPOutCallSetupReq=ccapAppTypeHisIPOutCallSetupReq, ccapAppTypeHisRecordingFailed=ccapAppTypeHisRecordingFailed, ccapAppInstHisIPInCallDiscNormal=ccapAppInstHisIPInCallDiscNormal, ccapAppTypeHisPromptPlayAttempts=ccapAppTypeHisPromptPlayAttempts)
