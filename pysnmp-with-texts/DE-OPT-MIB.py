#
# PySNMP MIB module DE-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DE-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, Gauge32, enterprises, Counter64, IpAddress, MibIdentifier, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, NotificationType, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Gauge32", "enterprises", "Counter64", "IpAddress", "MibIdentifier", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "NotificationType", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500StatEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12))
statEncryptionGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1))
deDataEncryptionHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deDataEncryptionHardwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deDataEncryptionHardwareStatus.setDescription('Displays the current status/existence of DE hardware. up: Data encryption hardware is installed and operational. down: Data encryption hardware is non functional.')
deMaxChannelAvailable = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deMaxChannelAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: deMaxChannelAvailable.setDescription('Number of DE Channels supported by the Data Encryption hardware installed on the node.')
deMaxChannelConfigured = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deMaxChannelConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: deMaxChannelConfigured.setDescription('Maximum number of DE Channels configured for use. This parameter is used to control the amount of RAM that gets allocated for Data Encryption during node initialization.')
deChannelsInUse = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deChannelsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: deChannelsInUse.setDescription('Number of DE Channels that are assigned and are currently in use by the calls.')
deMaxSimultaneousChannelsUsed = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deMaxSimultaneousChannelsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: deMaxSimultaneousChannelsUsed.setDescription('Maximum number of data encryption channels in use simultaneously since the last stats reset.')
deCurrentEncryptionQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCurrentEncryptionQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: deCurrentEncryptionQueueLength.setDescription('Current number of frames in the queue, waiting to be encrypted or decrypted')
deMaxEncryptionQueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deMaxEncryptionQueueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: deMaxEncryptionQueueDepth.setDescription('Maximum number of frames that were in the queue since the last stats reset.')
deTimeLastStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deTimeLastStatisticsReset.setStatus('mandatory')
if mibBuilder.loadTexts: deTimeLastStatisticsReset.setDescription('Time when the node restarted or the stats reset by CTP/SNMP Manager command.')
deAlgorithmSupportedByHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-simm", 1), ("des-40", 2), ("des-64", 3), ("des-128", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deAlgorithmSupportedByHardwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deAlgorithmSupportedByHardwareStatus.setDescription('Displays the current status/existence of DE Algorithm supported by Hardware. no-simm: No SIMM exists. des-40: SIMM type is DES-40. des-64: SIMM type is DES-64. des-128: SIMM type is DES-128.')
statEncryptionChannelTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2), )
if mibBuilder.loadTexts: statEncryptionChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: statEncryptionChannelTable.setDescription('Detail Encryption Statistics Table')
statEncryptionChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1), ).setIndexNames((0, "DE-OPT-MIB", "deStatChannelNumber"))
if mibBuilder.loadTexts: statEncryptionChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: statEncryptionChannelEntry.setDescription('Detail Encryption Statistics Entry')
deStatChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: deStatChannelNumber.setDescription('Channel Number.')
deLastStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deLastStatisticsReset.setStatus('mandatory')
if mibBuilder.loadTexts: deLastStatisticsReset.setDescription('Time of the Channel stats reset by CTP/SNMP Manager command.')
deChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonData", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deChannelState.setStatus('mandatory')
if mibBuilder.loadTexts: deChannelState.setDescription('Activity state of the Channel. nonData: Non encrypted data data: Encrypted data')
deSourceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deSourceChannel.setStatus('mandatory')
if mibBuilder.loadTexts: deSourceChannel.setDescription('Access Protocols identity string')
deDestinationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deDestinationChannel.setStatus('mandatory')
if mibBuilder.loadTexts: deDestinationChannel.setDescription('Network Protocols identity string')
deCorruptedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCorruptedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: deCorruptedPackets.setDescription('Number of decrypted packets with false data integrity check field.')
cdx6500ControlsEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18))
ctrlEncryptionGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18, 1))
deCtrlEncryptionGeneral = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStatistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: deCtrlEncryptionGeneral.setStatus('mandatory')
if mibBuilder.loadTexts: deCtrlEncryptionGeneral.setDescription('When set, this parameter resets all the data encryption statistics for all channels.')
ctrlEncryptionChannelTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18, 2), )
if mibBuilder.loadTexts: ctrlEncryptionChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlEncryptionChannelTable.setDescription('Detail Encryption Control Table')
ctrlEncryptionChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18, 2, 1), ).setIndexNames((0, "DE-OPT-MIB", "deCtrlChannelNumber"))
if mibBuilder.loadTexts: ctrlEncryptionChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlEncryptionChannelEntry.setDescription('Detail Encryption Control Entry')
deCtrlChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: deCtrlChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: deCtrlChannelNumber.setDescription('Channel Number.')
deCtrlEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStatistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: deCtrlEncryptionChannel.setStatus('mandatory')
if mibBuilder.loadTexts: deCtrlEncryptionChannel.setDescription('When set, this parameter resets the data encryption statistics for a given channel.')
mibBuilder.exportSymbols("DE-OPT-MIB", cdxProductSpecific=cdxProductSpecific, deMaxSimultaneousChannelsUsed=deMaxSimultaneousChannelsUsed, statEncryptionChannelEntry=statEncryptionChannelEntry, cdx6500ControlsEncryption=cdx6500ControlsEncryption, deStatChannelNumber=deStatChannelNumber, DisplayString=DisplayString, deCurrentEncryptionQueueLength=deCurrentEncryptionQueueLength, deMaxChannelAvailable=deMaxChannelAvailable, deAlgorithmSupportedByHardwareStatus=deAlgorithmSupportedByHardwareStatus, deCtrlEncryptionGeneral=deCtrlEncryptionGeneral, cdx6500Controls=cdx6500Controls, statEncryptionGeneral=statEncryptionGeneral, deCorruptedPackets=deCorruptedPackets, deTimeLastStatisticsReset=deTimeLastStatisticsReset, deLastStatisticsReset=deLastStatisticsReset, cdx6500StatEncryption=cdx6500StatEncryption, deCtrlChannelNumber=deCtrlChannelNumber, cdx6500Configuration=cdx6500Configuration, codex=codex, deMaxEncryptionQueueDepth=deMaxEncryptionQueueDepth, deDestinationChannel=deDestinationChannel, cdx6500Statistics=cdx6500Statistics, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, deSourceChannel=deSourceChannel, deChannelsInUse=deChannelsInUse, deChannelState=deChannelState, deDataEncryptionHardwareStatus=deDataEncryptionHardwareStatus, ctrlEncryptionChannelTable=ctrlEncryptionChannelTable, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, deMaxChannelConfigured=deMaxChannelConfigured, deCtrlEncryptionChannel=deCtrlEncryptionChannel, statEncryptionChannelTable=statEncryptionChannelTable, ctrlEncryptionChannelEntry=ctrlEncryptionChannelEntry, ctrlEncryptionGeneral=ctrlEncryptionGeneral, cdx6500=cdx6500)
