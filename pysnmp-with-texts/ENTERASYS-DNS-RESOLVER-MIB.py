#
# PySNMP MIB module ENTERASYS-DNS-RESOLVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-DNS-RESOLVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, MibIdentifier, NotificationType, Integer32, iso, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "NotificationType", "Integer32", "iso", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
etsysDnsResolverMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63))
etsysDnsResolverMIB.setRevisions(('2008-08-11 15:48', '2008-06-18 20:56',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysDnsResolverMIB.setRevisionsDescriptions(('Added a range of 1..100 seconds for etsysDnsResolverQueryTimeout.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysDnsResolverMIB.setLastUpdated('200808111548Z')
if mibBuilder.loadTexts: etsysDnsResolverMIB.setOrganization('Enterasys Networks, Inc.')
if mibBuilder.loadTexts: etsysDnsResolverMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysDnsResolverMIB.setDescription('This MIB module defines a portion of the SNMP MIB under the Enterasys Networks enterprise OID pertaining to configuration of the DNS resolution mechanisms on a device.')
etsysDnsResolverObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1))
etsysDnsResolverSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1))
etsysDnsResolverServiceType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("recursiveOnly", 1), ("iterativeOnly", 2), ("recursiveAndIterative", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDnsResolverServiceType.setReference("RFC 1123, 'Requirements for Internet Hosts -- Application and Support', Section 6.1.3.1")
if mibBuilder.loadTexts: etsysDnsResolverServiceType.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverServiceType.setDescription('The type of DNS resolution service provided: recursiveOnly(1) indicates a stub resolver. iterativeOnly(2) indicates a normal full service resolver. recursiveAndIterative(3) indicates a full-service resolver which performs a mix of recursive and iterative queries.')
etsysDnsResolverDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 2), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverDomainName.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverDomainName.setDescription('The DNS domain name where the device is located. If this object is not set, then all address lookups must provide fully qualified domains.')
etsysDnsResolverPrimaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverPrimaryServerAddrType.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverPrimaryServerAddrType.setDescription('The type of data returned by etsysDnsResolverPrimaryServerAddr.')
etsysDnsResolverPrimaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 4), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverPrimaryServerAddr.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverPrimaryServerAddr.setDescription('The network address of the primary name server.')
etsysDnsResolverSecondaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverSecondaryServerAddrType.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverSecondaryServerAddrType.setDescription('The type of data returned by etsysDnsResolverSecondaryServerAddr.')
etsysDnsResolverSecondaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 6), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverSecondaryServerAddr.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverSecondaryServerAddr.setDescription('The network address of the secondary name server.')
etsysDnsResolverTertiaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverTertiaryServerAddrType.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverTertiaryServerAddrType.setDescription('The type of data returned by etsysDnsResolverTertiaryServerAddr.')
etsysDnsResolverTertiaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 8), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverTertiaryServerAddr.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverTertiaryServerAddr.setDescription('The network address of the tertiary name server.')
etsysDnsResolverQuaternaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 9), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryServerAddrType.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryServerAddrType.setDescription('The type of data returned by etsysDnsResolverQuaternaryServerAddr.')
etsysDnsResolverQuaternaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 10), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryServerAddr.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryServerAddr.setDescription('The network address of the quaternary name server.')
etsysDnsResolverIpv4DnsZone = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 11), SnmpAdminString().clone('in-addr.arpa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverIpv4DnsZone.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverIpv4DnsZone.setDescription('The DNS zone to use for address to name lookups of IPv4 addresses.')
etsysDnsResolverIpv6DnsZone = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 12), SnmpAdminString().clone('ip6.arpa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverIpv6DnsZone.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverIpv6DnsZone.setDescription('The DNS zone to use for address to name lookups of IPv6 addresses.')
etsysDnsResolverServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 13), InetPortNumber().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverServerPortNumber.setDescription('The port number (0-65535) the resolver uses for DNS queries.')
etsysDnsResolverQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQueryTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverQueryTimeout.setDescription('The number of seconds before a DNS request is retried if the DNS server fails to respond.')
etsysDnsResolverQueryRetries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQueryRetries.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverQueryRetries.setDescription('The number of times to retry a lookup request to a DNS server that has not successfully responded. This retry count is per name server, so each configured name server will make etsysDnsResolverQueryRetries attempts before giving up and moving to the next configured server.')
etsysDnsResolverEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverEnableStatus.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverEnableStatus.setDescription('The status of the DNS resolver on this device.')
etsysDnsResolverConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2))
etsysDnsResolverGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1))
etsysDnsResolverCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 2))
etsysDnsResolverPrimaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 1)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverServiceType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverDomainName"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverPrimaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverPrimaryServerAddr"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverIpv4DnsZone"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverIpv6DnsZone"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverServerPortNumber"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQueryTimeout"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQueryRetries"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverEnableStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverPrimaryGroup = etsysDnsResolverPrimaryGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverPrimaryGroup.setDescription('The group for all devices supporting DNS resolution.')
etsysDnsResolverSecondaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 2)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverSecondaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverSecondaryServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverSecondaryGroup = etsysDnsResolverSecondaryGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverSecondaryGroup.setDescription('The group for all devices that support two or more servers for DNS resolution.')
etsysDnsResolverTertiaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 3)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverTertiaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverTertiaryServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverTertiaryGroup = etsysDnsResolverTertiaryGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverTertiaryGroup.setDescription('The group for all devices that support three or more servers for DNS resolution.')
etsysDnsResolverQuaternaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 4)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQuaternaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQuaternaryServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverQuaternaryGroup = etsysDnsResolverQuaternaryGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryGroup.setDescription('The group for all devices that support four servers for DNS resolution.')
etsysDnsResolverCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 2, 1)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverPrimaryGroup"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverSecondaryGroup"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverTertiaryGroup"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQuaternaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverCompliance = etsysDnsResolverCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysDnsResolverCompliance.setDescription('The compliance statement for devices that support DNS resolution.')
mibBuilder.exportSymbols("ENTERASYS-DNS-RESOLVER-MIB", etsysDnsResolverQuaternaryServerAddrType=etsysDnsResolverQuaternaryServerAddrType, etsysDnsResolverObjects=etsysDnsResolverObjects, etsysDnsResolverQueryRetries=etsysDnsResolverQueryRetries, etsysDnsResolverSystem=etsysDnsResolverSystem, etsysDnsResolverTertiaryGroup=etsysDnsResolverTertiaryGroup, etsysDnsResolverTertiaryServerAddrType=etsysDnsResolverTertiaryServerAddrType, etsysDnsResolverQueryTimeout=etsysDnsResolverQueryTimeout, PYSNMP_MODULE_ID=etsysDnsResolverMIB, etsysDnsResolverEnableStatus=etsysDnsResolverEnableStatus, etsysDnsResolverIpv6DnsZone=etsysDnsResolverIpv6DnsZone, etsysDnsResolverSecondaryServerAddr=etsysDnsResolverSecondaryServerAddr, etsysDnsResolverSecondaryServerAddrType=etsysDnsResolverSecondaryServerAddrType, etsysDnsResolverPrimaryServerAddrType=etsysDnsResolverPrimaryServerAddrType, etsysDnsResolverGroups=etsysDnsResolverGroups, etsysDnsResolverPrimaryServerAddr=etsysDnsResolverPrimaryServerAddr, etsysDnsResolverMIB=etsysDnsResolverMIB, etsysDnsResolverCompliance=etsysDnsResolverCompliance, etsysDnsResolverCompliances=etsysDnsResolverCompliances, etsysDnsResolverServerPortNumber=etsysDnsResolverServerPortNumber, etsysDnsResolverServiceType=etsysDnsResolverServiceType, etsysDnsResolverPrimaryGroup=etsysDnsResolverPrimaryGroup, etsysDnsResolverIpv4DnsZone=etsysDnsResolverIpv4DnsZone, etsysDnsResolverQuaternaryServerAddr=etsysDnsResolverQuaternaryServerAddr, etsysDnsResolverConformance=etsysDnsResolverConformance, etsysDnsResolverTertiaryServerAddr=etsysDnsResolverTertiaryServerAddr, etsysDnsResolverQuaternaryGroup=etsysDnsResolverQuaternaryGroup, etsysDnsResolverDomainName=etsysDnsResolverDomainName, etsysDnsResolverSecondaryGroup=etsysDnsResolverSecondaryGroup)
