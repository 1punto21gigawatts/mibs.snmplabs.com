#
# PySNMP MIB module Nortel-Magellan-Passport-CircuitEmulationServiceMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-CircuitEmulationServiceMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
DisplayString, Unsigned32, StorageType, RowStatus, PassportCounter64, Gauge32, Counter32, Integer32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "Unsigned32", "StorageType", "RowStatus", "PassportCounter64", "Gauge32", "Counter32", "Integer32")
EnterpriseDateAndTime, Hex, AsciiString, NonReplicated, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "Hex", "AsciiString", "NonReplicated", "Link")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, IpAddress, Bits, Counter64, NotificationType, ModuleIdentity, iso, Gauge32, Counter32, ObjectIdentity, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "IpAddress", "Bits", "Counter64", "NotificationType", "ModuleIdentity", "iso", "Gauge32", "Counter32", "ObjectIdentity", "TimeTicks", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
circuitEmulationServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55))
aal1Ces = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119))
aal1CesRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1), )
if mibBuilder.loadTexts: aal1CesRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesRowStatusTable.setDescription('This entry controls the addition and deletion of aal1Ces components.')
aal1CesRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesRowStatusEntry.setDescription('A single entry in the table represents a single aal1Ces component.')
aal1CesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesRowStatus.setDescription('This variable is used as the basis for SNMP naming of aal1Ces components. These components can be added and deleted.')
aal1CesComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
aal1CesStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesStorageType.setDescription('This variable represents the storage type value for the aal1Ces tables.')
aal1CesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: aal1CesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesIndex.setDescription('This variable represents the index for the aal1Ces tables.')
aal1CesCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 10), )
if mibBuilder.loadTexts: aal1CesCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
aal1CesCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCidDataEntry.setDescription('An entry in the aal1CesCidDataTable.')
aal1CesCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
aal1CesProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11), )
if mibBuilder.loadTexts: aal1CesProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesProvTable.setDescription('This group contains basic provisioning data for the AAL1 Circuit Emulation Service.')
aal1CesProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesProvEntry.setDescription('An entry in the aal1CesProvTable.')
aal1CesServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unstructured", 0), ("basicStructured", 1), ("casStructured", 2))).clone('unstructured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesServiceType.setDescription('This attribute specifies the service type for the CES. In an unstructured service, the entire data stream at the service interface (including any framing bits which may be present) is passed across the network transparently. The unstructured service uses the Unstructured Data Transfer (UDT) mode of AAL1. In a structured service, an Nx64kbit/s fraction of the data stream at the service interface is passed across the network. Two modes of structured service are supported: basicStructured and casStructured. In a casStructured service, the Channel Associated Signalling (CAS) bits are carried in a separate data structure from the Nx64 payload; in a basicStructured service they are not. The structured service uses the Structured Data Transfer (SDT) mode as defined in ITU-T Recommendation I.363.1. The serviceType attributes at both ends of a connection must be the same.')
aal1CesBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(94, 15651)).clone(282)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesBufferSize.setDescription('This attribute defines the size of the AAL1 receive segment reassembly buffer in bytes. The value of this attribute will affect the overflow condition during AAL1 processing, that is, increasing the buffer size will reduce the chance of an overflow condition occurring. However, too large a buffer may adversely impact the time needed to process the data in the buffer.')
aal1CesCellDelayVariationTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 655)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCellDelayVariationTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCellDelayVariationTolerance.setDescription('This attribute defines the maximum cell arrival jitter (in milliseconds) that the AAL1 reassembly process will tolerate in the ATM cell stream without producing errors on the service interface. This attribute may be set to a small value if the CES connection will produce minimal CDV and a large value if the connection will produce a large CDV. This attribute, together with the attribute bufferSize, can be configured to optimize the jitter versus absolute delay trade-off in various network configurations.')
aal1CesCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCellLossIntegrationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCellLossIntegrationPeriod.setDescription('This attribute defines the cell loss integration period. This period defines the interval of time (in milliseconds) for which a loss of cells condition must persist before a buffer underflow alarm is raised. A loss of cells condition occurs when the flow of cells to the AAL1 reassembly buffer stops, causing a buffer underflow or starvation condition. The operational attribute cellLossStatus will be set to loss when the buffer underflow alarm is raised, and noLoss when it is cleared.')
aal1CesInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 5), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesInterfaceName.setDescription('This attribute identifies the instance of Chan to which an instance of Aal1Ces is linked.')
aal1CesPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPartialFill.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPartialFill.setDescription('A significant source of delay in a structured service is the amount of time it takes to collect enough data to fill a cell. This period of time can be reduced by sending cells that are only partially filled with data (idlePattern octets are added to the ATM payload beyond the partial fill level). This attribute defines the number of payload octets to fill with data. It is applicable to structured services only, and must be set to 47 for unstructured services. On a given AAL1 Function Processor, the maximum cell rate that can be sustained is dependent upon the combined bandwidths of the provisioned services, and (for structured services) the levels of partialFill. The smaller the partialFill level, the greater the cell rate and hence the fewer the services that can be sustained at that fill level.')
aal1CesIdleSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesIdleSuppression.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesIdleSuppression.setDescription('This attribute controls the suppression of idle cells. An idle cell is one in which the bytes of the ATM payload (up to the partialFill level) match the idlePattern. If idleSuppression is off, idle cells are not suppressed. If idleSuppression is on, at least 75% of cells are suppressed under idle conditions. The strategy is as follows: the first idle cell after a sequence of non-idle cells is always sent; those that follow are suppressed. Note, however, that at least one cell in eight is always sent (to allow the receive end to regenerate the suppressed cells) and more often than not, two cells are sent (the cell containing the AAL1 pointer, which will almost always fail to match, and the one after that).')
aal1CesIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 8), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesIdlePattern.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesIdlePattern.setDescription('This attribute specifies the pattern which the bytes of an ATM payload, up to the partialFill level, must match in order for the cell to be classified as idle. Payload bytes beyond the partialFill level are not checked. The suppression of idle cells is controlled by the attribute idleSuppression. If idleSuppression is on, at least 75% of cells are suppressed under idle conditions.')
aal1CesCellLossRecoveryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCellLossRecoveryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCellLossRecoveryPeriod.setDescription('This attribute defines the cell loss recovery period. This period defines the interval of time (in seconds) for which a loss of cells condition must desist before the buffer underflow alarm is cleared. The operational attribute cellLossStatus will be set to noLoss when the buffer underflow alarm is cleared.')
aal1CesDummyDataByte = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 10), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesDummyDataByte.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesDummyDataByte.setDescription('This attribute defines the pattern which is played out onto the service interface to maintain bit integrity when data is unavailable from the ATM network. For an unstructured service (serviceType is set to unstructured), dummyDataByte must be set to FF.')
aal1CesStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12), )
if mibBuilder.loadTexts: aal1CesStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
aal1CesStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesStateEntry.setDescription('An entry in the aal1CesStateTable.')
aal1CesAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
aal1CesOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
aal1CesUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
aal1CesAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
aal1CesProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
aal1CesControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
aal1CesAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
aal1CesStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
aal1CesUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
aal1CesOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13), )
if mibBuilder.loadTexts: aal1CesOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesOperTable.setDescription('This group contains status information about the AAL1 Circuit Emulation Service.')
aal1CesOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesOperEntry.setDescription('An entry in the aal1CesOperTable.')
aal1CesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noLoss", 0), ("loss", 1))).clone('noLoss')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesCellLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCellLossStatus.setDescription('This attribute is set to loss when a buffer underflow alarm is raised (see cellLossIntegrationPeriod), and noLoss when it is clear.')
aal1CesAal1LayerLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noLoss", 0), ("loss", 1))).clone('noLoss')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAal1LayerLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAal1LayerLossStatus.setDescription('This attribute is set to loss when an AAL1 layer alarm is raised, and noLoss when it is clear.')
aal1CesConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connected", 0), ("channelNotReady", 1), ("atmNotReady", 2), ("atmNotConfigured", 3))).clone('channelNotReady')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesConnectionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesConnectionStatus.setDescription("This attribute indicates whether a service is non- operational because of a problem with the service interface side of the service (in which case, it is set to channelNotReady) or because of a problem with the ATM side of the service (in which case, it is set to atmNotConfigured or atmNotReady). When this attribute is set to channelNotReady, it is an indication that the corresponding Chan component (as defined by the attribute interfaceName) or the Chan component's parent port component (Lp/n Ds1/m or Lp/n E1/m) is locked. When this attribute is set to atmNotConfigured, it is an indication that no sub-component has been provisioned, and thus no ATM connection has been configured for the service. When this attribute is set to atmNotReady, it is an indication that the ATM connection with which the service is associated (as defined by a sub-component) has been lost or that it is currently unable to carry CES data. This attribute is set to connected when a service is operational (that is, the OSI attribute operationalState is enabled.)")
aal1CesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14), )
if mibBuilder.loadTexts: aal1CesStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesStatsTable.setDescription('This group contains statistical data for an AAL1 Circuit Emulation Service.')
aal1CesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesStatsEntry.setDescription('An entry in the aal1CesStatsTable.')
aal1CesCellsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesCellsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCellsTransmitted.setDescription('This attribute counts the total number of cells transmitted to the backplane (ingress direction). This includes cells containing CBR data, trunk conditioning cells (structured services), and unframed AIS cells (unstructured services). The counter wraps when the maximum value is exceeded.')
aal1CesCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesCellsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesCellsReceived.setDescription('This attribute counts the total number of cells received from the backplane (egress direction). This includes CBR user data cells, cells with AAL1 header errors (correctable and non-correctable) and cells with AAL1 sequencing errors. The counter wraps when the maximum value is exceeded.')
aal1CesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLostCells.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLostCells.setDescription('This attribute counts the number of cells declared as never received by the AAL1 protocol layer. The counter wraps when the maximum value is exceeded.')
aal1CesBufferUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesBufferUnderflows.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesBufferUnderflows.setDescription('This attribute counts the number of times the AAL1 reassembly buffer underflows. In the case of a continuous buffer starvation, a single buffer underflow event will be counted. The counter wraps when the maximum value is exceeded.')
aal1CesBufferOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesBufferOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesBufferOverflows.setDescription('This attribute counts the number of times the AAL1 reassembly buffer overflows. Buffer overflows occur when AAL1 cells arrive at a rate above that which is expected. Occurrences of this condition may be reduced by increasing the value of the attribute bufferSize. The buffer overflow counter wraps when the maximum value is exceeded.')
aal1CesReassembledCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesReassembledCells.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesReassembledCells.setDescription('This attribute counts the number of received cells whose payload has been played out to the service interface. The counter wraps when the maximum value is exceeded.')
aal1CesHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesHeaderErrors.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesHeaderErrors.setDescription('This attribute counts the number of cells received with AAL1 header errors. The counter wraps when the maximum value is exceeded.')
aal1CesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPointerReframes.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPointerReframes.setDescription('This attribute counts the number of times that the AAL1 reassembly unit found an SDT pointer where it was not expected to be, and as a result had to reacquire it. Errors of this kind can occur because of problems at the far end. This attribute is meaningful for structured services only, and will be 0 for unstructured services. This counter wraps when the maximum value is exceeded.')
aal1CesPointerParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPointerParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPointerParityErrors.setDescription('This attribute counts the number of times that the AAL1 reassembly unit detects a parity check failure at the point where an SDT pointer is expected. Errors of this kind can occur because of problems at the far end. This attribute is meaningful for structured services only, and will be 0 for unstructured services. This counter wraps when the maximum value is exceeded.')
aal1CesAal1SequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAal1SequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAal1SequenceErrors.setDescription('This attribute counts the number of times that the sequence number of an incoming AAL1 Type 1 SAR-PDU gets out of synchronisation, as defined by ITU-T Recommendation I.363.1. This counter wraps when the maximum value is exceeded.')
aal1CesMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesMisinsertedCells.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesMisinsertedCells.setDescription('This attribute counts the number of AAL1 sequence violations which the AAL convergence sublayer interprets as misinserted cells, as defined by ITU-T I.363.1. This counter wraps when the maximum value is exceeded.')
aal1CesNap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2))
aal1CesNapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1), )
if mibBuilder.loadTexts: aal1CesNapRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapRowStatusTable.setDescription('This entry controls the addition and deletion of aal1CesNap components.')
aal1CesNapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesNapIndex"))
if mibBuilder.loadTexts: aal1CesNapRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapRowStatusEntry.setDescription('A single entry in the table represents a single aal1CesNap component.')
aal1CesNapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesNapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapRowStatus.setDescription('This variable is used as the basis for SNMP naming of aal1CesNap components. These components can be added and deleted.')
aal1CesNapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesNapComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
aal1CesNapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesNapStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapStorageType.setDescription('This variable represents the storage type value for the aal1CesNap tables.')
aal1CesNapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesNapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapIndex.setDescription('This variable represents the index for the aal1CesNap tables.')
aal1CesNapProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 10), )
if mibBuilder.loadTexts: aal1CesNapProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapProvTable.setDescription('This group contains the provisioning data for the NailedUpAdaptationPoint component.')
aal1CesNapProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesNapIndex"))
if mibBuilder.loadTexts: aal1CesNapProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapProvEntry.setDescription('An entry in the aal1CesNapProvTable.')
aal1CesNapAtmConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesNapAtmConnection.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesNapAtmConnection.setDescription('This attribute specifies the identity of the component to which the NailedUpAdaptationPoint is linked. This will be an AtmIf Vcc NailedUpEndPoint or an AtmIf Vpt Vcc NailedUpEndPoint (the AAL1 cells are transported off the switch via an ATM UNI, where they are routed to the appropriate AAL1 entity at the other end by the ATM bearer service).')
aal1CesAep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3))
aal1CesAepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1), )
if mibBuilder.loadTexts: aal1CesAepRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRowStatusTable.setDescription('This entry controls the addition and deletion of aal1CesAep components.')
aal1CesAepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRowStatusEntry.setDescription('A single entry in the table represents a single aal1CesAep component.')
aal1CesAepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRowStatus.setDescription('This variable is used as the basis for SNMP naming of aal1CesAep components. These components can be added and deleted.')
aal1CesAepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
aal1CesAepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepStorageType.setDescription('This variable represents the storage type value for the aal1CesAep tables.')
aal1CesAepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesAepIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepIndex.setDescription('This variable represents the index for the aal1CesAep tables.')
aal1CesAepProvEndPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10), )
if mibBuilder.loadTexts: aal1CesAepProvEndPointAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepProvEndPointAddrTable.setDescription('This group contains NSAP address provisioning data for components using switched virtual circuits.')
aal1CesAepProvEndPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepProvEndPointAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepProvEndPointAddrEntry.setDescription('An entry in the aal1CesAepProvEndPointAddrTable.')
aal1CesAepExpectedRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepExpectedRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepExpectedRemoteAddress.setDescription('This attribute specifies the expected remote address prefix for an incoming connection setup request. If expectedRemoteAddress is not empty, only matching connections will be considered for acceptance. If expectedRemoteAddress is 40 characters long, the remote address must match exactly to be accepted. If expectedRemoteAddress is less than 40 characters long, the remote address must begin with expectedRemoteAddress to be accepted. If expectedRemoteAddress is empty, the component will process connection requests from any remote address.')
aal1CesAepLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepLocalAddress.setDescription('This attribute specifies the local NSAP address. If the switch prefix (the nodePrefix attribute of the ModuleData component) has been provisioned, a default value for localAddress based on nodePrefix will be provided. If ModuleData nodePrefix has not been provisioned and one or more alternate switch prefixes (the alternatePorsPrefixes attribute of the ModuleData component) have been provisioned, a default value for localAddress based on the first provisioned alternatePorsPrefix value will be provided. If no switch prefixes have been provisioned, localAddress will default to an empty string. To obtain a valid default localAddress in this case, either or both of the ModuleData nodePrefix and ModuleData alternatePorsPrefixes attributes must be provisioned, and this end point component must then be deleted and re-added.')
aal1CesAepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11), )
if mibBuilder.loadTexts: aal1CesAepProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepProvTable.setDescription('This group contains the provisioning data specific to the ActiveEndPoint component.')
aal1CesAepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepProvEntry.setDescription('An entry in the aal1CesAepProvTable.')
aal1CesAepAddressToCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepAddressToCall.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepAddressToCall.setDescription('This attribute specifies the remote NSAP address which this ActiveEndPoint will call.')
aal1CesAepRoutingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("porsOnly", 0))).clone('porsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepRoutingOption.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRoutingOption.setDescription('routingOption specifies the type of routing to use for establishing the connection: porsOnly means that only the Path Oriented Routing System may be used in establishing a connection.')
aal1CesAepProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepProfile.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepProfile.setDescription('This attribute specifies the PORS routing profile to use for this connection. If profile is empty, PORS will provide a default profile.')
aal1CesAepFirstRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepFirstRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepFirstRetryInterval.setDescription('This attribute defines the time to wait, in seconds, before attempting to establish the connection after the first failed attempt. The time to wait between subsequent call attempts will generally differ due to a backoff scheme.')
aal1CesAepRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRetryLimit.setDescription('retryLimit specifies the maximum number of consecutive unsuccessful connection setup attempts that may be made before further attempts are abandoned. If this limit is reached, the Restart verb may be used to restart connection attempts. If retryLimit is 0, there is no limit; attempts will continue indefinitely until a successful connection is established.')
aal1CesAepEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12), )
if mibBuilder.loadTexts: aal1CesAepEpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepEpOperTable.setDescription('This group contains general operational attributes for components using switched virtual circuits.')
aal1CesAepEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepEpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepEpOperEntry.setDescription('An entry in the aal1CesAepEpOperTable.')
aal1CesAepRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(7, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRemoteAddress.setDescription('remoteAddress is the address of the remote end point. If a connection is currently established, remoteAddress will contain the address of the remote end point. If a connection is not established, remoteAddress will be Unknown.')
aal1CesAepLastTearDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastTearDownCause.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepLastTearDownCause.setDescription('lastTearDownCause indicates the cause of the last connection tear down. The values are as defined in the ATM Forum ATM User- Network Interface (UNI) Specification.')
aal1CesAepLastTearDownDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastTearDownDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepLastTearDownDiagnostic.setDescription('lastTearDownDiagnostic provides a diagnostic to supplement the lastTearDownCause attribute.')
aal1CesAepOutTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13), )
if mibBuilder.loadTexts: aal1CesAepOutTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepOutTable.setDescription('This group contains status information about the AAL1 Circuit Emulation Service ActiveEndPoint component.')
aal1CesAepOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepOutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepOutEntry.setDescription('An entry in the aal1CesAepOutTable.')
aal1CesAepSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initialising", 0), ("connecting", 1), ("connected", 2), ("idle", 3), ("retriesExhausted", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepSvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepSvcStatus.setDescription('svcStatus indicates the status of the incoming and outgoing connections. When this attribute has the value initialising, it indicates that the component is initialising when first created; a connection has not been established, and no incoming setup requests will be processed. When this attribute has the value connecting, it indicates that a connection has not yet been establised, but that incoming setup requests will be processed. When this attribute has the value connected, it indicates that a connection has been established. When this attribute has the value retriesExhausted, it indicates that retryLimit consecutive connection setup attempts have failed, and the connection procedure has been aborted. When this attribute has the value idle, it indicates that a connection has not been established, and that no incoming setup requests will be processed. When this attribute has the value failed, it indicates that the connections is in a state other than those described above.')
aal1CesAepLastSetupFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastSetupFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepLastSetupFailureCause.setDescription('lastSetupFailureCause indicates the cause of the last connection setup failure. The values are as defined in the ATM Forum ATM User- Network Interface (UNI) Specification.')
aal1CesAepLastSetupFailureDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastSetupFailureDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepLastSetupFailureDiagnostic.setDescription('lastSetupFailureDiagnostic provides a diagnostic to supplement the lastSetupFailureCause attribute.')
aal1CesAepRetryTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepRetryTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRetryTimeRemaining.setDescription('retryTimerValue is the current value of the retry timer for this connection; it indicates the number of seconds before the next connection attempt will be made. retryTimerValue is initialised when a connection attempt fails. When retryTimerValue reaches 0, an attempt will be made to establish the connection. When the timer is not running, for example when the connection has been established, retryTimerValue will be 0.')
aal1CesAepRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepRetryFailures.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesAepRetryFailures.setDescription('retryFailures counts the number of consecutive failed connection attempts. retryFailures is reset to 0 whenever a connection is successfully established, or the connection is restarted using the Restart verb. The counter wraps when the maximum value is exceeded.')
aal1CesPep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4))
aal1CesPepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1), )
if mibBuilder.loadTexts: aal1CesPepRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepRowStatusTable.setDescription('This entry controls the addition and deletion of aal1CesPep components.')
aal1CesPepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepRowStatusEntry.setDescription('A single entry in the table represents a single aal1CesPep component.')
aal1CesPepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPepRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepRowStatus.setDescription('This variable is used as the basis for SNMP naming of aal1CesPep components. These components can be added and deleted.')
aal1CesPepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
aal1CesPepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepStorageType.setDescription('This variable represents the storage type value for the aal1CesPep tables.')
aal1CesPepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesPepIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepIndex.setDescription('This variable represents the index for the aal1CesPep tables.')
aal1CesPepProvEndPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10), )
if mibBuilder.loadTexts: aal1CesPepProvEndPointAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepProvEndPointAddrTable.setDescription('This group contains NSAP address provisioning data for components using switched virtual circuits.')
aal1CesPepProvEndPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepProvEndPointAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepProvEndPointAddrEntry.setDescription('An entry in the aal1CesPepProvEndPointAddrTable.')
aal1CesPepExpectedRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPepExpectedRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepExpectedRemoteAddress.setDescription('This attribute specifies the expected remote address prefix for an incoming connection setup request. If expectedRemoteAddress is not empty, only matching connections will be considered for acceptance. If expectedRemoteAddress is 40 characters long, the remote address must match exactly to be accepted. If expectedRemoteAddress is less than 40 characters long, the remote address must begin with expectedRemoteAddress to be accepted. If expectedRemoteAddress is empty, the component will process connection requests from any remote address.')
aal1CesPepLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPepLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepLocalAddress.setDescription('This attribute specifies the local NSAP address. If the switch prefix (the nodePrefix attribute of the ModuleData component) has been provisioned, a default value for localAddress based on nodePrefix will be provided. If ModuleData nodePrefix has not been provisioned and one or more alternate switch prefixes (the alternatePorsPrefixes attribute of the ModuleData component) have been provisioned, a default value for localAddress based on the first provisioned alternatePorsPrefix value will be provided. If no switch prefixes have been provisioned, localAddress will default to an empty string. To obtain a valid default localAddress in this case, either or both of the ModuleData nodePrefix and ModuleData alternatePorsPrefixes attributes must be provisioned, and this end point component must then be deleted and re-added.')
aal1CesPepEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11), )
if mibBuilder.loadTexts: aal1CesPepEpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepEpOperTable.setDescription('This group contains general operational attributes for components using switched virtual circuits.')
aal1CesPepEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepEpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepEpOperEntry.setDescription('An entry in the aal1CesPepEpOperTable.')
aal1CesPepRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(7, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepRemoteAddress.setDescription('remoteAddress is the address of the remote end point. If a connection is currently established, remoteAddress will contain the address of the remote end point. If a connection is not established, remoteAddress will be Unknown.')
aal1CesPepLastTearDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepLastTearDownCause.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepLastTearDownCause.setDescription('lastTearDownCause indicates the cause of the last connection tear down. The values are as defined in the ATM Forum ATM User- Network Interface (UNI) Specification.')
aal1CesPepLastTearDownDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepLastTearDownDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepLastTearDownDiagnostic.setDescription('lastTearDownDiagnostic provides a diagnostic to supplement the lastTearDownCause attribute.')
aal1CesPepPassiveOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 12), )
if mibBuilder.loadTexts: aal1CesPepPassiveOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepPassiveOperTable.setDescription('This group contains status information about the AAL1 Circuit Emulation Service PassiveEndPoint component.')
aal1CesPepPassiveOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepPassiveOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepPassiveOperEntry.setDescription('An entry in the aal1CesPepPassiveOperTable.')
aal1CesPepSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("initialising", 0), ("connecting", 1), ("connected", 2), ("idle", 3), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepSvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesPepSvcStatus.setDescription('svcStatus indicates the status of the incoming connection. When this attribute has the value initialising, it indicates that the component is initialising when first created; a connection has not been established, and no incoming setup requests will be processed. When this attribute has the value connecting, it indicates that a connection has not yet been establised, but that incoming setup requests will be processed. When this attribute has the value connected, it indicates that a connection has been established. When this attribute has the value idle, it indicates that a connection has not been established, and that no incoming setup requests will be processed. When this attribute has the value failed, it indicates that the connections is in a state other than those described above.')
aal1CesLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5))
aal1CesLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1), )
if mibBuilder.loadTexts: aal1CesLCoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRowStatusTable.setDescription('This entry controls the addition and deletion of aal1CesLCo components.')
aal1CesLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"))
if mibBuilder.loadTexts: aal1CesLCoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRowStatusEntry.setDescription('A single entry in the table represents a single aal1CesLCo component.')
aal1CesLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRowStatus.setDescription('This variable is used as the basis for SNMP naming of aal1CesLCo components. These components cannot be added nor deleted.')
aal1CesLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
aal1CesLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoStorageType.setDescription('This variable represents the storage type value for the aal1CesLCo tables.')
aal1CesLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesLCoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoIndex.setDescription('This variable represents the index for the aal1CesLCo tables.')
aal1CesLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10), )
if mibBuilder.loadTexts: aal1CesLCoPathDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathDataTable.setDescription('This group contains all operational attributes for the path oriented LCo.')
aal1CesLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"))
if mibBuilder.loadTexts: aal1CesLCoPathDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathDataEntry.setDescription('An entry in the aal1CesLCoPathDataTable.')
aal1CesLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoState.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoState.setDescription('This attribute reflects the current state of the connection. The pathDown state indicates a connection that has no remote end provisioned or the application has not yet signalled for a path. The selectingRoute state occurs when a request has been sent to route selector and it has not yet responded. The connectingState occurs while a path is being established. The pathUp state is the normal operational state of a path. The pathDownRetrying state indicates a path that attempted route selection but received no route and is now waiting to retry route selection again.')
aal1CesLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesLCoOverrideRemoteName.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoOverrideRemoteName.setDescription("If set and the current PLC remoteName is blank this remoteName will override the blank PLC remoteName. Usually you would set this attribute and then lock/unlock the service component which will result in this new overrideRemoteName being used as if it had been provisioned into the PLC remoteName. The advantage of this attribute is that the connection's remoteName can be changed immediately without having to 'activate prov' but the disadvantage is that the overrideRemoteName is not permanent and if the card or switch is reset the override will be lost.")
aal1CesLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoEnd.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoEnd.setDescription('This attribute identifies whether this is the calling or called end of the path.')
aal1CesLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoCostMetric.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoCostMetric.setDescription("This attribute gives the route's total cost metric. It is calculated as the sum of the cost metric of all trunks in the path at the time the connection was established. The cost metric of a trunk is defined by the trunkCost attribute of the Trunk component. The costMetric for an LCo that is originated and terminated on the same module is 0.")
aal1CesLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoDelayMetric.setDescription('This attribute gives the total delay of the route as the one way delay for a 512 byte packet. It is calculated as the sum of the delays of all trunks in the path stored in topology at the time the connection was established. The delay for an LCo that is originated and terminated on the same module is 0.')
aal1CesLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRoundTripDelay.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRoundTripDelay.setDescription('This attribute contains the time taken for a packet (cell) of 44 bytes to be transmitted to the remote LCo and return to this LCo. The number reported is given in milliseconds to the nearest millisecond. A value of one millisecond is reported if the time is less than 1 millisecond even though the delay may be less than 1 Millisecond when the LCo is originated and terminated on the same module.')
aal1CesLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoSetupPriority.setDescription('This attribute gives the priority at which the current path is established. Zero is the highest priority and four is the lowest. The holdingPriority, a complementary attribute of this component, indicates the priority a path maintains once it is established.')
aal1CesLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoHoldingPriority.setDescription('This attribute gives the priority at which a path holds its current path once the path is established. Zero is the highest priority and four is the lowest. The setupPriority, a complementary attribute, indicates the priority of a path at establishment time.')
aal1CesLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredTxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRequiredTxBandwidth.setDescription('This attribute gives the actual bandwidth (in bits per second) reserved by this path on each of the trunks of its route. This attribute represents the bandwidth for traffic outgoing to the remote end point. The originating end of the connection determines this value.')
aal1CesLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredRxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRequiredRxBandwidth.setDescription('This attribute gives the actual bandwidth (in bits per second) reserved by this path on each of trunks of its route. This attribute represents the bandwidth for traffic incoming from the remote end point. The originating end of the connection determines this value')
aal1CesLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRequiredTrafficType.setDescription('This operational attribute indicates the type of traffic transmitted over the path. There are eight possible traffic types, and the path can transmit only one of them. The originating end of the connection determines the type. These are arbitrary designations for traffic type. The voice, data and video traffic types are defined, and five other arbitrary traffic types can be defined by the network administration. This attribute is used in the route selection process to restrict the route to trunks that support this traffic type. The supportedTrafficType trunk attribute lists all the types of traffic allowed on the trunk. For example, if requiredTrafficType is specified as trafficType1 then only trunks that include trafficType1 in supportedTrafficType, will be candidates for this connection.')
aal1CesLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPermittedTrunkTypes.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPermittedTrunkTypes.setDescription("This operational attribute lists up to eight types of trunk that can be used on the route. The originating end of the connection determines the types. The terrestrial and satellite trunk types have been defined, leaving six remaining arbitrary types that can be defined by the network administration. The trunk's type is indicated in the trunkType attribute of the Trunk component. When selecting a route, PORS only chooses trunks whose trunkType are in the permittedTrunkTypes for the path. Description of bits: terrestrial(0) satellite(1) trunkType1(2) trunkType2(3) trunkType3(4) trunkType4(5) trunkType5(6) trunkType6(7)")
aal1CesLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRequiredSecurity.setDescription("This attribute indicates the required minimum level of security of the trunks on the route. Zero represents the most secure and seven represents the least secure. The trunk's security is indicated by the trunkSecurity attribute of the Trunk component, and has values identical in range and meaning to the requiredSecurity attribute. PORS ensures that any route selected does not contain a trunk whose trunkSecurity attribute is numerically greater than the requiredSecurity.")
aal1CesLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredCustomerParameter.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRequiredCustomerParameter.setDescription('This attribute indicates the allowed customer defined parameter of the trunks on the route.The originating end of the connection determines the customer defined parameter. Its value, a number from zero to seven, is chosen by a network administration to have a meaning specific to their network, thus allowing them to customize the use of their trunks. A complementary trunk attribute, customerParameter, also has a value from zero to seven. The route selection process does not consider trunks whose customerParameter is greater than the requiredCustomerParameter of the path.')
aal1CesLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoEmissionPriority.setDescription('This attribute indicates the urgency with which packets on the path are emitted by the trunks on the route. The originating end of the connection selects the emissionPriority. EmissionPriority of zero indicates the highest emission priority, while two indicates the lowest emission priority. Packets with a higher emissionPriority (or numerically less) are serviced and sent out before the packets of lower emissionPriority (or numerically higher).')
aal1CesLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoDiscardPriority.setDescription('This attribute indicates the importance of the packets on the path.The originating end of the connection sets discardPriority. One is used for paths carrying the most important traffic, and three is used for paths carrying the least important traffic. Packets with lower discardPriority(numerically lower) are discarded after packets with a higher discardPriority(numerically higher).')
aal1CesLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathType.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathType.setDescription('This attribute indicates whether the path for this PLC was determined automatically or by static provisioning. Normal pathTypes are selected automatically by Route Selector.The other pathTypes are both manual pathTypes where the operator must specify, through provisioning, a static route termed the manualPath. A manual pathType connection is nearly identical to a normal path type connection with the exception that the route is pre-provisioned. For a manual pathType, bandwidth reservations are respected along the path exactly as in a normal path. The last type, the forced pathType, is also a manual path but regardless of the bandwidth available the route is granted provided the trunks are operational and there are sufficient Logical Channels (LChs). The forced pathType could result in over committing the reserved bandwidth allowed on a trunk. A better way to achieve the effects of a forced pathType is to use a manual pathType with setupPriority = 0 and holdingPriority = 0. In this manner the path will reserve correct bandwidth and it will bump other paths if required while not being bumped itself.')
aal1CesLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoRetryCount.setDescription('This attribute is the count of the number of times the path chosen during route selection could not be instantiated. This count should be three or below if the network is performing adequately. A high value indicates that the route selection is often performed using an out-of-date view of available network bandwidth and/or topology. This attribute will only increase at the calling end of the connection. This attribute is reset each time a path reconnects and stops counting when it reaches its maximum value.')
aal1CesLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathFailureCount.setDescription('This attribute is the count of the number of times the path has successfully connected. It is set to zero the first time the path is up. If a path fails anytime after connecting this count will be incremented when the path is up again. Failed route requests do not count in this statistic. See retryCount above. This attribute stops counting at its maximum value.')
aal1CesLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoReasonForNoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoReasonForNoRoute.setDescription("This attribute is the route selection's reasonForNoRoute and provides a brief reason for which a route was not selected. The reasons are essentially self-explanatory. Perhaps two reasons for no route require some explanation. The reason unknownRemoteNodeName is issued when the remote node name is not in the topological database. The reason plcAttributesNotMet is issued when there is no network connectivity at a level specified by the PLC attributes. This reason is also issued when there is no physical connectivity between two end nodes.")
aal1CesLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoLastTearDownReason.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoLastTearDownReason.setDescription("This attribute reflects the last tear down reason for a connection (LCo). In many cases this displays the reason for a momentary service interruption. This attribute applies to the last path failure only. If a path is no longer up, this may give an indication to the reason that the path has failed. In many cases an alarm will also be generated with more specific information. The following is a brief description of the reasons: none - This path has no information for the teardown this is typical of a path provisioned with no remoteName that has not been up. normalShutDown - This path has gone down due to normal call termination. insufficientTxLcOrBandwidth - At present there is either no available bandwidth or logical channel numbers available on one or more of the trunks for this path in the transmit direction. insufficientRxLcOrBandwidth - At present there is either no available bandwidth or logical channel numbers available on one or more of the trunks for this path in the receive direction. trunkFailure- A trunk on the path has failed or has gone down due to a provisioning change of a critical attribute. trunkCardFailure- A trunk FP card has failed along the path. accessCardFailure- The FP on which the peer access service was running has failed. operatorForced- The path has terminated due to the operator locking a trunk along the path. lostLcnClash- The path has terminated because the PA's at both ends of an intermediate trunk have allocated the same LC to different calls. When this happens both calls must go down and then try to come up again a fraction of a second later (effectively ensuring that they will now be assigned different LC's). It is normal to get the odd clash especially when the PA's usedLC is approaching the PA's maxLC. networkCongestion - The path has failed due to control information being lost and not recoverable. trunkNotFound - Occurs on a manual path usually. Check for trunks not up or names provisioned incorrectly. farEndNotFound - The far end is not provisioned or is not up. Check remote Name. wrongModuleReached - This may occur on a manual path. Check provisioning for correct trunk and service names. For a normal path, the network Topology may be changing check remoteName. farEndBusy - The far end has been reached but it is busy. Check remoteName and remote end provisioning. callLoopedBack - This LCo is provisioned to call itself. Re- provision since this is invalid. unknownReason - The failure was not resolved. farEndNotReady - The remote end was reached but the connection was refused due to the remote end not being enabled. remoteNameMismatch - The remote end has alarmed and rejected this setup due to remoteName provisioning. serviceTypeMismatch - The remote Service Type does not match this service type. Check provisioning. reconnectFromFarEnd - The remote end re-established this connection. Check the remote end lastTearDownReason to determine the real reason. bumped - Another call bumped this path from a trunk to get bandwidth (or an LC) which it required to come up. This other path had a higher setupPriority than this path's holdingPriority hence it was allowed to steal the bandwidth (or LC) from this path. optimized - This call has been rerouted due to the optimization feature. The call is still active this just indicates why the path changed. trunkOrFarEndDidNotSupportMode - This call was unable to complete because a mode required by the service was not supported by one of the trunks the route went through or by the far end service it connected to. Currently the only mode that this applies to is the map/mux mode on TRUNK PA ATM component. Map mode was required by the application (CES/FrAtm etc.) but was not available on the TRUNK PA ATM component through which the call was routed or the far end CES/FrAtm component did not specify the same mode.")
aal1CesLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathFailureAction.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathFailureAction.setDescription('This attribute displays whether the application is set to tolerate momentary interruption of a path while a new path is selected. If disconnectConnection is displayed, the application is informed as soon as possible about a failure by disconnection. If the attribute displays reRoutePath, the path may attempt an immediate reroute, provided the failure is a recoverable failure. If rerouting fails the application is informed of the failure. With this option set to reRoutePath the LCo may wait up to 30 seconds before informing the service of complete disconnection in order to allow both ends to attempt to reconnect. Note that if PLC components are different at both ends only the calling end is allowed to reconnect. All pathTypes respect this attribute. Also on a manualPath with both ends provisioned with independent paths (at least with respect to the failure) this option will have the desired effect that the path is rerouted without complete disconnection at both ends')
aal1CesLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoBumpPreference.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoBumpPreference.setDescription("This attribute specifies when bumping will occur during route selection process. Bumping may occur when necessary or always. It will be necessary for a connection to bump if there is not enough resources for the connection to be established and these resources are occupied by a connection whose setupPriority is lower (numerically higher) than the connection's setupPriority. A connection may also always bump in order to obtain the best route.")
aal1CesLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoOptimization.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoOptimization.setDescription('This attribute is used to specify whether this connection should attempt to optimize its path when requested by the routing PORS component. Every path is as optimal as it can be when it is established, but as network traffic patterns and configurations change this path may no longer be as optimal as it could be. The PORS connection manager on a module requests circuits to optimize at the optimization interval.')
aal1CesLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathUpDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathUpDateTime.setDescription('This is the time stamp when the current path was established or reestablished.')
aal1CesLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11), )
if mibBuilder.loadTexts: aal1CesLCoStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoStatsTable.setDescription('This group contains the operational statistics attributes for the path oriented LCo.')
aal1CesLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"))
if mibBuilder.loadTexts: aal1CesLCoStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoStatsEntry.setDescription('An entry in the aal1CesLCoStatsTable.')
aal1CesLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPktsToNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPktsToNetwork.setDescription('This attribute counts the number of packets transmitted to the network over this Logical Connection.')
aal1CesLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoBytesToNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoBytesToNetwork.setDescription('This attribute counts the number of bytes sent to the network over this Logical Connection.')
aal1CesLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPktsFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPktsFromNetwork.setDescription('This attribute counts the number of packets received from the remote LCo via the network.')
aal1CesLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoBytesFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoBytesFromNetwork.setDescription('This attribute counts the number of bytes received from the remote LCo via the network.')
aal1CesLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 264), )
if mibBuilder.loadTexts: aal1CesLCoPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathTable.setDescription('This attribute contains the trunk component names over which the path has been instantiated and the remote end point name terminating the path.')
aal1CesLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoPathValue"))
if mibBuilder.loadTexts: aal1CesLCoPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathEntry.setDescription('An entry in the aal1CesLCoPathTable.')
aal1CesLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathValue.setStatus('mandatory')
if mibBuilder.loadTexts: aal1CesLCoPathValue.setDescription('This variable represents both the value and the index for the aal1CesLCoPathTable.')
circuitEmulationServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1))
circuitEmulationServiceGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1, 4))
circuitEmulationServiceGroupBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1, 4, 1))
circuitEmulationServiceGroupBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1, 4, 1, 2))
circuitEmulationServiceCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3))
circuitEmulationServiceCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3, 4))
circuitEmulationServiceCapabilitiesBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3, 4, 1))
circuitEmulationServiceCapabilitiesBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3, 4, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-CircuitEmulationServiceMIB", aal1CesAepProvEndPointAddrTable=aal1CesAepProvEndPointAddrTable, aal1CesLCoRoundTripDelay=aal1CesLCoRoundTripDelay, aal1CesLCoPathValue=aal1CesLCoPathValue, circuitEmulationServiceCapabilities=circuitEmulationServiceCapabilities, circuitEmulationServiceMIB=circuitEmulationServiceMIB, aal1CesCellLossStatus=aal1CesCellLossStatus, aal1CesNapComponentName=aal1CesNapComponentName, circuitEmulationServiceCapabilitiesBD=circuitEmulationServiceCapabilitiesBD, aal1CesLCoHoldingPriority=aal1CesLCoHoldingPriority, aal1CesAepRowStatus=aal1CesAepRowStatus, aal1CesLCoPathDataTable=aal1CesLCoPathDataTable, aal1CesComponentName=aal1CesComponentName, aal1CesLCoComponentName=aal1CesLCoComponentName, aal1CesLCoPktsToNetwork=aal1CesLCoPktsToNetwork, aal1CesPepLastTearDownDiagnostic=aal1CesPepLastTearDownDiagnostic, aal1CesStateTable=aal1CesStateTable, aal1CesLCoRequiredSecurity=aal1CesLCoRequiredSecurity, aal1CesPepLastTearDownCause=aal1CesPepLastTearDownCause, circuitEmulationServiceCapabilitiesBD00A=circuitEmulationServiceCapabilitiesBD00A, aal1CesNapRowStatusTable=aal1CesNapRowStatusTable, aal1CesProvEntry=aal1CesProvEntry, aal1CesPep=aal1CesPep, aal1CesLCoRequiredTxBandwidth=aal1CesLCoRequiredTxBandwidth, aal1CesLCoEnd=aal1CesLCoEnd, aal1CesRowStatus=aal1CesRowStatus, aal1CesLCoPathDataEntry=aal1CesLCoPathDataEntry, circuitEmulationServiceCapabilitiesBD00=circuitEmulationServiceCapabilitiesBD00, aal1CesPepSvcStatus=aal1CesPepSvcStatus, aal1CesPartialFill=aal1CesPartialFill, aal1CesPepRowStatus=aal1CesPepRowStatus, aal1CesInterfaceName=aal1CesInterfaceName, aal1CesStatsEntry=aal1CesStatsEntry, aal1CesAepLocalAddress=aal1CesAepLocalAddress, aal1CesLCoOverrideRemoteName=aal1CesLCoOverrideRemoteName, aal1CesLCoRetryCount=aal1CesLCoRetryCount, aal1CesLCoCostMetric=aal1CesLCoCostMetric, aal1CesAepExpectedRemoteAddress=aal1CesAepExpectedRemoteAddress, aal1CesLCoStatsEntry=aal1CesLCoStatsEntry, aal1CesLCoRequiredRxBandwidth=aal1CesLCoRequiredRxBandwidth, aal1CesBufferOverflows=aal1CesBufferOverflows, aal1CesRowStatusTable=aal1CesRowStatusTable, aal1CesNapRowStatus=aal1CesNapRowStatus, aal1CesRowStatusEntry=aal1CesRowStatusEntry, aal1CesLCoBumpPreference=aal1CesLCoBumpPreference, aal1CesLCoRowStatus=aal1CesLCoRowStatus, aal1CesPepRemoteAddress=aal1CesPepRemoteAddress, aal1CesLCoState=aal1CesLCoState, aal1CesLCoBytesFromNetwork=aal1CesLCoBytesFromNetwork, aal1CesCellLossIntegrationPeriod=aal1CesCellLossIntegrationPeriod, aal1CesStateEntry=aal1CesStateEntry, aal1CesAvailabilityStatus=aal1CesAvailabilityStatus, aal1CesAepProfile=aal1CesAepProfile, aal1CesStorageType=aal1CesStorageType, aal1CesLCoPathFailureCount=aal1CesLCoPathFailureCount, aal1CesAepRemoteAddress=aal1CesAepRemoteAddress, aal1CesLCoIndex=aal1CesLCoIndex, aal1CesPointerParityErrors=aal1CesPointerParityErrors, aal1CesAepProvTable=aal1CesAepProvTable, aal1CesAepRowStatusTable=aal1CesAepRowStatusTable, aal1CesLCoReasonForNoRoute=aal1CesLCoReasonForNoRoute, aal1CesIdleSuppression=aal1CesIdleSuppression, aal1CesLCoRowStatusEntry=aal1CesLCoRowStatusEntry, circuitEmulationServiceGroupBD00A=circuitEmulationServiceGroupBD00A, aal1CesUsageState=aal1CesUsageState, aal1CesAepProvEndPointAddrEntry=aal1CesAepProvEndPointAddrEntry, aal1CesAepOutTable=aal1CesAepOutTable, aal1CesNapProvEntry=aal1CesNapProvEntry, aal1CesAepAddressToCall=aal1CesAepAddressToCall, aal1CesCustomerIdentifier=aal1CesCustomerIdentifier, aal1CesLCoDelayMetric=aal1CesLCoDelayMetric, aal1CesNapProvTable=aal1CesNapProvTable, aal1CesLCoDiscardPriority=aal1CesLCoDiscardPriority, circuitEmulationServiceGroupBD00=circuitEmulationServiceGroupBD00, aal1CesAepRetryTimeRemaining=aal1CesAepRetryTimeRemaining, aal1CesStatsTable=aal1CesStatsTable, aal1CesLCoRequiredTrafficType=aal1CesLCoRequiredTrafficType, aal1CesPepPassiveOperTable=aal1CesPepPassiveOperTable, aal1CesPepComponentName=aal1CesPepComponentName, aal1CesDummyDataByte=aal1CesDummyDataByte, aal1CesPepRowStatusEntry=aal1CesPepRowStatusEntry, aal1CesCellsReceived=aal1CesCellsReceived, aal1CesAepEpOperEntry=aal1CesAepEpOperEntry, aal1CesAepLastTearDownCause=aal1CesAepLastTearDownCause, aal1CesAepLastSetupFailureCause=aal1CesAepLastSetupFailureCause, aal1Ces=aal1Ces, aal1CesCellDelayVariationTolerance=aal1CesCellDelayVariationTolerance, aal1CesCidDataTable=aal1CesCidDataTable, aal1CesBufferSize=aal1CesBufferSize, aal1CesPepEpOperEntry=aal1CesPepEpOperEntry, aal1CesCellLossRecoveryPeriod=aal1CesCellLossRecoveryPeriod, aal1CesLCoPathEntry=aal1CesLCoPathEntry, aal1CesAepSvcStatus=aal1CesAepSvcStatus, aal1CesOperTable=aal1CesOperTable, aal1CesAepProvEntry=aal1CesAepProvEntry, aal1CesAepLastTearDownDiagnostic=aal1CesAepLastTearDownDiagnostic, aal1CesLCoPathTable=aal1CesLCoPathTable, aal1CesAlarmStatus=aal1CesAlarmStatus, aal1CesAepFirstRetryInterval=aal1CesAepFirstRetryInterval, aal1CesLCoOptimization=aal1CesLCoOptimization, aal1CesAepLastSetupFailureDiagnostic=aal1CesAepLastSetupFailureDiagnostic, aal1CesServiceType=aal1CesServiceType, aal1CesReassembledCells=aal1CesReassembledCells, aal1CesNapStorageType=aal1CesNapStorageType, aal1CesBufferUnderflows=aal1CesBufferUnderflows, aal1CesAepRetryLimit=aal1CesAepRetryLimit, aal1CesMisinsertedCells=aal1CesMisinsertedCells, aal1CesAal1SequenceErrors=aal1CesAal1SequenceErrors, circuitEmulationServiceGroupBD=circuitEmulationServiceGroupBD, aal1CesIndex=aal1CesIndex, aal1CesAepOutEntry=aal1CesAepOutEntry, aal1CesUnknownStatus=aal1CesUnknownStatus, aal1CesLostCells=aal1CesLostCells, aal1CesOperationalState=aal1CesOperationalState, aal1CesAepRetryFailures=aal1CesAepRetryFailures, aal1CesPepExpectedRemoteAddress=aal1CesPepExpectedRemoteAddress, aal1CesLCoPathType=aal1CesLCoPathType, aal1CesControlStatus=aal1CesControlStatus, aal1CesPepStorageType=aal1CesPepStorageType, aal1CesLCoLastTearDownReason=aal1CesLCoLastTearDownReason, aal1CesNapIndex=aal1CesNapIndex, aal1CesAepIndex=aal1CesAepIndex, aal1CesStandbyStatus=aal1CesStandbyStatus, aal1CesOperEntry=aal1CesOperEntry, aal1CesLCoStatsTable=aal1CesLCoStatsTable, aal1CesAdminState=aal1CesAdminState, aal1CesAepRowStatusEntry=aal1CesAepRowStatusEntry, circuitEmulationServiceGroup=circuitEmulationServiceGroup, aal1CesPepPassiveOperEntry=aal1CesPepPassiveOperEntry, aal1CesLCoPathFailureAction=aal1CesLCoPathFailureAction, aal1CesLCoPktsFromNetwork=aal1CesLCoPktsFromNetwork, aal1CesPepLocalAddress=aal1CesPepLocalAddress, aal1CesLCoRequiredCustomerParameter=aal1CesLCoRequiredCustomerParameter, aal1CesLCoSetupPriority=aal1CesLCoSetupPriority, aal1CesAepEpOperTable=aal1CesAepEpOperTable, aal1CesLCoPathUpDateTime=aal1CesLCoPathUpDateTime, aal1CesPepIndex=aal1CesPepIndex, aal1CesAal1LayerLossStatus=aal1CesAal1LayerLossStatus, aal1CesLCoRowStatusTable=aal1CesLCoRowStatusTable, aal1CesAepRoutingOption=aal1CesAepRoutingOption, aal1CesCidDataEntry=aal1CesCidDataEntry, aal1CesPointerReframes=aal1CesPointerReframes, aal1CesPepProvEndPointAddrTable=aal1CesPepProvEndPointAddrTable, aal1CesProceduralStatus=aal1CesProceduralStatus, aal1CesNapAtmConnection=aal1CesNapAtmConnection, aal1CesPepProvEndPointAddrEntry=aal1CesPepProvEndPointAddrEntry, aal1CesLCoBytesToNetwork=aal1CesLCoBytesToNetwork, aal1CesHeaderErrors=aal1CesHeaderErrors, aal1CesPepRowStatusTable=aal1CesPepRowStatusTable, aal1CesIdlePattern=aal1CesIdlePattern, aal1CesConnectionStatus=aal1CesConnectionStatus, aal1CesAepComponentName=aal1CesAepComponentName, aal1CesCellsTransmitted=aal1CesCellsTransmitted, aal1CesLCoEmissionPriority=aal1CesLCoEmissionPriority, aal1CesNapRowStatusEntry=aal1CesNapRowStatusEntry, aal1CesLCo=aal1CesLCo, aal1CesProvTable=aal1CesProvTable, aal1CesNap=aal1CesNap, aal1CesAep=aal1CesAep, aal1CesAepStorageType=aal1CesAepStorageType, aal1CesPepEpOperTable=aal1CesPepEpOperTable, aal1CesLCoStorageType=aal1CesLCoStorageType, aal1CesLCoPermittedTrunkTypes=aal1CesLCoPermittedTrunkTypes)
