#
# PySNMP MIB module AT-FLASH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-FLASH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, ModuleIdentity, Gauge32, MibIdentifier, Unsigned32, Integer32, iso, ObjectIdentity, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "ModuleIdentity", "Gauge32", "MibIdentifier", "Unsigned32", "Integer32", "iso", "ObjectIdentity", "TimeTicks", "NotificationType")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
flash = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31))
flash.setRevisions(('2006-06-28 12:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: flash.setRevisionsDescriptions(('Initial Revision',))
if mibBuilder.loadTexts: flash.setLastUpdated('200606281222Z')
if mibBuilder.loadTexts: flash.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: flash.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: flash.setDescription('This MIB file contains definitions of managed objects for the FLASH module. ')
flashGetFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashGetFailure.setStatus('current')
if mibBuilder.loadTexts: flashGetFailure.setDescription('The number of flash get operations that have failed.')
flashOpenFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashOpenFailure.setStatus('current')
if mibBuilder.loadTexts: flashOpenFailure.setDescription('The number of flash open operations that have failed.')
flashReadFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashReadFailure.setStatus('current')
if mibBuilder.loadTexts: flashReadFailure.setDescription('The number of flash read operations that have failed.')
flashCloseFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCloseFailure.setStatus('current')
if mibBuilder.loadTexts: flashCloseFailure.setDescription('The number of flash close operations that have failed.')
flashCompleteFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCompleteFailure.setStatus('current')
if mibBuilder.loadTexts: flashCompleteFailure.setDescription('The number of flash complete operations that have failed.')
flashWriteFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashWriteFailure.setStatus('current')
if mibBuilder.loadTexts: flashWriteFailure.setDescription('The number of flash write operations that have failed.')
flashCreateFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCreateFailure.setStatus('current')
if mibBuilder.loadTexts: flashCreateFailure.setDescription('The number of flash create operations that have failed.')
flashPutFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPutFailure.setStatus('current')
if mibBuilder.loadTexts: flashPutFailure.setDescription('The number of flash put operations that have failed.')
flashDeleteFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeleteFailure.setStatus('current')
if mibBuilder.loadTexts: flashDeleteFailure.setDescription('The number of flash delete operations that have failed.')
flashCheckFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCheckFailure.setStatus('current')
if mibBuilder.loadTexts: flashCheckFailure.setDescription('The number of flash check operations that have failed.')
flashEraseFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseFailure.setStatus('current')
if mibBuilder.loadTexts: flashEraseFailure.setDescription('The number of flash erase operations that have failed.')
flashCompactFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCompactFailure.setStatus('current')
if mibBuilder.loadTexts: flashCompactFailure.setDescription('The number of flash compaction operations that have failed.')
flashVerifyFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashVerifyFailure.setStatus('current')
if mibBuilder.loadTexts: flashVerifyFailure.setDescription('The number of flash verify operations that have failed.')
flashTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 0))
flashFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 0, 1)).setObjects(("AT-FLASH-MIB", "flashGetFailure"), ("AT-FLASH-MIB", "flashOpenFailure"), ("AT-FLASH-MIB", "flashReadFailure"), ("AT-FLASH-MIB", "flashCloseFailure"), ("AT-FLASH-MIB", "flashCompleteFailure"), ("AT-FLASH-MIB", "flashWriteFailure"), ("AT-FLASH-MIB", "flashCreateFailure"), ("AT-FLASH-MIB", "flashPutFailure"), ("AT-FLASH-MIB", "flashDeleteFailure"), ("AT-FLASH-MIB", "flashCheckFailure"), ("AT-FLASH-MIB", "flashEraseFailure"), ("AT-FLASH-MIB", "flashCompactFailure"), ("AT-FLASH-MIB", "flashVerifyFailure"))
if mibBuilder.loadTexts: flashFailureTrap.setStatus('current')
if mibBuilder.loadTexts: flashFailureTrap.setDescription('A flash failure trap is generated when any of the above flash counter is incremented and the failure type is sent in the trap.')
mibBuilder.exportSymbols("AT-FLASH-MIB", flashFailureTrap=flashFailureTrap, flashVerifyFailure=flashVerifyFailure, flash=flash, flashTrap=flashTrap, flashOpenFailure=flashOpenFailure, flashCompleteFailure=flashCompleteFailure, flashDeleteFailure=flashDeleteFailure, flashCompactFailure=flashCompactFailure, flashCloseFailure=flashCloseFailure, flashGetFailure=flashGetFailure, flashReadFailure=flashReadFailure, flashCreateFailure=flashCreateFailure, flashPutFailure=flashPutFailure, flashCheckFailure=flashCheckFailure, PYSNMP_MODULE_ID=flash, flashEraseFailure=flashEraseFailure, flashWriteFailure=flashWriteFailure)
