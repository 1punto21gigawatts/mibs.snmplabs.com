#
# PySNMP MIB module DOCS-SEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-SEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
docsBpi2CodeDownloadControl, = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "docsBpi2CodeDownloadControl")
docsIf3CmtsCmRegStatusEntry, docsIf3CmtsCmRegStatusId = mibBuilder.importSymbols("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusEntry", "docsIf3CmtsCmRegStatusId")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
SnmpTagList, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "SnmpTagList")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, Unsigned32, TimeTicks, Counter64, NotificationType, Gauge32, IpAddress, ObjectIdentity, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Counter64", "NotificationType", "Gauge32", "IpAddress", "ObjectIdentity", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32")
MacAddress, RowStatus, DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
docsSecMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11))
docsSecMib.setRevisions(('2016-01-13 00:00', '2015-03-26 00:00', '2010-01-15 00:00', '2009-05-29 00:00', '2007-02-23 00:00', '2006-12-07 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsSecMib.setRevisionsDescriptions(('Modified per CM-OSSIv3.1-N-15.1393-6. Deprecate docsBpi2CodeUpdateCvcChain for DOCSIS 3.1 that was added earlier ECN CM-OSSIv3.1-N-15.1243-1. 3.1 PKI MIBs moved to DOCS-BPI2EXT-MIB', 'Revised Version includes ECN CM-OSSIv3.1-N-15.1243-1 and published as CM-OSSIv3.1-I03, to support docsBpi2CodeUpdateCvcChain for DOCSIS 3.1.', 'Revised Version includes ECN OSSIv3.0-N-09.0872-4 and published as I11', 'Revised Version includes ECNs OSSIv3.0-N-09.0773-1 OSSIv3.0-N-09.0775-3 OSSIv3.0-N-09.0777-2 and published as I09', 'Revised Version includes ECN OSSIv3.0-N-06.0357-1 and published as IO2', 'Initial version, published as part of the CableLabs OSSIv3.0 specification CM-SP-OSSIv3.0-I01-061207 Copyright 1999-2006 Cable Television Laboratories, Inc. All rights reserved.',))
if mibBuilder.loadTexts: docsSecMib.setLastUpdated('201601130000Z')
if mibBuilder.loadTexts: docsSecMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsSecMib.setContactInfo(' Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027-9750 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsSecMib.setDescription('This MIB module contains the management objects for the management of the security requirements in the DOCSIS Security Specification.')
class DocsCvcCaCertificateChain(TextualConvention, OctetString):
    description = 'A degenerate PKCS7 signedData structure that contains the CVC and the CVC CA certificate chain in the certificates field.'
    status = 'current'
    displayHint = '*'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8192)

docsSecMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1))
docsSecCmtsServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 1))
docsSecCmtsServerCfgTftpOptions = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 1, 1), Bits().clone(namedValues=NamedValues(("hwAddr", 0), ("netAddr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsServerCfgTftpOptions.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, MdCfg Object Section in the Media Access Control (MAC) Requirements Annex.')
if mibBuilder.loadTexts: docsSecCmtsServerCfgTftpOptions.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsServerCfgTftpOptions.setDescription("This attribute instructs the CMTS to insert the source IP address and/or MAC address of received TFTP packets into the TFTP option fields before forwarding the packets to the Config File server. This attribute is only applicable when the TftpProxyEnabled attribute of the MdCfg object is 'true'.")
docsSecCmtsServerCfgConfigFileLearningEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsServerCfgConfigFileLearningEnable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, MdCfg Object Section in the Media Access Control (MAC) Requirements Annex. DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, Secure Provisioning Section. DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804.')
if mibBuilder.loadTexts: docsSecCmtsServerCfgConfigFileLearningEnable.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsServerCfgConfigFileLearningEnable.setDescription("This attribute enables and disables Configuration File Learning functionality. If this attribute is set to 'true' the CMTS will respond with Authentication Failure in the REG-RSP message when there is a mismatch between learned config file parameters and REG-REQ parameters. If this attribute is set to 'false', the CMTS will not execute config file learning and mismatch check. This attribute is only applicable when the TftpProxyEnabled attribute of the MdCfg object is 'true'.")
docsSecCmtsEncrypt = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 2))
docsSecCmtsEncryptEncryptAlgPriority = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 2, 1), SnmpTagList().clone('aes128CbcMode des56CbcMode des40CbcMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsEncryptEncryptAlgPriority.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsEncryptEncryptAlgPriority.setDescription('This attribute allows for configuration of a prioritized list of encryption algorithms the CMTS will use when selecting the primary SAID encryption algorithm for a given CM. The CMTS selects the highest priority encryption algorithm from this list that the CM supports. By default the following encryption algorithms are listed from highest to lowest priority (left being the highest): 128 bit AES, 56 bit DES, 40 bit DES. An empty list indicates that the CMTS attempts to use the latest and robust encryption algorithm supported by the CM. The CMTS will ignore unknown values or unsupported algorithms.')
docsSecCmtsCmEaeExclusionTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 3), )
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionTable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, MdCfg Object Section in the Media Access Control (MAC) Requirements Annex. DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, Early Authentication And Encryption (EAE) Section.')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionTable.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionTable.setDescription('This object defines a list of CMs or CM groups to exclude from Early Authentication and Encryption (EAE). This object allows overrides to the value of EAE Control for individual CMs or group of CMs for purposes such as debugging. The CMTS supports a minimum of 30 instances of the CmtsCmEaeExclusion object. This object is only applicable when the EarlyAuthEncryptCtrl attribute of the MdCfg object is enabled. This object supports the creation and deletion of multiple instances.')
docsSecCmtsCmEaeExclusionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 3, 1), ).setIndexNames((0, "DOCS-SEC-MIB", "docsSecCmtsCmEaeExclusionId"))
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionEntry.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionEntry.setDescription('The conceptual row of docsSecCmtsCmEaeExclusion. The CMTS persists all instances of CmtsCmEaeExclusion across reinitializations.')
docsSecCmtsCmEaeExclusionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionId.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionId.setDescription('This key uniquely identifies the exclusion MAC address rule.')
docsSecCmtsCmEaeExclusionMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 3, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionMacAddr.setDescription('This attribute identifies the CM MAC address. A match is made when a CM MAC address bitwise ANDed with the MacAddrMask attribute equals the value of this attribute.')
docsSecCmtsCmEaeExclusionMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 3, 1, 3), MacAddress().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionMacAddrMask.setDescription('This attribute identifies the CM MAC address mask and is used with the MacAddr attribute.')
docsSecCmtsCmEaeExclusionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmEaeExclusionRowStatus.setDescription('Controls and reflects the status of rows in this table. There is no restriction on changing values in a row of this table while the row is active.')
docsSecCmtsSavControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 4))
docsSecCmtsSavControlCmAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 4, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsSavControlCmAuthEnable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, MdCfg Object Section in the Media Access Control (MAC) Requirements Annex.')
if mibBuilder.loadTexts: docsSecCmtsSavControlCmAuthEnable.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsSavControlCmAuthEnable.setDescription("This attribute enables or disables Source Address Verification (SAV) for CM configured policies in the SavCmAuth object. If this attribute is set to 'false', the CM configured policies in the SavCmAuth object are ignored. This attribute is only applicable when the SrcAddrVerificationEnabled attribute of the MdCfg object is 'true'.")
docsSecSavCmAuthTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 5), )
if mibBuilder.loadTexts: docsSecSavCmAuthTable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I01-061207, MdCfg Object Section in the Media Access Control (MAC) Requirements Annex. DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, Secure Provisioning Section. DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsSecSavCmAuthTable.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCmAuthTable.setDescription("This object defines a read-only set of SAV policies associated with a CM that the CMTS will use in addition to the CMTS verification of an operator assigned IP Address being associated with a CM. When the CMTS has not resolved a source address of a CM CPE, the CMTS verifies if the CM CPE is authorized to pass traffic based on this object. These object policies include a list of subnet prefixes (defined in the SavStaticList object) or a SAV Group Name that could reference a CMTS configured list of subnet prefixes (defined in SavCfgList object) or vendor-specific policies. The CMTS populates the attributes of this object for a CM from that CM's config file. This object is only applicable when the SrcAddrVerificationEnabled attribute of the MdCfg object is 'true' and the CmAuthEnable attribute of the CmtsSavCtrl object is 'true'. The CMTS is not required to persist instances of this object across reinitializations.")
docsSecSavCmAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 5, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"))
if mibBuilder.loadTexts: docsSecSavCmAuthEntry.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCmAuthEntry.setDescription('The conceptual row of docsSecSavCmAuth.')
docsSecSavCmAuthGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 5, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecSavCmAuthGrpName.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsSecSavCmAuthGrpName.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCmAuthGrpName.setDescription('This attribute references the Name attribute of the SavCfgList object of a CM. If the CM signaled group name is not configured in the CMTS, the CMTS ignores this attribute value for the purpose of Source Address Verification. The CMTS must allow the modification of the GrpName object and use the updated SAV rules for newly discovered CPEs from CMs. When a source IP address is claimed by two CMs (e.g., detected as duplicated), the CMTS must use the current SAV rules defined for both CMs in case the SAV GrpName rules may have been updated. In the case of a persisting conflict, it is up to vendor-implementation to decide what CM should hold the SAV authorization. The zero-length string indicates that no SAV Group was signaled by the CM. The zero-length value or a non-existing reference in the SavCfgList object means the SavCfgListName is ignored for the purpose of SAV.')
docsSecSavCmAuthStaticPrefixListId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecSavCmAuthStaticPrefixListId.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCmAuthStaticPrefixListId.setDescription('This attribute identifies the reference to a CMTS created subnet prefix list based on the CM signaled static prefix list TLV elements. The CMTS may reuse this attribute value to reference more than one CM when those CMs have signaled the same subnet prefix list to the CMTS. The value zero indicates that no SAV static prefix encodings were signaled by the CM.')
docsSecSavCfgListTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6), )
if mibBuilder.loadTexts: docsSecSavCfgListTable.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListTable.setDescription('This object defines the CMTS configured subnet prefix extension to the SavCmAuth object. This object supports the creation and deletion of multiple instances. Creation of a new instance of this object requires the PrefixAddrType and PrefixAddr attributes to be set.')
docsSecSavCfgListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1), ).setIndexNames((0, "DOCS-SEC-MIB", "docsSecSavCfgListName"), (0, "DOCS-SEC-MIB", "docsSecSavCfgListRuleId"))
if mibBuilder.loadTexts: docsSecSavCfgListEntry.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListEntry.setDescription('The conceptual row of docsSecSavCfgList. The CMTS persists all instances of SavCfgList across reinitializations.')
docsSecSavCfgListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: docsSecSavCfgListName.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListName.setDescription('This attribute is the key that identifies the instance of the SavCmAuth object to which this object extension belongs.')
docsSecSavCfgListRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsSecSavCfgListRuleId.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListRuleId.setDescription('This attribute is the key that identifies a particular subnet prefix rule of an instance of this object.')
docsSecSavCfgListPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecSavCfgListPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListPrefixAddrType.setDescription('This attribute identifies the IP address type of this subnet prefix rule.')
docsSecSavCfgListPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecSavCfgListPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListPrefixAddr.setDescription('This attribute corresponds to the IP address of this subnet prefix rule in accordance to the PrefixAddrType attribute.')
docsSecSavCfgListPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecSavCfgListPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListPrefixLen.setDescription('This attribute defines the length of the subnet prefix to be matched by this rule.')
docsSecSavCfgListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecSavCfgListRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsSecSavCfgListRowStatus.setDescription('The row creation control of this conceptual row. An entry in this table can be set to active only when the following attributes are correctly assigned: PrefixAddrType PrefixAddress There are no restrictions to modify or delete entries in this table.')
docsSecSavStaticListTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7), )
if mibBuilder.loadTexts: docsSecSavStaticListTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsSecSavStaticListTable.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListTable.setDescription('This object defines a subnet prefix extension to the SavCmAuth object based on CM statically signaled subnet prefixes to the CMTS. When a CM signals to the CMTS static subnet prefixes, the CMTS must create a List Id to be referenced by the CM in the SavCmAuth StaticPrefixListId attribute, or the CMTS may reference an existing List Id associated to previously registered CMs in case of those subnet prefixes associated with the List Id match the ones signaled by the CM.')
docsSecSavStaticListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7, 1), ).setIndexNames((0, "DOCS-SEC-MIB", "docsSecSavStaticListId"), (0, "DOCS-SEC-MIB", "docsSecSavStaticListRuleId"))
if mibBuilder.loadTexts: docsSecSavStaticListEntry.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListEntry.setDescription('The conceptual row of docsSecSavStaticList. The CMTS may persist instances of this object across reinitializations.')
docsSecSavStaticListId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsSecSavStaticListId.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListId.setDescription('This key uniquely identifies the index that groups multiple subnet prefix rules. The CMTS assigns this value per CM or may reuse it among multiple CMs that share the same list of subnet prefixes.')
docsSecSavStaticListRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsSecSavStaticListRuleId.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListRuleId.setDescription('This key identifies a particular static subnet prefix rule of an instance of this object.')
docsSecSavStaticListPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecSavStaticListPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListPrefixAddrType.setDescription('This attribute identifies the IP address type of this subnet prefix rule.')
docsSecSavStaticListPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecSavStaticListPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListPrefixAddr.setDescription('This attribute corresponds to the IP address of this subnet prefix rule in accordance to the PrefixAddrType attribute.')
docsSecSavStaticListPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 7, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecSavStaticListPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsSecSavStaticListPrefixLen.setDescription('This attribute defines the length of the subnet prefix to be matched by this rule.')
docsSecCmtsCmSavStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 8), )
if mibBuilder.loadTexts: docsSecCmtsCmSavStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmSavStatsTable.setDescription('This object provides a read-only list of SAV counters for different service theft indications.')
docsSecCmtsCmSavStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 8, 1), )
docsIf3CmtsCmRegStatusEntry.registerAugmentions(("DOCS-SEC-MIB", "docsSecCmtsCmSavStatsEntry"))
docsSecCmtsCmSavStatsEntry.setIndexNames(*docsIf3CmtsCmRegStatusEntry.getIndexNames())
if mibBuilder.loadTexts: docsSecCmtsCmSavStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmSavStatsEntry.setDescription('The conceptual row of docsSecCmtsCmSavStats.')
docsSecCmtsCmSavStatsSavDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecCmtsCmSavStatsSavDiscards.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmSavStatsSavDiscards.setDescription('This attribute provides the information about number of dropped upstream packets due to SAV failure.')
docsSecCmtsCertificate = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 9))
docsSecCmtsCertificateCertRevocationMethod = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("crl", 2), ("ocsp", 3), ("crlAndOcsp", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsCertificateCertRevocationMethod.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCertificateCertRevocationMethod.setDescription("This attribute identifies which certificate revocation method is to be used by the CMTS to verify the cable modem certificate validity. The certificate revocation methods include Certification Revocation List (CRL) and Online Certificate Status Protocol (OCSP). The following options are available: The option 'none' indicates that the CMTS does not attempt to determine the revocation status of a certificate. The option 'crl' indicates the CMTS uses a Certificate Revocation List (CRL) as defined by the Url attribute of the CmtsCertRevocationList object. When the value of this attribute is changed to 'crl', it triggers the CMTS to retrieve the CRL from the URL specified by the Url attribute. If the value of this attribute is 'crl' when the CMTS starts up, it triggers the CMTS to retrieve the CRL from the URL specified by the Url attribute. The option 'ocsp' indicates the CMTS uses the Online Certificate Status Protocol (OCSP) as defined by the Url attribute of the CmtsOnlineCertStatusProtocol object. The option 'crlAndOcsp' indicates the CMTS uses both the CRL as defined by the Url attribute in the CmtsCertRevocationList object and OCSP as defined by the Url attribute in the CmtsOnlineCertStatusProtocol object. The CMTS persists the values of the CertRevocationMethod attribute across reinitializations.")
docsSecCmtsCertRevocationList = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 10))
docsSecCmtsCertRevocationListUrl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 10, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListUrl.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, BPI+ X.509 Certificate Profile and Management Section.')
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListUrl.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListUrl.setDescription('This attribute contains the URL from where the CMTS will retrieve the CRL. When this attribute is set to a URL value different from the current value, it triggers the CMTS to retrieve the CRL from that URL. If the value of this attribute is a zero-length string, the CMTS does not attempt to retrieve the CRL. The CMTS persists the value of Url across reinitializations.')
docsSecCmtsCertRevocationListRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 10, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 524160)).clone(10080)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListRefreshInterval.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, BPI+ X.509 Certificate Profile and Management Section.')
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListRefreshInterval.setDescription('This attribute contains the refresh interval for the CMTS to retrieve the CRL (referred to in the Url attribute) with the purpose of updating its Certificate Revocation List. This attribute is meaningful if the tbsCertList.nextUpdate attribute does not exist in the last retrieved CRL, otherwise the value 0 is returned. The CMTS persists the value of RefreshInterval across reinitializations.')
docsSecCmtsCertRevocationListLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 10, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListLastUpdate.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCertRevocationListLastUpdate.setDescription("This attribute contains the last date and time when the CRL was retrieved by the CMTS. If the CRL has not been updated, then this variable shall have the value corresponding to January 1, year 0000, 00:00:00.0, which is encoded as (hex)'00 00 01 01 00 00 00 00'.")
docsSecCmtsOnlineCertStatusProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 11))
docsSecCmtsOnlineCertStatusProtocolUrl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 11, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsOnlineCertStatusProtocolUrl.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, BPI+ X.509 Certificate Profile and Management Section. RFC 2560.')
if mibBuilder.loadTexts: docsSecCmtsOnlineCertStatusProtocolUrl.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsOnlineCertStatusProtocolUrl.setDescription('This attribute contains the URL string to retrieve OCSP information. If the value of this attribute is a zero-length string, the CMTS does not attempt to request the status of a CM certificate. The CMTS persists the value of Url across reinitializations.')
docsSecCmtsOnlineCertStatusProtocolSignatureBypass = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 11, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsSecCmtsOnlineCertStatusProtocolSignatureBypass.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I01-060804, BPI+ X.509 Certificate Profile and Management Section. RFC 2560.')
if mibBuilder.loadTexts: docsSecCmtsOnlineCertStatusProtocolSignatureBypass.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsOnlineCertStatusProtocolSignatureBypass.setDescription('This attribute enables or disables signature checking on OCSP response messages. The CMTS persists the value of SignatureBypass across reinitializations.')
docsSecCmtsCmBpi2EnforceExclusionTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 12), )
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionTable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I11-100115, MdCfg Object Section in the Media Access Control (MAC) Requirements Annex. DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I12-100115, BPI+ Enforce Section.')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionTable.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionTable.setDescription('This object defines a list of CMs or CM groups to exclude from BPI+ enforcement policies configured within the CMTS. This object allows overrides to the value of BPI+ enforcement control for individual CMs or group of CMs for purposes such as debugging. The CMTS supports a minimum of 30 instances of the CmtsCmBpi2EnforceExclusion object. This object supports the creation and deletion of multiple instances.')
docsSecCmtsCmBpi2EnforceExclusionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 12, 1), ).setIndexNames((0, "DOCS-SEC-MIB", "docsSecCmtsCmBpi2EnforceExclusionId"))
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionEntry.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionEntry.setDescription('The conceptual row of docsSecCmtsCmBpi2EnforceExclusion. The CMTS persists all instances of CmtsCmBpi2EnforceExclusion across reinitializations.')
docsSecCmtsCmBpi2EnforceExclusionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionId.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionId.setDescription('This key uniquely identifies the exclusion MAC address rule.')
docsSecCmtsCmBpi2EnforceExclusionMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 12, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionMacAddr.setDescription('This attribute identifies the CM MAC address. A match is made when a CM MAC address bitwise ANDed with the MacAddrMask attribute equals the value of this attribute.')
docsSecCmtsCmBpi2EnforceExclusionMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 12, 1, 3), MacAddress().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionMacAddrMask.setDescription('This attribute identifies the CM MAC address mask and is used with the MacAddr attribute.')
docsSecCmtsCmBpi2EnforceExclusionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 1, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsSecCmtsCmBpi2EnforceExclusionRowStatus.setDescription('Controls and reflects the status of rows in this table. There is no restriction on changing values in a row of this table while the row is active.')
docsBpi2CodeUpdateCvcChain = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 10), DocsCvcCaCertificateChain()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CodeUpdateCvcChain.setReference('DOCSIS 3.1 Security Specification, CM-SP-SECv3.1-I02-150326, Secure Software Download Section')
if mibBuilder.loadTexts: docsBpi2CodeUpdateCvcChain.setStatus('deprecated')
if mibBuilder.loadTexts: docsBpi2CodeUpdateCvcChain.setDescription('The value of this object is a degenerate PKCS7 signedData structure that contains the CVC and the CVC CA certificate chain in the certificates field. Setting this object triggers the device to verify the CVC and update the cvcAccessStart values. The content of this object is then discarded. If the device is not enabled to upgrade codefiles, or if the CVC verification fails, the CVC will be rejected. Reading this object always returns the zero-length OCTET STRING.')
docsSecMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2))
docsSecMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2, 1))
docsSecMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2, 2))
docsSecCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2, 1, 1)).setObjects(("DOCS-SEC-MIB", "docsSecGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsSecCompliance = docsSecCompliance.setStatus('current')
if mibBuilder.loadTexts: docsSecCompliance.setDescription('The compliance statement for CMTSs that implement the DOCSIS Security MIB.')
docsSecCmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2, 1, 2)).setObjects(("DOCS-SEC-MIB", "docsSecCmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsSecCmCompliance = docsSecCmCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: docsSecCmCompliance.setDescription('The compliance statement for CMs that implement the DOCSIS Security MIB.')
docsSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2, 2, 1)).setObjects(("DOCS-SEC-MIB", "docsSecCmtsCertRevocationListUrl"), ("DOCS-SEC-MIB", "docsSecCmtsCertRevocationListRefreshInterval"), ("DOCS-SEC-MIB", "docsSecCmtsCertRevocationListLastUpdate"), ("DOCS-SEC-MIB", "docsSecCmtsOnlineCertStatusProtocolUrl"), ("DOCS-SEC-MIB", "docsSecCmtsOnlineCertStatusProtocolSignatureBypass"), ("DOCS-SEC-MIB", "docsSecCmtsServerCfgTftpOptions"), ("DOCS-SEC-MIB", "docsSecCmtsServerCfgConfigFileLearningEnable"), ("DOCS-SEC-MIB", "docsSecCmtsEncryptEncryptAlgPriority"), ("DOCS-SEC-MIB", "docsSecCmtsSavControlCmAuthEnable"), ("DOCS-SEC-MIB", "docsSecCmtsCmEaeExclusionMacAddr"), ("DOCS-SEC-MIB", "docsSecCmtsCmEaeExclusionMacAddrMask"), ("DOCS-SEC-MIB", "docsSecCmtsCmEaeExclusionRowStatus"), ("DOCS-SEC-MIB", "docsSecSavCmAuthGrpName"), ("DOCS-SEC-MIB", "docsSecSavCmAuthStaticPrefixListId"), ("DOCS-SEC-MIB", "docsSecSavCfgListPrefixAddrType"), ("DOCS-SEC-MIB", "docsSecSavCfgListPrefixAddr"), ("DOCS-SEC-MIB", "docsSecSavCfgListPrefixLen"), ("DOCS-SEC-MIB", "docsSecSavCfgListRowStatus"), ("DOCS-SEC-MIB", "docsSecSavStaticListPrefixAddrType"), ("DOCS-SEC-MIB", "docsSecSavStaticListPrefixAddr"), ("DOCS-SEC-MIB", "docsSecSavStaticListPrefixLen"), ("DOCS-SEC-MIB", "docsSecCmtsCmSavStatsSavDiscards"), ("DOCS-SEC-MIB", "docsSecCmtsCertificateCertRevocationMethod"), ("DOCS-SEC-MIB", "docsSecCmtsCmBpi2EnforceExclusionMacAddr"), ("DOCS-SEC-MIB", "docsSecCmtsCmBpi2EnforceExclusionMacAddrMask"), ("DOCS-SEC-MIB", "docsSecCmtsCmBpi2EnforceExclusionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsSecGroup = docsSecGroup.setStatus('current')
if mibBuilder.loadTexts: docsSecGroup.setDescription('Group of objects implemented in the CMTS.')
docsSecCmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 11, 2, 2, 2)).setObjects(("DOCS-SEC-MIB", "docsBpi2CodeUpdateCvcChain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsSecCmGroup = docsSecCmGroup.setStatus('deprecated')
if mibBuilder.loadTexts: docsSecCmGroup.setDescription('Group of objects implemented in the CM.')
mibBuilder.exportSymbols("DOCS-SEC-MIB", docsSecSavCmAuthTable=docsSecSavCmAuthTable, docsSecCmtsCmEaeExclusionId=docsSecCmtsCmEaeExclusionId, docsSecSavStaticListRuleId=docsSecSavStaticListRuleId, docsSecMibCompliances=docsSecMibCompliances, docsSecMibGroups=docsSecMibGroups, docsSecCmtsCmSavStatsTable=docsSecCmtsCmSavStatsTable, docsSecSavCfgListRowStatus=docsSecSavCfgListRowStatus, docsSecCmtsSavControlCmAuthEnable=docsSecCmtsSavControlCmAuthEnable, docsSecCmtsCmBpi2EnforceExclusionRowStatus=docsSecCmtsCmBpi2EnforceExclusionRowStatus, docsSecSavCmAuthEntry=docsSecSavCmAuthEntry, DocsCvcCaCertificateChain=DocsCvcCaCertificateChain, docsSecCmtsOnlineCertStatusProtocolSignatureBypass=docsSecCmtsOnlineCertStatusProtocolSignatureBypass, docsSecCmtsCertificateCertRevocationMethod=docsSecCmtsCertificateCertRevocationMethod, docsSecCmCompliance=docsSecCmCompliance, docsSecCmtsCmEaeExclusionRowStatus=docsSecCmtsCmEaeExclusionRowStatus, docsSecMib=docsSecMib, docsSecCmtsServerCfgTftpOptions=docsSecCmtsServerCfgTftpOptions, docsSecSavCfgListEntry=docsSecSavCfgListEntry, docsSecCmtsCmSavStatsEntry=docsSecCmtsCmSavStatsEntry, docsSecCmtsCertRevocationList=docsSecCmtsCertRevocationList, docsSecCmGroup=docsSecCmGroup, docsSecCmtsCertificate=docsSecCmtsCertificate, docsSecCmtsServerCfg=docsSecCmtsServerCfg, docsSecSavStaticListEntry=docsSecSavStaticListEntry, docsSecCmtsCertRevocationListRefreshInterval=docsSecCmtsCertRevocationListRefreshInterval, docsSecCmtsOnlineCertStatusProtocolUrl=docsSecCmtsOnlineCertStatusProtocolUrl, docsSecCmtsCmBpi2EnforceExclusionTable=docsSecCmtsCmBpi2EnforceExclusionTable, docsBpi2CodeUpdateCvcChain=docsBpi2CodeUpdateCvcChain, docsSecSavStaticListPrefixAddr=docsSecSavStaticListPrefixAddr, docsSecSavCfgListTable=docsSecSavCfgListTable, docsSecCmtsSavControl=docsSecCmtsSavControl, docsSecCmtsCmSavStatsSavDiscards=docsSecCmtsCmSavStatsSavDiscards, docsSecSavStaticListPrefixLen=docsSecSavStaticListPrefixLen, docsSecSavCfgListPrefixAddrType=docsSecSavCfgListPrefixAddrType, docsSecSavCfgListPrefixAddr=docsSecSavCfgListPrefixAddr, docsSecCmtsEncryptEncryptAlgPriority=docsSecCmtsEncryptEncryptAlgPriority, docsSecCmtsCmEaeExclusionMacAddr=docsSecCmtsCmEaeExclusionMacAddr, docsSecCmtsCmBpi2EnforceExclusionEntry=docsSecCmtsCmBpi2EnforceExclusionEntry, docsSecCmtsEncrypt=docsSecCmtsEncrypt, docsSecCmtsCertRevocationListUrl=docsSecCmtsCertRevocationListUrl, docsSecCmtsCertRevocationListLastUpdate=docsSecCmtsCertRevocationListLastUpdate, docsSecSavStaticListTable=docsSecSavStaticListTable, docsSecCmtsCmEaeExclusionEntry=docsSecCmtsCmEaeExclusionEntry, docsSecSavCmAuthStaticPrefixListId=docsSecSavCmAuthStaticPrefixListId, docsSecCmtsOnlineCertStatusProtocol=docsSecCmtsOnlineCertStatusProtocol, docsSecCmtsCmBpi2EnforceExclusionId=docsSecCmtsCmBpi2EnforceExclusionId, docsSecCmtsServerCfgConfigFileLearningEnable=docsSecCmtsServerCfgConfigFileLearningEnable, docsSecGroup=docsSecGroup, docsSecCmtsCmBpi2EnforceExclusionMacAddr=docsSecCmtsCmBpi2EnforceExclusionMacAddr, PYSNMP_MODULE_ID=docsSecMib, docsSecSavStaticListId=docsSecSavStaticListId, docsSecSavCfgListPrefixLen=docsSecSavCfgListPrefixLen, docsSecCompliance=docsSecCompliance, docsSecSavCmAuthGrpName=docsSecSavCmAuthGrpName, docsSecMibObjects=docsSecMibObjects, docsSecSavCfgListRuleId=docsSecSavCfgListRuleId, docsSecSavStaticListPrefixAddrType=docsSecSavStaticListPrefixAddrType, docsSecMibConformance=docsSecMibConformance, docsSecSavCfgListName=docsSecSavCfgListName, docsSecCmtsCmEaeExclusionTable=docsSecCmtsCmEaeExclusionTable, docsSecCmtsCmEaeExclusionMacAddrMask=docsSecCmtsCmEaeExclusionMacAddrMask, docsSecCmtsCmBpi2EnforceExclusionMacAddrMask=docsSecCmtsCmBpi2EnforceExclusionMacAddrMask)
