#
# PySNMP MIB module HH3C-RSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, ModuleIdentity, TimeTicks, ObjectIdentity, NotificationType, iso, Bits, Counter32, Unsigned32, MibIdentifier, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "NotificationType", "iso", "Bits", "Counter32", "Unsigned32", "MibIdentifier", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "DateAndTime")
hh3cRSA = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 23))
hh3cRSA.setRevisions(('2004-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cRSA.setRevisionsDescriptions(('The initial revision of RSA module.',))
if mibBuilder.loadTexts: hh3cRSA.setLastUpdated('200410100000Z')
if mibBuilder.loadTexts: hh3cRSA.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cRSA.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cRSA.setDescription('The HH3C-RSA-MIB contains objects to Manage RSA configuration.')
class RSAKeyErrorCode(TextualConvention, Integer32):
    description = 'Indicates the reason that SSH peer public key fails to config or that SSH local key pair fails to create/refresh/destroy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("rsaSuccess", 1), ("rsaFailure", 2), ("rsaErrNoMemory", 3), ("rsaErrKeyNotReplaced", 4), ("rsaErrKeyBackup", 5), ("rsaErrKeySaved", 6), ("rsaErrKeyGenerate", 7), ("rsaErrKeyDestroy", 8), ("rsaErrHostEncKeyBackup", 9), ("rsaErrHostEncKeySave", 10), ("rsaErrHostEncKeyGenerate", 11), ("rsaErrHostEncKeyDestroy", 12), ("rsaErrHostSigKeyBackup", 13), ("rsaErrHostSigKeySave", 14), ("rsaErrHostSigKeyGenerate", 15), ("rsaErrHostSigKeyDestroy", 16), ("rsaErrServerKeyBackup", 17), ("rsaErrServerKeySave", 18), ("rsaErrServerKeyGenerate", 19), ("rsaErrServerKeyDestroy", 20), ("rsaErrPeerKeyNotReplaced", 21), ("rsaErrPeerKeyNumArriveMax", 22), ("rsaErrPeerKeyNotRemoved", 23), ("rsaErrPeerKeyNotExist", 24), ("rsaStatusKeyExist", 25), ("rsaStatusKeyNotExist", 26), ("rsaStatusKeyInvalid", 27), ("rsaStatusHostEncKeyExist", 28), ("rsaStatusHostEncKeyNotExist", 29), ("rsaStatusHostEncKeyInvalid", 30), ("rsaStatusHostSigKeyExist", 31), ("rsaStatusHostSigKeyNotExist", 32), ("rsaStatusHostSigKeyInvalid", 33), ("rsaStatusServerKeyExist", 34), ("rsaStatusServerKeyNotExist", 35), ("rsaStatusServerKeyInvalid", 36))

hh3cRSAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1))
hh3cRSAPeerPublicKeyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1), )
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyTable.setDescription('The (conceptual) RSA Peer Public Key Table')
hh3cRSAPeerPublicKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1, 1), ).setIndexNames((0, "HH3C-RSA-MIB", "hh3cRSAPeerPublicKeyName"))
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyEntry.setDescription('An entry (conceptual row) in the RSA Peer Public Key Table.')
hh3cRSAPeerPublicKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyName.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyName.setDescription('The RSA peer public key name.')
hh3cRSAPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRSAPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerIpAddress.setDescription('Indicates the IP Address of RSA Peer machine.')
hh3cRSAPeerFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRSAPeerFQDN.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerFQDN.setDescription('The Full Qualified Domain Name of RSA Peer Machine')
hh3cRSAPeerPublicKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyCode.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyCode.setDescription('The code of RSA peer public key.')
hh3cRSAPeerPublicKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerPublicKeyStatus.setDescription('The status of this RSA peer public key entry. Support Active Status and CreateAndGo and Destroy Operation ')
hh3cRSALocalKeyPairTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2), )
if mibBuilder.loadTexts: hh3cRSALocalKeyPairTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyPairTable.setDescription('The (conceptual)RSA local Key Pair Table.')
hh3cRSALocalKeyPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1), ).setIndexNames((0, "HH3C-RSA-MIB", "hh3cRSALocalKeyIndex"))
if mibBuilder.loadTexts: hh3cRSALocalKeyPairEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyPairEntry.setDescription('An entry (conceptual row) in the RSA local Key Pair Table.')
hh3cRSALocalKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hh3cRSALocalKeyIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyIndex.setDescription('The hh3cRSALocalKeyPairTable Table can only exist one entry at most.')
hh3cRSALocalHostKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRSALocalHostKeyName.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalHostKeyName.setDescription("Indicates RSA Host local public key name.Its value is composed of systemname, a underscore and the string of 'Host'")
hh3cRSALocalHostKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRSALocalHostKeyCode.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalHostKeyCode.setDescription('Indicates the code of RSA Host local pkey that the length is between 512 and 2048 bits.')
hh3cRSALocalHostKeyCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRSALocalHostKeyCreatedTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalHostKeyCreatedTime.setDescription('Indicates the created time of RSA local Host key.')
hh3cRSALocalServerKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRSALocalServerKeyName.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalServerKeyName.setDescription("Indicates RSA Host local public key name.Its value is composed of systemname, a underscore and the string of 'Server'")
hh3cRSALocalServerKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRSALocalServerKeyCode.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalServerKeyCode.setDescription('Indicates the code of RSA Host local pkey that the length is between 512 and 2048 bits.')
hh3cRSALocalServerKeyCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRSALocalServerKeyCreatedTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalServerKeyCreatedTime.setDescription('Indicates the created time of RSA local Host key.')
hh3cRSALocalKeyPairBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRSALocalKeyPairBits.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyPairBits.setDescription('The bits of RSA local key pair, ranging between 512 and 2048. By default, the value is 512.')
hh3cRSALocalKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRSALocalKeyStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyStatus.setDescription('The status column used for creating, deleting instances of the columnar objects in the hh3cRSALocalKeyPairTable table.')
hh3cRSAPeerKeyConfigFailReason = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 3), RSAKeyErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRSAPeerKeyConfigFailReason.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerKeyConfigFailReason.setDescription('The reason that RSA peer public key fails to config.')
hh3cRSALocalKeyFailReason = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 23, 1, 4), RSAKeyErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRSALocalKeyFailReason.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyFailReason.setDescription('The reason that RSA local key pair fails to create, refresh and destroy.')
hh3cRSANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 23, 2))
hh3cRSALocalKeyPairOpeFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 23, 2, 1)).setObjects(("HH3C-RSA-MIB", "hh3cRSALocalKeyFailReason"))
if mibBuilder.loadTexts: hh3cRSALocalKeyPairOpeFail.setStatus('current')
if mibBuilder.loadTexts: hh3cRSALocalKeyPairOpeFail.setDescription('The trap is generated while the RSA local key pair fails to create, refresh and destory.')
hh3cRSAPeerKeyConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 23, 2, 2)).setObjects(("HH3C-RSA-MIB", "hh3cRSAPeerKeyConfigFailReason"))
if mibBuilder.loadTexts: hh3cRSAPeerKeyConfigFail.setStatus('current')
if mibBuilder.loadTexts: hh3cRSAPeerKeyConfigFail.setDescription('The trap is generated while the RSA peer public key fails to configure.')
mibBuilder.exportSymbols("HH3C-RSA-MIB", hh3cRSANotifications=hh3cRSANotifications, hh3cRSAPeerKeyConfigFail=hh3cRSAPeerKeyConfigFail, PYSNMP_MODULE_ID=hh3cRSA, hh3cRSAPeerPublicKeyName=hh3cRSAPeerPublicKeyName, hh3cRSALocalHostKeyName=hh3cRSALocalHostKeyName, hh3cRSALocalServerKeyCreatedTime=hh3cRSALocalServerKeyCreatedTime, hh3cRSALocalServerKeyName=hh3cRSALocalServerKeyName, hh3cRSAPeerPublicKeyCode=hh3cRSAPeerPublicKeyCode, hh3cRSAPeerPublicKeyEntry=hh3cRSAPeerPublicKeyEntry, hh3cRSALocalHostKeyCode=hh3cRSALocalHostKeyCode, hh3cRSAPeerKeyConfigFailReason=hh3cRSAPeerKeyConfigFailReason, hh3cRSA=hh3cRSA, hh3cRSAPeerFQDN=hh3cRSAPeerFQDN, hh3cRSALocalKeyIndex=hh3cRSALocalKeyIndex, hh3cRSALocalKeyPairBits=hh3cRSALocalKeyPairBits, hh3cRSAPeerPublicKeyTable=hh3cRSAPeerPublicKeyTable, hh3cRSALocalKeyFailReason=hh3cRSALocalKeyFailReason, RSAKeyErrorCode=RSAKeyErrorCode, hh3cRSALocalKeyPairTable=hh3cRSALocalKeyPairTable, hh3cRSALocalKeyStatus=hh3cRSALocalKeyStatus, hh3cRSAPeerPublicKeyStatus=hh3cRSAPeerPublicKeyStatus, hh3cRSALocalKeyPairEntry=hh3cRSALocalKeyPairEntry, hh3cRSALocalKeyPairOpeFail=hh3cRSALocalKeyPairOpeFail, hh3cRSAMIBObjects=hh3cRSAMIBObjects, hh3cRSALocalHostKeyCreatedTime=hh3cRSALocalHostKeyCreatedTime, hh3cRSALocalServerKeyCode=hh3cRSALocalServerKeyCode, hh3cRSAPeerIpAddress=hh3cRSAPeerIpAddress)
