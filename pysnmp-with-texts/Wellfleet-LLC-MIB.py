#
# PySNMP MIB module Wellfleet-LLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-LLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, Gauge32, IpAddress, Counter64, ModuleIdentity, MibIdentifier, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Gauge32", "IpAddress", "Counter64", "ModuleIdentity", "MibIdentifier", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfLlcGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfLlcGroup")
wfLlc = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 1))
wfLlcBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcBaseDelete.setDescription('- Create/Delete parameter. Default is created. - Users perform an SNMP SET operation on this - object in order to create/delete LLC. ')
wfLlcBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcBaseDisable.setDescription('- Enable/Disable parameter. Default is disabled. - Users perform an SNMP SET operation on this - object in order to enable/disable LLC. ')
wfLlcBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcBaseState.setDescription('- The current state of LLC service')
wfLlcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2), )
if mibBuilder.loadTexts: wfLlcInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceTable.setDescription('A table that contains information about every interface that is associated with this LLC')
wfLlcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1), ).setIndexNames((0, "Wellfleet-LLC-MIB", "wfLlcInterfaceCircuit"))
if mibBuilder.loadTexts: wfLlcInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceEntry.setDescription('An entry in wfLlcInterface.')
wfLlcInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceDelete.setDescription('- Create/Delete parameter. Default is created. - Users perform an SNMP SET operation on this - object in order to create/delete an interface. ')
wfLlcInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceDisable.setDescription('- - Enable/Disable parameter. Default is enabled. - Users perform an SNMP SET operation on this - object in order to enable/disable an interface.')
wfLlcInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceState.setDescription('The current state of the interface.')
wfLlcInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInterfaceCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceCircuit.setDescription('The llc1 circuit of this interface.')
wfLlcInterfaceLlc2CctId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceLlc2CctId.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceLlc2CctId.setDescription('The llc2 circuit number assigned for this slot, line, and llc1 cct.')
wfLlc1InterfaceMaxUinfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5128)).clone(5128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc1InterfaceMaxUinfoSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc1InterfaceMaxUinfoSize.setDescription('- Maximum number of octets in UI PDU. ')
wfLlc1InterfaceMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc1InterfaceMaxRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc1InterfaceMaxRetry.setDescription('- Maximum retry limit. Specifeis the - maximum number of times that an XID - or TEST command PDU is sent following - the running out of the response timer - TResponse')
wfLlc1InterfaceTAckWait = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc1InterfaceTAckWait.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc1InterfaceTAckWait.setDescription('- The amount of time during which the - LLC shall expect to receive an - an acknowledgment to a sent unnumbered - XID or TEST command PDU - time in seconds')
wfLlc2InterfaceMaxInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5128)).clone(5128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceMaxInfoSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceMaxInfoSize.setDescription('- Max number of octets in an I Pdu ')
wfLlc2InterfaceK = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceK.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceK.setDescription('- The wfLlc2InterfaceK parameter is no longer used. - It is replaced by the send window (wfLlc2InterfaceTW) - and the receive window (wfLlc2InterfaceRW) parameters.')
wfLlc2InterfaceN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceN2.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceN2.setDescription('- Maximum number of transmissions. This specifies the - max number of times that a PDU is sent following the - elapse of the .. - acknowledgment timer - poll timer - reject timer')
wfLlc2InterfaceN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceN3.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceN3.setDescription('- Maximum number of received I PDUs before - sending a local acknowledgment to the - transmitter')
wfLlc2InterfaceTAckWait = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTAckWait.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTAckWait.setDescription('- Acknowledment timer for TX window - rotation - time in seconds')
wfLlc2InterfaceTReject = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTReject.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTReject.setDescription('- Reject Timer - time in seconds')
wfLlc2InterfaceTRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTRemoteBusy.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTRemoteBusy.setDescription('- busy state timer - time in seconds')
wfLlc2InterfaceTRspAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTRspAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTRspAck.setDescription('- Local response timer for remote TX - window rotation - response in seconds')
wfLlc2InterfaceTIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTIdle.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTIdle.setDescription('- Idle timer - in seconds')
wfLlc2InterfaceTPollCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTPollCycle.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTPollCycle.setDescription('- P/F bit cycle timer (link activity) - time in secs')
wfLlcInterfaceMaxNumOfSap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceMaxNumOfSap.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceMaxNumOfSap.setDescription('- maximum number of saps per LLC service - Max = 255 and Min = 4')
wfLlcInterfaceMaxNumOfLink = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 5000)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceMaxNumOfLink.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceMaxNumOfLink.setDescription('- Maximum number of end to end connections - per LLC service - Max = 5000 and Min = 4 Default:5000')
wfLlcInterfaceDupAddrCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceDupAddrCheck.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceDupAddrCheck.setDescription('- Flag to force duplicate address check - Default is DISABLED')
wfLlc2InterfaceRW = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceRW.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceRW.setDescription('- Maximum number of outstanding ( = unacknowledged) - receive I PDUs. This cannot exceed 127. ')
wfLlc2InterfaceTW = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceTW.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceTW.setDescription('- Maximum number of outstanding ( = unacknowledged) - transmit I PDUs. This cannot exceed 127. - This value acts as a default window size, when no other - window size has been agreed upon through - an XID3 exchange procedure.')
wfLlcInterfaceEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("tring", 2), ("csmacd", 3), ("srb", 4), ("fr", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceEncapsType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceEncapsType.setDescription('This indicates which encapsulation technique should be used by LLC. ')
wfLlcInterfaceSrbRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceSrbRingId.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceSrbRingId.setDescription('This indicates a ring number to be used by LLC if the encapsulation technique is SRB. It must be unique in the SRB network.')
wfLlcInterfaceFrVMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceFrVMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceFrVMask.setDescription('- LLC Frame Relay Virtual Mac Address Mask. - This Mask specifies the upper 2-4 bytes of the - destination mac address. The lower remaining - bytes specifies the DLCI to be used.')
wfLlc2InterfaceDynWin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2InterfaceDynWin.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2InterfaceDynWin.setDescription('- Enable/Disable dynamic window. The default is enabled.')
wfLlcInterfaceCurrentLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInterfaceCurrentLinks.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceCurrentLinks.setDescription('The number of links on this interface.')
wfLlcInterfaceHiWaterLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInterfaceHiWaterLinks.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceHiWaterLinks.setDescription('The highest number of links present at one time on this interface.')
wfLlcInterfaceHiWaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceHiWaterReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceHiWaterReset.setDescription('Setting to 2 (reset) sets HiWaterLinks to CurrentLinks.')
wfLlcInterfaceFrSapTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcInterfaceFrSapTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInterfaceFrSapTranslation.setDescription('Enables SMAC SSAP translation for FR to pass multiple SMACs over one VC')
wfLlcSapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 3), )
if mibBuilder.loadTexts: wfLlcSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcSapTable.setDescription('- llc sap table')
wfLlcSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 3, 1), ).setIndexNames((0, "Wellfleet-LLC-MIB", "wfLlcSapCircuit"), (0, "Wellfleet-LLC-MIB", "wfLlcSapValue"))
if mibBuilder.loadTexts: wfLlcSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcSapEntry.setDescription('An entry in wfLlcSapTable.')
wfLlcSapCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcSapCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcSapCircuit.setDescription('- The llc1 circuit that this sap is on')
wfLlcSapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcSapValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcSapValue.setDescription('- Sap Value')
wfLlcLinkTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4), )
if mibBuilder.loadTexts: wfLlcLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkTable.setDescription('- Link table, indexed by slot, circuit, da, sa, dsap, ssap')
wfLlcLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1), ).setIndexNames((0, "Wellfleet-LLC-MIB", "wfLlcLinkCircuit"), (0, "Wellfleet-LLC-MIB", "wfLlcLinkDestMadr"), (0, "Wellfleet-LLC-MIB", "wfLlcLinkSrcMadr"), (0, "Wellfleet-LLC-MIB", "wfLlcLinkDsap"), (0, "Wellfleet-LLC-MIB", "wfLlcLinkSsap"))
if mibBuilder.loadTexts: wfLlcLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkEntry.setDescription('An entry in wfLlcLinkTable.')
wfLlcLinkCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcLinkCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkCircuit.setDescription('- The llc1 circuit that this da/sa/dsap/ssap pair is on.')
wfLlcLinkDestMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcLinkDestMadr.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkDestMadr.setDescription('- Destination and source Mac addresses')
wfLlcLinkSrcMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcLinkSrcMadr.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkSrcMadr.setDescription('- source Mac address')
wfLlcLinkDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcLinkDsap.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkDsap.setDescription("- Destination and source sap's")
wfLlcLinkSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcLinkSsap.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLinkSsap.setDescription('- Source Sap ')
wfLlcInfoRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInfoRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInfoRxCnt.setDescription('- Counter for I Pdus rcvd ')
wfLlcInfoTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInfoTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInfoTxCnt.setDescription('- Counter for I Pdus sent ')
wfLlcInfoReXmitCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcInfoReXmitCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcInfoReXmitCnt.setDescription('- Counter for I Pdus re-xmitted')
wfLlcByteInfoRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcByteInfoRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcByteInfoRxCnt.setDescription('- Counter for unnnumbered information - Bytes rcvd')
wfLlcByteInfoTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcByteInfoTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcByteInfoTxCnt.setDescription('- Counter for unnnumbered information - Bytes sent')
wfLlcRrRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRrRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRrRxCnt.setDescription('- Counter for RR Pdus rcvd ')
wfLlcRrTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRrTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRrTxCnt.setDescription('- Counter for RR Pdus Xmted')
wfLlcRnrRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRnrRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRnrRxCnt.setDescription('- Counter for RNR Pdus rcvd ')
wfLlcRnrTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRnrTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRnrTxCnt.setDescription('- Counter for RNR Pdus sent ')
wfLlcRejRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRejRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRejRxCnt.setDescription('- Counter for REJ pdus rcvd')
wfLlcRejTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRejTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRejTxCnt.setDescription('- Counter for REJ pdus xmted')
wfLlcFrmrRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcFrmrRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrmrRxCnt.setDescription('- Counter for frame reject rcvd')
wfLlcFrmrTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcFrmrTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrmrTxCnt.setDescription('- Counter for frame reject sent')
wfLlcFlowDefersCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcFlowDefersCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFlowDefersCnt.setDescription('- Counter for the number of times LLC is unable - to xmit due to a percieved remote busy condition - or to lack of RX window space')
wfLlcWaitAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcWaitAckTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcWaitAckTimeouts.setDescription('- Counter for expiration of acknowledgment - timers')
wfLlcRejectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcRejectTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcRejectTimeouts.setDescription('- Counter for the expiration of reject - timeouts')
wfLlcPollCycleTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcPollCycleTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcPollCycleTimeouts.setDescription('- Counter for the expiration of P/F cycle timer')
wfLlcStateChangeCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcStateChangeCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcStateChangeCnt.setDescription('- Counter for number of LLC flow state changes')
wfLlcLastChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcLastChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcLastChangeReason.setDescription('- Counter for the most recent incrementing of the - flow state change counter ')
wfLlcCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcCurrentState.setDescription('- Current flow state of the LLC link station')
wfLlc2TrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8), )
if mibBuilder.loadTexts: wfLlc2TrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterTable.setDescription('LLC2 Traffic Filters')
wfLlc2TrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1), ).setIndexNames((0, "Wellfleet-LLC-MIB", "wfLlc2TrafficFilterCircuit"), (0, "Wellfleet-LLC-MIB", "wfLlc2TrafficFilterRuleNumber"), (0, "Wellfleet-LLC-MIB", "wfLlc2TrafficFilterFragment"))
if mibBuilder.loadTexts: wfLlc2TrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterEntry.setDescription('An entry in WfLLC2TrafficFilterTable.')
wfLlc2TrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2TrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfLlc2TrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2TrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfLlc2TrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlc2TrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfLlc2TrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlc2TrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfLlc2TrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2TrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterDefinition.setDescription('The filter rule definition.')
wfLlc2TrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlc2TrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterReserved.setDescription('Reserved field.')
wfLlc2TrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlc2TrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterCircuit.setDescription('The ID of the Bridge Circuit to which the filter is applied.')
wfLlc2TrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlc2TrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterRuleNumber.setDescription('ID for the rule.')
wfLlc2TrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlc2TrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfLlc2TrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 8, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlc2TrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlc2TrafficFilterName.setDescription('name of the rule number')
wfLlcDlciTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9), )
if mibBuilder.loadTexts: wfLlcDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciTable.setDescription("ljd: This table defines which DLCI's a LLC interface has access to and the appropriate mac address mappings.")
wfLlcDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9, 1), ).setIndexNames((0, "Wellfleet-LLC-MIB", "wfLlcDlciCct"), (0, "Wellfleet-LLC-MIB", "wfLlcDlciNum"))
if mibBuilder.loadTexts: wfLlcDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciEntry.setDescription('An entry in wfLlcDlciTable.')
wfLlcDlciDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcDlciDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a DLSw Local Device')
wfLlcDlciCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcDlciCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciCct.setDescription('The LLC interface circuit on which this mapping is configured.')
wfLlcDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciNum.setDescription('The dlci number for this mapping.')
wfLlcDlciLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcDlciLocalMac.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciLocalMac.setDescription('The Local MAC address of the end station to be mapped. In-coming requests on this DLCI will be mapped to the specified Local Mac address. Values are standard MSB Token Ring MAC addresses.')
wfLlcDlciRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 9, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcDlciRemoteMac.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcDlciRemoteMac.setDescription('The Remote MAC address mapping. Out-going requests specifing this mac address will be mapped to the DLCI. Values are standard MSB Token Ring MAC addresses.')
wfLlcFrSvcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10), )
if mibBuilder.loadTexts: wfLlcFrSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcTable.setDescription("ljd: This table defines which FrSvc's a LLC interface has access to and the appropriate mac address mappings.")
wfLlcFrSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1), ).setIndexNames((0, "Wellfleet-LLC-MIB", "wfLlcFrSvcCct"), (0, "Wellfleet-LLC-MIB", "wfLlcFrSvcMac"))
if mibBuilder.loadTexts: wfLlcFrSvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcEntry.setDescription('An entry in wfLlcFrSvcTable.')
wfLlcFrSvcDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcFrSvcDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a local or remote DNA to mac mapping')
wfLlcFrSvcCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcFrSvcCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcCct.setDescription('The LLC interface circuit on which this mapping is configured.')
wfLlcFrSvcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLlcFrSvcMac.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcMac.setDescription('The local or remote MAC address of the end station to be mapped. Values are standard MSB Token Ring MAC addresses.')
wfLlcFrSvcMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcFrSvcMappingType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcMappingType.setDescription('Specifies weather this is remote or local mapping.')
wfLlcFrSvcX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcFrSvcX121Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcX121Addr.setDescription('WAN address (X.121, E.164, etc.) used to register with FR to accept an incoming call if the mapping is local, or used to establish an SVC (initiate the call) to the configured number if the mapping is remote.')
wfLlcFrSvcSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcFrSvcSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcSubAddr.setDescription(' Subaddress of type NSAP (Q.931) further qualifies number ')
wfLlcFrSvcPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcFrSvcPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcPlan.setDescription(' Supported Q.931 4.3.8/4.3.10 numbering plans. Each plan is represented by the 4 least significant bits to align with the values stated in Q.931. ')
wfLlcFrSvcTypeOfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLlcFrSvcTypeOfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLlcFrSvcTypeOfNumber.setDescription(' Supported Q.931 4.3.8/4.3.10 types of number. Each type is represented by a value one greater than the values stated in Q.931. ')
mibBuilder.exportSymbols("Wellfleet-LLC-MIB", wfLlcInterfaceHiWaterReset=wfLlcInterfaceHiWaterReset, wfLlcFrmrRxCnt=wfLlcFrmrRxCnt, wfLlcDlciRemoteMac=wfLlcDlciRemoteMac, wfLlc2TrafficFilterEntry=wfLlc2TrafficFilterEntry, wfLlc2TrafficFilterCounter=wfLlc2TrafficFilterCounter, wfLlcInfoTxCnt=wfLlcInfoTxCnt, wfLlcDlciCct=wfLlcDlciCct, wfLlcInterfaceCircuit=wfLlcInterfaceCircuit, wfLlcInterfaceDelete=wfLlcInterfaceDelete, wfLlcSapTable=wfLlcSapTable, wfLlcInterfaceSrbRingId=wfLlcInterfaceSrbRingId, wfLlcPollCycleTimeouts=wfLlcPollCycleTimeouts, wfLlcBaseDelete=wfLlcBaseDelete, wfLlcFrSvcX121Addr=wfLlcFrSvcX121Addr, wfLlcLinkEntry=wfLlcLinkEntry, wfLlc1InterfaceMaxRetry=wfLlc1InterfaceMaxRetry, wfLlcFrSvcTypeOfNumber=wfLlcFrSvcTypeOfNumber, wfLlc2TrafficFilterCreate=wfLlc2TrafficFilterCreate, wfLlc2InterfaceTW=wfLlc2InterfaceTW, wfLlc=wfLlc, wfLlcLinkDestMadr=wfLlcLinkDestMadr, wfLlcDlciNum=wfLlcDlciNum, wfLlc2InterfaceTReject=wfLlc2InterfaceTReject, wfLlcSapEntry=wfLlcSapEntry, wfLlc2TrafficFilterStatus=wfLlc2TrafficFilterStatus, wfLlcFrSvcMac=wfLlcFrSvcMac, wfLlc2InterfaceK=wfLlc2InterfaceK, wfLlcLinkSrcMadr=wfLlcLinkSrcMadr, wfLlcFlowDefersCnt=wfLlcFlowDefersCnt, wfLlc2InterfaceTRemoteBusy=wfLlc2InterfaceTRemoteBusy, wfLlc2InterfaceTIdle=wfLlc2InterfaceTIdle, wfLlcRejectTimeouts=wfLlcRejectTimeouts, wfLlcInfoRxCnt=wfLlcInfoRxCnt, wfLlc2TrafficFilterFragment=wfLlc2TrafficFilterFragment, wfLlcInterfaceTable=wfLlcInterfaceTable, wfLlcDlciLocalMac=wfLlcDlciLocalMac, wfLlc2TrafficFilterReserved=wfLlc2TrafficFilterReserved, wfLlcFrSvcPlan=wfLlcFrSvcPlan, wfLlcInfoReXmitCnt=wfLlcInfoReXmitCnt, wfLlc2TrafficFilterName=wfLlc2TrafficFilterName, wfLlcLastChangeReason=wfLlcLastChangeReason, wfLlc1InterfaceMaxUinfoSize=wfLlc1InterfaceMaxUinfoSize, wfLlcFrmrTxCnt=wfLlcFrmrTxCnt, wfLlc2InterfaceTAckWait=wfLlc2InterfaceTAckWait, wfLlcRejRxCnt=wfLlcRejRxCnt, wfLlcRnrRxCnt=wfLlcRnrRxCnt, wfLlc2TrafficFilterTable=wfLlc2TrafficFilterTable, wfLlcStateChangeCnt=wfLlcStateChangeCnt, wfLlcBaseDisable=wfLlcBaseDisable, wfLlcWaitAckTimeouts=wfLlcWaitAckTimeouts, wfLlcInterfaceMaxNumOfLink=wfLlcInterfaceMaxNumOfLink, wfLlcInterfaceCurrentLinks=wfLlcInterfaceCurrentLinks, wfLlcInterfaceDupAddrCheck=wfLlcInterfaceDupAddrCheck, wfLlcRejTxCnt=wfLlcRejTxCnt, wfLlcDlciDelete=wfLlcDlciDelete, wfLlcLinkTable=wfLlcLinkTable, wfLlc2TrafficFilterRuleNumber=wfLlc2TrafficFilterRuleNumber, wfLlcInterfaceFrSapTranslation=wfLlcInterfaceFrSapTranslation, wfLlc2TrafficFilterEnable=wfLlc2TrafficFilterEnable, wfLlcInterfaceHiWaterLinks=wfLlcInterfaceHiWaterLinks, wfLlcFrSvcDelete=wfLlcFrSvcDelete, wfLlc2InterfaceRW=wfLlc2InterfaceRW, wfLlcByteInfoTxCnt=wfLlcByteInfoTxCnt, wfLlcLinkDsap=wfLlcLinkDsap, wfLlcFrSvcCct=wfLlcFrSvcCct, wfLlc1InterfaceTAckWait=wfLlc1InterfaceTAckWait, wfLlcInterfaceFrVMask=wfLlcInterfaceFrVMask, wfLlcCurrentState=wfLlcCurrentState, wfLlcInterfaceMaxNumOfSap=wfLlcInterfaceMaxNumOfSap, wfLlc2InterfaceTPollCycle=wfLlc2InterfaceTPollCycle, wfLlcLinkSsap=wfLlcLinkSsap, wfLlcInterfaceEntry=wfLlcInterfaceEntry, wfLlcRrRxCnt=wfLlcRrRxCnt, wfLlc2InterfaceTRspAck=wfLlc2InterfaceTRspAck, wfLlcLinkCircuit=wfLlcLinkCircuit, wfLlc2InterfaceMaxInfoSize=wfLlc2InterfaceMaxInfoSize, wfLlcInterfaceDisable=wfLlcInterfaceDisable, wfLlcInterfaceLlc2CctId=wfLlcInterfaceLlc2CctId, wfLlcSapCircuit=wfLlcSapCircuit, wfLlcInterfaceEncapsType=wfLlcInterfaceEncapsType, wfLlcSapValue=wfLlcSapValue, wfLlcFrSvcSubAddr=wfLlcFrSvcSubAddr, wfLlcDlciEntry=wfLlcDlciEntry, wfLlcRrTxCnt=wfLlcRrTxCnt, wfLlcByteInfoRxCnt=wfLlcByteInfoRxCnt, wfLlcFrSvcMappingType=wfLlcFrSvcMappingType, wfLlcRnrTxCnt=wfLlcRnrTxCnt, wfLlcInterfaceState=wfLlcInterfaceState, wfLlc2InterfaceDynWin=wfLlc2InterfaceDynWin, wfLlcBaseState=wfLlcBaseState, wfLlc2InterfaceN2=wfLlc2InterfaceN2, wfLlcFrSvcTable=wfLlcFrSvcTable, wfLlc2InterfaceN3=wfLlc2InterfaceN3, wfLlcFrSvcEntry=wfLlcFrSvcEntry, wfLlcDlciTable=wfLlcDlciTable, wfLlc2TrafficFilterDefinition=wfLlc2TrafficFilterDefinition, wfLlc2TrafficFilterCircuit=wfLlc2TrafficFilterCircuit)
