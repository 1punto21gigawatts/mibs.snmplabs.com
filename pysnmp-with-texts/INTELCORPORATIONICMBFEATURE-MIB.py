#
# PySNMP MIB module INTELCORPORATIONICMBFEATURE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONICMBFEATURE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, ObjectIdentity, Unsigned32, NotificationType, enterprises, Bits, MibIdentifier, Gauge32, iso, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "ObjectIdentity", "Unsigned32", "NotificationType", "enterprises", "Bits", "MibIdentifier", "Gauge32", "iso", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
platforms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
icmbFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components.This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this software.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this software.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this system.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this system.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date when this component was installed.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tIcmbChassisTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11), )
if mibBuilder.loadTexts: tIcmbChassisTable.setStatus('mandatory')
if mibBuilder.loadTexts: tIcmbChassisTable.setDescription('This table contains a row per ICMB remote chassis component.')
eIcmbChassisTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a11ChassisIndex"))
if mibBuilder.loadTexts: eIcmbChassisTable.setStatus('mandatory')
if mibBuilder.loadTexts: eIcmbChassisTable.setDescription('')
a11ChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a11ChassisIndex.setDescription('This is the index into the table')
a11ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ComponentId.setStatus('mandatory')
if mibBuilder.loadTexts: a11ComponentId.setDescription('This is the DMI component ID of a remote chassis component.')
a11ChassisAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vAvailable", 0), ("vShuttingDown", 1), ("vUnavailable", 2), ("vInitializing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a11ChassisAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: a11ChassisAvailable.setDescription('This attribute indicates whether the chassis represented by this row is currently visible on the ICMB.')
tIcmbControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12), )
if mibBuilder.loadTexts: tIcmbControl.setStatus('mandatory')
if mibBuilder.loadTexts: tIcmbControl.setDescription('Control of the ICMB feature')
eIcmbControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eIcmbControl.setStatus('mandatory')
if mibBuilder.loadTexts: eIcmbControl.setDescription('')
a12State = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12State.setStatus('mandatory')
if mibBuilder.loadTexts: a12State.setDescription('This attribute indicates whether the ICMB feature is enabled or not')
a12DiscoveryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12DiscoveryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: a12DiscoveryPeriod.setDescription('This is the period of ICMB discovery cycles, in seconds')
a12SdrReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12SdrReadState.setStatus('mandatory')
if mibBuilder.loadTexts: a12SdrReadState.setDescription('This attribute indicates whether the chassis SDR is used to populate the sensor tables')
a12AcceptIcmbCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12AcceptIcmbCommands.setStatus('mandatory')
if mibBuilder.loadTexts: a12AcceptIcmbCommands.setDescription('This attribute indicates whether this server will accept and execute incoming commands over the ICMB')
a12ReclaimResources = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12ReclaimResources.setStatus('mandatory')
if mibBuilder.loadTexts: a12ReclaimResources.setDescription('This attribute is used to reclaim resources for remote chassis that cannot be seen on theICMB bus.')
tIcmbMifMappingTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13), )
if mibBuilder.loadTexts: tIcmbMifMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: tIcmbMifMappingTable.setDescription('This table contains a row per ICMB remote chassis MIF file')
eIcmbMifMappingTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a13MapIndex"))
if mibBuilder.loadTexts: eIcmbMifMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: eIcmbMifMappingTable.setDescription('')
a13MapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13MapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a13MapIndex.setDescription('This is the indes into the table')
a13Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a13Manufacturer.setDescription('This is the manufacturer of the chassis this MIF file instrument ')
a13ProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13ProductName.setStatus('mandatory')
if mibBuilder.loadTexts: a13ProductName.setDescription('This is the Product Name of the chassis this MIF file instrument ')
a13ModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13ModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a13ModelNumber.setDescription('This is the Model Number of the chassis this MIF file instrument ')
a13MifFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13MifFilename.setStatus('mandatory')
if mibBuilder.loadTexts: a13MifFilename.setDescription('This is the filename path of the MIF file this row represents')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a1001MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibName.setDescription('The MIB name that defines this MIF')
a1001MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibOid.setDescription('The MIB Object Identifier that corresponds to this MIF')
a1001DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1001DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a1001DisableTrap.setDescription('This attribute can be changed to disable sending oftraps from this component')
tEifControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000), )
if mibBuilder.loadTexts: tEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: tEifControl.setDescription('Special control group for use with EIF')
eEifControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: eEifControl.setDescription('')
a2000Status = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCreatedOnly", 3), ("vConstructedOnly", 4), ("vFullyOperational", 5), ("vIdle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000Status.setStatus('mandatory')
if mibBuilder.loadTexts: a2000Status.setDescription('Current status of this component as set by EIF')
a2000DimContext = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 2), DmiOctetstring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000DimContext.setStatus('mandatory')
if mibBuilder.loadTexts: a2000DimContext.setDescription("Opaque data used by DIM objects to obtain their context informat on from some invocating source. It is assumed that the DIMs will be able to usefully parse the information in this attribute, as the 'mainline' DMI code in the CI makes no attempt to understand it.")
a2000PersistentDataWriteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000PersistentDataWriteDelay.setStatus('mandatory')
if mibBuilder.loadTexts: a2000PersistentDataWriteDelay.setDescription('Defines the timeout from an attribute set operation until the presistent write operation is invoked. If another set operation takes place during this period, the timeout timer is reset back to this value, so a persistent write operation will only take place after the specified period has elasped with no set operations. Timeout is specified in 1/10 second quantity. If set to zero, no persistent write operation will occur.')
a2000EifInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2000EifInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: a2000EifInterfaceName.setDescription('EIF Interface Name used to distinguish the component type this MIF file represents.')
tEifExtensionList = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001), )
if mibBuilder.loadTexts: tEifExtensionList.setStatus('mandatory')
if mibBuilder.loadTexts: tEifExtensionList.setDescription('A specific extension library specification')
eEifExtensionList = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a2001Index"))
if mibBuilder.loadTexts: eEifExtensionList.setStatus('mandatory')
if mibBuilder.loadTexts: eEifExtensionList.setDescription('')
a2001Index = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2001Index.setStatus('mandatory')
if mibBuilder.loadTexts: a2001Index.setDescription('row index')
a2001Filename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2001Filename.setStatus('mandatory')
if mibBuilder.loadTexts: a2001Filename.setDescription('name of extension library')
tEventGenerationForEifControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002), )
if mibBuilder.loadTexts: tEventGenerationForEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForEifControl.setDescription('')
eEventGenerationForEifControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a2002AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForEifControl.setDescription('')
a2002EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNoDimContextsCreated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventType.setDescription('The type of event that has occurred.')
a2002EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventSeverity.setDescription('The severity of this event.')
a2002IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a2002IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a2002IsEventState_based.setDescription('The value of this attribute determines whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Otherwise the Event is not state-based.')
a2002EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventStateKey.setDescription("A unique, single integer key into the Event State group if this is a state-based Event. If this is not a state-based Event then this attribute's value is not defined.")
a2002AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a2002AssociatedGroup.setDescription('The class name of the group that is associated with the events defined in this Event Generation group.')
a2002EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther1", 0), ("vUnknown1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a2002EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
trap1ForEifControl = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1) + (0,1)).setObjects(("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventType"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventSeverity"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002IsEventState_based"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventStateKey"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002AssociatedGroup"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventSystem"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventSubsystem"))
if mibBuilder.loadTexts: trap1ForEifControl.setDescription('No DIM Context created')
mibBuilder.exportSymbols("INTELCORPORATIONICMBFEATURE-MIB", tEifControl=tEifControl, a1001MibOid=a1001MibOid, dmtfGroups=dmtfGroups, trap1ForEifControl=trap1ForEifControl, DmiInteger=DmiInteger, a12AcceptIcmbCommands=a12AcceptIcmbCommands, a2002EventType=a2002EventType, a2002AssociatedGroup=a2002AssociatedGroup, server_products=server_products, DmiOctetstring=DmiOctetstring, tEventGenerationForEifControl=tEventGenerationForEifControl, a12State=a12State, a1Manufacturer=a1Manufacturer, tEifExtensionList=tEifExtensionList, a12ReclaimResources=a12ReclaimResources, eIcmbMifMappingTable=eIcmbMifMappingTable, products=products, a2002EventSubsystem=a2002EventSubsystem, a13ProductName=a13ProductName, DmiDisplaystring=DmiDisplaystring, a2000EifInterfaceName=a2000EifInterfaceName, tIcmbMifMappingTable=tIcmbMifMappingTable, a1Installation=a1Installation, icmbFeature=icmbFeature, a11ComponentId=a11ComponentId, a13MifFilename=a13MifFilename, a2001Filename=a2001Filename, eIcmbControl=eIcmbControl, a2002EventStateKey=a2002EventStateKey, eIcmbChassisTable=eIcmbChassisTable, a12DiscoveryPeriod=a12DiscoveryPeriod, tMiftomib=tMiftomib, a13Manufacturer=a13Manufacturer, a2002IsEventState_based=a2002IsEventState_based, a1Product=a1Product, a2001Index=a2001Index, intel=intel, eEifControl=eEifControl, a2000DimContext=a2000DimContext, a2002EventSystem=a2002EventSystem, a1Verify=a1Verify, tIcmbChassisTable=tIcmbChassisTable, a11ChassisIndex=a11ChassisIndex, tIcmbControl=tIcmbControl, a11ChassisAvailable=a11ChassisAvailable, a12SdrReadState=a12SdrReadState, a2000Status=a2000Status, a1Version=a1Version, eMiftomib=eMiftomib, a1001DisableTrap=a1001DisableTrap, eEifExtensionList=eEifExtensionList, DmiDateX=DmiDateX, a1SerialNumber=a1SerialNumber, a13MapIndex=a13MapIndex, a13ModelNumber=a13ModelNumber, eComponentid=eComponentid, tComponentid=tComponentid, eEventGenerationForEifControl=eEventGenerationForEifControl, DmiComponentIndex=DmiComponentIndex, a2000PersistentDataWriteDelay=a2000PersistentDataWriteDelay, platforms=platforms, a2002EventSeverity=a2002EventSeverity, a1001MibName=a1001MibName)
