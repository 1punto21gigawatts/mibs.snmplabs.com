#
# PySNMP MIB module HP-USER-AUTH (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-USER-AUTH
# Produced by pysmi-0.3.4 at Wed May  1 13:36:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
HpAutzUserRoleName, = mibBuilder.importSymbols("HP-AUTZ-MIB", "HpAutzUserRoleName")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, Gauge32, Unsigned32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, NotificationType, ObjectIdentity, ModuleIdentity, IpAddress, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Unsigned32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Bits", "MibIdentifier")
RowStatus, DateAndTime, TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
hpicfUsrAuthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19))
hpicfUsrAuthMIB.setRevisions(('2017-10-12 00:00', '2017-09-13 00:00', '2017-06-29 00:00', '2016-11-11 00:00', '2016-07-27 00:00', '2016-02-18 00:00', '2016-02-13 00:00', '2016-01-15 22:07', '2015-09-11 04:13', '2013-06-12 00:00', '2013-02-25 00:00', '2012-05-28 00:00', '2011-08-29 00:00', '2011-07-21 00:00', '2010-01-28 00:00', '2009-12-15 00:00', '2009-07-08 00:00', '2009-03-09 00:00', '2008-08-06 12:00', '2007-08-29 00:00', '2007-06-22 12:00', '2005-08-05 00:00', '2003-05-23 10:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfUsrAuthMIB.setRevisionsDescriptions(('Added new values criticalAuth(10) and openAuth(11) for objects hpicfUsrAuthWebAuthSessionState and hpicfUsrAuthMacAuthSessionState', 'Added hpicfMacAuthRetainUnauthClients object', 'Added hpicfUsrAuthMacPin object', 'Added hpicfUsrAuthMacAuthPasswordEncrypted object', 'Added hpicfUsrAuthLLDPBypassAdminStatus in HpicfUsrAuthPortEntry', 'Added hpicfUsrAuthMacAuthMode and hpicfUsrAuthLLDPData objects.', 'Added hpicfUsrAuthWebAuthSessionRole, hpicfUsrAuthMacAuthSessionName, and hpicfUsrAuthMacAuthSessionRole objects. Added initialRole, and initialRoleFailed values to hpicfUsrAuthWebAuthSessionState and hpicfUsrAuthMacAuthSessionState objects. Updated description of hpicfUsrAuthWebAuthReAuthPeriod, hpicfUsrAuthWebAuthAuthVid, hpicfUsrAuthWebAuthUnauthVid, hpicfUsrAuthMacAuthReAuthPeriod, hpicfUsrAuthMacAuthAuthVid, and hpicfUsrAuthMacAuthUnauthVid objects.', 'Added hpicfUsrAuthCaptivePortalProfileTable.', 'Added hpicfUsrAuthCaptivePortal objects and group hpicfUsrAuthCaptivePortalGroup. Added objects hpicfUsrAuthCaptivePortalConfigEnabled hpicfUsrAuthCaptivePortalUrlHashKey hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted.', 'Added hpicfUsrAuthLastLogin objects and group hpicfUsrAuthLastLoginGroup. Added objects hpicfUsrAuthLastLoginNotifyStatus, hpicfUsrAuthLastLoginNotifyAddrType, hpicfUsrAuthLastLoginNotifyAddr and table hpicfUsrAuthLastLoginEntry. Deprecated compliances hpicfUsrAuthCompliance1, hpicfUsrAuthCompliance1, hpicfUsrAuthCompliance2, hpicfUsrAuthCompliance3, hpicfUsrAuthCompliance4, hpicfUsrAuthCompliance5. Deprecated groups hpicfNotificationConfigDataGroup and added hpicfNotificationConfigDataGroup1 ', 'Added hpicfUsrAuthLMAAdminStatus, hpicfUsrAuthPortsGroup1 hpicfUsrAuthCompliance8 and deprecated hpicfUsrAuthCompliance7, hpicfUsrAuthPortsGroup.', 'Added description for hpicfUsrAuthMacAuthUsrNumberCnt in hpicfUsrAuthSystem and hpicfUsrAuthMacAuthSessionUsrNumberCnt in hpicfUsrAuthMacAuthSessionStatsEntry.', 'Added description for hpicfUsrAuthMacAuthSessionTimeout in HpicfUsrAuthMacAuthSessionStatsEntry and hpicfUsrAuthWebAuthSessionTimeout in HpicfUsrAuthWebAuthSessionStatsEntry.', 'Added hpicfUsrAuthMacAuthSessionTimeout in HpicfUsrAuthMacAuthSessionStatsEntry and hpicfUsrAuthWebAuthSessionTimeout in HpicfUsrAuthWebAuthSessionStatsEntry.', 'Added hpicfUsrAuthWebAuthAccessDeniedMode and hpicfUsrAuthWebAuthAccessDeniedMessage objects.', 'Added hpicfUsrAuthWebAuthAccessDeniedMode and hpicfUsrAuthWebAuthAccessDeniedMessage objects.', 'Added hpicfUsrAuthMacAuthCachedReauthPeriod and hpicfUsrAuthWebAuthCachedReauthPeriod objects.', 'Added hpicfUsrAuthMacAuthPassword object', 'Added web reauthentication and user reauthentication objects.', 'Added hpicfUsrAuthWMA failure notification and objects', 'Added hpicfUsrAuthNotifyConformance group and objects.', 'Added import objects.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfUsrAuthMIB.setLastUpdated('201710120000Z')
if mibBuilder.loadTexts: hpicfUsrAuthMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfUsrAuthMIB.setContactInfo('Hewlett-Packard Enterprise Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfUsrAuthMIB.setDescription('This MIB module contains the definitions of Managed Objects for various subsystems that perform user authentication. The subsystems under control by this MIB are: WebAuth - Web-based login authentication MacAuth - MAC address-based authentication CLI Password - CLI-based login authentication')
hpicfUsrAuthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 0))
hpicfUsrAuthCLIAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 0, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCLIFailCnt"), ("HP-USER-AUTH", "hpicfUsrAuthCLIInterface"))
if mibBuilder.loadTexts: hpicfUsrAuthCLIAuthFail.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCLIAuthFail.setDescription('This notification signifies that CLI password authentication has failed. Operational control of this notification is provided using hpicfUsrAuthCliNotifyEnable. Agents complying with hpicfUsrAuthCompliance6 always additionally include hpicfUsrAuthLastLoginStatus. They may include hpicfUsrAuthLastLoginNotifyAddrType and hpicfUsrAuthLastLoginNotifyAddr to identify the source of the login attempt. They may also include an instance of hpicfUsrAuthLastLoginGeneration. The hpicfUsrAuthLastLoginEntry index in this object may be used to retrieve other objects in the row that identify the target user of this login attempt. If this index is zero, then the login attempt was to an unknown username. The value of hpicfUsrAuthLastLoginGeneration supplied in the notification should be compared to the retrieved object value to ensure that the row has not changed since the notification was sent.')
hpicfUsrAuthPasswdChng = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 0, 2)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCLIPasswdSet"), ("HP-USER-AUTH", "hpicfUsrAuthCLIPwdNotifyCnt"))
if mibBuilder.loadTexts: hpicfUsrAuthPasswdChng.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPasswdChng.setDescription('An hpicfUsrAuthPasswdChng notification signifies that the manager password has been changed. The value of hpicfUsrAuthCLIPasswdSet can be used to determine whether the password has been set or cleared by this action. ')
hpicfPortSecAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 0, 3)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWMAFailCnt"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailVlan"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailPort"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailMAC"))
if mibBuilder.loadTexts: hpicfPortSecAuthFailure.setStatus('current')
if mibBuilder.loadTexts: hpicfPortSecAuthFailure.setDescription('This notification indicates a failed Port Security (network access) authentication event.')
hpicfUsrAuthSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1))
hpicfUsrAuthWebAuthDhcpBaseAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthDhcpBaseAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthDhcpBaseAddress.setDescription('For all ports running with web authentication enabled: Specifies the base address that should be used by the switch DHCP server for web-based authentication purposes.')
hpicfUsrAuthWebAuthDhcpMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthDhcpMask.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthDhcpMask.setDescription('For all ports running with web authentication enabled: Specifies the subnet mask to be used in conjunction with the DHCP base address when servicing DHCP requests. Allowable mask range is 255.255.240.0 (20) to 255.255.255.0 (24).')
hpicfUsrAuthWebAuthDhcpLease = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthDhcpLease.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthDhcpLease.setDescription('For all ports running with web authentication enabled: Specifies the DHCP lease length in seconds.')
hpicfUsrAuthMacAuthAddrFormat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noDelimiter", 1), ("singleDash", 2), ("multiDash", 3), ("multiColon", 4), ("noDelimiterUppercase", 5), ("singleDashUppercase", 6), ("multiDashUppercase", 7), ("multiColonUppercase", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthAddrFormat.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthAddrFormat.setDescription("For all ports running with MAC authentication enabled: Specifies the MAC address format to use in the RADIUS access-request, as follows: 'noDelimiter' - Sends MAC address in aabbccddeeff format 'singleDash' - Sends MAC address in aabbcc-ddeeff format 'multiDash' - Sends MAC address in aa-bb-cc-dd-ee-ff format 'multiColon' - Sends MAC address in aa:bb:cc:dd:ee:ff format 'noDelimiterUppercase' - Sends MAC address in AABBCCDDEEFF format 'singleDashUppercase' - Sends MAC address in AABBCC-DDEEFF format 'multiDashUppercase' - Sends MAC address in AA-BB-CC-DD-EE-FF format 'multiColonUppercase' - Sends MAC address in AA:BB:CC:DD:EE:FF format The default value is noDelimiter(1).")
hpicfUsrAuthCliNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthCliNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCliNotifyEnable.setDescription('The operational status of hpicfUsrAuthCliAuthFail notifications. The default value is 1 (Enabled). A value of 2 represents Disabled. Writing this object requires authentication, such as provided by SNMPv3. ')
hpicfUsrAuthCLIInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("ssh", 3), ("sshPublicKey", 4), ("webui", 5), ("portAccess", 6), ("other", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthCLIInterface.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCLIInterface.setDescription('The physical interface, network protocol, or other authentication type that is associated with this notification.')
hpicfUsrAuthCLIPasswdSet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 7), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthCLIPasswdSet.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCLIPasswdSet.setDescription('Indicates whether the CLI manager password is set. 1 indicates True while 2 indicates False. ')
hpicfUsrAuthCLIFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthCLIFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCLIFailCnt.setDescription('The count of hpicfUsrAuthPasswdFail notifications sent by the hpicfUsrAuth entity to the SNMP entity. The actual count of notifications sent by SNMP may be lower due to rate limiting or configuration.')
hpicfUsrAuthCLIPwdNotifyCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthCLIPwdNotifyCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCLIPwdNotifyCnt.setDescription('A count of CLI password change notifications sent from the Auth entity to the SNMP entity within the switch. This count may therefore differ from the count of notifications actually sent by the SNMP entity due to switch configuration (e.g., the value of hpicfUsrAuthNotifyEnable.)')
hpicfUsrAuthWMAFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailCnt.setDescription('The count of hpicfPortSecAuthFailure notifications sent by the hpicfUsrAuth entity to the SNMP entity. The actual count of notifications sent by SNMP may be lower due to rate limiting or configuration.')
hpicfUsrAuthWMAFailMAC = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 11), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailMAC.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailMAC.setDescription('The MAC address supplied in the failed authentication request.')
hpicfUsrAuthWMAFailPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailPort.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailPort.setDescription('The port index of the failed authentication request.')
hpicfUsrAuthWMAFailVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAFailVlan.setDescription('The VLAN ID associated with the failed authentication request.')
hpicfUsrAuthPortSecNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthPortSecNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPortSecNotifyEnable.setDescription('Provides operational control of hpicfPortSecAuthFailure notification. When enabled (1), the notification will be sent. When disabled (2), the notification will not be sent. Setting this object requires authentication, such as provided by SNMPv3. ')
hpicfUsrAuthPasswdNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthPasswdNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPasswdNotifyEnable.setDescription('Provides operational control of hpicfUsrAuthPasswdChng notification. When enabled (1), the notification will be sent. When disabled (2), the notification will not be sent. Setting this object requires authentication, such as provided by SNMPv3.')
hpicfUsrAuthWMAEWAServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16), )
if mibBuilder.loadTexts: hpicfUsrAuthWMAEWAServerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAEWAServerTable.setDescription('A table of the Enhanced Web Auth servers.')
hpicfUsrAuthWMAEWAServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerIndex"))
if mibBuilder.loadTexts: hpicfUsrAuthWMAEWAServerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAEWAServerEntry.setDescription('Addresses for an Enhanced Web Auth server.')
hpicfUsrAuthWMAeWAServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerIndex.setDescription('Index into hpicfUsrAuthWMAEWAServerTable.')
hpicfUsrAuthWMAeWAServerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16, 1, 2), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerIPAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerIPAddressType.setDescription('The type of Enhanced Web Auth Server Address.')
hpicfUsrAuthWMAeWAServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerIPAddress.setDescription('The IP address of the Enhanced Web Auth Server. If set to 0.0.0.0 or URL not configured no Enhanced Web Auth Server will run.')
hpicfUsrAuthWMAeWAServerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerPath.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerPath.setDescription('The Enhanced Web Auth Server Path for the location of the Enhanced Web Auth Pages. If not configured the default path will be used.')
hpicfUsrAUthWMAeWAServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 16, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAUthWMAeWAServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAUthWMAeWAServerRowStatus.setDescription('This marks the row as active/inactive.')
hpicfUsrAuthRedirectServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 17), )
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerTable.setDescription('A table of the authentication Redirect Servers.')
hpicfUsrAuthRedirectServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 17, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthRedirectServerIndex"))
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerEntry.setDescription('Attributes of an authentication Redirect Server.')
hpicfUsrAuthRedirectServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerIndex.setDescription('Index into hpicfUsrAuthRedirectServerTable.')
hpicfUsrAuthRedirectServerURL = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 17, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerURL.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerURL.setDescription("This object represents the authentication Redirect Server's complete URL for the location of the redirect server login or warning page. This value must begin with 'http://' or 'https://' and should include the DNS name, TCP port of the server if not 80 or SSL's 443, and the page path, if necessary.")
hpicfUsrAuthRedirectServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerRowStatus.setDescription('This object indicates the status of this entry. Must NOT be active in order to modify some other column of this config entry.')
hpicfUsrAuthRedirectServerRestrictiveFilter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerRestrictiveFilter.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerRestrictiveFilter.setDescription('If enabled, only the configured initial web page will be returned for all client requests. The enabled state would generally be used to simply display an informative warning message to failed macAuth clients. If disabled, all client/redirect-server http traffic will be permitted.')
hpicfUsrAuthRedirectServerClientTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 19), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerClientTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerClientTimeout.setDescription('The time (in seconds) that a client will be left in the unauthorized authentication redirection state before being removed from the state tables, temporarily suspending further client/redirect-server http traffic. After state table removal, client is free to initiate authentication.')
hpicfUsrAuthRedirectServerAuthFailureStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerAuthFailureStats.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerAuthFailureStats.setDescription('The total number of times clients fail authentication and initiate the authentication Redirect Server process since reboot. A single client can be counted multiple times.')
hpicfUsrAuthCacheCredTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 21), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthCacheCredTimeOut.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCacheCredTimeOut.setDescription('Specifies the time in seconds, that the switch should remove the credentials. Reauthentication should take place with in small amount of time.')
hpicfUsrAuthClientReauthenticateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 22), )
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateTable.setDescription('A table containing configuration/control variables indexed by port and client MAC.')
hpicfUsrAuthClientReauthenticateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 22, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateInterfaceIndex"), (0, "HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateMacAddress"))
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateEntry.setDescription('The table entry provides the means by which a client on an authentication interface can be forced to reauthenticate.')
hpicfUsrAuthClientReauthenticateInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 22, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateInterfaceIndex.setDescription('Index of client interfaces.')
hpicfUsrAuthClientReauthenticateMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 22, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateMacAddress.setDescription('Specifies the MAC address of the client.')
hpicfUsrAuthClientReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 22, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticate.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticate.setDescription('The reauthentication control for this client on this authentication interface. Setting this attribute TRUE forces this authenticated client to reauthenticate. That is, the client is deauthenticated and must transmit traffic in order to trigger reauthentication. Setting this attribute FALSE has no effect.')
hpicfUsrAuthMacAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthPassword.setDescription('This object represents the secret password value used by all MAC auth clients. The default value of password is NULL. The password if set(non NULL) will be used instead of MAC address while constructing Radius request packet. The current maximum length of password is 16.')
hpicfUsrAuthWebAuthAccessDeniedMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("custom", 2), ("radius", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAccessDeniedMode.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAccessDeniedMode.setDescription("Specifies the access denied mode that applies to the custom message embedded into the login failure page. The values: disabled (1) - the feature is disabled. custom (2) - use the string configured by administrator via CLI or SNMP. radius (3) - use the string in the 'reply-message' attribute of the received RADIUS response message.")
hpicfUsrAuthWebAuthAccessDeniedMessage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAccessDeniedMessage.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAccessDeniedMessage.setDescription("Text of the access denied message that will be embedded into the custom web auth login failure page. This message will only be used when the access denied mode is set to 'custom'. It can take up to 250 characters")
hpicfUsrAuthMacAuthUsrNumberCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUsrNumberCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUsrNumberCnt.setDescription('This object specifies the total number of authenticated clients currently present in the switch. This does not include the clients which are under process of authentication.')
hpicfUsrAuthLastLoginNotifyStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("successful", 1), ("failed", 2), ("failedLockOut", 3), ("lockedOut", 4), ("tableFull", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginNotifyStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginNotifyStatus.setDescription('The status of the failed login attempt. successful(1) is not currently used. failed(2) indicates a regular failure that did not cause user lockout. failedLockOut(3) indicates a failure that caused user lockout. lockedOut(4) indicates that the user was locked out before the attempt was made. tableFull(5) indicates lockout due to a full lockout table, likely an indication of a serious attack.')
hpicfUsrAuthLastLoginNotifyAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 28), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginNotifyAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginNotifyAddrType.setDescription("The type of IP address from which the user's most recent login attempt occurred. Unknown(0) indicates the console.")
hpicfUsrAuthLastLoginNotifyAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 29), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginNotifyAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginNotifyAddr.setDescription("The IP address from which the user's most recent login attempt occurred.")
hpicfUsrAuthUseLLDPData = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthUseLLDPData.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthUseLLDPData.setDescription('Enable or disable LLDP data inclusion in client authentication, which, in addition to using the source MAC address of incoming packets, also uses client information in the LLDP payload to authenticate clients.')
hpicfUsrAuthMacAuthPasswordEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthPasswordEncrypted.setDescription('This object represents the encrypted format of password value stored in the object hpicfUsrAuthMacAuthPassword. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). This object should only be written with an encrypted key.')
hpicfUsrAuthPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2))
hpicfUsrAuthPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1), )
if mibBuilder.loadTexts: hpicfUsrAuthPortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPortTable.setDescription('A table of system level information about Web- MAC-based authentication for each port in the switch.')
hpicfUsrAuthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthPortNumber"))
if mibBuilder.loadTexts: hpicfUsrAuthPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPortEntry.setDescription('The port number, operational mode and reauthentication control for each switch port.')
hpicfUsrAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfUsrAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPortNumber.setDescription('The port number associated with this switch port.')
hpicfUsrAuthWebAuthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAdminStatus.setDescription('Setting this attribute TRUE enables web-based authentication services. A value of FALSE disabled web-based authentication. This attribute cannot be set TRUE concurrently with hpicfUsrAuthMacAuthAdminStatus.')
hpicfUsrAuthMacAuthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthAdminStatus.setDescription('Setting this attribute TRUE enables MAC-based authentication services. A value of FALSE disabled MAC-based authentication. This attribute cannot be set TRUE concurrently with hpicfUsrAuthWebAuthAdminStatus.')
hpicfUsrAuthPortReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthPortReauthenticate.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPortReauthenticate.setDescription('The reauthentication control for this port. Setting this attribute TRUE forces all authenticated clients to reauthenticate themselves. Setting this attribute FALSE has no effect. This attribute always returns FALSE when read.')
hpicfUsrAuthLMAAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthLMAAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLMAAdminStatus.setDescription('Setting this attribute TRUE enables Local MAC-based authentication services. A value of FALSE disabled MAC-based authentication. This attribute cannot be set TRUE concurrently with hpicfUsrAuthWebAuthAdminStatus.')
hpicfUsrAuthLLDPBypassAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthLLDPBypassAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLLDPBypassAdminStatus.setDescription('Setting this attribute as TRUE enables lldp-bypass authentication. A value of FALSE disables lldp-bypass authentication. This attribute cannot be set to TRUE concurrently with MAC lockdown, MACsec, Trunk, Distributed Trunking and mesh port features. The lldp-bypass feature is limited only for Aruba-APs that send special LLDP TLVs.')
hpicfUsrAuthWebAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3))
hpicfUsrAuthWebAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1), )
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthConfigTable.setDescription('A table that contains the configuration objects for Web-based Authentication associated with each port. An entry appears in this table for each port that may authenticate access to itself.')
hpicfUsrAuthWebAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthPortNumber"))
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthConfigEntry.setDescription('The configuration information for Web-based authentication.')
hpicfUsrAuthWebAuthClientLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientLimit.setDescription('The maximum number of authenticated clients to allow on the port.')
hpicfUsrAuthWebAuthClientMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientMoves.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientMoves.setDescription("Specifies whether client may roam across ports under web authentication control. Setting this attribute 'enabled'allows authenticated clients to roam to other ports under web authentication control (that also have this attribute set to 'enabled') without requiring a reauthentication. Setting this attribute 'disabled' disallows authenticated clients from roaming to other ports (regardless of that port's attribute value). The client has to reauthenticate, if it attempts to roam.")
hpicfUsrAuthWebAuthSSLState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSSLState.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSSLState.setDescription('Specifies whether web-based authentication should use an SSL connection (i.e. https://) to switch to collect client credentials. Note: A valid certificate must be configured on switch before SSL connections are enabled.')
hpicfUsrAuthWebAuthRedirectUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthRedirectUrl.setDescription('Specifies the URL, to which an authenticated client should be redirected, after successful authentication.')
hpicfUsrAuthWebAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthQuietPeriod.setDescription('Specifies the time, in seconds, that the switch should refrain from reattempting an authentication request for a client whose credentials were rejected.')
hpicfUsrAuthWebAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthServerTimeout.setDescription('Specifies the time, in seconds, that the switch should wait for an authentication reply to return before considering it as timed out.')
hpicfUsrAuthWebAuthServerMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthServerMaxReq.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthServerMaxReq.setDescription('Specifies the number of authentication requests that must time out before failing authentication.')
hpicfUsrAuthWebAuthMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthMaxRetries.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthMaxRetries.setDescription('Specifies the number of authentication requests that must fail (i.e. invalid credentials) before failing authentication.')
hpicfUsrAuthWebAuthLogoffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthLogoffPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthLogoffPeriod.setDescription('Specifies the period, in seconds, at which an authenticated client will be considered unauthenticated for a lack of activity (i.e. traffic originating from client).')
hpicfUsrAuthWebAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthReAuthPeriod.setDescription("Specifies the period, in seconds, at which an authenticated client must reauthenticate. A value of 0 signifies that an authenticated client will never have to reauthenticate. When hpSwitchAutzUserRoleEnabled is true, this value will be superseded by the value of hpSwitchAutzUserRoleReauthPeriod from the client's assigned role.")
hpicfUsrAuthWebAuthAuthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 11), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAuthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAuthVid.setDescription("Specifies the port VID (PVID) that should be used for an authenticated client. When hpSwitchAutzUserRoleEnabled is true, this value may be superseded by the value of hpSwitchAutzUserRoleVlanId or hpSwitchAutzUserRoleVlanName from the client's assigned role.")
hpicfUsrAuthWebAuthUnauthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 12), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthUnauthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthUnauthVid.setDescription('Specifies the port VID (PVID) that should be used for an unauthenticated client. When hpSwitchAutzUserRoleEnabled is true, this value may be superseded by the value of hpSwitchAutzUserRoleVlanId or hpSwitchAutzUserRoleVlanName from the role identified by hpSwitchAutzUserRoleInitialRoleName.')
hpicfUsrAuthWebAuthCacheCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthCacheCredentials.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthCacheCredentials.setDescription("Specifies whether to cache client credentials or not. Setting this variable 'enabled' allows to cache authenticated clients credentials. Setting this variable 'disabled' disallows to cache authenticated clients credentials.")
hpicfUsrAuthWebAuthCachedReauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthCachedReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthCachedReauthPeriod.setDescription('The value indicates the period in seconds, during which cached reauthentication is allowed on the port. If value is zero then the period of cached reauthentication is unlimited.')
hpicfUsrAuthWebAuthClientReauthenticateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 2), )
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateTable.setDescription('A table containing WebAuth configuration/control variables indexed by port and client MAC.')
hpicfUsrAuthWebAuthClientReauthenticateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 2, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthWebAuthClientReauthenticateInterfaceIndex"), (0, "HP-USER-AUTH", "hpicfUsrAuthWebAuthClientReauthenticateMacAddress"))
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateEntry.setDescription('The table entry provides the means by which a WebAuth client on an authentication interface can be forced to reauthenticate.')
hpicfUsrAuthWebAuthClientReauthenticateInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateInterfaceIndex.setDescription('Index of WebAuth client interfaces.')
hpicfUsrAuthWebAuthClientReauthenticateMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticateMacAddress.setDescription('Specifies the MAC address of the client.')
hpicfUsrAuthWebAuthClientReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 3, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticate.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthClientReauthenticate.setDescription('The reauthentication control for this client on this authentication interface. Setting this attribute TRUE forces this authenticated WebAuth client to reauthenticate. That is, the client is deauthenticated and must transmit traffic in order to trigger reauthentication. Setting this attribute FALSE has no effect.')
hpicfUsrAuthMacAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4))
hpicfUsrAuthMacAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1), )
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigTable.setDescription('A table that contains the configuration objects for Mac-based Authentication associated with each port. An entry appears in this table for each port that may authenticate access to itself.')
hpicfUsrAuthMacAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthPortNumber"))
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigEntry.setDescription('The configuration information for Mac-based authentication.')
hpicfUsrAuthMacAuthClientLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientLimit.setDescription('The maximum number of authenticated clients to allow on the port.')
hpicfUsrAuthMacAuthClientMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientMoves.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientMoves.setDescription("Specifies whether client may roam across ports under web authentication control. Setting this attribute 'enabled'allows authenticated clients to roam to other ports under web authentication control (that also have this attribute set to 'enabled') without requiring a reauthentication. Setting this attribute 'disabled' disallows authenticated clients from roaming to other ports (regardless of that port's attribute value). The client has to reauthenticate, if it attempts to roam.")
hpicfUsrAuthMacAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthQuietPeriod.setDescription('Specifies the time, in seconds, that the switch should refrain from reattempting an authentication request for a client whose credentials were rejected.')
hpicfUsrAuthMacAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthServerTimeout.setDescription('Specifies the time, in seconds, that the switch should wait for an authentication reply to return before considering it as timed out.')
hpicfUsrAuthMacAuthServerMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthServerMaxReq.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthServerMaxReq.setDescription('Specifies the number of authentication requests that must time out before failing authentication.')
hpicfUsrAuthMacAuthLogoffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthLogoffPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthLogoffPeriod.setDescription('Specifies the period, in seconds, at which an authenticated client will be considered unauthenticated for a lack of activity (i.e. traffic originating from client).')
hpicfUsrAuthMacAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthReAuthPeriod.setDescription("Specifies the period, in seconds, at which an authenticated client must reauthenticate. A value of 0 signifies that an authenticated client will never have to reauthenticate. When hpSwitchAutzUserRoleEnabled is true, this value will be superseded by the value of hpSwitchAutzUserRoleReauthPeriod from the client's assigned role.")
hpicfUsrAuthMacAuthAuthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 8), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthAuthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthAuthVid.setDescription("Specifies the port VID (PVID) that should be used for an authenticated client. When hpSwitchAutzUserRoleEnabled is true, this value may be superseded by the value of hpSwitchAutzUserRoleVlanId or hpSwitchAutzUserRoleVlanName from the client's assigned role.")
hpicfUsrAuthMacAuthUnauthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 9), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUnauthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUnauthVid.setDescription('Specifies the port VID (PVID) that should be used for an unauthenticated client. When hpSwitchAutzUserRoleEnabled is true, this value may be superseded by the value of hpSwitchAutzUserRoleVlanId or hpSwitchAutzUserRoleVlanName from the role identified by hpSwitchAutzUserRoleInitialRoleName.')
hpicfUsrAuthMacAuthCachedReauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthCachedReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthCachedReauthPeriod.setDescription('The value indicates the period in seconds, during which cached reauthentication is allowed on the port. If value is zero then the period of cached reauthentication is unlimited.')
hpicfUsrAuthMacAuthUnAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUnAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUnAuthPeriod.setDescription('Specifies the period, in seconds, at which an authenticated client must reauthenticate. A value of 0 signifies that an authenticated client will never have to reauthenticate.')
hpicfUsrAuthMacAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userBased", 1), ("portBased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthMode.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthMode.setDescription("This object provides information about the authentication mode of a specific port performing MAC authentication. In 'userBased' mode, the port performing MAC authentication will authenticate every client coming in the port; the port will change into 'portBased' mode when a client is authenticated on the port and is authorized to open its connecting switch port to all other clients (i.e., its client account on the RADIUS server is configured with VSA 'HP-Port-Auth-Mode-MA'). A port in portBased MAC authentication mode will grant access for any client coming in the port.")
hpicfUsrAuthMacPin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 13), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacPin.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacPin.setDescription('Enables MAC-Pinning on this port. Setting this attribute TRUE pins the authenticated MAC addresses to the Mac address table. Authenticated clients will not be de-authenticated even when clients are inactive throughout the logoff period.')
hpicfMacAuthRetainUnauthClients = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMacAuthRetainUnauthClients.setStatus('current')
if mibBuilder.loadTexts: hpicfMacAuthRetainUnauthClients.setDescription('Setting this attribute TRUE(1) allows access to Mac-based unauthorized clients by placing the port in unauthorized VLAN during reauthentication.')
hpicfUsrAuthMacAuthClientReauthenticateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 2), )
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateTable.setDescription('A table containing macAuth configuration/control variables indexed by port and client MAC.')
hpicfUsrAuthMacAuthClientReauthenticateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 2, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthMacAuthClientReauthenticateInterfaceIndex"), (0, "HP-USER-AUTH", "hpicfUsrAuthMacAuthClientReauthenticateMacAddress"))
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateEntry.setDescription('The table entry provides the means by which a macAuth client on an authentication interface can be forced to reauthenticate.')
hpicfUsrAuthMacAuthClientReauthenticateInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateInterfaceIndex.setDescription('Index of macAuth client interfaces.')
hpicfUsrAuthMacAuthClientReauthenticateMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticateMacAddress.setDescription('Specifies the MAC address of the client.')
hpicfUsrAuthMacAuthClientReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 4, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticate.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthClientReauthenticate.setDescription('The reauthentication control for this client on this authentication interface. Setting this attribute TRUE forces this authenticated macAuth client to reauthenticate. That is, the client is deauthenticated and must transmit traffic in order to trigger reauthentication. Setting this attribute FALSE has no effect.')
hpicfUsrAuthWebAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5))
hpicfUsrAuthWebAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1), )
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsTable.setDescription('A table that contains session statistic objects for each client (i.e. user) attempting to authenticate to a port with Web-authentication enabled. An entry appears in this table for each port in the switch.')
hpicfUsrAuthWebAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthPortNumber"), (0, "HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionMacAddr"))
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsEntry.setDescription('The session statistics information for a port with Web-based authentication enabled. This shows the current values being collected for active sessions.')
hpicfUsrAuthWebAuthSessionMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionMacAddr.setDescription('Specifies the MAC address of the client.')
hpicfUsrAuthWebAuthSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionName.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionName.setDescription('Specifies the username of the client.')
hpicfUsrAuthWebAuthSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("authenticated", 1), ("unauthenticated", 2), ("authenticating", 3), ("authReqRejectNoVlan", 4), ("authReqRejectUnauthVlan", 5), ("authReqTimeoutNoVlan", 6), ("authReqTimeoutUnauthVlan", 7), ("initialRole", 8), ("initialRoleFailed", 9), ("criticalAuth", 10), ("openAuth", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionState.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionState.setDescription("Specifies the state of the client as follows: 'authenticated' - authenticated client 'unauthenticated' - unauthenticated client, waiting for credentials 'authenticating' - credentials have been sent for verification, waiting for response 'authReqRejectNoVlan' - credentials invalid; client does not have access to unauthenticated VLAN 'authReqRejectUnauthVlan' - credentials invalid; client does have access to unauthenticated VLAN 'authReqTimeoutNoVlan' - credentials could not be verified; client is still unauthenticated and does not have access to unauthenticated VLAN 'authReqTimeoutUnauthVlan' - credentials could not be verified; client is still unauthenticated, but has access to unauthenticated VLAN 'initialRole' - client is assigned the initial role 'initialRoleFailed' - initial role could not be applied; client does not have access to the network 'criticalAuth - client is authenticated on critical VLAN 'openAUth - client is authenticated on open auth VLAN")
hpicfUsrAuthWebAuthSessionStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStateTime.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStateTime.setDescription('The duration, in seconds, a client has spent in the state specified by hpicfUsrAuthSessionState.')
hpicfUsrAuthWebAuthSessionAuthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionAuthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionAuthVid.setDescription('Specifies the PVID that the authenticated client is utilizing. If client is unauthenticated, this object has no meaning.')
hpicfUsrAuthWebAuthSessionUnauthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 6), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionUnauthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionUnauthVid.setDescription('Specifies the PVID that the unauthenticated client is utilizing. If client is authenticated, this object has no meaning.')
hpicfUsrAuthWebAuthSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionTimeout.setDescription('Specifies the RADIUS Server set session timeout for reauthentication of the user. When ST = 0, user gets reauthenticated at reauth-period secs, ST < 60 it is set to 60 secs and then user is reauthenticated, ST > 60 user is reauthenticated at ST secs.')
hpicfUsrAuthWebAuthSessionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 5, 1, 1, 8), HpAutzUserRoleName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionRole.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionRole.setDescription('When hpSwitchAutzUserRoleEnabled is true, specifies the user role of the client.')
hpicfUsrAuthMacAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6))
hpicfUsrAuthMacAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1), )
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsTable.setDescription('A table that contains session statistic objects for each client (i.e. user) attempting to authenticate to a port with MAC-authentication enabled. An entry appears in this table for each port in the switch.')
hpicfUsrAuthMacAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthPortNumber"), (0, "HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionMacAddr"))
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsEntry.setDescription('The session statistics information for a port with Mac-based authentication enabled. This shows the current values being collected for active sessions.')
hpicfUsrAuthMacAuthSessionMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionMacAddr.setDescription('Specifies the MAC address of the client.')
hpicfUsrAuthMacAuthSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("authenticated", 1), ("unauthenticated", 2), ("authenticating", 3), ("authReqRejectNoVlan", 4), ("authReqRejectUnauthVlan", 5), ("authReqTimeoutNoVlan", 6), ("authReqTimeoutUnauthVlan", 7), ("initialRole", 8), ("initialRoleFailed", 9), ("criticalAuth", 10), ("openAuth", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionState.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionState.setDescription("Specifies the state of the client as follows: 'authenticated' - authenticated client 'unauthenticated' - unauthenticated client, waiting for credentials 'authenticating' - credentials have been sent for verification, waiting for response 'authReqRejectNoVlan' - credentials invalid; client does not have access to unauthenticated VLAN 'authReqRejectUnauthVlan - credentials invalid; client does have access to unauthenticated VLAN 'authReqTimeoutNoVlan' - credentials could not be verified; client is still unauthenticated and does not have access to unauthenticated VLAN 'authReqTimeoutUnauthVlan' - credentials could not be verified; client is still unauthenticated, but has access to unauthenticated VLAN 'initialRole' - client is assigned the initial role 'initialRoleFailed' - initial role could not be applied; client does not have access to the network 'criticalAuth - client is authenticated on critical VLAN 'openAUth - client is authenticated on open auth VLAN")
hpicfUsrAuthMacAuthSessionStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStateTime.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStateTime.setDescription('The duration, in seconds, a client has spent in the state specified by hpicfUsrAuthSessionState.')
hpicfUsrAuthMacAuthSessionAuthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 4), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionAuthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionAuthVid.setDescription('Specifies the PVID that the authenticated client is utilizing. If client is unauthenticated, this object has no meaning.')
hpicfUsrAuthMacAuthSessionUnauthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionUnauthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionUnauthVid.setDescription('Specifies the PVID that the unauthenticated client is utilizing. If client is authenticated, this object has no meaning.')
hpicfUsrAuthMacAuthSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionTimeout.setDescription('Specifies the RADIUS Server set session timeout for reauthentication of the user. When ST = 0, user gets reauthenticated at reauth-period secs, ST < 60 it is set to 60 secs and then user is reauthenticated, ST > 60 user is reauthenticated at ST secs.')
hpicfUsrAuthMacAuthSessionUsrNumberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionUsrNumberCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionUsrNumberCnt.setDescription('This object Specifies the number of authenticated client currently present on this port. This does not include the clients which are under process of authentication.')
hpicfUsrAuthMacAuthSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionName.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionName.setDescription('Specifies the username of the client.')
hpicfUsrAuthMacAuthSessionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 6, 1, 1, 9), HpAutzUserRoleName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionRole.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionRole.setDescription('When hpSwitchAutzUserRoleEnabled is true, specifies the user role of the client.')
hpicfUsrAuthLastLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12))
hpicfUsrAuthLastLoginCurrentGeneration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginCurrentGeneration.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginCurrentGeneration.setDescription('The current generation number of the rows in hpicfUsrAuthLastLoginTable. To obtain a consistent table view, first read this object, then enumerate the table (reading hpicfUsrAuthLastLoginGeneration last), discarding any rows with hpicfUsrAuthLastLoginGeneration greater than this value.')
hpicfUsrAuthLastLoginTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2), )
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginTable.setDescription('This table records, per-username, the most recent login and login attempts. A record is created by the switch upon the first successful login to a username, and updated upon each subsequent login or login attempt.')
hpicfUsrAuthLastLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthLastLoginIndex"))
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginEntry.setDescription('User last login table entry.')
hpicfUsrAuthLastLoginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64511)))
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginIndex.setDescription('The index value which uniquely identifies a row in the user last-login table.')
hpicfUsrAuthLastLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginName.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginName.setDescription("The user's login name.")
hpicfUsrAuthLastLoginPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operator", 1), ("manager", 2), ("superuser", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginPrivilege.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginPrivilege.setDescription('The privilege level assigned to the user at the most recent login.')
hpicfUsrAuthLastLoginSuccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginSuccTime.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginSuccTime.setDescription("The time of the user's most recent successful login.")
hpicfUsrAuthLastLoginSuccAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginSuccAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginSuccAddrType.setDescription("The type of IP address from which the user's most recent successful login occurred. Unknown(0) indicates a console login.")
hpicfUsrAuthLastLoginSuccAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginSuccAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginSuccAddr.setDescription("The IP address from which the user's most recent successful login occurred.")
hpicfUsrAuthLastLoginUnsuccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginUnsuccTime.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginUnsuccTime.setDescription("The time of the user's most recent unsuccessful login attempt. This will be zero length if there have been no unsuccessful login attempts since the most recent successful login.")
hpicfUsrAuthLastLoginUnsuccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginUnsuccCount.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginUnsuccCount.setDescription("The count of the user's unsuccessful login attempts since the most recent successful login. This counter is reset to zero whenever hpicfUsrAuthLastLoginSuccTime changes.")
hpicfUsrAuthLastLoginGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginGeneration.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginGeneration.setDescription('The generation number of the objects in this row. This object should be tested after reading other objects in a row to ensure it has not changed from hpicfUsrAuthLastLoginCurrentGeneration, or from the value of hpicfUsrAuthLastLoginGeneration sent in an hpicfUsrAuthCLIAuthFail notification.')
hpicfUsrAuthLastLoginDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 12, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginDeleteAll.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginDeleteAll.setDescription('When set to true(1), all rows of the last-login table are deleted. Always reads as false(2).')
hpicfUsrAuthCaptivePortal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13))
hpicfUsrAuthCaptivePortalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 1))
hpicfUsrAuthCaptivePortalConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalConfigEnabled.setDescription('Enable redirection to a captive portal server for additional client authentication. When enabled, clients will be redirected to a captive portal server for further authentication when the RADIUS response includes a redirect URL.')
hpicfUsrAuthCaptivePortalUrlHashKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalUrlHashKey.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalUrlHashKey.setDescription('A shared secret used by the captive portal server to validate a redirected request. A read of this object always returns an empty string.')
hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted.setDescription('The encrypted form of the shared secret used by the captive portal server to validate a redirected request. This object should only be written with an encrypted password previously read from a compatible HP Networking device.')
hpicfUsrAuthCaptivePortalProfileTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 2), )
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileTable.setDescription('This table consists of the captive portal profiles configured on the switch. The size of this table is implementation specific.')
hpicfUsrAuthCaptivePortalProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 2, 1), ).setIndexNames((0, "HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileName"))
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileEntry.setDescription('A captive portal profile table entry.')
hpicfUsrAuthCaptivePortalProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileName.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileName.setDescription("The name of this profile. All printable ASCII characters are allowed except '.', ' ', and '~'.")
hpicfUsrAuthCaptivePortalProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileRowStatus.setDescription("The Row Status of this entry. To create a new entry, send an SNMP SET request with a RowStatus of 'createAndGo'. active - the entry is ready to use. notInService - not valid for this table. notReady - the entry is not fully configured. createAndGo - create a new entry. createAndWait - not valid for this table. delete - delete the entry. Entries of hpicfUsrAuthCaptivePortalProfileType 'predefined' cannot be deleted.")
hpicfUsrAuthCaptivePortalProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("predefined", 1), ("custom", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileType.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileType.setDescription('Indicates whether the corresponding profile is predefined or custom. Predefined profiles cannot be modified or deleted.')
hpicfUsrAuthCaptivePortalProfileRedirectUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 13, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 247))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileRedirectUrl.setDescription('The URL of the captive portal the user is redirected to for authentication. An empty value indicates the URL will be sent via the RADIUS VSA: HPE-CAPTIVE-PORTAL-URL(24)')
hpicfUsrAuthConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7))
hpicfUsrAuthGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2))
hpicfUsrAuthSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthDhcpBaseAddress"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthDhcpMask"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthDhcpLease"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAddrFormat"), ("HP-USER-AUTH", "hpicfUsrAuthCLIPasswdSet"), ("HP-USER-AUTH", "hpicfUsrAuthCLIInterface"), ("HP-USER-AUTH", "hpicfUsrAuthCacheCredTimeOut"), ("HP-USER-AUTH", "hpicfUsrAuthUseLLDPData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthSystemGroup = hpicfUsrAuthSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthSystemGroup.setDescription('A collection of objects providing system information about, and control over, Web- and MAC-based authentication.')
hpicfUsrAuthPortsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 2)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthPortNumber"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthPortReauthenticate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthPortsGroup = hpicfUsrAuthPortsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthPortsGroup.setDescription('A collection of objects providing system level information about Web and MAC based authentication for each port in the switch.')
hpicfUsrAuthWebAuthConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 3)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthClientLimit"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthClientMoves"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSSLState"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthRedirectUrl"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthQuietPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthServerTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthServerMaxReq"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthMaxRetries"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthLogoffPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthReAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthCacheCredentials"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWebAuthConfigGroup = hpicfUsrAuthWebAuthConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthConfigGroup.setDescription('A collection of objects providing configuration objects for Web-based authentication associated with each port.')
hpicfUsrAuthMacAuthConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 4)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientLimit"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientMoves"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthQuietPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerMaxReq"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthLogoffPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthReAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthUnauthVid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthConfigGroup = hpicfUsrAuthMacAuthConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigGroup.setDescription('A collection of objects providing configuration objects for MAC-based authentication associated with each port.')
hpicfUsrAuthWebAuthSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 5)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionMacAddr"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionName"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionState"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStateTime"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionUnauthVid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWebAuthSessionStatsGroup = hpicfUsrAuthWebAuthSessionStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsGroup.setDescription('A collection of objects providing statistics about current sessions for Web-based authentication.')
hpicfUsrAuthMacAuthSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 6)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionMacAddr"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionState"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStateTime"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionUnauthVid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthSessionStatsGroup = hpicfUsrAuthMacAuthSessionStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsGroup.setDescription('A collection of objects providing statistics about current sessions for MAC-based authentication.')
hpicfUsrAuthWebAuthConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 7)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthClientLimit"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthClientMoves"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSSLState"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthRedirectUrl"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthQuietPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthServerTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthServerMaxReq"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthMaxRetries"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthLogoffPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthReAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthCacheCredentials"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthCachedReauthPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWebAuthConfigGroup1 = hpicfUsrAuthWebAuthConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthConfigGroup1.setDescription('A collection of objects providing configuration objects for Web-based authentication associated with each port.')
hpicfUsrAuthMacAuthConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 8)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientLimit"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientMoves"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthQuietPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerMaxReq"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthLogoffPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthReAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthCachedReauthPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthConfigGroup1 = hpicfUsrAuthMacAuthConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigGroup1.setDescription('A collection of objects providing configuration objects for MAC-based authentication associated with each port.')
hpicfUsrAuthMacAuthConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 9)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientLimit"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientMoves"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthQuietPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerMaxReq"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthLogoffPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthReAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthUnAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthCachedReauthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthConfigGroup2 = hpicfUsrAuthMacAuthConfigGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigGroup2.setDescription('A collection of objects providing configuration objects for MAC-based authentication associated with each port.')
hpicfUsrAuthRedirectServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 10)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthRedirectServerURL"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerRestrictiveFilter"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerClientTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerAuthFailureStats"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthRedirectServerGroup = hpicfUsrAuthRedirectServerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthRedirectServerGroup.setDescription('A collection of objects for authentication Redirect Server.')
hpicfUsrAuthWMAeWAServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 11)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerIPAddressType"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerIPAddress"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerPath"), ("HP-USER-AUTH", "hpicfUsrAUthWMAeWAServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWMAeWAServerGroup = hpicfUsrAuthWMAeWAServerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWMAeWAServerGroup.setDescription('A collection of objects for Enhanced Web Auth servers.')
hpicfUsrAuthClientReauthenticateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 12)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticate"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthClientReauthenticate"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientReauthenticate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthClientReauthenticateGroup = hpicfUsrAuthClientReauthenticateGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthClientReauthenticateGroup.setDescription('A collection of objects for Reauthentication settings .')
hpicfUsrAuthMacAuthSessionStatsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 13)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthSessionStatsGroup1 = hpicfUsrAuthMacAuthSessionStatsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsGroup1.setDescription('A collection of objects providing RADIUS server set session timeout for MAC-based user reauthentication.')
hpicfUsrAuthWebAuthSessionStatsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 14)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWebAuthSessionStatsGroup1 = hpicfUsrAuthWebAuthSessionStatsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsGroup1.setDescription('A collection of objects providing RADIUS server set session timeout for Web-based user reauthentication.')
hpicfUsrAuthLastLoginGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 15)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthLastLoginCurrentGeneration"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginDeleteAll"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginName"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginPrivilege"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginSuccTime"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginSuccAddrType"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginSuccAddr"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginUnsuccTime"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginUnsuccCount"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGeneration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthLastLoginGroup = hpicfUsrAuthLastLoginGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthLastLoginGroup.setDescription('A collection of objects for viewing the most recent logins to the switch by users, and for deleting the table.')
hpicfUsrAuthPortsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 16)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthPortNumber"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthPortReauthenticate"), ("HP-USER-AUTH", "hpicfUsrAuthLMAAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthPortsGroup1 = hpicfUsrAuthPortsGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthPortsGroup1.setDescription('A collection of objects providing system level information about Web and MAC based authentication for each port in the switch.')
hpicfUsrAuthCaptivePortalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 17)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalConfigEnabled"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalUrlHashKey"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCaptivePortalGroup = hpicfUsrAuthCaptivePortalGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalGroup.setDescription('A collection of objects providing configuration for the captive portal feature.')
hpicfUsrAuthCaptivePortalProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 18)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileRowStatus"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileType"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileRedirectUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCaptivePortalProfileGroup = hpicfUsrAuthCaptivePortalProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCaptivePortalProfileGroup.setDescription('A collection of objects providing configuration for captive portal profiles.')
hpicfUsrAuthWebAuthSessionStatsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 19)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionMacAddr"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionName"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionState"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStateTime"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWebAuthSessionStatsGroup2 = hpicfUsrAuthWebAuthSessionStatsGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthSessionStatsGroup2.setDescription('A collection of objects providing statistics about current sessions for Web-based authentication.')
hpicfUsrAuthMacAuthSessionStatsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 20)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionMacAddr"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionState"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStateTime"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionName"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthSessionStatsGroup2 = hpicfUsrAuthMacAuthSessionStatsGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthSessionStatsGroup2.setDescription('A collection of objects providing statistics about current sessions for MAC-based authentication.')
hpicfUsrAuthPortsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 21)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthPortNumber"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthPortReauthenticate"), ("HP-USER-AUTH", "hpicfUsrAuthLMAAdminStatus"), ("HP-USER-AUTH", "hpicfUsrAuthLLDPBypassAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthPortsGroup2 = hpicfUsrAuthPortsGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthPortsGroup2.setDescription('A collection of objects providing system level information about Web and MAC based authentication for each port in the switch.')
hpicfUsrAuthMacAuthConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 2, 22)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientLimit"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthClientMoves"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthQuietPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerTimeout"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthServerMaxReq"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthLogoffPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthReAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthAuthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthUnauthVid"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthUnAuthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthCachedReauthPeriod"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthMode"), ("HP-USER-AUTH", "hpicfUsrAuthMacPin"), ("HP-USER-AUTH", "hpicfMacAuthRetainUnauthClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthConfigGroup3 = hpicfUsrAuthMacAuthConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthConfigGroup3.setDescription('A collection of objects providing configuration objects for MAC-based authentication associated with each port.')
hpicfUsrAuthCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4))
hpicfUsrAuthCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance = hpicfUsrAuthCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 2)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance1 = hpicfUsrAuthCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance1.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 3)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance2 = hpicfUsrAuthCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance2.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 4)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance3 = hpicfUsrAuthCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance3.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 5)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacGroup"), ("HP-USER-AUTH", "hpicfNotifcationConfigDataGroup"), ("HP-USER-AUTH", "hpicfUsrAuthNotificationGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance4 = hpicfUsrAuthCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance4.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 6)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance5 = hpicfUsrAuthCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance5.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 7)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthUsrNumberGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance6 = hpicfUsrAuthCompliance6.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance6.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 8)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfNotificationConfigDataGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance7 = hpicfUsrAuthCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance7.setDescription('The compliance statement for device support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 9)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfNotificationConfigDataGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance8 = hpicfUsrAuthCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance8.setDescription('The compliance statement for device support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 10)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfNotificationConfigDataGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance9 = hpicfUsrAuthCompliance9.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance9.setDescription('The compliance statement for device support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 11)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacGroup"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfNotificationConfigDataGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance10 = hpicfUsrAuthCompliance10.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance10.setDescription('The compliance statement for device support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 12)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance11 = hpicfUsrAuthCompliance11.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance11.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 13)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance12 = hpicfUsrAuthCompliance12.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance12.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 14)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacGroup1"), ("HP-USER-AUTH", "hpicfNotifcationConfigDataGroup"), ("HP-USER-AUTH", "hpicfUsrAuthNotificationGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance13 = hpicfUsrAuthCompliance13.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance13.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 15)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfNotificationConfigDataGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance14 = hpicfUsrAuthCompliance14.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance14.setDescription('The compliance statement for device support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 16)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance15 = hpicfUsrAuthCompliance15.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance15.setDescription('The compliance statement for devices support of HP-USER-AUTH MIB.')
hpicfUsrAuthCompliance16 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 7, 4, 17)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthSystemGroup"), ("HP-USER-AUTH", "hpicfUsrAuthPortsGroup2"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthConfigGroup3"), ("HP-USER-AUTH", "hpicfUsrAuthMacGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthConfigGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthSessionStatsGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedGroup"), ("HP-USER-AUTH", "hpicfUsrAuthClientReauthenticateGroup"), ("HP-USER-AUTH", "hpicfUsrAuthRedirectServerGroup"), ("HP-USER-AUTH", "hpicfUsrAuthWMAeWAServerGroup"), ("HP-USER-AUTH", "hpicfNotificationConfigDataGroup1"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalGroup"), ("HP-USER-AUTH", "hpicfUsrAuthCaptivePortalProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthCompliance16 = hpicfUsrAuthCompliance16.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthCompliance16.setDescription('The compliance statement for device support of HP-USER-AUTH MIB.')
hpicfUsrAuthNotifyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 8))
hpicfUsrAuthNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 8, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCLIAuthFail"), ("HP-USER-AUTH", "hpicfUsrAuthPasswdChng"), ("HP-USER-AUTH", "hpicfPortSecAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthNotificationGroup = hpicfUsrAuthNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthNotificationGroup.setDescription('A group of authorization notifications.')
hpicfNotifcationConfigDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 8, 2)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCLIFailCnt"), ("HP-USER-AUTH", "hpicfUsrAuthCLIPwdNotifyCnt"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailCnt"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailMAC"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailPort"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailVlan"), ("HP-USER-AUTH", "hpicfUsrAuthPasswdNotifyEnable"), ("HP-USER-AUTH", "hpicfUsrAuthCliNotifyEnable"), ("HP-USER-AUTH", "hpicfUsrAuthPortSecNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfNotifcationConfigDataGroup = hpicfNotifcationConfigDataGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfNotifcationConfigDataGroup.setDescription('A group of notification data and configuration objects.')
hpicfNotificationConfigDataGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 8, 3)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthCLIFailCnt"), ("HP-USER-AUTH", "hpicfUsrAuthCLIInterface"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginNotifyStatus"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginNotifyAddrType"), ("HP-USER-AUTH", "hpicfUsrAuthLastLoginNotifyAddr"), ("HP-USER-AUTH", "hpicfUsrAuthCLIPwdNotifyCnt"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailCnt"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailMAC"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailPort"), ("HP-USER-AUTH", "hpicfUsrAuthWMAFailVlan"), ("HP-USER-AUTH", "hpicfUsrAuthPasswdNotifyEnable"), ("HP-USER-AUTH", "hpicfUsrAuthCliNotifyEnable"), ("HP-USER-AUTH", "hpicfUsrAuthPortSecNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfNotificationConfigDataGroup1 = hpicfNotificationConfigDataGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfNotificationConfigDataGroup1.setDescription('A group of notification data and configuration objects.')
hpicfUsrAuthMacGlobalConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 9))
hpicfUsrAuthMacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 9, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacGroup = hpicfUsrAuthMacGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrAuthMacGroup.setDescription('A group of Mac auth global configuration objects.')
hpicfUsrAuthMacGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 9, 2)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthPassword"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthPasswordEncrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacGroup1 = hpicfUsrAuthMacGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacGroup1.setDescription('A group of Mac auth global configuration objects.')
hpicfUsrAuthWebAuthAccessDeniedConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 10))
hpicfUsrAuthWebAuthAccessDeniedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 10, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedMode"), ("HP-USER-AUTH", "hpicfUsrAuthWebAuthAccessDeniedMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthWebAuthAccessDeniedGroup = hpicfUsrAuthWebAuthAccessDeniedGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthWebAuthAccessDeniedGroup.setDescription('A group of web-auth access denied configuration objects.')
hpicfUsrAuthMacAuthUsrNumberConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 11))
hpicfUsrAuthMacAuthUsrNumberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 19, 11, 1)).setObjects(("HP-USER-AUTH", "hpicfUsrAuthMacAuthUsrNumberCnt"), ("HP-USER-AUTH", "hpicfUsrAuthMacAuthSessionUsrNumberCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrAuthMacAuthUsrNumberGroup = hpicfUsrAuthMacAuthUsrNumberGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrAuthMacAuthUsrNumberGroup.setDescription('Number of Mac authenticated client objects in the switch and port.')
mibBuilder.exportSymbols("HP-USER-AUTH", hpicfUsrAuthWebAuthSessionMacAddr=hpicfUsrAuthWebAuthSessionMacAddr, hpicfUsrAuthClientReauthenticateMacAddress=hpicfUsrAuthClientReauthenticateMacAddress, hpicfUsrAuthMacAuthSessionAuthVid=hpicfUsrAuthMacAuthSessionAuthVid, hpicfUsrAuthPasswdChng=hpicfUsrAuthPasswdChng, hpicfUsrAuthMacAuthClientReauthenticateTable=hpicfUsrAuthMacAuthClientReauthenticateTable, hpicfUsrAuthCaptivePortalConfigEnabled=hpicfUsrAuthCaptivePortalConfigEnabled, hpicfUsrAuthPortsGroup1=hpicfUsrAuthPortsGroup1, hpicfUsrAuthMacAuthSessionState=hpicfUsrAuthMacAuthSessionState, hpicfUsrAuthCliNotifyEnable=hpicfUsrAuthCliNotifyEnable, hpicfUsrAuthWebAuthSessionUnauthVid=hpicfUsrAuthWebAuthSessionUnauthVid, hpicfUsrAuthCaptivePortalConfig=hpicfUsrAuthCaptivePortalConfig, hpicfUsrAuthWMAeWAServerGroup=hpicfUsrAuthWMAeWAServerGroup, hpicfUsrAuthCompliance7=hpicfUsrAuthCompliance7, hpicfUsrAuthCompliance9=hpicfUsrAuthCompliance9, hpicfUsrAuthMacAuthCachedReauthPeriod=hpicfUsrAuthMacAuthCachedReauthPeriod, hpicfUsrAuthWMAFailPort=hpicfUsrAuthWMAFailPort, hpicfUsrAuthWebAuthServerTimeout=hpicfUsrAuthWebAuthServerTimeout, hpicfUsrAuthCompliance1=hpicfUsrAuthCompliance1, hpicfUsrAuthClientReauthenticateInterfaceIndex=hpicfUsrAuthClientReauthenticateInterfaceIndex, hpicfUsrAuthConformance=hpicfUsrAuthConformance, hpicfUsrAuthMacGroup=hpicfUsrAuthMacGroup, hpicfUsrAuthMacAuthAdminStatus=hpicfUsrAuthMacAuthAdminStatus, hpicfUsrAuthLastLoginEntry=hpicfUsrAuthLastLoginEntry, hpicfUsrAuthMacAuthSessionStateTime=hpicfUsrAuthMacAuthSessionStateTime, hpicfUsrAuthLastLoginIndex=hpicfUsrAuthLastLoginIndex, hpicfMacAuthRetainUnauthClients=hpicfMacAuthRetainUnauthClients, hpicfUsrAuthLastLoginNotifyStatus=hpicfUsrAuthLastLoginNotifyStatus, hpicfUsrAuthWebAuthDhcpBaseAddress=hpicfUsrAuthWebAuthDhcpBaseAddress, hpicfUsrAuthMacAuthClientLimit=hpicfUsrAuthMacAuthClientLimit, hpicfUsrAuthLastLoginSuccTime=hpicfUsrAuthLastLoginSuccTime, hpicfUsrAuthRedirectServerRestrictiveFilter=hpicfUsrAuthRedirectServerRestrictiveFilter, hpicfUsrAuthCompliance15=hpicfUsrAuthCompliance15, hpicfUsrAuthCompliances=hpicfUsrAuthCompliances, hpicfUsrAUthWMAeWAServerRowStatus=hpicfUsrAUthWMAeWAServerRowStatus, hpicfUsrAuthClientReauthenticateTable=hpicfUsrAuthClientReauthenticateTable, hpicfUsrAuthWebAuthSessionStatsTable=hpicfUsrAuthWebAuthSessionStatsTable, hpicfUsrAuthMacAuthClientReauthenticateEntry=hpicfUsrAuthMacAuthClientReauthenticateEntry, hpicfUsrAuthLastLoginGroup=hpicfUsrAuthLastLoginGroup, hpicfUsrAuthLastLoginTable=hpicfUsrAuthLastLoginTable, hpicfUsrAuthWebAuthServerMaxReq=hpicfUsrAuthWebAuthServerMaxReq, hpicfUsrAuthMacGroup1=hpicfUsrAuthMacGroup1, hpicfUsrAuthMacAuthUsrNumberConformance=hpicfUsrAuthMacAuthUsrNumberConformance, hpicfUsrAuthWebAuthConfig=hpicfUsrAuthWebAuthConfig, hpicfUsrAuthMacAuthSessionUnauthVid=hpicfUsrAuthMacAuthSessionUnauthVid, hpicfUsrAuthLastLoginUnsuccTime=hpicfUsrAuthLastLoginUnsuccTime, hpicfUsrAuthWebAuthDhcpLease=hpicfUsrAuthWebAuthDhcpLease, hpicfUsrAuthCLIPasswdSet=hpicfUsrAuthCLIPasswdSet, hpicfUsrAuthWMAeWAServerIPAddressType=hpicfUsrAuthWMAeWAServerIPAddressType, hpicfUsrAuthMacAuthSessionUsrNumberCnt=hpicfUsrAuthMacAuthSessionUsrNumberCnt, hpicfUsrAuthCompliance11=hpicfUsrAuthCompliance11, hpicfUsrAuthWMAFailVlan=hpicfUsrAuthWMAFailVlan, hpicfUsrAuthMacAuthClientReauthenticateInterfaceIndex=hpicfUsrAuthMacAuthClientReauthenticateInterfaceIndex, hpicfUsrAuthWMAFailMAC=hpicfUsrAuthWMAFailMAC, hpicfUsrAuthWebAuthMaxRetries=hpicfUsrAuthWebAuthMaxRetries, hpicfUsrAuthWMAFailCnt=hpicfUsrAuthWMAFailCnt, hpicfUsrAuthWMAEWAServerEntry=hpicfUsrAuthWMAEWAServerEntry, hpicfUsrAuthMacAuthLogoffPeriod=hpicfUsrAuthMacAuthLogoffPeriod, hpicfUsrAuthCLIFailCnt=hpicfUsrAuthCLIFailCnt, hpicfUsrAuthWebAuthSessionStatsEntry=hpicfUsrAuthWebAuthSessionStatsEntry, hpicfUsrAuthWebAuthClientReauthenticateTable=hpicfUsrAuthWebAuthClientReauthenticateTable, hpicfUsrAuthMacAuthServerTimeout=hpicfUsrAuthMacAuthServerTimeout, hpicfUsrAuthWebAuthAccessDeniedMessage=hpicfUsrAuthWebAuthAccessDeniedMessage, hpicfUsrAuthMacAuthConfigGroup3=hpicfUsrAuthMacAuthConfigGroup3, hpicfUsrAuthWebAuthClientReauthenticate=hpicfUsrAuthWebAuthClientReauthenticate, hpicfUsrAuthCompliance3=hpicfUsrAuthCompliance3, hpicfUsrAuthPortSecNotifyEnable=hpicfUsrAuthPortSecNotifyEnable, hpicfUsrAuthWebAuthAccessDeniedGroup=hpicfUsrAuthWebAuthAccessDeniedGroup, hpicfUsrAuthUseLLDPData=hpicfUsrAuthUseLLDPData, hpicfUsrAuthWebAuthClientLimit=hpicfUsrAuthWebAuthClientLimit, hpicfUsrAuthWebAuthConfigEntry=hpicfUsrAuthWebAuthConfigEntry, hpicfUsrAuthMacAuthConfigGroup=hpicfUsrAuthMacAuthConfigGroup, hpicfUsrAuthCaptivePortalProfileRowStatus=hpicfUsrAuthCaptivePortalProfileRowStatus, hpicfUsrAuthCompliance4=hpicfUsrAuthCompliance4, hpicfUsrAuthRedirectServerIndex=hpicfUsrAuthRedirectServerIndex, hpicfUsrAuthMacAuthConfigTable=hpicfUsrAuthMacAuthConfigTable, hpicfUsrAuthWebAuthDhcpMask=hpicfUsrAuthWebAuthDhcpMask, hpicfUsrAuthRedirectServerEntry=hpicfUsrAuthRedirectServerEntry, hpicfUsrAuthLastLoginDeleteAll=hpicfUsrAuthLastLoginDeleteAll, hpicfUsrAuthCLIPwdNotifyCnt=hpicfUsrAuthCLIPwdNotifyCnt, hpicfUsrAuthMacAuthUsrNumberGroup=hpicfUsrAuthMacAuthUsrNumberGroup, hpicfUsrAuthMacGlobalConformance=hpicfUsrAuthMacGlobalConformance, hpicfUsrAuthNotificationGroup=hpicfUsrAuthNotificationGroup, hpicfUsrAuthLastLoginSuccAddrType=hpicfUsrAuthLastLoginSuccAddrType, hpicfUsrAuthLastLoginUnsuccCount=hpicfUsrAuthLastLoginUnsuccCount, hpicfUsrAuthRedirectServerAuthFailureStats=hpicfUsrAuthRedirectServerAuthFailureStats, hpicfUsrAuthMacAuthAuthVid=hpicfUsrAuthMacAuthAuthVid, hpicfUsrAuthWebAuthLogoffPeriod=hpicfUsrAuthWebAuthLogoffPeriod, hpicfUsrAuthLastLoginGeneration=hpicfUsrAuthLastLoginGeneration, hpicfUsrAuthCaptivePortalProfileName=hpicfUsrAuthCaptivePortalProfileName, hpicfUsrAuthWebAuthQuietPeriod=hpicfUsrAuthWebAuthQuietPeriod, hpicfUsrAuthWebAuthSessionName=hpicfUsrAuthWebAuthSessionName, hpicfUsrAuthLastLoginCurrentGeneration=hpicfUsrAuthLastLoginCurrentGeneration, hpicfPortSecAuthFailure=hpicfPortSecAuthFailure, hpicfUsrAuthRedirectServerURL=hpicfUsrAuthRedirectServerURL, hpicfNotifcationConfigDataGroup=hpicfNotifcationConfigDataGroup, hpicfUsrAuthWebAuthCacheCredentials=hpicfUsrAuthWebAuthCacheCredentials, hpicfUsrAuthPortsGroup=hpicfUsrAuthPortsGroup, hpicfUsrAuthWMAeWAServerPath=hpicfUsrAuthWMAeWAServerPath, hpicfUsrAuthWebAuthSessionTimeout=hpicfUsrAuthWebAuthSessionTimeout, hpicfUsrAuthLastLoginNotifyAddr=hpicfUsrAuthLastLoginNotifyAddr, PYSNMP_MODULE_ID=hpicfUsrAuthMIB, hpicfUsrAuthCaptivePortalProfileEntry=hpicfUsrAuthCaptivePortalProfileEntry, hpicfUsrAuthWebAuthAuthVid=hpicfUsrAuthWebAuthAuthVid, hpicfUsrAuthCompliance2=hpicfUsrAuthCompliance2, hpicfUsrAuthWebAuthClientReauthenticateMacAddress=hpicfUsrAuthWebAuthClientReauthenticateMacAddress, hpicfUsrAuthRedirectServerTable=hpicfUsrAuthRedirectServerTable, hpicfUsrAuthWebAuthAccessDeniedMode=hpicfUsrAuthWebAuthAccessDeniedMode, hpicfUsrAuthWebAuthSSLState=hpicfUsrAuthWebAuthSSLState, hpicfUsrAuthNotifications=hpicfUsrAuthNotifications, hpicfUsrAuthMacAuthClientReauthenticate=hpicfUsrAuthMacAuthClientReauthenticate, hpicfUsrAuthMacAuthSessionStatsEntry=hpicfUsrAuthMacAuthSessionStatsEntry, hpicfUsrAuthCLIInterface=hpicfUsrAuthCLIInterface, hpicfUsrAuthRedirectServerRowStatus=hpicfUsrAuthRedirectServerRowStatus, hpicfUsrAuthPorts=hpicfUsrAuthPorts, hpicfUsrAuthLMAAdminStatus=hpicfUsrAuthLMAAdminStatus, hpicfUsrAuthWebAuthClientReauthenticateInterfaceIndex=hpicfUsrAuthWebAuthClientReauthenticateInterfaceIndex, hpicfUsrAuthClientReauthenticate=hpicfUsrAuthClientReauthenticate, hpicfUsrAuthCompliance10=hpicfUsrAuthCompliance10, hpicfUsrAuthPortReauthenticate=hpicfUsrAuthPortReauthenticate, hpicfNotificationConfigDataGroup1=hpicfNotificationConfigDataGroup1, hpicfUsrAuthWebAuthAdminStatus=hpicfUsrAuthWebAuthAdminStatus, hpicfUsrAuthMacAuthSessionMacAddr=hpicfUsrAuthMacAuthSessionMacAddr, hpicfUsrAuthPortEntry=hpicfUsrAuthPortEntry, hpicfUsrAuthLastLoginName=hpicfUsrAuthLastLoginName, hpicfUsrAuthMacAuthClientReauthenticateMacAddress=hpicfUsrAuthMacAuthClientReauthenticateMacAddress, hpicfUsrAuthWebAuthAccessDeniedConformance=hpicfUsrAuthWebAuthAccessDeniedConformance, hpicfUsrAuthWebAuthReAuthPeriod=hpicfUsrAuthWebAuthReAuthPeriod, hpicfUsrAuthWMAeWAServerIPAddress=hpicfUsrAuthWMAeWAServerIPAddress, hpicfUsrAuthPortTable=hpicfUsrAuthPortTable, hpicfUsrAuthWebAuthSessionStatsGroup2=hpicfUsrAuthWebAuthSessionStatsGroup2, hpicfUsrAuthMacAuthConfigEntry=hpicfUsrAuthMacAuthConfigEntry, hpicfUsrAuthPortNumber=hpicfUsrAuthPortNumber, hpicfUsrAuthWebAuthRedirectUrl=hpicfUsrAuthWebAuthRedirectUrl, hpicfUsrAuthMacAuthStats=hpicfUsrAuthMacAuthStats, hpicfUsrAuthCaptivePortalProfileGroup=hpicfUsrAuthCaptivePortalProfileGroup, hpicfUsrAuthMacAuthUnauthVid=hpicfUsrAuthMacAuthUnauthVid, hpicfUsrAuthMacAuthSessionStatsGroup2=hpicfUsrAuthMacAuthSessionStatsGroup2, hpicfUsrAuthCompliance12=hpicfUsrAuthCompliance12, hpicfUsrAuthMacAuthServerMaxReq=hpicfUsrAuthMacAuthServerMaxReq, hpicfUsrAuthMacAuthSessionStatsGroup=hpicfUsrAuthMacAuthSessionStatsGroup, hpicfUsrAuthMacAuthConfigGroup1=hpicfUsrAuthMacAuthConfigGroup1, hpicfUsrAuthMacAuthSessionTimeout=hpicfUsrAuthMacAuthSessionTimeout, hpicfUsrAuthMacAuthMode=hpicfUsrAuthMacAuthMode, hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted=hpicfUsrAuthCaptivePortalUrlHashKeyEncrypted, hpicfUsrAuthLLDPBypassAdminStatus=hpicfUsrAuthLLDPBypassAdminStatus, hpicfUsrAuthMacPin=hpicfUsrAuthMacPin, hpicfUsrAuthWebAuthSessionStatsGroup=hpicfUsrAuthWebAuthSessionStatsGroup, hpicfUsrAuthGroups=hpicfUsrAuthGroups, hpicfUsrAuthWebAuthClientReauthenticateEntry=hpicfUsrAuthWebAuthClientReauthenticateEntry, hpicfUsrAuthMacAuthUnAuthPeriod=hpicfUsrAuthMacAuthUnAuthPeriod, hpicfUsrAuthMacAuthPassword=hpicfUsrAuthMacAuthPassword, hpicfUsrAuthCompliance16=hpicfUsrAuthCompliance16, hpicfUsrAuthWMAEWAServerTable=hpicfUsrAuthWMAEWAServerTable, hpicfUsrAuthRedirectServerGroup=hpicfUsrAuthRedirectServerGroup, hpicfUsrAuthCaptivePortal=hpicfUsrAuthCaptivePortal, hpicfUsrAuthWebAuthConfigTable=hpicfUsrAuthWebAuthConfigTable, hpicfUsrAuthWebAuthCachedReauthPeriod=hpicfUsrAuthWebAuthCachedReauthPeriod, hpicfUsrAuthLastLoginSuccAddr=hpicfUsrAuthLastLoginSuccAddr, hpicfUsrAuthCaptivePortalUrlHashKey=hpicfUsrAuthCaptivePortalUrlHashKey, hpicfUsrAuthWebAuthSessionState=hpicfUsrAuthWebAuthSessionState, hpicfUsrAuthPasswdNotifyEnable=hpicfUsrAuthPasswdNotifyEnable, hpicfUsrAuthMacAuthSessionRole=hpicfUsrAuthMacAuthSessionRole, hpicfUsrAuthRedirectServerClientTimeout=hpicfUsrAuthRedirectServerClientTimeout, hpicfUsrAuthPortsGroup2=hpicfUsrAuthPortsGroup2, hpicfUsrAuthWMAeWAServerIndex=hpicfUsrAuthWMAeWAServerIndex, hpicfUsrAuthLastLoginPrivilege=hpicfUsrAuthLastLoginPrivilege, hpicfUsrAuthMacAuthPasswordEncrypted=hpicfUsrAuthMacAuthPasswordEncrypted, hpicfUsrAuthClientReauthenticateGroup=hpicfUsrAuthClientReauthenticateGroup, hpicfUsrAuthLastLoginNotifyAddrType=hpicfUsrAuthLastLoginNotifyAddrType, hpicfUsrAuthWebAuthSessionStateTime=hpicfUsrAuthWebAuthSessionStateTime, hpicfUsrAuthWebAuthSessionStatsGroup1=hpicfUsrAuthWebAuthSessionStatsGroup1, hpicfUsrAuthCaptivePortalGroup=hpicfUsrAuthCaptivePortalGroup, hpicfUsrAuthCompliance8=hpicfUsrAuthCompliance8, hpicfUsrAuthNotifyConformance=hpicfUsrAuthNotifyConformance, hpicfUsrAuthMacAuthAddrFormat=hpicfUsrAuthMacAuthAddrFormat, hpicfUsrAuthCompliance6=hpicfUsrAuthCompliance6, hpicfUsrAuthCompliance5=hpicfUsrAuthCompliance5, hpicfUsrAuthMacAuthSessionStatsGroup1=hpicfUsrAuthMacAuthSessionStatsGroup1, hpicfUsrAuthMacAuthClientMoves=hpicfUsrAuthMacAuthClientMoves, hpicfUsrAuthWebAuthConfigGroup1=hpicfUsrAuthWebAuthConfigGroup1, hpicfUsrAuthWebAuthSessionRole=hpicfUsrAuthWebAuthSessionRole, hpicfUsrAuthWebAuthClientMoves=hpicfUsrAuthWebAuthClientMoves, hpicfUsrAuthWebAuthUnauthVid=hpicfUsrAuthWebAuthUnauthVid, hpicfUsrAuthCaptivePortalProfileRedirectUrl=hpicfUsrAuthCaptivePortalProfileRedirectUrl, hpicfUsrAuthSystem=hpicfUsrAuthSystem, hpicfUsrAuthMacAuthSessionStatsTable=hpicfUsrAuthMacAuthSessionStatsTable, hpicfUsrAuthMacAuthReAuthPeriod=hpicfUsrAuthMacAuthReAuthPeriod, hpicfUsrAuthMacAuthUsrNumberCnt=hpicfUsrAuthMacAuthUsrNumberCnt, hpicfUsrAuthMacAuthQuietPeriod=hpicfUsrAuthMacAuthQuietPeriod, hpicfUsrAuthCompliance14=hpicfUsrAuthCompliance14, hpicfUsrAuthMacAuthSessionName=hpicfUsrAuthMacAuthSessionName, hpicfUsrAuthCaptivePortalProfileType=hpicfUsrAuthCaptivePortalProfileType, hpicfUsrAuthClientReauthenticateEntry=hpicfUsrAuthClientReauthenticateEntry, hpicfUsrAuthCLIAuthFail=hpicfUsrAuthCLIAuthFail, hpicfUsrAuthWebAuthStats=hpicfUsrAuthWebAuthStats, hpicfUsrAuthCaptivePortalProfileTable=hpicfUsrAuthCaptivePortalProfileTable, hpicfUsrAuthCacheCredTimeOut=hpicfUsrAuthCacheCredTimeOut, hpicfUsrAuthCompliance13=hpicfUsrAuthCompliance13, hpicfUsrAuthSystemGroup=hpicfUsrAuthSystemGroup, hpicfUsrAuthMacAuthConfig=hpicfUsrAuthMacAuthConfig, hpicfUsrAuthLastLogin=hpicfUsrAuthLastLogin, hpicfUsrAuthWebAuthSessionAuthVid=hpicfUsrAuthWebAuthSessionAuthVid, hpicfUsrAuthMacAuthConfigGroup2=hpicfUsrAuthMacAuthConfigGroup2, hpicfUsrAuthMIB=hpicfUsrAuthMIB, hpicfUsrAuthCompliance=hpicfUsrAuthCompliance, hpicfUsrAuthWebAuthConfigGroup=hpicfUsrAuthWebAuthConfigGroup)
