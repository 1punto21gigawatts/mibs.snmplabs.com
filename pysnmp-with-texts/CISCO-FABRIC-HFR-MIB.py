#
# PySNMP MIB module CISCO-FABRIC-HFR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FABRIC-HFR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Unsigned32, NotificationType, Counter64, Counter32, IpAddress, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Unsigned32", "NotificationType", "Counter64", "Counter32", "IpAddress", "Bits", "Gauge32")
DisplayString, TextualConvention, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue")
ciscoFabricHfrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 257))
ciscoFabricHfrMIB.setRevisions(('2009-04-14 00:00', '2006-01-01 00:00', '2003-06-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFabricHfrMIB.setRevisionsDescriptions(("Added cfhPlaneCapacityThreshold object. Added enum value 'oos' in cfhPlaneOperStatus. Deprecated cfhMIBCompliance statement. Added cfhMIBCompliance1 statement.", "Replace 'HFR' keyword with 'Enhanced Benes' Replace 'sponge' keyword with 'fabricq' Replace 'sprayer' keyword with 'ingressq'.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFabricHfrMIB.setLastUpdated('200904140000Z')
if mibBuilder.loadTexts: ciscoFabricHfrMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFabricHfrMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-fabric@cisco.com')
if mibBuilder.loadTexts: ciscoFabricHfrMIB.setDescription('Cisco Enhanced Benes fabric MIB module. This MIB module is used for managing/tracking the Ehanced Benes Fabric entities and/or fabric related configuration, state and statistics information. The fabric entities relationship is shown as follows: Acronyms and terms: RP - Routing processor. DRP - Distributed Route Processor. LC - Line card. SFE - switch fabric element. SFE port - the port of SFE contains a transmitter and/or receiver to transmit and/or receive data from backplane. fabric link - Fabric link. +-+ +-+ |T1+=====================================>+R| +-+ single fabric link +-+ A fabric link contains a transmitter T and receiver R. The transmitter T is in the source SFE port of the fabric link and the receiver R is in the destination SFE port of the fabric link. OIM - Optical Interface Module. fabric bundle - Fabric bundle is a cable that contains one or more fabric links for transferring data between fabric cards. +-+ +-+ |A+==================/====================+B| +-+ 1..N fabric links +-+ A fabric bundle cable contains 1 to N fabric links. One end of the fabric bundle cable is plugged into the fabric bundle port A of fabric card in Line card rack and the other end is plugged into the fabric bundle port B on a OIM of fabric rack for the high speed data transfer between fabric bundle port A and B. ingressq - a switch fabric element which queues/segments packets into cells and sends them into fabric. fabricq - a switch fabric element which resequences and reassembles cells from fabric into packets and forwarding them to the egress interface related hardware. fabric plane - Fabric plane is a path from a set of ingressqs in a RP/DRP or LC card to a set of fabricqs in other RP/DRP or LC cards for transferring data between RP, DRP, and LC cards.')
cfhMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 0))
ciscoFabricHfrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1))
cfhGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1))
cfhPlane = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2))
cfhBundle = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3))
cfhBundlePort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4))
cfhCard = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5))
class CfhPlane(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each fabric plane in the managed system. It is recommended that values are assigned contiguously starting from 1.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CfhBundle(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each fabric bundle in the managed system. It is recommended that values are assigned contiguously starting from 1.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CfhAdminState(TextualConvention, Integer32):
    description = 'An enumerated value that provides an indication of the desired administrative state of a fabric entity. up - bring up the fabric entities. down - shut down the fabric entities.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class CfhScaledPercentage(TextualConvention, Gauge32):
    description = "This textual convention represents scaled percentage values (i.e., percentage values multipled by a power of ten) for error ratio, resource availability/reliability/connectivity usage, etc. The UINTS clause associated with each object that use this textual convention as syntax will indicate the degree of precision up to industry standard five 9's (i.e., 99.999%) requirement."
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 100000)

cfhGenPlaneStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhGenPlaneStateTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cfhGenPlaneStateTrapEnable.setDescription("This object indicates whether cfhPlaneStateNotification traps should be generated for fabric plane operational status change. If the value of this object is 'true', cfhPlaneStateNotification traps will be generated when a fabric plane operational status transition occurs.")
cfhGenBundleStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhGenBundleStateTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cfhGenBundleStateTrapEnable.setDescription("This object indicates whether cfhBundleStateNotification traps should be generated for fabric bundle operational status change. If the value of this object is 'true', cfhBundleStateNotification traps will be generated when the cfhBundleOperStatus state transition occurs.")
cfhGenBundleDownedLinkTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhGenBundleDownedLinkTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cfhGenBundleDownedLinkTrapEnable.setDescription("This object controls whether cfhBundleDownedLinkNotification traps should be generated for the downed fabric link in a specific fabric bundle. If the value of this object is 'true', the cfhBundleDownedLinkNotification traps will be generated when the number of downed links in fabric bundle has transitioned from 0 to 1 or from 1 to 0.")
cfhPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1), )
if mibBuilder.loadTexts: cfhPlaneTable.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneTable.setDescription('This table containing information about fabric plane state and statistics in the managed system.')
cfhPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-FABRIC-HFR-MIB", "cfhPlaneId"))
if mibBuilder.loadTexts: cfhPlaneEntry.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneEntry.setDescription('The information regarding a single fabric plane. An entry of this table is created when the fabric plane related hardware is detected by fabric software in the managed system.')
cfhPlaneId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 1), CfhPlane())
if mibBuilder.loadTexts: cfhPlaneId.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneId.setDescription("The fabric plane identifier. A unique value, greater than zero, for each fabric plane hardware that is detected by the fabric software in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each fabric plane ID must remain constant from one re-initialization of the entity's network management system to the next re-initialization.")
cfhPlaneAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 2), CfhAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhPlaneAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneAdminStatus.setDescription("This object controls whether the fabric plane should be brought 'down' or 'up'.")
cfhPlaneOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("mcastDown", 3), ("oos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneOperStatus.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneOperStatus.setDescription("This object indicates the current fabric plane operational status. up - The plane is fully 'up' (i.e., the plane can pass both unicast and multicast traffic). down - The plane is fully 'down' (i.e., th plane can't pass both unicast and multicast traffic). mcastDown - The multicast state of the plane is 'down' (i.e., unicast traffic can pass though the plane but multicast traffic can't). oos - The plane is out of service (i.e., online diag detects the fabric transport media has problem in the plane).")
cfhPlaneTotalBundles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneTotalBundles.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneTotalBundles.setDescription('The total number of fabric bundles in the fabric plane.')
cfhPlaneDownedBundles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneDownedBundles.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneDownedBundles.setDescription('The current number of downed fabric bundles in the fabric plane.')
cfhPlaneStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2), )
if mibBuilder.loadTexts: cfhPlaneStatsTable.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsTable.setDescription('This table containing statistics information for the fabric planes in the managed system. Discontinuities in the value of all statistics counters in this table might occur if chassis removal or re-initialization occurs in a managed system. The value of cfhPlaneStatsCounterDiscTime is updated when the counter of fabric plane discontinuity occurs.')
cfhPlaneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1), )
cfhPlaneEntry.registerAugmentions(("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsEntry"))
cfhPlaneStatsEntry.setIndexNames(*cfhPlaneEntry.getIndexNames())
if mibBuilder.loadTexts: cfhPlaneStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsEntry.setDescription('The information regarding a single fabric plane related statistics.')
cfhPlaneStatsRxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxDataCells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsRxDataCells.setDescription('The accumulated number of data cells have been received by all link receivers for this plane.')
cfhPlaneStatsTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsTxDataCells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsTxDataCells.setDescription('The accumulated number of data cells had been transmitted by all link transmitters for this plane.')
cfhPlaneStatsRxCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxCECells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsRxCECells.setDescription('The accumulated number of correctable errored cells had been received by all link receivers for this plane.')
cfhPlaneStatsRxUCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxUCECells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsRxUCECells.setDescription('The accumulated number of uncorrectable errored cells had been received by all link receivers for this plane.')
cfhPlaneStatsRxPECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxPECells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsRxPECells.setDescription('The accumulated number of corrupted cells (e.g., parity error was detected in the cells) have been received by all fabric link receivers for this plane.')
cfhPlaneStatsUnicastLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsUnicastLostCells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsUnicastLostCells.setDescription('The accumulated number of unicast cell loss for this plane. The lost cells are ones that had to be dropped because of queue overflow, or some such reason.')
cfhPlaneStatsMulticastLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsMulticastLostCells.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsMulticastLostCells.setDescription('The accumulated number of multicast cell loss for this plane. The lost cells are ones that had to be dropped because of queue overflow, or some such reason.')
cfhPlaneStatsCounterDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsCounterDiscTime.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStatsCounterDiscTime.setDescription("The value of sysUpTime on the most recent occasion at which all of fabric plane's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
cfhPlaneCapacityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhPlaneCapacityThreshold.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneCapacityThreshold.setDescription("This object specifies the minimum required number of fabric planes whose cfhPlaneOperStatus value is 'up' in order for the system to be considered fully operational.")
cfhBundleTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleTotal.setStatus('current')
if mibBuilder.loadTexts: cfhBundleTotal.setDescription('The total number of fabric bundles in the managed system.')
cfhBundleDowned = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleDowned.setStatus('current')
if mibBuilder.loadTexts: cfhBundleDowned.setDescription('The current number of downed fabric bundles in the managed system.')
cfhBundleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3), )
if mibBuilder.loadTexts: cfhBundleTable.setStatus('current')
if mibBuilder.loadTexts: cfhBundleTable.setDescription('This table containing information about fabric bundle state and statistics in the managed system.')
cfhBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-FABRIC-HFR-MIB", "cfhBundleId"))
if mibBuilder.loadTexts: cfhBundleEntry.setStatus('current')
if mibBuilder.loadTexts: cfhBundleEntry.setDescription('The information regarding a single fabric bundle. An entry of this table is created when the fabric bundle related hardware is detected by fabric software in the managed system.')
cfhBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 1), CfhBundle())
if mibBuilder.loadTexts: cfhBundleId.setStatus('current')
if mibBuilder.loadTexts: cfhBundleId.setDescription('The fabric bundle identifier. A unique value, greater than zero, for each fabric bundle hardware that is detected by the fabric software in the managed system.')
cfhBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleName.setStatus('current')
if mibBuilder.loadTexts: cfhBundleName.setDescription("The textual name of the interface. The value of this object should be the name of the fabric bundle as assigned by the fabric software and should be suitable for use in commands entered at the device's `console' The bundle name is a location string with the following syntax <rack>/<slot>/<module>/<bundle port>. Where <rack> is line card rack, <slot> is the fabric card slot, <module> is fabric module and <bundle port> is the bundle connector on the fabric card ofnor OIM")
cfhBundlePlane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 3), CfhPlane()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePlane.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePlane.setDescription('The fabric bundle associated fabric plane.')
cfhBundleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleOperStatus.setStatus('current')
if mibBuilder.loadTexts: cfhBundleOperStatus.setDescription('This object indicates the current fabric bundle operational status.')
cfhBundleTotalLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleTotalLinks.setStatus('current')
if mibBuilder.loadTexts: cfhBundleTotalLinks.setDescription('The total fabric links in the fabric bundle.')
cfhBundleDownedLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleDownedLinks.setStatus('current')
if mibBuilder.loadTexts: cfhBundleDownedLinks.setDescription('The current number of downed fabric links in the fabric bundle.')
cfhBundlePortLCRCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 7), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortLCRCardIndex.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortLCRCardIndex.setDescription('The physical entity index of fabric card in the line card rack for the line card rack bundle port of the fabric bundle.')
cfhBundlePortLCRId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortLCRId.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortLCRId.setDescription('The fabric bundle port identifier of the physical fabric bundle port that is on the cfhBundlePortLCRCardIndex associated fabric card.')
cfhBundlePortSecondCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 9), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortSecondCardIndex.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortSecondCardIndex.setDescription('The physical entity index of OIM in the fabric rack or fabric card in line card rack (only apply to a two line card racks system) for the second bundle port of the fabric bundle.')
cfhBundlePortSecondId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortSecondId.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortSecondId.setDescription('The second fabric bundle port id of the physical fabric bundle port that is on the cfhBundlePort2CardIndex associated fabric card.')
cfhBundlePortTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortTotalNumber.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortTotalNumber.setDescription('The total number of fabric bundle ports in the managed system.')
cfhBundlePortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2), )
if mibBuilder.loadTexts: cfhBundlePortTable.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortTable.setDescription('This table contains one row per fabric bundle port that contains the port state and the aggregation information of traffic and error statistics. The total number of fabric bundle ports is given by the value of cdfhBundlePortNumber.')
cfhBundlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-HFR-MIB", "cfhBundlePortId"))
if mibBuilder.loadTexts: cfhBundlePortEntry.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortEntry.setDescription('The information regarding a fabric bundle port. An entry of this table is created when a fabric bundle port is detected by the fabric software. The entry is removed when the fabric bundle port associated card is removed.')
cfhBundlePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfhBundlePortId.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortId.setDescription('A unique value, greater than zero, for each fabric bundle port on a fabric card or OIM.')
cfhBundlePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 3), CfhAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhBundlePortAdminState.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortAdminState.setDescription("The object controls whether the fabric bundle port should be brought 'up' or shut 'down' administratively. up - bring up all fabric link transmitters and/or receivers of the fabric bundle port. down - shut down all fabric link transmitters and/or receivers of the fabric bundle port.")
cfhBundlePortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortOperState.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortOperState.setDescription("The object indicates the operational state of the fabric bundle port. unknown - the bundle port state is unknown or in the transition between 'up' and 'down' state. up - bundle port operates normally down - bundle port was downed due to error condition or administratively shutdown.")
cfhBundlePortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 5), CfhBundle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortGrpId.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortGrpId.setDescription('The identifier of a fabric bundle that is associated to this fabric bundle port.')
cfhBundlePortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3), )
if mibBuilder.loadTexts: cfhBundlePortStatsTable.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsTable.setDescription('This table contains the traffic and error statistics for fabric bundle ports.')
cfhBundlePortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1), )
cfhBundlePortEntry.registerAugmentions(("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsEntry"))
cfhBundlePortStatsEntry.setIndexNames(*cfhBundlePortEntry.getIndexNames())
if mibBuilder.loadTexts: cfhBundlePortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsEntry.setDescription('The information regarding a fabric bundle port statistics.')
cfhBundlePortStatsRxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxDataCells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsRxDataCells.setDescription('The accumulated number of data cells have been received by all link receivers for this port.')
cfhBundlePortStatsTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsTxDataCells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsTxDataCells.setDescription('The accumulated number of data cells had been transmitted by all link transmitters for this port.')
cfhBundlePortStatsRxCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxCECells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsRxCECells.setDescription('The accumulated number of correctable errored cells had been received by all link receivers for this port.')
cfhBundlePortStatsRxUCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxUCECells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsRxUCECells.setDescription('The accumulated number of uncorrectable errored cells had been received by all link receivers for this port.')
cfhBundlePortStatsRxPECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxPECells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsRxPECells.setDescription('The accumulated number of corrupted cells (e.g., parity error was detected in the cells) have been received by all link receivers for this port.')
cfhBundlePortStatsHighRxCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxCECells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxCECells.setDescription('The highest accumulated number of correctable errored cells that has been received on any single link in the port.')
cfhBundlePortStatsHighRxUCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxUCECells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxUCECells.setDescription('The highest accumulated number of uncorrectable errored cells that has been received on any single link in the port.')
cfhBundlePortStatsHighRxPECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxPECells.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxPECells.setDescription('The highest accumulated number of corrupted cells (e.g., parity error was detected in the cells) that has been received on any single link in the port.')
cfhCardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1), )
if mibBuilder.loadTexts: cfhCardTable.setStatus('current')
if mibBuilder.loadTexts: cfhCardTable.setDescription('This table contains a list of fabric connection capable cards for tracking fabric related status, usage and statistics in the system.')
cfhCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfhCardEntry.setStatus('current')
if mibBuilder.loadTexts: cfhCardEntry.setDescription('The information regarding a fabric inuse state and statistics. An entry of this table is created when a fabric connection capable card is detected in the system. The entry of this table is deleted when the card is removed from the managed system.')
cfhCardFabInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardFabInUse.setStatus('current')
if mibBuilder.loadTexts: cfhCardFabInUse.setDescription("This object indicates if the fabric is in use by the card (i.e., the card can sustain the fabric control traffic via one or more fabric planes of the card). If the value of this object is 'true', then the fabric is in use by the card, otherwise it is not.")
cfhCardFabUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1, 2), CfhScaledPercentage()).setUnits('thousandths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardFabUsage.setStatus('current')
if mibBuilder.loadTexts: cfhCardFabUsage.setDescription("The scaled percentage of elapsed time that the fabric has been in use by the card (has sustained fabric control traffic to the fabric) over the time interval since the last 'discontinuity' in its measurement time. That is, the interval is restarted whenever the value of cfhCardFabInUseDiscTime is changed.")
cfhCardFabInUseDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardFabInUseDiscTime.setStatus('current')
if mibBuilder.loadTexts: cfhCardFabInUseDiscTime.setDescription('The value of sysUpTime on the most recent occasion at which the cfhCardFabUsage (fabric inuse usage) suffered a discontinuity in its measurement. If no such discontinuity has occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
cfhCardPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2), )
if mibBuilder.loadTexts: cfhCardPlaneTable.setStatus('current')
if mibBuilder.loadTexts: cfhCardPlaneTable.setDescription('This table contains the connectivity information of a card to a fabric plane in a system.')
cfhCardPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-HFR-MIB", "cfhPlaneId"))
if mibBuilder.loadTexts: cfhCardPlaneEntry.setStatus('current')
if mibBuilder.loadTexts: cfhCardPlaneEntry.setDescription('The information regarding the connectivity of a card to a fabric plane. An entry of this table is created when the card associated fabric plane is detected by the fabric software. The entry of this table is deleted when the card is removed from the managed system.')
cfhCardPlaneTxConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardPlaneTxConnectivity.setStatus('current')
if mibBuilder.loadTexts: cfhCardPlaneTxConnectivity.setDescription("This object indicates if a card can transmit data via a fabric plane on the card. If the value of this object is 'true', the card can transmit data via the fabric plane; otherwise it is not.")
cfhCardPlaneRxConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardPlaneRxConnectivity.setStatus('current')
if mibBuilder.loadTexts: cfhCardPlaneRxConnectivity.setDescription("This object indicates if a card can receive data via a fabric plane on the card. If the value of this object is 'true', the card can transfer data via the fabric plane; otherwise it is not.")
cfhPlaneStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 257, 0, 1)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneOperStatus"))
if mibBuilder.loadTexts: cfhPlaneStateNotification.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneStateNotification.setDescription('Fabric plane operational state change notification. This notification is sent when the fabric plane operational state transition occurs.')
cfhBundleStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 257, 0, 2)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundleOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePlane"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleName"))
if mibBuilder.loadTexts: cfhBundleStateNotification.setStatus('current')
if mibBuilder.loadTexts: cfhBundleStateNotification.setDescription('Fabric bundle operational state change notification. This notification is sent when the cfhBundleOperStatus state transition occurs.')
cfhBundleDownedLinkNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 257, 0, 3)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundleOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePlane"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDownedLinks"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleName"))
if mibBuilder.loadTexts: cfhBundleDownedLinkNotification.setStatus('current')
if mibBuilder.loadTexts: cfhBundleDownedLinkNotification.setDescription("Fabric bundle link notification. This notification is sent if the value of cfhBundleOperStatus is 'up' and the value of cfhBundleDownedLinks is changed from 0 to nonzero or from non-zero to zero.")
cfhMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 3))
cfhMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 1))
cfhMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2))
cfhMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 1, 1)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhGenInfoGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhCardGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhMIBCompliance = cfhMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cfhMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-FABRIC-HFR-MIB')
cfhMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 1, 2)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhGenInfoGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhCardGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhNotificationsGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhFabricCapacityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhMIBCompliance1 = cfhMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: cfhMIBCompliance1.setDescription('The compliance statement for entities which implement the CISCO-FABRIC-HFR-MIB')
cfhGenInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 1)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhGenPlaneStateTrapEnable"), ("CISCO-FABRIC-HFR-MIB", "cfhGenBundleStateTrapEnable"), ("CISCO-FABRIC-HFR-MIB", "cfhGenBundleDownedLinkTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhGenInfoGroup = cfhGenInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cfhGenInfoGroup.setDescription('A collection of objects providing the general Enhanced Benes fabric related configuration and statistics capability.')
cfhPlaneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 2)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneAdminStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneTotalBundles"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneDownedBundles"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsTxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxUCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxPECells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsUnicastLostCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsMulticastLostCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsCounterDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhPlaneGroup = cfhPlaneGroup.setStatus('current')
if mibBuilder.loadTexts: cfhPlaneGroup.setDescription('A collection of objects providing the fabric plane statistics information.')
cfhBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 3)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundleTotal"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDowned"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleName"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePlane"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleTotalLinks"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDownedLinks"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortLCRCardIndex"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortLCRId"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortSecondCardIndex"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortSecondId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhBundleGroup = cfhBundleGroup.setStatus('current')
if mibBuilder.loadTexts: cfhBundleGroup.setDescription('A collection of objects providing the fabric bundle state and statistics information.')
cfhBundlePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 4)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundlePortTotalNumber"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortAdminState"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortOperState"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortGrpId"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsTxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxUCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxPECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsHighRxCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsHighRxUCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsHighRxPECells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhBundlePortGroup = cfhBundlePortGroup.setStatus('current')
if mibBuilder.loadTexts: cfhBundlePortGroup.setDescription('A collection of objects providing the fabric bundle Port state and statistics information.')
cfhCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 5)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhCardFabInUse"), ("CISCO-FABRIC-HFR-MIB", "cfhCardFabUsage"), ("CISCO-FABRIC-HFR-MIB", "cfhCardFabInUseDiscTime"), ("CISCO-FABRIC-HFR-MIB", "cfhCardPlaneTxConnectivity"), ("CISCO-FABRIC-HFR-MIB", "cfhCardPlaneRxConnectivity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhCardGroup = cfhCardGroup.setStatus('current')
if mibBuilder.loadTexts: cfhCardGroup.setDescription('A collection of objects providing the fabric connectivity management information.')
cfhNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 6)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneStateNotification"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleStateNotification"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDownedLinkNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhNotificationsGroup = cfhNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cfhNotificationsGroup.setDescription('The notifications of ciscoFabricHfrMIB that are required to implement.')
cfhFabricCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 7)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneCapacityThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhFabricCapacityGroup = cfhFabricCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: cfhFabricCapacityGroup.setDescription('A collection of objects providing the fabric capacity management information.')
mibBuilder.exportSymbols("CISCO-FABRIC-HFR-MIB", cfhCardFabUsage=cfhCardFabUsage, cfhBundleEntry=cfhBundleEntry, cfhPlaneStatsRxDataCells=cfhPlaneStatsRxDataCells, cfhPlaneCapacityThreshold=cfhPlaneCapacityThreshold, cfhPlaneTable=cfhPlaneTable, cfhGeneral=cfhGeneral, cfhNotificationsGroup=cfhNotificationsGroup, cfhBundleDownedLinks=cfhBundleDownedLinks, cfhPlaneStatsUnicastLostCells=cfhPlaneStatsUnicastLostCells, cfhGenInfoGroup=cfhGenInfoGroup, cfhBundlePortAdminState=cfhBundlePortAdminState, cfhGenBundleDownedLinkTrapEnable=cfhGenBundleDownedLinkTrapEnable, cfhPlaneGroup=cfhPlaneGroup, cfhBundlePortStatsHighRxUCECells=cfhBundlePortStatsHighRxUCECells, cfhBundleTable=cfhBundleTable, cfhMIBGroups=cfhMIBGroups, cfhBundlePortTotalNumber=cfhBundlePortTotalNumber, cfhBundlePortStatsRxCECells=cfhBundlePortStatsRxCECells, cfhPlane=cfhPlane, cfhPlaneDownedBundles=cfhPlaneDownedBundles, cfhPlaneEntry=cfhPlaneEntry, ciscoFabricHfrMIBObjects=ciscoFabricHfrMIBObjects, cfhBundlePortSecondId=cfhBundlePortSecondId, cfhPlaneStatsRxUCECells=cfhPlaneStatsRxUCECells, cfhCardPlaneTable=cfhCardPlaneTable, cfhBundlePortStatsEntry=cfhBundlePortStatsEntry, cfhGenBundleStateTrapEnable=cfhGenBundleStateTrapEnable, cfhCard=cfhCard, cfhMIBNotifications=cfhMIBNotifications, cfhPlaneStatsEntry=cfhPlaneStatsEntry, cfhPlaneStatsMulticastLostCells=cfhPlaneStatsMulticastLostCells, cfhBundlePortSecondCardIndex=cfhBundlePortSecondCardIndex, cfhPlaneStateNotification=cfhPlaneStateNotification, PYSNMP_MODULE_ID=ciscoFabricHfrMIB, cfhBundlePortId=cfhBundlePortId, cfhBundlePortTable=cfhBundlePortTable, cfhBundlePortStatsHighRxCECells=cfhBundlePortStatsHighRxCECells, cfhBundlePortOperState=cfhBundlePortOperState, CfhAdminState=CfhAdminState, cfhCardFabInUseDiscTime=cfhCardFabInUseDiscTime, cfhBundleId=cfhBundleId, cfhPlaneStatsTable=cfhPlaneStatsTable, cfhMIBCompliances=cfhMIBCompliances, cfhCardPlaneRxConnectivity=cfhCardPlaneRxConnectivity, CfhPlane=CfhPlane, cfhBundlePortLCRCardIndex=cfhBundlePortLCRCardIndex, cfhCardTable=cfhCardTable, cfhPlaneTotalBundles=cfhPlaneTotalBundles, cfhCardGroup=cfhCardGroup, cfhBundlePortStatsRxUCECells=cfhBundlePortStatsRxUCECells, cfhPlaneId=cfhPlaneId, cfhBundlePort=cfhBundlePort, ciscoFabricHfrMIB=ciscoFabricHfrMIB, cfhMIBConformance=cfhMIBConformance, cfhBundleName=cfhBundleName, cfhBundleDowned=cfhBundleDowned, cfhCardEntry=cfhCardEntry, cfhBundlePortStatsRxPECells=cfhBundlePortStatsRxPECells, cfhMIBCompliance=cfhMIBCompliance, cfhBundlePortGroup=cfhBundlePortGroup, cfhFabricCapacityGroup=cfhFabricCapacityGroup, cfhBundlePortStatsRxDataCells=cfhBundlePortStatsRxDataCells, cfhBundlePortStatsTxDataCells=cfhBundlePortStatsTxDataCells, cfhBundlePortStatsHighRxPECells=cfhBundlePortStatsHighRxPECells, cfhMIBCompliance1=cfhMIBCompliance1, cfhBundleDownedLinkNotification=cfhBundleDownedLinkNotification, cfhCardPlaneTxConnectivity=cfhCardPlaneTxConnectivity, CfhBundle=CfhBundle, cfhBundleOperStatus=cfhBundleOperStatus, cfhBundlePlane=cfhBundlePlane, cfhPlaneStatsTxDataCells=cfhPlaneStatsTxDataCells, cfhPlaneStatsRxPECells=cfhPlaneStatsRxPECells, cfhPlaneStatsRxCECells=cfhPlaneStatsRxCECells, cfhBundleTotal=cfhBundleTotal, cfhBundlePortEntry=cfhBundlePortEntry, cfhGenPlaneStateTrapEnable=cfhGenPlaneStateTrapEnable, cfhBundleTotalLinks=cfhBundleTotalLinks, cfhPlaneOperStatus=cfhPlaneOperStatus, cfhBundlePortStatsTable=cfhBundlePortStatsTable, cfhBundle=cfhBundle, cfhBundlePortLCRId=cfhBundlePortLCRId, cfhBundleStateNotification=cfhBundleStateNotification, cfhCardPlaneEntry=cfhCardPlaneEntry, cfhBundlePortGrpId=cfhBundlePortGrpId, cfhCardFabInUse=cfhCardFabInUse, CfhScaledPercentage=CfhScaledPercentage, cfhBundleGroup=cfhBundleGroup, cfhPlaneStatsCounterDiscTime=cfhPlaneStatsCounterDiscTime, cfhPlaneAdminStatus=cfhPlaneAdminStatus)
