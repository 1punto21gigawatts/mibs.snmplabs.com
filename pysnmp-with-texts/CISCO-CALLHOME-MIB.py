#
# PySNMP MIB module CISCO-CALLHOME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CALLHOME-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SyslogSeverity, = mibBuilder.importSymbols("CISCO-SYSLOG-MIB", "SyslogSeverity")
CiscoURLString, CiscoVrfName, EntPhysicalIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString", "CiscoVrfName", "EntPhysicalIndexOrZero")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, Counter64, TimeTicks, Bits, MibIdentifier, ModuleIdentity, NotificationType, Counter32, Integer32, iso, IpAddress, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "TimeTicks", "Bits", "MibIdentifier", "ModuleIdentity", "NotificationType", "Counter32", "Integer32", "iso", "IpAddress", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, StorageType, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "StorageType", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ciscoCallHomeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 300))
ciscoCallHomeMIB.setRevisions(('2012-04-27 00:00', '2010-11-08 00:00', '2009-05-04 00:00', '2009-04-09 00:00', '2008-07-01 00:00', '2007-12-19 00:00', '2007-03-29 00:00', '2006-03-30 00:00', '2004-08-02 00:00', '2004-02-11 00:00', '2004-02-09 00:00', '2003-10-30 00:00', '2003-05-20 00:00', '2002-10-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCallHomeMIB.setRevisionsDescriptions(('Added following enum to callHomeAlertGroupCapability: - periodicHourly(6) - periodicMinutes(7) Added following enum to ccmPeriodicAlertGroupInterval: - hourly(4) - minutes(5) Added following OBJECT-GROUP: - ccmCallHomePeriodicMinutesGroup - ccmOnDemandCliMsgGroup - ccmCallHomeDiagSignatureGroup - ccmCallHomeSecurityLevelGroup - ccmCallHomeAnonymousReportingGroup - ccmCallHomeAaaGroup Added new compliance - chMIBCompliance9.', 'chSingleSmtpServerGroup is deprecated and replaced by the following new group: - ccmSingleSmtpServerGroup Added following objects in ccmSmtpServersTable - ccmSmtpServersUseVrf Added following OBJECT-GROUP - ccmSmtpServersVrfGroup - ccmHttpProxyServerGroup - ccmHttpTransportVrfGroup - ccmMessageSourceGroup Added following objects - ccmHttpProxyServerAddrType - ccmHttpProxyServerAddr - ccmHttpProxyServerPort - ccmHttpProxyServerUseEnable - ccmHttpTransportUseVrf - callHomeSmtpServerUseVrf and Added new compliance - chMIBCompliance8.', 'Added ccmCallHomeVrfGroup.', 'Added the following notification objects : - ccmEventDescription - ccmEventTime - ccmEventUrgencyLevel Added new notification - ccmEventNotif Added new Group - ccmEventNotifGroup and Added new compliance - chMIBCompliance6.', 'Added support for ccmOnDemandMsgSendControlGroup, ccmOnDemandMsgStatusGroup, ccmSmartCallHomeGroup and ccmEventStatsGroup. Modified callHomeAlertGroupCapability to include the following two enum values: onDemand(4), onDemandPerEntity(5)', 'Refined the DESCRIPTION clauses for the objects callHomeDestProfileAlertGroups and callHomeAlertGroupCapability.', 'chConfigurationGroup2 is deprecated and replaced by the following new groups: - ccmConfigurationGroup3 - ccmAlertActionGroup - ccmProfileMessageLevelGroup - ccmProfileAlertGroupsGroup - ccmThrottleConfigurationGroup chSystemInformationGroup is deprecated and replaced by the following two new groups: - chSystemInformationGroup1, - chSystemServicePriorityGroup. Add the following groups for the new objects: - ccmPeriodicSwInventoryInfoGroup1, - ccmProfileTestGroup, - ccmProfileActivationGroup, - ccmProfileAlertGroupControlGroup, - ccmSmtpServersPriorityGroup, - ccmAlertGroupCapabilityGroup, - ccmHttpCfgGroup, - ccmSeverityAlertGroupCfgGroup, - ccmPeriodicAlertGroupCfgGroup, - ccmPatternAlertGroupCfgGroup, - ccmEventAlertGroupCfgGroup, - ccmSmtpMsgSendFailNotifCtrlGroup, - ccmSmtpMsgSendFailNotifGroup, - ccmAlertHCStatisticsGroup, - ccmAlertRateLimitGroup, - ccmSmtpServerStatusGroup, - ccmProfileHiMessageSizeGroup, - chSystemInformationGroup1, - chSystemServicePriorityGroup.', 'Add ccmUserDefCmdGroup.', "Added new compliance section 'chMIBCompliance3'.", "New Table 'callHomeSwInventoryTable' has been added to provide the Call Home inventory information about the software services. New objects 'ccmPeriodicSwInventoryMsgEnable', 'ccmPeriodicSwInventoryTimeFrame' and 'ccmMsgThrottlingEnable' has been added.", "Max size of 'callHomeDestProfileName' has been changed to 31 chars.", "New object 'callHomeDestProfileAlertGroups' has been added to the callHomeDestProfileTable. Row creation support has been added in the callHomeDestProfileTable. New Table 'callHomeAlertGroupTypeTable' has been added.", "New object 'callHomeDestProfileMsgLevel' has been added to the callHomeDestProfileTable.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCallHomeMIB.setLastUpdated('201204270000Z')
if mibBuilder.loadTexts: ciscoCallHomeMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoCallHomeMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoCallHomeMIB.setDescription("The MIB module for the management of Call Home feature within the framework of Cisco's Call Home architecture. Customers deploying solutions to run mission critical applications such as storage solutions demand very high availability and Serviceability from their products and/or support partners. To meet these requirements, a feature called 'Call Home' is provided which allows the system experiencing Hardware/Software problems to automatically send the relevant failure information back to the Support Center at the Support Partners for troubleshooting or to get replacement hardware dispatched. This feature also provides advanced features that allow storage systems to send performance, accounting and system health information in addition to just the fault information.")
ccmCallHomeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 0))
ciscoCallHomeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1))
chMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 2))
ccmCallHomeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1))
ccmCallHomeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2))
ccmCallHomeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3))
ccmCallHomeOnDemandActions = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4))
ccmSmartCallHomeActions = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 5))
ccmCallHomeVrf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 6))
ccmCallHomeMessageSource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 7))
ccmCallhomeEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 8))
ccmCallHomeDiagSignature = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9))
ccmCallHomeSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 10))
ccmCallHomeReporting = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 11))
ccmCallHomeHttpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 12))
ccmCallHomeAaa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 13))
class CallHomeAlert(TextualConvention, Integer32):
    description = "The type of the Call Home alert. noOp (1) - no alert test (2) - alert name 'Test' inventory (3) - alert name 'Inventory' ."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noOp", 1), ("test", 2), ("inventory", 3))

class CallHomeMsgFormat(TextualConvention, Integer32):
    reference = 'For more information on the XML, refer to RFC3023.'
    description = "Call Home Message format. xml (1) - XML (Extensible Markup Language) - encoded. fullText (2) - Plain text without any encoding. shortText (3) - Short text without any encoding The context of the Call Home message depends on the message. In general, all the Call Home message is sent with following information : 'Subject : System Notification from ' 'TimeStamp :' 'Message Name :' 'Message Type :' 'Level :' 'Message Device ID :' 'Customer ID :' (optional) 'Contract ID :' (optional) 'Site ID :' (optional) 'Server ID :' 'Message Description :' 'Device Name :' 'Contact Name :' 'Contact email :' 'Contact Phone :' (optional) 'Street Address :' (optional) 'Model Name :' 'Serial Number :' 'Part Number :' 'Chassis Hardware Version :' 'Supervisor Software Version :' Following information are required only if a hardware event caused the Call Home message : 'Affected FRU' 'Affected FRU Serial Number' 'Affected FRU Slot :' 'Affected FRU Hardware Version :' 'Affected FRU Software Version :' Following is required for all the messages : 'Command Output :' The command output may depend on the implementation and severity of the Call Home message. But at minimum, following information which are contained in the output of the CLI commands must be included. - Hardware model - software version - context information explaining the state of the device. - uptime - brief inventory information The exact format depends on the format type chosen. For 'xml', the above information is encoded in the XML format. For 'fullText', above information is sent out in plain text. For 'shortText', only following information is provided in plain text: 'Subject : System Notification from ' 'Device Id : ' 'TimeStamp : ' 'Error Message : ' 'Severity Level :' ."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("xml", 1), ("fullText", 2), ("shortText", 3))

class CallHomeTransportMethod(TextualConvention, Integer32):
    description = 'Call Home transport mechanism used to deliver the alert messages. email (1), - via email ftp (2), - via ftp http (3), - via http emailAndHttp (4) - via both email and http .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("email", 1), ("ftp", 2), ("http", 3), ("emailAndHttp", 4))

class CallHomeMsgLevel(TextualConvention, Integer32):
    description = 'This object contains the severity level for use as a threshold for filtering the alerts sent to a destination profile. It ranges from 1 to 10, with 10 being highest severity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("debug", 1), ("normal", 2), ("notification", 3), ("warning", 4), ("minor", 5), ("major", 6), ("critical", 7), ("fatal", 8), ("disaster", 9), ("catastrophic", 10))

class AlertGroupList(TextualConvention, OctetString):
    description = "AlertGroups are a pre-defined set of Call Home alerts. Users can specify these alert groups for a destination profile, to choose the Call Home alerts messages to be sent out to the destination. This object represents the list of alert groups (alert group types) configured for a destination profile. Each 'bit' within the value of an object of this type, specifies a configured alert group type. Bit position '0' ( most significant bit) in the value of this object is reserved. The value of each 'bit' (set/reset) represents whether an alert group type is configured or not for a particular destination profile. Bit position 1, represents whether the 'callHomeAlertGroupName' corresponding to the 'callHomeAlertGroupTypeIndex' 1 in the 'callHomeAlertGroupTypeTable' is configured or not for a particular destination profile. Bit position 2, represents whether the 'callHomeAlertGroupName' corresponding to the 'callHomeAlertGroupTypeIndex' 2 in the 'callHomeAlertGroupTypeTable' is configured or not for a particular destination profile. If there is no entry in the 'alertGroupTypeTable', with 'alertGroupTypeIndex' 'n', then bit position 'n' in the value of this object is irrelevant. If the length of an object of this type is less than 8 bytes, then the alert group types which are not represented are not considered to be part of this list, i.e., effectively, the string is extended to be of length 8 bytes by appending bytes containing x'00'. Note that this means that the zero length string represents the 'list is empty' value."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

callHomeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeEnable.setStatus('current')
if mibBuilder.loadTexts: callHomeEnable.setDescription('This object enables/disables the Call Home infrastructure on the local device.')
sysContactPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(12, 12), ValueSizeConstraint(13, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContactPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: sysContactPhoneNumber.setDescription("The phone number of the contact person for this managed node. The phone number must start with '+' and contains only numeric characters except for space and '-'. Some valid phone numbers are +44 20 8332 9091 +45 44886556 +81-46-215-4678 +1-650-327-2600 A set operation on this object with a invalid format will result in an error.")
sysContactEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContactEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sysContactEmailAddress.setDescription("The email address of the contact person for this managed node. The format of this object is an e-mail address which conforms to RFC822 and RFC1123 'addr-spec' syntax. Some valid Email Addresses are raj@helpme.com, bob@service.com, mtom@abc.caview.ca.us A set operation on this object with a invalid format will result in an error.")
sysStreetAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStreetAddress.setStatus('current')
if mibBuilder.loadTexts: sysStreetAddress.setDescription('The mailing address of this managed node.')
callHomeCustomerId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeCustomerId.setStatus('current')
if mibBuilder.loadTexts: callHomeCustomerId.setDescription('A string, in whatever format is appropriate, to identify the customer.')
callHomeContractId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeContractId.setStatus('current')
if mibBuilder.loadTexts: callHomeContractId.setDescription('A string, in whatever format is appropriate, to identify the support contract between the customer and support partner.')
callHomeSiteId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeSiteId.setStatus('current')
if mibBuilder.loadTexts: callHomeSiteId.setDescription('A location identifier of this device.')
callHomeDeviceServicePriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 8), SyslogSeverity().clone('debug')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeDeviceServicePriority.setStatus('current')
if mibBuilder.loadTexts: callHomeDeviceServicePriority.setDescription('The service priority of the device. This determines how fast the device has to be serviced.')
callHomeAlertAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 9), CallHomeAlert()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeAlertAction.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertAction.setDescription("This object acts as a trigger by which the generation of a particular type of alert can be verified. Specifically, setting this object to a type of alert triggers the sending of a Call Home message for the specified type so that the Call Home backend is activated. No action is taken if this object is set to 'noOp'. The value of the object when read is always 'noOp'.")
callHomeAlertActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("successful", 2), ("inprogress", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeAlertActionStatus.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertActionStatus.setDescription("This object provides the status of the last Call Home action invocation. unknown (1) - unknown successful (2) - successful inprogress (3) - action in progress failed (4) - failed If the value of this object is 'failed', then the callHomeAlertActionFailureCause provides the cause for the failure. Management stations could read value of this object after a successful set to the callHomeAlertAction object to find out the result of the test.")
callHomeAlertActionFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeAlertActionFailureCause.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertActionFailureCause.setDescription("This object provides the failure cause for the last Call Home test invocation. Note that this object is valid only if value of callHomeAlertActionStatus is 'failed'.")
callHomeDestProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12), )
if mibBuilder.loadTexts: callHomeDestProfileTable.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileTable.setDescription('This table contains destination profiles. The Call Home feature requires the destination profiles to be setup to be able to send the Call Home messages to destinations configured.')
callHomeDestProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"))
if mibBuilder.loadTexts: callHomeDestProfileEntry.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileEntry.setDescription('An entry containing information about a Call Home destination.')
callHomeDestProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: callHomeDestProfileName.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileName.setDescription('Name of the destination profile.')
callHomeDestProfileMsgFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 2), CallHomeMsgFormat().clone('xml')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileMsgFormat.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileMsgFormat.setDescription('The Call Home format used with profile while sending the message.')
callHomeDestProfileMaxMsgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileMaxMsgSize.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileMaxMsgSize.setDescription('Maximum message size that can be sent to destination pointed to by this destination profile. Implementations are allowed to assign default value. A value of 0 for this object indicates no limitation on maximum message size that can be sent to destination pointed to by this destination profile. If the maximum message size is greater than the maximum value reportable by this object then this object should report its maximum value (1,000,000) and callHomeDestProfileHiMaxMsgSize must be used to report the maximum message size.')
callHomeDestProfileTrnsprtMthd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 4), CallHomeTransportMethod().clone('email')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileTrnsprtMthd.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileTrnsprtMthd.setDescription('Call Home transport method used to deliver the alert messages.')
callHomeDestProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileStatus.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileStatus.setDescription('Status of this row.')
callHomeDestProfileMsgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 6), CallHomeMsgLevel().clone('debug')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileMsgLevel.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileMsgLevel.setDescription('This object contains the threshold level, used for filtering alert messages sent to a destination. Call Home alert message with severity level lower than the configured threshold level would not be sent. The default threshold level is debug (1), which means all the alert messages will be sent.')
callHomeDestProfileAlertGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 7), AlertGroupList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileAlertGroups.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileAlertGroups.setDescription("This object represent the list of configured alert groups for this destination profile. User can modify the configured alert groups, by Setting/Resetting the appropriate bits in this object. Setting a bit to '1' means that the alert group is configured and alerts for this alert group would be sent to the destination profile. Resetting a bit to '0', means that alert group is not configured and alerts for this alert group would not be sent to the destination profile.")
callHomeDestProfileActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileActive.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileActive.setDescription("The object specifies whether the profile is active. A value of 'true' indicates that the profile is active. A value of 'false' indicates that the profile is not active.")
callHomeDestProfileHiMaxMsgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 12, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestProfileHiMaxMsgSize.setStatus('current')
if mibBuilder.loadTexts: callHomeDestProfileHiMaxMsgSize.setDescription('Maximum size of the message that can be sent to destination pointed to by this destination profile. A value of zero for this object indicates that there is no limitation on maximum size of message that can be sent to destination pointed to by this destination profile.')
callHomeEmailAddrTblMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeEmailAddrTblMaxEntries.setStatus('current')
if mibBuilder.loadTexts: callHomeEmailAddrTblMaxEntries.setDescription('The maximum number of entries that the agent supports in the callHomeDestEmailAddressTable. A value of zero indicates no limitation on the number of entries in callHomeDestEmailAddressTable.')
callHomeDestEmailAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14), )
if mibBuilder.loadTexts: callHomeDestEmailAddressTable.setStatus('current')
if mibBuilder.loadTexts: callHomeDestEmailAddressTable.setDescription('This table contains email addresses and HTTP URLs for the destination profiles.')
callHomeDestEmailAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"), (0, "CISCO-CALLHOME-MIB", "callHomeDestEmailAddressIndex"))
if mibBuilder.loadTexts: callHomeDestEmailAddressEntry.setStatus('current')
if mibBuilder.loadTexts: callHomeDestEmailAddressEntry.setDescription('An entry containing information about a Call Home destination email address or a destination HTTP URL.')
callHomeDestEmailAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: callHomeDestEmailAddressIndex.setStatus('current')
if mibBuilder.loadTexts: callHomeDestEmailAddressIndex.setDescription('An arbitrary integer value, greater than zero, and less than and equal to callHomeEmailAddrTblMaxEntries, which identifies an Email address. The object can be any value in the supported range if the value of callHomeEmailAddrTblMaxEntries is zero. These integer values should be non-volatile.')
callHomeDestEmailAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestEmailAddress.setStatus('current')
if mibBuilder.loadTexts: callHomeDestEmailAddress.setDescription("The email address associated this destination profile. The format of this object is an e-mail address which conforms to RFC822 and RFC1123 'addr-spec' syntax. Some examples are raj@helpme.com, bob@service.com, mtom@abc.caview.ca.us. A set operation on this object with a invalid format will result in an error. This object may not be modified while the value of the corresponding instance of callHomeDestEmailAddressStatus is 'active'.")
callHomeDestEmailAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestEmailAddressStatus.setStatus('current')
if mibBuilder.loadTexts: callHomeDestEmailAddressStatus.setDescription('Status of this row.')
callHomeDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("email", 1), ("http", 2))).clone('email')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestType.setStatus('current')
if mibBuilder.loadTexts: callHomeDestType.setDescription("The type of this destination address. email - This destination address is an email address. Object callHomeDestHttpUrl is irrelevant and can not be set. http - This destination address is an HTTP URL address. Object callHomeDestEmailAddress is irrelevant and can not be set. This object may not be modified while the value of the corresponding instance of callHomeDestEmailAddressStatus is 'active'.")
callHomeDestHttpUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 14, 1, 5), CiscoURLString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeDestHttpUrl.setStatus('current')
if mibBuilder.loadTexts: callHomeDestHttpUrl.setDescription("The HTTP URL associated with this destination profile. This object may not be modified while the value of the corresponding instance of callHomeDestEmailAddressStatus is 'active'.")
callHomeEmailFrom = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 15), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeEmailFrom.setReference('RFC 2821 - Simple Mail Transfer Protocol and RFC822 - Standard for the Format of Arpa Internet Text Messages.')
if mibBuilder.loadTexts: callHomeEmailFrom.setStatus('current')
if mibBuilder.loadTexts: callHomeEmailFrom.setDescription("The email address that is to be used in the 'From' field when sending the email using SMTP. The format of this object is an e-mail address which conforms to RFC822 and RFC1123 'addr-spec' syntax. Some examples are raj@helpme.com, bob@service.com, mtom@abc.caview.ca.us. A set operation on this object with a invalid format will result in an error.")
callHomeEmailReplyTo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 16), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeEmailReplyTo.setReference('RFC 2821 - Simple Mail Transfer Protocol and RFC822 - Standard for the Format of Arpa Internet Text Messages.')
if mibBuilder.loadTexts: callHomeEmailReplyTo.setStatus('current')
if mibBuilder.loadTexts: callHomeEmailReplyTo.setDescription("The email address that is to be used in the 'Reply-To' field when sending the email using SMTP. The format of this object is an e-mail address which conforms to RFC822 and RFC1123 'addr-spec' syntax. Some examples are raj@helpme.com, bob@service.com, mtom@abc.caview.ca.us. A set operation on this object with a invalid format will result in an error.")
callHomeEmailMsgDispNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 17), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeEmailMsgDispNotification.setReference('RFC 2298 - An Extensible Message Format for Message Disposition Notifications.')
if mibBuilder.loadTexts: callHomeEmailMsgDispNotification.setStatus('current')
if mibBuilder.loadTexts: callHomeEmailMsgDispNotification.setDescription("The email address to which the Message Disposition Notification (also called 'Return Receipt') sent when the email sent from this device is read by the receiver. The format of this object is an e-mail address which conforms to RFC822 and RFC1123 'addr-spec' syntax. Some examples are raj@helpme.com, bob@service.com, mtom@abc.caview.ca.us. A set operation on this object with a invalid format will result in an error.")
callHomeSmtpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 18), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeSmtpServerAddrType.setStatus('current')
if mibBuilder.loadTexts: callHomeSmtpServerAddrType.setDescription('Address Type of the SMTP server.')
callHomeSmtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeSmtpServerAddr.setReference('RFC 2821 - Simple Mail Transfer Protocol.')
if mibBuilder.loadTexts: callHomeSmtpServerAddr.setStatus('current')
if mibBuilder.loadTexts: callHomeSmtpServerAddr.setDescription('Address of the SMTP server.')
callHomeSmtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeSmtpServerPort.setReference('RFC 2821 - Simple Mail Transfer Protocol.')
if mibBuilder.loadTexts: callHomeSmtpServerPort.setStatus('current')
if mibBuilder.loadTexts: callHomeSmtpServerPort.setDescription('Port of the SMTP server.')
ccmSmtpServersTblMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSmtpServersTblMaxEntries.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersTblMaxEntries.setDescription('Indicates the maximum number of SMTP servers supported by this device. A value of zero indicates no limitation on the number of SMTP servers.')
ccmSmtpServersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22), )
if mibBuilder.loadTexts: ccmSmtpServersTable.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersTable.setDescription('This table contains a list of SMTP servers that may be used to send out Call Home e-mail messages. An entry is created and deleted by using ccmSmtpServersStatus. The maximum number of entries that can be created in this table is limited by the object ccmSmtpServersTblMaxEntries.')
ccmSmtpServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "ccmSmtpServersAddrType"), (0, "CISCO-CALLHOME-MIB", "ccmSmtpServersAddr"))
if mibBuilder.loadTexts: ccmSmtpServersEntry.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersEntry.setDescription('An entry containing information about an SMTP server.')
ccmSmtpServersAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ccmSmtpServersAddrType.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersAddrType.setDescription('Address Type of the SMTP server.')
ccmSmtpServersAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ccmSmtpServersAddr.setReference('RFC 2821 - Simple Mail Transfer Protocol.')
if mibBuilder.loadTexts: ccmSmtpServersAddr.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersAddr.setDescription('Address of the SMTP server.')
ccmSmtpServersPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmSmtpServersPort.setReference('RFC 2821 - Simple Mail Transfer Protocol.')
if mibBuilder.loadTexts: ccmSmtpServersPort.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersPort.setDescription('Port of the SMTP server.')
ccmSmtpServersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmSmtpServersStatus.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersStatus.setDescription("The status object used to manage the rows in this table. Objects in this conceptual row may not be modified while the value of this object is 'active'.")
ccmSmtpServersPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmSmtpServersPriority.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersPriority.setDescription('The priority of this entry relative to other entries. System will attempt to contact SMTP servers in the order of their priority values. For servers with different values of ccmSmtpServersPriority, the server with lowest value has highest priority. For servers with same value of ccmSmtpServersPriority the relative priority is determined by the system.')
ccmSmtpServersUseVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 22, 1, 6), CiscoVrfName().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmSmtpServersUseVrf.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersUseVrf.setDescription('The Virtual Routing and Forwarding (VRF) domain configured for this SMTP server. A zero length string indicates that there is no VRF domain configured and the default VRF domain is used')
callHomeLastAlertSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeLastAlertSent.setStatus('current')
if mibBuilder.loadTexts: callHomeLastAlertSent.setDescription('The value of sysUpTime when the last Call Home alert was sent.')
callHomeAlerts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeAlerts.setStatus('current')
if mibBuilder.loadTexts: callHomeAlerts.setDescription('The number of Call Home alerts sent.')
callHomeHCAlerts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeHCAlerts.setStatus('current')
if mibBuilder.loadTexts: callHomeHCAlerts.setDescription('The number of Call Home alerts sent. This object is a 64-bit version of callHomeAlerts')
ccmAlertsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmAlertsDropped.setStatus('current')
if mibBuilder.loadTexts: ccmAlertsDropped.setDescription('The number of Call Home alerts dropped due to rate limiting configured through ccmAlertRateLimit.')
ccmEventStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5), )
if mibBuilder.loadTexts: ccmEventStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsTable.setDescription('This table contains a list of Call Home message type for each Call Home event. An entry will exist for each call-home message type which supports Call Home event statistics.')
ccmEventStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "ccmEventStatsTypeIndex"), (0, "CISCO-CALLHOME-MIB", "ccmEventStatsMsgTypeIndex"))
if mibBuilder.loadTexts: ccmEventStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsEntry.setDescription('An entry containing Call Home event statistics for a particular Call Home message type.')
ccmEventStatsTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("successful", 1), ("inQueue", 2), ("dropped", 3), ("failed", 4))))
if mibBuilder.loadTexts: ccmEventStatsTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsTypeIndex.setDescription("This object indicates the type of Call Home event. 'successful' - Call Home messages were generated successfully for corresponding Call Home event. 'inQueue' - Call Home events are queued for processing. 'dropped' - Call Home events were dropped due to the Rate Limiting feature within Call Home component. 'failed' - Call Home events which failed to generate Call Home messages.")
ccmEventStatsMsgTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("total", 1), ("email", 2), ("http", 3))))
if mibBuilder.loadTexts: ccmEventStatsMsgTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsMsgTypeIndex.setDescription("This object indicates the type of Call Home message. 'total' - statistics based on all the message types. 'email' - statistics for Call Home messages which use e-mail transport. 'http' - statistics for Call Home messages which use http transport.")
ccmEventStatsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsTotal.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsTotal.setDescription('Total number of Call Home events.')
ccmEventStatsConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsConfiguration.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsConfiguration.setDescription('The number of Configuration Call Home events.')
ccmEventStatsDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsDiagnostic.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsDiagnostic.setDescription('The number of Diagnostic Call Home events.')
ccmEventStatsEnvironment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsEnvironment.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsEnvironment.setDescription('The number of Environment Call Home events.')
ccmEventStatsInventory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsInventory.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsInventory.setDescription('The number of Inventory Call Home events.')
ccmEventStatsSystemLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsSystemLog.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsSystemLog.setDescription('The number of System Log Call Home events.')
ccmEventStatsTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsTest.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsTest.setDescription('The number of Test Call Home events.')
ccmEventStatsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsRequest.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsRequest.setDescription('The number of Request Call Home events.')
ccmEventStatsSendCliOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventStatsSendCliOutput.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsSendCliOutput.setDescription('The number of Send-CLI-Output Call Home events.')
ccmSmtpServerStatusTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSmtpServerStatusTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusTimeStamp.setDescription('This object indicates the time when ccmSmtpServerStatusTable was last updated, either by a SNMP Servers check by ccmSmtpServerStatusInitiate or by a change in the SMTP servers configured in ccmSmtpServersTable.')
ccmSmtpServerStatusInitiate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmtpServerStatusInitiate.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusInitiate.setDescription("A control object used to initiate the availability status check of the SMTP Servers configured in ccmSmtpServersTable. Setting this object to 'true' will check the status of the SMTP servers and update the status in ccmSmtpServerStatusTable. This object cannot be set to 'true' when the value of ccmSmtpServerStatusResult is 'inprogress'. Setting this object to 'false' has no effect. When read, this object always returns 'false'.")
ccmSmtpServerStatusResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("successful", 2), ("inprogress", 3), ("failed", 4), ("noSmtpServerConfigured", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSmtpServerStatusResult.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusResult.setDescription('This object provides the status of the last SMTP status check initiated by ccmSmtpServerStatusInitiate. Management stations could read value of this object after a successful set of the ccmSmtpServerStatusInitiate object to find out the result of the SMTP server status check.')
ccmSmtpServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 4), )
if mibBuilder.loadTexts: ccmSmtpServerStatusTable.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusTable.setDescription("A list of SMTP servers. An entry will exist for each SMTP server which is configured in the ccmSmtpServersTable if the value of ccmSmtpServerStatusResult is 'successful'.")
ccmSmtpServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "ccmSmtpServersAddrType"), (0, "CISCO-CALLHOME-MIB", "ccmSmtpServersAddr"))
if mibBuilder.loadTexts: ccmSmtpServerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusEntry.setDescription('An entry containing availability status of a particular SMTP Server.')
ccmSmtpServerStatusAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSmtpServerStatusAvailability.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusAvailability.setDescription('This variable indicates whether the SMTP Server is currently available.')
ccmOnDemandMsgServAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 3, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmOnDemandMsgServAvailable.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgServAvailable.setDescription("This object indicates whether the system is ready to generate on demand Call Home messages. A value of 'true' indicates that the system is ready to generate on demand Call Home messages. A value of 'false' indicates that sending of on demand Call Home messages can not be initiated.")
ccmSysLogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 23), SyslogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSysLogSeverity.setStatus('current')
if mibBuilder.loadTexts: ccmSysLogSeverity.setDescription('Different devices implementing this mib may use different criteria for issuing Call Home alerts. For the devices that issue Call Home alerts based on severity level of the syslog messages generated on the device, this object determines syslog severity levels beyond which a Call Home alert message will be issued. Any syslog message with a severity value greater than the value set for this object will be ignored by the agent. Note: severity numeric values increase as their severity decreases, e.g. error(4) is more severe than debug(8). For the devices that do not issue Call Home alerts based on syslog severity levels this object has no effect.')
ccmEnableSmtpServerNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmEnableSmtpServerNotif.setStatus('current')
if mibBuilder.loadTexts: ccmEnableSmtpServerNotif.setDescription('This variable indicates whether the system produces the ccmSmtpServerFailNotif. A false value for this object will prevent ccmSmtpServerFailNotif notification being generated by the device.')
callHomeAlertGroupTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 25), )
if mibBuilder.loadTexts: callHomeAlertGroupTypeTable.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertGroupTypeTable.setDescription('This table contains information about all the alert groups types supported in the system. An entry is created if a new alert group becomes available in the system. An entry is deleted if the alert group becomes unavailable.')
callHomeAlertGroupTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 25, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeAlertGroupTypeIndex"))
if mibBuilder.loadTexts: callHomeAlertGroupTypeEntry.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertGroupTypeEntry.setDescription('An entry containing information about a particular Call Home alert group type in the system.')
callHomeAlertGroupTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: callHomeAlertGroupTypeIndex.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertGroupTypeIndex.setDescription('This object represents the index corresponding to the particular alert group type configured in the system.')
callHomeAlertGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 25, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeAlertGroupName.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertGroupName.setDescription('This object represents the name of alert group configured in the system.')
callHomeAlertGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 25, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeAlertGroupEnable.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertGroupEnable.setDescription("This object enables or disables the alert group for the system. A value of 'true' for this object enables and a value of 'false' for this object disables the alert group. Call Home messages are generated only for those alert groups which are enabled in the system.")
callHomeAlertGroupCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 25, 1, 4), Bits().clone(namedValues=NamedValues(("callHomeMessageSeverity", 0), ("periodic", 1), ("regularExpression", 2), ("event", 3), ("onDemand", 4), ("onDemandPerEntity", 5), ("periodicHourly", 6), ("periodicMinutes", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeAlertGroupCapability.setStatus('current')
if mibBuilder.loadTexts: callHomeAlertGroupCapability.setDescription('This object indicates the method used by alert group to generate Call Home messages. callHomeMessageSeverity - Call Home alert is generated based only on the level of severity. periodic - Call Home alert is generated periodically. regularExpression - Call Home alert is generated based on the configured regular expression. event - Call Home alert is generated based on change event. onDemand - Call Home alert is generated at user request. onDemandPerEntity - Call Home alert is generated for specific entities at user request. periodicHourly - Call Home alert is generated hourly. periodicMinutes - Call Home alert is generated periodically after specified number of minutes.')
callHomeSwInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 26), )
if mibBuilder.loadTexts: callHomeSwInventoryTable.setStatus('current')
if mibBuilder.loadTexts: callHomeSwInventoryTable.setDescription('This table contains inventory information about all the software services currently enabled in the system. When a software service is disabled from the system, all the entries corresponds to that software service will be deleted automatically from the table.')
callHomeSwInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 26, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeSwServiceName"), (0, "CISCO-CALLHOME-MIB", "callHomeInventoryNVPairIndex"))
if mibBuilder.loadTexts: callHomeSwInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: callHomeSwInventoryEntry.setDescription('An entry containing information about the name value pair for a particular software service enabled in the system.')
callHomeSwServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 26, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: callHomeSwServiceName.setStatus('current')
if mibBuilder.loadTexts: callHomeSwServiceName.setDescription('This object represents the name of software service enabled in the system.')
callHomeInventoryNVPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 26, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: callHomeInventoryNVPairIndex.setStatus('current')
if mibBuilder.loadTexts: callHomeInventoryNVPairIndex.setDescription("This object represents the index corresponds to the name value pair for a particular software service enabled in the system. The name value pair is a 'tuple' of (inventory info-name, and inventory info-value) and this object uniquely identifies a value of the tuple, for a particular software service enabled in the system.")
callHomeInventoryInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 26, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeInventoryInfoName.setStatus('current')
if mibBuilder.loadTexts: callHomeInventoryInfoName.setDescription("This object represents the name of a feature , for a particular software service enabled in the system. For example, the value of this object could be 'number of VSAN' for the software service 'vsan_manager'.")
callHomeInventoryInfoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 26, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeInventoryInfoValue.setStatus('current')
if mibBuilder.loadTexts: callHomeInventoryInfoValue.setDescription("This object represents the value for the feature name specified in the corresponding instance of 'callHomeInventroyInfoName' object. For example, the value of this object could be '10' for the corresponding instance of 'callHomeInventroyInfoName' object with value 'number of VSAN'.")
ccmPeriodicSwInventoryMsgEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicSwInventoryMsgEnable.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicSwInventoryMsgEnable.setDescription('This object enables/disables the sending of periodic software inventory Call Home message on the system.')
ccmPeriodicSwInventoryTimeFrame = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(7)).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicSwInventoryTimeFrame.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicSwInventoryTimeFrame.setDescription("This object represents the time frame for sending the periodic software inventory Call Home message, if the periodic software inventory is enabled on the system i.e., the value of 'ccmPeriodicSwInventoryMsgEnable' object is set to 'true'.")
ccmMsgThrottlingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 29), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmMsgThrottlingEnable.setStatus('current')
if mibBuilder.loadTexts: ccmMsgThrottlingEnable.setDescription("This object enables/disables the message throttling mechanism implemented on the system. The message throttling mechanism limits the number of Call Home messages for a alert type, sent with in a time frame. The maximum number of Call Home alert messages that can be sent out for a particular alert type is '30' in a time frame of 2 hours. That means, if the number of message sent exceeds the maximum limit (30), with in the given time frame (2 hours) then any further messages for that alert type will be discarded within that time frame. Only 30 messages for each alert type will be sent until 2 hours from the time the first message was sent. In case 2 hours has already elapsed since the first such message was sent, then time frame and the count for the number of messages will be reset to '0'.")
ccmCallHomeAlertGroupCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30))
ccmSeverityAlertGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 1), )
if mibBuilder.loadTexts: ccmSeverityAlertGroupTable.setStatus('current')
if mibBuilder.loadTexts: ccmSeverityAlertGroupTable.setDescription("A list of severity type alert groups which are currently configured for each of the profiles in the device. An entry is created if a configured alert group whose callHomeAlertGroupCapability has 'callHomeMessageSeverity'. An entry is deleted if the destination profile unsubscribes an severity based alert group.")
ccmSeverityAlertGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 1, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"), (0, "CISCO-CALLHOME-MIB", "callHomeAlertGroupTypeIndex"))
if mibBuilder.loadTexts: ccmSeverityAlertGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ccmSeverityAlertGroupEntry.setDescription('An entry containing severity configuration information for a particular alert group in a profile.')
ccmAlertGroupSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 1, 1, 1), CallHomeMsgLevel().clone('debug')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmAlertGroupSeverity.setStatus('current')
if mibBuilder.loadTexts: ccmAlertGroupSeverity.setDescription("This object specifies the minimum severity level, associated with alert group for a destination profile. Call Home alert messages for this alert group with severity level lower than one configured for this object will not be issued by the system. The default severity level is 'debug', which means all the alert messages for an alert group will be issued.")
ccmPeriodicAlertGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2), )
if mibBuilder.loadTexts: ccmPeriodicAlertGroupTable.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupTable.setDescription("A list of periodic type alert groups which are currently configured in the device. An entry is created if a configured alert group whose callHomeAlertGroupCapability has 'periodic'. An entry is deleted if the destination profile unsubscribes an periodic alert group.")
ccmPeriodicAlertGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"), (0, "CISCO-CALLHOME-MIB", "callHomeAlertGroupTypeIndex"))
if mibBuilder.loadTexts: ccmPeriodicAlertGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupEntry.setDescription('An entry containing periodic configuration information for a particular alert group in a profile.')
ccmPeriodicAlertGroupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("monthly", 3), ("hourly", 4), ("minutes", 5))).clone('daily')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupInterval.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupInterval.setDescription("This object specifies the type of periodic configuration for this alert group. This object is only instantiated when the value of corresponding instance of ccmPeriodicAlertGroupEnable is 'true'. A value of 'daily' indicates that periodic message will be generated everyday at time specified by the objects ccmPeriodicAlertGroupHour and ccmPeriodicAlertGroupMinute. A value of 'weekly' indicates that periodic message will be generated once every week on the day specified by the object ccmPeriodicAlertGroupDayOfWeek and at the time specified by the objects ccmPeriodicAlertGroupHour and ccmPeriodicAlertGroupMinute. A value of 'monthly' indicates that periodic message will be generated once every month on day of the month specified by the object ccmPeriodicAlertGroupDayOfMonth and at time specified by the objects ccmPeriodicAlertGroupHour and ccmPeriodicAlertGroupMinute. A value of 'hourly' indicates that periodic messages will be generated once every hour. ccmPeriodicAlertGroupMinute specifies the minute of hour at which the hourly message is generated. A value of 'minutes' indicates that a message will be generated periodically after the interval specified in ccmPeriodicAlertGroupIntervalMinutes expires.")
ccmPeriodicAlertGroupDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7))).clone('sunday')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupDayOfWeek.setDescription("This object specifies the day of the week on which user wishes to receive periodic Call Home alert messages for this entry. This object is only instantiated when the value of corresponding instance of ccmPeriodicAlertGroupEnable is 'true' and the value of corresponding instance of ccmPeriodicAlertGroupInterval is 'weekly'.")
ccmPeriodicAlertGroupDayOfMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupDayOfMonth.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupDayOfMonth.setDescription("This object specifies the day of the month on which user wishes to receive periodic Call Home alert messages for this entry. If the day specified is beyond the last day of a month, the alert message will be generated on the last day of that month. This object is only instantiated when the value of corresponding instance of ccmPeriodicAlertGroupEnable is 'true' and the value of corresponding instance of ccmPeriodicAlertGroupInterval is 'monthly'.")
ccmPeriodicAlertGroupHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupHour.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupHour.setDescription("This object specifies the hours component of time (24 hour format) at which the daily/weekly/monthly periodic Call Home alert messages will be generated for this entry. This object is only instantiated when the value of corresponding instance of ccmPeriodicAlertGroupEnable is 'true'.")
ccmPeriodicAlertGroupMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupMinute.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupMinute.setDescription("This object specifies the minutes component of time at which the hourly/daily/weekly/monthly periodic Call Home alert messages will be generated for this entry. This object is only instantiated when the value of corresponding instance of ccmPeriodicAlertGroupEnable is 'true'.")
ccmPeriodicAlertGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupEnable.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupEnable.setDescription('This object specifies whether sending Call Home messages periodically is enabled.')
ccmPeriodicAlertGroupIntervalMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 2, 1, 7), Unsigned32().clone(60)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicAlertGroupIntervalMinutes.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupIntervalMinutes.setDescription("This object specifies the number of minutes after which periodic message will be generated for this entry. This object is only instantiated for the alert groups for which callHomeAlertGroupCapability has the 'periodicMinutes' bit set and the ccmPeriodicAlertGroupInterval is 'minutes'.")
ccmMaxSyslogAlertGroupPatterns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMaxSyslogAlertGroupPatterns.setStatus('current')
if mibBuilder.loadTexts: ccmMaxSyslogAlertGroupPatterns.setDescription('The object dictates the maximum number of entries in the ccmPatternAlertGroupTable which may be created with same value for index callHomeDestProfileName. A value of zero for this object indicates that there is no limitation on maximum number of entries that can be created in this table with same value of callHomeDestProfileName.')
ccmPatternAlertGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 4), )
if mibBuilder.loadTexts: ccmPatternAlertGroupTable.setStatus('current')
if mibBuilder.loadTexts: ccmPatternAlertGroupTable.setDescription("A list of pattern used by the pattern type alert groups which are currently configured in the device. An entry is created if a configured alert group whose callHomeAlertGroupCapability has 'regularExpression'. An entry is deleted if the destination profile unsubscribes a pattern based alert group. Additional entry can also be created through ccmPatternAlertGroupStatus. Deleting all the entries for a destination profile alert group combination will result in profile unsubscribing to that alert group.")
ccmPatternAlertGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 4, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"), (0, "CISCO-CALLHOME-MIB", "callHomeAlertGroupTypeIndex"), (1, "CISCO-CALLHOME-MIB", "ccmAlertGroupPattern"))
if mibBuilder.loadTexts: ccmPatternAlertGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ccmPatternAlertGroupEntry.setDescription('An entry containing properties for a pattern which is used to match against system syslog messages.')
ccmAlertGroupPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: ccmAlertGroupPattern.setStatus('current')
if mibBuilder.loadTexts: ccmAlertGroupPattern.setDescription('The object contains a regular expression. Regular Expressions: ------------------- A regular expression is a pattern (a phrase, number, or more complex pattern): Regular expressions are case sensitive and allow for complex matching requirements. Simple regular expressions include entries like Serial, misses, or 138. Complex regular expressions include entries like 00210... , (is ), or [Oo]utput. Some Practical examples of regular expressions: ---------------------------------------------- The examples correspond with the various ways that you can use regular expressions in your configurations. For example, syslog messages on IOS look as follows: a. -- 2004 Jul 21 13:26:55 %SYS-5-REDUNDANTCLOCK_OK: Redundant clock recovered b. -- 2004 Jul 21 13:26:59 %SYS-5-REDUNDANTCLOCK_FAIL: Redundant clock failed c. -- 2004 Jul 26 16:53:47 %MGMT-5-LOGIN_FAIL:User failed to log in from 171.69.48.75 via Telnet - max attempt reached A pattern of REDUNDANTCLOCK.* would cause all the syslogs with severity greater than specified by ccmProfileAlertGroupSeverity and having a pattern REDUNDANTCLOCK followed by REDUNDANTCLOCK followed by any number of occurrences (*) of any character (.) resulting in corresponding Call Home messages being generated for syslog alert group. So both messages a and b in above examples will be resulting in issuance of Call Home messages for the pattern REDUNDANTCLOCK.*. Next, a pattern of ^Telnet would cause all the syslogs with severity greater than specified by ccmProfileAlertGroupSeverity and having a string starting and with Telnet resulting in corresponding Call Home messages being generated for syslog alert group. A pattern of LOGIN_FAIL$ would cause all the syslogs with severity greater than specified by ccmProfileAlertGroupSeverity and having a string ending in LOGIN_FAIL resulting in corresponding Call Home messages being generated for syslog alert group.')
ccmPatternAlertGroupSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 4, 1, 2), CallHomeMsgLevel().clone('debug')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmPatternAlertGroupSeverity.setStatus('current')
if mibBuilder.loadTexts: ccmPatternAlertGroupSeverity.setDescription("This object specifies the severity level, used for filtering Call Home messages in conjunction with ccmAlertGroupPattern to be issued to destinations associated with this entry. Call Home alert messages for this alert group, with severity level lower than one configured for this object will not be issued by the system. The default severity level is 'debug', which means all the alert messages will be sent.")
ccmPatternAlertGroupStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 4, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmPatternAlertGroupStorage.setStatus('current')
if mibBuilder.loadTexts: ccmPatternAlertGroupStorage.setDescription('The storage type for this conceptual row.')
ccmPatternAlertGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccmPatternAlertGroupStatus.setStatus('current')
if mibBuilder.loadTexts: ccmPatternAlertGroupStatus.setDescription('Object to manage creation and deletion of rows in this table.')
callHomeUserDefMaxCmds = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHomeUserDefMaxCmds.setStatus('current')
if mibBuilder.loadTexts: callHomeUserDefMaxCmds.setDescription('The maximum number of CLI commands that the system supports in the callHomeUserDefCmdTable for a particular alert group type represented by the callHomeAlertGroupTypeIndex object. A value of zero for this object indicates that the number of CLI commands system supports for a particular alert group type is only limited by resources available on system.')
ccmEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 8, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmEventDescription.setStatus('current')
if mibBuilder.loadTexts: ccmEventDescription.setDescription('This object indicates the description of the Call Home event that occurred in the system.')
ccmEventTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 8, 2), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmEventTime.setStatus('current')
if mibBuilder.loadTexts: ccmEventTime.setDescription('This object indicates Time when the last Call Home alert was triggered.')
ccmEventUrgencyLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 8, 3), CallHomeMsgLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmEventUrgencyLevel.setStatus('current')
if mibBuilder.loadTexts: ccmEventUrgencyLevel.setDescription('This object specifies the minimum urgency level, associated with Call Home event that occurred in the system.')
callHomeUserDefCmdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 6), )
if mibBuilder.loadTexts: callHomeUserDefCmdTable.setStatus('current')
if mibBuilder.loadTexts: callHomeUserDefCmdTable.setDescription('Call Home alert messages are sent with output of some pre-defined commands run in the system. This table provides an option for the user to specify a CLI(Command Line Interface) command or set of CLI commands to be executed when some important failures occur in the system, and whose output should be sent with the Call Home alert messages. The user should associate these commands with an alert group type. Whenever an alert message is to be sent, the Call Home server would find out if any commands are specified by the user for the alert group associated with the alert message, and attach the output of those commands in the Call Home alert message. This table contains information about all the user specified CLI commands for the alert groups types supported in the system. GLOSSARY : CLI - Command Line Interface provided by the system.')
callHomeUserDefCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 6, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeAlertGroupTypeIndex"), (0, "CISCO-CALLHOME-MIB", "callHomeUserDefCmdIndex"))
if mibBuilder.loadTexts: callHomeUserDefCmdEntry.setStatus('current')
if mibBuilder.loadTexts: callHomeUserDefCmdEntry.setDescription("An entry containing information about a user specified CLI command for a Call Home alert group type in the system. The index object 'callHomeAlertGroupTypeIndex' represents the alert group type to which the user specified CLI command should be associated. User can not configure any CLI commands for a callHomeAlertGroupTypeIndex, whose corresponding instance callHomeAlertGroupName object is configured with value 'Cisco-TAC'.")
callHomeUserDefCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: callHomeUserDefCmdIndex.setStatus('current')
if mibBuilder.loadTexts: callHomeUserDefCmdIndex.setDescription('An arbitrary integer identifying the user specified CLI command for a particular callHomeAlertGroupTypeIndex.')
callHomeUserDefCmdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeUserDefCmdName.setStatus('current')
if mibBuilder.loadTexts: callHomeUserDefCmdName.setDescription("This object represents a CLI command to be executed and whose output should be sent with the Call Home alert message. The implementation of this object does not do any syntax or semantic validation of the CLI command specified as a value of the object. The value of this object can not be modified when the value of the corresponding instance of 'callHomeUserDefCmdRowStatus' is 'active'. To modify the value this object the corresponding entry must be deleted and re-created with new value for this object.")
callHomeUserDefCmdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callHomeUserDefCmdRowStatus.setStatus('current')
if mibBuilder.loadTexts: callHomeUserDefCmdRowStatus.setDescription('Status of this row.')
ccmEventAlertGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 7), )
if mibBuilder.loadTexts: ccmEventAlertGroupTable.setStatus('current')
if mibBuilder.loadTexts: ccmEventAlertGroupTable.setDescription("A list of event type alerts groups which are currently configured in the device. An entry is created if a configured alert group whose callHomeAlertGroupCapability has 'event'. An entry is deleted if the destination profile unsubscribes an event alert group.")
ccmEventAlertGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 7, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"), (0, "CISCO-CALLHOME-MIB", "callHomeAlertGroupTypeIndex"))
if mibBuilder.loadTexts: ccmEventAlertGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ccmEventAlertGroupEntry.setDescription("An entry containing configuration information about the 'event' alert group configured for a profile.")
ccmEventAlertGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 7, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmEventAlertGroupEnable.setStatus('current')
if mibBuilder.loadTexts: ccmEventAlertGroupEnable.setDescription('This object specifies whether sending Call Home messages based on alert group event is enabled.')
ccmEventAlertGroupOperSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 30, 7, 1, 2), CallHomeMsgLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmEventAlertGroupOperSeverity.setStatus('current')
if mibBuilder.loadTexts: ccmEventAlertGroupOperSeverity.setDescription('This object indicates the severity level used in the Call Home messages.')
ccmCallHomeProfileTestControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31))
ccmDestProfileTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31, 1), )
if mibBuilder.loadTexts: ccmDestProfileTestTable.setStatus('current')
if mibBuilder.loadTexts: ccmDestProfileTestTable.setDescription('This table lists status information about the profiles configured on this device. An entry will be created in this table, for each destination profile configured in callHomeDestProfileTable. An entry will be deleted from this table if a destination profile is removed from callHomeDestProfileTable.')
ccmDestProfileTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31, 1, 1), ).setIndexNames((0, "CISCO-CALLHOME-MIB", "callHomeDestProfileName"))
if mibBuilder.loadTexts: ccmDestProfileTestEntry.setStatus('current')
if mibBuilder.loadTexts: ccmDestProfileTestEntry.setDescription('An entry containing control and status information pertaining to test on a destination profile.')
ccmDestProfileTestTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmDestProfileTestTrigger.setStatus('current')
if mibBuilder.loadTexts: ccmDestProfileTestTrigger.setDescription("This object acts as a trigger by which the generation of test message for a profile can be triggered. Setting this object to 'true' will cause system to generate a test message for a corresponding destination profile. Setting this object to 'false' has no effect. When read, this object always returns 'false'.")
ccmDestProfileTestMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmDestProfileTestMessage.setStatus('current')
if mibBuilder.loadTexts: ccmDestProfileTestMessage.setDescription('This object specifies the content of the message used for the test operation. If this object contains zero-length string, a default test message will be used.')
ccmDestProfileTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("successful", 2), ("inprogress", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDestProfileTestStatus.setStatus('current')
if mibBuilder.loadTexts: ccmDestProfileTestStatus.setDescription("This object provides the status of the last test triggered for this destination profile. unknown (1) - unknown successful (2) - successful inprogress (3) - action in progress failed (4) - failed If the value of this object is 'failed', then the ccmDestProfileTestFailureCause provides the cause for the failure. Management stations could read value of this object after a successful set to the ccmDestProfileTestTrigger object to find out the result of the test.")
ccmDestProfileTestFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 31, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDestProfileTestFailureCause.setStatus('current')
if mibBuilder.loadTexts: ccmDestProfileTestFailureCause.setDescription("This object provides the failure cause for the last test performed on this profile. Note that this object is valid only if value of ccmDestProfileTestStatus is 'failed'.")
ccmCallHomeNotifConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 32))
ccmSmtpMsgSendFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 32, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmtpMsgSendFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpMsgSendFailNotifEnable.setDescription("This variable controls generation of ccmSmtpMsgSendFailNotif. A value of 'true' for this object will enable ccmSmtpMsgSendFailNotif notification on the system. A value of 'false' for this object will disable ccmSmtpMsgSendFailNotif notification on the system.")
ccmPeriodicSwInventoryCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 33))
ccmPeriodicSwInventoryTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 33, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone('08:00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPeriodicSwInventoryTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicSwInventoryTimeOfDay.setDescription("This object represents the time of day for sending the periodic software inventory Call Home message, if the periodic software inventory is enabled on the system i.e., the value of 'ccmPeriodicSwInventoryMsgEnable' object is set to 'true'. The input should be in HH:MM format ranging from 00:00 to 23:59.")
ccmAlertRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 34), Unsigned32()).setUnits('alerts per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmAlertRateLimit.setStatus('current')
if mibBuilder.loadTexts: ccmAlertRateLimit.setDescription('The rate-limit, in alerts per minute, of call home alerts generated by the system. Upon exceeding the rate, the alert is dropped.')
ccmHttpProxyServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 35), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmHttpProxyServerAddrType.setStatus('current')
if mibBuilder.loadTexts: ccmHttpProxyServerAddrType.setDescription("This object specifies the type of the HTTP proxy server as represented by the value 'ccmHttpProxyServerAddr'.")
ccmHttpProxyServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 36), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmHttpProxyServerAddr.setStatus('current')
if mibBuilder.loadTexts: ccmHttpProxyServerAddr.setDescription("This object specifies the address of the HTTP proxy server. The type of this address is indicated by the value of 'ccmHttpProxyServerAddrType'.")
ccmHttpProxyServerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmHttpProxyServerPort.setStatus('current')
if mibBuilder.loadTexts: ccmHttpProxyServerPort.setDescription('This object specifies the port of the HTTP proxy server.')
ccmHttpProxyServerUseEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmHttpProxyServerUseEnable.setStatus('current')
if mibBuilder.loadTexts: ccmHttpProxyServerUseEnable.setDescription("This object enables/disables the use of HTTP proxy server configured for sending callhome messages over HTTP. A value of 'true' specifies that proxy server will be used. A value of 'false' specifies that the proxy server will not be used.")
callHomeSmtpServerUseVrf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 39), CiscoVrfName().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHomeSmtpServerUseVrf.setStatus('current')
if mibBuilder.loadTexts: callHomeSmtpServerUseVrf.setDescription("The Virtual Routing and Forwarding (VRF) domain configured for this SMTP server. A zero length string indicates that there is no VRF domain configured and the default VRF domain is used A 'set' operation with zero length string indicates that there is no VRF domain configured. A subsequent 'get' operation on this object will return 'default'")
ccmHttpTransportUseVrf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 1, 40), CiscoVrfName().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmHttpTransportUseVrf.setStatus('current')
if mibBuilder.loadTexts: ccmHttpTransportUseVrf.setDescription("The Virtual Routing and Forwarding (VRF) domain configured for HTTP transport in Call Home. A zero length string indicates that there is no VRF domain configured and the default VRF domain is used A 'set' operation with zero length string indicates that there is no VRF domain configured. A subsequent 'get' operation on this object will return 'default'")
ccmOnDemandMsgSendControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 1))
ccmOnDemandMsgSendAlertGroup = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandMsgSendAlertGroup.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgSendAlertGroup.setDescription("The object specifies the alert group for which on demand Call Home message should be generated. Only those alert groups whose corresponding instance of callHomeAlertGroupCapability has 'onDemand' or 'onDemandPerEntity', may be set for this object. Value of this object should be ignored if the value of ccmOnDemandMessageType is other than 'alertGroup'.")
ccmOnDemandMsgSendProfile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandMsgSendProfile.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgSendProfile.setDescription("This object specifies the name of the profile for which the on demand Call Home messages should be generated. A zero length string for this object indicates that on demand Call Home messages are generated for all profiles. Value of this object should be ignored if the value of ccmOnDemandMessageType is other than 'alertGroup'.")
ccmOnDemandMsgSendEntPhyIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 1, 3), EntPhysicalIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandMsgSendEntPhyIndex.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgSendEntPhyIndex.setDescription("This object specifies the value of entPhysicalIndex of the physical entity for which the on demand Call Home messages should be generated. Only those entities which support generation of on demand Call Home messages may be specified for this object. The value of this object should be ignored if alert group specified by ccmOnDemandMsgSendAlertGroup does not have 'onDemandPerEntity' capability. Value of this object should be ignored if the value of ccmOnDemandMessageType is other than 'alertGroup'.")
ccmOnDemandMsgSendTrigger = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandMsgSendTrigger.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgSendTrigger.setDescription("Object to trigger on demand Call Home messages. Setting the object to 'true' triggers on demand Call Home messages. Setting the object to 'false' has no effect. When read, this object always returns 'false'.")
ccmOnDemandCliMsgControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2))
ccmOnDemandCliMsgCliList = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandCliMsgCliList.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgCliList.setDescription("The object specifies a list of commands that will be executed and the output of which will be part of on demand Call Home message. The list contains one or more commands which are separated by ';'. Examples of command list: - show version - show version;show module;show vlan")
ccmOnDemandCliMsgTransport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("email", 1), ("http", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandCliMsgTransport.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgTransport.setDescription("The object specifies the transport method used to deliver the on demand Call Home messages with CLI output. 'email' -- Indicates that on demand message will be delivered via e-mail. 'http' -- Indicates that on demand message will be delivered via HTTP.")
ccmOnDemandCliMsgEmail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandCliMsgEmail.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgEmail.setDescription("The object specifies the e-mail address to which the on demand Call Home message with CLI output will be sent if ccmOnDemandCliMsgTransport is 'email'. The object specifies the e-mail address to which the Smart Call Home backend will forward the on demand Call Home message with CLI output if ccmOnDemandCliMsgTransport is 'http'.")
ccmOnDemandCliMsgFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2, 4), CallHomeMsgFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandCliMsgFormat.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgFormat.setDescription('This object specifies the format of the on demand Call Home message with CLI output.')
ccmOnDemandCliMsgTacServiceReqId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandCliMsgTacServiceReqId.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgTacServiceReqId.setDescription('This object specifies the Service Request Identifier associated with on demand Call Home message with CLI output.')
ccmOnDemandCliMsgTrigger = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 4, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmOnDemandCliMsgTrigger.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgTrigger.setDescription("Object to trigger on demand Call Home messages with CLI output. Setting the object to 'true' triggers on demand Call Home messages. Setting the object to 'false' has no effect. When read, this object always returns 'false'.")
ccmSmartCallHomeProfile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmartCallHomeProfile.setStatus('current')
if mibBuilder.loadTexts: ccmSmartCallHomeProfile.setDescription('This object specifies the name of the profile for which the Smart Call Home messages should be generated. A zero length string for this object indicates that the Smart Call Home messages are generated only for Cisco-TAC profile.')
ccmSmartCallHomeServiceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("commandReference", 1), ("configSanity", 2), ("bugsList", 3), ("outputAnalysis", 4), ("productAdvisory", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmartCallHomeServiceType.setStatus('current')
if mibBuilder.loadTexts: ccmSmartCallHomeServiceType.setDescription("The object specifies the type of service requested from Smart Call Home server. 'commandReference' indicates a request for command reference to Smart Call Home server. 'configSanity' indicates a request for config-sanity request to Smart Call Home server. 'bugsList' indicates a request for bugs-list to Smart Call Home server. 'outputAnalysis' indicates a request for output-analysis to Smart Call Home server. 'productAdvisory' indicates a request for exceptions report/advisory to Smart Call Home server.")
ccmSmartCallHomeAnalysisCmd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 5, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmartCallHomeAnalysisCmd.setStatus('current')
if mibBuilder.loadTexts: ccmSmartCallHomeAnalysisCmd.setDescription("The object specifies an existing display/show command on the the system. The output of the command will be included in the Call Home message and be processed by Cisco backend OI (Output Interpreter) tool for further analysis. This object is applicable only if the value of the corresponding ccmSmartCallHomeServiceType is 'outputAnalysis'.")
ccmSmartCallHomeCcoId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 5, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmartCallHomeCcoId.setStatus('current')
if mibBuilder.loadTexts: ccmSmartCallHomeCcoId.setDescription('The object specifies registered CCO ID (Cisco Connection Online) ID to which the response to Smart Call Home requests should be directed. Response from Cisco will be directed to system contact address specified in the Smart Call Home request if value of this object is a zero length string.')
ccmSmartCallHomeTrigger = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmSmartCallHomeTrigger.setStatus('current')
if mibBuilder.loadTexts: ccmSmartCallHomeTrigger.setDescription("Object to trigger Smart Call Home request messages. Setting the object to 'true' triggers Smart Call Home request message. The object can be set to the value of 'true' only if ccmOnDemandMsgServAvailable returns 'true'. Setting the object to 'false' has no effect. When read, this object always returns 'false'.")
ccmCallHomeVrfName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 6, 1), CiscoVrfName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmCallHomeVrfName.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeVrfName.setDescription('The name of Virtual Routing and Forwarding (VRF) domain configured for Call Home feature. A zero length string indicates that there is no VRF domain configured and the default VRF domain is used by Call Home feature.')
ccmMsgSourceIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 7, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmMsgSourceIpAddrType.setStatus('current')
if mibBuilder.loadTexts: ccmMsgSourceIpAddrType.setDescription('The type of Internet address to be used as the source address while generating Call Home messages. Changing the value of this object may change the value of ccmMsgSourceInterface.')
ccmMsgSourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 7, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmMsgSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: ccmMsgSourceIpAddr.setDescription('The Internet address to be used as the source address while generating Call Home messages. The type of this address is determined by the ccmMessageSourceIpAddrType object.')
ccmMsgSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 7, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmMsgSourceInterface.setStatus('current')
if mibBuilder.loadTexts: ccmMsgSourceInterface.setDescription('The interface to be used while generating Call Home messages. A value of zero indicates that a source interface is not specified. Changing the value of this object may change the value of ccmMsgSourceIpAddrType and ccmMsgSourceIpAddr.')
ccmDiagSignatureActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmDiagSignatureActive.setStatus('current')
if mibBuilder.loadTexts: ccmDiagSignatureActive.setDescription("The object specifies if the Diagnostic Signature functionality of Call Home is active. Diagnostic signatures allow customers to download Cisco digitally signed signatures to devices, and call home will be able to support new events and new actions without upgrading the software. A value of 'true' makes the Diagnostic Signature functionality active.")
ccmDiagSignatureProfileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmDiagSignatureProfileName.setStatus('current')
if mibBuilder.loadTexts: ccmDiagSignatureProfileName.setDescription('This object specifies the profile that will use the Diagnostic Signature functionality. A zero length string for this object indicates that Cisco-TAC profile will use the Diagnostic Signature functionality.')
ccmCallHomeDiagSignatureInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3), )
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureInfoTable.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureInfoTable.setDescription('A list of Call Home Diagnostic Signatures installed on the device.')
ccmCallHomeDiagSignatureInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1), ).setIndexNames((1, "CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureName"))
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureInfoEntry.setDescription('An entry containing management information of a Call Home Diagnostic Signature.')
ccmCallHomeDiagSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureName.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureName.setDescription('The name of Call Home Diagnostic Signature installed on the device.')
ccmCallHomeDiagSignatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("meta", 1), ("tcl", 2), ("applet", 3), ("mixed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureType.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureType.setDescription('The type of this Call Home Diagnostic Signature.')
ccmCallHomeDiagSignatureFuncDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureFuncDescr.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureFuncDescr.setDescription('A user friendly string providing functionality description for this Call Home Diagnostic Signature.')
ccmCallHomeDiagSignatureRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureRev.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureRev.setDescription('The revision information of Call Home Diagnostic Signature.')
ccmCallHomeDiagSignatureSigner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cisco", 1), ("partner", 2), ("thirdParty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureSigner.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureSigner.setDescription("The entity who signed this Call Home Diagnostic Signature. 'cisco' - Diagnostic Signature has been signed by Cisco. 'partner' - Diagnostic Signature has been signed by a Cisco partner. 'thirdParty' - Diagnostic Signature has been signed by a third-party.")
ccmCallHomeDiagSignatureTriggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureTriggerCount.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureTriggerCount.setDescription('The number of times this Call Home Diagnostic Signature has been triggered.')
ccmCallHomeDiagSignatureAvgRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 7), Unsigned32()).setUnits('milli seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureAvgRuntime.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureAvgRuntime.setDescription('The average run time of this Call Home Diagnostic Signature.')
ccmCallHomeDiagSignatureMaxRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 9, 3, 1, 8), Unsigned32()).setUnits('milli seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureMaxRuntime.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureMaxRuntime.setDescription('The maximum amount of time it took to run this Call Home Diagnostic Signature.')
ccmCallHomeSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmCallHomeSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeSecurityLevel.setDescription('This object specifies the security level for Call Home. normal - running configuration and show CLI output are not changed within Call Home messages. high - system reveal subset of running configuration and show CLI output within Call Home messages due to privacy and security concern.')
ccmAnonymousReportingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmAnonymousReportingEnable.setStatus('current')
if mibBuilder.loadTexts: ccmAnonymousReportingEnable.setDescription("This object specifies if anonymous reporting functionality is enable for Call Home. A value of 'true' enables the anonymous reporting functionality.")
ccmAaaAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmAaaAuthEnable.setStatus('current')
if mibBuilder.loadTexts: ccmAaaAuthEnable.setDescription("The object specifies if the AAA authorization is required when running the CLI commands in Call Home messages. A value of 'true' enables the AAA authorization for the CLI commands in Call Home messages.")
ccmAaaAuthUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 300, 1, 13, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmAaaAuthUserName.setStatus('current')
if mibBuilder.loadTexts: ccmAaaAuthUserName.setDescription("The object specifies the user name used by Call Home for AAA authorization. Value of this object should be ignored if ccmAaaAuthEnable is 'false'.")
ccmSmtpServerFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 300, 0, 1)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServersPort"))
if mibBuilder.loadTexts: ccmSmtpServerFailNotif.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerFailNotif.setDescription("A ccmSmtpServerFailNotif is sent if the device fails on sending an e-mail notification through an SMTP server in ccmSmtpServersTable. For each SMTP server, an agent should not generate more than one ccmSmtpServerFailNotif 'notification-event' in a given time interval (ten seconds is the suggested default). A 'notification-event' is the transmission of a single trap or inform PDU to a list of notification destinations. If within the throttling period, additional failures to send a message through same server occur, then notification-events for these failure should be suppressed by the agent until the current throttling period expires.")
ccmAlertGroupTypeAddedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 300, 0, 2)).setObjects(("CISCO-CALLHOME-MIB", "callHomeAlertGroupName"))
if mibBuilder.loadTexts: ccmAlertGroupTypeAddedNotif.setStatus('current')
if mibBuilder.loadTexts: ccmAlertGroupTypeAddedNotif.setDescription("A ccmAlertGroupTypeAddedNotif is sent, when a new entry corresponds to the 'callHomeAlertGroupName' object in this notification is added into the callHomeAlertGroupTypeTable.")
ccmAlertGroupTypeDeletedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 300, 0, 3)).setObjects(("CISCO-CALLHOME-MIB", "callHomeAlertGroupName"))
if mibBuilder.loadTexts: ccmAlertGroupTypeDeletedNotif.setStatus('current')
if mibBuilder.loadTexts: ccmAlertGroupTypeDeletedNotif.setDescription("A ccmAlertGroupTypeAddedNotif is sent, when an entry corresponds to 'callHomeAlertGroupName' object in this notification is deleted from the callHomeAlertGroupTypeTable.")
ccmSmtpMsgSendFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 300, 0, 4))
if mibBuilder.loadTexts: ccmSmtpMsgSendFailNotif.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpMsgSendFailNotif.setDescription('A ccmSmtpMsgSendFailNotif is generated if the device fails to send an e-mail notification through all of the SMTP servers in ccmSmtpServersTable.')
ccmEventNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 300, 0, 5)).setObjects(("SNMPv2-MIB", "sysName"), ("CISCO-CALLHOME-MIB", "ccmEventDescription"), ("CISCO-CALLHOME-MIB", "ccmEventTime"), ("CISCO-CALLHOME-MIB", "ccmEventUrgencyLevel"))
if mibBuilder.loadTexts: ccmEventNotif.setStatus('current')
if mibBuilder.loadTexts: ccmEventNotif.setDescription('This notification is generated every time a Call Home external event is triggered in the system. Internal events like Periodic Configuration and Inventory events do not generate notifications.')
chMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1))
chMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2))
chMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 1)).setObjects(("CISCO-CALLHOME-MIB", "chConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance = chMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT callHomeDestProfileName SYNTAX SnmpAdminString (SIZE (1..11)) DESCRIPTION An implementation is only required to support a profile name of size 1 to 11 octets.')
chMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 2)).setObjects(("CISCO-CALLHOME-MIB", "chConfigurationGroup1"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance1 = chMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance1.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT callHomeDestProfileName SYNTAX SnmpAdminString (SIZE (1..31)) DESCRIPTION An implementation is only required to support a profile name of size 1 to 31 octets.')
chMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 3)).setObjects(("CISCO-CALLHOME-MIB", "chConfigurationGroup2"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance2 = chMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance2.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT callHomeDestProfileName SYNTAX SnmpAdminString (SIZE (1..31)) DESCRIPTION An implementation is only required to support a profile name of size 1 to 31 octets.')
chMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 4)).setObjects(("CISCO-CALLHOME-MIB", "chConfigurationGroup2"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance3 = chMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance3.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT callHomeDestProfileName SYNTAX SnmpAdminString (SIZE (1..31)) DESCRIPTION An implementation is only required to support a profile name of size 1 to 31 octets.')
chMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 5)).setObjects(("CISCO-CALLHOME-MIB", "ccmConfigurationGroup3"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup1"), ("CISCO-CALLHOME-MIB", "chSystemServicePriorityGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertActionGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileMessageLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileActivationGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileTestGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupsGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupControlGroup"), ("CISCO-CALLHOME-MIB", "ccmThrottleConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPriorityGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"), ("CISCO-CALLHOME-MIB", "ccmHttpCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmSeverityAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupCapabilityGroup"), ("CISCO-CALLHOME-MIB", "ccmUserDefCmdGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifCtrlGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertHCStatisticsGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimitGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileHiMessageSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance4 = chMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance4.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT callHomeDestProfileName SYNTAX SnmpAdminString (SIZE (1..31)) DESCRIPTION An implementation is only required to support a profile name of size 1 to 31 octets.')
chMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 6)).setObjects(("CISCO-CALLHOME-MIB", "ccmConfigurationGroup3"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup1"), ("CISCO-CALLHOME-MIB", "chSystemServicePriorityGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertActionGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileMessageLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileActivationGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileTestGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupsGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupControlGroup"), ("CISCO-CALLHOME-MIB", "ccmThrottleConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPriorityGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"), ("CISCO-CALLHOME-MIB", "ccmHttpCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmSeverityAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupCapabilityGroup"), ("CISCO-CALLHOME-MIB", "ccmUserDefCmdGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifCtrlGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertHCStatisticsGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimitGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileHiMessageSizeGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendControlGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeGroup"), ("CISCO-CALLHOME-MIB", "ccmEventStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance5 = chMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance5.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses.')
chMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 7)).setObjects(("CISCO-CALLHOME-MIB", "ccmConfigurationGroup3"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup1"), ("CISCO-CALLHOME-MIB", "chSystemServicePriorityGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertActionGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileMessageLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileActivationGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileTestGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupsGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupControlGroup"), ("CISCO-CALLHOME-MIB", "ccmThrottleConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPriorityGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"), ("CISCO-CALLHOME-MIB", "ccmHttpCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmSeverityAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupCapabilityGroup"), ("CISCO-CALLHOME-MIB", "ccmUserDefCmdGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifCtrlGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertHCStatisticsGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimitGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileHiMessageSizeGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendControlGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeGroup"), ("CISCO-CALLHOME-MIB", "ccmEventStatsGroup"), ("CISCO-CALLHOME-MIB", "ccmEventNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmCallhomeEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance6 = chMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance6.setDescription('The compliance statement for entities which implement the Call Home feature. It is deprecated and superseded by chMIBCompliance7 statement. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses.')
chMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 8)).setObjects(("CISCO-CALLHOME-MIB", "ccmConfigurationGroup3"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup1"), ("CISCO-CALLHOME-MIB", "chSystemServicePriorityGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertActionGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileMessageLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileActivationGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileTestGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupsGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupControlGroup"), ("CISCO-CALLHOME-MIB", "ccmThrottleConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPriorityGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"), ("CISCO-CALLHOME-MIB", "ccmHttpCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmSeverityAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupCapabilityGroup"), ("CISCO-CALLHOME-MIB", "ccmUserDefCmdGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifCtrlGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertHCStatisticsGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimitGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileHiMessageSizeGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendControlGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeGroup"), ("CISCO-CALLHOME-MIB", "ccmEventStatsGroup"), ("CISCO-CALLHOME-MIB", "ccmEventNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmCallhomeEventsGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance7 = chMIBCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance7.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses.')
chMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 9)).setObjects(("CISCO-CALLHOME-MIB", "ccmConfigurationGroup3"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup1"), ("CISCO-CALLHOME-MIB", "chSystemServicePriorityGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertActionGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileMessageLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileActivationGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileTestGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupsGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupControlGroup"), ("CISCO-CALLHOME-MIB", "ccmThrottleConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPriorityGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"), ("CISCO-CALLHOME-MIB", "ccmHttpCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmSeverityAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupCapabilityGroup"), ("CISCO-CALLHOME-MIB", "ccmUserDefCmdGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifCtrlGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertHCStatisticsGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimitGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileHiMessageSizeGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendControlGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeGroup"), ("CISCO-CALLHOME-MIB", "ccmEventStatsGroup"), ("CISCO-CALLHOME-MIB", "ccmEventNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmCallhomeEventsGroup"), ("CISCO-CALLHOME-MIB", "ccmHttpProxyServerGroup"), ("CISCO-CALLHOME-MIB", "ccmHttpTransportVrfGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeVrfGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersVrfGroup"), ("CISCO-CALLHOME-MIB", "ccmSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "ccmMessageSourceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance8 = chMIBCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: chMIBCompliance8.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses.')
chMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 1, 10)).setObjects(("CISCO-CALLHOME-MIB", "ccmConfigurationGroup3"), ("CISCO-CALLHOME-MIB", "chStatisticsGroup"), ("CISCO-CALLHOME-MIB", "chSystemInformationGroup1"), ("CISCO-CALLHOME-MIB", "chSystemServicePriorityGroup"), ("CISCO-CALLHOME-MIB", "chEmailMsgDispGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertActionGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileMessageLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileActivationGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileTestGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupsGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileAlertGroupControlGroup"), ("CISCO-CALLHOME-MIB", "ccmThrottleConfigurationGroup"), ("CISCO-CALLHOME-MIB", "chSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chPeriodicSwInventoryInfoGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryInfoGroup1"), ("CISCO-CALLHOME-MIB", "chMultipleSmtpServersGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPriorityGroup"), ("CISCO-CALLHOME-MIB", "ccmSysLogSeverityGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsConfigGroup"), ("CISCO-CALLHOME-MIB", "ccmMIBNotificationsGroup1"), ("CISCO-CALLHOME-MIB", "ccmHttpCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmSeverityAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupCfgGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupCapabilityGroup"), ("CISCO-CALLHOME-MIB", "ccmUserDefCmdGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifCtrlGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertHCStatisticsGroup"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimitGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmProfileHiMessageSizeGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendControlGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgStatusGroup"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeGroup"), ("CISCO-CALLHOME-MIB", "ccmEventStatsGroup"), ("CISCO-CALLHOME-MIB", "ccmEventNotifGroup"), ("CISCO-CALLHOME-MIB", "ccmCallhomeEventsGroup"), ("CISCO-CALLHOME-MIB", "ccmHttpProxyServerGroup"), ("CISCO-CALLHOME-MIB", "ccmHttpTransportVrfGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeVrfGroup"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersVrfGroup"), ("CISCO-CALLHOME-MIB", "ccmSingleSmtpServerGroup"), ("CISCO-CALLHOME-MIB", "ccmMessageSourceGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomePeriodicMinutesGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeSecurityLevelGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeAnonymousReportingGroup"), ("CISCO-CALLHOME-MIB", "ccmCallHomeAaaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMIBCompliance9 = chMIBCompliance9.setStatus('current')
if mibBuilder.loadTexts: chMIBCompliance9.setDescription('The compliance statement for entities which implement the Call Home feature. OBJECT ccmSmtpServersAddrType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses.')
chSystemInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 1)).setObjects(("CISCO-CALLHOME-MIB", "sysContactPhoneNumber"), ("CISCO-CALLHOME-MIB", "sysContactEmailAddress"), ("CISCO-CALLHOME-MIB", "sysStreetAddress"), ("CISCO-CALLHOME-MIB", "callHomeCustomerId"), ("CISCO-CALLHOME-MIB", "callHomeContractId"), ("CISCO-CALLHOME-MIB", "callHomeSiteId"), ("CISCO-CALLHOME-MIB", "callHomeDeviceServicePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chSystemInformationGroup = chSystemInformationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: chSystemInformationGroup.setDescription('A collection of objects for displaying and configuring system information pertaining to Call Home.')
chConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 2)).setObjects(("CISCO-CALLHOME-MIB", "callHomeEnable"), ("CISCO-CALLHOME-MIB", "callHomeAlertAction"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionStatus"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionFailureCause"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgFormat"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMaxMsgSize"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileTrnsprtMthd"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileStatus"), ("CISCO-CALLHOME-MIB", "callHomeEmailAddrTblMaxEntries"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddress"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddressStatus"), ("CISCO-CALLHOME-MIB", "callHomeEmailFrom"), ("CISCO-CALLHOME-MIB", "callHomeEmailReplyTo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chConfigurationGroup = chConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: chConfigurationGroup.setDescription('A collection of objects for displaying and configuring Call Home parameters.')
chEmailMsgDispGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 3)).setObjects(("CISCO-CALLHOME-MIB", "callHomeEmailMsgDispNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chEmailMsgDispGroup = chEmailMsgDispGroup.setStatus('current')
if mibBuilder.loadTexts: chEmailMsgDispGroup.setDescription('A collection of object(s) for displaying and configuring e-mail address to which the e-mail disposition notification should be sent.')
chSingleSmtpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 4)).setObjects(("CISCO-CALLHOME-MIB", "callHomeSmtpServerAddrType"), ("CISCO-CALLHOME-MIB", "callHomeSmtpServerAddr"), ("CISCO-CALLHOME-MIB", "callHomeSmtpServerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chSingleSmtpServerGroup = chSingleSmtpServerGroup.setStatus('deprecated')
if mibBuilder.loadTexts: chSingleSmtpServerGroup.setDescription('A collection of objects for displaying and configuring Call Home SMTP server on the devices which support only one SMTP server.')
chMultipleSmtpServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 5)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServersTblMaxEntries"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersPort"), ("CISCO-CALLHOME-MIB", "ccmSmtpServersStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chMultipleSmtpServersGroup = chMultipleSmtpServersGroup.setStatus('current')
if mibBuilder.loadTexts: chMultipleSmtpServersGroup.setDescription('A collection of objects for displaying and configuring Call Home SMTP server on the devices which support on one SMTP server.')
chStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 6)).setObjects(("CISCO-CALLHOME-MIB", "callHomeLastAlertSent"), ("CISCO-CALLHOME-MIB", "callHomeAlerts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chStatisticsGroup = chStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: chStatisticsGroup.setDescription('A collection of objects for displaying Call Home statistics.')
ccmSysLogSeverityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 7)).setObjects(("CISCO-CALLHOME-MIB", "ccmSysLogSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSysLogSeverityGroup = ccmSysLogSeverityGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSysLogSeverityGroup.setDescription('A collection of object(s) for displaying and configuring Call Home syslog severity based on which Call Home alerts may be issued.')
ccmMIBNotificationsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 8)).setObjects(("CISCO-CALLHOME-MIB", "ccmEnableSmtpServerNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMIBNotificationsConfigGroup = ccmMIBNotificationsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ccmMIBNotificationsConfigGroup.setDescription('A collection of objects for displaying and configuring Call Home notifications.')
ccmMIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 9)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServerFailNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMIBNotificationsGroup = ccmMIBNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ccmMIBNotificationsGroup.setDescription('A collection of notifications.')
chConfigurationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 10)).setObjects(("CISCO-CALLHOME-MIB", "callHomeEnable"), ("CISCO-CALLHOME-MIB", "callHomeAlertAction"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionStatus"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionFailureCause"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgFormat"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMaxMsgSize"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileTrnsprtMthd"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileStatus"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgLevel"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileAlertGroups"), ("CISCO-CALLHOME-MIB", "callHomeEmailAddrTblMaxEntries"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddress"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddressStatus"), ("CISCO-CALLHOME-MIB", "callHomeEmailFrom"), ("CISCO-CALLHOME-MIB", "callHomeEmailReplyTo"), ("CISCO-CALLHOME-MIB", "callHomeAlertGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chConfigurationGroup1 = chConfigurationGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: chConfigurationGroup1.setDescription('A collection of objects for displaying and configuring Call Home parameters.')
ccmMIBNotificationsGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 11)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServerFailNotif"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupTypeAddedNotif"), ("CISCO-CALLHOME-MIB", "ccmAlertGroupTypeDeletedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMIBNotificationsGroup1 = ccmMIBNotificationsGroup1.setStatus('current')
if mibBuilder.loadTexts: ccmMIBNotificationsGroup1.setDescription('A collection of notifications.')
chConfigurationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 12)).setObjects(("CISCO-CALLHOME-MIB", "callHomeEnable"), ("CISCO-CALLHOME-MIB", "callHomeAlertAction"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionStatus"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionFailureCause"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgFormat"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMaxMsgSize"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileTrnsprtMthd"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileStatus"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgLevel"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileAlertGroups"), ("CISCO-CALLHOME-MIB", "callHomeEmailAddrTblMaxEntries"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddress"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddressStatus"), ("CISCO-CALLHOME-MIB", "callHomeEmailFrom"), ("CISCO-CALLHOME-MIB", "callHomeEmailReplyTo"), ("CISCO-CALLHOME-MIB", "callHomeAlertGroupName"), ("CISCO-CALLHOME-MIB", "ccmMsgThrottlingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chConfigurationGroup2 = chConfigurationGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: chConfigurationGroup2.setDescription('A collection of objects for displaying and configuring Call Home parameters.')
chSwInventoryInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 13)).setObjects(("CISCO-CALLHOME-MIB", "callHomeInventoryInfoName"), ("CISCO-CALLHOME-MIB", "callHomeInventoryInfoValue"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryMsgEnable"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryTimeFrame"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chSwInventoryInfoGroup = chSwInventoryInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: chSwInventoryInfoGroup.setDescription('A collection of objects for displaying and configuring software inventory information.')
chPeriodicSwInventoryInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 14)).setObjects(("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryMsgEnable"), ("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryTimeFrame"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chPeriodicSwInventoryInfoGroup = chPeriodicSwInventoryInfoGroup.setStatus('current')
if mibBuilder.loadTexts: chPeriodicSwInventoryInfoGroup.setDescription('A collection of objects for configuring periodic software inventory information.')
chSwInventoryInfoGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 15)).setObjects(("CISCO-CALLHOME-MIB", "callHomeInventoryInfoName"), ("CISCO-CALLHOME-MIB", "callHomeInventoryInfoValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chSwInventoryInfoGroup1 = chSwInventoryInfoGroup1.setStatus('current')
if mibBuilder.loadTexts: chSwInventoryInfoGroup1.setDescription('A collection of objects for displaying software inventory information.')
ccmUserDefCmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 16)).setObjects(("CISCO-CALLHOME-MIB", "callHomeUserDefMaxCmds"), ("CISCO-CALLHOME-MIB", "callHomeUserDefCmdName"), ("CISCO-CALLHOME-MIB", "callHomeUserDefCmdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmUserDefCmdGroup = ccmUserDefCmdGroup.setStatus('current')
if mibBuilder.loadTexts: ccmUserDefCmdGroup.setDescription('A collection of objects for configuring user defined commands for the Call Home alert group types.')
ccmPeriodicSwInventoryInfoGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 17)).setObjects(("CISCO-CALLHOME-MIB", "ccmPeriodicSwInventoryTimeOfDay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPeriodicSwInventoryInfoGroup1 = ccmPeriodicSwInventoryInfoGroup1.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicSwInventoryInfoGroup1.setDescription('A collection of objects for configuring the additional information of periodic software inventory information.')
ccmConfigurationGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 18)).setObjects(("CISCO-CALLHOME-MIB", "callHomeEnable"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgFormat"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileTrnsprtMthd"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileStatus"), ("CISCO-CALLHOME-MIB", "callHomeDestProfileMaxMsgSize"), ("CISCO-CALLHOME-MIB", "callHomeEmailAddrTblMaxEntries"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddress"), ("CISCO-CALLHOME-MIB", "callHomeDestEmailAddressStatus"), ("CISCO-CALLHOME-MIB", "callHomeEmailFrom"), ("CISCO-CALLHOME-MIB", "callHomeEmailReplyTo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmConfigurationGroup3 = ccmConfigurationGroup3.setStatus('current')
if mibBuilder.loadTexts: ccmConfigurationGroup3.setDescription('A collection of objects for displaying and configuring Call Home parameters.')
ccmAlertActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 19)).setObjects(("CISCO-CALLHOME-MIB", "callHomeAlertAction"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionStatus"), ("CISCO-CALLHOME-MIB", "callHomeAlertActionFailureCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmAlertActionGroup = ccmAlertActionGroup.setStatus('current')
if mibBuilder.loadTexts: ccmAlertActionGroup.setDescription('A collection of objects providing control and status information for Call Home alert actions.')
ccmProfileMessageLevelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 20)).setObjects(("CISCO-CALLHOME-MIB", "callHomeDestProfileMsgLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmProfileMessageLevelGroup = ccmProfileMessageLevelGroup.setStatus('current')
if mibBuilder.loadTexts: ccmProfileMessageLevelGroup.setDescription('A collection of objects providing control over message filtering level for Call Home messages.')
ccmProfileActivationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 21)).setObjects(("CISCO-CALLHOME-MIB", "callHomeDestProfileActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmProfileActivationGroup = ccmProfileActivationGroup.setStatus('current')
if mibBuilder.loadTexts: ccmProfileActivationGroup.setDescription('A collection of objects providing control over activating and deactivating configured Call Home profiles.')
ccmProfileTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 22)).setObjects(("CISCO-CALLHOME-MIB", "ccmDestProfileTestTrigger"), ("CISCO-CALLHOME-MIB", "ccmDestProfileTestMessage"), ("CISCO-CALLHOME-MIB", "ccmDestProfileTestStatus"), ("CISCO-CALLHOME-MIB", "ccmDestProfileTestFailureCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmProfileTestGroup = ccmProfileTestGroup.setStatus('current')
if mibBuilder.loadTexts: ccmProfileTestGroup.setDescription('A collection of objects providing control over generation of test alert messages for a profile.')
ccmProfileAlertGroupsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 23)).setObjects(("CISCO-CALLHOME-MIB", "callHomeDestProfileAlertGroups"), ("CISCO-CALLHOME-MIB", "callHomeAlertGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmProfileAlertGroupsGroup = ccmProfileAlertGroupsGroup.setStatus('current')
if mibBuilder.loadTexts: ccmProfileAlertGroupsGroup.setDescription('A collection of objects that provide names to identify alert-groups supported by the system and ability to associate them with various profiles.')
ccmProfileAlertGroupControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 24)).setObjects(("CISCO-CALLHOME-MIB", "callHomeAlertGroupEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmProfileAlertGroupControlGroup = ccmProfileAlertGroupControlGroup.setStatus('current')
if mibBuilder.loadTexts: ccmProfileAlertGroupControlGroup.setDescription('A collection of objects providing control over enabling and disabling various alert-groups supported by the system.')
ccmThrottleConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 25)).setObjects(("CISCO-CALLHOME-MIB", "ccmMsgThrottlingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmThrottleConfigurationGroup = ccmThrottleConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: ccmThrottleConfigurationGroup.setDescription('A collection of objects for controlling Call Home message throttling functionality.')
ccmSmtpServersPriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 26)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServersPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSmtpServersPriorityGroup = ccmSmtpServersPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersPriorityGroup.setDescription('A collection of object(s) providing priority related information for Call Home SMTP servers.')
ccmAlertGroupCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 27)).setObjects(("CISCO-CALLHOME-MIB", "callHomeAlertGroupCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmAlertGroupCapabilityGroup = ccmAlertGroupCapabilityGroup.setStatus('current')
if mibBuilder.loadTexts: ccmAlertGroupCapabilityGroup.setDescription('A collection of object(s) providing information about criteria used by system to issue message for the corresponding alert group.')
ccmHttpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 28)).setObjects(("CISCO-CALLHOME-MIB", "callHomeDestType"), ("CISCO-CALLHOME-MIB", "callHomeDestHttpUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmHttpCfgGroup = ccmHttpCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccmHttpCfgGroup.setDescription('A collection of object(s) for configuring HTTP transport related information for delivering Call Home messages.')
ccmSeverityAlertGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 29)).setObjects(("CISCO-CALLHOME-MIB", "ccmAlertGroupSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSeverityAlertGroupCfgGroup = ccmSeverityAlertGroupCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSeverityAlertGroupCfgGroup.setDescription('A collection of objects providing information of severity based alert groups.')
ccmPeriodicAlertGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 30)).setObjects(("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupInterval"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupDayOfWeek"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupDayOfMonth"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupHour"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupMinute"), ("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPeriodicAlertGroupCfgGroup = ccmPeriodicAlertGroupCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccmPeriodicAlertGroupCfgGroup.setDescription('A collection of objects providing information of periodic alert groups.')
ccmPatternAlertGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 31)).setObjects(("CISCO-CALLHOME-MIB", "ccmMaxSyslogAlertGroupPatterns"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupSeverity"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupStorage"), ("CISCO-CALLHOME-MIB", "ccmPatternAlertGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPatternAlertGroupCfgGroup = ccmPatternAlertGroupCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccmPatternAlertGroupCfgGroup.setDescription('A collection of objects providing information of pattern based alert groups.')
ccmEventAlertGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 32)).setObjects(("CISCO-CALLHOME-MIB", "ccmEventAlertGroupEnable"), ("CISCO-CALLHOME-MIB", "ccmEventAlertGroupOperSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmEventAlertGroupCfgGroup = ccmEventAlertGroupCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ccmEventAlertGroupCfgGroup.setDescription('A collection of objects providing information of event based alert groups.')
ccmSmtpMsgSendFailNotifCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 33)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSmtpMsgSendFailNotifCtrlGroup = ccmSmtpMsgSendFailNotifCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpMsgSendFailNotifCtrlGroup.setDescription('A collection of object(s) to control SMTP message send failure related notification(s).')
ccmSmtpMsgSendFailNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 34)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpMsgSendFailNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSmtpMsgSendFailNotifGroup = ccmSmtpMsgSendFailNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpMsgSendFailNotifGroup.setDescription('A collection of notification(s) for SMTP message send failures.')
ccmAlertHCStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 35)).setObjects(("CISCO-CALLHOME-MIB", "callHomeHCAlerts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmAlertHCStatisticsGroup = ccmAlertHCStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ccmAlertHCStatisticsGroup.setDescription('A collection of objects for displaying Call Home 64 bit alert statistics.')
ccmAlertRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 36)).setObjects(("CISCO-CALLHOME-MIB", "ccmAlertsDropped"), ("CISCO-CALLHOME-MIB", "ccmAlertRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmAlertRateLimitGroup = ccmAlertRateLimitGroup.setStatus('current')
if mibBuilder.loadTexts: ccmAlertRateLimitGroup.setDescription('A collection of object(s) providing information regarding the Call Home rate limit mechanism.')
ccmSmtpServerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 37)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusTimeStamp"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusInitiate"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusResult"), ("CISCO-CALLHOME-MIB", "ccmSmtpServerStatusAvailability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSmtpServerStatusGroup = ccmSmtpServerStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServerStatusGroup.setDescription('A collection of object(s) providing information regarding status availability of Call Home Smtp Servers.')
ccmProfileHiMessageSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 38)).setObjects(("CISCO-CALLHOME-MIB", "callHomeDestProfileHiMaxMsgSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmProfileHiMessageSizeGroup = ccmProfileHiMessageSizeGroup.setStatus('current')
if mibBuilder.loadTexts: ccmProfileHiMessageSizeGroup.setDescription('A collection of objects providing information regarding to maximum size message to destination.')
chSystemInformationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 39)).setObjects(("CISCO-CALLHOME-MIB", "sysContactPhoneNumber"), ("CISCO-CALLHOME-MIB", "sysContactEmailAddress"), ("CISCO-CALLHOME-MIB", "sysStreetAddress"), ("CISCO-CALLHOME-MIB", "callHomeCustomerId"), ("CISCO-CALLHOME-MIB", "callHomeContractId"), ("CISCO-CALLHOME-MIB", "callHomeSiteId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chSystemInformationGroup1 = chSystemInformationGroup1.setStatus('current')
if mibBuilder.loadTexts: chSystemInformationGroup1.setDescription('A collection of objects for displaying and configuring system information pertaining to Call Home.')
chSystemServicePriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 40)).setObjects(("CISCO-CALLHOME-MIB", "callHomeDeviceServicePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chSystemServicePriorityGroup = chSystemServicePriorityGroup.setStatus('current')
if mibBuilder.loadTexts: chSystemServicePriorityGroup.setDescription('A collection of objects for configuring configuring system service priority pertaining to Call Home.')
ccmOnDemandMsgSendControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 41)).setObjects(("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendAlertGroup"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendProfile"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendEntPhyIndex"), ("CISCO-CALLHOME-MIB", "ccmOnDemandMsgSendTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmOnDemandMsgSendControlGroup = ccmOnDemandMsgSendControlGroup.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgSendControlGroup.setDescription('A collection of objects that enable sending on demand Call Home messages.')
ccmOnDemandMsgStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 42)).setObjects(("CISCO-CALLHOME-MIB", "ccmOnDemandMsgServAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmOnDemandMsgStatusGroup = ccmOnDemandMsgStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandMsgStatusGroup.setDescription('A collection of object(s) to indicate status of on demand message service on the device.')
ccmSmartCallHomeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 43)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmartCallHomeProfile"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeServiceType"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeAnalysisCmd"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeCcoId"), ("CISCO-CALLHOME-MIB", "ccmSmartCallHomeTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSmartCallHomeGroup = ccmSmartCallHomeGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSmartCallHomeGroup.setDescription('A collection of objects that enable issuing Smart Call Home messages.')
ccmEventStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 44)).setObjects(("CISCO-CALLHOME-MIB", "ccmEventStatsTotal"), ("CISCO-CALLHOME-MIB", "ccmEventStatsConfiguration"), ("CISCO-CALLHOME-MIB", "ccmEventStatsDiagnostic"), ("CISCO-CALLHOME-MIB", "ccmEventStatsEnvironment"), ("CISCO-CALLHOME-MIB", "ccmEventStatsInventory"), ("CISCO-CALLHOME-MIB", "ccmEventStatsSystemLog"), ("CISCO-CALLHOME-MIB", "ccmEventStatsTest"), ("CISCO-CALLHOME-MIB", "ccmEventStatsRequest"), ("CISCO-CALLHOME-MIB", "ccmEventStatsSendCliOutput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmEventStatsGroup = ccmEventStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ccmEventStatsGroup.setDescription('A collection of object(s) indicating statistical information for the Call Home events.')
ccmEventNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 45)).setObjects(("CISCO-CALLHOME-MIB", "ccmEventNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmEventNotifGroup = ccmEventNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ccmEventNotifGroup.setDescription('A collection of object(s) indicating the Call Home events that occurred in the system.')
ccmCallhomeEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 46)).setObjects(("CISCO-CALLHOME-MIB", "ccmEventDescription"), ("CISCO-CALLHOME-MIB", "ccmEventTime"), ("CISCO-CALLHOME-MIB", "ccmEventUrgencyLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallhomeEventsGroup = ccmCallhomeEventsGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallhomeEventsGroup.setDescription('A collection of notification objects required for Call Home events that occurred in the system.')
ccmCallHomeVrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 47)).setObjects(("CISCO-CALLHOME-MIB", "ccmCallHomeVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallHomeVrfGroup = ccmCallHomeVrfGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeVrfGroup.setDescription('A collection of object(s) to manage VRF information for Call Home feature.')
ccmSmtpServersVrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 48)).setObjects(("CISCO-CALLHOME-MIB", "ccmSmtpServersUseVrf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSmtpServersVrfGroup = ccmSmtpServersVrfGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSmtpServersVrfGroup.setDescription('A collection of object(s) to manage VRF information for SMTP Servers in Call Home feature.')
ccmHttpProxyServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 49)).setObjects(("CISCO-CALLHOME-MIB", "ccmHttpProxyServerAddrType"), ("CISCO-CALLHOME-MIB", "ccmHttpProxyServerAddr"), ("CISCO-CALLHOME-MIB", "ccmHttpProxyServerPort"), ("CISCO-CALLHOME-MIB", "ccmHttpProxyServerUseEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmHttpProxyServerGroup = ccmHttpProxyServerGroup.setStatus('current')
if mibBuilder.loadTexts: ccmHttpProxyServerGroup.setDescription('A collection of objects for displaying and configuring Call Home HTTP proxy server on the devices which support HTTP proxy server for Call Home feature')
ccmHttpTransportVrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 50)).setObjects(("CISCO-CALLHOME-MIB", "ccmHttpTransportUseVrf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmHttpTransportVrfGroup = ccmHttpTransportVrfGroup.setStatus('current')
if mibBuilder.loadTexts: ccmHttpTransportVrfGroup.setDescription('A collection of object(s) to manage VRF information for HTTP transport in Call Home feature.')
ccmSingleSmtpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 51)).setObjects(("CISCO-CALLHOME-MIB", "callHomeSmtpServerAddrType"), ("CISCO-CALLHOME-MIB", "callHomeSmtpServerAddr"), ("CISCO-CALLHOME-MIB", "callHomeSmtpServerPort"), ("CISCO-CALLHOME-MIB", "callHomeSmtpServerUseVrf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSingleSmtpServerGroup = ccmSingleSmtpServerGroup.setStatus('current')
if mibBuilder.loadTexts: ccmSingleSmtpServerGroup.setDescription('A collection of objects for displaying and configuring Call Home SMTP server on the devices which support only one SMTP server.')
ccmMessageSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 52)).setObjects(("CISCO-CALLHOME-MIB", "ccmMsgSourceIpAddrType"), ("CISCO-CALLHOME-MIB", "ccmMsgSourceIpAddr"), ("CISCO-CALLHOME-MIB", "ccmMsgSourceInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMessageSourceGroup = ccmMessageSourceGroup.setStatus('current')
if mibBuilder.loadTexts: ccmMessageSourceGroup.setDescription('A collection of objects to manage Call Home message source address.')
ccmCallHomePeriodicMinutesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 53)).setObjects(("CISCO-CALLHOME-MIB", "ccmPeriodicAlertGroupIntervalMinutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallHomePeriodicMinutesGroup = ccmCallHomePeriodicMinutesGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomePeriodicMinutesGroup.setDescription('A collection of objects to configure periodic interval in minutes.')
ccmOnDemandCliMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 54)).setObjects(("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgCliList"), ("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgTransport"), ("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgEmail"), ("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgFormat"), ("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgTacServiceReqId"), ("CISCO-CALLHOME-MIB", "ccmOnDemandCliMsgTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmOnDemandCliMsgGroup = ccmOnDemandCliMsgGroup.setStatus('current')
if mibBuilder.loadTexts: ccmOnDemandCliMsgGroup.setDescription('A collection of object(s) to manage on demand Call Home messages with CLI output.')
ccmCallHomeDiagSignatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 55)).setObjects(("CISCO-CALLHOME-MIB", "ccmDiagSignatureActive"), ("CISCO-CALLHOME-MIB", "ccmDiagSignatureProfileName"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureType"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureFuncDescr"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureRev"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureSigner"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureTriggerCount"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureAvgRuntime"), ("CISCO-CALLHOME-MIB", "ccmCallHomeDiagSignatureMaxRuntime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallHomeDiagSignatureGroup = ccmCallHomeDiagSignatureGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeDiagSignatureGroup.setDescription('A collection of objects to manage Call Home Diagnostic Signature functionality.')
ccmCallHomeSecurityLevelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 56)).setObjects(("CISCO-CALLHOME-MIB", "ccmCallHomeSecurityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallHomeSecurityLevelGroup = ccmCallHomeSecurityLevelGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeSecurityLevelGroup.setDescription('A collection of objects to manage security level of Call Home.')
ccmCallHomeAnonymousReportingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 57)).setObjects(("CISCO-CALLHOME-MIB", "ccmAnonymousReportingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallHomeAnonymousReportingGroup = ccmCallHomeAnonymousReportingGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeAnonymousReportingGroup.setDescription('A collection of objects to manage reporting functionality of Call Home.')
ccmCallHomeAaaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 300, 2, 2, 58)).setObjects(("CISCO-CALLHOME-MIB", "ccmAaaAuthEnable"), ("CISCO-CALLHOME-MIB", "ccmAaaAuthUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCallHomeAaaGroup = ccmCallHomeAaaGroup.setStatus('current')
if mibBuilder.loadTexts: ccmCallHomeAaaGroup.setDescription('A collection of objects to manage AAA functionality for Call Home.')
mibBuilder.exportSymbols("CISCO-CALLHOME-MIB", ccmCallHomeAlertGroupCfg=ccmCallHomeAlertGroupCfg, ccmCallHomeDiagSignatureFuncDescr=ccmCallHomeDiagSignatureFuncDescr, ccmProfileHiMessageSizeGroup=ccmProfileHiMessageSizeGroup, ccmSmtpServerStatusAvailability=ccmSmtpServerStatusAvailability, ccmPatternAlertGroupEntry=ccmPatternAlertGroupEntry, callHomeInventoryInfoName=callHomeInventoryInfoName, callHomeDestType=callHomeDestType, chPeriodicSwInventoryInfoGroup=chPeriodicSwInventoryInfoGroup, ccmThrottleConfigurationGroup=ccmThrottleConfigurationGroup, ccmHttpProxyServerGroup=ccmHttpProxyServerGroup, ccmCallHomeNotifConfig=ccmCallHomeNotifConfig, ccmEnableSmtpServerNotif=ccmEnableSmtpServerNotif, ccmSmtpServersEntry=ccmSmtpServersEntry, ccmOnDemandCliMsgGroup=ccmOnDemandCliMsgGroup, callHomeSwInventoryTable=callHomeSwInventoryTable, ccmMIBNotificationsGroup=ccmMIBNotificationsGroup, ccmOnDemandCliMsgCliList=ccmOnDemandCliMsgCliList, callHomeAlertGroupTypeEntry=callHomeAlertGroupTypeEntry, ccmPatternAlertGroupCfgGroup=ccmPatternAlertGroupCfgGroup, ccmCallHomeDiagSignatureGroup=ccmCallHomeDiagSignatureGroup, ccmAnonymousReportingEnable=ccmAnonymousReportingEnable, AlertGroupList=AlertGroupList, ccmPeriodicAlertGroupDayOfMonth=ccmPeriodicAlertGroupDayOfMonth, ccmDestProfileTestEntry=ccmDestProfileTestEntry, callHomeSmtpServerAddr=callHomeSmtpServerAddr, callHomeAlertGroupEnable=callHomeAlertGroupEnable, callHomeEmailMsgDispNotification=callHomeEmailMsgDispNotification, sysContactEmailAddress=sysContactEmailAddress, callHomeSmtpServerUseVrf=callHomeSmtpServerUseVrf, ccmSmartCallHomeActions=ccmSmartCallHomeActions, ccmEventStatsSendCliOutput=ccmEventStatsSendCliOutput, callHomeCustomerId=callHomeCustomerId, ccmOnDemandMsgStatusGroup=ccmOnDemandMsgStatusGroup, ccmSeverityAlertGroupTable=ccmSeverityAlertGroupTable, ccmSysLogSeverity=ccmSysLogSeverity, ccmSeverityAlertGroupCfgGroup=ccmSeverityAlertGroupCfgGroup, callHomeDestProfileStatus=callHomeDestProfileStatus, ccmProfileTestGroup=ccmProfileTestGroup, ccmSmtpMsgSendFailNotifGroup=ccmSmtpMsgSendFailNotifGroup, ccmSeverityAlertGroupEntry=ccmSeverityAlertGroupEntry, ccmCallHomeDiagSignatureName=ccmCallHomeDiagSignatureName, chMIBCompliance3=chMIBCompliance3, ccmAlertActionGroup=ccmAlertActionGroup, chSwInventoryInfoGroup=chSwInventoryInfoGroup, callHomeHCAlerts=callHomeHCAlerts, ccmSmtpServersVrfGroup=ccmSmtpServersVrfGroup, callHomeDestProfileHiMaxMsgSize=callHomeDestProfileHiMaxMsgSize, ccmSmtpServersTblMaxEntries=ccmSmtpServersTblMaxEntries, chMIBCompliance9=chMIBCompliance9, chSwInventoryInfoGroup1=chSwInventoryInfoGroup1, ccmSmtpServersStatus=ccmSmtpServersStatus, ccmPeriodicAlertGroupMinute=ccmPeriodicAlertGroupMinute, ccmProfileMessageLevelGroup=ccmProfileMessageLevelGroup, ccmCallHomeAaa=ccmCallHomeAaa, ccmHttpProxyServerAddr=ccmHttpProxyServerAddr, chSystemInformationGroup1=chSystemInformationGroup1, callHomeEmailFrom=callHomeEmailFrom, callHomeDestProfileActive=callHomeDestProfileActive, ccmPeriodicAlertGroupEnable=ccmPeriodicAlertGroupEnable, chSingleSmtpServerGroup=chSingleSmtpServerGroup, ccmSmartCallHomeProfile=ccmSmartCallHomeProfile, ccmProfileAlertGroupsGroup=ccmProfileAlertGroupsGroup, ccmPeriodicAlertGroupCfgGroup=ccmPeriodicAlertGroupCfgGroup, ccmCallHomeSecurityLevel=ccmCallHomeSecurityLevel, ccmOnDemandCliMsgTransport=ccmOnDemandCliMsgTransport, chMIBCompliance1=chMIBCompliance1, ccmSmtpServerStatusGroup=ccmSmtpServerStatusGroup, ccmAaaAuthEnable=ccmAaaAuthEnable, chSystemServicePriorityGroup=chSystemServicePriorityGroup, ccmOnDemandMsgSendAlertGroup=ccmOnDemandMsgSendAlertGroup, ccmSmtpServerStatusResult=ccmSmtpServerStatusResult, chMIBCompliance6=chMIBCompliance6, ccmCallHomeSecurityLevelGroup=ccmCallHomeSecurityLevelGroup, ccmEventStatsEnvironment=ccmEventStatsEnvironment, ccmSmtpServersUseVrf=ccmSmtpServersUseVrf, callHomeAlerts=callHomeAlerts, ccmCallhomeEventsGroup=ccmCallhomeEventsGroup, callHomeDestProfileName=callHomeDestProfileName, ccmOnDemandCliMsgTrigger=ccmOnDemandCliMsgTrigger, ccmSmtpServerStatusInitiate=ccmSmtpServerStatusInitiate, ccmCallHomeDiagSignatureRev=ccmCallHomeDiagSignatureRev, ccmPeriodicAlertGroupInterval=ccmPeriodicAlertGroupInterval, ccmEventAlertGroupEnable=ccmEventAlertGroupEnable, ccmOnDemandMsgSendEntPhyIndex=ccmOnDemandMsgSendEntPhyIndex, ccmCallHomeConfiguration=ccmCallHomeConfiguration, ccmEventStatsTypeIndex=ccmEventStatsTypeIndex, ccmCallHomeVrfGroup=ccmCallHomeVrfGroup, ccmAlertsDropped=ccmAlertsDropped, callHomeDestHttpUrl=callHomeDestHttpUrl, ccmDestProfileTestStatus=ccmDestProfileTestStatus, ccmDestProfileTestTable=ccmDestProfileTestTable, chMIBCompliance4=chMIBCompliance4, ccmOnDemandMsgSendControlGroup=ccmOnDemandMsgSendControlGroup, ccmCallHomeDiagSignatureType=ccmCallHomeDiagSignatureType, ccmPeriodicSwInventoryInfoGroup1=ccmPeriodicSwInventoryInfoGroup1, ccmCallHomeStats=ccmCallHomeStats, ccmEventAlertGroupOperSeverity=ccmEventAlertGroupOperSeverity, ccmSmartCallHomeTrigger=ccmSmartCallHomeTrigger, ccmOnDemandCliMsgControl=ccmOnDemandCliMsgControl, ccmCallHomeDiagSignatureInfoEntry=ccmCallHomeDiagSignatureInfoEntry, ccmSmtpServerStatusTable=ccmSmtpServerStatusTable, ccmEventStatsTotal=ccmEventStatsTotal, ccmAlertGroupTypeDeletedNotif=ccmAlertGroupTypeDeletedNotif, callHomeUserDefMaxCmds=callHomeUserDefMaxCmds, chConfigurationGroup1=chConfigurationGroup1, ccmSmtpServersAddr=ccmSmtpServersAddr, ccmEventDescription=ccmEventDescription, ccmPeriodicSwInventoryTimeOfDay=ccmPeriodicSwInventoryTimeOfDay, ccmHttpCfgGroup=ccmHttpCfgGroup, ccmEventTime=ccmEventTime, ccmEventStatsInventory=ccmEventStatsInventory, chEmailMsgDispGroup=chEmailMsgDispGroup, ccmConfigurationGroup3=ccmConfigurationGroup3, callHomeDestProfileEntry=callHomeDestProfileEntry, ccmAlertGroupSeverity=ccmAlertGroupSeverity, ccmPeriodicSwInventoryTimeFrame=ccmPeriodicSwInventoryTimeFrame, chMIBCompliance7=chMIBCompliance7, ccmCallHomeNotifications=ccmCallHomeNotifications, ccmCallHomeDiagSignatureInfoTable=ccmCallHomeDiagSignatureInfoTable, ccmPeriodicAlertGroupIntervalMinutes=ccmPeriodicAlertGroupIntervalMinutes, ccmDestProfileTestMessage=ccmDestProfileTestMessage, CallHomeAlert=CallHomeAlert, callHomeAlertGroupCapability=callHomeAlertGroupCapability, ccmCallHomeDiagSignatureTriggerCount=ccmCallHomeDiagSignatureTriggerCount, callHomeSwServiceName=callHomeSwServiceName, chConfigurationGroup=chConfigurationGroup, chStatisticsGroup=chStatisticsGroup, ccmMsgThrottlingEnable=ccmMsgThrottlingEnable, ccmAlertGroupCapabilityGroup=ccmAlertGroupCapabilityGroup, ccmHttpTransportVrfGroup=ccmHttpTransportVrfGroup, ccmSmtpServersPriority=ccmSmtpServersPriority, CallHomeTransportMethod=CallHomeTransportMethod, ccmEventAlertGroupTable=ccmEventAlertGroupTable, ccmPeriodicSwInventoryCfg=ccmPeriodicSwInventoryCfg, ccmOnDemandMsgSendControl=ccmOnDemandMsgSendControl, callHomeAlertGroupName=callHomeAlertGroupName, ccmEventStatsSystemLog=ccmEventStatsSystemLog, ccmPeriodicAlertGroupEntry=ccmPeriodicAlertGroupEntry, ccmPatternAlertGroupStorage=ccmPatternAlertGroupStorage, ccmEventStatsRequest=ccmEventStatsRequest, chConfigurationGroup2=chConfigurationGroup2, ccmEventUrgencyLevel=ccmEventUrgencyLevel, ccmDiagSignatureProfileName=ccmDiagSignatureProfileName, ccmCallHomePeriodicMinutesGroup=ccmCallHomePeriodicMinutesGroup, callHomeInventoryInfoValue=callHomeInventoryInfoValue, ccmOnDemandCliMsgTacServiceReqId=ccmOnDemandCliMsgTacServiceReqId, ccmSmartCallHomeGroup=ccmSmartCallHomeGroup, callHomeLastAlertSent=callHomeLastAlertSent, ciscoCallHomeMIB=ciscoCallHomeMIB, ccmCallHomeProfileTestControl=ccmCallHomeProfileTestControl, ccmSmtpMsgSendFailNotif=ccmSmtpMsgSendFailNotif, ccmMsgSourceIpAddrType=ccmMsgSourceIpAddrType, ccmCallHomeStatus=ccmCallHomeStatus, ccmCallHomeVrf=ccmCallHomeVrf, ccmCallHomeDiagSignature=ccmCallHomeDiagSignature, callHomeAlertGroupTypeIndex=callHomeAlertGroupTypeIndex, ccmProfileAlertGroupControlGroup=ccmProfileAlertGroupControlGroup, ccmEventAlertGroupCfgGroup=ccmEventAlertGroupCfgGroup, callHomeContractId=callHomeContractId, ccmSmartCallHomeServiceType=ccmSmartCallHomeServiceType, ccmHttpProxyServerUseEnable=ccmHttpProxyServerUseEnable, ccmEventAlertGroupEntry=ccmEventAlertGroupEntry, callHomeDestProfileAlertGroups=callHomeDestProfileAlertGroups, chMIBGroups=chMIBGroups, ccmAlertRateLimitGroup=ccmAlertRateLimitGroup, ccmCallHomeSecurity=ccmCallHomeSecurity, callHomeDestEmailAddressIndex=callHomeDestEmailAddressIndex, ccmSmtpServersPort=ccmSmtpServersPort, ccmEventNotif=ccmEventNotif, ccmCallHomeAnonymousReportingGroup=ccmCallHomeAnonymousReportingGroup, ccmSmtpServerStatusTimeStamp=ccmSmtpServerStatusTimeStamp, ccmCallHomeOnDemandActions=ccmCallHomeOnDemandActions, ccmMessageSourceGroup=ccmMessageSourceGroup, ccmHttpProxyServerAddrType=ccmHttpProxyServerAddrType, ccmOnDemandCliMsgFormat=ccmOnDemandCliMsgFormat, ccmOnDemandMsgServAvailable=ccmOnDemandMsgServAvailable, ccmEventNotifGroup=ccmEventNotifGroup, ccmAlertRateLimit=ccmAlertRateLimit, callHomeDestEmailAddressEntry=callHomeDestEmailAddressEntry, callHomeDestProfileMsgFormat=callHomeDestProfileMsgFormat, ccmDiagSignatureActive=ccmDiagSignatureActive, ccmAaaAuthUserName=ccmAaaAuthUserName, ccmCallHomeReporting=ccmCallHomeReporting, ccmEventStatsDiagnostic=ccmEventStatsDiagnostic, CallHomeMsgFormat=CallHomeMsgFormat, ccmCallHomeDiagSignatureMaxRuntime=ccmCallHomeDiagSignatureMaxRuntime, ccmSmartCallHomeCcoId=ccmSmartCallHomeCcoId, callHomeAlertGroupTypeTable=callHomeAlertGroupTypeTable, ccmDestProfileTestTrigger=ccmDestProfileTestTrigger, ccmOnDemandMsgSendProfile=ccmOnDemandMsgSendProfile, callHomeDeviceServicePriority=callHomeDeviceServicePriority, callHomeAlertActionStatus=callHomeAlertActionStatus, ccmOnDemandMsgSendTrigger=ccmOnDemandMsgSendTrigger, ccmAlertGroupPattern=ccmAlertGroupPattern, ccmSysLogSeverityGroup=ccmSysLogSeverityGroup, ccmSmtpServersPriorityGroup=ccmSmtpServersPriorityGroup, chMIBCompliances=chMIBCompliances, callHomeUserDefCmdIndex=callHomeUserDefCmdIndex, ccmSmtpMsgSendFailNotifEnable=ccmSmtpMsgSendFailNotifEnable, callHomeDestProfileMsgLevel=callHomeDestProfileMsgLevel, ccmAlertHCStatisticsGroup=ccmAlertHCStatisticsGroup, ccmSmtpServerStatusEntry=ccmSmtpServerStatusEntry, callHomeUserDefCmdEntry=callHomeUserDefCmdEntry, chMIBConformance=chMIBConformance, ccmSmtpMsgSendFailNotifCtrlGroup=ccmSmtpMsgSendFailNotifCtrlGroup, ccmPeriodicAlertGroupHour=ccmPeriodicAlertGroupHour, callHomeEmailReplyTo=callHomeEmailReplyTo, sysStreetAddress=sysStreetAddress, ccmPeriodicSwInventoryMsgEnable=ccmPeriodicSwInventoryMsgEnable, callHomeDestEmailAddressStatus=callHomeDestEmailAddressStatus, ccmCallHomeMessageSource=ccmCallHomeMessageSource, ccmSmtpServerFailNotif=ccmSmtpServerFailNotif, ccmSmtpServersAddrType=ccmSmtpServersAddrType, ccmPatternAlertGroupTable=ccmPatternAlertGroupTable, ciscoCallHomeMIBObjects=ciscoCallHomeMIBObjects, callHomeDestEmailAddressTable=callHomeDestEmailAddressTable, callHomeUserDefCmdRowStatus=callHomeUserDefCmdRowStatus, ccmHttpProxyServerPort=ccmHttpProxyServerPort, ccmEventStatsEntry=ccmEventStatsEntry, ccmSmartCallHomeAnalysisCmd=ccmSmartCallHomeAnalysisCmd, chMultipleSmtpServersGroup=chMultipleSmtpServersGroup, callHomeSwInventoryEntry=callHomeSwInventoryEntry, ccmEventStatsMsgTypeIndex=ccmEventStatsMsgTypeIndex, callHomeUserDefCmdName=callHomeUserDefCmdName, callHomeAlertActionFailureCause=callHomeAlertActionFailureCause, callHomeSmtpServerPort=callHomeSmtpServerPort, ccmCallHomeDiagSignatureAvgRuntime=ccmCallHomeDiagSignatureAvgRuntime, ccmCallhomeEvents=ccmCallhomeEvents, ccmCallHomeHttpProxy=ccmCallHomeHttpProxy, ccmMIBNotificationsConfigGroup=ccmMIBNotificationsConfigGroup, callHomeDestProfileTable=callHomeDestProfileTable, ccmEventStatsConfiguration=ccmEventStatsConfiguration, callHomeDestEmailAddress=callHomeDestEmailAddress, ccmPatternAlertGroupStatus=ccmPatternAlertGroupStatus, sysContactPhoneNumber=sysContactPhoneNumber, callHomeEmailAddrTblMaxEntries=callHomeEmailAddrTblMaxEntries, ccmMaxSyslogAlertGroupPatterns=ccmMaxSyslogAlertGroupPatterns, ccmHttpTransportUseVrf=ccmHttpTransportUseVrf, callHomeAlertAction=callHomeAlertAction, ccmDestProfileTestFailureCause=ccmDestProfileTestFailureCause, ccmPeriodicAlertGroupDayOfWeek=ccmPeriodicAlertGroupDayOfWeek, ccmMsgSourceIpAddr=ccmMsgSourceIpAddr, ccmEventStatsGroup=ccmEventStatsGroup, chMIBCompliance5=chMIBCompliance5, callHomeDestProfileTrnsprtMthd=callHomeDestProfileTrnsprtMthd, ccmSingleSmtpServerGroup=ccmSingleSmtpServerGroup, ccmCallHomeDiagSignatureSigner=ccmCallHomeDiagSignatureSigner, callHomeUserDefCmdTable=callHomeUserDefCmdTable, callHomeInventoryNVPairIndex=callHomeInventoryNVPairIndex, ccmEventStatsTable=ccmEventStatsTable, callHomeSiteId=callHomeSiteId, callHomeSmtpServerAddrType=callHomeSmtpServerAddrType, callHomeDestProfileMaxMsgSize=callHomeDestProfileMaxMsgSize, PYSNMP_MODULE_ID=ciscoCallHomeMIB)
mibBuilder.exportSymbols("CISCO-CALLHOME-MIB", ccmAlertGroupTypeAddedNotif=ccmAlertGroupTypeAddedNotif, ccmCallHomeVrfName=ccmCallHomeVrfName, chMIBCompliance2=chMIBCompliance2, chMIBCompliance8=chMIBCompliance8, ccmSmtpServersTable=ccmSmtpServersTable, ccmEventStatsTest=ccmEventStatsTest, chMIBCompliance=chMIBCompliance, chSystemInformationGroup=chSystemInformationGroup, callHomeEnable=callHomeEnable, ccmPeriodicAlertGroupTable=ccmPeriodicAlertGroupTable, ccmUserDefCmdGroup=ccmUserDefCmdGroup, ccmProfileActivationGroup=ccmProfileActivationGroup, CallHomeMsgLevel=CallHomeMsgLevel, ccmCallHomeAaaGroup=ccmCallHomeAaaGroup, ccmMIBNotificationsGroup1=ccmMIBNotificationsGroup1, ccmPatternAlertGroupSeverity=ccmPatternAlertGroupSeverity, ccmOnDemandCliMsgEmail=ccmOnDemandCliMsgEmail, ccmMsgSourceInterface=ccmMsgSourceInterface)
