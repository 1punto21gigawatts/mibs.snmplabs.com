#
# PySNMP MIB module IMM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IMM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:53:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, iso, MibIdentifier, NotificationType, Bits, IpAddress, Counter32, ObjectIdentity, TimeTicks, Gauge32, NotificationType, Counter64, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "Bits", "IpAddress", "Counter32", "ObjectIdentity", "TimeTicks", "Gauge32", "NotificationType", "Counter64", "Integer32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class InetAddressIPv6(TextualConvention, OctetString):
    description = 'Represents an IPv6 network address. Since MIB browsers may require different formats, the address is expected to be the 16 byte address in network-byte order, and shortened formats such as 0::0 are not accepted in SET operations. Two common examples are: The NetSNMP command line will accept SET requests like: snmpset -v1 -cprivate <host> s 2001:00:00:00:FFFF:CCC4:BBB2:AAA6 Other MIB browsers may require the SET request value to be formatted as: # 0x20 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0xCC 0xC4 0xBB 0xB2 0xAA 0xA6'
    status = 'mandatory'
    displayHint = '02x:02x:02x:02x:02x:02x:02x:02x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3))
netfinitySupportProcessorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51))
ibmIntegratedManagementModuleMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1))
errorLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2))
configureSP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3))
generalSystemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4))
systemPower = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5))
restartReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6))
firmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7))
serviceAdvisor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8))
scaling = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1))
tempNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tempNumber.setDescription('The present number of rows in the temperature table.')
tempTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2), )
if mibBuilder.loadTexts: tempTable.setStatus('mandatory')
if mibBuilder.loadTexts: tempTable.setDescription('This table contains temperature measurement information.')
tempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1), ).setIndexNames((0, "IMM-MIB", "tempIndex"))
if mibBuilder.loadTexts: tempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tempEntry.setDescription('Each row contains parameters related to a temperature measurement channel.')
tempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tempIndex.setDescription('This column is used to identify a particular temperature measurement channel.')
tempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempDescr.setStatus('mandatory')
if mibBuilder.loadTexts: tempDescr.setDescription('A description of the temperature measurement channel.')
tempReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 3), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempReading.setStatus('mandatory')
if mibBuilder.loadTexts: tempReading.setDescription('The measured temperature.')
tempNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 4), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: tempNominalReading.setDescription('The nominal temperature, if available.')
tempNonRecovLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 5), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonRecovLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: tempNonRecovLimitHigh.setDescription('The non-recoverable limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 6), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempCritLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: tempCritLimitHigh.setDescription('The critical limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempNonCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 7), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonCritLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: tempNonCritLimitHigh.setDescription('The non-critical limit for the measured temperature. If the measured value rises above this limit a trap is sent.')
tempNonRecovLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 8), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonRecovLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: tempNonRecovLimitLow.setDescription('The non-recoverable limit for the measured temperature. If the measured value falls below this limit a trap is sent.')
tempCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 9), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempCritLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: tempCritLimitLow.setDescription('The critical limit for the measured temperature. If the measured value falls below this limit a trap is sent.')
tempNonCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 10), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonCritLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: tempNonCritLimitLow.setDescription('The non-critical limit for the measured temperature. If the measured value falls below this limit a trap is sent.')
tempHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tempHealthStatus.setDescription('A description of the temperature component status.')
voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2))
voltNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNumber.setStatus('mandatory')
if mibBuilder.loadTexts: voltNumber.setDescription('The present number of rows in the voltage table.')
voltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2), )
if mibBuilder.loadTexts: voltTable.setStatus('mandatory')
if mibBuilder.loadTexts: voltTable.setDescription('This table contains voltage measurement information.')
voltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1), ).setIndexNames((0, "IMM-MIB", "voltIndex"))
if mibBuilder.loadTexts: voltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: voltEntry.setDescription('Each row contains parameters related to a voltage measurement channel.')
voltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltIndex.setDescription('This column is used to identify a particular voltage measurement channel.')
voltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltDescr.setStatus('mandatory')
if mibBuilder.loadTexts: voltDescr.setDescription('A description of the voltage measurement channel.')
voltReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 3), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltReading.setDescription('The measured voltage.')
voltNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 4), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNominalReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltNominalReading.setDescription('The nominal voltage, if available.')
voltNonRecovLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 5), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonRecovLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: voltNonRecovLimitHigh.setDescription('The high non-recoverable limit for the measured voltage. If the measured value falls above this limit a trap is sent.')
voltCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 6), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltCritLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: voltCritLimitHigh.setDescription('The high critical limit for the measured voltage. If the measured value rises above this limit a trap is sent.')
voltNonCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 7), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonCritLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: voltNonCritLimitHigh.setDescription('The high non-critical limit for the measured voltage. If the measured value rises above this limit a trap is sent.')
voltNonRecovLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 8), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonRecovLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: voltNonRecovLimitLow.setDescription('The low non-recoverable limit for the measured voltage. If the measured value falls below this limit a trap is sent.')
voltCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 9), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltCritLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: voltCritLimitLow.setDescription('The low critical limit for the measured voltage. If the measured value falls below this limit a trap is sent.')
voltNonCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 10), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonCritLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: voltNonCritLimitLow.setDescription('The low non-critical limit for the measured voltage. If the measured value falls below this limit a trap is sent.')
voltHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voltHealthStatus.setDescription('A description of the voltage component status.')
fans = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3))
fanNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanNumber.setDescription('The present number of rows in the fan table.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2), )
if mibBuilder.loadTexts: fanTable.setStatus('mandatory')
if mibBuilder.loadTexts: fanTable.setDescription('This table contains fan information.')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1), ).setIndexNames((0, "IMM-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fanEntry.setDescription('Each row contains parameters related to a fan.')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fanIndex.setDescription('This column is used to identify a particular fan.')
fanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDescr.setStatus('mandatory')
if mibBuilder.loadTexts: fanDescr.setDescription('A description of the fan measurement channel.')
fanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fanSpeed.setDescription("Fan speed expressed in percent(%) of maximum RPM. An octet string expressed as 'ddd% of maximum' where: d is a decimal digit or blank space for a leading zero. If the fan is determined not to be running or the fan speed cannot be determined, the string will indicate 'Offline'.")
fanNonRecovLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 4), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonRecovLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: fanNonRecovLimitHigh.setDescription('The high non-recoverable limit for the measured fan. If the measured value falls above this limit a trap is sent.')
fanCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 5), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCritLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: fanCritLimitHigh.setDescription('The high critical limit for the measured fan. If the measured value rises above this limit a trap is sent.')
fanNonCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 6), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonCritLimitHigh.setStatus('mandatory')
if mibBuilder.loadTexts: fanNonCritLimitHigh.setDescription('The high non-critical limit for the measured fan. If the measured value rises above this limit a trap is sent.')
fanNonRecovLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 7), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonRecovLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: fanNonRecovLimitLow.setDescription('The low non-recoverable limit for the measured fan. If the measured value falls below this limit a trap is sent.')
fanCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 8), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCritLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: fanCritLimitLow.setDescription('The low critical limit for the measured fan. If the measured value falls below this limit a trap is sent.')
fanNonCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 9), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonCritLimitLow.setStatus('mandatory')
if mibBuilder.loadTexts: fanNonCritLimitLow.setDescription('The low non-critical limit for the measured fan. If the measured value falls below this limit a trap is sent.')
fanHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanHealthStatus.setDescription('A description of the fan component status.')
systemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4))
systemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 255))).clone(namedValues=NamedValues(("nonRecoverable", 0), ("critical", 2), ("nonCritical", 4), ("normal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthStat.setStatus('mandatory')
if mibBuilder.loadTexts: systemHealthStat.setDescription("Indicates status of system health for the system in which the IMM resides. Value of 'nonRecoverable' indicates a severe error has occurred and the system may not be functioning. A value of 'critical' indicates that a error has occurred but the system is currently functioning properly. A value of 'nonCritical' indicates that a condition has occurred that may change the state of the system in the future but currently the system is working properly. A value of 'normal' indicates that the system is operating normally.")
systemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2), )
if mibBuilder.loadTexts: systemHealthSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemHealthSummaryTable.setDescription('Table of System Health summary. Contains more detailed information about the reasons for the overall system health status.')
systemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1), ).setIndexNames((0, "IMM-MIB", "systemHealthSummaryIndex"))
if mibBuilder.loadTexts: systemHealthSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemHealthSummaryEntry.setDescription('System Health Summary entry')
systemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemHealthSummaryIndex.setDescription('System health summary index.')
systemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummarySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: systemHealthSummarySeverity.setDescription('System health summary severity.')
systemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryDescription.setStatus('mandatory')
if mibBuilder.loadTexts: systemHealthSummaryDescription.setDescription('System health summary description.')
vpdInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5))
immVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1), )
if mibBuilder.loadTexts: immVpdTable.setStatus('mandatory')
if mibBuilder.loadTexts: immVpdTable.setDescription('Table of IMM VPD.')
immVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "immVpdIndex"))
if mibBuilder.loadTexts: immVpdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: immVpdEntry.setDescription('iMBC VPD entry.')
immVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: immVpdIndex.setDescription('IMM VPD index.')
immVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdType.setStatus('mandatory')
if mibBuilder.loadTexts: immVpdType.setDescription('IMM VPD Type. Indicates either Bios or Diag or spFimware VPD')
immVpdVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdVersionString.setStatus('mandatory')
if mibBuilder.loadTexts: immVpdVersionString.setDescription("IMM VPD Version Number of the software(Bios/Diag/spFirmware). For IMM2 the string contains both the Build ID and the Version Number, for example, like '1AOO3A v1.0.1'. ")
immVpdReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: immVpdReleaseDate.setDescription('IMM VPD Release Date of when the software(Bios/Diag/spFirmware) was released.')
machineVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2))
machineLevelVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1))
machineLevelVpdMachineType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelVpdMachineType.setStatus('mandatory')
if mibBuilder.loadTexts: machineLevelVpdMachineType.setDescription('Machine type VPD information.')
machineLevelVpdMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelVpdMachineModel.setStatus('mandatory')
if mibBuilder.loadTexts: machineLevelVpdMachineModel.setDescription('Machine model VPD information.')
machineLevelSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: machineLevelSerialNumber.setDescription('Machine serial number VPD information.')
machineLevelUUID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelUUID.setStatus('mandatory')
if mibBuilder.loadTexts: machineLevelUUID.setDescription('Machine UUID(Universal Unique ID information).')
machineLevelProductName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelProductName.setStatus('mandatory')
if mibBuilder.loadTexts: machineLevelProductName.setDescription('Machine Product Name (e.g. System x3650 M2).')
systemComponentLevelVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17), )
if mibBuilder.loadTexts: systemComponentLevelVpdTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemComponentLevelVpdTable.setDescription('Table of the system component hardware VPD information. View as a table and not as individual entries for consistent results.')
systemComponentLevelVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1), ).setIndexNames((0, "IMM-MIB", "componentLevelVpdIndex"))
if mibBuilder.loadTexts: systemComponentLevelVpdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemComponentLevelVpdEntry.setDescription('System component hardware VPD entry. View as a table and not as individual entries for consistent results.')
componentLevelVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdIndex.setDescription('System component level VPD index. View as a table and not as individual entries for consistent results.')
componentLevelVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdFruNumber.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdFruNumber.setDescription('System component level VPD FRU number. View as a table and not as individual entries for consistent results.')
componentLevelVpdFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdFruName.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdFruName.setDescription('System component level VPD FRU name. View as a table and not as individual entries for consistent results.')
componentLevelVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdSerialNumber.setDescription('System component level VPD serial number. View as a table and not as individual entries for consistent results.')
componentLevelVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdManufacturingId.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdManufacturingId.setDescription('System component level VPD manufacturing ID. View as a table and not as individual entries for consistent results.')
systemComponentLevelVpdTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18), )
if mibBuilder.loadTexts: systemComponentLevelVpdTrackingTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemComponentLevelVpdTrackingTable.setDescription('Table of system component hardware VPD tracking activity log. View as a table and not as individual entries for consistent results.')
systemComponentLevelVpdTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1), ).setIndexNames((0, "IMM-MIB", "componentLevelVpdTrackingIndex"))
if mibBuilder.loadTexts: systemComponentLevelVpdTrackingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemComponentLevelVpdTrackingEntry.setDescription('System component hardware VPD tracking activity log entry. View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingIndex.setDescription('System component level VPD tracking activity log index. View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingFruNumber.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingFruNumber.setDescription('System component level VPD tracking activity log FRU number. View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingFruName.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingFruName.setDescription('System component level VPD tracking activity log FRU name. View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingSerialNumber.setDescription('System component level VPD tracking activity log serial number. View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingManufacturingId.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingManufacturingId.setDescription('System component level VPD tracking activity log manufacturing ID. View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingAction.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingAction.setDescription('System component level VPD tracking activity log action(added/removed). View as a table and not as individual entries for consistent results.')
componentLevelVpdTrackingTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: componentLevelVpdTrackingTimestamp.setDescription('System component level VPD tracking activity log timestanp. View as a table and not as individual entries for consistent results.')
hostMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19), )
if mibBuilder.loadTexts: hostMACAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: hostMACAddressTable.setDescription('Table of MAC addresses of the host NICs. For consistent results, view as a table and not as individual entries.')
hostMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1), ).setIndexNames((0, "IMM-MIB", "hostMACAddressIndex"))
if mibBuilder.loadTexts: hostMACAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hostMACAddressEntry.setDescription('Host MAC address entry. For consistent results, view as a table and not as individual entries.')
hostMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMACAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hostMACAddressIndex.setDescription('Host MAC address index. View as a table and not as individual entries for consistent results.')
hostMACAddressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMACAddressDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hostMACAddressDescription.setDescription('Description of the MAC Address entry. View as a table and not as individual entries for consistent results.')
hostMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: hostMACAddress.setDescription('Host MAC address must be a hexadecimal value between 000000000000 - FFFFFFFFFFFF. This value must be in the form XX:XX:XX:XX:XX:XX View as a table and not as individual entries for consistent results.')
systemCPUVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20), )
if mibBuilder.loadTexts: systemCPUVpdTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemCPUVpdTable.setDescription('Table of the system CPU VPD information. View as a table and not as individual entries for consistent results.')
systemCPUVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1), ).setIndexNames((0, "IMM-MIB", "cpuVpdIndex"))
if mibBuilder.loadTexts: systemCPUVpdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemCPUVpdEntry.setDescription('System CPU VPD entry. View as a table and not as individual entries for consistent results.')
cpuVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdIndex.setDescription('System CPU level VPD index. View as a table and not as individual entries for consistent results.')
cpuVpdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdDescription.setDescription('System CPU Description. View as a table and not as individual entries for consistent results.')
cpuVpdSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdSpeed.setDescription('System cpu speed in MHz. View as a table and not as individual entries for consistent results.')
cpuVpdIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdIdentifier.setDescription('System CPU Identifier. View as a table and not as individual entries for consistent results.')
cpuVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdType.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdType.setDescription('System cpu Type. View as a table and not as individual entries for consistent results.')
cpuVpdFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdFamily.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdFamily.setDescription('System cpu Family. View as a table and not as individual entries for consistent results.')
cpuVpdCores = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdCores.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdCores.setDescription('System cpu number of cores. View as a table and not as individual entries for consistent results.')
cpuVpdThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdThreads.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdThreads.setDescription('System cpu number of threads. View as a table and not as individual entries for consistent results.')
cpuVpdVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdVoltage.setDescription('System cpu voltage in millivolts (1125 = 1.125 volts). View as a table and not as individual entries for consistent results.')
cpuVpdDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdDataWidth.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdDataWidth.setDescription('System cpu data width in bits. View as a table and not as individual entries for consistent results.')
cpuVpdHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVpdHealthStatus.setDescription('System cpu health status. View as a table and not as individual entries for consistent results.')
systemMemoryVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21), )
if mibBuilder.loadTexts: systemMemoryVpdTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemMemoryVpdTable.setDescription('Table of the system Memory VPD information. View as a table and not as individual entries for consistent results.')
systemMemoryVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1), ).setIndexNames((0, "IMM-MIB", "memoryVpdIndex"))
if mibBuilder.loadTexts: systemMemoryVpdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemMemoryVpdEntry.setDescription('System Memory VPD entry. View as a table and not as individual entries for consistent results.')
memoryVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdIndex.setDescription('System Memory level VPD index. View as a table and not as individual entries for consistent results.')
memoryVpdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdDescription.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdDescription.setDescription('System memory Description (e.g. DIMM 1). View as a table and not as individual entries for consistent results.')
memoryVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdPartNumber.setDescription('System Memory Part Number. View as a table and not as individual entries for consistent results.')
memoryVpdFRUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdFRUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdFRUSerialNumber.setDescription('System memory Serial Number. View as a table and not as individual entries for consistent results.')
memoryVpdManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdManufactureDate.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdManufactureDate.setDescription('System memory Manufacture Date in week/year format (e.g. 3609). View as a table and not as individual entries for consistent results.')
memoryVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdType.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdType.setDescription('System memory Type (e.g. DDR III SDRAM). View as a table and not as individual entries for consistent results.')
memoryVpdSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdSize.setStatus('mandatory')
if mibBuilder.loadTexts: memoryVpdSize.setDescription('System memory size in GigaBytes. View as a table and not as individual entries for consistent results.')
memoryHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memoryHealthStatus.setDescription('A description of the memory component status.')
users = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6))
immUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1))
currentlyLoggedInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1), )
if mibBuilder.loadTexts: currentlyLoggedInTable.setStatus('mandatory')
if mibBuilder.loadTexts: currentlyLoggedInTable.setDescription('Table of IMM users currently logged in.')
currentlyLoggedInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1), ).setIndexNames((0, "IMM-MIB", "currentlyLoggedInEntryIndex"))
if mibBuilder.loadTexts: currentlyLoggedInEntry.setStatus('mandatory')
if mibBuilder.loadTexts: currentlyLoggedInEntry.setDescription('IMM users currently logged in entries.')
currentlyLoggedInEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: currentlyLoggedInEntryIndex.setDescription('Index for IMM users currently logged in.')
currentlyLoggedInEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryUserId.setStatus('mandatory')
if mibBuilder.loadTexts: currentlyLoggedInEntryUserId.setDescription('Name for IMM users currently logged in.')
currentlyLoggedInEntryAccMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryAccMethod.setStatus('mandatory')
if mibBuilder.loadTexts: currentlyLoggedInEntryAccMethod.setDescription('Access method for IMM users currently logged in.')
leds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8))
identityLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identityLED.setStatus('mandatory')
if mibBuilder.loadTexts: identityLED.setDescription('Indicates whether the front panel identity LED is on,off, or blinking and allows user to change it.')
allLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2), )
if mibBuilder.loadTexts: allLEDsTable.setStatus('mandatory')
if mibBuilder.loadTexts: allLEDsTable.setDescription('Table of LEDs detailed information.')
allLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1), ).setIndexNames((0, "IMM-MIB", "ledIndex"))
if mibBuilder.loadTexts: allLEDsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: allLEDsEntry.setDescription('LEDs Details entry')
ledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ledIndex.setDescription('The LED index number. For consistent results, view as a table and not as individual entries.')
ledIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ledIdentifier.setDescription('The unique identifier for this LED For consistent results, view as a table and not as individual entries.')
ledLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledLabel.setStatus('mandatory')
if mibBuilder.loadTexts: ledLabel.setDescription('Text label for a LED. For consistent results, view as a table and not as individual entries.')
ledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledState.setStatus('mandatory')
if mibBuilder.loadTexts: ledState.setDescription('Text description which denotes color or on/off/blink state for a LED. For consistent results, view as a table and not as individual entries.')
ledColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledColor.setStatus('mandatory')
if mibBuilder.loadTexts: ledColor.setDescription('Color of this LED. For consistent results, view as a table and not as individual entries.')
informationLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: informationLED.setStatus('mandatory')
if mibBuilder.loadTexts: informationLED.setDescription('Indicates whether the front panel Information LED is on,off, or blinking and allows user to change it. The only value the user is allowed to enter is 0 for off. User may not turn this LED on or cause it to blink.')
osFailureCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9))
osFailureCaptureTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osFailureCaptureTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: osFailureCaptureTftpServer.setDescription('To save the OS Failure screen if one has been captured, set the IP address or host name of the TFTP server where the file should be transferred. The address must be entered in a dotted decimal IP string (e.g. 9.37.44.2), or equivalent for IPv6.')
osFailureCaptureFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osFailureCaptureFileName.setStatus('mandatory')
if mibBuilder.loadTexts: osFailureCaptureFileName.setDescription('File name of the saved capture file on the target system.')
osFailureCaptureSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osFailureCaptureSaveStart.setStatus('mandatory')
if mibBuilder.loadTexts: osFailureCaptureSaveStart.setDescription('Start saving the configuration file to the specified target file and system. The file will exist if the OS Hang or OS Loader watchdog is enabled and been tripped. Using execute will cause the SNMP client to wait for the save operation to complete. Using execute-nowait will not cause the SNMP client to wait for the save to complete. Instead it will save the configuration in the background. Note 1: Both osFailureCaptureTftpServer and osFailureCaptureFileName must be set. Note 2: Depending on the target, it might take up to several seconds for the save operation to complete. Note 3: Use osFailureCaptureStatus to confirm the status of the last operation. NOTE: Value returned for the GET command is meaningless for this MIB object.')
osFailureCaptureSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("success", 0), ("failed", 1), ("nocapture", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osFailureCaptureSaveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: osFailureCaptureSaveStatus.setDescription('Get the status of the last save operation which was initiated through SNMP method. Returns nocapture(2) if there is no OS Failure capture screen to save.')
fuelGauge = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10))
fuelGaugeInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1))
fuelGaugePowerCappingPolicySetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPowerLimit", 0), ("staticPowerLimit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGaugePowerCappingPolicySetting.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugePowerCappingPolicySetting.setDescription('Power Capping Policy. No Power Limit - The maximum power limit will be determined by the active Power Redundancy policy. Static Power Limit - Sets the overall system power limit. In a situation where powering on a component would cause the limit to be exceeded, the component would not be permitted to power on.')
fuelGaugeStaticPowerPcapSoftMin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapSoftMin.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapSoftMin.setDescription('This field displays power capping soft minimum value.')
fuelGaugeStaticPowerPcapMin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMin.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMin.setDescription('This field displays power capping minimum value.')
fuelGaugeStaticPowerPcapCurrentSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapCurrentSetting.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapCurrentSetting.setDescription('This field is used to display or set the current power capping value.')
fuelGaugeStaticPowerPcapMax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMax.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMax.setDescription('This field displays power capping maximum value.')
fuelGaugeStaticPowerPcapMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dc", 0), ("ac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMode.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMode.setDescription('This field is used to display or set the all Power Cap settings to AC or DC.')
fuelGaugeSystemMaxPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeSystemMaxPower.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeSystemMaxPower.setDescription('This field displays the system maximum power available value.')
fuelGaugePowerRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugePowerRemaining.setDescription('This field displays power remaining value.')
fuelGaugeTotalPowerAvaialble = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalPowerAvaialble.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeTotalPowerAvaialble.setDescription('This field displays the calculated total remaining power available value.')
fuelGaugeTotalPowerInUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalPowerInUse.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeTotalPowerInUse.setDescription('This field displays total power in use value.')
fuelGaugeTotalThermalOutput = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalThermalOutput.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugeTotalThermalOutput.setDescription('This field displays the total thermal output value calculated from the AC power in use.')
fuelGaugePowerConsumptionCpu = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerConsumptionCpu.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugePowerConsumptionCpu.setDescription('This field displays the power consumption of the processors.')
fuelGaugePowerConsumptionMemory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerConsumptionMemory.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugePowerConsumptionMemory.setDescription('This field displays the power consumption of the memory.')
fuelGaugePowerConsumptionOther = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerConsumptionOther.setStatus('mandatory')
if mibBuilder.loadTexts: fuelGaugePowerConsumptionOther.setDescription('This field displays the power consumption of other entities than processors and memory.')
powerPolicyInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2))
powerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1), )
if mibBuilder.loadTexts: powerPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyTable.setDescription('Table of Power Policy information for all power domains. Reading this table information about the available power policies that can be configured and which is currently selected. The powerPolicyActivate object can also be SET to select which policy should be active.')
powerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1), ).setIndexNames((0, "IMM-MIB", "powerPolicyIndex"))
if mibBuilder.loadTexts: powerPolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyEntry.setDescription('Power Policy Entry')
powerPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyIndex.setDescription('The unique idenitifier of a row in the powerPolicyTable.')
powerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyName.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyName.setDescription('The short name of the power policy. The following are the possible names and their detailed description: Power Module Redundancy Intended for a single AC power source into the chassis where each Power Module is on its own dedicated circuit. Total allowed power draw is limited to one less than the number of Power Modules when more than one Power Module is present. One Power Module can fail without affecting blade operation. Multiple Power Module failures can cause the chassis to power off. Note that some blades may not be allowed to power on if doing so would exceed the policy power limit. Power Module Redundancy with Blade Throttling Allowed Very similar to the Power Module Redundancy policy. This policy allows you to draw more total power; however, capable blades may be allowed to throttle down if one Power Module fails. Basic Power Management Total allowed power is higher than other policies and is limited only by the total power capacity of all the Power Modules up to the maximum of chassis power rating. This is the least conservative approach, since it does not provide any protection for AC power source or Power Module failure. If any single power supply fails, blade and/or chassis operation may be affected.')
powerPolicyPwrSupplyFailureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyPwrSupplyFailureLimit.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyPwrSupplyFailureLimit.setDescription('The maximum number of power supplies that can fail in a chassis while still providing redundancy.')
powerPolicyMaxPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyMaxPowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyMaxPowerLimit.setDescription('The maximum power available (in watts), based on the number of power modules and the Power Management Policy setting.')
powerPolicyEstimatedUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyEstimatedUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyEstimatedUtilization.setDescription('The estimated utilization (as a percentage) based on current power usage.')
powerPolicyActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerPolicyActivate.setStatus('mandatory')
if mibBuilder.loadTexts: powerPolicyActivate.setDescription('When read, this object provides the status of this power policy. If the value is enabled(1), it means this is the active power policy for the associated domain. When set to a value of enabled(1), the power policy will be made the active one for the associated domain. A set of disabled(0) is not allowed. The SET may fail when the user goes from a less restrictive policy to a more restrictive policy, e.g. no power management to redundant power modules. This happens because the IMM might have allocated more power for components in the less restrictive policy. Then if a user wants to go to a more restrictive policy, the power available may be lower than what was already allocated. The SET should always succeed if a user goes from a more restrictive to a less restrictive policy.')
powerPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3))
powerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerTrendingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingPeriod.setDescription('Specify time period for power domain 1 power trending information table view. NOTE: This time period should be configured before displaying the following Power Trending Information table for Power Domain.')
powerTrendingPowerType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dc", 0), ("ac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerTrendingPowerType.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingPowerType.setDescription('This field is used to display or set the power type displayed in the Power Trending Table.')
powerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3), )
if mibBuilder.loadTexts: powerTrendingSampleTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleTable.setDescription('Table of Power Domain 1 Power Trending Information.')
powerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1), ).setIndexNames((0, "IMM-MIB", "powerTrendingSampleIndex"))
if mibBuilder.loadTexts: powerTrendingSampleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleEntry.setDescription('Power Domain 1 Power Trending Sample entry.')
powerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleIndex.setDescription('Power Trending Sample Table Index.')
powerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleTimeStamp.setDescription('Power Trending Sample Table Timestamp.')
powerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleAve.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleAve.setDescription('Power Trending Table Average Power.')
powerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleMin.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleMin.setDescription('Power Trending Table Minimum Power.')
powerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleMax.setStatus('mandatory')
if mibBuilder.loadTexts: powerTrendingSampleMax.setDescription('Power Trending Table Maximum Power.')
powerModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11))
powerNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerNumber.setDescription('The present number of rows in the power module table.')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerTable.setDescription('This table contains power inventory information.')
powerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1), ).setIndexNames((0, "IMM-MIB", "powerIndex"))
if mibBuilder.loadTexts: powerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerEntry.setDescription('Each row contains parameters related to a power module inventory channel.')
powerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerIndex.setDescription('This column is used to identify a particular power module inventory channel.')
powerFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFruName.setStatus('mandatory')
if mibBuilder.loadTexts: powerFruName.setDescription('power module FRU name.')
powerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerPartNumber.setDescription('power module Part Number. View as a table and not as individual entries for consistent results.')
powerFRUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFRUNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerFRUNumber.setDescription('power module FRU Number. View as a table and not as individual entries for consistent results.')
powerFRUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFRUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerFRUSerialNumber.setDescription('power module Serial Number. View as a table and not as individual entries for consistent results.')
powerHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerHealthStatus.setDescription('A description of the power module status.')
disks = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12))
diskNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: diskNumber.setDescription('The present number of rows in the disk module table.')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskTable.setDescription('This table contains disk inventory information.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1), ).setIndexNames((0, "IMM-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskEntry.setDescription('Each row contains parameters related to a disk module inventory channel.')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: diskIndex.setDescription('This column is used to identify a particular disk module inventory channel.')
diskFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFruName.setStatus('mandatory')
if mibBuilder.loadTexts: diskFruName.setDescription('disk module FRU name.')
diskHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: diskHealthStatus.setDescription('A description of the disk module status.')
eventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1))
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1), )
if mibBuilder.loadTexts: eventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTable.setDescription('Table of event logs. View as a table and not as individual entries for consistent results.')
eventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1), ).setIndexNames((0, "IMM-MIB", "eventLogIndex"))
if mibBuilder.loadTexts: eventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogEntry.setDescription('Event log entries. View as a table and not as individual entries for consistent results.')
eventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogIndex.setDescription('Event log index number. View as a table and not as individual entries for consistent results.')
eventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogString.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogString.setDescription('Contains a string of information to detail the event. View as a table and not as individual entries for consistent results.')
eventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("error", 0), ("warning", 1), ("information", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogSeverity.setDescription('Contains a information to detail the severity of the event. View as a table and not as individual entries for consistent results.')
eventLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDate.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogDate.setDescription('The Date of the Event occured. View as a table and not as individual entries for consistent results.')
eventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTime.setDescription('The Time of the Event occured. View as a table and not as individual entries for consistent results.')
eventLogClr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: eventLogClr.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogClr.setDescription('Clear the event log.')
eventLogTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTftpServer.setDescription('To save the eventLog if it is not empty, set the IP address or host name of the TFTP server where the file should be transferred. The address must be entered in a dotted decimal IP string (e.g. 9.37.44.2), or equivalent for IPv6.')
eventLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogFileName.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogFileName.setDescription('File name of the saved log file on the target system.')
eventLogSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogSaveStart.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogSaveStart.setDescription('Start saving the eventLog file to the specified target file and system. Using execute will cause the SNMP client to wait for the save operation to complete. Using execute-nowait will not cause the SNMP client to wait for the save to complete. Instead it will save the configuration in the background. Note 1: Both eventLogTftpServer and eventLogFileName must be set. Note 2: Depending on the target, it might take up to several seconds for the save operation to complete. Note 3: Use eventLogStatus to confirm the status of the last operation. NOTE: Value returned for the GET command is meaningless for this MIB object.')
eventLogSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSaveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogSaveStatus.setDescription('Get the status of the last save operation which was initiated through SNMP method.')
remoteAccessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1))
generalRemoteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1))
remoteAlertRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120, 150, 180, 210, 240))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("oneAndHalfMinutes", 90), ("twoMinutes", 120), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertRetryDelay.setDescription('Number in seconds to delay between retries if sending a remote alert is unsuccessful.')
remoteAlertRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noretry", 0), ("retry1", 1), ("retry2", 2), ("retry3", 3), ("retry4", 4), ("retry5", 5), ("retry6", 6), ("retry7", 7), ("retry8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertRetryCount.setDescription('Number of additional times a remote alert will be retried if not succesfully sent. A value of zero indicates no retries will be attempted.')
remoteAlertEntryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120, 150, 180, 210, 240))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("oneAndHalfMinutes", 90), ("twoMinutes", 120), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertEntryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertEntryDelay.setDescription('Number in seconds to delay between entries if sending a remote alert is unsuccessful.')
snmpCriticalAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCriticalAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCriticalAlerts.setDescription('If Enabled,criticalAlerts will be sent to SNMP, else critical alerts will not be sent.')
snmpWarningAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWarningAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpWarningAlerts.setDescription('If Enabled,warningAlerts will be sent to SNMP , else warning alerts will not be sent.')
snmpSystemAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpSystemAlerts.setDescription('If Enabled,systemAlerts will be sent to SNMP , else system alerts will not be sent.')
remoteAccessTamperDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 30, 60, 120, 180, 240))).clone(namedValues=NamedValues(("nowait", 0), ("oneMinute", 1), ("twoMinutes", 2), ("threeMinutes", 3), ("fourMinutes", 4), ("fiveMinutes", 5), ("sixMinutes", 6), ("sevenMinutes", 7), ("tenMinutes", 10), ("fifteenMinutes", 15), ("twentyMinutes", 20), ("thirtyMinutes", 30), ("sixtyMinutes", 60), ("oneTwentyMinutes", 120), ("oneEightyMinutes", 180), ("twoFortyMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessTamperDelay.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessTamperDelay.setDescription('Number in minutes to prohibit a remote login attempt after more than 5 sequential login attempts have failed.')
userAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("localOnly", 0), ("ldapOnly", 1), ("localFirstThenLdap", 2), ("ldapFirstThenLocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthenticationMethod.setStatus('mandatory')
if mibBuilder.loadTexts: userAuthenticationMethod.setDescription('Use this field to specify how users attempting to login should be authenticated. There are two methods: Local authentication. Userid and password are verified by searching the list of users locally configured under Local Login Profiles. LDAP based authentication. Users are authenticated via a remote LDAP server. One or both authentication methods can be selected. If both methods should be used, the order must be specified.')
webInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneMinutes", 0), ("fiveMinutes", 1), ("tenMinutes", 2), ("fifteenMinutes", 3), ("twentyMinutes", 4), ("noTimeout", 5), ("userPicksTimeout", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: webInactivityTimeout.setDescription('Use this field to indicate how long, in minutes, the IMM subsystem will wait before disconnecting an inactive web session. Select the no timeout option to disable this feature. Select the User picks timeout option if the timeout should instead be selected by the user during the login process.')
snmpAlertFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10))
safSpTrapTempC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapTempC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapTempC.setDescription('Critical Alert: Temperature threshold exceeded.')
safSpTrapVoltC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapVoltC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapVoltC.setDescription('Critical Alert: Voltage threshold exceeded.')
safSpTrapPowerC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPowerC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapPowerC.setDescription('Critical Alert: Power failure.')
safSpTrapHdC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapHdC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapHdC.setDescription('Critical Alert: Hard disk drive failure.')
safSpTrapFanC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapFanC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapFanC.setDescription('Critical Alert: Single Fan failure.')
safSpTrapIhcC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapIhcC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapIhcC.setDescription('Critical Alert: Incompatible hardware configuration.')
safSpTrapCPUC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapCPUC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapCPUC.setDescription('Critical Alert: CPU Error.')
safSpTrapMemoryC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapMemoryC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapMemoryC.setDescription('Critical Alert: Memory Error.')
safSpTrapRdpsC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapRdpsC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapRdpsC.setDescription('Critical Alert: Redundant Power Supply failure.')
safSpTrapHardwareC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapHardwareC.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapHardwareC.setDescription('Critical Alert: Other Failure - refer to Message ID for specific condition.')
safSpTrapRdpsN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapRdpsN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapRdpsN.setDescription('Non-Critical Alert: Redundant Power Supply failure.')
safSpTrapTempN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapTempN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapTempN.setDescription('Non-Critical Alert: Temperature threshold exceeded.')
safSpTrapVoltN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapVoltN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapVoltN.setDescription('Non-Critical Alert: Voltage threshold exceeded.')
safSpTrapPowerN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPowerN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapPowerN.setDescription('Non-Critical Alert: Power.')
safSpTrapFanN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapFanN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapFanN.setDescription('Non-Critical Alert: Fan Error.')
safSpTrapCPUN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapCPUN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapCPUN.setDescription('Non-Critical Alert: Memory Error.')
safSpTrapMemoryN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapMemoryN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapMemoryN.setDescription('Non-Critical Alert: Memory Error.')
safSpTrapHardwareN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapHardwareN.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapHardwareN.setDescription('Non-Critical Alert: Warning - refer to Message ID for specific condition.')
safSpTrapRLogin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapRLogin.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapRLogin.setDescription('Sev-Off Alert: Event Remote Login.')
safSpTrapOsToS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapOsToS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapOsToS.setDescription('System Alert: OS Timeout value exceeded.')
safSpTrapAppS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapAppS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapAppS.setDescription('System Alert: Application Alert. Refer to Message ID for specific condition.')
safSpTrapPowerS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPowerS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapPowerS.setDescription('System Alert: Power on or off.')
safSpTrapBootS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapBootS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapBootS.setDescription('System Alert: System Boot Failure.')
safSpTrapLdrToS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapLdrToS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapLdrToS.setDescription('System Alert: OS Loader Timeout.')
safSpTrapPFAS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPFAS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapPFAS.setDescription('System Alert: Predictive Failure Analysis(PFA) information.')
safSpTrapSysLogS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapSysLogS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapSysLogS.setDescription('System Alert: System Log 75% full.')
safSpTrapNwChangeS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapNwChangeS.setStatus('mandatory')
if mibBuilder.loadTexts: safSpTrapNwChangeS.setDescription('System Alert: Network change notification.')
customSecuritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20))
loginPasswordRequired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginPasswordRequired.setStatus('mandatory')
if mibBuilder.loadTexts: loginPasswordRequired.setDescription('If enabled, all users require a login password to access the IMM via the CLI and Web interfaces. The default value is disabled.')
passwordExpirationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordExpirationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: passwordExpirationPeriod.setDescription('The number of days before login passwords expire. The minimum value is 1 day and the maximum value is 365 days. The default value is 90 days. A value of 0 disables this option.')
minimumPasswordReuseCycle = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("onePassword", 1), ("twoPasswords", 2), ("threePasswords", 3), ("fourPasswords", 4), ("fivePasswords", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumPasswordReuseCycle.setStatus('mandatory')
if mibBuilder.loadTexts: minimumPasswordReuseCycle.setDescription('The number of unique passwords a user must choose before reusing a password. The default value is none.')
complexPasswordRulesEnforced = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: complexPasswordRulesEnforced.setStatus('mandatory')
if mibBuilder.loadTexts: complexPasswordRulesEnforced.setDescription('If enabled, password should contains at least one numeric and one alphabetic character.')
minimumPasswordLength = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("passwordLengthOne", 1), ("passwordLengthTwo", 2), ("passwordLengthThree", 3), ("passwordLengthFour", 4), ("passwordLength5", 5), ("passwordLength6", 6), ("passwordLength7", 7), ("passwordLength8", 8), ("passwordLength9", 9), ("passwordLength10", 10), ("passwordLength11", 11), ("passwordLength12", 12), ("passwordLength13", 13), ("passwordLength14", 14), ("passwordLength15", 15), ("passwordLength16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumPasswordLength.setStatus('mandatory')
if mibBuilder.loadTexts: minimumPasswordLength.setDescription('The required minimum number of characters in the new password. The default value is 8. A SET of this object is ignored until the complexPasswordRules option is enabled and the minimumPasswordReuseCycle is not none(0)')
defaultAdminPasswordExpired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultAdminPasswordExpired.setStatus('mandatory')
if mibBuilder.loadTexts: defaultAdminPasswordExpired.setDescription("If enabled, the factory default 'USERID' account password must be changed on next login. The default value is disabled.")
minimumDiffCharsPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("oneChar", 1), ("twoChars", 2), ("threeChars", 3), ("fourChars", 4), ("fiveChars", 5), ("sixChars", 6), ("sevenChars", 7), ("eightChars", 8), ("nineChars", 9), ("tenChars", 10), ("elevenChars", 11), ("twelveChars", 12), ("thirteenChars", 13), ("fourteenChars", 14), ("fifteenChars", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumDiffCharsPassword.setStatus('mandatory')
if mibBuilder.loadTexts: minimumDiffCharsPassword.setDescription('The required minimum number of characters in the new password different from the previous password. The default value is 2. A SET of this object is ignored until the complexPasswordRules option is enabled and the minimumPasswordReuseCycle is not none(0)')
changePasswordFirstAccess = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changePasswordFirstAccess.setStatus('mandatory')
if mibBuilder.loadTexts: changePasswordFirstAccess.setDescription('If enabled, the login user will be forced to change their password on the first access after the account has been established or on the first access after an administrator has changed the password for the user, except for the administrator password for USERID. The default value is disabled.')
accountLockoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 10, 15, 20, 30, 60, 120, 180, 240))).clone(namedValues=NamedValues(("nowait", 0), ("oneMinute", 1), ("twoMinutes", 2), ("fiveMinutes", 5), ("tenMinutes", 10), ("fifteenMinutes", 15), ("twentyMinutes", 20), ("thirtyMinutes", 30), ("sixtyMinutes", 60), ("oneTwentyMinutes", 120), ("oneEightyMinutes", 180), ("twoFortyMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountLockoutPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accountLockoutPeriod.setDescription('The period of time in minutes that a user is locked out after the maximum number of login failures was reached. The minimum value is is 1 minute and the maximum value is 240 minutes. The default value is 2 minutes for the Legacy security level and 60 minutes for the High security level. A value of 0 disables this option.')
maxLoginFailures = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 0), ("oneTime", 1), ("twoTimes", 2), ("threeTimes", 3), ("fourTimes", 4), ("fiveTimes", 5), ("sixTimes", 6), ("sevenTimes", 7), ("eightTimes", 8), ("nineTimes", 9), ("tenTimes", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLoginFailures.setStatus('mandatory')
if mibBuilder.loadTexts: maxLoginFailures.setDescription('The maximum number of login failures before a user account is locked. A value of 0 disables this option. The default value is 5.')
passwordChangeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordChangeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: passwordChangeInterval.setDescription('A minimum period of time that user is not able to change their own password. The range of acceptable values will be from 0 to 240 (or 10 days). A value of 0 disables this option. If the password expiration period is set, it must be greater than the minimum password change interval.')
serialPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2))
portBaud = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6), ("baud115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaud.setStatus('mandatory')
if mibBuilder.loadTexts: portBaud.setDescription('Baud rate for the serial port.')
portParity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('mandatory')
if mibBuilder.loadTexts: portParity.setDescription('Parity setting for the serial port.')
serialRedirect = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 3))
enterCLIkeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterCLIkeySeq.setStatus('mandatory')
if mibBuilder.loadTexts: enterCLIkeySeq.setDescription("This is the keystroke sequence used to enter the CLI. This sequence must have at least one character. The caret symbol (^) has a special meaning in this sequence. It denotes 'Ctrl' for keystrokes that map to Ctrl sequences (for example, ^[ for the escape key and ^M for carriage return). All ocurrences of ^ will be interpreted as part of a Ctrl sequence. Refer to an ASCII-to-key conversion table for a complete list of Ctrl sequences. The default value for this field is '^[(' i.e. ESC followed by (.")
portStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneStopbit", 0), ("twoOrOnePtFive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: portStopBits.setDescription('Number of stop bits for the serial port.')
portCLImode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cliDisable", 0), ("cliWithEMScompatibleKeystrokeSeq", 1), ("cliWithUserDefinedKeystrokeSeq", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCLImode.setStatus('mandatory')
if mibBuilder.loadTexts: portCLImode.setDescription('Use this field to select the CLI (command line interface) mode for this port. The CLI mode disablies serial redirect, or pecifies the type of keystroke sequences to use for entering (returning to) the CLI from the system console.')
remoteAlertIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3))
remoteAlertIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1), )
if mibBuilder.loadTexts: remoteAlertIdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdsTable.setDescription('Table of remote alert entries. This table lets you configure remote alert recipients. You can define up to 12 unique recipients. ')
remoteAlertIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1), ).setIndexNames((0, "IMM-MIB", "remoteAlertIdEntryIndex"))
if mibBuilder.loadTexts: remoteAlertIdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdsEntry.setDescription('Remote alert entries.')
remoteAlertIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlertIdEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryIndex.setDescription('Index for remote alert entry.')
remoteAlertIdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryStatus.setDescription('If enabled alerts will be sent to this alert recipient else alerts will not be sent.')
remoteAlertIdEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryName.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryName.setDescription('A null terminated string that contains a text description of this entry.')
remoteAlertIdEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 320))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEmailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEmailAddr.setDescription("A null terminated string that contains a E-Mail Address. For example 'jeb@us.ibm.com'. Used only for a E-mail over Lan.")
remoteAlertIdEntryCriticalAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryCriticalAlert.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryCriticalAlert.setDescription('If Enabled,criticalAlerts will be sent to this remote alert receipient,else critical alerts will not be sent.')
remoteAlertIdEntryWarningAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryWarningAlert.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryWarningAlert.setDescription('If Enabled,warningAlerts will be sent to this remote alert receipient,else warningAlerts will not be sent.')
remoteAlertIdEntrySystemAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySystemAlert.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntrySystemAlert.setDescription('If Enabled,systemAlerts will be sent to this remote alert receipient,else systemAlerts will not be sent.')
remoteAlertIdEntryAttachmentsToEmailAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAttachments", 0), ("attachEventLog", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryAttachmentsToEmailAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryAttachmentsToEmailAlerts.setDescription('Indicates if the event log should be attached to a email alert.')
remoteAlertIdEntrySyslogPortAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySyslogPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntrySyslogPortAssignment.setDescription('Syslog port number.')
remoteAlertIdEntrySyslogHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySyslogHostname.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntrySyslogHostname.setDescription('Syslog hostname or IP address.')
remoteAlertIdEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("email", 1), ("syslog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertIdEntryType.setDescription('Alert recipient type.')
remoteAlertFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2), )
if mibBuilder.loadTexts: remoteAlertFiltersTable.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertFiltersTable.setDescription('Table of Alert Filters. The entries (rows) in this table correspond 1-1 with the entries in the remoteAlertIdsTable. They are correlated by index. ')
remoteAlertFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1), ).setIndexNames((0, "IMM-MIB", "rafIndex"))
if mibBuilder.loadTexts: remoteAlertFiltersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAlertFiltersEntry.setDescription('Remote Filters entries.')
rafIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rafIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rafIndex.setDescription('Index for User Authority Level entry.')
rafSpTrapTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapTempC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapTempC.setDescription('Critical Alert: Temperature threshold exceeded.')
rafSpTrapVoltC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapVoltC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapVoltC.setDescription('Critical Alert: Voltage threshold exceeded.')
rafSpTrapPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPowerC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapPowerC.setDescription('Critical Alert: Power failure.')
rafSpTrapHdC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapHdC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapHdC.setDescription('Critical Alert: Hard disk drive failure.')
rafSpTrapFanC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapFanC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapFanC.setDescription('Critical Alert: Single Fan failure.')
rafSpTrapIhcC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapIhcC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapIhcC.setDescription('Critical Alert: Incompatible hardware configuration.')
rafSpTrapCPUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapCPUC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapCPUC.setDescription('Critical Alert: CPU Error.')
rafSpTrapMemoryC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapMemoryC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapMemoryC.setDescription('Critical Alert: Memory Error.')
rafSpTrapRdpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapRdpsC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapRdpsC.setDescription('Critical Alert: Redundant Power Supply failure.')
rafSpTrapHardwareC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapHardwareC.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapHardwareC.setDescription('Critical Alert: Other Failure - refer to Message ID for specific condition.')
rafSpTrapRdpsN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapRdpsN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapRdpsN.setDescription('Non-Critical Alert: Redundant Power Supply failure.')
rafSpTrapTempN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapTempN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapTempN.setDescription('Non-Critical Alert: Temperature threshold exceeded.')
rafSpTrapVoltN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapVoltN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapVoltN.setDescription('Non-Critical Alert: Voltage threshold exceeded.')
rafSpTrapPowerN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPowerN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapPowerN.setDescription('Non-Critical Alert: Power.')
rafSpTrapFanN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapFanN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapFanN.setDescription('Non-Critical Alert: Fan Error.')
rafSpTrapCPUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapCPUN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapCPUN.setDescription('Non-Critical Alert: Memory Error.')
rafSpTrapMemoryN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapMemoryN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapMemoryN.setDescription('Non-Critical Alert: Memory Error.')
rafSpTrapHardwareN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapHardwareN.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapHardwareN.setDescription('Non-Critical Alert: Warning - refer to Message ID for specific condition.')
rafSpTrapRLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapRLogin.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapRLogin.setDescription('Sev-Off Alert: Event Remote Login.')
rafSpTrapOsToS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapOsToS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapOsToS.setDescription('System Alert: OS Timeout value exceeded.')
rafSpTrapAppS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapAppS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapAppS.setDescription('System Alert: Application Alert. Refer to Message ID for specific condition.')
rafSpTrapPowerS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPowerS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapPowerS.setDescription('System Alert: Power On or Off.')
rafSpTrapBootS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapBootS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapBootS.setDescription('System Alert: System Boot Failure.')
rafSpTrapLdrToS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapLdrToS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapLdrToS.setDescription('System Alert: OS Loader Timeout.')
rafSpTrapPFAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPFAS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapPFAS.setDescription('System Alert: Predictive Failure Analysis(PFA) information.')
rafSpTrapSysLogS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapSysLogS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapSysLogS.setDescription('System Alert: System Log 75% full.')
rafSpTrapNwChangeS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapNwChangeS.setStatus('mandatory')
if mibBuilder.loadTexts: rafSpTrapNwChangeS.setDescription('System Alert: Network change notification.')
generateTestAlert = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: generateTestAlert.setStatus('mandatory')
if mibBuilder.loadTexts: generateTestAlert.setDescription("Generate a Test Alert. This will send a test alert to all configured and enabled remote alert receipients. The text portion of the alert will contain 'Application Posted Alert to IMM'.")
remoteAccessIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4))
remoteAccessIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1), )
if mibBuilder.loadTexts: remoteAccessIdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessIdsTable.setDescription("Table of remote access profiles. This table lets you to configure all login profiles. You can define up to 12 unique profiles. Note: By default, the remote supervisor adapter comes configured with one login profile that allows remote access using a login ID of 'USERID' and a password of 'PASSW0RD' (the 0 is a zero). To avoid a potential security exposure, we strongly recommend that you change this default Login Profile to values of your choice.")
remoteAccessIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1), ).setIndexNames((0, "IMM-MIB", "remoteAccessIdEntryIndex"))
if mibBuilder.loadTexts: remoteAccessIdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessIdsEntry.setDescription('Remote access entries.')
remoteAccessIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessIdEntryIndex.setDescription('Index for Remote access entry.')
remoteAccessIdEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryUserId.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessIdEntryUserId.setDescription('Remote access entry null terminated string that contains the user-id. This can only be modified from blank to non-blank, then back to blank.')
remoteAccessIdEntryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryPassword.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessIdEntryPassword.setDescription('Remote access entry null terminated string that contains the password. On a read a NULL string will be returned for security reasons.')
remoteAccessIdEntryUserPwdLeftDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryUserPwdLeftDays.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessIdEntryUserPwdLeftDays.setDescription('left days before password expired for selected user')
remoteAccessUserAuthorityLevelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2), )
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelTable.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelTable.setDescription('Table of user authority level profiles.')
remoteAccessUserAuthorityLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1), ).setIndexNames((0, "IMM-MIB", "ualIndex"))
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelEntry.setDescription('User authority level entries.')
ualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ualIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ualIndex.setDescription('Index for User Authority Level entry.')
ualId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ualId.setStatus('mandatory')
if mibBuilder.loadTexts: ualId.setDescription('User ID')
ualSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualSupervisor.setStatus('mandatory')
if mibBuilder.loadTexts: ualSupervisor.setDescription('User has no restrictions.')
ualReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualReadOnly.setStatus('mandatory')
if mibBuilder.loadTexts: ualReadOnly.setDescription('User has only read-only access, and cannot perform any save, modify, clear, or state affecting operations (eg. restart IMM, restore defaults, upgrade the firmware, etc.).')
ualAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAccountManagement.setStatus('mandatory')
if mibBuilder.loadTexts: ualAccountManagement.setDescription('User can add/modify/delete users and change the global login settings in the Login Profiles panel.')
ualConsoleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualConsoleAccess.setStatus('mandatory')
if mibBuilder.loadTexts: ualConsoleAccess.setDescription('User can access the remote console.')
ualConsoleAndVirtualMediaAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualConsoleAndVirtualMediaAccess.setStatus('mandatory')
if mibBuilder.loadTexts: ualConsoleAndVirtualMediaAccess.setDescription('User can access both the remote console and the virtual media feature.')
ualServerPowerAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualServerPowerAccess.setStatus('mandatory')
if mibBuilder.loadTexts: ualServerPowerAccess.setDescription('User can access the power on and restart functions for the remote server. These functions are available via the Power/Restart panel.')
ualAllowClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAllowClearLog.setStatus('mandatory')
if mibBuilder.loadTexts: ualAllowClearLog.setDescription('User can clear the event logs. Everyone can look at the event logs, but this particular permission is required to clear the logs.')
ualAdapterBasicConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterBasicConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ualAdapterBasicConfig.setDescription('User can modify configuration parameters in the System Settings and Alerts panels.')
ualAdapterNetworkAndSecurityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterNetworkAndSecurityConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ualAdapterNetworkAndSecurityConfig.setDescription('User can modify configuration parameters in the Security, Network Protocols, Network Interface, Port Assignments, and Serial Port panels.')
ualAdapterAdvancedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterAdvancedConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ualAdapterAdvancedConfig.setDescription('User has no restrictions when configuring the adapter. In addition, the user is said to have administrative access to the IMM, meaning that the user can also perform the following advanced functions: firmware upgrades, PXE network boot, restore adapter factory defaults, modify and restore adapter configuration from a configuration file, and restart/reset the adapter.')
groupProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5))
groupIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1), )
if mibBuilder.loadTexts: groupIdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: groupIdsTable.setDescription('Table of Group profiles. This table lets you to configure all group profiles. You can define up to 16 unique profiles.')
groupIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupIdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: groupIdsEntry.setDescription('Group ID entries.')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: groupIndex.setDescription('Index for Group IDs entry.')
groupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupId.setStatus('mandatory')
if mibBuilder.loadTexts: groupId.setDescription('Group ID. It is a null terminated string that contains the group-id. It must not be a duplicate of any previously configured ones.')
groupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRole.setStatus('mandatory')
if mibBuilder.loadTexts: groupRole.setDescription('Group Role. It indicates if the group has supervisor, operator, or custom access.')
groupRBSroleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2), )
if mibBuilder.loadTexts: groupRBSroleTable.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSroleTable.setDescription('Table of Group Role profiles.')
groupRBSroleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1), ).setIndexNames((0, "IMM-MIB", "groupRBSroleIndex"))
if mibBuilder.loadTexts: groupRBSroleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSroleEntry.setDescription('Group Role entries.')
groupRBSroleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSroleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSroleIndex.setDescription('Index for Group Role entry.')
groupRBSroleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSroleId.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSroleId.setDescription('Group ID')
groupRBSSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSupervisor.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSSupervisor.setDescription('Group has no restrictions.')
groupRBSOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSOperator.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSOperator.setDescription('Group has read-only access, and cannot perform any save, modify, clear, or state affecting operations (e.g. restart IMM, restore defaults, upgrade the firmware, etc.).')
groupRBSNetworkSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSNetworkSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSNetworkSecurity.setDescription('Group can modify the configuration in the Security, Network Protocols, Network Interface, Port Assignments, and Serial Port panels.')
groupRBSUserAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSUserAccountManagement.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSUserAccountManagement.setDescription('Group can add/modify/delete users and change the Global Login Settings in the Login Profiles panel.')
groupRBSRemoteConsoleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSRemoteConsoleAccess.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSRemoteConsoleAccess.setDescription('Group can access the remote server console.')
groupRBSRemoteConsoleRemoteDiskAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSRemoteConsoleRemoteDiskAccess.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSRemoteConsoleRemoteDiskAccess.setDescription('Group can access the remote server console and the remote disk functions for the remote server.')
groupRBSServerPowerRestartAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSServerPowerRestartAccess.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSServerPowerRestartAccess.setDescription('Group can access the power on, restart and server timeout functions for the remote server.')
groupRBSBasicAdapterConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBasicAdapterConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSBasicAdapterConfiguration.setDescription('Group can modify configuration parameters in the System Settings (excluding Contact, Location and Server Timeouts) and Alerts panels.')
groupRBSClearEventLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSClearEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSClearEventLog.setDescription('Group can clear the event logs. Everyone can look at the event logs, but this particular permission is required to clear the logs.')
groupRBSAdvancedAdapterConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSAdvancedAdapterConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: groupRBSAdvancedAdapterConfiguration.setDescription('Group has no restrictions when configuring the adapter. In addition the user is said to have administrative access to the IMM, meaning that the user can also perform the following advanced functions: firmware upgrades, PXE network boot, restore adapter factory defaults, modify and restore adapter configuration from a configuration file, and restart/reset the adapter. This excludes Server Power/Restart Control and timeout functions.')
sshClientAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6))
sshClientAuthPubKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1), )
if mibBuilder.loadTexts: sshClientAuthPubKeyTable.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyTable.setDescription('A table that contains client authentication public key information.')
sshClientAuthPubKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1), ).setIndexNames((0, "IMM-MIB", "sshClientAuthRemoteAccessIdIndex"), (0, "IMM-MIB", "sshClientAuthPubKeyIndex"))
if mibBuilder.loadTexts: sshClientAuthPubKeyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyEntry.setDescription('A information list about a particular SSH public key used for client authentication. The primary table index is the same value as the associated remoteAccessIdEntryIndex. The secondary table index allows selection of the Nth public key for that remoteAccessIdEntryIndex.')
sshClientAuthRemoteAccessIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: sshClientAuthRemoteAccessIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthRemoteAccessIdIndex.setDescription('The primary table index is the same value as the associated remoteAccessIdEntryIndex used as an index into the remoteAccessIdsTable.')
sshClientAuthPubKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: sshClientAuthPubKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyIndex.setDescription("The secondary table index used to select one of the client authentication public keys for a particular remote access Id. The index is an integer value from 1 to N where N is the number of keys associated with a particular remote access Id. An addition always causes the value of N to increase by one, effectively adding an entry after the existing keys for that remote access Id. If an entry is deleted from the table by setting sshClientAuthPubKeyEntryStatus = invalid, the key associated with that entry is deleted. If the deleted key was not the last key for a remote access Id (sshClientAuthPubKeyIndex is not the 'last' or Nth entry), the subsequent entries are renumbered after the deletion. A deletion always causes the value of N to decrease by one. The underlying SSH server implementation searches the keys in order from 1 to N when attempting public key authentication. NOTE:A maximum of 4 public keys can be installed for one remote access Id.")
sshClientAuthPubKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sshDss", 1), ("sshRsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeyType.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyType.setDescription('The type of the SSH public key represented by this entry.')
sshClientAuthPubKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4), ("bits4096", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeySize.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeySize.setDescription('The size of the SSH public key represented by this entry.')
sshClientAuthPubKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeyFingerprint.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyFingerprint.setDescription('The RSA fingerprint of the SSH public key represented by this entry. This value can be used with the SSH client to verify, on the initial connection, that the Secure Shell server responding to the request is the server running on the managed entity. This is the fingerprint of the operational host key pair. If the key pair represented by this entry is not operational then sixteen null octets must be returned.')
sshClientAuthPubKeyAcceptFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyAcceptFrom.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyAcceptFrom.setDescription('This is a filter that describes the set of SSH client IP addresses and host names that can establish SSH connections to the AMM authenticated by the public key represented by this entry of the table. The filter is a comma-separated list of IP addresses and/or hostnames. A question mark may be used to match any single character. An asterisk may be used to match multiple characters. An exclamation point may preceed an IP address or hostname to deny acccess from that IP address or hostname. The format of the Accept From specification is: from=PATTERN-LIST PATTERN-LIST is the filter, which must be enclosed in double quotation marks. NOTE:This MIB object can be manipulated after the corresponding SSH public key is installed.')
sshClientAuthPubKeyComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyComment.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyComment.setDescription('This is a descriptive string that the administrator may use to help identify the public key represented by this entry. It serves no function in the operation of the SSH server. NOTE:This MIB object can be manipulated after the corresponding SSH public key is installed.')
sshClientAuthPubKeyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyAction.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyAction.setDescription('import(1) starts the TFTP file transfer of an SSH client authentication public key from the TFTP server to the AMM. The import operation is only accepted if the associated RemoteAccessIdsEntry row is configured and the current value of sshClientAuthPubKeyEntryStatus is underCreation(3) or valid(1), if the current value of sshClientAuthPubKeyEntryStatus is valid(1), it will replace the key with a new key, If the import is successful the value of sshClientAuthPubKeyRowStatus changes to valid(1). export(2) starts the TFTP file transfer of an SSH client authentication public key from the AMM to the TFTP server. The export operation is only accepted if the current value of sshClientAuthPubKeyEntryStatus is valid(1). NOTE: Users should compare the fingerprint value sshClientAuthPubKeyFingerprint to the fingerprint of client authentication key files imported or exported using the TFTP file transfer protocol to guard against possible file corruption. Value returned for the GET command is meaningless for this MIB object.')
sshClientAuthPubKeyEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 9), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyEntryStatus.setDescription('This object manages the creation and deletion of this entry. The steps recommended to install and to activate a new client authorization public key are: 1. Set values for sshClientAuthPubKeyTftpServer, sshClientAuthPubKeyFileName, sshClientAuthPubKeyFileFormat 2. Create a new entry in this table sshClientAuthPubKeyEntryStatus = createRequest 3. Import a new key sshClientAuthPubKeyAction = import This entry will be valid after sshClientAuthPubKeyAction is successfully imported. 4. Set sshClientAuthPubKeyAcceptFrom and sshClientAuthPubKeyComment as required. valid(1) - Indicates that the public key pair represented by this entry is available for use by the Secure Shell Server for client authentication. createRequest(2) - A new entry will be created in this table for the specified host key pair and the new entry will transition to the underCreation(3) state. The operation is only accepted if the associated RemoteAccessIdsEntry row defining a local user account is configured. underCreation(3) - Indicates that this entry exists in the agent but is unavailable for use. After completing the create operation, the agent will set this object to underCreation(3). invalid(4) - Deletes this entry and any client authentication public key that may be associated with it.')
sshClientAuthPubKeyUnused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeyUnused.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyUnused.setDescription('The number of available storage locations that may be used to install additional Client Authentication Public Keys. This number decreases by one when a new key is added to the configuration.')
sshClientAuthPubKeyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyTftpServer.setDescription('IP address or host name of the TFTP server where an SSH client authentication public key is to be installed from or exported to. The address must be entered in a dotted decimal IP string (e.g. 9.37.44.2).')
sshClientAuthPubKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyFileName.setDescription('File name on the TFTP server of an SSH client authentication public key.')
sshClientAuthPubKeyFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSSH", 1), ("rfc4716", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyFileFormat.setStatus('mandatory')
if mibBuilder.loadTexts: sshClientAuthPubKeyFileFormat.setDescription('File format of SSH client authentication public key files imported from or exported to the TFTP file server.')
spClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 2))
spClockDateAndTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockDateAndTimeSetting.setStatus('mandatory')
if mibBuilder.loadTexts: spClockDateAndTimeSetting.setDescription("IMM clock date and time setting. A date-time specification for the local time of day. For example to set the date and time to March 4, 2001 at 06:00:00AM, set the value to:'03/04/2001,06:00:00'. field contents range _____ ________ _____ 1 month 01..12 2 separator '/' 3 day 01..31 4 separator '/' 5 year 2000..2037 6 separator ',' 7 hour 00..23 8 separator ':' 9 minutes 00..59 10 separator ':' 11 seconds 00..59 ")
spClockTimezoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockTimezoneSetting.setStatus('mandatory')
if mibBuilder.loadTexts: spClockTimezoneSetting.setDescription("IMM clock Greenwich Mean Time(GMT) offset and Daylight Saving Time(DST) settings. The following table lists GMT offsets and associated DST information. DST is not observed in time zones where the 'Observe DST' value does not contain 'yes' in the table. Also, note that in some cases additional information is required to determine the clock adjustment when DST is observed. Examples -to set the GMT offset to +3:30, set the value to:'+3:30,no' -for Eastern Standard Time and observing DST, set the value to:'-5:00,yes' -for Turkey and observing DST, set the value to:'+2:00,yes,3' GMT Observe Additional Offset DST? DST value ______ _______ __________ GMT+0 yes | no GMT+1 yes | no GMT+2 yes | no When 'Observe DST?' value is 'yes': '1' Europe/Eastern Europe (ee) '3' Turkey (tky) '4' Asia/Beirut (bei) '5' Asia/Amman (amm) '6' Asia/Jerusalem (jem) GMT+3 no GMT+3:30 yes | no GMT+4 no GMT+4:30 no GMT+5 no GMT+5:30 no GMT+5:45 no GMT+6 no GMT+6:30 no GMT+7 no GMT+8 no GMT+9 no GMT+9:30 yes | no GMT+10 yes | no GMT+11 no GMT+12 yes | no GMT+13 no GMT-12 no GMT-11 yes | no GMT-10 no GMT-9 yes | no GMT-8 yes | no GMT-7 yes | no When 'Observe DST?' value is 'yes': '7' US/Mountain (mtn) '8' America/Mazatlan (maz) GMT-6 yes | no When 'Observe DST?' value is 'yes': '9' America/Mexico City (mex) '10' Canada/Central (cna) GMT-5 yes | no When 'Observe DST?' value is 'yes': '11' Cuba (cub) '12' Canada, US/East-Indiana (ein) GMT-4:30 no GMT-4 yes | no When 'Observe DST?' value is 'yes': '13' America/Asuncion (asu) '14' America/Cuiaba (cui) '15' America/Santiago (san) '16' Canada/Atlantic (cat) GMT-3:30 yes | no GMT-3 yes | no When 'Observe DST?' value is 'yes': '17' America/Gothab (gtb) '18' America/Montevideo (moo) '19' Brazil/East (bre) GMT-2 no GMT-1 yes | no ")
spIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3))
spTxtId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spTxtId.setStatus('mandatory')
if mibBuilder.loadTexts: spTxtId.setDescription("IMM text ID. Note: Do not put any 'space character' at end of the ID.")
spRoomID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spRoomID.setStatus('mandatory')
if mibBuilder.loadTexts: spRoomID.setDescription('Room where the system is located. In some hardware configurations this object can only be read.')
spRackID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spRackID.setStatus('mandatory')
if mibBuilder.loadTexts: spRackID.setDescription('ID for Rack that contains this system. In some hardware configurations this object can only be read.')
spRackUnitPosition = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spRackUnitPosition.setStatus('mandatory')
if mibBuilder.loadTexts: spRackUnitPosition.setDescription('Position within the rack for this system. In some hardware configurations this object can only be read.')
spRackUnitHeight = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spRackUnitHeight.setStatus('mandatory')
if mibBuilder.loadTexts: spRackUnitHeight.setDescription('Number of rack units occupied by this system.')
spRackBladeBay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spRackBladeBay.setStatus('mandatory')
if mibBuilder.loadTexts: spRackBladeBay.setDescription('Bay number for system contained in a blade chassis.')
networkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4))
networkInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1))
ethernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1))
ethernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceType.setDescription("The type of interface. Indicates 'Ethernet-1'.")
ethernetInterfaceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interfaceDisabled", 0), ("interfaceEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceEnabled.setDescription("Disable or enable the interface. Note: To alter any of the configuration settings for the ethernet interface the following procedure should be used: (1)This object should be written with 'interfaceDisabled' (2)Make the modifications to other settings (3)This object should be written with 'interfaceEnabled' (4)Restart the remote supervisor adapter Also note that when this object has a value of interfaceEnabled the following is verifed, if this verification fails a error response will be returned for the set of this object and the ethernet interface will be left in a disabled state. (1)Is the range for the MTU between 60-1500 (2)Are the speed settings one of 10Mb, 100Mb, AUTO (3)Are the speed settings one of Half, Full, AUTO (4)If DHCP is disabled then is there a valid IP address ")
ethernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceHostName.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceHostName.setDescription('Contains the 64 byte null terminated DNS host name for this interface.')
ethernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPAddress.setDescription('Contains the IP address for the ethernet interface.')
ethernetInterfaceAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceAutoNegotiate.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceAutoNegotiate.setDescription('If this is enabled, then we should ignore Speed/Duplex.')
ethernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("enet10Megabit", 3), ("enet100Megabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDataRate.setDescription('Specifies the data transfer rate to be used over the ethernet interface 10Mb/100Mb/Auto. Note that the value of this variable is ignored if ethernetInterfaceAutoNegotiate is set to enabled(0).')
ethernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDuplexSetting.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDuplexSetting.setDescription('Specifies the duplex settings for the data transfer rate to be used over the ethernet interface Half/Full/Auto.')
ethernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceLAA.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceLAA.setDescription("Specifies the locally administered MAC address. The locally administered address must be a hexadecimal value between 000000000000 - FFFFFFFFFFFF. This value must be in the form XX:XX:XX:XX:XX:XX where 'X' is a number between 0 - 9 and A - F. This IMM subsystem does not allow use of a multicast address. A multicast address has the least significant bit of the first byte set to a 1. The first byte must, therefore, be an even number.")
ethernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dhcpDisabled", 0), ("dhcpEnabled", 1), ("dhcpTry", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDhcpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDhcpEnabled.setDescription('Disable or enable DHCP on this interface.')
ethernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceGatewayIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceGatewayIPAddress.setDescription('Contains the IP address of the gateway/router for the ethernet interface.')
ethernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceBIA.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceBIA.setDescription('Specifies the burned-in MAC (BIA) address.')
ethernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceMTU.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceMTU.setDescription('Contains the Maximum Transmission Unit(MTU) for the ethernet interface')
ethernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceSubnetMask.setDescription('Contains the Subnet Mask for the ethernet interface')
dhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14))
dhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpHostName.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpHostName.setDescription('Contains the 64 byte null terminated DNS host name for this interface, assigned by the DHCP server.')
dhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpIPAddress.setDescription('Contains the IP address for the ehternet interface, assigned by the DHCP server.')
dhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGatewayIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGatewayIPAddress.setDescription('Contains the IP address of the gateway/router for the ethernet interface, assigned by the DHCP server.')
dhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetMask.setDescription('Contains the Subnet Mask for the ethernet interface, assigned by the DHCP server.')
dhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpDomainName.setDescription('Contains the 64 byte null terminated Domain Name for this interface, assigned by the DHCP server.')
dhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPrimaryDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpPrimaryDNSServer.setDescription('Contains the Primary DNS server, assigned by the DHCP server.')
dhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSecondaryDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSecondaryDNSServer.setDescription('Contains the Secondary DNS server, assigned by the DHCP server.')
dhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpTertiaryDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpTertiaryDNSServer.setDescription('Contains the tertiary DNS server, assigned by the DHCP server.')
ethernetInterfaceVlan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceVlan.setDescription('If this is enabled, assign VLAN ID needs to be assigned. NOTE: This is not supported on blades.')
ethernetInterfaceVlanID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceVlanID.setDescription('Contains the VLAN ID for the ethernet interface. NOTE: This is not supported in blades.')
ethernetInterfaceIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4))
ethernetInterfaceIPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6Enabled.setDescription('The current IPv6 enabled or disabled state of this IMM. NOTE: If IPv6 address(es) have been configured for one or more interfaces/protocols/services on this IMM, when you update the firmware to a level which does not support IPv6, all IPv6 connectivity will be lost, and services/interfaces for which an IPv6 address was configured may not function properly. You will be required to reconfigure these services/interfaces.')
ethernetInterfaceIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5))
ethernetInterfaceIPv6LocalAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 1))
ethernetInterfaceIPv6LinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 1, 1), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceIPv6LinkLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6LinkLocalAddress.setDescription("The IPv6 link local IP address for the ethernet interface. NOTE: If ethernetInterfaceIPv6Enabled is currently disabled, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceIPv6StaticIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2))
ethernetInterfaceIPv6StaticIPConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPConfigEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPConfigEnabled.setDescription('The IPv6 static IP address enabled or disabled state for the ethernet interface.')
ethernetInterfaceIPv6StaticIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 2), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPAddress.setDescription("The IPv6 static IP address for the ethernet interface. NOTE: If ethernetInterfaceIPv6Enabled is currently disabled, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceIPv6StaticIPAddressPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPAddressPrefixLen.setDescription('The IPv6 static IP address prefix length for the ethernet interface. NOTE: If ethernetInterfaceIPv6Enabled is currently disabled, this object has the value 0.')
ethernetInterfaceIPv6StaticIPDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 4), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPDefaultRoute.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPDefaultRoute.setDescription("The IPv6 static IP address default route for the ethernet interface. NOTE: If ethernetInterfaceIPv6Enabled is currently disabled, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceIPv6AutoIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3))
ethernetInterfaceDHCPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2))
ethernetInterfaceDHCPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6Enabled.setDescription('The DHCPv6 enabled or disabled state for the ethernet interface. NOTE: If ethernetInterfaceIPv6StatelessAutoConfigEnabled is currently disabled, Disabling ethernetInterfaceDHCPv6Enabled will cause ethernetInterfaceIPv6AutoIPConfigEnabled to be disabled. NOTE: If ethernetInterfaceIPv6StaticIPConfigEnabled and ethernetInterfaceIPv6StatelessAutoConfigEnabled are currently disabled, Disabling ethernetInterfaceDHCPv6Enabled will not be allowed.')
ethernetInterfaceDHCPv6IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6IPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6IPAddress.setDescription("The IPv6 address for the ethernet interface, assigned by DHCPv6 server. NOTE: If ethernetInterfaceIPv6Enabled or ethernetInterfaceDHCPv6Enabled is disabled or if DHCPv6 server is not available, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceDHCPv6DomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6DomainName.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6DomainName.setDescription("The 64 byte Domain Name for the ethernet interface, assigned by the DHCPv6 server. NOTE: If ethernetInterfaceIPv6Enabled or ethernetInterfaceDHCPv6Enabled is disabled or if DHCPv6 server is not available, this object has the value '(Not available)'.")
ethernetInterfaceDHCPv6PrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6PrimaryDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6PrimaryDNSServer.setDescription("The primary DNS server, assigned by the DHCPv6 server. NOTE: If ethernetInterfaceIPv6Enabled or ethernetInterfaceDHCPv6Enabled is disabled or if DHCPv6 server is not available, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceDHCPv6SecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6SecondaryDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6SecondaryDNSServer.setDescription("The secondary DNS server, assigned by the DHCPv6 server. NOTE: If ethernetInterfaceIPv6Enabled or ethernetInterfaceDHCPv6Enabled is disabled or if DHCPv6 server is not available, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceDHCPv6TertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6TertiaryDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6TertiaryDNSServer.setDescription("The tertiary DNS server, assigned by the DHCPv6 server. NOTE: If ethernetInterfaceIPv6Enabled or ethernetInterfaceDHCPv6Enabled is disabled or if DHCPv6 server is not available, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceDHCPv6Server = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 8), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6Server.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6Server.setDescription("The DHCPv6 server IPv6 address used to acquire the DHCP settings. NOTE: If ethernetInterfaceIPv6Enabled or ethernetInterfaceDHCPv6Enabled is disabled or if DHCPv6 server is not available, this object has the value '0:0:0:0:0:0:0:0'.")
ethernetInterfaceIPv6StatelessAutoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3))
ethernetInterfaceIPv6StatelessAutoConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StatelessAutoConfigEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceIPv6StatelessAutoConfigEnabled.setDescription('The IPv6 stateless auto-configuration enabled or disabled state for the ethernet interface. NOTE: If EthernetfInterfaceDHCPv6Enabled is currently disabled, Disabling ethernetInterfaceIPv6StatelessAutoConfigEnabled will cause ethernetInterfaceIPv6AutoIPConfigEnabled to be disabled.')
ethernetInterfaceStatelessAutoConfigAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2), )
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesTable.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesTable.setDescription('Table of stateless Auto-Config addresses entries')
ethernetInterfaceStatelessAutoConfigAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1), ).setIndexNames((0, "IMM-MIB", "ethernetInterfaceStatelessAutoConfigAddressesIndex"))
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesEntry.setDescription('Stateless Auto-Config address entries')
ethernetInterfaceStatelessAutoConfigAddressesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesIndex.setDescription('Index for stateless Auto-Config addresses. NOTE: If ethernetInterfaceIPv6StatelessAutoConfigEnabled or ethernetInterfaceIPv6Enabled is currently disabled, this object will show nothing.')
ethernetInterfaceStatelessAutoConfigAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddresses.setDescription('The stateless Auto-Configuration IPv6 address. NOTE: If ethernetInterfaceIPv6StatelessAutoConfigEnabled or ethernetInterfaceIPv6Enabled is currently disabled, this object will show nothing.')
ethernetInterfaceStatelessAutoConfigAddressesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesPrefixLen.setDescription('The stateless Auto-Configration address prefix length. NOTE: If ethernetInterfaceIPv6StatelessAutoConfigEnabled or ethernetInterfaceIPv6Enabled is currently disabled, this object will show nothing.')
ddnsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ddnsStatus.setDescription('Dynamic DNS provides the capability for a networked device to notify a domain name server to change, in real time, the active DNS configuration of its configured hostnames, addresses or other information stored in DNS. With Dynamic DNS, host computers gain the capability to notify their respective DNS server of the IP address they have received from a DHCP server or through self-configuration.')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('Contains the DNS host name for this system. This object provides the exact same function as ethernetInterfaceHostName')
ddnsDomainToUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsDomainToUse.setStatus('mandatory')
if mibBuilder.loadTexts: ddnsDomainToUse.setDescription('The domain name to be used with Dynamic DNS. The value shall be either dhcp or manual')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription('The user assigned DNS domain name.')
tcpProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2))
snmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1))
snmpSystemName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: snmpSystemName.setDescription('A NULL terminated 48 byte string that contains the SNMP agent name.')
snmpSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemContact.setStatus('mandatory')
if mibBuilder.loadTexts: snmpSystemContact.setDescription('A NULL terminated 48 byte string that contains the SNMP agent contact name.')
snmpSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: snmpSystemLocation.setDescription('A NULL terminated 48 byte string that contains the SNMP agent location name.')
snmpSystemAgentTrapsDisable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("trapsEnabled", 0), ("trapsDisabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemAgentTrapsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpSystemAgentTrapsDisable.setDescription('Disable or enable SNMP traps.')
snmpAgentCommunityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5))
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityTable.setDescription('Table of SNMP Community entries')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "snmpCommunityEntryIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntry.setDescription('Community table entries')
snmpCommunityEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntryIndex.setDescription('Index for SNMP Agent Community entry.')
snmpCommunityEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntryCommunityName.setDescription('SNMP Community entry name. Note: Set snmpSystemAgentEnable to disabled before performing a set of this object.')
snmpCommunityEntryCommunityIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress1.setDescription('SNMP Community IP address or host name. Can either be a dotted decimal IP string(eg. 9.37.44.2) or host name. This field also allows two wildcard values for read-Traps and write-Read-Traps communities: 0.0.0.0 - allow any IPv4 address 0::0 - allow any IPv6 address')
snmpCommunityEntryCommunityIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress2.setDescription('SNMP Community IP address or host name. Can either be a dotted decimal IP string(eg. 9.37.44.2) or a host name. This field also allows two wildcard values for read-Traps and write-Read-Traps communities: 0.0.0.0 - allow any IPv4 address 0::0 - allow any IPv6 address')
snmpCommunityEntryCommunityIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress3.setDescription('SNMP Community IP address or host name. Can either be a dotted decimal IP string(eg. 9.37.44.2) or a host name. This field also allows two wildcard values for read-Traps and write-Read-Traps communities: 0.0.0.0 - allow any IPv4 address 0::0 - allow any IPv6 address')
snmpCommunityEntryCommunityViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-Traps", 1), ("write-Read-Traps", 2), ("traps-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityViewType.setStatus('mandatory')
if mibBuilder.loadTexts: snmpCommunityEntryCommunityViewType.setDescription('Access Level of the SNMPv1 managers. Note this parameter is set for each community. Therefore all three managers in the same community have the same access level.')
snmpv1SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv1SystemAgentEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv1SystemAgentEnable.setDescription('Disable or enable the SNMPv1 agent. Note: When this object has a value of enabled the fields listed below are checked. If this verification fails an error response is returned for the set of this object and the SNMP agent will be left in a disabled state. (1)Is there a valid system contact (2)Is there a valid system name (3)Is there at least one valid community name and for that community name is there one valid IP address or hostname ')
snmpv3SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SystemAgentEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpv3SystemAgentEnable.setDescription("Disable or enable the SNMPv3 agent. Note: To alter any of the configuration settings for the SNMP Agent the following procedure should be used: (1)This object should be written with 'disabled' (2)Make the modifications to other settings (3)This object should be written with 'enabled' (4)Restart the remote supervisor adapter Also note that when this object has a value of enabled that the following is verifed, if this verification fails a error response will be returned for the set of this object and the SNMP agent will be left in a disabled state. (1)Is there a valid system contact (2)Is there a valid system name (3)Is there at least one valid community name and for that community name is there one valid IP address or hostname ")
snmpAgentUserProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8))
snmpUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1), )
if mibBuilder.loadTexts: snmpUserProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileTable.setDescription('Table of SNMPv3 User Profile entries')
snmpUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1), ).setIndexNames((0, "IMM-MIB", "snmpUserProfileEntryIndex"))
if mibBuilder.loadTexts: snmpUserProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntry.setDescription('SNMP User Profile entries')
snmpUserProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserProfileEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntryIndex.setDescription('Index for SNMPv3 Agent User Profile entry.')
snmpUserProfileEntryAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryAuthProt.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntryAuthProt.setDescription('SNMPv3 User Profile entry - Authentication Protocol supported by the user.')
snmpUserProfileEntryPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("aes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivProt.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntryPrivProt.setDescription('SNMPv3 User Profile entry - Privacy Protocol supported by the user. The Privacy Password must be set and the Authentication Protocol must be md5 or sha before this field may be set to des or aes.')
snmpUserProfileEntryPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivPassword.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntryPrivPassword.setDescription('SNMPv3 User Profile entry - Privacy password for the user. NOTE: Value returned for the GET command is meaningless for this MIB object for security reason.')
snmpUserProfileEntryViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-Traps", 1), ("read-Write-Traps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryViewType.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntryViewType.setDescription('SNMPv3 User Profile entry - Access level (Get and Set) of the user. ')
snmpUserProfileEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snmpUserProfileEntryIpAddress.setDescription('SNMPv3 User Profile entry - IP address or host name. Can either be a dotted decimal IP string (e.g. 9.37.44.2) or if DNS is enabled a host name.')
dnsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2))
dnsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dnsDisabled", 0), ("dnsEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: dnsEnabled.setDescription('Disable or enable the DNS agent. Note that when this object has a value of enabled that the following is verifed, if this verification fails a error response will be returned for the set of this object and the DNS resolver will be left in a disabled state. (1)Is there at least one valid DNS server IP address ')
dnsServerIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServerIPAddress1.setDescription('Contains the primary DNS server IP address.')
dnsServerIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServerIPAddress2.setDescription('Contains the secondary DNS server IP address.')
dnsServerIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServerIPAddress3.setDescription('Contains the tertiary DNS server IP address.')
dnsServerIPv6Address1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 12), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address1.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServerIPv6Address1.setDescription('Contains the primary IPv6 DNS server address.')
dnsServerIPv6Address2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 13), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address2.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServerIPv6Address2.setDescription('Contains the secondary IPv6 DNS server address.')
dnsServerIPv6Address3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 14), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address3.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServerIPv6Address3.setDescription('Contains the tertiary IPv6 DNS server address.')
dnsPriority = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv6", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPriority.setStatus('mandatory')
if mibBuilder.loadTexts: dnsPriority.setDescription('Tells the order host names are resolved. The options are to either first resolve with an IPv6 DNS server or to first resolve with an IPv6 DNS server.')
smtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3))
smtpServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerNameOrIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerNameOrIPAddress.setDescription('A NULL terminated 64 byte string that contains the SMTP server Host name or IP address(a.b.c.d).')
smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerPort.setDescription('SMTP server port number.')
smtpServerAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerAuthentication.setDescription('Enable/disable SMTP-AUTH function. smtpServerAuthenticationUser and smtpServerAuthenticationPassword must be SET before smtpServerAuthentication is enabled or the enable will fail.')
smtpServerAuthenticationUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthenticationUser.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerAuthenticationUser.setDescription('SMTP authentication user name')
smtpServerAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthenticationPassword.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerAuthenticationPassword.setDescription('SMTP authentication password. On a read a NULL string will be returned for security reasons.')
smtpServerAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("plain", 0), ("cram-md5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthenticationMethod.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerAuthenticationMethod.setDescription('SMTP authentication method , support CRAM-MD5 and PLAIN only')
tcpApplicationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4))
telnetConnectionCounts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetConnectionCounts.setStatus('mandatory')
if mibBuilder.loadTexts: telnetConnectionCounts.setDescription('The number of telnet connections that can be active concurrently.')
slpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("multicast", 0), ("broadcast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: slpAddrType.setDescription('Set SLP address type to 0 (multicast) or 1 (broadcast). Note that when slpAddrType is set to broadast value then the multicast address set in in slpMulticastAddt will be ignored.')
slpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slpMulticastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slpMulticastAddr.setDescription('Service Locator Protocol Multicast address')
sshServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5))
sshServerHostKeySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4), ("bits4096", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerHostKeySize.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerHostKeySize.setDescription('The size of the public/private host key pair. NOTE: The IMM supports only the bits1048 value.')
sshServerHostKeyFingerprint = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerHostKeyFingerprint.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerHostKeyFingerprint.setDescription('The RSA fingerprint of the public part of the host key pair. This value can be used with the SSH client to verify, on the initial connection, that the Secure Shell server responding to the request is the server running on the IMM. Null Empty string if no RSA key exists.')
sshServerHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerHostKeyGenerate.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerHostKeyGenerate.setDescription('Initiate the new Host Keys generation process for the IMM SSH Server. NOTE: Value returned for the GET command is meaningless for this MIB object.')
sshServerHostKeyGenerateProgress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerHostKeyGenerateProgress.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerHostKeyGenerateProgress.setDescription('Indicate the progress of the key generation process.')
sshEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sshEnable.setDescription('Disable/Enable SSH.')
sslConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6))
sslHTTPSServerConfigForWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1))
sslEnableHTTPSforWeb = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnableHTTPSforWeb.setStatus('mandatory')
if mibBuilder.loadTexts: sslEnableHTTPSforWeb.setDescription('Disable/Enable HTTPS support for web. Use this field to enable or disable SSL for the web interface. The IMM must be restarted before the selected value (enable/ disable) takes effect. Note that in order to enable SSL, a valid SSL server certificate must first be in place. To use SSL, a client web browser must be configured to use SSL3 and/or TLS. Older export-grade browsers with only SSL2 support cannot be used.')
sslHTTPSServerWebCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerWebCertificateGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: sslHTTPSServerWebCertificateGeneration.setDescription('Initiate the new key and certificate generation process for the web HTTPS. The required fields in sslCertificateData must be set to valid contents. generateNewKeyandSelfSigned - Use this to generate a new encryption key pair and install a self-signed certificate. If a key and a certificate are present, they will be replaced. After the operation is complete, SSL may be enabled using the new key and certificate. generateNewKeyandCSR - Use this to generate a new encryption key and a certificate signing request (CSR). After the operation is complete, the CSR file may be downloaded and sent to a certificate authority (CA) for signing. NOTE: Value returned for the GET command is meaningless for this MIB object.')
sslHTTPSServerWebCertificateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importSignedCertificate", 1), ("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerWebCertificateTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: sslHTTPSServerWebCertificateTransfer.setDescription('sslConfigTftpServer and sslConfigFileName must contain valid values. importSignedCertificate - Use this to import a signed certificate. To obtain a signed certificate, a certificate signing request (CSR) must first be generated and sent to a certificate authority (CA). The imported certificate must contain a public key that corresponds to the key pair previously generated by the generateNewKeyandCSR. downloadCertificate - Use this link to download a copy of the currently installed c ertificate. The certificate will be in DER format. The contents of the certificate can be viewed using a third-party tool such as OpenSSL (www.openssl.org). An example of the command line for viewing the contents of the certificate using OpenSSL would look something like the following: openssl x509 -in cert.der -inform DER -text downloadCSR - The file produced when creating a CSR is in DER format. If your CA expects the data in some other format, such as PEM, the file can be converted using a third-party tool such as OpenSSL(www.openssl.org). If the CA asks you to copy the contents of the CSR file into a web browser window, PEM format is usually expected. An example of the command line for converting a CSR from DER to PEM format using OpenSSL would look something like the following: openssl req -in csr.der -inform DER -out csr.pem -outform PEM NOTE: Value returned for the GET command is meaningless for this MIB object.')
sslHTTPSWebCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHTTPSWebCertificateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sslHTTPSWebCertificateStatus.setDescription('Get the status of the installed Web certificates. 1 = Private Key and Cert/CSR not available. 2 = Private Key and Self-signed cert installed. 3 = Private Key and CA-signed cert installed. 4 = Private Key stored, CSR available for download. 5 = Private Key and Self-signed cert installed, Private Key stored, CSR available for download. 6 = Private Key and CA-signed cert installed, Private Key stored, CSR available for download. ')
sslHTTPSServerConfigForCIMXML = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2))
sslEnableHTTPSforCIMXML = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnableHTTPSforCIMXML.setStatus('mandatory')
if mibBuilder.loadTexts: sslEnableHTTPSforCIMXML.setDescription('Disable/Enable HTTPS support for web. Use this field to enable or disable SSL for the web interface. The IMM must be restarted before the selected value (enable/ disable) takes effect. Note that in order to enable SSL, a valid SSL server certificate must first be in place. ')
sslHTTPSServerCIMXMLCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerCIMXMLCertificateGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: sslHTTPSServerCIMXMLCertificateGeneration.setDescription('Initiate the new key and certificate generation process for CIMXML communication. The required fields in sslCertificateData must be set to valid contents. generateNewKeyandSelfSigned - Use this to generate a new encryption key pair and install a self-signed certificate. If a key and a certificate are present, they will be replaced. After the operation is complete, SSL may be enabled using the new key and certificate. generateNewKeyandCSR - Use this to generate a new encryption key and a certificate signing request (CSR). After the operation is complete, the CSR file may be downloaded and sent to a certificate authority (CA) for signing. NOTE: Value returned for the GET command is meaningless for this MIB object.')
sslHTTPSServerCIMXMLCertificateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importSignedCertificate", 1), ("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerCIMXMLCertificateTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: sslHTTPSServerCIMXMLCertificateTransfer.setDescription('sslConfigTftpServer and sslConfigFileName must contain valid values. importSignedCertificate - Use this to import a signed certificate. To obtain a signed certificate, a certificate signing request (CSR) must first be generated and sent to a certificate authority (CA). The imported certificate must contain a public key that corresponds to the key pair previously generated by the generateNewKeyandCSR. downloadCertificate - Use this link to download a copy of the currently installed c ertificate. The certificate will be in DER format. The contents of the certificate can be viewed using a third-party tool such as OpenSSL (www.openssl.org). An example of the command line for viewing the contents of the certificate using OpenSSL would look something like the following: openssl x509 -in cert.der -inform DER -text downloadCSR - The file produced when creating a CSR is in DER format. If your CA expects the data in some other format, such as PEM, the file can be converted using a third-party tool such as OpenSSL(www.openssl.org). If the CA asks you to copy the contents of the CSR file into a web browser window, PEM format is usually expected. An example of the command line for converting a CSR from DER to PEM format using OpenSSL would look something like the following: openssl req -in csr.der -inform DER -out csr.pem -outform PEM NOTE: Value returned for the GET command is meaningless for this MIB object.')
sslHTTPSCIMXMLCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHTTPSCIMXMLCertificateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sslHTTPSCIMXMLCertificateStatus.setDescription('Get the status of the installed CIM/XML certificates. 1 = Private Key and Cert/CSR not available. 2 = Private Key and Self-signed cert installed. 3 = Private Key and CA-signed cert installed. 4 = Private Key stored, CSR available for download. 5 = Private Key and Self-signed cert installed, Private Key stored, CSR available for download. 6 = Private Key and CA-signed cert installed, Private Key stored, CSR available for download. ')
sslClientConfigForLDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3))
sslEnableClientLDAP = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnableClientLDAP.setStatus('mandatory')
if mibBuilder.loadTexts: sslEnableClientLDAP.setDescription('Use this field to enable or disable SSL for the LDAP Client. The value selected takes effect immediately. Note that in order to enable SSL, a valid SSL certificate must first be in place and at least one SSL client trusted certificate must be imported. Your LDAP server must support SSL3 or TLS to be compatible with the SSL implementation used by the LDAP client.')
sslClientLDAPCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientLDAPCertificateGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPCertificateGeneration.setDescription('Initiate the new key and certificate generation process for the LDAP Client Certificates. The required fields in sslCertificateData must be set to valid contents. generateNewKeyandSelfSigned - Use this to generate a new encryption key pair and install a self-signed certificate. If a key and a certificate are present, they will be replaced. After the operation is complete, SSL may be enabled using the new key and certificate. generateNewKeyandCSR - Use this to generate a new encryption key and a certificate signing request (CSR). After the operation is complete, the CSR file may be downloaded and sent to a certificate authority (CA) for signing. NOTE: Value returned for the GET command is meaningless for this MIB object.')
sslClientLDAPCertificateDownload = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientLDAPCertificateDownload.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPCertificateDownload.setDescription('sslConfigTftpServer and sslConfigFileName must contain valid values. downloadCertificate - Use this link to download a copy of the currently installed c ertificate. The certificate will be in DER format. The contents of the certificate can be viewed using a third-party tool such as OpenSSL (www.openssl.org). An example of the command line for viewing the contents of the certificate using OpenSSL would look something like the following: openssl x509 -in cert.der -inform DER -text downloadCSR - The file produced when creating a CSR is in DER format. If your CA expects the data in some other format, such as PEM, the file can be converted using a third-party tool such as OpenSSL(www.openssl.org). If the CA asks you to copy the contents of the CSR file into a web browser window, PEM format is usually expected. An example of the command line for converting a CSR from DER to PEM format using OpenSSL would look something like the following: openssl req -in csr.der -inform DER -out csr.pem -outform PEM NOTE: Value returned for the GET command is meaningless for this MIB object.')
sslClientLDAPCertificateImport = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("importSignedCertificate1", 1), ("importTrustedCertificate1", 2), ("importTrustedCertificate2", 3), ("importTrustedCertificate3", 4), ("importTrustedCertificate4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientLDAPCertificateImport.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPCertificateImport.setDescription("sslConfigTftpServer and sslConfigFileName must contain valid values. importSignedCertificate - Use this to import a signed certificate. To obtain a signed certificate, a certificate signing request (CSR) must first be generated and sent to a certificate authority (CA). The imported certificate must contain a public key that corresponds to the key pair previously generated by the generateNewKeyandCSR. importTrustedCertificateX - Use these to import or remove trusted CA certificates. Trusted CA certificates are used by the SSL client to authenticate the SSL Server's (LDAP Server's) certificate. The SSL client must be disabled prior to importing or removing trusted certificates. NOTE: Value returned for the GET command is meaningless for this MIB object.")
sslClientLDAPCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPCertificateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPCertificateStatus.setDescription('Get the status of the installed SSL Client certificates. 1 = Private Key and Cert/CSR not available. 2 = Private Key and Self-signed cert installed. 3 = Private Key and CA-signed cert installed. 4 = Private Key stored, CSR available for download. 5 = Private Key and Self-signed cert installed, Private Key stored, CSR available for download. 6 = Private Key and CA-signed cert installed, Private Key stored, CSR available for download. ')
sslClientLDAPTrustedCertificate1Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate1Status.setDescription('Get the status of the installed SSL Client trusted certificates. 0 = certificate not installed 1 = certificate installed. ')
sslClientLDAPTrustedCertificate2Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate2Status.setDescription('Get the status of the installed SSL Client trusted certificates. 0 = certificate not installed 1 = certificate installed. ')
sslClientLDAPTrustedCertificate3Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate3Status.setDescription('Get the status of the installed SSL Client trusted certificates. 0 = certificate not installed 1 = certificate installed. ')
sslClientLDAPTrustedCertificate4Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate4Status.setDescription('Get the status of the installed SSL Client trusted certificates. 0 = certificate not installed 1 = certificate installed. ')
sslConfigTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslConfigTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: sslConfigTftpServer.setDescription('To download or import certificates, set the IP address or host name of the TFTP server where the file should be transferred to or from. The address must be entered in a dotted decimal IP string (e.g. 9.37.44.2), or equivalent for IPv6.')
sslConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sslConfigFileName.setDescription('File name on target system for the downloaded or imported certificate.')
sslCertificateData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6))
sslCertificateDataCountry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCountry.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataCountry.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the country where the IMM physically resides. This field must contain the 2 character country code.')
sslCertificateDataStateorProvince = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataStateorProvince.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataStateorProvince.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the state or province where the IMM physically resides. This field may contain a maximum of 30 characters. ')
sslCertificateDataCityOrLocality = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCityOrLocality.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataCityOrLocality.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the city or locality where the IMM physically resides. This field may contain a maximum of 50 characters.')
sslCertificateDataOrganizationName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataOrganizationName.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataOrganizationName.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the company or organization that owns the IMM. When this is used to generate a CSR, the issuing CA may verify that the organization requesting the certificate is legally entitled to claim ownership of the given company or organization name. This field may contain a maximum of 60 characters.')
sslCertificateDataIMMHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataIMMHostName.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataIMMHostName.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the IMM host name that currently appears in the browser URL address bar. This certificate attribute is generally referred to as the Common Name (CN). Special care must be taken to ensure that the value entered into the IMM host name field exactly matches the host name as it is known by the web browser when it access the IMM. The browser compares the host name in the resolved URL to the name that appears in the certificate. In order to prevent certificate warnings from the browser, the value used in this field must match the host name used by the browser to connect to the IMM. For instance, if the URL address bar in the browser currently were to appear as http://mm11.xyz.com/private/main.ssi, the value used for the IMM Host Name field should be mm11.xyz.com. If the URL were http://mm11/private/main.ssi, the value used should be mm11 . If the URL were http://192.168.70.2/private/main.ssi, the value used should be 192.168.70.2 . It is the users responsibility to ensure the correct value is entered and works. This field may contain a maximum of 60 characters. ')
sslCertificateDataContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataContact.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataContact.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field to indicate the name of a contact person responsible for the IMM. This field may contain a maximum of 60 characters. ')
sslCertificateDataEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataEmailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataEmailAddr.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field to indicate the email address of a contact person responsible for the IMM. This field may contain a maximum of 60 characters. ')
sslCertificateDataOrganizationUnit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataOrganizationUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataOrganizationUnit.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field to indicate the unit within the company or organization that owns the IMM. This field may contain a maximum of 60 characters.')
sslCertificateDataSurname = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataSurname.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataSurname.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as the surname of a person responsible for the IMM. This field may contain a maximum of 60 characters.')
sslCertificateDataGivenName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataGivenName.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataGivenName.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as the given name of a person responsible for the IMM. This field may contain a maximum of 60 characters.')
sslCertificateDataInitials = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataInitials.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataInitials.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as the initials of a person responsible for the IMM. This field may contain a maximum of 20 characters.')
sslCertificateDataDNQualifier = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataDNQualifier.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataDNQualifier.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as a Distinguished Name Qualifier for the IMM. This field may contain a maximum of 60 characters.')
sslCertificateDataCSRChallengePassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCSRChallengePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataCSRChallengePassword.setDescription('Optional field for generating a CSR. Use this field to assign a password to the CSR. This field may contain a maximum of 30 characters. ')
sslCertificateDataCSRUnstructuredName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCSRUnstructuredName.setStatus('mandatory')
if mibBuilder.loadTexts: sslCertificateDataCSRUnstructuredName.setDescription('Optional field for generating a CSR. Use this field for additional information, such as an unstructured name assigned to the IMM. This field may contain a maximum of 60 characters.')
certDomainNames = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8))
certDomainNameTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1), )
if mibBuilder.loadTexts: certDomainNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: certDomainNameTable.setDescription('This table contains certificate domain names and status.')
certDomainNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1), ).setIndexNames((0, "IMM-MIB", "certDomainNameIndex"))
if mibBuilder.loadTexts: certDomainNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: certDomainNameEntry.setDescription('Each row contains a certificate domain name and status.')
certDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDomainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: certDomainIndex.setDescription('The index number of one certificate domain name entry.')
certDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: certDomainName.setDescription('The Certificate Domain Name of one certificate domain name entry.')
certDomainNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDomainNameStatus.setStatus('mandatory')
if mibBuilder.loadTexts: certDomainNameStatus.setDescription('The status of the Certificate Domain Name entry.')
addCertDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCertDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: addCertDomainName.setDescription('Add one Certificate Domain Name to the certificate domain name table.')
rmCertDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmCertDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: rmCertDomainName.setDescription('Remove one Certificate Domain Name to the certificate domain name table.')
skrServers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9))
skrServerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1), )
if mibBuilder.loadTexts: skrServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: skrServerTable.setDescription('This table contains Storage Key Repository Server hostnames and ports.')
skrServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1), ).setIndexNames((0, "IMM-MIB", "skrServerIndex"))
if mibBuilder.loadTexts: skrServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: skrServerEntry.setDescription('Each row contains a Storage Key Repository Server hostname and port.')
skrServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skrServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: skrServerIndex.setDescription('The index number of one Storage Key Repository Server entry.')
skrServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrServerHostname.setStatus('mandatory')
if mibBuilder.loadTexts: skrServerHostname.setDescription('Storage Key Repository Server hostname or IP address.')
skrServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: skrServerPort.setDescription('Storage Key Repository Server port number.')
skrServerCertAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("importServerCertificate", 1), ("removeServerCertificate", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: skrServerCertAction.setStatus('mandatory')
if mibBuilder.loadTexts: skrServerCertAction.setDescription('importServerCertificate - Import Storage Key Repository Server certificate. For tftp mode, skrConfigFtpServer and skrConfigFileName must contain valid values. For sftp mode, skrConfigFTPCallUserID and skrConfigFtpCallPassword must also contain valid values. removeServerCertificate - Remove Storage Key Repository Server certificate.')
skrDeviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrDeviceGroup.setStatus('mandatory')
if mibBuilder.loadTexts: skrDeviceGroup.setDescription('An optional NULL terminated 16 character string that contains the Device Group that the server drives belong to.')
skrClientConfigCertficate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4))
skrClientCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrClientCertificateGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: skrClientCertificateGeneration.setDescription('Initiate the new key and certificate generation process for the key repository client. The required fields in skrCertificateData must be set to valid contents. generateNewKeyandSelfSigned - Use this to generate a new encryption key pair and install a self-signed certificate. If a key and a certificate are present, they will be replaced. After the operation is complete, SSL may be enabled using the new key and certificate. generateNewKeyandCSR - Use this to generate a new encryption key and a certificate signing request (CSR). After the operation is complete, the CSR file may be downloaded and sent to a certificate authority (CA) for signing. NOTE: Value returned for the GET command is meaningless for this MIB object.')
skrClientCertificateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importSignedCertificate", 1), ("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrClientCertificateTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: skrClientCertificateTransfer.setDescription('For tftp mode, skrConfigFtpServer and skrConfigFileName must contain valid values. For sftp mode, skrConfigFTPCallUserID and skrConfigFtpCallPassword must also contain valid values. importSignedCertificate - Use this to import a signed certificate. To obtain a signed certificate, a certificate signing request (CSR) must first be generated and sent to a certificate authority (CA). The imported certificate must contain a public key that corresponds to the key pair previously generated by the generateNewKeyandCSR. downloadCertificate - Use this link to download a copy of the currently installed certificate. The certificate will be in DER format. The contents of the certificate can be viewed using a third-party tool such as OpenSSL (www.openssl.org). An example of the command line for viewing the contents of the certificate using OpenSSL would look something like the following: openssl x509 -in cert.der -inform DER -text downloadCSR - The file produced when creating a CSR is in DER format. If your CA expects the data in some other format, such as PEM, the file can be converted using a third-party tool such as OpenSSL(www.openssl.org). If the CA asks you to copy the contents of the CSR file into a web browser window, PEM format is usually expected. An example of the command line for converting a CSR from DER to PEM format using OpenSSL would look something like the following: openssl req -in csr.der -inform DER -out csr.pem -outform PEM NOTE: Value returned for the GET command is meaningless for this MIB object.')
skrClientCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skrClientCertificateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: skrClientCertificateStatus.setDescription('Get the status of the installed Web certificates. 1 = Private Key and Cert/CSR not available. 2 = Private Key and Self-signed cert installed. 3 = Private Key and CA-signed cert installed. 4 = Private Key stored, CSR available for download. 5 = Private Key and Self-signed cert installed, Private Key stored, CSR available for download. 6 = Private Key and CA-signed cert installed, Private Key stored, CSR available for download. ')
skrCertificateData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5))
skrCertificateDataCountry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCountry.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataCountry.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the country where the IMM physically resides. This field must contain the 2 character country code.')
skrCertificateDataStateorProvince = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataStateorProvince.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataStateorProvince.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the state or province where the IMM physically resides. This field may contain a maximum of 30 characters. ')
skrCertificateDataCityOrLocality = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCityOrLocality.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataCityOrLocality.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the city or locality where the IMM physically resides. This field may contain a maximum of 50 characters.')
skrCertificateDataOrganizationName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataOrganizationName.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataOrganizationName.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the company or organization that owns the IMM. When this is used to generate a CSR, the issuing CA may verify that the organization requesting the certificate is legally entitled to claim ownership of the given company or organization name. This field may contain a maximum of 60 characters.')
skrCertificateDataIMMHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataIMMHostName.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataIMMHostName.setDescription('Required field for generating a CSR or self-signed certificate. Use this field to indicate the IMM host name that currently appears in the browser URL address bar. This certificate attribute is generally referred to as the Common Name (CN). Special care must be taken to ensure that the value entered into the IMM host name field exactly matches the host name as it is known by the web browser when it access the IMM. The browser compares the host name in the resolved URL to the name that appears in the certificate. In order to prevent certificate warnings from the browser, the value used in this field must match the host name used by the browser to connect to the IMM. For instance, if the URL address bar in the browser currently were to appear as http://mm11.xyz.com/private/main.ssi, the value used for the IMM Host Name field should be mm11.xyz.com. If the URL were http://mm11/private/main.ssi, the value used should be mm11 . If the URL were http://192.168.70.2/private/main.ssi, the value used should be 192.168.70.2 . It is the users responsibility to ensure the correct value is entered and works. This field may contain a maximum of 60 characters. ')
skrCertificateDataContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataContact.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataContact.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field to indicate the name of a contact person responsible for the IMM. This field may contain a maximum of 60 characters. ')
skrCertificateDataEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataEmailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataEmailAddr.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field to indicate the email address of a contact person responsible for the IMM. This field may contain a maximum of 60 characters. ')
skrCertificateDataOrganizationUnit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataOrganizationUnit.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataOrganizationUnit.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field to indicate the unit within the company or organization that owns the IMM. This field may contain a maximum of 60 characters.')
skrCertificateDataSurname = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataSurname.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataSurname.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as the surname of a person responsible for the IMM. This field may contain a maximum of 60 characters.')
skrCertificateDataGivenName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataGivenName.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataGivenName.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as the given name of a person responsible for the IMM. This field may contain a maximum of 60 characters.')
skrCertificateDataInitials = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataInitials.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataInitials.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as the initials of a person responsible for the IMM. This field may contain a maximum of 20 characters.')
skrCertificateDataDNQualifier = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataDNQualifier.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataDNQualifier.setDescription('Optional field for generating a CSR or self-signed certificate. Use this field for additional information, such as a Distinguished Name Qualifier for the IMM. This field may contain a maximum of 60 characters.')
skrCertificateDataCSRChallengePassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCSRChallengePassword.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataCSRChallengePassword.setDescription('Optional field for generating a CSR. Use this field to assign a password to the CSR. This field may contain a maximum of 30 characters. ')
skrCertificateDataCSRUnstructuredName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCSRUnstructuredName.setStatus('mandatory')
if mibBuilder.loadTexts: skrCertificateDataCSRUnstructuredName.setDescription('Optional field for generating a CSR. Use this field for additional information, such as an unstructured name assigned to the IMM. This field may contain a maximum of 60 characters.')
skrConfigFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpServer.setStatus('mandatory')
if mibBuilder.loadTexts: skrConfigFtpServer.setDescription('To import certificates, set the IP address or host name of the server where the file should be transferred from. The address must be entered in a dotted decimal IP string (e.g. 9.37.44.2), or equivalent for IPv6.')
skrConfigFtpServerMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("tftp", 1), ("sftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpServerMode.setStatus('mandatory')
if mibBuilder.loadTexts: skrConfigFtpServerMode.setDescription('This field specifies the FTP mode used.')
skrConfigFtpCallPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpCallPort.setStatus('mandatory')
if mibBuilder.loadTexts: skrConfigFtpCallPort.setDescription('This field specifies the port on remote TFTP/SFTP server for data transmission (default values are 69/22, respectively).')
skrConfigFTPCallUserID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFTPCallUserID.setStatus('mandatory')
if mibBuilder.loadTexts: skrConfigFTPCallUserID.setDescription('This field specifies the user account to login remote SFTP server.')
skrConfigFtpCallPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpCallPassword.setStatus('mandatory')
if mibBuilder.loadTexts: skrConfigFtpCallPassword.setDescription('This field specifies the password to login remote SFTP server.')
skrConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: skrConfigFileName.setDescription('File name on target system for the imported certificate.')
tcpPortAssignmentCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5))
tcpPortsRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tcpPortsRestoreDefault.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortsRestoreDefault.setDescription('Reset all the ports to the factory defaults. ')
httpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: httpPortAssignment.setDescription("HTTP port number. Default value is 80. Once changed, the url's have to include :port at the end. ")
httpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: httpsPortAssignment.setDescription("SSL port number. Default value is 443. Once changed, the url's have to include :port at the end.")
telnetLegacyCLIPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetLegacyCLIPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: telnetLegacyCLIPortAssignment.setDescription('telnet port number. Default value is 23.')
sshLegacyCLIPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshLegacyCLIPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: sshLegacyCLIPortAssignment.setDescription('SSH port number. Default value is 22.')
snmpAgentPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentPortAssignment.setDescription('SNMP Agent port number. Default value is 161.')
snmpTrapsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapsPortAssignment.setDescription('SNMP Traps port number. Default value is 162.')
remvidPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remvidPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: remvidPortAssignment.setDescription('Remote Console port number. Default value is 3900.')
ibmSystemDirectorHttpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSystemDirectorHttpPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSystemDirectorHttpPortAssignment.setDescription('IBM Systems Director Http port number.')
ibmSystemDirectorHttpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSystemDirectorHttpsPortAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSystemDirectorHttpsPortAssignment.setDescription('IBM Systems Director Https port number.')
ldapClientCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6))
ldapServer1NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1NameOrIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer1NameOrIPAddress.setDescription('A NULL terminated 64 byte string that contains the LDAP server host name or IP address (a.b.c.d).')
ldapServer1PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer1PortNumber.setDescription('LDAP server port number.')
ldapServer2NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2NameOrIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer2NameOrIPAddress.setDescription('A NULL terminated 64 byte string that contains the LDAP server host name or IP address (a.b.c.d).')
ldapServer2PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer2PortNumber.setDescription('LDAP server port number.')
ldapServer3NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3NameOrIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer3NameOrIPAddress.setDescription('A NULL terminated 64 byte string that contains the LDAP server host name or IP address (a.b.c.d).')
ldapServer3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer3PortNumber.setDescription('LDAP server port number.')
ldapServer4NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer4NameOrIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer4NameOrIPAddress.setDescription('A NULL terminated 64 byte string that contains the LDAP server host name or IP address (a.b.c.d).')
ldapServer4PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer4PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServer4PortNumber.setDescription('LDAP server port number.')
ldapRootDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRootDN.setStatus('mandatory')
if mibBuilder.loadTexts: ldapRootDN.setDescription('Distinguished Name for root entry of directory tree. An example might look like dn=foobar,dn=com.')
ldapUserSearchBaseDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUserSearchBaseDN.setStatus('deprecated')
if mibBuilder.loadTexts: ldapUserSearchBaseDN.setDescription('As part of the user authentication process, it is necessary to search the LDAP server for one or more attributes associated with a particular user. Any search request must specify the base DN for the actual search. This field specifies the base DN which should be used to search the User directory. An example might look like cn=users,dn=foobar,dn=com. If this field is left blank, the Root DN will be used as the search base instead. As mentioned, user searches are part of the authentication process. They are carried out to retrieve information about the user such as login permissions, callback number, and group memberships. For Version 2.0 LDAP clients, it is strongly encouraged that this parameter be configured, otherwise a search using the root DN may not succeed (as seen on Active Directory servers). NOTE: This Mib object is deprecated and no longer supported.')
ldapGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupFilter.setStatus('mandatory')
if mibBuilder.loadTexts: ldapGroupFilter.setDescription('This filter is used for group authentication. It specifies what group or groups that this MM belongs to. If left blank, group authentication is disabled. Otherwise, group authentication will be performed against the filter. The filter can be a specific group name (eg. IMMWest), a wildcard (*) which matches everything, or a wildcard with a prefix (eg. IMM*). The default filter is IMM*. After user authentication, group authentication will take place, whereby an attempt will be made to match the group or groups (that the user belongs to) to the group filter defined here. If there is no match, the user will not pass authentication and will be blocked. If there is a match, the login permissions for the user will be retrieved from the matched group(s), unless the user already has login permissions assigned directly from the user record retrieved from the LDAP server.')
ldapBindingMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("anonymousAuthentication", 0), ("clientAuthentication", 1), ("userPrincipalName", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBindingMethod.setStatus('mandatory')
if mibBuilder.loadTexts: ldapBindingMethod.setDescription("On initial binds to the LDAP server during user authentication, there are three options: Anonymous authentication: Bind attempt is made without a client DN or password. If the bind is successful, a search will be requested in order to find an entry on the LDAP server for the user attempting to login. If an entry is found, a second attempt to bind will be attempted, this time with the user's DN and password. If this succeeds, the user is deemed to have passed the user authentication phase. Group authentication is then attempted if it is enabled. Client authentication: Bind attempt is made with client DN and password specified by this configuration parameter. If the bind is successful, we proceed as above. User Principal Name (UPN): Bind attempt is made directly with the credentials used during the login process. If this succeeds, the user is deemed to have passed the user authentication phase. Note that for Active Directory servers, the userid can have the form someuser@somedomain or simply someuser.")
ldapClientAuthenticationDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationDN.setStatus('mandatory')
if mibBuilder.loadTexts: ldapClientAuthenticationDN.setDescription('The initial bind to the LDAP server during user authentication can be performed with anonymous authentication, client based authentication, or UPN. The client based option requires a client DN and password as parameters to the bind request. These parameters are configured here. Note that the password can be left blank.')
ldapClientAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ldapClientAuthenticationPassword.setDescription('The client authentication password')
ldapRoleBasedSecurityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRoleBasedSecurityEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ldapRoleBasedSecurityEnabled.setDescription('A value of true for RoleBasedSecurityEnabled indicates enhanced will be used by the service processor. A value of false for RoleBasedSecurityEnabled indicates the legacy bit mask based security is being used.')
ldapServerTargetName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServerTargetName.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServerTargetName.setDescription('When administrator chooses Enhanced Role Based Security authentication model, he can associate one IMM with one managed target object in Snap-in (one tool to configure LDAP users permission) via one target name. The IMM target name can be looked as alias of IMM, administrator can change it according to his configuration requirements. This is a string of up to 63 characters (plus the null character)')
ldapUIDsearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUIDsearchAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: ldapUIDsearchAttribute.setDescription("When the binding method selected is Anonymous authentication or Client authentication, the initial bind to the LDAP server is followed by a search request aimed at retrieving specific information about the user, including the user's DN, login permissions, and group ownerships. In order to retrieve this information, the search request must specify the attribute name used to represent userids on that server. Specifically, this name is used as a search filter against the login id entered by the user. This attribute name is configured here. If this field is left blank, a default of uid is used during user authentication. For example, on Active Directory servers, the attribute name used for userids is often sAMAccoutName. When the binding method selected is UPN or Strict UPN, this field defaults automatically to userPrincipalName during user authentication if the userid entered has the form userid@somedomain.")
ldapGroupSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupSearchAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: ldapGroupSearchAttribute.setDescription('When the MM Group Filter name is configured, it is necessary to retrieve from the LDAP server the list of groups that a particular user belongs to. This is required to do group authentication. In order to retrieve this list, the search filter sent to the server must specify the attribute name associated with groups. This field specifies this attribute name. If this field is left blank, the attribute name in the filter will default to memberOf.')
ldapLoginPermissionAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapLoginPermissionAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: ldapLoginPermissionAttribute.setDescription('When a user successfully authenticates via a LDAP server, it is necessary to retrieve the login permissions for this user. In order to retrieve these permissions, the search filter sent to the server must specify the attribute name associated with login permissions. This field specifies this attribute name.')
ldapUseDNSOrPreConfiguredServers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePreConfiguredLDAPServers", 0), ("useDNSToFindLDAPServers", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUseDNSOrPreConfiguredServers.setStatus('mandatory')
if mibBuilder.loadTexts: ldapUseDNSOrPreConfiguredServers.setDescription("The MM contains a Version 2.0 LDAP Client that may be configured to provide user authentication through one or more LDAP servers. The LDAP server(s) to be used for authentication can be discovered dynamically or manually pre-configured. If the usePreConfiguredLDAPServers option is selected, up to 3 LDAP servers can be configured. Simply enter the server's IP address or hostname (assuming DNS is enabled). The port number for each server is optional. If left blank, the default value of 389 is used for non-secured LDAP connections. For secured connections, the default is 636. At least one server must be configured. If the useDNSToFindLDAPServers is selected, the mechanisms described by RFC2782 (A DNS RR for specifying the location of services) are applied to find the server(s). This is known as DNS SRV.")
ldapDomainSource = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("extractSearchDomainFromLoginID", 0), ("useOnlyConfiguredSearchDomainBelow", 1), ("tryLoginFirstThenConfiguredValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapDomainSource.setStatus('mandatory')
if mibBuilder.loadTexts: ldapDomainSource.setDescription('The DNS SRV request sent to the DNS server must specify a domain name. The LDAP client will determine where to get this domain name based on one of the following three options: - extractSearchDomainFromLoginID: With this option, the LDAP client will use the domain name in the login id. For example, if the login id is joesmith@mycompany.com, the domain name equals mycompany.com. If the domain name cannot be extracted, the DNS SRV will fail, causing the user authentication to fail automatically. - useOnlyConfiguredSearchDomainBelow: With this option, the LDAP client will use the domain name configured in the Search Domain parameter. - tryLoginFirstThenConfiguredValue: With this option, the LDAP client will first attempt to extract the domain name from the login id. If this succeeds, this domain name will be used in the DNS SRV request. If there is no domain name present in the login id, the LDAP client will instead use the configured Search Domain parameter as the domain name in the DNS SRV request. If nothing is configured, user authentication will fail immediately.')
ldapForestName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapForestName.setStatus('mandatory')
if mibBuilder.loadTexts: ldapForestName.setDescription('In order to discover Global Catalogs (GC), the forest name must be configured in the ForestName property. The Global Catalogs are required for users who belong to universal groups in cross-domains. In environments where cross-domain group membership does not apply, this field can be left blank.')
ldapAuthCfg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authenticationAndAuthorization", 0), ("authenticationOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapAuthCfg.setStatus('mandatory')
if mibBuilder.loadTexts: ldapAuthCfg.setDescription('If ldapAuthCfg is set to 0, LDAP server is used to authenticate and authorize users. If it is set to 1, LDAP server is only used to authenticate users. Note:LDAP Authentication Only mode is currently supported only in an Active Directory environment.')
ldapSearchDomain = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapSearchDomain.setStatus('mandatory')
if mibBuilder.loadTexts: ldapSearchDomain.setDescription('This parameter may be used as the domain name in the DNS SRV request, depending on how the Domain Source parameter is configured.')
ldapServiceName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: ldapServiceName.setDescription("The DNS SRV request sent to the DNS server must also specify a service name. The configured value will be used for this purpose. If left blank, the default value used is 'ldap'. Note that the DNS SRV request must also specify a protocol name. This defaults to 'tcp' and is not configurable.")
ntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8))
ntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ntpEnable.setDescription('Disable/Enable the NTP client. The client will update the IMM system clock at the frequency specified.')
ntpIpAddressHostname1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname1.setStatus('mandatory')
if mibBuilder.loadTexts: ntpIpAddressHostname1.setDescription("First NTP server's IP address or hostname if DNS is enabled and configured.")
ntpIpAddressHostname2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname2.setStatus('mandatory')
if mibBuilder.loadTexts: ntpIpAddressHostname2.setDescription("Second NTP server's IP address or hostname if DNS is enabled and configured.")
ntpIpAddressHostname3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname3.setStatus('mandatory')
if mibBuilder.loadTexts: ntpIpAddressHostname3.setDescription("Third NTP server's IP address or hostname if DNS is enabled and configured.")
ntpIpAddressHostname4 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname4.setStatus('mandatory')
if mibBuilder.loadTexts: ntpIpAddressHostname4.setDescription("Fourth NTP server's IP address or hostname if DNS is enabled and configured.")
ntpUpdateFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpUpdateFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: ntpUpdateFrequency.setDescription('The frequency in minutes that the NTP service runs. The value range is 3 to 1440.')
ntpUpdateClock = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ntpUpdateClock.setStatus('mandatory')
if mibBuilder.loadTexts: ntpUpdateClock.setDescription('Update the IMM system clock with the specified NTP server. A valid NTP server must be configured first.')
configurationManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5))
configurationManagementTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: configurationManagementTftpServer.setDescription('To save or restore the system configuration, set the IP address or host name of the TFTP server where the file should be transferred to or from. The address must be entered in a dotted decimal IP string (e.g. 9.37.44.2), or equivalent for IPv6.')
configurationManagementFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementFileName.setStatus('mandatory')
if mibBuilder.loadTexts: configurationManagementFileName.setDescription('File name of the saved file or restore-from file.')
configurationManagementSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementSaveStart.setStatus('mandatory')
if mibBuilder.loadTexts: configurationManagementSaveStart.setDescription('Start saving the configuration file to the specified target file and system. Using execute will cause the SNMP client to wait for the save operation to complete. Using execute-nowait will not cause the SNMP client to wait for the save to complete. Instead it will save the configuration in the background. Note 1: Both configurationManagementTftpServer and configurationManagementileName must be set. Note 2: Depending on the target, it might take up to several seconds for the save operation to complete. Note 3: Use configurationManagementStatus to confirm the status of the last operaion. NOTE: Value returned for the GET command is meaningless for this MIB object.')
configurationManagementRestoreStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementRestoreStart.setStatus('mandatory')
if mibBuilder.loadTexts: configurationManagementRestoreStart.setDescription('Start restoring the configuration file from the specified target file and system. Using execute will cause the SNMP client to wait for the restore operation to complete. Using execute-nowait will not cause the SNMP client to wait for the restore to complete. Instead it will restore the configuration in the background. Note 1: Both configurationManagementTftpServer and configurationManagementileName must be set. Note 2: Depending on the target, it might take up to several seconds for the operation to complete. Note 3: Use configurationManagementStatus to confirm the status of the last operation. NOTE: Value returned for the GET command is meaningless for this MIB object.')
configurationManagementStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("success", 0), ("failed", 1), ("saving", 2), ("restoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationManagementStatus.setStatus('mandatory')
if mibBuilder.loadTexts: configurationManagementStatus.setDescription('Get the status of the last configurationManagement operation which was initiated through SNMP method.')
immVersionCheck = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("immVersion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVersionCheck.setStatus('mandatory')
if mibBuilder.loadTexts: immVersionCheck.setDescription('Get the IMM version type.')
serverTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 1))
oSHang = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 150, 180, 210, 240, 600))).clone(namedValues=NamedValues(("disabled", 0), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240), ("tenMinutes", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oSHang.setStatus('mandatory')
if mibBuilder.loadTexts: oSHang.setDescription('Number, in 1 second intervals, the IMM will check to insure the OS is operating properly. If the operating system fails to respond within 6 seconds to one of these checks, the remote supervisor adapter will generate an O/S Timeout alert(if enabled) and automatically restart the system one time. Once the system is restarted, the O/S Watchdog is automatically disabled until the operating system is shutdown and the server is power cycled.')
oSLoader = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 60, 120, 240))).clone(namedValues=NamedValues(("disabled", 0), ("oneHalfMinutes", 1), ("oneMinutes", 2), ("oneAndHalfMinutes", 3), ("twoMinutes", 4), ("twoAndHalfMinutes", 5), ("threeMinutes", 6), ("threeAndHalfMinutes", 7), ("fourMinutes", 8), ("fourAndHalfMinutes", 9), ("fiveMinutes", 10), ("sevenAndHalfMinutes", 15), ("tenMinutes", 20), ("fifteenMinutes", 30), ("twentyMinutes", 40), ("thirtyMinutes", 60), ("oneHour", 120), ("twoHours", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oSLoader.setStatus('mandatory')
if mibBuilder.loadTexts: oSLoader.setDescription('Number in 30 second intervals the remote IMM will wait between completion of POST and the end of loading the OS. If this interval is exceeded, the IMM will generate a Loader Timeout alert(if enabled) and automatically restart the system one time. Once the system is restarted, the Loader Timeout is automatically disabled until the operating system is shutdown and the server is power cycled.')
networkPXEboot = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("networkPXEBootDisabled", 0), ("networkPXEBootEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPXEboot.setStatus('mandatory')
if mibBuilder.loadTexts: networkPXEboot.setDescription("Modify the system's boot sequence for the next system restart in order to attempt a PXE/DHCP network boot. The system's boot sequence(set via the BIOS settings) will be altered only if the system is not under PAP (Privileged Access Protection).")
powerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1))
currentSysPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("poweredOff", 0), ("sleepS3", 1), ("poweredOn", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSysPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: currentSysPowerStatus.setDescription('Indicates if the system is currently powered on, off, or in sleep state.')
powerOnHours = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerOnHours.setStatus('mandatory')
if mibBuilder.loadTexts: powerOnHours.setDescription('Number of hours the system has been powered on.')
restartCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartCount.setStatus('mandatory')
if mibBuilder.loadTexts: restartCount.setDescription('Number of times the system has been restarted.')
systemState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("systemPowerOfforStateUnknown", 0), ("systemPowerOnorStartingUEFI", 1), ("systemInUEFI", 2), ("uEFIErrorDetected", 3), ("bootingOSorInUnsupportedOS", 4), ("oSBooted", 5), ("suspendToRAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemState.setStatus('mandatory')
if mibBuilder.loadTexts: systemState.setDescription('Shows the current operational state of the system.')
powerSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 2))
powerSysOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 120, 180, 240, 300, 450, 600, 900, 1200, 1800, 3600, 7200))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("twoMinutes", 120), ("threeMinutes", 180), ("fourMinutes", 240), ("fiveMinute", 300), ("sevenAndHalfMinutes", 450), ("tenMinutes", 600), ("fifteenMinutes", 900), ("twentyMinutes", 1200), ("thirtyMinutes", 1800), ("oneHour", 3600), ("twoHours", 7200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSysOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: powerSysOffDelay.setDescription('The number of 1 second interval the IMM will wait before powering off the system.')
powerSysOnClockSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSysOnClockSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerSysOnClockSetting.setDescription("The clock setting used to determine when the IMM will power on the system. The examples and the format follow: (1)For example to set the value so the system will power on March 4, 2001 at 06:00AM set the value to: '03/04/2001,06:00'. In order to insure correct operation, it is advisable for the user to read the date and time of the IMM clock before setting this value to a future time. (2)Setting the reset value will cause the power off timer to be reset and be deactivated. For example to reset the clock set the value to: '01/01/2000,00:00', field contents range _____ ________ _____ 1 month 01..12 (reset value - 01) 2 separator '/' 3 day 01..31 (reset value - 01) 4 separator '/' 5 year 2000..2037 (reset value - 2000) 6 separator ',' 7 hour 00..23 (reset value - 00) 8 separator ':' 9 minutes 00..59 (reset value - 00) ")
powerOffSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 3))
powerOffWithOsShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerOffWithOsShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: powerOffWithOsShutdown.setDescription('Power off the system after performing a OS shutdown.')
powerOffImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerOffImmediately.setStatus('mandatory')
if mibBuilder.loadTexts: powerOffImmediately.setDescription('Power off the system immediately.')
powerOnSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 4))
powerOnImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerOnImmediately.setStatus('mandatory')
if mibBuilder.loadTexts: powerOnImmediately.setDescription('Power on the system immediately.')
powerCyclingSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 5))
schedulePowerOffWithOsShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePowerOffWithOsShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: schedulePowerOffWithOsShutdown.setDescription("Power Off the system after performing a OS shutdown at specified time and day of the week. Example: Monday,09:00 field contents range _____ ________ _____ 1 day EveryDay,Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Never (reset value - Never) 2 separator ',' 3 hour 00..23 (reset value - 00) 4 separator ':' 5 minutes 00..59 (reset value - 00) day is case insensitive. It is invalid to set a non zero time with day as Never. To reset, set as Never,00:00.")
schedulePowerOnSystem = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePowerOnSystem.setStatus('mandatory')
if mibBuilder.loadTexts: schedulePowerOnSystem.setDescription("Power On the system at specified time and day of the week. Example: Monday,09:00 field contents range _____ ________ _____ 1 day EveryDay,Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Never (reset value - Never) 2 separator ',' 3 hour 00..23 (reset value - 00) 4 separator ':' 5 minutes 00..59 (reset value - 00) day is case insensitive. It is invalid to set a non zero time with day as Never. To reset, set as Never,00:00.")
powerControlSleep = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 6))
powerEnterSleep = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerEnterSleep.setStatus('mandatory')
if mibBuilder.loadTexts: powerEnterSleep.setDescription('Set system to enter power sleep state. The power sleep control actions will not work if the Sleep function is not enabled.')
powerExitSleep = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerExitSleep.setStatus('mandatory')
if mibBuilder.loadTexts: powerExitSleep.setDescription('Set system to exit power sleep state. The power sleep control actions will not work if the Sleep function is not enabled.')
shutdownOsThenRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: shutdownOsThenRestart.setStatus('mandatory')
if mibBuilder.loadTexts: shutdownOsThenRestart.setDescription('Shutdown the OS and then restart the system and boot the OS.')
restartSystemImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSystemImmediately.setStatus('mandatory')
if mibBuilder.loadTexts: restartSystemImmediately.setDescription('Restart the system immediately and then the boot OS.')
restartSPImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSPImmediately.setStatus('mandatory')
if mibBuilder.loadTexts: restartSPImmediately.setDescription('Restart the IMM immediately.')
resetSPConfigAndRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resetSPConfigAndRestart.setStatus('mandatory')
if mibBuilder.loadTexts: resetSPConfigAndRestart.setDescription("Will cause all the IMM information to be reset to it's initial factory defaults(all previous configuration information is lost) and the IMM will be re-started.")
scheduleShutdownOsThenRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleShutdownOsThenRestart.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleShutdownOsThenRestart.setDescription("Shutdown the OS and then restart the system and boot the OS at specified Time and Day of the week. Example: Monday,09:00 field contents range _____ ________ _____ 1 day EveryDay,Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Never (reset value - Never) 2 separator ',' 3 hour 00..23 (reset value - 00) 4 separator ':' 5 minutes 00..59 (reset value - 00) day is case insensitive. It is invalid to set a non zero time with day as Never. To reset, set as Never,00:00.")
resetPowerSchedules = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resetPowerSchedules.setStatus('mandatory')
if mibBuilder.loadTexts: resetPowerSchedules.setDescription('reset all power schedules. schedulePowerOnSystem,schedulePowerOffWithOsShutdown, scheduleShutdownOsThenRestart. This does not reset powerSysOnClockSetting')
firmwareUpdateTarget = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("immCard", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTarget.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateTarget.setDescription('Target module whose firmware will be updated.')
firmwareUpdateTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateTftpServer.setDescription('IP address of the TFTP server where the firmware file resides. The address must be entered in a dotted decimal IP string (eg. 9.37.44.2).')
firmwareUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateFileName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateFileName.setDescription('File name of the firmware file.')
firmwareUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: firmwareUpdateStart.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateStart.setDescription('Start updating the firmware of the specified IMM Card. Note 1: The firmware update might take up to several minutes to complete. Do not reset the IMM Card until the control has been returned. At this point, the results will be displayed. Note 2: Use firmwareUpdateStatus to confirm the status of the last firmware update initiated by SNMP method. The IMM Card must be restarted for the new firmware to take affect.')
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateStatus.setDescription('Get the status of the last firmware update which was initiated through SNMP method.')
autoCallHomeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 1))
acceptLicenseAgreement = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptLicenseAgreement.setStatus('mandatory')
if mibBuilder.loadTexts: acceptLicenseAgreement.setDescription("Accept Terms and Conditions of IMM Service Advisor. The user will have to accept the terms and conditions before Service Advisor can send diagnostic data to IBM support personnel. If IMM configuration is reset to defaults, the user will have to accept the terms and conditions again before they can enable Service Advisor. For more information, please refer to the IBM BladeCenter User's Guide. A GET of this object may return disabled(0) or enabled(1), depending upon the current state. However, only enabled(1) is accepted on a SET in order to accept the license agreement. A SET of disabled(0) will return noSuchValue and is not allowed.")
serviceAdvisorEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAdvisorEnable.setStatus('mandatory')
if mibBuilder.loadTexts: serviceAdvisorEnable.setDescription('Disable/Enable IBM Support. The User Agreement must be accepted and the contact information must be set before the IBM Support function of Service Advisor can be enabled.')
serviceSupportCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 2))
ibmSupportCenter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSupportCenter.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSupportCenter.setDescription('The country code for the IBM Support Center. 2 character ISO country code.')
contactInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3))
companyName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: companyName.setStatus('mandatory')
if mibBuilder.loadTexts: companyName.setDescription(' The organization/company name of the contact person. 1-30 characters.')
contactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactName.setStatus('mandatory')
if mibBuilder.loadTexts: contactName.setDescription('The name of the contact person.1-30 characters.')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: phoneNumber.setDescription('The phone of the contact person. 5-30 characters.')
emailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAddress.setStatus('mandatory')
if mibBuilder.loadTexts: emailAddress.setDescription("The email of the contact person. It must contain '@' and dot '.' in form userid@hostname (30 characters maximum). The userid can be alphanumeric characters, '.', '-', or '_' but must begin and end with alphanumeric characters. The hostname can be alphanumeric characters, '.', '-', or '_'. It must contain at least two domain items. Every domain item should begin and end with alphanumeric character, and the last domain item should be 2-20 alphabetic characters.")
address = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: address.setStatus('mandatory')
if mibBuilder.loadTexts: address.setDescription('The address of the machine location. The information in this field should be of sufficient detail to allow someone to quickly find the chassis when necessary. 1-30 characters.')
city = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: city.setStatus('mandatory')
if mibBuilder.loadTexts: city.setDescription('The city of the machine location. 1-30 characters.')
state = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: state.setStatus('mandatory')
if mibBuilder.loadTexts: state.setDescription('The state of the machine location. 2-3 characters.')
postalCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: postalCode.setStatus('mandatory')
if mibBuilder.loadTexts: postalCode.setDescription('The postal code of the location for this system. 1-9 characters, only alphanumeric characters are valid.')
phoneExtension = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneExtension.setStatus('mandatory')
if mibBuilder.loadTexts: phoneExtension.setDescription('The phone extension of the contact person. 30 characters maximum.')
altContactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altContactName.setStatus('mandatory')
if mibBuilder.loadTexts: altContactName.setDescription('The name of the alternate contact person. 1-30 characters.')
altPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: altPhoneNumber.setDescription('The phone of the alternate contact person. 5-30 characters.')
altPhoneExtension = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altPhoneExtension.setStatus('mandatory')
if mibBuilder.loadTexts: altPhoneExtension.setDescription('The phone extension of the alternate contact person. 30 characters maximum.')
altEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altEmailAddress.setStatus('mandatory')
if mibBuilder.loadTexts: altEmailAddress.setDescription("The email of the alternate contact person. It must contain '@' and dot '.' in form userid@hostname (30 characters maximum). The userid can be alphanumeric characters, '.', '-', or '_' but must begin and end with alphanumeric characters. The hostname can be alphanumeric characters, '.', '-', or '_'. It must contain at least two domain items. Every domain item should begin and end with alphanumeric character, and the last domain item should be 2-20 alphabetic characters.")
machineLocationPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: machineLocationPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: machineLocationPhoneNumber.setDescription('The phone of the physical location where the compuer system resides. 5-30 characters.')
httpProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4))
httpProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: httpProxyEnable.setDescription('Disable/Enable of the HTTP Proxy. Select Enable to use the proxy for call home connections from the IMM to IBM. HTTP Proxy is used by the IMM when it is not connected to the internet directly.')
httpProxyLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyLocation.setStatus('mandatory')
if mibBuilder.loadTexts: httpProxyLocation.setDescription('Fully qualified host name or IP address of the HTTP Proxy. Maximum of 63 characters.')
httpProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyPort.setStatus('mandatory')
if mibBuilder.loadTexts: httpProxyPort.setDescription('The port number of the HTTP Proxy. An integer value from 1 to 65535.')
httpProxyUserName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyUserName.setStatus('mandatory')
if mibBuilder.loadTexts: httpProxyUserName.setDescription('User Name of the HTTP Proxy. A maximum of 30 characters string without spaces.')
httpProxyPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyPassword.setStatus('mandatory')
if mibBuilder.loadTexts: httpProxyPassword.setDescription('Password of the HTTP Proxy. A maximum of 15 characters string without spaces.')
activityLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5))
activityLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1), )
if mibBuilder.loadTexts: activityLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: activityLogTable.setDescription(' Table of Service Advisor Activity Log entries information. This table displays events that were generated by the system or user that are called home. The entries are displayed in reverse chronological order (most recent call home entry first). For any events that happen with same Date/Time, only one event will be called home. If a call home event that is already in the activity log is triggered again on the same event source, it will not be called home again unless the prior entry has been acknowledged as corrected or, in the case of IMM1, 120 hours (5 days) have passed since it initially occurred and was called home.')
activityLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "activityLogIndex"))
if mibBuilder.loadTexts: activityLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: activityLogEntry.setDescription(' Activity Log table entry. Each entry has the result of the call-home attempt, the service number assigned for the issue by IBM support, the event ID, event source, date and time that event occured, and a text message. ')
activityLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: activityLogIndex.setDescription('The Activity Log index number. For consistent results, view as a table and not as individual entries.')
activityLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogString.setStatus('mandatory')
if mibBuilder.loadTexts: activityLogString.setDescription('A string of data detailing one Activity Log entry. The text message is from the original entry in the event log. For consistent results, view as a table and not as individual entries.')
activityLogAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activityLogAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: activityLogAcknowledge.setDescription('The acknowledgement of one Activity Log entry as corrected. This field allows the users to set a reminder next to certain events to indicate their awareness of the issue. Checking the acknowledge flag will not cause the event to be removed from the log or close the ticket at IBM support. This log is not cleared, so the acknowledge flag can be used to indicate a problem can be ignored. This field can be also used to override the 120 hour (5 day) filtering of reports via IBM Support or FTP/TFTP Server of Service Data. For consistent results, view as a table and not as individual entries.')
activityLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: activityLogAttribute.setDescription(" A string of data detailing one Activity Log entry's attribute. It contains states of both calling IBM support and FTP/TFTP Server. A PENDING indicates that the system is preparing for the event to be called home by collecting data about the systems state. A SUCCESS state indicates that the problem was successfully transmitted to IBM support or FTP/TFTP Server. A DISABLED state indicates that Service Advisor has disabled calling IBM Support or FTP/TFTP Server while the hardware event is detected. A NOT SENT state indicates that the serviceable event was not sent to prevent the same event from being sent repeatedly. The FAILED state indicates that the attempt to transmit the event information was not successful. Additional information may be found in the Event Log. The service number is similar to a ticket number that can be used as a reference to the issue reported by the machine when contacting IBM support. The event ID, event source, date and time are all information from the original entry in the event log. The acknowledged as corrected field is a reminder to certain events to indicate their awareness of the issue. For consistent results, view as a table and not as individual entries.")
autoFTPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6))
autoFTPCallMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ftp", 1), ("tftp", 2), ("sftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallMode.setStatus('mandatory')
if mibBuilder.loadTexts: autoFTPCallMode.setDescription('This field specifies the automated problem reporting mode. Automated problem reporting mode allows the IMM to automatically put service data to a specified server when a call home event is detected. For any call home events that happen with same Date/Time, only one event will be reported. The system will also wait for an interval of 120 hours (5 days) before another identical event can be sent for the same failed component.')
autoFTPCallAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallAddr.setStatus('mandatory')
if mibBuilder.loadTexts: autoFTPCallAddr.setDescription('This field specifies the remote server address of FTP and TFTP. It should be fully qualified hostname or IP address.')
autoFTPCallPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallPort.setStatus('mandatory')
if mibBuilder.loadTexts: autoFTPCallPort.setDescription('This field specifies the port on remote FTP/TFTP server for data transmission.')
autoFTPCallUserID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallUserID.setStatus('mandatory')
if mibBuilder.loadTexts: autoFTPCallUserID.setDescription('This field specifies the user account to login remote FTP server.')
autoFTPCallPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallPassword.setStatus('mandatory')
if mibBuilder.loadTexts: autoFTPCallPassword.setDescription('This field specifies the password to login remote FTP server.')
callHomeExclusionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7))
readCallHomeExclusionEventTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1), )
if mibBuilder.loadTexts: readCallHomeExclusionEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: readCallHomeExclusionEventTable.setDescription('Table of Call Home Exclusion Event entries information.')
readCallHomeExclusionEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1, 1), ).setIndexNames((0, "IMM-MIB", "readCallHomeExclusionEventIndex"))
if mibBuilder.loadTexts: readCallHomeExclusionEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: readCallHomeExclusionEventEntry.setDescription('Call Home Exclusion Event table entry')
readCallHomeExclusionEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCallHomeExclusionEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: readCallHomeExclusionEventIndex.setDescription('The index number of one Call Home Exclusion Event. For consistent results, view as a table and not as individual entries.')
readCallHomeExclusionEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCallHomeExclusionEventID.setStatus('mandatory')
if mibBuilder.loadTexts: readCallHomeExclusionEventID.setDescription('The Event ID of one Call Home Exclusion Event entry. For consistent results, view as a table and not as individual entries.')
addCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCallHomeExclusionEvent.setStatus('mandatory')
if mibBuilder.loadTexts: addCallHomeExclusionEvent.setDescription("Add one call home Event ID into the Call Home Exclusion List. The Event ID is an 16-digit hexadecimal number (0-F) with an optional prefix of '0x' or '0X'. The Event ID can be full specified with the 16 hexadecimal characters or can be specified with an asterisk ?*? wild card character in any of the right 8 most characters. The wild card capability allows for excluding a group of similar events. If Service Advisor Terms and Conditions are accepted, an event can be added into the exclusion list. NOTE: Value returned for the GET command is meaningless for this MIB object.")
rmCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmCallHomeExclusionEvent.setStatus('mandatory')
if mibBuilder.loadTexts: rmCallHomeExclusionEvent.setDescription("Remove one call home Event ID from the Call Home Exclusion List. The Event ID is an 16-digit hexadecimal number (0-F) with an optional prefix of '0x' or '0X'. The Event ID can be full specified with the 16 hexadecimal characters or can be specified with an asterisk ?*? wild card character in any of the right 8 most characters. The wild card capability allows for excluding a group of similar events. If Service Advisor Terms and Conditions are accepted, an event on the exclusion list can be removed. NOTE: Value returned for the GET command is meaningless for this MIB object.")
rmAllCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmAllCallHomeExclusionEvent.setStatus('mandatory')
if mibBuilder.loadTexts: rmAllCallHomeExclusionEvent.setDescription('Remove all Event IDs from the Call Home Exclusion List. If Service Advisor Terms and Conditions are accepted, events on the exclusion list can be removed. NOTE: Value returned for the GET command is meaningless for this MIB object.')
testCallHome = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 8))
generateTestCallHome = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: generateTestCallHome.setStatus('mandatory')
if mibBuilder.loadTexts: generateTestCallHome.setDescription('Generate a Test Call Home.')
scalableComplex = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1))
scalableComplexIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexIdentifier.setDescription('The unique numeric identifier for a complex.')
scalableComplexNumPartitions = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNumPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNumPartitions.setDescription('The number of partitions currently defined for this complex.')
scalableComplexNumNodes = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNumNodes.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNumNodes.setDescription('The number of nodes existing in this complex, regardless of their assignment to any given partition. For ITEs or blabde, the physical slot location of the nodes can be determined from the scalableComplexNodeTable.')
scalableComplexClear = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexClear.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexClear.setDescription('This clears all partition information related to the complex. Any nodes associated with the complex are no longer assigned to any partitions. All nodes in the complex must be powered off prior to attempting this operation, otherwise, the action will fail.')
scalableComplexPartition = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2))
scalableComplexPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1), )
if mibBuilder.loadTexts: scalableComplexPartitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionTable.setDescription('Table of scalable complex partition information.')
scalableComplexPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexPartitionIdentifier"))
if mibBuilder.loadTexts: scalableComplexPartitionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionEntry.setDescription('Scalable complex partition information.')
scalableComplexPartitionIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionIdentifier.setDescription('The unique numeric identifier for a partition defined within a complex installed in the chassis.')
scalableComplexPartitionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partition", 1), ("standalone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scalableComplexPartitionMode.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionMode.setDescription('The currently configured mode of this partition. It is recommended that a partition be powered off prior to modification of the mode. In addition, switching a partition mode to stand-alone will cause subsequent partition actions to be ignored until the partition mode is restored.')
scalableComplexPartitionPriNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionPriNodeKey.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionPriNodeKey.setDescription('The Node Key for the primary node in the partition. The Node Key is used to select partition for some actions that affect all nodes in the partition.')
scalableComplexPartitionNumNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionNumNodes.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionNumNodes.setDescription('The number of nodes currently defined for this partition.')
scalableComplexPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poweredoff", 1), ("poweredon", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionStatus.setDescription('The current power status of this partition when the partition has a valid partition configuration. However, in the event the partition reports a partition consitency check problem, the invalid state is provided.')
scalableComplexPartitionSelect = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexPartitionSelect.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionSelect.setDescription('This Node Key of Primary node of the partition is used to select the partition for which a specific action will be taken')
scalableComplexPartitionAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("poweron", 2), ("poweroff", 3), ("powercycle", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexPartitionAction.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionAction.setDescription('This object allows various actions to be taken in relation to a particular partition in a given complex. delete(1) - Deletes the partition from the complex. All nodes in the partition must be powered off prior to attempting this operation, otherwise, the action will fail. poweron(2) - Powers up a powered off partition poweroff(3) - Powers off an already powered on partition powercycle(4) - Power cycles a partition')
scalableComplexPartitionCreate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3))
scalableComplexPartitionCreateTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1), )
if mibBuilder.loadTexts: scalableComplexPartitionCreateTable.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionCreateTable.setDescription('Table used to identify the nodes to be used in create of a partition. The nodes are identified by Node key. The first node listed will be the primary node.')
scalableComplexPartitionCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexPartitionCreateIndex"))
if mibBuilder.loadTexts: scalableComplexPartitionCreateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionCreateEntry.setDescription('Node information for partition creation.')
scalableComplexPartitionCreateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionCreateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionCreateIndex.setDescription('The table index.')
scalableComplexPartitionCreateNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scalableComplexPartitionCreateNodeKey.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionCreateNodeKey.setDescription('The Node Key for a node included in the partition to be created. The first Node Key in the table is used will be the primary node in the partition to be created.')
scalableComplexPartitionActionCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("clear", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexPartitionActionCreate.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexPartitionActionCreate.setDescription('This object is used to request creation of a new partition, using the nodes listed in the scalableComplexPartitionCreateTable. None of the systems can be part of another valid partition, and there cannot be duplicate Node Keys specified. Partition changes will fail if any of the systems specified in the change are powered on. If the partition is successfully created, the scalableComplexPartitionCreateTable entries will be cleared.')
scalableComplexNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4))
scalableComplexNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1), )
if mibBuilder.loadTexts: scalableComplexNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeTable.setDescription('Table of scalable complex node information. This table provides information and control actions related to the nodes installed in the chassis. Complex, partition and port information and control are defined in their own tables.')
scalableComplexNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexNodeIndex"))
if mibBuilder.loadTexts: scalableComplexNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeEntry.setDescription('Scalable complex node information.')
scalableComplexNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeIndex.setDescription('The node table index.')
scalableComplexNodeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeSerialNumber.setDescription('The machine serial number of the node which identifies the node. Note that uniqueness is not guaranteed.')
scalableComplexNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeKey.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeKey.setDescription('The Node Key for the node. The Node Key is used to select the node for some particular action.')
scalableComplexNodePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePartitionID.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePartitionID.setDescription('For an assigned node, the identifier of the partition this node is related to. For an unassigned node, this object has no meaning.')
scalableComplexNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("unassigned", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeRole.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeRole.setDescription('Indicates if the node is assigned to a partition, and if so, provides an indication of whether the node is the primary node of the partition or not.')
scalableComplexNodeNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeNumPorts.setDescription('The number of remote nodes that this node has links to.')
scalableComplexNodeSelect = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexNodeSelect.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeSelect.setDescription('This Node Key is used to select the node for which a specific action will be taken')
scalableComplexNodeAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("poweroff", 1), ("poweron", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexNodeAction.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeAction.setDescription('The actions that can be applied to an unassigned node. The current state is provided by the scalableComplexNodeState object.')
scalableComplexNodeAutoCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexNodeAutoCreate.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodeAutoCreate.setDescription('This object is used to create a partition from all of the nodes in the complex. None of the systems can be in a partition and all the systems in the complex must be powered off.')
scalableComplexNodePort = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5))
scalableComplexNodePortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1), )
if mibBuilder.loadTexts: scalableComplexNodePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortTable.setDescription('Table of scalable complex node port information which provides details related to the port connectivity. Complex, partition and node information and control are defined in their own tables.')
scalableComplexNodePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexNodePortIndex"), (0, "IMM-MIB", "scalableComplexNodePortNum"))
if mibBuilder.loadTexts: scalableComplexNodePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortEntry.setDescription('Scalable complex node port information.')
scalableComplexNodePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortIndex.setDescription('The Node Port table index.')
scalableComplexNodePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortNum.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortNum.setDescription('The port number of a port on this node. Note that this port number is 0-based, but since it is used as the table index (0 is not allowed), it will be presented as one more than the actual port number.')
scalableComplexNodePortRemNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortRemNodeKey.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortRemNodeKey.setDescription('The Node Key for the remote node.')
scalableComplexNodePortRemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortRemNum.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortRemNum.setDescription('The zero-based port number of the remote port.')
scalableComplexNodePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortStatus.setDescription('The current status of the port.')
scalableComplexNodePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("qpi", 1), ("exa", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortType.setStatus('mandatory')
if mibBuilder.loadTexts: scalableComplexNodePortType.setDescription('The port type.')
mibBuilder.exportSymbols("IMM-MIB", ethernetInterfaceIPv6LocalAddress=ethernetInterfaceIPv6LocalAddress, ethernetInterfaceIPv6AutoIPConfig=ethernetInterfaceIPv6AutoIPConfig, machineLocationPhoneNumber=machineLocationPhoneNumber, serviceSupportCenter=serviceSupportCenter, restartSystemImmediately=restartSystemImmediately, dhcpIPAddress=dhcpIPAddress, skrConfigFtpCallPort=skrConfigFtpCallPort, serialRedirect=serialRedirect, ethernetInterfaceIPv6StatelessAutoConfigEnabled=ethernetInterfaceIPv6StatelessAutoConfigEnabled, spRoomID=spRoomID, sslCertificateDataStateorProvince=sslCertificateDataStateorProvince, ethernetInterfaceIPv6Config=ethernetInterfaceIPv6Config, remoteAlertRetryCount=remoteAlertRetryCount, powerTrendingSampleTimeStamp=powerTrendingSampleTimeStamp, informationLED=informationLED, dnsServerIPv6Address1=dnsServerIPv6Address1, systemComponentLevelVpdTrackingTable=systemComponentLevelVpdTrackingTable, powerTrendingSampleEntry=powerTrendingSampleEntry, smtpServerNameOrIPAddress=smtpServerNameOrIPAddress, safSpTrapAppS=safSpTrapAppS, scalableComplexNodePortTable=scalableComplexNodePortTable, snmpTrapsPortAssignment=snmpTrapsPortAssignment, rafSpTrapFanN=rafSpTrapFanN, dhcpGatewayIPAddress=dhcpGatewayIPAddress, activityLogTable=activityLogTable, eventLogSaveStatus=eventLogSaveStatus, rafSpTrapPowerC=rafSpTrapPowerC, ntpIpAddressHostname2=ntpIpAddressHostname2, serviceAdvisor=serviceAdvisor, scalableComplexNodeIndex=scalableComplexNodeIndex, smtpConfig=smtpConfig, scalableComplexNodeNumPorts=scalableComplexNodeNumPorts, ethernetInterfaceBIA=ethernetInterfaceBIA, scalableComplexPartitionCreate=scalableComplexPartitionCreate, dhcpPrimaryDNSServer=dhcpPrimaryDNSServer, powerPolicyName=powerPolicyName, powerFRUNumber=powerFRUNumber, powerFRUSerialNumber=powerFRUSerialNumber, remoteAccessUserAuthorityLevelTable=remoteAccessUserAuthorityLevelTable, firmwareUpdateFileName=firmwareUpdateFileName, autoCallHomeSetup=autoCallHomeSetup, sslCertificateDataCountry=sslCertificateDataCountry, addCertDomainName=addCertDomainName, skrServerEntry=skrServerEntry, powerTrendingSampleTable=powerTrendingSampleTable, groupRBSServerPowerRestartAccess=groupRBSServerPowerRestartAccess, groupId=groupId, scalableComplexNodeAutoCreate=scalableComplexNodeAutoCreate, rafSpTrapHardwareN=rafSpTrapHardwareN, remoteAccessTamperDelay=remoteAccessTamperDelay, remoteAlertIdEntryAttachmentsToEmailAlerts=remoteAlertIdEntryAttachmentsToEmailAlerts, scalableComplexNodeKey=scalableComplexNodeKey, portParity=portParity, fanNonCritLimitHigh=fanNonCritLimitHigh, tempReading=tempReading, safSpTrapPFAS=safSpTrapPFAS, configurationManagementTftpServer=configurationManagementTftpServer, configureSP=configureSP, ledIdentifier=ledIdentifier, safSpTrapHardwareN=safSpTrapHardwareN, eventLogTable=eventLogTable, remoteAlertIdEntryType=remoteAlertIdEntryType, tcpApplicationConfig=tcpApplicationConfig, fanDescr=fanDescr, snmpCommunityEntryCommunityViewType=snmpCommunityEntryCommunityViewType, powerPolicyActivate=powerPolicyActivate, currentlyLoggedInEntryUserId=currentlyLoggedInEntryUserId, ethernetInterfaceHostName=ethernetInterfaceHostName, monitors=monitors, ldapDomainSource=ldapDomainSource, sslClientLDAPCertificateStatus=sslClientLDAPCertificateStatus, machineLevelUUID=machineLevelUUID, groupIdsEntry=groupIdsEntry, rafSpTrapRdpsN=rafSpTrapRdpsN, spTxtId=spTxtId, skrCertificateDataContact=skrCertificateDataContact, EntryStatus=EntryStatus, ledColor=ledColor, ldapServiceName=ldapServiceName, ethernetInterfaceDHCPv6Server=ethernetInterfaceDHCPv6Server, fans=fans, safSpTrapSysLogS=safSpTrapSysLogS, skrCertificateDataCountry=skrCertificateDataCountry, powerTable=powerTable, configurationManagementStatus=configurationManagementStatus, fanCritLimitHigh=fanCritLimitHigh, phoneNumber=phoneNumber, sslClientLDAPCertificateImport=sslClientLDAPCertificateImport, systemState=systemState, groupRole=groupRole, sshClientAuthPubKeyUnused=sshClientAuthPubKeyUnused, sslHTTPSServerConfigForCIMXML=sslHTTPSServerConfigForCIMXML, eventLogClr=eventLogClr, ualAdapterBasicConfig=ualAdapterBasicConfig, systemHealthSummarySeverity=systemHealthSummarySeverity, eventLogSaveStart=eventLogSaveStart, scalableComplexNodePortStatus=scalableComplexNodePortStatus, remoteAlertIdEntrySystemAlert=remoteAlertIdEntrySystemAlert, scalableComplexNodePortRemNum=scalableComplexNodePortRemNum, systemHealthSummaryIndex=systemHealthSummaryIndex, slpMulticastAddr=slpMulticastAddr, safSpTrapLdrToS=safSpTrapLdrToS, eventLogDate=eventLogDate, powerPolicyInformation=powerPolicyInformation, systemHealthSummaryDescription=systemHealthSummaryDescription, ethernetInterfaceAutoNegotiate=ethernetInterfaceAutoNegotiate, ldapClientCfg=ldapClientCfg, ethernetInterfaceDuplexSetting=ethernetInterfaceDuplexSetting, sshClientAuthPubKeyComment=sshClientAuthPubKeyComment, voltNonCritLimitHigh=voltNonCritLimitHigh, ibmSystemDirectorHttpPortAssignment=ibmSystemDirectorHttpPortAssignment, dnsServerIPAddress1=dnsServerIPAddress1, spClockDateAndTimeSetting=spClockDateAndTimeSetting, allLEDsEntry=allLEDsEntry, tempDescr=tempDescr, ethernetInterfaceIPv6StaticIPConfig=ethernetInterfaceIPv6StaticIPConfig, sslCertificateDataCSRChallengePassword=sslCertificateDataCSRChallengePassword, sslCertificateDataIMMHostName=sslCertificateDataIMMHostName, sslCertificateDataEmailAddr=sslCertificateDataEmailAddr, powerFruName=powerFruName, safSpTrapBootS=safSpTrapBootS, ethernetInterfaceIPv6StaticIPAddress=ethernetInterfaceIPv6StaticIPAddress, firmwareUpdateTarget=firmwareUpdateTarget, skrCertificateDataStateorProvince=skrCertificateDataStateorProvince, ualServerPowerAccess=ualServerPowerAccess, sslCertificateDataDNQualifier=sslCertificateDataDNQualifier, ldapLoginPermissionAttribute=ldapLoginPermissionAttribute, sshServerHostKeyGenerateProgress=sshServerHostKeyGenerateProgress, remoteAccessIdsTable=remoteAccessIdsTable, certDomainName=certDomainName, groupRBSroleId=groupRBSroleId, componentLevelVpdManufacturingId=componentLevelVpdManufacturingId, voltEntry=voltEntry, componentLevelVpdTrackingIndex=componentLevelVpdTrackingIndex, scalableComplexPartitionCreateEntry=scalableComplexPartitionCreateEntry, fuelGaugePowerConsumptionMemory=fuelGaugePowerConsumptionMemory, diskHealthStatus=diskHealthStatus, activityLogString=activityLogString, fuelGaugeStaticPowerPcapMode=fuelGaugeStaticPowerPcapMode, rafSpTrapPFAS=rafSpTrapPFAS, ldapForestName=ldapForestName, remoteAlertIds=remoteAlertIds, InetAddressIPv6=InetAddressIPv6, diskEntry=diskEntry, sslClientConfigForLDAP=sslClientConfigForLDAP, immVpdReleaseDate=immVpdReleaseDate, ldapUIDsearchAttribute=ldapUIDsearchAttribute, altPhoneExtension=altPhoneExtension, scalableComplexIdentifier=scalableComplexIdentifier, tempNonCritLimitHigh=tempNonCritLimitHigh, ethernetInterfaceDHCPv6SecondaryDNSServer=ethernetInterfaceDHCPv6SecondaryDNSServer, ethernetInterfaceDHCPv6Enabled=ethernetInterfaceDHCPv6Enabled, ldapSearchDomain=ldapSearchDomain, safSpTrapVoltN=safSpTrapVoltN, rafSpTrapOsToS=rafSpTrapOsToS, skrCertificateDataDNQualifier=skrCertificateDataDNQualifier, httpProxyEnable=httpProxyEnable, snmpCommunityEntryCommunityName=snmpCommunityEntryCommunityName, safSpTrapRLogin=safSpTrapRLogin, sshClientAuthPubKeyFingerprint=sshClientAuthPubKeyFingerprint, ualAccountManagement=ualAccountManagement, rafIndex=rafIndex, remoteAccessIdEntryUserPwdLeftDays=remoteAccessIdEntryUserPwdLeftDays, tempNonRecovLimitHigh=tempNonRecovLimitHigh, snmpv3SystemAgentEnable=snmpv3SystemAgentEnable, sshServerConfig=sshServerConfig, complexPasswordRulesEnforced=complexPasswordRulesEnforced, testCallHome=testCallHome, skrServerCertAction=skrServerCertAction, cpuVpdIndex=cpuVpdIndex, skrConfigFtpCallPassword=skrConfigFtpCallPassword, rmCallHomeExclusionEvent=rmCallHomeExclusionEvent, powerEnterSleep=powerEnterSleep, certDomainNameTable=certDomainNameTable, scalableComplexPartitionCreateTable=scalableComplexPartitionCreateTable, safSpTrapPowerN=safSpTrapPowerN, remoteAccessIdEntryUserId=remoteAccessIdEntryUserId, sshClientAuthPubKeyTftpServer=sshClientAuthPubKeyTftpServer, powerPolicyEntry=powerPolicyEntry, safSpTrapNwChangeS=safSpTrapNwChangeS, osFailureCaptureFileName=osFailureCaptureFileName, snmpSystemAgentTrapsDisable=snmpSystemAgentTrapsDisable, readCallHomeExclusionEventTable=readCallHomeExclusionEventTable, powerTrendingPeriod=powerTrendingPeriod, snmpSystemLocation=snmpSystemLocation, cpuVpdType=cpuVpdType, systemCPUVpdTable=systemCPUVpdTable, skrCertificateDataCSRUnstructuredName=skrCertificateDataCSRUnstructuredName, eventLogSeverity=eventLogSeverity, spClockTimezoneSetting=spClockTimezoneSetting, rafSpTrapIhcC=rafSpTrapIhcC, skrCertificateDataCSRChallengePassword=skrCertificateDataCSRChallengePassword, readCallHomeExclusionEventID=readCallHomeExclusionEventID, systemMemoryVpdTable=systemMemoryVpdTable, powerPolicyEstimatedUtilization=powerPolicyEstimatedUtilization, sslHTTPSServerConfigForWeb=sslHTTPSServerConfigForWeb, sslHTTPSServerCIMXMLCertificateTransfer=sslHTTPSServerCIMXMLCertificateTransfer, activityLogAttribute=activityLogAttribute, groupRBSNetworkSecurity=groupRBSNetworkSecurity, activityLogAcknowledge=activityLogAcknowledge, sslClientLDAPTrustedCertificate2Status=sslClientLDAPTrustedCertificate2Status, resetPowerSchedules=resetPowerSchedules, configurationManagementSaveStart=configurationManagementSaveStart, readCallHomeExclusionEventIndex=readCallHomeExclusionEventIndex, scalableComplexPartitionNumNodes=scalableComplexPartitionNumNodes, networkConfiguration=networkConfiguration, webInactivityTimeout=webInactivityTimeout, tempNonRecovLimitLow=tempNonRecovLimitLow, shutdownOsThenRestart=shutdownOsThenRestart, remoteAlertIdEmailAddr=remoteAlertIdEmailAddr, snmpUserProfileEntryIpAddress=snmpUserProfileEntryIpAddress, skrServerTable=skrServerTable, contactName=contactName, scalableComplexPartitionStatus=scalableComplexPartitionStatus, fanNonCritLimitLow=fanNonCritLimitLow, ddnsDomainToUse=ddnsDomainToUse, sshServerHostKeySize=sshServerHostKeySize, ibmAgents=ibmAgents, eventLogString=eventLogString, ethernetInterfaceIPAddress=ethernetInterfaceIPAddress, groupRBSClearEventLog=groupRBSClearEventLog, rmCertDomainName=rmCertDomainName, resetSPConfigAndRestart=resetSPConfigAndRestart, sslClientLDAPCertificateDownload=sslClientLDAPCertificateDownload, hostMACAddress=hostMACAddress, sslCertificateDataCSRUnstructuredName=sslCertificateDataCSRUnstructuredName, voltTable=voltTable, remoteAlertIdEntryName=remoteAlertIdEntryName, eventLogTftpServer=eventLogTftpServer, dnsServerIPv6Address3=dnsServerIPv6Address3, rafSpTrapAppS=rafSpTrapAppS, sshClientAuthPubKeyFileName=sshClientAuthPubKeyFileName, scalableComplexPartitionSelect=scalableComplexPartitionSelect, snmpCommunityEntryCommunityIpAddress1=snmpCommunityEntryCommunityIpAddress1, addCallHomeExclusionEvent=addCallHomeExclusionEvent, scalableComplexNodePortType=scalableComplexNodePortType, firmwareUpdateStatus=firmwareUpdateStatus, accountLockoutPeriod=accountLockoutPeriod, fuelGaugeSystemMaxPower=fuelGaugeSystemMaxPower, ethernetInterfaceStatelessAutoConfigAddressesEntry=ethernetInterfaceStatelessAutoConfigAddressesEntry, immVpdEntry=immVpdEntry, fuelGaugeTotalPowerInUse=fuelGaugeTotalPowerInUse, rafSpTrapTempC=rafSpTrapTempC, snmpSystemContact=snmpSystemContact, dhcpEthernetInterface=dhcpEthernetInterface, scalableComplexPartitionCreateIndex=scalableComplexPartitionCreateIndex, componentLevelVpdFruName=componentLevelVpdFruName, voltReading=voltReading, skrCertificateDataOrganizationName=skrCertificateDataOrganizationName, sshClientAuthPubKeyAction=sshClientAuthPubKeyAction, voltNonRecovLimitLow=voltNonRecovLimitLow, groupRBSroleTable=groupRBSroleTable, sslClientLDAPTrustedCertificate1Status=sslClientLDAPTrustedCertificate1Status, systemComponentLevelVpdTrackingEntry=systemComponentLevelVpdTrackingEntry)
mibBuilder.exportSymbols("IMM-MIB", ldapServer3NameOrIPAddress=ldapServer3NameOrIPAddress, sslCertificateDataCityOrLocality=sslCertificateDataCityOrLocality, currentSysPowerStatus=currentSysPowerStatus, cpuVpdIdentifier=cpuVpdIdentifier, remoteAlertIdsTable=remoteAlertIdsTable, memoryVpdDescription=memoryVpdDescription, remoteAlertIdEntryCriticalAlert=remoteAlertIdEntryCriticalAlert, memoryVpdSize=memoryVpdSize, powerPartNumber=powerPartNumber, sshClientAuthPubKeyFileFormat=sshClientAuthPubKeyFileFormat, skrServers=skrServers, rafSpTrapPowerN=rafSpTrapPowerN, ethernetInterfaceIPv6Enabled=ethernetInterfaceIPv6Enabled, ethernetInterface=ethernetInterface, memoryVpdPartNumber=memoryVpdPartNumber, fanTable=fanTable, groupRBSOperator=groupRBSOperator, currentlyLoggedInEntryAccMethod=currentlyLoggedInEntryAccMethod, groupRBSRemoteConsoleAccess=groupRBSRemoteConsoleAccess, ethernetInterfaceIPv6=ethernetInterfaceIPv6, hostName=hostName, ethernetInterfaceGatewayIPAddress=ethernetInterfaceGatewayIPAddress, httpPortAssignment=httpPortAssignment, powerHealthStatus=powerHealthStatus, configurationManagementRestoreStart=configurationManagementRestoreStart, skrConfigFTPCallUserID=skrConfigFTPCallUserID, portStopBits=portStopBits, powerExitSleep=powerExitSleep, powerOffImmediately=powerOffImmediately, ualSupervisor=ualSupervisor, snmpCriticalAlerts=snmpCriticalAlerts, eventLog=eventLog, rafSpTrapCPUC=rafSpTrapCPUC, ldapRootDN=ldapRootDN, altEmailAddress=altEmailAddress, systemHealth=systemHealth, voltNumber=voltNumber, tempNominalReading=tempNominalReading, fuelGaugePowerConsumptionCpu=fuelGaugePowerConsumptionCpu, remoteAlertIdEntryWarningAlert=remoteAlertIdEntryWarningAlert, snmpAgentCommunityConfig=snmpAgentCommunityConfig, tempTable=tempTable, systemHealthStat=systemHealthStat, skrClientCertificateTransfer=skrClientCertificateTransfer, sslEnableHTTPSforCIMXML=sslEnableHTTPSforCIMXML, safSpTrapTempN=safSpTrapTempN, sslConfigFileName=sslConfigFileName, rafSpTrapHdC=rafSpTrapHdC, componentLevelVpdSerialNumber=componentLevelVpdSerialNumber, fanNonRecovLimitHigh=fanNonRecovLimitHigh, immVpdTable=immVpdTable, autoFTPCallPassword=autoFTPCallPassword, powerTrendingSampleIndex=powerTrendingSampleIndex, identityLED=identityLED, rafSpTrapMemoryC=rafSpTrapMemoryC, snmpv1SystemAgentEnable=snmpv1SystemAgentEnable, ethernetInterfaceDHCPv6PrimaryDNSServer=ethernetInterfaceDHCPv6PrimaryDNSServer, scalableComplex=scalableComplex, voltNonCritLimitLow=voltNonCritLimitLow, ntpIpAddressHostname3=ntpIpAddressHostname3, machineVpd=machineVpd, skrCertificateDataInitials=skrCertificateDataInitials, hostMACAddressTable=hostMACAddressTable, rmAllCallHomeExclusionEvent=rmAllCallHomeExclusionEvent, ldapServer3PortNumber=ldapServer3PortNumber, callHomeExclusionEvents=callHomeExclusionEvents, ualReadOnly=ualReadOnly, machineLevelSerialNumber=machineLevelSerialNumber, emailAddress=emailAddress, hostMACAddressIndex=hostMACAddressIndex, ethernetInterfaceDHCPv6Config=ethernetInterfaceDHCPv6Config, safSpTrapHdC=safSpTrapHdC, skrConfigFtpServer=skrConfigFtpServer, sslHTTPSWebCertificateStatus=sslHTTPSWebCertificateStatus, voltage=voltage, tcpProtocols=tcpProtocols, snmpCommunityEntry=snmpCommunityEntry, rafSpTrapHardwareC=rafSpTrapHardwareC, ethernetInterfaceDataRate=ethernetInterfaceDataRate, safSpTrapFanC=safSpTrapFanC, generalRemoteCfg=generalRemoteCfg, osFailureCapture=osFailureCapture, httpsPortAssignment=httpsPortAssignment, autoFTPCallAddr=autoFTPCallAddr, tcpPortAssignmentCfg=tcpPortAssignmentCfg, diskFruName=diskFruName, fanIndex=fanIndex, scalableComplexPartitionTable=scalableComplexPartitionTable, ethernetInterfaceIPv6StaticIPDefaultRoute=ethernetInterfaceIPv6StaticIPDefaultRoute, ethernetInterfaceStatelessAutoConfigAddressesIndex=ethernetInterfaceStatelessAutoConfigAddressesIndex, state=state, ldapUserSearchBaseDN=ldapUserSearchBaseDN, immVersionCheck=immVersionCheck, cpuVpdCores=cpuVpdCores, powerCyclingSchedule=powerCyclingSchedule, systemHealthSummaryEntry=systemHealthSummaryEntry, ldapServer2NameOrIPAddress=ldapServer2NameOrIPAddress, ntpConfig=ntpConfig, powerStatistics=powerStatistics, ualId=ualId, skrCertificateData=skrCertificateData, ethernetInterfaceStatelessAutoConfigAddressesTable=ethernetInterfaceStatelessAutoConfigAddressesTable, ldapUseDNSOrPreConfiguredServers=ldapUseDNSOrPreConfiguredServers, immVpdVersionString=immVpdVersionString, vpdInformation=vpdInformation, groupRBSroleEntry=groupRBSroleEntry, scalableComplexNodePortEntry=scalableComplexNodePortEntry, altContactName=altContactName, scaling=scaling, currentlyLoggedInTable=currentlyLoggedInTable, safSpTrapMemoryN=safSpTrapMemoryN, oSLoader=oSLoader, ethernetInterfaceDHCPv6TertiaryDNSServer=ethernetInterfaceDHCPv6TertiaryDNSServer, ldapServer2PortNumber=ldapServer2PortNumber, scalableComplexNodePortNum=scalableComplexNodePortNum, passwordChangeInterval=passwordChangeInterval, dnsServerIPAddress3=dnsServerIPAddress3, sslCertificateDataSurname=sslCertificateDataSurname, ldapServer4PortNumber=ldapServer4PortNumber, voltIndex=voltIndex, ethernetInterfaceIPv6StaticIPConfigEnabled=ethernetInterfaceIPv6StaticIPConfigEnabled, autoFTPSetup=autoFTPSetup, currentlyLoggedInEntryIndex=currentlyLoggedInEntryIndex, ualAdapterNetworkAndSecurityConfig=ualAdapterNetworkAndSecurityConfig, altPhoneNumber=altPhoneNumber, groupRBSAdvancedAdapterConfiguration=groupRBSAdvancedAdapterConfiguration, ldapServer1NameOrIPAddress=ldapServer1NameOrIPAddress, systemComponentLevelVpdTable=systemComponentLevelVpdTable, safSpTrapIhcC=safSpTrapIhcC, scheduleShutdownOsThenRestart=scheduleShutdownOsThenRestart, safSpTrapPowerS=safSpTrapPowerS, temperature=temperature, rafSpTrapMemoryN=rafSpTrapMemoryN, ethernetInterfaceDHCPv6IPAddress=ethernetInterfaceDHCPv6IPAddress, skrCertificateDataSurname=skrCertificateDataSurname, scalableComplexNodeRole=scalableComplexNodeRole, fanNonRecovLimitLow=fanNonRecovLimitLow, errorLogs=errorLogs, osFailureCaptureTftpServer=osFailureCaptureTftpServer, firmwareUpdateStart=firmwareUpdateStart, rafSpTrapRLogin=rafSpTrapRLogin, ibmSupportCenter=ibmSupportCenter, sslHTTPSServerWebCertificateTransfer=sslHTTPSServerWebCertificateTransfer, safSpTrapFanN=safSpTrapFanN, minimumPasswordLength=minimumPasswordLength, autoFTPCallMode=autoFTPCallMode, ledLabel=ledLabel, snmpCommunityEntryCommunityIpAddress3=snmpCommunityEntryCommunityIpAddress3, rafSpTrapRdpsC=rafSpTrapRdpsC, scalableComplexNodePort=scalableComplexNodePort, safSpTrapRdpsN=safSpTrapRdpsN, voltCritLimitHigh=voltCritLimitHigh, rafSpTrapFanC=rafSpTrapFanC, scalableComplexPartitionIdentifier=scalableComplexPartitionIdentifier, componentLevelVpdTrackingSerialNumber=componentLevelVpdTrackingSerialNumber, dhcpTertiaryDNSServer=dhcpTertiaryDNSServer, scalableComplexNodeEntry=scalableComplexNodeEntry, cpuVpdDescription=cpuVpdDescription, eventLogEntry=eventLogEntry, snmpAgentPortAssignment=snmpAgentPortAssignment, ntpIpAddressHostname1=ntpIpAddressHostname1, autoFTPCallPort=autoFTPCallPort, immVpdType=immVpdType, scalableComplexNodeTable=scalableComplexNodeTable, networkPXEboot=networkPXEboot, dhcpHostName=dhcpHostName, ldapClientAuthenticationPassword=ldapClientAuthenticationPassword, voltCritLimitLow=voltCritLimitLow, rafSpTrapVoltC=rafSpTrapVoltC, powerPolicyMaxPowerLimit=powerPolicyMaxPowerLimit, groupProfiles=groupProfiles, skrConfigFtpServerMode=skrConfigFtpServerMode, ldapGroupFilter=ldapGroupFilter, certDomainNameEntry=certDomainNameEntry, rafSpTrapTempN=rafSpTrapTempN, sslClientLDAPTrustedCertificate4Status=sslClientLDAPTrustedCertificate4Status, tempCritLimitHigh=tempCritLimitHigh, spRackBladeBay=spRackBladeBay, certDomainNameStatus=certDomainNameStatus, fuelGaugeStaticPowerPcapSoftMin=fuelGaugeStaticPowerPcapSoftMin, snmpAgentConfig=snmpAgentConfig, ethernetInterfaceDHCPv6DomainName=ethernetInterfaceDHCPv6DomainName, safSpTrapHardwareC=safSpTrapHardwareC, powerTrendingSampleMin=powerTrendingSampleMin, activityLogIndex=activityLogIndex, scalableComplexNumPartitions=scalableComplexNumPartitions, safSpTrapMemoryC=safSpTrapMemoryC, groupRBSBasicAdapterConfiguration=groupRBSBasicAdapterConfiguration, passwordExpirationPeriod=passwordExpirationPeriod, snmpUserProfileTable=snmpUserProfileTable, dhcpSubnetMask=dhcpSubnetMask, safSpTrapTempC=safSpTrapTempC, remvidPortAssignment=remvidPortAssignment, powerSysOnClockSetting=powerSysOnClockSetting, tempIndex=tempIndex, componentLevelVpdIndex=componentLevelVpdIndex, snmpSystemAlerts=snmpSystemAlerts, groupRBSroleIndex=groupRBSroleIndex, componentLevelVpdFruNumber=componentLevelVpdFruNumber, groupRBSUserAccountManagement=groupRBSUserAccountManagement, fuelGaugeTotalThermalOutput=fuelGaugeTotalThermalOutput, portCLImode=portCLImode, ualConsoleAndVirtualMediaAccess=ualConsoleAndVirtualMediaAccess, acceptLicenseAgreement=acceptLicenseAgreement, powerOnHours=powerOnHours, remoteAccessConfig=remoteAccessConfig, spIdentification=spIdentification, safSpTrapRdpsC=safSpTrapRdpsC, fuelGaugeStaticPowerPcapCurrentSetting=fuelGaugeStaticPowerPcapCurrentSetting, sshServerHostKeyFingerprint=sshServerHostKeyFingerprint, powerModule=powerModule, currentlyLoggedInEntry=currentlyLoggedInEntry, fuelGaugeStaticPowerPcapMax=fuelGaugeStaticPowerPcapMax, ledState=ledState, powerNumber=powerNumber, networkInterfaces=networkInterfaces, memoryVpdFRUSerialNumber=memoryVpdFRUSerialNumber, fuelGauge=fuelGauge, ethernetInterfaceMTU=ethernetInterfaceMTU, powerSysOffDelay=powerSysOffDelay, immUsers=immUsers, scalableComplexNodePortIndex=scalableComplexNodePortIndex, generalSystemSettings=generalSystemSettings, httpProxyConfig=httpProxyConfig, remoteAccessIdEntryPassword=remoteAccessIdEntryPassword, readCallHomeExclusionEventEntry=readCallHomeExclusionEventEntry, changePasswordFirstAccess=changePasswordFirstAccess, smtpServerAuthenticationUser=smtpServerAuthenticationUser, memoryVpdIndex=memoryVpdIndex, tempCritLimitLow=tempCritLimitLow, powerPolicyIndex=powerPolicyIndex, powerPolicyPwrSupplyFailureLimit=powerPolicyPwrSupplyFailureLimit, snmpAgentUserProfileConfig=snmpAgentUserProfileConfig, scalableComplexPartitionPriNodeKey=scalableComplexPartitionPriNodeKey, safSpTrapCPUN=safSpTrapCPUN, dnsConfig=dnsConfig, autoFTPCallUserID=autoFTPCallUserID, scalableComplexNodeSerialNumber=scalableComplexNodeSerialNumber, sslCertificateDataOrganizationUnit=sslCertificateDataOrganizationUnit, users=users, groupIndex=groupIndex, smtpServerAuthenticationMethod=smtpServerAuthenticationMethod, remoteAlertRetryDelay=remoteAlertRetryDelay, fanSpeed=fanSpeed, componentLevelVpdTrackingFruNumber=componentLevelVpdTrackingFruNumber, powerOffWithOsShutdown=powerOffWithOsShutdown, ldapServerTargetName=ldapServerTargetName, companyName=companyName, activityLogEntry=activityLogEntry, phoneExtension=phoneExtension, ibmIntegratedManagementModuleMIB=ibmIntegratedManagementModuleMIB, ethernetInterfaceLAA=ethernetInterfaceLAA, oSHang=oSHang, tempNonCritLimitLow=tempNonCritLimitLow)
mibBuilder.exportSymbols("IMM-MIB", tempEntry=tempEntry, smtpServerAuthentication=smtpServerAuthentication, scalableComplexNumNodes=scalableComplexNumNodes, immVpdIndex=immVpdIndex, ethernetInterfaceType=ethernetInterfaceType, dnsServerIPAddress2=dnsServerIPAddress2, minimumPasswordReuseCycle=minimumPasswordReuseCycle, machineLevelProductName=machineLevelProductName, memoryVpdManufactureDate=memoryVpdManufactureDate, httpProxyUserName=httpProxyUserName, scalableComplexNodePortRemNodeKey=scalableComplexNodePortRemNodeKey, systemPower=systemPower, fuelGaugePowerRemaining=fuelGaugePowerRemaining, scalableComplexPartitionAction=scalableComplexPartitionAction, ldapRoleBasedSecurityEnabled=ldapRoleBasedSecurityEnabled, sslConfigTftpServer=sslConfigTftpServer, powerEntry=powerEntry, sshClientAuth=sshClientAuth, fuelGaugeInformation=fuelGaugeInformation, powerOnImmediately=powerOnImmediately, componentLevelVpdTrackingTimestamp=componentLevelVpdTrackingTimestamp, smtpServerAuthenticationPassword=smtpServerAuthenticationPassword, generateTestCallHome=generateTestCallHome, powerPolicyTable=powerPolicyTable, sslHTTPSCIMXMLCertificateStatus=sslHTTPSCIMXMLCertificateStatus, voltNonRecovLimitHigh=voltNonRecovLimitHigh, systemMemoryVpdEntry=systemMemoryVpdEntry, ethernetInterfaceDhcpEnabled=ethernetInterfaceDhcpEnabled, cpuVpdFamily=cpuVpdFamily, skrClientCertificateStatus=skrClientCertificateStatus, memoryVpdType=memoryVpdType, remoteAlertFiltersEntry=remoteAlertFiltersEntry, powerIndex=powerIndex, remoteAlertIdsEntry=remoteAlertIdsEntry, skrConfigFileName=skrConfigFileName, snmpWarningAlerts=snmpWarningAlerts, disks=disks, powerPowerTrending=powerPowerTrending, sshClientAuthPubKeyIndex=sshClientAuthPubKeyIndex, fuelGaugePowerConsumptionOther=fuelGaugePowerConsumptionOther, snmpUserProfileEntryIndex=snmpUserProfileEntryIndex, address=address, skrServerPort=skrServerPort, voltDescr=voltDescr, osFailureCaptureSaveStatus=osFailureCaptureSaveStatus, spRackUnitPosition=spRackUnitPosition, ddnsStatus=ddnsStatus, allLEDsTable=allLEDsTable, skrCertificateDataOrganizationUnit=skrCertificateDataOrganizationUnit, ibmSystemDirectorHttpsPortAssignment=ibmSystemDirectorHttpsPortAssignment, hostMACAddressDescription=hostMACAddressDescription, rafSpTrapNwChangeS=rafSpTrapNwChangeS, configurationManagementFileName=configurationManagementFileName, dnsPriority=dnsPriority, serviceAdvisorEnable=serviceAdvisorEnable, loginPasswordRequired=loginPasswordRequired, sslHTTPSServerCIMXMLCertificateGeneration=sslHTTPSServerCIMXMLCertificateGeneration, remoteAccessUserAuthorityLevelEntry=remoteAccessUserAuthorityLevelEntry, tempHealthStatus=tempHealthStatus, snmpUserProfileEntryViewType=snmpUserProfileEntryViewType, spRackUnitHeight=spRackUnitHeight, fanHealthStatus=fanHealthStatus, schedulePowerOnSystem=schedulePowerOnSystem, tempNumber=tempNumber, smtpServerPort=smtpServerPort, snmpUserProfileEntryPrivPassword=snmpUserProfileEntryPrivPassword, scalableComplexPartitionMode=scalableComplexPartitionMode, ethernetInterfaceIPv6StatelessAutoConfig=ethernetInterfaceIPv6StatelessAutoConfig, maxLoginFailures=maxLoginFailures, spClock=spClock, httpProxyPort=httpProxyPort, certDomainIndex=certDomainIndex, schedulePowerOffWithOsShutdown=schedulePowerOffWithOsShutdown, ntpIpAddressHostname4=ntpIpAddressHostname4, ntpUpdateClock=ntpUpdateClock, sslCertificateData=sslCertificateData, powerTrendingSampleAve=powerTrendingSampleAve, rafSpTrapSysLogS=rafSpTrapSysLogS, sshClientAuthRemoteAccessIdIndex=sshClientAuthRemoteAccessIdIndex, safSpTrapVoltC=safSpTrapVoltC, ldapClientAuthenticationDN=ldapClientAuthenticationDN, dnsServerIPv6Address2=dnsServerIPv6Address2, skrDeviceGroup=skrDeviceGroup, cpuVpdDataWidth=cpuVpdDataWidth, ethernetInterfaceStatelessAutoConfigAddressesPrefixLen=ethernetInterfaceStatelessAutoConfigAddressesPrefixLen, remoteAccessIds=remoteAccessIds, ethernetInterfaceSubnetMask=ethernetInterfaceSubnetMask, cpuVpdSpeed=cpuVpdSpeed, snmpUserProfileEntryPrivProt=snmpUserProfileEntryPrivProt, systemCPUVpdEntry=systemCPUVpdEntry, ibm=ibm, remoteAlertIdEntryStatus=remoteAlertIdEntryStatus, snmpCommunityTable=snmpCommunityTable, firmwareUpdateTftpServer=firmwareUpdateTftpServer, sshClientAuthPubKeySize=sshClientAuthPubKeySize, skrClientCertificateGeneration=skrClientCertificateGeneration, scalableComplexPartition=scalableComplexPartition, sslCertificateDataInitials=sslCertificateDataInitials, machineLevelVpd=machineLevelVpd, machineLevelVpdMachineModel=machineLevelVpdMachineModel, rafSpTrapLdrToS=rafSpTrapLdrToS, rafSpTrapPowerS=rafSpTrapPowerS, ldapAuthCfg=ldapAuthCfg, sshEnable=sshEnable, ledIndex=ledIndex, ldapBindingMethod=ldapBindingMethod, powerControlSleep=powerControlSleep, contactInformation=contactInformation, scalableComplexNode=scalableComplexNode, cpuVpdHealthStatus=cpuVpdHealthStatus, systemComponentLevelVpdEntry=systemComponentLevelVpdEntry, fuelGaugeTotalPowerAvaialble=fuelGaugeTotalPowerAvaialble, postalCode=postalCode, scalableComplexPartitionCreateNodeKey=scalableComplexPartitionCreateNodeKey, remoteAccessIdEntryIndex=remoteAccessIdEntryIndex, restartCount=restartCount, skrCertificateDataEmailAddr=skrCertificateDataEmailAddr, remoteAlertEntryDelay=remoteAlertEntryDelay, remoteAccessIdsEntry=remoteAccessIdsEntry, fanEntry=fanEntry, skrServerHostname=skrServerHostname, skrServerIndex=skrServerIndex, skrCertificateDataIMMHostName=skrCertificateDataIMMHostName, hostMACAddressEntry=hostMACAddressEntry, voltHealthStatus=voltHealthStatus, ethernetInterfaceStatelessAutoConfigAddresses=ethernetInterfaceStatelessAutoConfigAddresses, slpAddrType=slpAddrType, safSpTrapPowerC=safSpTrapPowerC, remoteAlertIdEntrySyslogHostname=remoteAlertIdEntrySyslogHostname, ethernetInterfaceEnabled=ethernetInterfaceEnabled, enterCLIkeySeq=enterCLIkeySeq, userAuthenticationMethod=userAuthenticationMethod, snmpSystemName=snmpSystemName, rafSpTrapBootS=rafSpTrapBootS, scalableComplexClear=scalableComplexClear, configurationManagement=configurationManagement, skrClientConfigCertficate=skrClientConfigCertficate, eventLogIndex=eventLogIndex, safSpTrapCPUC=safSpTrapCPUC, rafSpTrapVoltN=rafSpTrapVoltN, scalableComplexNodeSelect=scalableComplexNodeSelect, cpuVpdThreads=cpuVpdThreads, dnsEnabled=dnsEnabled, serialPortCfg=serialPortCfg, powerTrendingPowerType=powerTrendingPowerType, snmpAlertFilters=snmpAlertFilters, diskIndex=diskIndex, generateTestAlert=generateTestAlert, groupRBSRemoteConsoleRemoteDiskAccess=groupRBSRemoteConsoleRemoteDiskAccess, ethernetInterfaceIPv6LinkLocalAddress=ethernetInterfaceIPv6LinkLocalAddress, scalableComplexNodePartitionID=scalableComplexNodePartitionID, fuelGaugePowerCappingPolicySetting=fuelGaugePowerCappingPolicySetting, osFailureCaptureSaveStart=osFailureCaptureSaveStart, spRackID=spRackID, skrCertificateDataGivenName=skrCertificateDataGivenName, tcpPortsRestoreDefault=tcpPortsRestoreDefault, ldapServer1PortNumber=ldapServer1PortNumber, sshLegacyCLIPortAssignment=sshLegacyCLIPortAssignment, ntpEnable=ntpEnable, ldapGroupSearchAttribute=ldapGroupSearchAttribute, portBaud=portBaud, sshClientAuthPubKeyAcceptFrom=sshClientAuthPubKeyAcceptFrom, voltNominalReading=voltNominalReading, ualConsoleAccess=ualConsoleAccess, ualIndex=ualIndex, scalableComplexPartitionEntry=scalableComplexPartitionEntry, diskTable=diskTable, systemHealthSummaryTable=systemHealthSummaryTable, snmpUserProfileEntry=snmpUserProfileEntry, netfinitySupportProcessorAgent=netfinitySupportProcessorAgent, sshClientAuthPubKeyEntryStatus=sshClientAuthPubKeyEntryStatus, groupIdsTable=groupIdsTable, ualAdapterAdvancedConfig=ualAdapterAdvancedConfig, cpuVpdVoltage=cpuVpdVoltage, diskNumber=diskNumber, ualAllowClearLog=ualAllowClearLog, sshServerHostKeyGenerate=sshServerHostKeyGenerate, httpProxyPassword=httpProxyPassword, componentLevelVpdTrackingAction=componentLevelVpdTrackingAction, sshClientAuthPubKeyEntry=sshClientAuthPubKeyEntry, sslCertificateDataContact=sslCertificateDataContact, scalableComplexNodeAction=scalableComplexNodeAction, powerOffSystemControl=powerOffSystemControl, defaultAdminPasswordExpired=defaultAdminPasswordExpired, dhcpDomainName=dhcpDomainName, sslCertificateDataOrganizationName=sslCertificateDataOrganizationName, sslConfig=sslConfig, sshClientAuthPubKeyType=sshClientAuthPubKeyType, powerSysConfig=powerSysConfig, telnetConnectionCounts=telnetConnectionCounts, minimumDiffCharsPassword=minimumDiffCharsPassword, activityLogs=activityLogs, serverTimers=serverTimers, ethernetInterfaceIPv6StaticIPAddressPrefixLen=ethernetInterfaceIPv6StaticIPAddressPrefixLen, sslEnableClientLDAP=sslEnableClientLDAP, city=city, remoteAlertIdEntrySyslogPortAssignment=remoteAlertIdEntrySyslogPortAssignment, eventLogFileName=eventLogFileName, ethernetInterfaceVlanID=ethernetInterfaceVlanID, sslClientLDAPCertificateGeneration=sslClientLDAPCertificateGeneration, fanNumber=fanNumber, telnetLegacyCLIPortAssignment=telnetLegacyCLIPortAssignment, sslClientLDAPTrustedCertificate3Status=sslClientLDAPTrustedCertificate3Status, sslEnableHTTPSforWeb=sslEnableHTTPSforWeb, scalableComplexPartitionActionCreate=scalableComplexPartitionActionCreate, safSpTrapOsToS=safSpTrapOsToS, sslCertificateDataGivenName=sslCertificateDataGivenName, machineLevelVpdMachineType=machineLevelVpdMachineType, fuelGaugeStaticPowerPcapMin=fuelGaugeStaticPowerPcapMin, firmwareUpdate=firmwareUpdate, httpProxyLocation=httpProxyLocation, ldapServer4NameOrIPAddress=ldapServer4NameOrIPAddress, restartSPImmediately=restartSPImmediately, skrCertificateDataCityOrLocality=skrCertificateDataCityOrLocality, domainName=domainName, powerTrendingSampleMax=powerTrendingSampleMax, componentLevelVpdTrackingFruName=componentLevelVpdTrackingFruName, customSecuritySettings=customSecuritySettings, groupRBSSupervisor=groupRBSSupervisor, sshClientAuthPubKeyTable=sshClientAuthPubKeyTable, snmpCommunityEntryIndex=snmpCommunityEntryIndex, sslHTTPSServerWebCertificateGeneration=sslHTTPSServerWebCertificateGeneration, remoteAlertFiltersTable=remoteAlertFiltersTable, fanCritLimitLow=fanCritLimitLow, leds=leds, componentLevelVpdTrackingManufacturingId=componentLevelVpdTrackingManufacturingId, ethernetInterfaceVlan=ethernetInterfaceVlan, memoryHealthStatus=memoryHealthStatus, restartReset=restartReset, rafSpTrapCPUN=rafSpTrapCPUN, snmpCommunityEntryCommunityIpAddress2=snmpCommunityEntryCommunityIpAddress2, eventLogTime=eventLogTime, remoteAlertIdEntryIndex=remoteAlertIdEntryIndex, ntpUpdateFrequency=ntpUpdateFrequency, powerOnSystemControl=powerOnSystemControl, snmpUserProfileEntryAuthProt=snmpUserProfileEntryAuthProt, certDomainNames=certDomainNames, dhcpSecondaryDNSServer=dhcpSecondaryDNSServer)
