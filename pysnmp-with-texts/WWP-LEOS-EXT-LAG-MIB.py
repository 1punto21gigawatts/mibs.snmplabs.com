#
# PySNMP MIB module WWP-LEOS-EXT-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-EXT-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, Counter64, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Gauge32, Counter32, TimeTicks, iso, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Counter64", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Gauge32", "Counter32", "TimeTicks", "iso", "Unsigned32", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosExtLagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14))
wwpLeosExtLagMIB.setRevisions(('2003-01-15 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosExtLagMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpLeosExtLagMIB.setLastUpdated('200301151700Z')
if mibBuilder.loadTexts: wwpLeosExtLagMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosExtLagMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosExtLagMIB.setDescription('This MIB module is an extension to the IEEE8023-LAG-mib. This MIB defines the managed objects for the creation and deletion of Aggregators.')
wwpLeosExtLagMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1))
wwpLeosExtLag = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1))
wwpLeosExtLagMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 2))
wwpLeosExtLagMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 2, 0))
wwpLeosExtLagMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 3))
wwpLeosExtLagMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 3, 1))
wwpLeosExtLagMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 3, 2))
wwpLeosMaxLags = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMaxLags.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMaxLags.setDescription('The maximum number of aggregators that this device supports.')
wwpLeosNumLags = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosNumLags.setStatus('current')
if mibBuilder.loadTexts: wwpLeosNumLags.setDescription('The current number of LAGs that are configured in this device.')
wwpLeosExtLagTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosExtLagTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtLagTable.setDescription('The (conceptual) table listing all the aggregators.')
wwpLeosExtLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-EXT-LAG-MIB", "wwpLeosExtAggId"))
if mibBuilder.loadTexts: wwpLeosExtLagEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtLagEntry.setDescription('An entry (conceptual row) in the wwpLeosExtLagTable.')
wwpLeosExtAggId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosExtAggId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggId.setDescription('Object which specifies a unique entry in the wwpLeosExtLagTable. A management station wishing to create a LAG should use a pseudo-random value for this object when creating an instance of a wwpLeosExtLagEntry.')
wwpLeosExtAggName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosExtAggName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggName.setDescription('The name assigned to this Lag by the Management station. This object can only be set while creating LAG. It is not allowed to rename the LAG name once it is created.')
wwpLeosExtAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosExtAggIndex.setReference('IEEE 802.3 Subclause 30.7.1.1.1')
if mibBuilder.loadTexts: wwpLeosExtAggIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggIndex.setDescription('The unique identifier allocated to this Aggregator by the local System. This attribute identifies an Aggregator instance among the subordinate managed objects of the containing object. This value is read-only. This object refer to the dot3adAggIndex in the IEEE-8023-LAG-MIB.')
wwpLeosExtAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosExtAggStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To disable the aggregator, a management should set this object to 'notInService'.")
wwpLeosExtAggMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lacp", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosExtAggMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggMode.setDescription('This object specifies the mode in which given aggregation is operating.')
wwpLeosExtLagProtectionRevertState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosExtLagProtectionRevertState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtLagProtectionRevertState.setDescription("This object specifies that if the primary port goes from operationally disabled to operationally enabled it shall become active, and one of the secondary ports shall become backup if this MIB object is set to 'on' and the wwpLeosLagProtectionRevertTimer timer expires.")
wwpLeosExtLagProtectionRevertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(5000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosExtLagProtectionRevertTimer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtLagProtectionRevertTimer.setDescription('This object specifies the revert protection timer value.')
wwpLeosExtAggHashMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-based", 1), ("ip-based", 2), ("enhanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosExtAggHashMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggHashMode.setDescription('This object specifies the hash mode used by the aggregation for known unicast frames.')
wwpLeosExtLagProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("standard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosExtLagProtectionMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtLagProtectionMode.setDescription('This object specifies the LACP protection-mode in which given aggregation is operating.')
wwpLeosLagModeTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosLagModeTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagModeTable.setDescription('The (conceptual) table listing the modes of aggregation on each port.')
wwpLeosLagModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-EXT-LAG-MIB", "wwpLeosLagPhyPortId"))
if mibBuilder.loadTexts: wwpLeosLagModeEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagModeEntry.setDescription('An entry (conceptual row) in the wwpLeosLagModeTable.')
wwpLeosLagPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLagPhyPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagPhyPortId.setDescription('This object specifies the physical port number. It is also used as index in the table.')
wwpLeosLagAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lacp", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLagAdminMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagAdminMode.setDescription('This object specifies the administrative mode in which given port is operating.')
wwpLeosLagOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lacp", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLagOperMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagOperMode.setDescription('This object specifies the operation mode in which given port is operating.')
wwpLeosLagProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosLagProtectionTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagProtectionTable.setDescription('The (conceptual) table listing the protection ports for each aggregation.')
wwpLeosLagProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-EXT-LAG-MIB", "wwpLeosExtAggId"), (0, "WWP-LEOS-EXT-LAG-MIB", "wwpLeosLagProtectionPort"))
if mibBuilder.loadTexts: wwpLeosLagProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagProtectionEntry.setDescription('An entry (conceptual row) in the wwpLeosLagProtectionTable.')
wwpLeosLagProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLagProtectionPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagProtectionPort.setDescription('This object specifies the protection port number. It is also used as index in the table.')
wwpLeosLagProtectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosLagProtectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLagProtectionRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete entry set this object to 'destroy'.")
wwpLeosExtAggFloodHashMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simplified", 1), ("enhanced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosExtAggFloodHashMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosExtAggFloodHashMode.setDescription('This object specifies the aggregation hash mode used by unknown unicast, multicast and broadcast frames for all aggregation ports in the system.')
mibBuilder.exportSymbols("WWP-LEOS-EXT-LAG-MIB", wwpLeosExtAggName=wwpLeosExtAggName, wwpLeosLagPhyPortId=wwpLeosLagPhyPortId, wwpLeosExtAggFloodHashMode=wwpLeosExtAggFloodHashMode, wwpLeosLagAdminMode=wwpLeosLagAdminMode, wwpLeosLagModeTable=wwpLeosLagModeTable, wwpLeosExtAggMode=wwpLeosExtAggMode, wwpLeosExtLagMIBConformance=wwpLeosExtLagMIBConformance, wwpLeosMaxLags=wwpLeosMaxLags, wwpLeosExtLagMIB=wwpLeosExtLagMIB, wwpLeosExtLagProtectionRevertState=wwpLeosExtLagProtectionRevertState, wwpLeosExtLagMIBObjects=wwpLeosExtLagMIBObjects, wwpLeosExtLagMIBNotifications=wwpLeosExtLagMIBNotifications, wwpLeosLagModeEntry=wwpLeosLagModeEntry, wwpLeosLagProtectionTable=wwpLeosLagProtectionTable, wwpLeosExtLag=wwpLeosExtLag, wwpLeosExtLagMIBCompliances=wwpLeosExtLagMIBCompliances, PYSNMP_MODULE_ID=wwpLeosExtLagMIB, wwpLeosNumLags=wwpLeosNumLags, wwpLeosExtLagProtectionRevertTimer=wwpLeosExtLagProtectionRevertTimer, wwpLeosExtLagMIBGroups=wwpLeosExtLagMIBGroups, wwpLeosExtLagTable=wwpLeosExtLagTable, wwpLeosLagOperMode=wwpLeosLagOperMode, wwpLeosExtLagProtectionMode=wwpLeosExtLagProtectionMode, wwpLeosExtLagMIBNotificationPrefix=wwpLeosExtLagMIBNotificationPrefix, wwpLeosLagProtectionPort=wwpLeosLagProtectionPort, wwpLeosExtAggId=wwpLeosExtAggId, wwpLeosExtAggHashMode=wwpLeosExtAggHashMode, wwpLeosLagProtectionRowStatus=wwpLeosLagProtectionRowStatus, wwpLeosLagProtectionEntry=wwpLeosLagProtectionEntry, wwpLeosExtAggIndex=wwpLeosExtAggIndex, wwpLeosExtLagEntry=wwpLeosExtLagEntry, wwpLeosExtAggStatus=wwpLeosExtAggStatus)
