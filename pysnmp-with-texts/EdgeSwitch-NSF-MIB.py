#
# PySNMP MIB module EdgeSwitch-NSF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-NSF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:10:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
agentInventoryUnitNumber, agentInventoryUnitEntry = mibBuilder.importSymbols("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber", "agentInventoryUnitEntry")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, ModuleIdentity, Unsigned32, NotificationType, Gauge32, iso, Counter64, ObjectIdentity, Counter32, MibIdentifier, TimeTicks, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Unsigned32", "NotificationType", "Gauge32", "iso", "Counter64", "ObjectIdentity", "Counter32", "MibIdentifier", "TimeTicks", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
fastPathNsf = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46))
fastPathNsf.setRevisions(('2011-01-26 00:00', '2009-04-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathNsf.setRevisionsDescriptions(('Postal address updated.', 'Initial version.',))
if mibBuilder.loadTexts: fastPathNsf.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathNsf.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathNsf.setContactInfo('')
if mibBuilder.loadTexts: fastPathNsf.setDescription('This MIB defines the objects used for FastPath to configure and report information and status of NSF features.')
agentNsfUnitTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 1), )
if mibBuilder.loadTexts: agentNsfUnitTable.setStatus('current')
if mibBuilder.loadTexts: agentNsfUnitTable.setDescription('A table of Per-Unit configuration objects for NSF.')
agentNsfUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 1, 1), )
agentInventoryUnitEntry.registerAugmentions(("EdgeSwitch-NSF-MIB", "agentNsfUnitEntry"))
agentNsfUnitEntry.setIndexNames(*agentInventoryUnitEntry.getIndexNames())
if mibBuilder.loadTexts: agentNsfUnitEntry.setStatus('current')
if mibBuilder.loadTexts: agentNsfUnitEntry.setDescription('Each Instance corresponds with a different unit managed by this agent.')
agentNsfUnitSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfUnitSupport.setStatus('current')
if mibBuilder.loadTexts: agentNsfUnitSupport.setDescription('Indicates if the unit supports the NSF feature.')
agentNsfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2))
agentNsfAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNsfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentNsfAdminStatus.setDescription('Controls whether NSF is enabled on the unit/stack.')
agentNsfOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfOperStatus.setStatus('current')
if mibBuilder.loadTexts: agentNsfOperStatus.setDescription('Indicates whether NSF is enabled on the unit/stack.')
agentNsfLastStartupReason = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("power-on", 2), ("warm-admin-move", 3), ("cold-admin-move", 4), ("warm-auto-restart", 5), ("cold-auto-restart", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfLastStartupReason.setStatus('current')
if mibBuilder.loadTexts: agentNsfLastStartupReason.setDescription("The type of activation that caused the software to start the last time. unknown: The switch rebooted for an unknown reason. power-on: The switch rebooted. This could have been caused by a power cycle or an administrative 'Reload' command. warm-admin-move: The administrator issued a command for the stand-by manager to take over. cold-admin-move: The administrator issued a command for the stand-by manager to take over, but the system was not ready for a warm-failover. warm-auto-restart: The primary management card restarted due to a failure, and the system executed a nonstop forwarding failover. cold-auto-restart: The system switched from the active manager to the backup manager and was unable to maintain user data traffic. This is usually caused by multiple failures occurring close together")
agentNsfTimeSinceLastRestart = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfTimeSinceLastRestart.setStatus('current')
if mibBuilder.loadTexts: agentNsfTimeSinceLastRestart.setDescription('Time since the current management card became the active management card.')
agentNsfRestartInProgress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfRestartInProgress.setStatus('current')
if mibBuilder.loadTexts: agentNsfRestartInProgress.setDescription('Whether a restart is in progress. A restart is not considered complete until all hardware tables have been fully reconciled.')
agentNsfWarmRestartReady = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfWarmRestartReady.setStatus('current')
if mibBuilder.loadTexts: agentNsfWarmRestartReady.setDescription('Whether the initial full checkpoint has finished.')
agentNsfBackupConfigurationAge = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfBackupConfigurationAge.setStatus('current')
if mibBuilder.loadTexts: agentNsfBackupConfigurationAge.setDescription('Age of the configuration on the backup unit. The time since the running configuration was last copied to the backup unit.')
agentNsfInitiateFailover = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNsfInitiateFailover.setStatus('current')
if mibBuilder.loadTexts: agentNsfInitiateFailover.setDescription('Triggers an administrative failover to the backup unit.')
agentCheckpointStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3))
agentCheckpointClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCheckpointClearStatistics.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointClearStatistics.setDescription('When set to enable(1), resets checkpoint statistics.')
agentCheckpointMessages = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCheckpointMessages.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointMessages.setDescription('Total number of checkpoint messages sent.')
agentCheckpointBytes = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCheckpointBytes.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointBytes.setDescription('Size in bytes of the total ammount of checkpoint messages sent.')
agentCheckpointTimeSinceCountersCleared = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCheckpointTimeSinceCountersCleared.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointTimeSinceCountersCleared.setDescription('Indicates how long since the Checkpoint counters have been cleared.')
agentCheckpointMessageRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCheckpointMessageRateInterval.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointMessageRateInterval.setDescription('Indicates the duration in seconds of the message rate interval.')
agentCheckpointMessageRate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCheckpointMessageRate.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointMessageRate.setDescription('Number of checkpoint messages received in the last interval defined by agentCheckpointMessageRateInterval.')
agentCheckpointHighestMessageRate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCheckpointHighestMessageRate.setStatus('current')
if mibBuilder.loadTexts: agentCheckpointHighestMessageRate.setDescription('Highest number of checkpoint messages received in an interval defined by agentCheckpointMessageRateInterval.')
agentNsfOspfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4))
agentNsfOspfSupportMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("planned", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNsfOspfSupportMode.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfSupportMode.setDescription('')
agentNsfOspfRestartInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNsfOspfRestartInterval.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfRestartInterval.setDescription('')
agentNsfOspfRestartStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("not-restarting", 2), ("planned-restart", 3), ("unplanned-restart", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfOspfRestartStatus.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfRestartStatus.setDescription('')
agentNsfOspfRestartAge = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfOspfRestartAge.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfRestartAge.setDescription('')
agentNsfOspfRestartExitReason = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("in-progress", 2), ("completed", 3), ("timed-out", 4), ("topology-change", 5), ("manual-clear", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNsfOspfRestartExitReason.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfRestartExitReason.setDescription('')
agentNsfOspfHelperSupportMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("planned", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNsfOspfHelperSupportMode.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfHelperSupportMode.setDescription('')
agentNsfOspfHelperStrictLSAChecking = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNsfOspfHelperStrictLSAChecking.setStatus('current')
if mibBuilder.loadTexts: agentNsfOspfHelperStrictLSAChecking.setDescription('')
agentNsfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 0))
agentNsfStackRestartComplete = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 46, 0, 1)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber"), ("EdgeSwitch-NSF-MIB", "agentNsfLastStartupReason"))
if mibBuilder.loadTexts: agentNsfStackRestartComplete.setStatus('current')
if mibBuilder.loadTexts: agentNsfStackRestartComplete.setDescription('Sent when the stack finishes restarting after a failover.')
mibBuilder.exportSymbols("EdgeSwitch-NSF-MIB", agentNsfStackRestartComplete=agentNsfStackRestartComplete, agentCheckpointStatsGroup=agentCheckpointStatsGroup, agentNsfOspfGroup=agentNsfOspfGroup, agentNsfUnitTable=agentNsfUnitTable, agentCheckpointBytes=agentCheckpointBytes, agentNsfOspfRestartAge=agentNsfOspfRestartAge, agentNsfOspfRestartExitReason=agentNsfOspfRestartExitReason, agentNsfUnitEntry=agentNsfUnitEntry, agentNsfTimeSinceLastRestart=agentNsfTimeSinceLastRestart, agentCheckpointHighestMessageRate=agentCheckpointHighestMessageRate, agentNsfTraps=agentNsfTraps, agentNsfOspfHelperStrictLSAChecking=agentNsfOspfHelperStrictLSAChecking, agentNsfRestartInProgress=agentNsfRestartInProgress, agentNsfUnitSupport=agentNsfUnitSupport, agentCheckpointTimeSinceCountersCleared=agentCheckpointTimeSinceCountersCleared, agentNsfGroup=agentNsfGroup, agentNsfLastStartupReason=agentNsfLastStartupReason, agentNsfOspfSupportMode=agentNsfOspfSupportMode, agentCheckpointMessages=agentCheckpointMessages, PYSNMP_MODULE_ID=fastPathNsf, agentNsfAdminStatus=agentNsfAdminStatus, agentNsfInitiateFailover=agentNsfInitiateFailover, fastPathNsf=fastPathNsf, agentNsfOperStatus=agentNsfOperStatus, agentNsfOspfRestartInterval=agentNsfOspfRestartInterval, agentCheckpointClearStatistics=agentCheckpointClearStatistics, agentCheckpointMessageRateInterval=agentCheckpointMessageRateInterval, agentCheckpointMessageRate=agentCheckpointMessageRate, agentNsfBackupConfigurationAge=agentNsfBackupConfigurationAge, agentNsfWarmRestartReady=agentNsfWarmRestartReady, agentNsfOspfHelperSupportMode=agentNsfOspfHelperSupportMode, agentNsfOspfRestartStatus=agentNsfOspfRestartStatus)
