#
# PySNMP MIB module CISCO-IETF-IP-FORWARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-IP-FORWARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressPrefixLength, InetAutonomousSystemNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAutonomousSystemNumber", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, NotificationType, Counter32, MibIdentifier, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, TimeTicks, ObjectIdentity, Bits, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter32", "MibIdentifier", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "TimeTicks", "ObjectIdentity", "Bits", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
ciscoIetfIpForward = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 85))
if mibBuilder.loadTexts: ciscoIetfIpForward.setLastUpdated('200201240000Z')
if mibBuilder.loadTexts: ciscoIetfIpForward.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIetfIpForward.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Phone: +1 800 553-NETS Email: <cs-snmp@cisco.com>')
if mibBuilder.loadTexts: ciscoIetfIpForward.setDescription('The MIB module for the management of CIDR multipath IP Routes.')
cInetCidrRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 85, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetCidrRouteNumber.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteNumber.setDescription('The number of current cInetCidrRouteTable entries that are not invalid.')
cInetCidrRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 85, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetCidrRouteDiscards.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteDiscards.setDescription('The number of routing entries which were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free-up buffer space for other routing entries.')
cInetCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 85, 7), )
if mibBuilder.loadTexts: cInetCidrRouteTable.setReference('RFC 1213 Section 6.6, The IP Group')
if mibBuilder.loadTexts: cInetCidrRouteTable.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteTable.setDescription("This entity's IP Routing table.")
cInetCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1), ).setIndexNames((0, "CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteInstance"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteDestType"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteDest"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRoutePfxLen"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteNextHopType"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteNextHop"))
if mibBuilder.loadTexts: cInetCidrRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteEntry.setDescription('A particular route to a particular destination, under a particular policy.')
cInetCidrRouteInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cInetCidrRouteInstance.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteInstance.setDescription('The instance identifier of the (conceptual) routing table containing this route. This identifier may be used to represent multiple routing tables, type-of-service routing, scopes, or any other use of multiple tables. XXX This needs more discussion.')
cInetCidrRouteDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cInetCidrRouteDestType.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteDestType.setDescription('The type of cInetCidrRouteDest. Only IPv4 and IPv6 addresses are expected.')
cInetCidrRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: cInetCidrRouteDest.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteDest.setDescription('The destination IP address of this route. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the mask formed from the corresponding instance of the cInetCidrRoutePfxLen object is not equal to x.')
cInetCidrRoutePfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cInetCidrRoutePfxLen.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRoutePfxLen.setDescription('Indicate the number of leading one bits which form the mask to be logical-ANDed with the destination address before being compared to the value in the cInetCidrRouteDest field. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of the mask formed from x with the value of the corresponding instance of the cInetCidrRouteDest object is not equal to cInetCidrRouteDest.')
cInetCidrRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 5), InetAddressType())
if mibBuilder.loadTexts: cInetCidrRouteNextHopType.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteNextHopType.setDescription('The address type of inetCidrRouteNextHop. Must be the same as that of cInetCidrRouteDestType, or unknown if there is no next hop.')
cInetCidrRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: cInetCidrRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteNextHop.setDescription('On remote routes, the address of the next system en route; Otherwise, a zero-length string.')
cInetCidrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 7), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached.')
cInetCidrRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteType.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteType.setDescription('The type of route. Note that local(3) refers to a route for which the next hop is the final destination; remote(4) refers to a route for which the next hop is not the final destination. Routes which do not result in traffic forwarding or rejection should not be displayed even if the implementation keeps them stored internally. reject(2) refers to a route which, if matched, discards the message as unreachable and returns a notification (e.g. ICMP error) to the message sender. This is used in some protocols as a means of correctly aggregating routes. blackhole(5) refers to a route which, if matched, discards the message silently.')
cInetCidrRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 9), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetCidrRouteProto.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
cInetCidrRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetCidrRouteAge.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
cInetCidrRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 11), InetAutonomousSystemNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteNextHopAS.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteNextHopAS.setDescription("The Autonomous System Number of the Next Hop. The semantics of this object are determined by the routing-protocol specified in the route's cInetCidrRouteProto value. When this object is unknown or not relevant its value should be set to zero.")
cInetCidrRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cInetCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cInetCidrRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cInetCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cInetCidrRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteMetric3.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cInetCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cInetCidrRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteMetric4.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cInetCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cInetCidrRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteMetric5.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cInetCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cInetCidrRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetCidrRouteStatus.setStatus('current')
if mibBuilder.loadTexts: cInetCidrRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
cIpForwardConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 85, 5))
cIpForwardGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 1))
cIpForwardCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 2))
cIpForwardCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 2, 3)).setObjects(("CISCO-IETF-IP-FORWARD-MIB", "cInetForwardCidrRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpForwardCompliance2 = cIpForwardCompliance2.setStatus('current')
if mibBuilder.loadTexts: cIpForwardCompliance2.setDescription('The compliance statement for systems which have routing tables. XXX is this right?')
cInetForwardCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 1, 4)).setObjects(("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteNumber"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteDiscards"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteIfIndex"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteType"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteProto"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteAge"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteNextHopAS"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteMetric1"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteMetric2"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteMetric3"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteMetric4"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteMetric5"), ("CISCO-IETF-IP-FORWARD-MIB", "cInetCidrRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cInetForwardCidrRouteGroup = cInetForwardCidrRouteGroup.setStatus('current')
if mibBuilder.loadTexts: cInetForwardCidrRouteGroup.setDescription('The IP version independent CIDR Route Table.')
cIpCidrRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 85, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteNumber.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteNumber.setDescription('The number of current ipCidrRouteTable entries that are not invalid. This object is deprecated in favor of cInetCidrRouteNumber and the cInetCidrRouteTable.')
cIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 85, 4), )
if mibBuilder.loadTexts: cIpCidrRouteTable.setReference('RFC 1213 Section 6.6, The IP Group')
if mibBuilder.loadTexts: cIpCidrRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteTable.setDescription("This entity's IP Routing table. This table has been deprecated in favor of the IP version neutral cInetCidrRouteTable.")
cIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1), ).setIndexNames((0, "CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteDest"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMask"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteTos"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteNextHop"))
if mibBuilder.loadTexts: cIpCidrRouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteEntry.setDescription('A particular route to a particular destination, under a particular policy.')
cIpCidrRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteDest.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteDest.setDescription('The destination IP address of this route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the cIpCidrRouteMask object is not equal to x.')
cIpCidrRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteMask.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the cIpCidrRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the cIpCidrRouteMask by reference to the IP Address Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the cIpCidrRouteDest object is not equal to cIpCidrRouteDest.')
cIpCidrRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteTos.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteTos.setDescription('The policy specifier is the IP TOS Field. The encoding of IP TOS is as specified by the following convention. Zero indicates the default path if no more specific policy applies. +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30')
cIpCidrRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteNextHop.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteNextHop.setDescription('On remote routes, the address of the next system en route; Otherwise, 0.0.0.0.')
cIpCidrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached.')
cIpCidrRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteType.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteType.setDescription('The type of route. Note that local(3) refers to a route for which the next hop is the final destination; remote(4) refers to a route for which the next hop is not the final destination. Routes which do not result in traffic forwarding or rejection should not be displayed even if the implementation keeps them stored internally. reject (2) refers to a route which, if matched, discards the message as unreachable. This is used in some protocols as a means of correctly aggregating routes.')
cIpCidrRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteProto.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
cIpCidrRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpCidrRouteAge.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
cIpCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteInfo.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's cIpCidrRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier, and any implementation conforming to ASN.1 and the Basic Encoding Rules must be able to generate and recognize this value.")
cIpCidrRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteNextHopAS.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteNextHopAS.setDescription("The Autonomous System Number of the Next Hop. The semantics of this object are determined by the routing-protocol specified in the route's cIpCidrRouteProto value. When this object is unknown or not relevant its value should be set to zero.")
cIpCidrRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteMetric1.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cIpCidrRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteMetric2.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cIpCidrRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteMetric3.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cIpCidrRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteMetric4.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cIpCidrRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteMetric5.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpCidrRouteProto value. If this metric is not used, its value should be set to -1.")
cIpCidrRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 4, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpCidrRouteStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cIpCidrRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
cIpForwardCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 2, 1)).setObjects(("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardCidrRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpForwardCompliance = cIpForwardCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cIpForwardCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the ipForward MIB.')
cIpForwardCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 1, 3)).setObjects(("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteNumber"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteDest"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMask"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteTos"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteNextHop"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteIfIndex"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteType"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteProto"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteAge"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteInfo"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteNextHopAS"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMetric1"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMetric2"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMetric3"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMetric4"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteMetric5"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpCidrRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpForwardCidrRouteGroup = cIpForwardCidrRouteGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cIpForwardCidrRouteGroup.setDescription('The CIDR Route Table.')
cIpForwardNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 85, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpForwardNumber.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardNumber.setDescription('The number of current cIpForwardTable entries that are not invalid.')
cIpForwardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 85, 2), )
if mibBuilder.loadTexts: cIpForwardTable.setReference('RFC 1213 Section 6.6, The IP Group')
if mibBuilder.loadTexts: cIpForwardTable.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardTable.setDescription("This entity's IP Routing table.")
cIpForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1), ).setIndexNames((0, "CISCO-IETF-IP-FORWARD-MIB", "cIpForwardDest"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cIpForwardProto"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cIpForwardPolicy"), (0, "CISCO-IETF-IP-FORWARD-MIB", "cIpForwardNextHop"))
if mibBuilder.loadTexts: cIpForwardEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardEntry.setDescription('A particular route to a particular destination, under a particular policy.')
cIpForwardDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpForwardDest.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardDest.setDescription('The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the cIpForwardMask object is not equal to x.')
cIpForwardMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardMask.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the cIpForwardDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the cIpForwardMask by reference to the IP Address Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the cIpForwardDest object is not equal to cIpForwardDest.')
cIpForwardPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpForwardPolicy.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardPolicy.setDescription("The general set of conditions that would cause the selection of one multipath route (set of next hops for a given destination) is referred to as 'policy'. Unless the mechanism indicated by ipForwardProto specifies otherwise, the policy specifier is the IP TOS Field. The encoding of IP TOS is as specified by the following convention. Zero indicates the default path if no more specific policy applies. +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30 Protocols defining 'policy' otherwise must either define a set of values which are valid for this object or must implement an integer-instanced policy table for which this object's value acts as an index.")
cIpForwardNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpForwardNextHop.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardNextHop.setDescription('On remote routes, the address of the next system en route; Otherwise, 0.0.0.0.')
cIpForwardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached.')
cIpForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("local", 3), ("remote", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardType.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardType.setDescription('The type of route. Note that local(3) refers to a route for which the next hop is the final destination; remote(4) refers to a route for which the next hop is not the final destination. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the cIpForwardTable object. That is, it effectively disassociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant cIpForwardType object.')
cIpForwardProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpForwardProto.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
cIpForwardAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpForwardAge.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
cIpForwardInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardInfo.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's cIpForwardProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier, and any implementation conforming to ASN.1 and the Basic Encoding Rules must be able to generate and recognize this value.")
cIpForwardNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardNextHopAS.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardNextHopAS.setDescription('The Autonomous System Number of the Next Hop. When this is unknown or not relevant to the protocol indicated by cIpForwardProto, zero.')
cIpForwardMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardMetric1.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpForwardProto value. If this metric is not used, its value should be set to -1.")
cIpForwardMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardMetric2.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpForwardProto value. If this metric is not used, its value should be set to -1.")
cIpForwardMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardMetric3.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpForwardProto value. If this metric is not used, its value should be set to -1.")
cIpForwardMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardMetric4.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpForwardProto value. If this metric is not used, its value should be set to -1.")
cIpForwardMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 85, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIpForwardMetric5.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's cIpForwardProto value. If this metric is not used, its value should be set to -1.")
cIpForwardOldCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 2, 2)).setObjects(("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMultiPathGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpForwardOldCompliance = cIpForwardOldCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardOldCompliance.setDescription('The compliance statement for SNMP entities which implement the ipForward MIB.')
cIpForwardMultiPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 85, 5, 1, 2)).setObjects(("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardNumber"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardDest"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMask"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardPolicy"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardNextHop"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardIfIndex"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardType"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardProto"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardAge"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardInfo"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardNextHopAS"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMetric1"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMetric2"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMetric3"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMetric4"), ("CISCO-IETF-IP-FORWARD-MIB", "cIpForwardMetric5"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIpForwardMultiPathGroup = cIpForwardMultiPathGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cIpForwardMultiPathGroup.setDescription('IP Multipath Route Table.')
mibBuilder.exportSymbols("CISCO-IETF-IP-FORWARD-MIB", cIpForwardEntry=cIpForwardEntry, cInetForwardCidrRouteGroup=cInetForwardCidrRouteGroup, cInetCidrRouteInstance=cInetCidrRouteInstance, cInetCidrRoutePfxLen=cInetCidrRoutePfxLen, cIpForwardGroups=cIpForwardGroups, cIpCidrRouteMetric1=cIpCidrRouteMetric1, cInetCidrRouteNextHop=cInetCidrRouteNextHop, cInetCidrRouteDestType=cInetCidrRouteDestType, cInetCidrRouteMetric4=cInetCidrRouteMetric4, cIpForwardDest=cIpForwardDest, cIpForwardInfo=cIpForwardInfo, cIpForwardMetric4=cIpForwardMetric4, cIpCidrRouteNextHopAS=cIpCidrRouteNextHopAS, cIpForwardMetric5=cIpForwardMetric5, cInetCidrRouteMetric1=cInetCidrRouteMetric1, cIpCidrRouteType=cIpCidrRouteType, cIpForwardType=cIpForwardType, cIpForwardProto=cIpForwardProto, cIpCidrRouteMetric2=cIpCidrRouteMetric2, cIpForwardAge=cIpForwardAge, cInetCidrRouteNextHopAS=cInetCidrRouteNextHopAS, cIpForwardMetric2=cIpForwardMetric2, cIpCidrRouteNumber=cIpCidrRouteNumber, cIpCidrRouteProto=cIpCidrRouteProto, cIpCidrRouteInfo=cIpCidrRouteInfo, cIpCidrRouteMask=cIpCidrRouteMask, cIpCidrRouteStatus=cIpCidrRouteStatus, cIpCidrRouteNextHop=cIpCidrRouteNextHop, cInetCidrRouteNextHopType=cInetCidrRouteNextHopType, cIpForwardOldCompliance=cIpForwardOldCompliance, cInetCidrRouteProto=cInetCidrRouteProto, cIpForwardCompliances=cIpForwardCompliances, cInetCidrRouteAge=cInetCidrRouteAge, cIpCidrRouteTable=cIpCidrRouteTable, cIpCidrRouteEntry=cIpCidrRouteEntry, cIpCidrRouteMetric5=cIpCidrRouteMetric5, cIpForwardMetric3=cIpForwardMetric3, cInetCidrRouteIfIndex=cInetCidrRouteIfIndex, cIpForwardCidrRouteGroup=cIpForwardCidrRouteGroup, cIpForwardPolicy=cIpForwardPolicy, cIpForwardIfIndex=cIpForwardIfIndex, cIpForwardCompliance=cIpForwardCompliance, cIpForwardMask=cIpForwardMask, cInetCidrRouteDest=cInetCidrRouteDest, cIpForwardCompliance2=cIpForwardCompliance2, cIpCidrRouteMetric4=cIpCidrRouteMetric4, cInetCidrRouteEntry=cInetCidrRouteEntry, cInetCidrRouteDiscards=cInetCidrRouteDiscards, PYSNMP_MODULE_ID=ciscoIetfIpForward, cIpForwardTable=cIpForwardTable, cIpForwardMetric1=cIpForwardMetric1, cInetCidrRouteNumber=cInetCidrRouteNumber, cIpForwardMultiPathGroup=cIpForwardMultiPathGroup, cIpCidrRouteTos=cIpCidrRouteTos, cInetCidrRouteMetric3=cInetCidrRouteMetric3, cInetCidrRouteMetric5=cInetCidrRouteMetric5, cIpCidrRouteMetric3=cIpCidrRouteMetric3, cIpForwardNextHop=cIpForwardNextHop, cIpForwardNextHopAS=cIpForwardNextHopAS, cIpForwardNumber=cIpForwardNumber, cInetCidrRouteStatus=cInetCidrRouteStatus, cIpCidrRouteAge=cIpCidrRouteAge, cIpCidrRouteIfIndex=cIpCidrRouteIfIndex, cInetCidrRouteType=cInetCidrRouteType, cInetCidrRouteTable=cInetCidrRouteTable, cInetCidrRouteMetric2=cInetCidrRouteMetric2, cIpForwardConformance=cIpForwardConformance, cIpCidrRouteDest=cIpCidrRouteDest, ciscoIetfIpForward=ciscoIetfIpForward)
