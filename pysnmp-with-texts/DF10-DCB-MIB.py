#
# PySNMP MIB module DF10-DCB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DF10-DCB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:42:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Counter64, Gauge32, TimeTicks, Bits, IpAddress, MibIdentifier, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Counter64", "Gauge32", "TimeTicks", "Bits", "IpAddress", "MibIdentifier", "iso", "Counter32")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
dF10Dcb = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 15))
dF10Dcb.setRevisions(('2012-04-16 00:00', '2011-11-24 00:00', '2010-09-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dF10Dcb.setRevisionsDescriptions(("1.Modified Access permission of following objects to read-only dF10ETSAdminMode,dF10PFCAdminMode,dF10DCBXAdminStatus, dF10DcbPfcMinThreshold,dF10DcbPfcMaxThreshold, dF10DcbETSAdminStatus,dF10DcbPFCAdminStatus, dF10ETSSystemControl,dF10ETSModuleStatus, dF10PFCSystemControl,dF10PFCModuleStatus, dF10ETSGlobalEnableTrap,dF10PFCGlobalEnableTrap, as enabling DCB on interface has been changed to policy based options. 2.Removed 'auto' from DcbAdminMode as ets/pfc mode supported are on/off. 3.Removed dF10DcbRowStatus,dF10ETSRowStatus,dF10PFCRowStatus objects.", 'Added interoperablity support - Modified MIB to reflect Configuration Exchange and Auto detection of version. 1. Modified DcbState Textual Convention to include internally propagated information from Config Source. 2. Modified DcbStateMachineType - for legacy DCBX versions like CIN, CEE we only have a feature state machine. 3. Added textual convention DcbxPortRole for various port roles supported for Configuration Exchange. 4. Added textual convention DcbxVersion for the different versions of DCBX - CIN/ CEE /IEEEv2.4. 5. Added a new table dF10DCBXPortStatusTable for the statistics and configuration exchange and version specific details. 6. Added Compliance and Conformance information.', 'Initial version of DCBX mib.',))
if mibBuilder.loadTexts: dF10Dcb.setLastUpdated('201204160000Z')
if mibBuilder.loadTexts: dF10Dcb.setOrganization('Dell Inc.')
if mibBuilder.loadTexts: dF10Dcb.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: dF10Dcb.setDescription('The proprietary extension MIB module for Dell Networking OS DCB and DCBX.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class DcbAdminMode(TextualConvention, Integer32):
    description = "'on(1)', In this mode, the configurations, either from this system or the remote system will take effect based on DCBX negotiations. 'off(2)', In this mode, all the operational(local) parameters for the feature will be same as Admin Configuration Parameters. But Operational(local) parameters do not have any impact in the system."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class DcbState(TextualConvention, Integer32):
    description = "The state of the DCBX state machine. off '(0)', In this state all Operational(local) parameters for the feature will be same as Admin Configuration parameters but will not be operational in the system(hardware). init '(1)', In this state all Operational(local) parameters for the feature will be same as Admin Configuration Parameters. rxrecommended '(2)', In this state all the Operational(local) parameters for the feature will be same as particular feature Remote Parameters. internallypropagated '(3)', In this state all the Operational(local) parameters for the feature will be same as the internal propagated information from the config source."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("init", 1), ("rxrecommended", 2), ("internallypropagated", 3))

class DcbStateMachineType(TextualConvention, Integer32):
    description = "asymmetric'(1)',By using this state machine the operational parameters for the DCB feature can be same as peer or not. symmetric '(2)',By using this state machine the operational parameters for the DCB feature will be same as peer. feature '(3)' Feature State machine as used by legacy DCBX - CIN/CEE versions."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("asymmetric", 1), ("symmetric", 2), ("feature", 3))

class DcbxPortRole(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("manual", 1), ("autoup", 2), ("autodown", 3), ("configSource", 4))

class DcbxVersion(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("auto", 1), ("ieee", 2), ("cin", 3), ("cee", 4))

dF10DcbSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1))
dF10DcbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2))
dF10DcbApplicationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3))
dF10DcbNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4))
dF10DCBXObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1))
dF10ETSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2))
dF10PFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3))
dF10DCBXScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 1))
dF10ETSScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1))
dF10PFCScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1))
dF10DcbPfcMinThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbPfcMinThreshold.setStatus('current')
if mibBuilder.loadTexts: dF10DcbPfcMinThreshold.setDescription("The minimum PFC(Priority Based Flow Control) threshold for the switch. This Object indicates the minimum Receive queue buffer count. The minimum and maximum values for this object may vary based on the underlying hardware's capacity.")
dF10DcbPfcMaxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbPfcMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: dF10DcbPfcMaxThreshold.setDescription("The maximum PFC(Priority Based Flow Control)threshold for the switch. This Object indicates the maximum Receive queue buffer count. The minimum and maximum values for this object may vary based on the underlying hardware's capacity. ")
dF10DcbMaxPfcProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbMaxPfcProfiles.setStatus('current')
if mibBuilder.loadTexts: dF10DcbMaxPfcProfiles.setDescription("The maximum number of PFC(Priority Based Flow Control)profiles supported by the device. A PFC profile is a bitmap, containing the status of PFC for all the priorities. If Bit 0 is set, then it means PFC is enabled for priority 0, otherwise PFC is disabled for priority 0. If Bit 1 is set, then it means PFC is enabled for priority 1, otherwise PFC is disabled for priority 1, and so on. If this object value is zero, it means all the bits are set to zero and PFC is disabled for all priorities. If this object's value is 3, it means the bits 0 and 1 are set and PFC is enabled for priorities 0 and 1 and disabled for all other priorities. Device supporting 256 PFC profiles, means all possible combination of PFC status on 8 priorities are supported. ")
dF10DcbPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1), )
if mibBuilder.loadTexts: dF10DcbPortTable.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DcbPortTable.setDescription('Port table contains the DCB features (Enhanced Transmission Selection/Priortiy Based Flow Control) status (enabled or disabled).')
dF10DcbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10DcbPortNumber"))
if mibBuilder.loadTexts: dF10DcbPortEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DcbPortEntry.setDescription('An entry containing DCB control parameters for a particular port.')
dF10DcbPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10DcbPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DcbPortNumber.setDescription('This indicates the interface identifier for which the Dcb configuration is applied.')
dF10DcbETSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbETSAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DcbETSAdminStatus.setDescription('This object is used to display if ETS feature is enabled or disabled on the given port.')
dF10DcbPFCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbPFCAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DcbPFCAdminStatus.setDescription('This object is used to display if PFC feature is enabled or disabled on the given port.')
dF10DcbxGlobalTraceLevel = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DcbxGlobalTraceLevel.setStatus('current')
if mibBuilder.loadTexts: dF10DcbxGlobalTraceLevel.setDescription('This object is used to enable Trace Statements in DCBX Module. A FOUR BYTE integer is used for enabling the level of tracing. Each BIT in the four byte integer represents a particular level of Trace. The mapping between the bit positions & the level of trace is as follows: 1 - Management Traces 2 - DCBX State Machine Traces 3 - TLV Traces 4 - System Resource Traces 5 - Failure Traces 6 - Configuration Exchange Traces 7 - Auto Detection Traces The remaining bits are unused. The user has to enter the corresponding INTEGER VALUE for the trace to be set. Only one trace can be enabled at a time. To enable all the traces, sum of all individual traces must be provided.')
dF10DCBXGlobalVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 1, 2), DcbxVersion().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXGlobalVersion.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXGlobalVersion.setDescription('CIN is Cisco Intel Nuova DCBX (version 1.0). CEE is converged enhanced ethernet DCBX (version 1.06). IEEE is 802-1 az version. The default value is auto. DCBX supports the legacy implementations v1.0 (CIN) and v1.06 (CEE) in addition to standard IEEE version 2.4 DCBX. 1.DCBX starts in standard IEEE mode by sending an IEEE standard version 2.4 DCBX frame. If the peer responds, then IEEE standard version 2.4 DCBX is used,Starts means after a link up, a DCBX timeout (or multiple peer condition) or when commanded by the network operator. If DCBX receives a DCBX frame with an OUI indicating a legacy version, it immediately switches into legacy mode for the detected version and does not wait for the 3x LLDP fast timeout. 2.If no IEEE DCBX response is received within 3 times the LLDP fast transmit timeout period, DCBX immediately transmits a version 1.06 DCBX frame with the appropriate version number. If DCBX receives a DCBX frame with an OUI indicating IEEE standard support, it immediately switches into IEEE standard mode and does not wait for the timer. If DCBX receives a DCBX frame with an OUI indicating legacy mode and a version number indicating version 1.0 support, it immediately switches into legacy 1.0 mode and does not wait for the timer. 3.If no version 1.06 response is received within 3 times the DCBX fast transmit timeout period, DCBX falls back to version 1.0 and immediately transmits a version 1.0 frame. If no response is received within 3 times the DCBX fast transmit period, DCBX waits the standard LLDP timeout period, and then begins again with step 1. If DCBX receives a DCBX frame with an OUI indicating IEEE standard mode, it immediately switches into IEEE standard mode.')
dF10DCBXPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2), )
if mibBuilder.loadTexts: dF10DCBXPortTable.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortTable.setDescription('Port table contains the DCBX feature status (enabled or disabled).')
dF10DCBXPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10DCBXPortNumber"))
if mibBuilder.loadTexts: dF10DCBXPortEntry.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortEntry.setDescription('An entry containing DCBX control parameters for a particular port.')
dF10DCBXPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10DCBXPortNumber.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortNumber.setDescription('This indicates the interface identifier for which the DCBX configuration is applied.')
dF10DCBXAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXAdminStatus.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXAdminStatus.setDescription('This object is used to display if DCBX feature is enabled(1) or disabled(2) on the given port.')
dF10DCBXAutoCfgPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 3), DcbxPortRole().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXAutoCfgPortRole.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXAutoCfgPortRole.setDescription(' Ports operating in the manual role do not have their configuration affected by peer devices or by internal propagation of configuration. These ports will advertise their configuration to their peer if DCBX is enabled on that port. Auto-up: Advertises a configuration, but is also willing to accept a configuration from the link-partner and propagate it internally to the auto-downstream ports as well as receive configuration propagated internally by other auto-upstream ports. Auto-down: Advertises a configuration but is not willing to accept one from the link partner. However, the port will accept a configuration propagated internally by the configuration source. Configuration Source:In this role, the port has been manually selected to be the configuration source. Configuration received over this port is propagated to the other auto-configuration ports.')
dF10DCBXPortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 4), DcbxVersion().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXPortVersion.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortVersion.setDescription('CIN is Cisco Intel Nuova DCBX (version 1.0). CEE is converged enhanced ethernet DCBX (version 1.06). IEEE is 802-1 az version. The default value is auto. DCBX supports the legacy implementations v1.0 (CIN) and v1.06 (CEE) in addition to standard IEEE version 2.4 DCBX. 1.DCBX starts in standard IEEE mode by sending an IEEE standard version 2.4 DCBX frame. If the peer responds, then IEEE standard version 2.4 DCBX is used,Starts means after a link up, a DCBX timeout (or multiple peer condition) or when commanded by the network operator. If DCBX receives a DCBX frame with an OUI indicating a legacy version, it immediately switches into legacy mode for the detected version and does not wait for the 3x LLDP fast timeout. 2.If no IEEE DCBX response is received within 3 times the LLDP fast transmit timeout period, DCBX immediately transmits a version 1.06 DCBX frame with the appropriate version number. If DCBX receives a DCBX frame with an OUI indicating IEEE standard support, it immediately switches into IEEE standard mode and does not wait for the timer. If DCBX receives a DCBX frame with an OUI indicating legacy mode and a version number indicating version 1.0 support, it immediately switches into legacy 1.0 mode and does not wait for the timer. 3.If no version 1.06 response is received within 3 times the DCBX fast transmit timeout period, DCBX falls back to version 1.0 and immediately transmits a version 1.0 frame. If no response is received within 3 times the DCBX fast transmit period, DCBX waits the standard LLDP timeout period, and then begins again with step 1. If DCBX receives a DCBX frame with an OUI indicating IEEE standard mode, it immediately switches into IEEE standard mode.')
dF10DCBXPortSupportedTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("pfc", 0), ("etsConfig", 1), ("etsRecom", 2), ("applicationPriorityFCOE", 3), ("applicationPriorityISCSI", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortSupportedTLVs.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortSupportedTLVs.setDescription("Bitmap that includes the supported set of DCBX LLDP TLVs the device is capable of and whose transmission is allowed on the local LLDP agent by network management. Having the bit 'pfc(0)' set indicates that the LLDP transmit PFC TLV as part of DCBX TLVs. Having the bit 'etcConfig(1)' set indicates that the LLDP transmit ETS configuration TLV as part of DCBX TLVs. Having the bit 'etsRecom(2)' set indicates that transmit ETS Recommendation TLV as part of DCBX TLVs. Having the bit 'applicationPriorityFCOE(3)' set indicates that the LLDP transmit applicationPriority TLV for FCOE as part of DCBX TLVs. Having the bit 'applicationPriorityISCSI(4)' set indicates that the LLDP transmit applicationPriority TLV for ISCSI as part of DCBX TLVs.")
dF10DCBXPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("pfc", 0), ("etsConfig", 1), ("etsRecom", 2), ("applicationPriorityFCOE", 3), ("applicationPriorityISCSI", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXPortConfigTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortConfigTLVsTxEnable.setDescription("Bitmap that includes the DCBX defined set of LLDP TLVs whose transmission is enabled on the local LLDP agent by network management. Having the bit 'pfc(0)' set indicates that the LLDP transmit PFC TLV as part of DCBX TLVs. Having the bit 'etsConfig(1)' set indicates that the LLDP transmit ETS configuration TLV as part of DCBX TLVs. Having the bit 'etsRecom(2)' set indicates that transmit ETS Recommendation TLV as part of DCBX TLVs. Having the bit 'applicationPriorityFCOE(3)' set indicates that the LLDP transmit applicationPriority TLV for FCOE as part of DCBX TLVs. Having the bit 'applicationPriorityISCSI(4)' set indicates that the LLDP transmit applicationPriority TLV for ISCSI as part of DCBX TLVs.")
dF10DCBXPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3), )
if mibBuilder.loadTexts: dF10DCBXPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortStatusTable.setDescription('.')
dF10DCBXPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1), )
dF10DCBXPortEntry.registerAugmentions(("DF10-DCB-MIB", "dF10DCBXPortStatusEntry"))
dF10DCBXPortStatusEntry.setIndexNames(*dF10DCBXPortEntry.getIndexNames())
if mibBuilder.loadTexts: dF10DCBXPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortStatusEntry.setDescription('.')
dF10DCBXPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 2), DcbxVersion().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortOperVersion.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortOperVersion.setDescription('Specifies the DCBX mode in which the interface is currently operating.')
dF10DCBXPortPeerMACaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerMACaddress.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortPeerMACaddress.setDescription('MAC Address of the DCBX peer.')
dF10DCBXPortCfgSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortCfgSource.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortCfgSource.setDescription('Indicates if this port is the source of configuration information for auto-* ports.')
dF10DCBXOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXOperStatus.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXOperStatus.setDescription('This object gives information on the operational status of DCBX on the given port. Enabled(1) indicates DCBX on the port is in sync with the remote and is operationally up. Disabled(2) indicates DCBX on the port is operationally disabled.')
dF10DCBXPortMultiplePeerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortMultiplePeerCount.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortMultiplePeerCount.setDescription('Indicates number of times multiple peers were detected. A duplicate peer is when more than one DCBX peer is detected on a port.')
dF10DCBXPortPeerRemovedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerRemovedCount.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortPeerRemovedCount.setDescription('.')
dF10DCBXPortPeerOperVersionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerOperVersionNum.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortPeerOperVersionNum.setDescription('Specifies the operational version of the peer DCBX device. Valid only when peer device is a CEE/CIN DCBX device.')
dF10DCBXPortPeerMaxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerMaxVersion.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortPeerMaxVersion.setDescription('Specifies the max version of the peer DCBX device. Valid only when peer device is CEE/CIN DCBX device.')
dF10DCBXPortSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortSeqNum.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortSeqNum.setDescription('Specifies the current sequence number that is sent in DCBX control TLVs in CEE/CIN Mode.')
dF10DCBXPortAckNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortAckNum.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortAckNum.setDescription('Specifies the current ACK number that is to be sent to peer in DCBX control TLVs in CEE/CIN Mode.')
dF10DCBXPortPeerRcvdAckNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerRcvdAckNum.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortPeerRcvdAckNum.setDescription('Specifies the current ACK number that is sent by peer in DCBX control TLV in CEE/CIN Mode.')
dF10DCBXPortTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortTxCount.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortTxCount.setDescription('The number of DCBX frames transmitted per interface.')
dF10DCBXPortRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortRxCount.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortRxCount.setDescription('The number of DCBX frames received per interface.')
dF10DCBXPortErrorFramesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortErrorFramesCount.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortErrorFramesCount.setDescription('The number of DCBX frames discarded due to errors in the frame.')
dF10ETSSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("shutdown", 2))).clone('running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSSystemControl.setStatus('current')
if mibBuilder.loadTexts: dF10ETSSystemControl.setDescription("The ETS(Enhanced Transmission selection) system control status for the switch. It indicates whether ETS Module in the system is running or shutdown. When this object returns 'running', resources required by ETS module are allocated and the module is running. When this object returns 'shutdown', all the pools used by ETS module are released to the system.")
dF10ETSModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSModuleStatus.setStatus('current')
if mibBuilder.loadTexts: dF10ETSModuleStatus.setDescription("The ETS(Enhanced Transmission Selection) Module status for the switch. If this object returns with 'disabled', then all the ports have the ETS feature disabled in the system(hardware) and the DCBX state machine has stopped on the ports. If this object returns with 'enabled', then all the ports have the ETS feature enabled in the system(hardware) and the DCBX state machine is running on the ports.")
dF10ETSClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10ETSClearCounters.setStatus('current')
if mibBuilder.loadTexts: dF10ETSClearCounters.setDescription('This object when set to TRUE, clears the following counters for the ETS Module: dF10ETSConfTxTLVCounter, dF10ETSConfRxTLVCounter, dF10ETSConfRxTLVErrors, dF10ETSRecoTxTLVCounter, dF10ETSRecoRxTLVCounter, dF10ETSRecoRxTLVErrors. Setting this object to FALSE has no effect. This object always returns FALSE when read.')
dF10ETSGlobalEnableTrap = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSGlobalEnableTrap.setStatus('current')
if mibBuilder.loadTexts: dF10ETSGlobalEnableTrap.setDescription('This object indicates whether the transmission of TRAP notification messages for ETS feature is enabled or disabled.')
dF10ETSPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2), )
if mibBuilder.loadTexts: dF10ETSPortTable.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortTable.setDescription('ETS Port table contains the ETS (Enhanced Transmission Selection) features information specific to this port. An entry created in this table in the following tables in the standard DCBX Mib for this port. lldpXdot1dcbxConfigTCSupportedTable, lldpXdot1dcbxConfigETSConfigurationTable, lldpXdot1dcbxConfigETSRecommendationTable, lldpXdot1dcbxLocTCSupportedTable, lldpXdot1dcbxLocETSBasicConfigurationTable, lldpXdot1dcbxLocETSConPriorityAssignmentTable, lldpXdot1dcbxLocETSRecommendationTable, lldpXdot1dcbxAdminTCSupportedTable, lldpXdot1dcbxAdminETSBasicConfigurationTable, lldpXdot1dcbxAdminETSConPriorityAssignmentTable, lldpXdot1dcbxAdminETSRecommendationTable. Deletion of entry in this table deletes all the entries in the above tables in the standatd DCBX mib for this port.')
dF10ETSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10ETSPortNumber"))
if mibBuilder.loadTexts: dF10ETSPortEntry.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortEntry.setDescription('An entry containing ETS control parameters and ETS information for a particular port.')
dF10ETSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10ETSPortNumber.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortNumber.setDescription('This indicates the interface identifier for which the ETS configuration is applied.')
dF10ETSAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 2), DcbAdminMode().clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSAdminMode.setStatus('current')
if mibBuilder.loadTexts: dF10ETSAdminMode.setDescription("This object is used to display the Admin mode for ETS feature on the given port. If the mode is 'on(1)',ETS feature is enabled on this port. ETS configurations, either from this system or the remote system will take effect based on DCBX negotiations. If the mode is 'off(2)', ETS feature is disabled on this port. Operational(local) parameters is same as Admin Configuration Parameters. But Operational(local) parameters do not have any impact in the system and dF10ETSOperState is in 'Off' state. dF10ETSDcbxOperState becomes oper up if remote is also disabled. The Operational(local) parameters do not have any impact in the system if this object value is 'on(1)' and dF10ETSModuleStatus is disabled. dF10ETSDcbxOperState will be in 'Off' State.")
dF10ETSDcbxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 3), DcbState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSDcbxOperState.setStatus('current')
if mibBuilder.loadTexts: dF10ETSDcbxOperState.setDescription("This object is used to display the current state of the DCBX state machine for the ETS feature on the given port. If state is Off '(0)', then ETS Operational(local) parameters will be same as ETS Admin Configuration Parameters and will not have any impact in the system(hardware). If state is init '(1)', then ETS Operational(local) parameters will be same as ETS Admin Configuration Parameters. If state is rxrecommended '(2)', then ETS Operational(local) parameters will be same as ETS Remote Parameters. internallypropagated '(3)', In this state all the Operational(local) parameters for the feature will be same as the internal propagated information from the config source.")
dF10ETSDcbxStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 4), DcbStateMachineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSDcbxStateMachine.setStatus('current')
if mibBuilder.loadTexts: dF10ETSDcbxStateMachine.setDescription('This object is used to display the DCBX state machine type that is used by the ETS feature on the given port.')
dF10ETSOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSOperStatus.setStatus('current')
if mibBuilder.loadTexts: dF10ETSOperStatus.setDescription('This object gives information on the operational status of ETS on the given port. Enabled(1) indicates ETS on the port is in sync with the remote and is operationally up. Disabled(2) indicates ETS on the port is operationally disabled.')
dF10ETSClearTLVCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10ETSClearTLVCounters.setStatus('current')
if mibBuilder.loadTexts: dF10ETSClearTLVCounters.setDescription('This object when set to TRUE, clears the following counters associated with a Port: dF10ETSConfTxTLVCounter, dF10ETSConfRxTLVCounter, dF10ETSConfRxTLVErrors, dF10ETSRecoTxTLVCounter, dF10ETSRecoRxTLVCounter, dF10ETSRecoRxTLVErrors. Setting this object to FALSE has no effect. This object always returns FALSE when read.')
dF10ETSConfTxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSConfTxTLVCounter.setStatus('current')
if mibBuilder.loadTexts: dF10ETSConfTxTLVCounter.setDescription('This object is used to keep track of the number of ETS configuration TLV that are transmitted from this port. This counter will be incremented every time when there is ETS Configuration TLV is generated and transmitted to the LLDP.')
dF10ETSConfRxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSConfRxTLVCounter.setStatus('current')
if mibBuilder.loadTexts: dF10ETSConfRxTLVCounter.setDescription('This object is used to keep track of the number of ETS ConfigurationTLV that are received in this port. This counter will be incremented every time when there is ETS Configuration TLV is received from the LLDP.')
dF10ETSConfRxTLVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSConfRxTLVErrors.setStatus('current')
if mibBuilder.loadTexts: dF10ETSConfRxTLVErrors.setDescription('This object is used to keep track of number of malformed ETS Conf TLVs received by ETS. This counter will be incremented every time a ETS Conf TLV is dropped by ETS.')
dF10ETSRecoTxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSRecoTxTLVCounter.setStatus('current')
if mibBuilder.loadTexts: dF10ETSRecoTxTLVCounter.setDescription('This object is used to keep track of the number of ETS Recommendation TLV that are transmitted from this port. This counter will be incremented every time when there is ETS Recommendation TLV is generated and transmitted to the LLDP.')
dF10ETSRecoRxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSRecoRxTLVCounter.setStatus('current')
if mibBuilder.loadTexts: dF10ETSRecoRxTLVCounter.setDescription('This object is used to keep track of the number of ETS Recommendation TLV that are received in this port. This counter will be incremented every time when there is ETS Recommendation TLV is received from the LLDP.')
dF10ETSRecoRxTLVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSRecoRxTLVErrors.setStatus('current')
if mibBuilder.loadTexts: dF10ETSRecoRxTLVErrors.setDescription('This object is used to keep track of number of malformed ETS Reco TLVs received by ETS. This counter will be incremented every time a ETS Reco TLV is dropped by ETS.')
dF10PFCSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("shutdown", 2))).clone('running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCSystemControl.setStatus('current')
if mibBuilder.loadTexts: dF10PFCSystemControl.setDescription("The PFC(Priority Based Flow Control) system control status for the switch. It indicates whether PFC Module in the system is running or shutdown. When this object returns 'running', resources required by PFC module are allocated and the module is running. When this object returns 'shutdown', all the pools used by PFC module are released to the system.")
dF10PFCModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCModuleStatus.setStatus('current')
if mibBuilder.loadTexts: dF10PFCModuleStatus.setDescription("The PFC(Priority Based Flow Control) Module status for the switch. If this object returns with 'disabled', then all the ports have the PFC feature disabled in the system(hardware) and the DCBX state machine has stopped on the ports. If this object returns with 'enabled', then all the ports have the PFC feature enabled in the system(hardware) and the DCBX state machine is running on the ports.")
dF10PFCClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10PFCClearCounters.setStatus('current')
if mibBuilder.loadTexts: dF10PFCClearCounters.setDescription('This object when set to TRUE, clears the following counters for the PFC Module: dF10PFCTxTLVCounter, dF10PFCRxTLVCounter, dF10PFCRxTLVErrors. Setting this object to FALSE has no effect. This object always returns FALSE when read.')
dF10PFCGlobalEnableTrap = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCGlobalEnableTrap.setStatus('current')
if mibBuilder.loadTexts: dF10PFCGlobalEnableTrap.setDescription('This object indicates whether the transmission of TRAP notification messages for PFC feature is enabled or disabled.')
dF10PFCPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2), )
if mibBuilder.loadTexts: dF10PFCPortTable.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortTable.setDescription('PFC Port table contains the PFC (Priortiy Based Flow Control) features information specific to this port. An entry created in the port table populates the entry in this table and in the following tables in the standard DCBX Mib for this port. lldpXdot1dcbxConfigPFCTable, lldpXdot1dcbxLocPFCBasicTable, lldpXdot1dcbxLocPFCEnableTable, lldpXdot1dcbxAdminPFCBasicTable, lldpXdot1dcbxAdminPFCEnableTable. Deletion of entry in the port table deletes the entry in this table and all the entries in the above tables in the standatd DCBX mib for this port.')
dF10PFCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10PFCPortNumber"))
if mibBuilder.loadTexts: dF10PFCPortEntry.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortEntry.setDescription('An entry containing PFC control parameters and PFC information for a particular port.')
dF10PFCPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10PFCPortNumber.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortNumber.setDescription('This indicates the interface identifier for which the PFC configuration is applied.')
dF10PFCAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 2), DcbAdminMode().clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCAdminMode.setStatus('current')
if mibBuilder.loadTexts: dF10PFCAdminMode.setDescription("This object is used to display Admin mode for PFC feature on the given port. If mode is 'on(1)',PFC feature is enabled on this port. PFC configurations, either from this system or the remote system will take effect based on DCBX negotiations. If mode is 'off(2)',PFC feature is disabled on this port. Operational(local) parameters is same as Admin Configuration Parameters. But Operational(local) parameters do not have any impact in the system.dF10PFCDcbxOperState becomes up if remote is also disabled The Operational(local) parameters do not have any impact in the system if this object value is 'on(1)' and dF10PFCModuleStatus is disabled. dF10PFCDcbxOperState will be in 'Off' State.")
dF10PFCDcbxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 3), DcbState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCDcbxOperState.setStatus('current')
if mibBuilder.loadTexts: dF10PFCDcbxOperState.setDescription("This object is used to display the current state of the DCBX state machine for the PFC feature on the given port. If state is Off '(0)', then PFC Operational(local) parameters will be same as PFC Admin Configuration Parameters and will not have any impact in the system(hardware). If state is init '(1)', then PFC Operational(local) parameters will be same as PFC Admin Configuration Parameters. If state is rxrecommended '(2)',then PFC Operational(local) parameters will be same as PFC Remote Parameters. internallypropagated '(3)', In this state all the Operational(local) parameters for the feature will be same as the internal propagated information from the config source.")
dF10PFCDcbxStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 4), DcbStateMachineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCDcbxStateMachine.setStatus('current')
if mibBuilder.loadTexts: dF10PFCDcbxStateMachine.setDescription('This object is used to display the DCBX state machine type that is used by the PFC feature on the given port.')
dF10PFCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCOperStatus.setStatus('current')
if mibBuilder.loadTexts: dF10PFCOperStatus.setDescription('This object gives information on the operational status of PFC on the given port. Enabled(1) indicates PFC on the port is in sync with the remote and is operationally up. Disabled(2) indicates PFC on the port is operationally disabled.')
dF10PFCClearTLVCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10PFCClearTLVCounters.setStatus('current')
if mibBuilder.loadTexts: dF10PFCClearTLVCounters.setDescription('This object when set to TRUE, clears the following counters associated with a Port: dF10PFCTxTLVCounter, dF10PFCRxTLVCounter, dF10PFCRxTLVErrors. Setting this object to FALSE has no effect. This object always returns FALSE when read.')
dF10PFCTxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCTxTLVCounter.setStatus('current')
if mibBuilder.loadTexts: dF10PFCTxTLVCounter.setDescription('This object is used to keep track of the number of PFC TLV that are transmitted from this port. This counter will be incremented every time when there is PFC TLV is generated and transmitted to the LLDP.')
dF10PFCRxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCRxTLVCounter.setStatus('current')
if mibBuilder.loadTexts: dF10PFCRxTLVCounter.setDescription('This object is used to keep track of the number of PFC TLV that are received in this port. This counter will be incremented every time when there is PFC TLV is received from the LLDP.')
dF10PFCRxTLVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCRxTLVErrors.setStatus('current')
if mibBuilder.loadTexts: dF10PFCRxTLVErrors.setDescription('This object is used to keep track of number of malformed TLVs received by PFC. This counter will be incremented every time a PFC-TLV is dropped by PFC.')
dF10DCBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0))
dF10DCBTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 1))
dF10DcbTrapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 1, 1), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dF10DcbTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: dF10DcbTrapPortNumber.setDescription('This object refers to the Port number for which the DCBX feature is enabled. And will be used in sending the feature port specific Traps.')
dF10DcbPeerUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 1, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dF10DcbPeerUpStatus.setStatus('current')
if mibBuilder.loadTexts: dF10DcbPeerUpStatus.setDescription("This object refers to the DCBX Peer Up or Peer down status on the port. If the value is 'true', then the DCBX Peer will be present and UP. If the value is 'false', then the DCBX Peer will be absent and DOWN.")
dF10ETSModuleStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 1)).setObjects(("DF10-DCB-MIB", "dF10ETSModuleStatus"))
if mibBuilder.loadTexts: dF10ETSModuleStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dF10ETSModuleStatusTrap.setDescription('This trap is generated when there is a change in the ETS Module status. This trap is generated only if dF10ETSGlobalEnableTrap is enabled to send the trap.')
dF10ETSPortAdminStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 2)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10ETSAdminMode"))
if mibBuilder.loadTexts: dF10ETSPortAdminStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortAdminStatusTrap.setDescription('This trap is generated in the following conditions. Whenever there is a change in the ETS Admin status and the dF10ETSGlobalEnableTrap is enabled to send the trap for ETS Admin mode change. ')
dF10ETSPortPeerStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 3)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10DcbPeerUpStatus"))
if mibBuilder.loadTexts: dF10ETSPortPeerStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortPeerStatusTrap.setDescription('This trap is generated in the following conditions. Whenever there is a change in the DCBX Peer Status and the dF10ETSGlobalEnableTrap is enabled to send the trap for Peer Up or Peer Down.')
dF10ETSPortDcbxOperStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 4)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10ETSDcbxOperState"))
if mibBuilder.loadTexts: dF10ETSPortDcbxOperStateTrap.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortDcbxOperStateTrap.setDescription('This trap is generated in the following conditions. Whenever there is a change in the ETS Operational State and the dF10ETSGlobalEnableTrap is enabled to send the trap for ETS state machine state change.')
dF10PFCModuleStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 5)).setObjects(("DF10-DCB-MIB", "dF10PFCModuleStatus"))
if mibBuilder.loadTexts: dF10PFCModuleStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dF10PFCModuleStatusTrap.setDescription('This trap is generated when there is a change in the PFC Module status is enabled. This trap is generated only if dF10PFCGlobalEnableTrap is enabled to send the trap.')
dF10PFCPortAdminStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 6)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10PFCAdminMode"))
if mibBuilder.loadTexts: dF10PFCPortAdminStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortAdminStatusTrap.setDescription('This trap is generated in the following conditions. Whenever there is a change in the PFC Admin Status and the dF10PFCGlobalEnableTrap is enabled to send the trap for PFC Admin Status change.')
dF10PFCPortPeerStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 7)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10DcbPeerUpStatus"))
if mibBuilder.loadTexts: dF10PFCPortPeerStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortPeerStatusTrap.setDescription('This trap is generated in the following conditions. Whenever there is a change in the DCBX Peer Status and the dF10PFCGlobalEnableTrap is enabled to send the trap for Peer Up or Peer Down.')
dF10PFCPortDcbxOperStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 8)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10PFCDcbxOperState"))
if mibBuilder.loadTexts: dF10PFCPortDcbxOperStateTrap.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortDcbxOperStateTrap.setDescription('This trap is generated in the following conditions. Whenever there is a change in the PFC Operational State and the dF10PFCGlobalEnableTrap is enabled to send the trap for PFC state machine state change.')
dF10DCBMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5))
dF10DCBMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 1))
dF10DCBMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2))
dF10DCBMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 1, 1)).setObjects(("DF10-DCB-MIB", "dF10DcbSystemObjectGroup"), ("DF10-DCB-MIB", "dF10DcbxScalarsGroup"), ("DF10-DCB-MIB", "dF10DCBXPortTableGroup"), ("DF10-DCB-MIB", "dF10ETSScalarsGroup"), ("DF10-DCB-MIB", "dF10ETSPortTableGroup"), ("DF10-DCB-MIB", "dF10PFCScalarsGroup"), ("DF10-DCB-MIB", "dF10PFCPortTableGroup"), ("DF10-DCB-MIB", "dF10DCBNotificationObjectsGroup"), ("DF10-DCB-MIB", "dF10DCBNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBMibComplianceRev1 = dF10DCBMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: dF10DCBMibComplianceRev1.setDescription('The compliance statement for Dell Networking OS product which implement the Dell Networking OS dcbx MIB. ')
dF10DCBMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 1, 2)).setObjects(("DF10-DCB-MIB", "dF10DcbObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBMibCompliance = dF10DCBMibCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DCBMibCompliance.setDescription('The compliance statement for Dell Networking OS product which implement the Dell Networking OS dcb MIB. This module consists of the obsolete MIB objects.')
dF10DcbSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 1)).setObjects(("DF10-DCB-MIB", "dF10DcbPfcMinThreshold"), ("DF10-DCB-MIB", "dF10DcbPfcMaxThreshold"), ("DF10-DCB-MIB", "dF10DcbMaxPfcProfiles"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DcbSystemObjectGroup = dF10DcbSystemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dF10DcbSystemObjectGroup.setDescription('This group represents a collection of objects providing the DCB system information.')
dF10DcbObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 2)).setObjects(("DF10-DCB-MIB", "dF10DcbETSAdminStatus"), ("DF10-DCB-MIB", "dF10DcbPFCAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DcbObjectGroup = dF10DcbObjectGroup.setStatus('obsolete')
if mibBuilder.loadTexts: dF10DcbObjectGroup.setDescription('This group represents a collection of objects providing the information on the DCB control parameters for a particular port.')
dF10DcbxScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 3)).setObjects(("DF10-DCB-MIB", "dF10DcbxGlobalTraceLevel"), ("DF10-DCB-MIB", "dF10DCBXGlobalVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DcbxScalarsGroup = dF10DcbxScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: dF10DcbxScalarsGroup.setDescription('This group represents the DCBX scalars in the DF10 DCB mib. ')
dF10DCBXPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 4)).setObjects(("DF10-DCB-MIB", "dF10DCBXAdminStatus"), ("DF10-DCB-MIB", "dF10DCBXAutoCfgPortRole"), ("DF10-DCB-MIB", "dF10DCBXPortVersion"), ("DF10-DCB-MIB", "dF10DCBXPortSupportedTLVs"), ("DF10-DCB-MIB", "dF10DCBXPortConfigTLVsTxEnable"), ("DF10-DCB-MIB", "dF10DCBXPortOperVersion"), ("DF10-DCB-MIB", "dF10DCBXPortPeerMACaddress"), ("DF10-DCB-MIB", "dF10DCBXPortCfgSource"), ("DF10-DCB-MIB", "dF10DCBXOperStatus"), ("DF10-DCB-MIB", "dF10DCBXPortMultiplePeerCount"), ("DF10-DCB-MIB", "dF10DCBXPortPeerRemovedCount"), ("DF10-DCB-MIB", "dF10DCBXPortPeerOperVersionNum"), ("DF10-DCB-MIB", "dF10DCBXPortPeerMaxVersion"), ("DF10-DCB-MIB", "dF10DCBXPortSeqNum"), ("DF10-DCB-MIB", "dF10DCBXPortAckNum"), ("DF10-DCB-MIB", "dF10DCBXPortPeerRcvdAckNum"), ("DF10-DCB-MIB", "dF10DCBXPortTxCount"), ("DF10-DCB-MIB", "dF10DCBXPortRxCount"), ("DF10-DCB-MIB", "dF10DCBXPortErrorFramesCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBXPortTableGroup = dF10DCBXPortTableGroup.setStatus('current')
if mibBuilder.loadTexts: dF10DCBXPortTableGroup.setDescription('This group contains the collection of objects describing the DCBX specific information on the particular port. ')
dF10ETSScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 5)).setObjects(("DF10-DCB-MIB", "dF10ETSSystemControl"), ("DF10-DCB-MIB", "dF10ETSModuleStatus"), ("DF10-DCB-MIB", "dF10ETSClearCounters"), ("DF10-DCB-MIB", "dF10ETSGlobalEnableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10ETSScalarsGroup = dF10ETSScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: dF10ETSScalarsGroup.setDescription('This object represents the collection of objects providing the ETS Information on the system.')
dF10ETSPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 6)).setObjects(("DF10-DCB-MIB", "dF10ETSAdminMode"), ("DF10-DCB-MIB", "dF10ETSDcbxOperState"), ("DF10-DCB-MIB", "dF10ETSDcbxStateMachine"), ("DF10-DCB-MIB", "dF10ETSOperStatus"), ("DF10-DCB-MIB", "dF10ETSClearTLVCounters"), ("DF10-DCB-MIB", "dF10ETSConfTxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSConfRxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSConfRxTLVErrors"), ("DF10-DCB-MIB", "dF10ETSRecoTxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSRecoRxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSRecoRxTLVErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10ETSPortTableGroup = dF10ETSPortTableGroup.setStatus('current')
if mibBuilder.loadTexts: dF10ETSPortTableGroup.setDescription('This object group represents the collection of objects providing ETS specific status information on a specific port.')
dF10PFCScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 7)).setObjects(("DF10-DCB-MIB", "dF10PFCSystemControl"), ("DF10-DCB-MIB", "dF10PFCModuleStatus"), ("DF10-DCB-MIB", "dF10PFCClearCounters"), ("DF10-DCB-MIB", "dF10PFCGlobalEnableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10PFCScalarsGroup = dF10PFCScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: dF10PFCScalarsGroup.setDescription('This group represents a collection of objects providing the system information related to PFC.')
dF10PFCPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 8)).setObjects(("DF10-DCB-MIB", "dF10PFCAdminMode"), ("DF10-DCB-MIB", "dF10PFCDcbxOperState"), ("DF10-DCB-MIB", "dF10PFCDcbxStateMachine"), ("DF10-DCB-MIB", "dF10PFCOperStatus"), ("DF10-DCB-MIB", "dF10PFCClearTLVCounters"), ("DF10-DCB-MIB", "dF10PFCTxTLVCounter"), ("DF10-DCB-MIB", "dF10PFCRxTLVCounter"), ("DF10-DCB-MIB", "dF10PFCRxTLVErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10PFCPortTableGroup = dF10PFCPortTableGroup.setStatus('current')
if mibBuilder.loadTexts: dF10PFCPortTableGroup.setDescription('This group represents a collection of objects providing the PFC specific status information per port. ')
dF10DCBNotificationObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 9)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10DcbPeerUpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBNotificationObjectsGroup = dF10DCBNotificationObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: dF10DCBNotificationObjectsGroup.setDescription('This object group represents the collection of objects used by the notification group dF10DCBNotificationsGroup.')
dF10DCBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 10)).setObjects(("DF10-DCB-MIB", "dF10ETSModuleStatusTrap"), ("DF10-DCB-MIB", "dF10ETSPortAdminStatusTrap"), ("DF10-DCB-MIB", "dF10ETSPortPeerStatusTrap"), ("DF10-DCB-MIB", "dF10ETSPortDcbxOperStateTrap"), ("DF10-DCB-MIB", "dF10PFCModuleStatusTrap"), ("DF10-DCB-MIB", "dF10PFCPortAdminStatusTrap"), ("DF10-DCB-MIB", "dF10PFCPortPeerStatusTrap"), ("DF10-DCB-MIB", "dF10PFCPortDcbxOperStateTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBNotificationsGroup = dF10DCBNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: dF10DCBNotificationsGroup.setDescription('A collection on notification objects in the DF10-DCB mib')
mibBuilder.exportSymbols("DF10-DCB-MIB", dF10DCBXPortOperVersion=dF10DCBXPortOperVersion, dF10PFCPortTable=dF10PFCPortTable, dF10DCBXPortVersion=dF10DCBXPortVersion, EnabledStatus=EnabledStatus, dF10DcbxScalarsGroup=dF10DcbxScalarsGroup, dF10DCBXPortConfigTLVsTxEnable=dF10DCBXPortConfigTLVsTxEnable, dF10PFCScalars=dF10PFCScalars, dF10PFCRxTLVErrors=dF10PFCRxTLVErrors, dF10DcbObjects=dF10DcbObjects, dF10DcbObjectGroup=dF10DcbObjectGroup, dF10DCBXPortRxCount=dF10DCBXPortRxCount, DcbAdminMode=DcbAdminMode, dF10DcbTrapPortNumber=dF10DcbTrapPortNumber, dF10PFCPortDcbxOperStateTrap=dF10PFCPortDcbxOperStateTrap, dF10DCBXPortAckNum=dF10DCBXPortAckNum, dF10PFCScalarsGroup=dF10PFCScalarsGroup, dF10PFCPortEntry=dF10PFCPortEntry, dF10ETSDcbxStateMachine=dF10ETSDcbxStateMachine, dF10DCBXPortEntry=dF10DCBXPortEntry, dF10DcbSystem=dF10DcbSystem, dF10PFCTxTLVCounter=dF10PFCTxTLVCounter, dF10DcbETSAdminStatus=dF10DcbETSAdminStatus, dF10PFCGlobalEnableTrap=dF10PFCGlobalEnableTrap, dF10ETSModuleStatus=dF10ETSModuleStatus, dF10ETSRecoRxTLVErrors=dF10ETSRecoRxTLVErrors, dF10ETSModuleStatusTrap=dF10ETSModuleStatusTrap, dF10ETSScalars=dF10ETSScalars, dF10PFCPortAdminStatusTrap=dF10PFCPortAdminStatusTrap, dF10DCBXObjects=dF10DCBXObjects, dF10DCBXAdminStatus=dF10DCBXAdminStatus, dF10ETSOperStatus=dF10ETSOperStatus, dF10PFCSystemControl=dF10PFCSystemControl, dF10DcbPfcMaxThreshold=dF10DcbPfcMaxThreshold, dF10DcbApplicationObjects=dF10DcbApplicationObjects, DcbxPortRole=DcbxPortRole, dF10ETSScalarsGroup=dF10ETSScalarsGroup, dF10DcbPortEntry=dF10DcbPortEntry, dF10DCBXPortTable=dF10DCBXPortTable, dF10DCBXPortStatusEntry=dF10DCBXPortStatusEntry, dF10PFCModuleStatus=dF10PFCModuleStatus, dF10DcbPortNumber=dF10DcbPortNumber, dF10DCBXPortCfgSource=dF10DCBXPortCfgSource, dF10ETSDcbxOperState=dF10ETSDcbxOperState, dF10DCBXOperStatus=dF10DCBXOperStatus, dF10DCBXPortPeerOperVersionNum=dF10DCBXPortPeerOperVersionNum, dF10DCBTraps=dF10DCBTraps, dF10DCBXPortSupportedTLVs=dF10DCBXPortSupportedTLVs, dF10ETSClearCounters=dF10ETSClearCounters, dF10DCBXPortStatusTable=dF10DCBXPortStatusTable, dF10DCBNotificationObjectsGroup=dF10DCBNotificationObjectsGroup, DcbStateMachineType=DcbStateMachineType, dF10ETSRecoTxTLVCounter=dF10ETSRecoTxTLVCounter, dF10DCBXPortTxCount=dF10DCBXPortTxCount, dF10PFCDcbxStateMachine=dF10PFCDcbxStateMachine, dF10ETSGlobalEnableTrap=dF10ETSGlobalEnableTrap, dF10DCBXPortPeerRcvdAckNum=dF10DCBXPortPeerRcvdAckNum, dF10PFCPortPeerStatusTrap=dF10PFCPortPeerStatusTrap, dF10DCBXPortTableGroup=dF10DCBXPortTableGroup, dF10ETSPortTable=dF10ETSPortTable, dF10ETSPortAdminStatusTrap=dF10ETSPortAdminStatusTrap, dF10ETSPortTableGroup=dF10ETSPortTableGroup, dF10DCBXPortSeqNum=dF10DCBXPortSeqNum, DcbState=DcbState, PYSNMP_MODULE_ID=dF10Dcb, dF10ETSPortPeerStatusTrap=dF10ETSPortPeerStatusTrap, dF10DCBMibComplianceRev1=dF10DCBMibComplianceRev1, dF10ETSClearTLVCounters=dF10ETSClearTLVCounters, dF10DCBXPortPeerMACaddress=dF10DCBXPortPeerMACaddress, dF10PFCModuleStatusTrap=dF10PFCModuleStatusTrap, dF10DCBMibGroups=dF10DCBMibGroups, dF10PFCObjects=dF10PFCObjects, dF10Dcb=dF10Dcb, dF10DcbPFCAdminStatus=dF10DcbPFCAdminStatus, dF10DcbMaxPfcProfiles=dF10DcbMaxPfcProfiles, DcbxVersion=DcbxVersion, dF10DCBMibCompliances=dF10DCBMibCompliances, dF10DCBNotificationsGroup=dF10DCBNotificationsGroup, dF10DCBXPortErrorFramesCount=dF10DCBXPortErrorFramesCount, dF10ETSAdminMode=dF10ETSAdminMode, dF10DCBXAutoCfgPortRole=dF10DCBXAutoCfgPortRole, dF10PFCOperStatus=dF10PFCOperStatus, dF10PFCDcbxOperState=dF10PFCDcbxOperState, dF10DCBMibCompliance=dF10DCBMibCompliance, dF10ETSObjects=dF10ETSObjects, dF10DcbPfcMinThreshold=dF10DcbPfcMinThreshold, dF10DCBXScalars=dF10DCBXScalars, dF10ETSPortEntry=dF10ETSPortEntry, dF10ETSConfTxTLVCounter=dF10ETSConfTxTLVCounter, dF10ETSPortNumber=dF10ETSPortNumber, dF10ETSConfRxTLVErrors=dF10ETSConfRxTLVErrors, dF10PFCPortTableGroup=dF10PFCPortTableGroup, dF10PFCClearTLVCounters=dF10PFCClearTLVCounters, dF10DcbxGlobalTraceLevel=dF10DcbxGlobalTraceLevel, dF10DcbNotificationObjects=dF10DcbNotificationObjects, dF10DCBXPortPeerRemovedCount=dF10DCBXPortPeerRemovedCount, dF10DCBMibConformance=dF10DCBMibConformance, dF10PFCClearCounters=dF10PFCClearCounters, dF10DcbPortTable=dF10DcbPortTable, dF10ETSRecoRxTLVCounter=dF10ETSRecoRxTLVCounter, dF10DCBXGlobalVersion=dF10DCBXGlobalVersion, dF10DCBTrapObjects=dF10DCBTrapObjects, dF10DcbPeerUpStatus=dF10DcbPeerUpStatus, dF10ETSConfRxTLVCounter=dF10ETSConfRxTLVCounter, dF10PFCAdminMode=dF10PFCAdminMode, dF10PFCPortNumber=dF10PFCPortNumber, dF10DCBXPortPeerMaxVersion=dF10DCBXPortPeerMaxVersion, dF10ETSSystemControl=dF10ETSSystemControl, dF10DCBXPortMultiplePeerCount=dF10DCBXPortMultiplePeerCount, dF10ETSPortDcbxOperStateTrap=dF10ETSPortDcbxOperStateTrap, dF10PFCRxTLVCounter=dF10PFCRxTLVCounter, dF10DcbSystemObjectGroup=dF10DcbSystemObjectGroup, dF10DCBXPortNumber=dF10DCBXPortNumber)
