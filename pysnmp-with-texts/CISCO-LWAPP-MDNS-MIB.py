#
# PySNMP MIB module CISCO-LWAPP-MDNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MDNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, iso, NotificationType, Gauge32, Unsigned32, IpAddress, MibIdentifier, Counter32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "NotificationType", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "Counter32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Counter64")
DisplayString, RowStatus, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "MacAddress")
ciscoLwappMdnsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 99994))
ciscoLwappMdnsMIB.setRevisions(('2012-07-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMdnsMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMdnsMIB.setLastUpdated('201207040000Z')
if mibBuilder.loadTexts: ciscoLwappMdnsMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMdnsMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMdnsMIB.setDescription("Multicast DNS (mDNS) is a way of using familiar Domain Name System (DNS) programming interfaces, packet formats and operating, without configuring a conventional DNS server. It is useful in small networks without a DNS server, but can also work in environments beside a DNS server. mDNS functionality is provided using IP multicast over User Datagram Protocol (UDP). The mDNS protocol is used by Apple's Bonjour, Linux Avahi, and Oracle Grid Naming Service (GNS) service discovery systems. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected to. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the controllers. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. AVC - Application Visiblity and Control. The client application or protocol statistics and control.")
ciscoLwappMdnsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 0))
ciscoLwappMdnsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1))
ciscoLwappMdnsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 2))
clMdnsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1))
clMdnsGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 1))
clMdnsSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMdnsSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: clMdnsSnoopingEnabled.setDescription("This object specifies whether Mdns Snooping is enabled or disabled on the controller. A value of 'true' specifies that Mdns Snooping is enabled and a value of 'false' specifies that Mdns Snooping is disabled on the controller.")
clMdnsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 1, 2), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMdnsQueryInterval.setStatus('current')
if mibBuilder.loadTexts: clMdnsQueryInterval.setDescription('This object specifies the Mdns query interval, in minutes. To set this value, clMdnsSnoopingEnabled must be set to True.')
clMdnsMasterServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 2), )
if mibBuilder.loadTexts: clMdnsMasterServiceTable.setStatus('current')
if mibBuilder.loadTexts: clMdnsMasterServiceTable.setDescription('This table represents the configuration of all the Mdns Services supported on the Wireless LAN Controller(WLC).')
clMdnsMasterServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "clMdnsServiceName"))
if mibBuilder.loadTexts: clMdnsMasterServiceEntry.setStatus('current')
if mibBuilder.loadTexts: clMdnsMasterServiceEntry.setDescription('This represents an entry in the clMdnsMasterServiceTable. Each entry corresponds to a service, indicated by clMdnsServiceName.')
clMdnsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: clMdnsServiceName.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceName.setDescription('This object represents the name of the mdns service added on the controller.')
clMdnsServiceString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMdnsServiceString.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceString.setDescription('This object represents the service string defined for the mdns service added on the controller.')
clMdnsServiceQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMdnsServiceQueryStatus.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceQueryStatus.setDescription('This object indicates whether the service represented by clMdnsServiceName, will be queried by the WLC.')
clMdnsServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMdnsServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceRowStatus.setDescription('This object is used to add or delete entries in clMdnsMasterServiceTable')
clMdnsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3), )
if mibBuilder.loadTexts: clMdnsProfileTable.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileTable.setDescription('This table represents the configuration of all the Mdns profiles on the Wireless LAN Controller(WLC).')
clMdnsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "clMdnsProfileName"))
if mibBuilder.loadTexts: clMdnsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileEntry.setDescription('This represents an entry in the clMdnsProfileTable. Each entry corresponds to a mdns profiles, indicated by clMdnsProfileName.')
clMdnsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: clMdnsProfileName.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileName.setDescription('This object represents the name of the mdns profile added on the controller.')
clMdnsProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMdnsProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileRowStatus.setDescription('This object is used to add or delete entries in clMdnsProfileTable')
clMdnsProfileWlanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsProfileWlanCount.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileWlanCount.setDescription('This object specifies the number of WLANs on which the profile is attached.')
clMdnsProfileInterfaceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsProfileInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileInterfaceCount.setDescription('This object specifies the number of Interfaces on which the profile is attached.')
clMdnsProfileInterfaceGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsProfileInterfaceGrpCount.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileInterfaceGrpCount.setDescription('This object specifies the number of Inteface groups on which the profile is attached.')
clMdnsProfileServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 4), )
if mibBuilder.loadTexts: clMdnsProfileServiceTable.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileServiceTable.setDescription('This table represents the configuration of all the Services added to Mdns profiles on the Wireless LAN Controller(WLC).')
clMdnsProfileServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "clMdnsProfileName"), (0, "CISCO-LWAPP-MDNS-MIB", "clMdnsServiceName"))
if mibBuilder.loadTexts: clMdnsProfileServiceEntry.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileServiceEntry.setDescription('This represents an entry in the clMdnsProfileServiceTable. Each entry corresponds to a service in the mdns profile.')
clMdnsProfileServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMdnsProfileServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: clMdnsProfileServiceRowStatus.setDescription('This object is used to add or delete entries in clMdnsProfileServiceTable.')
clMdnsServiceProviderTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5), )
if mibBuilder.loadTexts: clMdnsServiceProviderTable.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderTable.setDescription('This table represents the list of all the Service providers who have advertised Mdns services on the Wireless LAN Controller(WLC).')
clMdnsServiceProviderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "clMdnsServiceName"), (0, "CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderIndex"))
if mibBuilder.loadTexts: clMdnsServiceProviderEntry.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderEntry.setDescription('This represents an entry in the clMdnsServiceProviderTable. Each entry corresponds to a service Povider.')
clMdnsServiceProviderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clMdnsServiceProviderIndex.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderIndex.setDescription('This object specifies a unique index assigned by the wireless controller when the service provider entry is added.')
clMdnsServiceProviderMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsServiceProviderMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderMacAddress.setDescription('This object specifies the hardware address of the service provider machine.')
clMdnsServiceProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsServiceProviderName.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderName.setDescription('This object specifies the hostname assigned to the service provider machine.')
clMdnsServiceProviderVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsServiceProviderVlan.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderVlan.setDescription('This object specifies the VLAN on which the service provider is operating.')
clMdnsServiceProviderType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wireless", 1), ("wired", 2), ("wired-guest", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsServiceProviderType.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderType.setDescription('This object specifies whether the the service provider is operating in a wired or wireless network.')
clMdnsServiceProviderTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsServiceProviderTtl.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderTtl.setDescription('This object specifies the TTL (time to live) value in secondes, assigned when the service provider entry is added. The entry will be removed from the control on expiry of this.')
clMdnsServiceProviderTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 5, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsServiceProviderTimeLeft.setStatus('current')
if mibBuilder.loadTexts: clMdnsServiceProviderTimeLeft.setDescription('This object specifies the Time left before the entry is removed from the controller.')
clMdnsDnipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6), )
if mibBuilder.loadTexts: clMdnsDnipTable.setStatus('current')
if mibBuilder.loadTexts: clMdnsDnipTable.setDescription('This table represents the list of all the Domain Name IP entries on the Wireless LAN Controller(WLC). The entries are learnt from the mDNS advertisements')
clMdnsDnipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "clMdnsDomainName"))
if mibBuilder.loadTexts: clMdnsDnipEntry.setStatus('current')
if mibBuilder.loadTexts: clMdnsDnipEntry.setDescription('This represents an entry in the clMdnsDnipTable. Each entry corresponds to a Domain Name IP entry.')
clMdnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: clMdnsDomainName.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainName.setDescription('This object specifies the domain name added on the controller.')
clMdnsDomainMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainMacAddress.setDescription('This object specifies the hardware address of the service provider machine.')
clMdnsDomainIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainIpAddressType.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainIpAddressType.setDescription('This object specifies the IP address type assigned to the domain.')
clMdnsDomainIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainIpAddress.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainIpAddress.setDescription('This object specifies the IP address assigned to the domain.')
clMdnsDomainVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainVlan.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainVlan.setDescription('This object specifies the VLAN on which the domain is operating.')
clMdnsDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wireless", 1), ("wired", 2), ("wired-guest", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainType.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainType.setDescription('This object specifies whether the the Domain name IP entry is a wired, wireless or wired-guest host.')
clMdnsDomainEntryTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainEntryTtl.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainEntryTtl.setDescription('This object specifies the TTL (time to live) value in secondes, assigned when the domain entry is added. The entry will be removed from the control on expiry of this.')
clMdnsDomainEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 6, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMdnsDomainEntryTimeLeft.setStatus('current')
if mibBuilder.loadTexts: clMdnsDomainEntryTimeLeft.setDescription('This object specifies the Time left before the entry is removed from the controller.')
cLMdnsServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 7), )
if mibBuilder.loadTexts: cLMdnsServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupTable.setDescription('The table contains the Service group information. Service group is group of devices and Location. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLMdnsServiceGroupRowStatus object.')
cLMdnsServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "cLMdnsServiceGroupName"))
if mibBuilder.loadTexts: cLMdnsServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupEntry.setDescription('An entry in cLMdnsServiceGroupTable')
cLMdnsServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256)))
if mibBuilder.loadTexts: cLMdnsServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupName.setDescription('This object defines name of the group and it is unique')
cLMdnsServiceGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupDescription.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupDescription.setDescription('This object defines the description of the group name ')
cLMdnsServiceGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupRowStatus.setDescription('Row Status for creation/deletion of a particular venue entry in the table.')
cLMdnsServiceGroupDeviceMacTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8), )
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMacTable.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMacTable.setDescription('The table contains set of Devices and device group map to a service group. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLMdnsServiceGroupDeviceMacRowStatus object.')
cLMdnsServiceGroupDeviceMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "cLMdnsServiceGroupName"), (0, "CISCO-LWAPP-MDNS-MIB", "cLMdnsServiceGroupDeviceMac"))
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMacEntry.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMacEntry.setDescription('An entry in cLMdnsServiceGroupDeviceMacTable')
cLMdnsServiceGroupDeviceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMac.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMac.setDescription('This object defines the device MAC of the device which is grouped in service group.')
cLMdnsServiceGroupDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceName.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceName.setDescription('This object defines the unique device name of the device.')
cLMdnsServiceGroupLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupLocationName.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupLocationName.setDescription('This object defines the location of the device.')
cLMdnsServiceGroupLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("apName", 1), ("apGroup", 2), ("apLocation", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupLocationType.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupLocationType.setDescription('This object list the location type provided by the service provider (device).')
cLMdnsServiceGroupDeviceMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupDeviceMacRowStatus.setDescription('Row Status for creation/deletion of a particular venue entry in the table.')
cLMdnsServiceGroupRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 9), )
if mibBuilder.loadTexts: cLMdnsServiceGroupRuleTable.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupRuleTable.setDescription('This table is for the mapping Service group to a Rule or set of rules. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLMdnsServiceGroupRuleRowStatus object.')
cLMdnsServiceGroupRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-LWAPP-MDNS-MIB", "cLMdnsServiceGroupName"), (0, "CISCO-LWAPP-MDNS-MIB", "cLMdnsRuleName"))
if mibBuilder.loadTexts: cLMdnsServiceGroupRuleEntry.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupRuleEntry.setDescription('An entry in cLMdnsServiceGroupRuleTable')
cLMdnsRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 266)))
if mibBuilder.loadTexts: cLMdnsRuleName.setStatus('current')
if mibBuilder.loadTexts: cLMdnsRuleName.setDescription('This object uniquely identifies a Rule which is Added to a Rule table.')
cLMdnsRuleRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsRuleRole.setStatus('current')
if mibBuilder.loadTexts: cLMdnsRuleRole.setDescription('This object defines the set of roles apply to the Service group.')
cLMdnsRuleUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsRuleUserId.setStatus('current')
if mibBuilder.loadTexts: cLMdnsRuleUserId.setDescription('This object defines the set of userIds apply to the service group.')
cLMdnsServiceGroupRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99994, 1, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMdnsServiceGroupRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMdnsServiceGroupRuleRowStatus.setDescription('Row Status for creation/deletion of a particular venue entry in the table.')
ciscoLwappMdnsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 2, 1))
ciscoLwappMdnsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99994, 2, 2))
ciscoLwappMdnsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 99994, 2, 1, 1)).setObjects(("CISCO-LWAPP-MDNS-MIB", "cLMdnsConfigGroup"), ("CISCO-LWAPP-MDNS-MIB", "cLMdnsMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMdnsMIBCompliance = ciscoLwappMdnsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMdnsMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMdnsMIB module.')
cLMdnsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99994, 2, 2, 1)).setObjects(("CISCO-LWAPP-MDNS-MIB", "clMdnsSnoopingEnabled"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsQueryInterval"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceName"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceString"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceQueryStatus"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceRowStatus"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsProfileName"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsProfileRowStatus"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsProfileServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLMdnsConfigGroup = cLMdnsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cLMdnsConfigGroup.setDescription('This is a collection of objects which can be used to control Mdns parameters.')
cLMdnsMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99994, 2, 2, 2)).setObjects(("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderIndex"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderMacAddress"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderName"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderVlan"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderType"), ("CISCO-LWAPP-MDNS-MIB", "clMdnsServiceProviderTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLMdnsMonitorGroup = cLMdnsMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: cLMdnsMonitorGroup.setDescription('This is a collection of objects which can be used to monitor Mdns parameters.')
mibBuilder.exportSymbols("CISCO-LWAPP-MDNS-MIB", clMdnsQueryInterval=clMdnsQueryInterval, clMdnsDomainMacAddress=clMdnsDomainMacAddress, clMdnsMasterServiceEntry=clMdnsMasterServiceEntry, cLMdnsServiceGroupRuleTable=cLMdnsServiceGroupRuleTable, cLMdnsConfigGroup=cLMdnsConfigGroup, clMdnsGlobalConfig=clMdnsGlobalConfig, clMdnsServiceProviderIndex=clMdnsServiceProviderIndex, cLMdnsServiceGroupEntry=cLMdnsServiceGroupEntry, clMdnsDomainEntryTtl=clMdnsDomainEntryTtl, ciscoLwappMdnsMIBCompliances=ciscoLwappMdnsMIBCompliances, clMdnsProfileEntry=clMdnsProfileEntry, clMdnsServiceProviderEntry=clMdnsServiceProviderEntry, clMdnsServiceProviderName=clMdnsServiceProviderName, cLMdnsMonitorGroup=cLMdnsMonitorGroup, clMdnsServiceName=clMdnsServiceName, clMdnsDomainVlan=clMdnsDomainVlan, ciscoLwappMdnsMIBNotifs=ciscoLwappMdnsMIBNotifs, clMdnsServiceProviderMacAddress=clMdnsServiceProviderMacAddress, clMdnsProfileWlanCount=clMdnsProfileWlanCount, cLMdnsServiceGroupLocationType=cLMdnsServiceGroupLocationType, cLMdnsServiceGroupTable=cLMdnsServiceGroupTable, cLMdnsServiceGroupLocationName=cLMdnsServiceGroupLocationName, cLMdnsRuleName=cLMdnsRuleName, clMdnsServiceProviderTtl=clMdnsServiceProviderTtl, clMdnsProfileInterfaceCount=clMdnsProfileInterfaceCount, clMdnsDomainName=clMdnsDomainName, cLMdnsServiceGroupDeviceMacTable=cLMdnsServiceGroupDeviceMacTable, clMdnsConfigObjects=clMdnsConfigObjects, ciscoLwappMdnsMIBConform=ciscoLwappMdnsMIBConform, clMdnsProfileServiceRowStatus=clMdnsProfileServiceRowStatus, cLMdnsServiceGroupDeviceName=cLMdnsServiceGroupDeviceName, clMdnsDomainIpAddressType=clMdnsDomainIpAddressType, cLMdnsRuleRole=cLMdnsRuleRole, cLMdnsServiceGroupDeviceMacRowStatus=cLMdnsServiceGroupDeviceMacRowStatus, ciscoLwappMdnsMIBObjects=ciscoLwappMdnsMIBObjects, cLMdnsServiceGroupRuleEntry=cLMdnsServiceGroupRuleEntry, clMdnsProfileInterfaceGrpCount=clMdnsProfileInterfaceGrpCount, clMdnsProfileName=clMdnsProfileName, clMdnsProfileTable=clMdnsProfileTable, clMdnsServiceQueryStatus=clMdnsServiceQueryStatus, clMdnsServiceRowStatus=clMdnsServiceRowStatus, clMdnsMasterServiceTable=clMdnsMasterServiceTable, cLMdnsServiceGroupRuleRowStatus=cLMdnsServiceGroupRuleRowStatus, cLMdnsServiceGroupDescription=cLMdnsServiceGroupDescription, clMdnsProfileServiceEntry=clMdnsProfileServiceEntry, clMdnsDnipTable=clMdnsDnipTable, clMdnsDnipEntry=clMdnsDnipEntry, clMdnsProfileRowStatus=clMdnsProfileRowStatus, clMdnsServiceString=clMdnsServiceString, clMdnsDomainIpAddress=clMdnsDomainIpAddress, clMdnsServiceProviderTable=clMdnsServiceProviderTable, ciscoLwappMdnsMIB=ciscoLwappMdnsMIB, PYSNMP_MODULE_ID=ciscoLwappMdnsMIB, clMdnsDomainType=clMdnsDomainType, clMdnsDomainEntryTimeLeft=clMdnsDomainEntryTimeLeft, cLMdnsServiceGroupName=cLMdnsServiceGroupName, clMdnsProfileServiceTable=clMdnsProfileServiceTable, cLMdnsServiceGroupDeviceMacEntry=cLMdnsServiceGroupDeviceMacEntry, clMdnsServiceProviderVlan=clMdnsServiceProviderVlan, cLMdnsRuleUserId=cLMdnsRuleUserId, clMdnsServiceProviderTimeLeft=clMdnsServiceProviderTimeLeft, cLMdnsServiceGroupDeviceMac=cLMdnsServiceGroupDeviceMac, ciscoLwappMdnsMIBCompliance=ciscoLwappMdnsMIBCompliance, cLMdnsServiceGroupRowStatus=cLMdnsServiceGroupRowStatus, clMdnsSnoopingEnabled=clMdnsSnoopingEnabled, clMdnsServiceProviderType=clMdnsServiceProviderType, ciscoLwappMdnsMIBGroups=ciscoLwappMdnsMIBGroups)
