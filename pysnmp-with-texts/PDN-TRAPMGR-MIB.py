#
# PySNMP MIB module PDN-TRAPMGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-TRAPMGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
pdn_traps, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-traps")
SwitchState, = mibBuilder.importSymbols("PDN-TC", "SwitchState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, ObjectIdentity, MibIdentifier, NotificationType, iso, Counter32, TimeTicks, ModuleIdentity, Gauge32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "ObjectIdentity", "MibIdentifier", "NotificationType", "iso", "Counter32", "TimeTicks", "ModuleIdentity", "Gauge32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
devTrapMgrMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devTrapMgrMaxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrMaxNumber.setDescription('Maximum number of managers allowed in the devTrapMgrTable. This may vary per device.')
devTrapMgrCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devTrapMgrCurrentNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrCurrentNumber.setDescription('Current number of managers in devTrapMgrTable.')
devTrapMgrTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 3), )
if mibBuilder.loadTexts: devTrapMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrTable.setDescription('The trap manager table.')
devTrapMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 3, 1), ).setIndexNames((0, "PDN-TRAPMGR-MIB", "devTrapMgrIpAddress"))
if mibBuilder.loadTexts: devTrapMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrEntry.setDescription('An entry in the trap manager table.')
devTrapMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devTrapMgrIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrIpAddress.setDescription('Unique IP address identifying a Trap Manager. An existing Trap Manager may be deleted by setting the devTrapMgrIpAddress object to 0.0.0.0 or by setting the devTrapMgrIpAddress object to a new address. A new Trap Manager may be added by setting the devTrapMgrIpAddress object of 0.0.0.0 to the new address as long as there is still room for another Trap Manager.')
devTrapMgrDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devTrapMgrDestination.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrDestination.setDescription('The ifIndex to be used with the associated IpAddress when sending traps.')
devTrapMgrCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devTrapMgrCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrCircuit.setDescription('The circuit used for management when multiple circuits are allowed over the specified interface (ifIndex). If the interface allows only one circuit, devTrapMgrCircuit is set to 0.')
devTrapMgrSubCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devTrapMgrSubCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: devTrapMgrSubCircuit.setDescription('The subcircuit used for management when devTrapMgrCircuit can be further subdivided.')
pdnDevTrapMgrTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4), )
if mibBuilder.loadTexts: pdnDevTrapMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrTable.setDescription("The paradyne's device trap manager table.")
pdnDevTrapMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1), ).setIndexNames((0, "PDN-TRAPMGR-MIB", "pdnDevTrapMgrDestAddress"), (0, "PDN-TRAPMGR-MIB", "pdnDevTrapMgrSubnetMask"))
if mibBuilder.loadTexts: pdnDevTrapMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrEntry.setDescription('An entry of a trap manager configuration.')
pdnDevTrapMgrDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDevTrapMgrDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrDestAddress.setDescription('The IP Address of the destination to which a trap must be sent.')
pdnDevTrapMgrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDevTrapMgrSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrSubnetMask.setDescription('This object is used to specify the subnet mask')
pdnDevTrapMgrDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1, 3), Integer32().clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDevTrapMgrDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrDestPort.setDescription('The Port destination used to send the trap.')
pdnDevTrapMgrCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDevTrapMgrCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrCommunityName.setDescription('This object corresponds to the name of the SNMP Community that will be used when sending the trap out to this manager destination.')
pdnDevTrapMgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDevTrapMgrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrEnable.setDescription('This object corresponds to turning traps on/off for a particular destination. enable (1) - traps will be sent to the specified destination. disable (2)- traps will not be sent to the specified destination.')
pdnDevTrapMgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDevTrapMgrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevTrapMgrRowStatus.setDescription('This object is used to add/delete rows to/from the table.')
pdnDevConfigTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 9, 5), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDevConfigTrapsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pdnDevConfigTrapsEnable.setDescription(' This objects allows NMS to turn off/on the generation of Traps in the device.')
mibBuilder.exportSymbols("PDN-TRAPMGR-MIB", devTrapMgrMaxNumber=devTrapMgrMaxNumber, pdnDevTrapMgrSubnetMask=pdnDevTrapMgrSubnetMask, pdnDevTrapMgrTable=pdnDevTrapMgrTable, pdnDevTrapMgrDestPort=pdnDevTrapMgrDestPort, devTrapMgrEntry=devTrapMgrEntry, pdnDevTrapMgrDestAddress=pdnDevTrapMgrDestAddress, pdnDevTrapMgrCommunityName=pdnDevTrapMgrCommunityName, devTrapMgrIpAddress=devTrapMgrIpAddress, devTrapMgrCurrentNumber=devTrapMgrCurrentNumber, devTrapMgrDestination=devTrapMgrDestination, devTrapMgrSubCircuit=devTrapMgrSubCircuit, pdnDevTrapMgrEntry=pdnDevTrapMgrEntry, devTrapMgrTable=devTrapMgrTable, pdnDevTrapMgrRowStatus=pdnDevTrapMgrRowStatus, pdnDevTrapMgrEnable=pdnDevTrapMgrEnable, devTrapMgrCircuit=devTrapMgrCircuit, pdnDevConfigTrapsEnable=pdnDevConfigTrapsEnable)
