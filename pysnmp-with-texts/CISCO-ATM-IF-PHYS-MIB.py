#
# PySNMP MIB module CISCO-ATM-IF-PHYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-IF-PHYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, TimeTicks, MibIdentifier, IpAddress, Gauge32, Integer32, ObjectIdentity, NotificationType, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "MibIdentifier", "IpAddress", "Gauge32", "Integer32", "ObjectIdentity", "NotificationType", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoAtmIfPhysMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 45))
ciscoAtmIfPhysMIB.setRevisions(('1996-09-19 00:00', '1996-08-08 00:00', '1995-12-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmIfPhysMIB.setRevisionsDescriptions(('Added DS1/E1 stuff.', 'Added network clock source configuration and other physical layer configuration.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAtmIfPhysMIB.setLastUpdated('9609190000Z')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIB.setDescription('A minimal set of managed objects for tracking the status of DS3/E3/DS1/E1 and SONET interfaces.')
ciscoAtmIfPhysMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 45, 1))
ciscoAtmIfPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1), )
if mibBuilder.loadTexts: ciscoAtmIfPhysTable.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysTable.setDescription('A table containing basic status and statistics for the physical layer of ATM interfaces.')
ciscoAtmIfPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoAtmIfPhysEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysEntry.setDescription('Basic status and statistics for the physical layer of an ATM interface.')
ciscoAtmIfPhysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais", 5), ("yellowLine", 6), ("yellowPath", 7), ("lop", 8), ("idle", 9), ("yellowAlarm", 10), ("plcpLOF", 11), ("plcpYellow", 12), ("maFERF", 13), ("pathAis", 14), ("ocd", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysStatus.setDescription("The status of the physical interface. The value of this object is only valid when the interface's ifAdminStatus has the value 'up'. Note that some of the enumerated values are specific to a particular physical layer.")
ciscoAtmIfPhysSectionParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysSectionParityErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysSectionParityErrors.setDescription('The number of B1 (BIP) errors on the physical interface. This object is only present for SONET interfaces.')
ciscoAtmIfPhysLineParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysLineParityErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysLineParityErrors.setDescription('The number of B2 (BIP) errors on the physical interface. This object is only present for SONET interfaces.')
ciscoAtmIfPhysPathParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysPathParityErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysPathParityErrors.setDescription('The number of B3 (BIP) errors on the physical interface. This object is only present for SONET interfaces.')
ciscoAtmIfPhysLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysLcvErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysLcvErrors.setDescription('The number of Line Code Violation errors on the physical interface. This object is only present for DS3/E3/DS1/E1 interfaces.')
ciscoAtmIfPhysCBitParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysCBitParityErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysCBitParityErrors.setDescription('The number of C-bit parity violations on the physical interface. This object is only present for DS3 interfaces.')
ciscoAtmIfPhysPBitParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysPBitParityErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysPBitParityErrors.setDescription('The number of P-bit parity violations or E3 G.832 BIP-8 errors on the physical interface. This object is present only for DS3/E3 interfaces.')
ciscoAtmIfPhysPlcpBipViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysPlcpBipViolations.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysPlcpBipViolations.setDescription('The number of PLCP BIP violations on the physical interface. This object is only present for DS3/E3/DS1/E1 interfaces.')
ciscoAtmIfPhysLineFebeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysLineFebeErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysLineFebeErrors.setDescription('The number of Z2 (Line FEBE) errors on the physical interface. This object is only present for SONET interfaces.')
ciscoAtmIfPhysPathFebeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysPathFebeErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysPathFebeErrors.setDescription('The number of G1 (Path FEBE) errors on the physical interface. This object is only present for SONET interfaces.')
ciscoAtmIfPhysCellPayloadScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysCellPayloadScrambling.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysCellPayloadScrambling.setDescription('The status of whether cell payload scrambling is enabled or disabled on the physical interface.')
ciscoAtmIfPhysStsStreamScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysStsStreamScrambling.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysStsStreamScrambling.setDescription('The status of whether STS-stream scrambling is enabled or disabled on the physical interface.')
ciscoAtmIfPhysFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ("ds3m23adm", 3), ("ds3m23plcp", 4), ("ds3cbitadm", 5), ("ds3cbitplcp", 6), ("e3g832adm", 7), ("e3g751adm", 8), ("e3g751plcp", 9), ("ds1sfadm", 10), ("ds1esfadm", 11), ("ds1sfplcp", 12), ("ds1esfplcp", 13), ("e1adm", 14), ("e1plcp", 15), ("e1crcadm", 16), ("e1crcplcp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysFramingMode.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysFramingMode.setDescription("The framing format present on the physical interface. 'sonet' indicates sts-3c or sts-12c format and applies only to OC-3 and OC-12 type interfaces, respectively. 'sdh' indicates stm1 or stm4 format and applies only to OC-3 and OC-12 type interfaces, respectively. 'ds3m23adm' indicates M23 ADM mode and applies only to DS3 type interfaces. 'ds3m23plcp' indicates M23 PLCP mode and applies only to DS3 type interfaces. 'ds3cbitadm' indicates C-BIT ADM mode and applies only to DS3 type interfaces. 'ds3cbitplcp' indicates C-BIT PLCP mode and applies only to DS3 type interfaces. 'e3g832adm' indicates G.832 ADM mode and applies only to E3 type interfaces. 'e3g751adm' indicates G.751 ADM mode and applies only to E3 type interfaces. 'e3g751plcp' indicates G.751 PLCP mode and applies only to E3 type interfaces. 'ds1sfadm' indicates DS1 SF ADM mode and applies only to DS1 type interfaces. 'ds1esfadm' indicates DS1 ESF ADM mode and applies only to DS1 type interfaces. 'ds1sfplcp' indicates DS1 SF PLCP mode and applies only to DS1 type interfaces. 'ds1esfplcp' indicates DS1 ESF PLCP mode and applies only to DS1 type interfaces. 'e1adm' indicates E1 ADM mode and applies only to E1 type interfaces. 'e1plcp' indicates E1 PLCP mode and applies only to E1 type interfaces. 'e1crcadm' indicates E1 CRC-4 ADM mode and applies only to E1 type interfaces. 'e1crcplcp' indicates E1 CRC-4 PLCP mode and applies only to E1 type interfaces.")
ciscoAtmIfPhysLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("diagnosticLoop", 2), ("lineLoop", 3), ("otherLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysLoopbackConfig.setDescription("The loopback configured on the physical interface: 'noLoop' indicates no loopback is present. 'diagnosticLoop' indicates transmit data stream is looped to the receive direction. 'lineLoop' indicates receive data stream is looped to the transmit direction. 'otherLoop' indicates loopbacks that are not defined here. ")
ciscoAtmIfPhysLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("e3AllCables", 1), ("ds3CablesUnder225", 2), ("ds3CablesOver225", 3), ("ds1Cables0To110", 4), ("ds1Cables110To220", 5), ("ds1Cables220To330", 6), ("ds1Cables330To440", 7), ("ds1Cables440To550", 8), ("ds1Cables550To660", 9), ("ds1CablesOver600", 10), ("e1AllCables", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysLineBuildOut.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysLineBuildOut.setDescription("The line buildout configured on the transmit signal: 'e3AllCables' applies to all cables of E3 physical interfaces. 'ds3CablesUnder225' applies to cables under 225 feet of DS3 physical interfaces. 'ds3CablesOver225' applies to cables over 225 feet of DS3 physical interfaces. 'ds1Cables0To110' applies to cables 0 to 110 feet of DS1 physical interfaces. 'ds1Cables110To220' applies to cables 110 to 220 feet of DS1 physical interfaces. 'ds1Cables220To330' applies to cables 220 to 330 feet of DS1 physical interfaces. 'ds1Cables330To440' applies to cables 330 to 440 feet of DS1 physical interfaces. 'ds1Cables440To550' applies to cables 440 to 550 feet of DS1 physical interfaces. 'ds1Cables550To660' applies to cables 550 to 660 feet of DS1 physical interfaces. 'ds1CablesOver600' applies to cables over 600 feet of DS1 physical interfaces. 'e1AllCables' applies to all cables of E1 physical interfaces. ")
ciscoAtmIfPhysTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("freeRunning", 2), ("networkDerived", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysTransmitClockSource.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysTransmitClockSource.setDescription("The source of the tranmit clock: 'loopTiming' indicates that the recovered receive clock is used as the transmit clock. 'freeRunning' indicates that a local clock source is used. 'networkDerived' indicates that recovered receive clock from another interface is used as the transmit clock source. ")
ciscoAtmIfPhysClockSourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysClockSourcePriority.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysClockSourcePriority.setDescription("The priority of this interface if configured as a network clock source. 'notConfigured' indicates this is not configured as a network clock source. ")
ciscoAtmIfPhysClockSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSelected", 1), ("selected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysClockSourceStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysClockSourceStatus.setDescription("The network clock source status of this interface: 'notSelected' indicates this is not selected as the network clock source. 'selected' indicates this is selected as the network clock source. ")
ciscoAtmIfPhysDS1BitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysDS1BitErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysDS1BitErrors.setDescription('The number of bit errors (CRC-6 error in ESF mode and framing bit error in SF mode) on the physical interface. This object is only present for DS1 interfaces.')
ciscoAtmIfPhysE1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmIfPhysE1CrcErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysE1CrcErrors.setDescription('The number of CRC errors (in CRC-4 mode) on the physical interface. This object is only present for E1 interfaces.')
ciscoAtmIfPhysLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmIfPhysLineCode.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysLineCode.setDescription("The line coding present on the physical interface This object is only present for DS1/E1 interfaces. 'ami' indicates alternate mark inversion (AMI) line code on the DS1/E1 interface. 'b8zs' indicates B8ZS line code on the physical interface and applies only to DS1 interfaces. 'hdb3' indicates HDB3 line code on the physical interface and applies only to E1 interfaces. ")
ciscoAtmIfPhysMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 45, 3))
ciscoAtmIfPhysMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 1))
ciscoAtmIfPhysMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2))
ciscoAtmIfPhysMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 1, 1)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBCommonGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBCompliance = ciscoAtmIfPhysMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco ATM Interface Physical MIB.')
ciscoAtmIfPhysMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 1, 2)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBCommonGroup"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBCommonGroup2"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBSonetGroup"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBSonetGroup2"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBDs3E3Group"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBDs3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBCompliance2 = ciscoAtmIfPhysMIBCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBCompliance2.setDescription('The compliance statement for entities which implement the Cisco ATM Interface Physical MIB.')
ciscoAtmIfPhysMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 1, 3)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBCommonGroup"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBCommonGroup2"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBSonetGroup"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBSonetGroup2"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBDs3E3Group"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBDs3Group"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBDs1E1Group"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBDs1Group"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysMIBE1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBCompliance3 = ciscoAtmIfPhysMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBCompliance3.setDescription('The compliance statement for entities which implement the Cisco ATM Interface Physical MIB.')
ciscoAtmIfPhysMIBCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 1)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBCommonGroup = ciscoAtmIfPhysMIBCommonGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBCommonGroup.setDescription('A collection of objects common to all ATM physical layer interfaces.')
ciscoAtmIfPhysMIBSonetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 2)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysSectionParityErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLineParityErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysPathParityErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBSonetGroup = ciscoAtmIfPhysMIBSonetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBSonetGroup.setDescription('A collection of objects for ATM SONET interfaces.')
ciscoAtmIfPhysMIBDs3E3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 3)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLcvErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysCBitParityErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysPBitParityErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysPlcpBipViolations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBDs3E3Group = ciscoAtmIfPhysMIBDs3E3Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBDs3E3Group.setDescription('A collection of objects for ATM DS3/E3 interfaces.')
ciscoAtmIfPhysMIBCommonGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 4)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysCellPayloadScrambling"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysFramingMode"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLoopbackConfig"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysTransmitClockSource"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysClockSourcePriority"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysClockSourceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBCommonGroup2 = ciscoAtmIfPhysMIBCommonGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBCommonGroup2.setDescription('Additional collection of objects common to all ATM physical layer interfaces.')
ciscoAtmIfPhysMIBSonetGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 5)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLineFebeErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysPathFebeErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysStsStreamScrambling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBSonetGroup2 = ciscoAtmIfPhysMIBSonetGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBSonetGroup2.setDescription('Additional collection of objects for ATM SONET interfaces.')
ciscoAtmIfPhysMIBDs3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 6)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLineBuildOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBDs3Group = ciscoAtmIfPhysMIBDs3Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBDs3Group.setDescription('Collection of objects for ATM DS3 interfaces.')
ciscoAtmIfPhysMIBDs1E1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 7)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLcvErrors"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysPlcpBipViolations"), ("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysLineCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBDs1E1Group = ciscoAtmIfPhysMIBDs1E1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBDs1E1Group.setDescription('A collection of objects for ATM DS1/E1 interfaces.')
ciscoAtmIfPhysMIBDs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 8)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysDS1BitErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBDs1Group = ciscoAtmIfPhysMIBDs1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBDs1Group.setDescription('A collection of objects for ATM DS1 interfaces.')
ciscoAtmIfPhysMIBE1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 9)).setObjects(("CISCO-ATM-IF-PHYS-MIB", "ciscoAtmIfPhysE1CrcErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmIfPhysMIBE1Group = ciscoAtmIfPhysMIBE1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmIfPhysMIBE1Group.setDescription('A collection of objects for ATM E1 interfaces.')
mibBuilder.exportSymbols("CISCO-ATM-IF-PHYS-MIB", ciscoAtmIfPhysSectionParityErrors=ciscoAtmIfPhysSectionParityErrors, ciscoAtmIfPhysMIBCompliance3=ciscoAtmIfPhysMIBCompliance3, ciscoAtmIfPhysDS1BitErrors=ciscoAtmIfPhysDS1BitErrors, ciscoAtmIfPhysCellPayloadScrambling=ciscoAtmIfPhysCellPayloadScrambling, ciscoAtmIfPhysTransmitClockSource=ciscoAtmIfPhysTransmitClockSource, ciscoAtmIfPhysMIBDs1Group=ciscoAtmIfPhysMIBDs1Group, ciscoAtmIfPhysTable=ciscoAtmIfPhysTable, ciscoAtmIfPhysPlcpBipViolations=ciscoAtmIfPhysPlcpBipViolations, ciscoAtmIfPhysMIBCommonGroup=ciscoAtmIfPhysMIBCommonGroup, ciscoAtmIfPhysPathParityErrors=ciscoAtmIfPhysPathParityErrors, ciscoAtmIfPhysMIBCompliances=ciscoAtmIfPhysMIBCompliances, ciscoAtmIfPhysPathFebeErrors=ciscoAtmIfPhysPathFebeErrors, ciscoAtmIfPhysEntry=ciscoAtmIfPhysEntry, ciscoAtmIfPhysMIB=ciscoAtmIfPhysMIB, ciscoAtmIfPhysMIBObjects=ciscoAtmIfPhysMIBObjects, ciscoAtmIfPhysFramingMode=ciscoAtmIfPhysFramingMode, ciscoAtmIfPhysLoopbackConfig=ciscoAtmIfPhysLoopbackConfig, ciscoAtmIfPhysCBitParityErrors=ciscoAtmIfPhysCBitParityErrors, ciscoAtmIfPhysMIBSonetGroup2=ciscoAtmIfPhysMIBSonetGroup2, ciscoAtmIfPhysMIBDs3E3Group=ciscoAtmIfPhysMIBDs3E3Group, ciscoAtmIfPhysMIBConformance=ciscoAtmIfPhysMIBConformance, PYSNMP_MODULE_ID=ciscoAtmIfPhysMIB, ciscoAtmIfPhysLineFebeErrors=ciscoAtmIfPhysLineFebeErrors, ciscoAtmIfPhysMIBE1Group=ciscoAtmIfPhysMIBE1Group, ciscoAtmIfPhysMIBGroups=ciscoAtmIfPhysMIBGroups, ciscoAtmIfPhysStsStreamScrambling=ciscoAtmIfPhysStsStreamScrambling, ciscoAtmIfPhysLcvErrors=ciscoAtmIfPhysLcvErrors, ciscoAtmIfPhysClockSourcePriority=ciscoAtmIfPhysClockSourcePriority, ciscoAtmIfPhysMIBSonetGroup=ciscoAtmIfPhysMIBSonetGroup, ciscoAtmIfPhysClockSourceStatus=ciscoAtmIfPhysClockSourceStatus, ciscoAtmIfPhysLineParityErrors=ciscoAtmIfPhysLineParityErrors, ciscoAtmIfPhysMIBCompliance=ciscoAtmIfPhysMIBCompliance, ciscoAtmIfPhysMIBCommonGroup2=ciscoAtmIfPhysMIBCommonGroup2, ciscoAtmIfPhysMIBCompliance2=ciscoAtmIfPhysMIBCompliance2, ciscoAtmIfPhysLineCode=ciscoAtmIfPhysLineCode, ciscoAtmIfPhysMIBDs3Group=ciscoAtmIfPhysMIBDs3Group, ciscoAtmIfPhysPBitParityErrors=ciscoAtmIfPhysPBitParityErrors, ciscoAtmIfPhysMIBDs1E1Group=ciscoAtmIfPhysMIBDs1E1Group, ciscoAtmIfPhysE1CrcErrors=ciscoAtmIfPhysE1CrcErrors, ciscoAtmIfPhysLineBuildOut=ciscoAtmIfPhysLineBuildOut, ciscoAtmIfPhysStatus=ciscoAtmIfPhysStatus)
