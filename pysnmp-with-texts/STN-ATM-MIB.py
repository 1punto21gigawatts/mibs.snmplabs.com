#
# PySNMP MIB module STN-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, ObjectIdentity, NotificationType, Integer32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Bits, MibIdentifier, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "ObjectIdentity", "NotificationType", "Integer32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "Unsigned32", "Counter64")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
stnSystems, stnNotification = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems", "stnNotification")
NSAPAddress, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "NSAPAddress")
stnRouterIndex, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterIndex")
stnAtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 6))
if mibBuilder.loadTexts: stnAtm.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnAtm.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnAtm.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnAtm.setDescription('Initial version of this MIB module.')
stnAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1))
stnAtmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 2))
stnAtmLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1))
stnAtmCrossConns = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2))
stnAtmTrafficDescrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3))
stnAtmPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4))
stnAtmTraces = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5))
stnAtmQos = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6))
stnAtmAddresses = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7))
stnAtmThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8))
stnAtmAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9))
stnVcLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1))
stnVcCrossConns = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1))
stnVpCrossConns = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 2))
stnAtmPortAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1))
stnAtmPortIlmi = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2))
stnAtmPortSignaling = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3))
stnAtmPortTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4))
stnTraceIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1))
stnTracePd = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2))
stnQosCLR = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1))
stnQosCDV = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2))
stnQosCTD = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3))
stnAtmPortSigs = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1))
stnAtmPortSigDurations = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2))
stnAtmPortSigRetries = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3))
class VcLinkOperStatus(TextualConvention, Integer32):
    description = 'Operational status of a VC Link.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("not-in-service", 2), ("not-ready", 3), ("create-and-go", 4), ("create-and-wait", 5), ("destroy", 6))

class VcCrossConnOperStatus(TextualConvention, Integer32):
    description = 'Operational status of a VC cross connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("not-in-service", 2), ("not-ready", 3), ("create-and-go", 4), ("create-and-wait", 5), ("destroy", 6))

class TrafficDescrOperStatus(TextualConvention, Integer32):
    description = 'Operational status of a traffic descriptor.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("not-in-service", 2), ("not-ready", 3), ("create-and-go", 4), ("create-and-wait", 5), ("destroy", 6))

class AtmPortOperStatus(TextualConvention, Integer32):
    description = 'Operational status of an ATM port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

stnVcLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: stnVcLinkTable.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkTable.setDescription('A list of VC Link entries.')
stnVcLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnVcLinkIfIndex"), (0, "STN-ATM-MIB", "stnVcLinkVpi"), (0, "STN-ATM-MIB", "stnVcLinkVci"))
if mibBuilder.loadTexts: stnVcLinkEntry.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkEntry.setDescription('Entry contains information about a particular VC link.')
stnVcLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnVcLinkVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkVpi.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkVpi.setDescription('The VPI value of the VPL. Note that the VPI=0 is not used for a VPL not associated with a VCL. The maximum VPI value cannot exceed the value allowable by the atmInterfaceMaxVpiBits.')
stnVcLinkVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkVci.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkVci.setDescription('The VCI value of the VCL. The maximum VCI value cannot exceed the value allowable by the atmInterfaceMaxVciBits.')
stnVcLinkRcvTrafDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkRcvTrafDescr.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkRcvTrafDescr.setDescription('Receive traffic descriptor identifier for this VPL.')
stnVcLinkXmtTrafDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkXmtTrafDescr.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkXmtTrafDescr.setDescription('Transmit traffic descriptor identifier for this VPL.')
stnVcLinkAalObjectsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAalObjectsValid.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkAalObjectsValid.setDescription('Indicates whether the following AAL objects are valid (whether the local VCL end-point is also the VCC end-point). Transmit traffic descriptor identifier for this VPL.')
stnVcLinkAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aal1", 1), ("aal3-4", 2), ("aal5", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAalType.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkAalType.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL is in use. The type of AAL used on this VCC. The AAL type includes AAL1, AAL3/4, and AAL5. The other(4) may be used as a user-defined AAL type. The unknown type indicates that the AAL type cannot be determined.')
stnVcLinkAal5XmtSDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 8), Integer32().clone(4096)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAal5XmtSDUSize.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkAal5XmtSDUSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. The maximum AAL5 CPCS SDUsize in octets that is supported on the transmit direction of this VCC.')
stnVcLinkAal5RcvSDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 9), Integer32().clone(4096)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAal5RcvSDUSize.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkAal5RcvSDUSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. The maximum AAL5 CPCS SDU size in octets that is supported on the receive direction of this VCC.')
stnVcLinkAal5EncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAal5EncapsType.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkAal5EncapsType.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. The type of data encapsulation used over the AAL5 SSCS layer. The definitions reference RFC 1483 Multiprotocol Encapsulation over ATM AAL5 and to the ATM Forum LAN Emulation specification.')
stnVcLinkCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2mpRoot", 1), ("p2mpLeaf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkCastType.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkCastType.setDescription('The type of topology of a connection (point- to-point, point-to-multipoint). In the case of point-to-multipoint, the orientation of this VPL in the connection. On a host, p2mpRoot indicates that the host is the root of the p2mp connection, p2mpLeaf indicates that the host is a leaf of the p2mp connection. On a switch, p2mpRoot indicates that cells received by the switching fabric from the interface are from the root of the p2mp connection, p2mpLeaf indicates that cells transmitted to the interface from the switching fabric are to the leaf of the p2mp connection.')
stnVcLinkConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvc", 1), ("svc-incomming", 2), ("svc-outgoing", 3), ("spvc-initiator", 4), ("spvc-target", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkConnKind.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkConnKind.setDescription('The use of call control. An spvcInitiator is always cross-connected to an svcOutgoing, and an spvcTarget is always cross-connected to an svcIncoming.')
stnVcLinkAccEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAccEnabled.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkAccEnabled.setDescription('ATM accounting is enabled for this VC Link.')
stnVcLinkOAMMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMMgmtEnabled.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkOAMMgmtEnabled.setDescription('OAM management is enabled.')
stnVcLinkOAMXmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 15), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMXmtFrequency.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkOAMXmtFrequency.setDescription('Number of seconds between transmitting OAM loopback cells.')
stnVcLinkOAMRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 16), Integer32().clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMRetryUpCount.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkOAMRetryUpCount.setDescription('Number of consecutive end-to-end F5 OAM loopback cell responses that must be received in order to change a PVC state to up. Does not apply to SVCs.')
stnVcLinkOAMRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 17), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMRetryDownCount.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkOAMRetryDownCount.setDescription('Number of consecutive end-to-end F5 OAM loopback cell responses that are not received in order to change a PVC state to down or tear down an SVC.')
stnVcLinkOAMRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 18), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMRetryFrequency.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkOAMRetryFrequency.setDescription('The frequency (in seconds) that end-to-end F5 loopback cells should be transmitted when a change in UP/DOWN state is being verified. For example, if a PVC is up and a loopback cell response is not received after the frequency (in seconds, then loopback cells are sent at the retry-frequency to verify whether or not the PVC is down.')
stnVcLinkPppId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkPppId.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkPppId.setDescription('PPP ID')
stnVcLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 20), VcLinkOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnVcLinkOperStatus.setDescription('Operational status of the VC Link.')
stnVcCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1), )
if mibBuilder.loadTexts: stnVcCrossConnTable.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnTable.setDescription('A list of VC cross connection entries.')
stnVcCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnVcCrossConnLowIfIndex"), (0, "STN-ATM-MIB", "stnVcCrossConnLowVpi"), (0, "STN-ATM-MIB", "stnVcCrossConnLowVci"), (0, "STN-ATM-MIB", "stnVcCrossConnHighIfIndex"), (0, "STN-ATM-MIB", "stnVcCrossConnHighVpi"), (0, "STN-ATM-MIB", "stnVcCrossConnHighVci"))
if mibBuilder.loadTexts: stnVcCrossConnEntry.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnEntry.setDescription('Entry contains information about a particular VC cross connection.')
stnVcCrossConnLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnLowIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this VP cross-connect. The term low implies that this ATM interface has the numerically lower ifIndex.")
stnVcCrossConnLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowVpi.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnLowVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the VP cross-connect that is identified by LowIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the low ATM interface port.')
stnVcCrossConnLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowVci.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnLowVci.setDescription('The value of this object is equal to the VCI value at the ATM interface associated with the VC cross-connect that is identified by LowIfIndex. The VCI value cannot exceed the number supported by the atmInterfaceMaxVciBits at the low ATM interface port.')
stnVcCrossConnHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnHighIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this VP cross-connect. The term low implies that this ATM interface has the numerically lower ifIndex.")
stnVcCrossConnHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighVpi.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnHighVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the VP cross-connect that is identified by LowIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the low ATM interface port.')
stnVcCrossConnHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighVci.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnHighVci.setDescription('The value of this object is equal to the VCI value at the ATM interface associated with the VC cross-connect that is identified by LowIfIndex. The VCI value cannot exceed the number supported by the atmInterfaceMaxVciBits at the low ATM interface port. ')
stnVcCrossConnLowAutoAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowAutoAssign.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnLowAutoAssign.setDescription('Controls low vpi/vci/ifIndex auto assignement to an ECF. If set to true MSM will attempt to dynamically auto assign the connection to an available ECF.')
stnVcCrossConnHighAutoAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighAutoAssign.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnHighAutoAssign.setDescription('Controls high vpi/vci/ifIndex auto assignement to an ECF. If set to true MSM will attempt to dynamically auto assign the connection to an available ECF.')
stnVcCrossConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 9), VcCrossConnOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnVcCrossConnOperStatus.setDescription('Operational status of the VC cross connection.')
stnTrafficDescrTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1), )
if mibBuilder.loadTexts: stnTrafficDescrTable.setStatus('current')
if mibBuilder.loadTexts: stnTrafficDescrTable.setDescription('A list of ATM traffic descriptor entries.')
stnTrafficDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnTrafDescrIndex"))
if mibBuilder.loadTexts: stnTrafficDescrEntry.setStatus('current')
if mibBuilder.loadTexts: stnTrafficDescrEntry.setDescription('Entry contains information about a particular ATM traffic descriptor.')
stnTrafDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrIndex.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrIndex.setDescription('The value of this object identifies the row in the stnTrafficDescrTable.')
stnTrafDescrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrName.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrName.setDescription('Text name assigned to this traffic descriptor.')
stnTrafDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("no-td", 1), ("no-clp-no-scr", 2), ("clp-no-tag-no-scr", 3), ("clp-tagging-no-scr", 4), ("no-clp-scr", 5), ("clp-no-tag-scr", 6), ("clp-tagging-scr", 7), ("clp-no-tag-mcr", 8), ("clp-trans-no-scr", 9), ("clp-trans-scr", 10), ("no-clp-tag-no-scr", 11))).clone('no-td')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrType.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrType.setDescription('The value of this object identifies the type of ATM traffic descriptor. The type may indicate no traffic descriptor or traffic descriptor with one or more parameters. These parameters are specified as a parameter vector, in the corresponding instances of the objects: atmTrafDescrParam1, atmTrafDescrParam2, atmTrafDescrParam3, atmTrafDescrParam4, atmTrafDescrParam5 Type values are as follows: no-td no-clp-no-scr clp-no-ag-no-scr clp-agging-no-scr no-clp-scr clp-no-tag-scr clp-tagging-scr clp-no-tag-mcr clp-trans-no-scr clp-trans-scr no-clp-tag-no-scr')
stnTrafDescrParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam1.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrParam1.setDescription('The first parameter of the ATM traffic descriptor used according to the value of atmTrafDescrType.')
stnTrafDescrParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam2.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrParam2.setDescription('The second parameter of the ATM traffic descriptor used according to the value of atmTrafDescrType.')
stnTrafDescrParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam3.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrParam3.setDescription('The third parameter of the ATM traffic descriptor used according to the value of atmTrafDescrType.')
stnTrafDescrParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam4.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrParam4.setDescription('The fourth parameter of the ATM traffic descriptor used according to the value of atmTrafDescrType.')
stnTrafDescrParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam5.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrParam5.setDescription('The fifth parameter of the ATM traffic descriptor used according to the value of atmTrafDescrType.')
stnTrafDescrQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("best-effort", 0), ("service-class-a", 1), ("service-class-b", 2), ("service-class-c", 3), ("service-class-d", 4))).clone('best-effort')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrQosClass.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrQosClass.setDescription("The value of this object identifies the QoS Class. Four Service classes have been specified in the ATM Forum UNI Specification: Service Class A: Constant bit rate video and Circuit emulation. Service Class B: Variable bit rate video/audio. Service Class C: Connection-oriented data. Service Class D: Connectionless data. Four QoS classes numbered 1, 2, 3, and 4 have been specified with the aim to support service classes A, B, C, and D respectively. An unspecified QoS Class numbered '0' is used for best effort traffic.")
stnTrafDescrServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("rt-vbr", 3), ("nrt-vbr", 4), ("abr", 5), ("ubr", 6))).clone('ubr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrServiceCategory.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrServiceCategory.setDescription('The ATM service category. Service categories are as follows: other, cbr, rt-vbr, nrt-vbr, abr, ubr')
stnTrafDescrFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrFrameDiscard.setDescription('Whether the network should discard frames rather than cells.')
stnTrafDescrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 12), TrafficDescrOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrOperStatus.setDescription('Operational status of the traffic descriptor.')
stnTrafDescrCommittedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrCommittedRate.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrCommittedRate.setDescription('The traffic rate in bits per second that the network is committed to transmit for VCs using this transmit traffic descriptor.')
stnTrafDescrMaximumRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrMaximumRate.setStatus('current')
if mibBuilder.loadTexts: stnTrafDescrMaximumRate.setDescription('The maximum traffic rate in bits per second that the network will transmit for VCs using this transmit traffic descriptor, if it differs from the committed rate.')
stnTraceIpsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTraceIpsEnabled.setStatus('current')
if mibBuilder.loadTexts: stnTraceIpsEnabled.setDescription('Specifies whether IPS tracing is enabled.')
stnTraceIpsSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1, 2), Integer32().clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTraceIpsSize.setStatus('current')
if mibBuilder.loadTexts: stnTraceIpsSize.setDescription('Specifies the maximum IPS trace buffer size multipled by 1024. The IPS trace log file will wrap when it reaches the maximum. Default: 1000 x 1024 Lines')
stnTraceIpsFile = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTraceIpsFile.setStatus('current')
if mibBuilder.loadTexts: stnTraceIpsFile.setDescription('Specifies the IPS output path and file name. Changes to the path or filename take effect when IPS tracing is disabled and restarted (close file and open new).')
stnTracePdProblemEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 1), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdProblemEnabled.setStatus('current')
if mibBuilder.loadTexts: stnTracePdProblemEnabled.setDescription('Specifies whether PD problem tracing is enabled.')
stnTracePdExceptionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdExceptionEnabled.setStatus('current')
if mibBuilder.loadTexts: stnTracePdExceptionEnabled.setDescription('Specifies whether PD exception tracing is enabled.')
stnTracePdAuditEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 3), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdAuditEnabled.setStatus('current')
if mibBuilder.loadTexts: stnTracePdAuditEnabled.setDescription('Specifies whether PD audit tracing is enabled.')
stnTracePdDeveloperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdDeveloperEnabled.setStatus('current')
if mibBuilder.loadTexts: stnTracePdDeveloperEnabled.setDescription('Specifies whether PD developer tracing is enabled.')
stnTracePdSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 5), Integer32().clone(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdSize.setStatus('current')
if mibBuilder.loadTexts: stnTracePdSize.setDescription('Specifies the maximum PD trace buffer size multipled by 1024. The PD trace log file will wrap when it reaches the maximum.')
stnTracePdFile = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdFile.setStatus('current')
if mibBuilder.loadTexts: stnTracePdFile.setDescription('Specifies the IPS output path and file name. Changes to the path or filename take effect when IPS tracing is disabled and restarted.')
stnQosClass1CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass1CLR.setStatus('current')
if mibBuilder.loadTexts: stnQosClass1CLR.setDescription('QoS Class 1 cell loss ratio.')
stnQosClass2CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass2CLR.setStatus('current')
if mibBuilder.loadTexts: stnQosClass2CLR.setDescription('QoS Class 2 cell loss ratio.')
stnQosClass3CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass3CLR.setStatus('current')
if mibBuilder.loadTexts: stnQosClass3CLR.setDescription('QoS Class 3 cell loss ratio.')
stnQosClass4CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass4CLR.setStatus('current')
if mibBuilder.loadTexts: stnQosClass4CLR.setDescription('QoS Class 4 cell loss ratio.')
stnQosClass1CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass1CDV.setStatus('current')
if mibBuilder.loadTexts: stnQosClass1CDV.setDescription('QoS Class 1 cell delay variation.')
stnQosClass2CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass2CDV.setStatus('current')
if mibBuilder.loadTexts: stnQosClass2CDV.setDescription('QoS Class 2 cell delay variation.')
stnQosClass3CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass3CDV.setStatus('current')
if mibBuilder.loadTexts: stnQosClass3CDV.setDescription('QoS Class 3 cell delay variation.')
stnQosClass4CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass4CDV.setStatus('current')
if mibBuilder.loadTexts: stnQosClass4CDV.setDescription('QoS Class 4 cell delay variation.')
stnQosClass1MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass1MaxCTD.setStatus('current')
if mibBuilder.loadTexts: stnQosClass1MaxCTD.setDescription('QoS Class 1 cell transfer delay.')
stnQosClass2MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass2MaxCTD.setStatus('current')
if mibBuilder.loadTexts: stnQosClass2MaxCTD.setDescription('QoS Class 2 cell transfer delay.')
stnQosClass3MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass3MaxCTD.setStatus('current')
if mibBuilder.loadTexts: stnQosClass3MaxCTD.setDescription('QoS Class 3 cell delay transfer.')
stnQosClass4MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass4MaxCTD.setStatus('current')
if mibBuilder.loadTexts: stnQosClass4MaxCTD.setDescription('QoS Class 4 cell delay transfer.')
stnAtmPortAttrTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1), )
if mibBuilder.loadTexts: stnAtmPortAttrTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortAttrTable.setDescription('A list of ATM port attribute entries.')
stnAtmPortAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortIfIndex"))
if mibBuilder.loadTexts: stnAtmPortAttrEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortAttrEntry.setDescription('Entry contains information about a particular ATM port attribute entry.')
stnAtmPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIfType.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIfType.setDescription('The interface type of the connection point to the switch fabric. Values are: sonet(1), enet(2), epif(3), rim-enet(4).')
stnAtmPortIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIfState.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIfState.setDescription('The interface state of the connection point to the switch fabric. Values are: not-present(0), detected(1), configured(2), up-non-redundant(3), up-redundant(4), down-non-redundant(5), down-redundant(6), failed(7), initialized(8)')
stnAtmPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortEnabled.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortEnabled.setDescription('Whether the ATM port is enabled.')
stnAtmPortMinVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMinVccVpi.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMinVccVpi.setDescription('Minimum VPI used for Virtual Channel Circuits.')
stnAtmPortMaxVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxVccVpi.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMaxVccVpi.setDescription('Maximum VPI used for Virtual Channel Circuits.')
stnAtmPortMinVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65554)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMinVccVci.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMinVccVci.setDescription('Minimum VCI used for Virtual Channel Circuits. To avoid clashes with the reserved ATM VCI values (such as 5 for signaling and any other reserved values including Connection Manager VCs), the recommended value is 32. ')
stnAtmPortMaxVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65554)).clone(4095)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxVccVci.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMaxVccVci.setDescription('Maximum VCI used for Virtual Channel Circuits.')
stnAtmPortMinVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMinVpcVpi.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMinVpcVpi.setDescription('Minimum VPI used for Virtual Path Circuits. To avoid clashes with the reserved ATM VCCs values (such as 5 for signaling and any other reserved values including Connection Manager VCs), the recommended value is 1.')
stnAtmPortMaxVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxVpcVpi.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMaxVpcVpi.setDescription('Maximum VCI used for Virtual Channel Circuits.')
stnAtmPortMaxActivePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxActivePaths.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMaxActivePaths.setDescription('The maximum number of active paths that can be active at any time on this port.')
stnAtmPortMaxActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65554)).clone(4095)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxActiveChannels.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortMaxActiveChannels.setDescription('The maximum number of virtual channels that can be active at any time on this port.')
stnAtmPortPVCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 13), NSAPAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortPVCAddress.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortPVCAddress.setDescription('The default configured PVC address information (20-byte NSAP address).')
stnAtmPortSVCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 14), NSAPAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSVCAddress.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSVCAddress.setDescription('The default configured SVC address information (20-byte NSAP address).')
stnAtmPortSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVpi.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigVpi.setDescription('The VPI used for the signaling channel.')
stnAtmPortSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 16), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVci.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigVci.setDescription('The VCI used for the signaling channel.')
stnAtmPortSigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigEnabled.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigEnabled.setDescription('Indicates if port will have a signaling stack.')
stnAtmPortIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiVpi.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiVpi.setDescription('The VPI used for ILMI channel.')
stnAtmPortIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 19), Integer32().clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiVci.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiVci.setDescription('The VCI used for ILMI channel.')
stnAtmPortIlmiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiEnabled.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiEnabled.setDescription('Indicates if port will use ILMI.')
stnAtmPortOamManagementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamManagementEnabled.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortOamManagementEnabled.setDescription('Indicates if port is using OAM Management Procedures.')
stnAtmPortOamXmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamXmtFrequency.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortOamXmtFrequency.setDescription('Indicates Frequency of OAM Transmit Cells.')
stnAtmPortOamRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamRetryUpCount.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortOamRetryUpCount.setDescription('Indicates OAM Cell Retry Up Count value.')
stnAtmPortOamRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamRetryDownCount.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortOamRetryDownCount.setDescription('Indicates OAM Cell Retry Down Count value.')
stnAtmPortOamRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamRetryFrequency.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortOamRetryFrequency.setDescription('Indicates OAM Retry Frequency value.')
stnAtmPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 26), AtmPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortOperStatus.setDescription('Operational status of the Port.')
stnAtmPortIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1), )
if mibBuilder.loadTexts: stnAtmPortIlmiTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiTable.setDescription('A list of ATM ILMI Port entries.')
stnAtmPortIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortIlmiIfIndex"))
if mibBuilder.loadTexts: stnAtmPortIlmiEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiEntry.setDescription('Entry contains information about a particular ATM Port ILMI entry.')
stnAtmPortIlmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni-3-dot-0", 1), ("uni-3-dot-1", 2), ("uni-4-dot-0", 3), ("iisp-3-dot-1", 4))).clone('uni-3-dot-1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiVersion.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiVersion.setDescription('Specifies the signaling stack protocol type to be used on this port. Valid options are: uni-3-dot-0 uni-3-dot-1 uni-4-dot-0 iisp-3-dot-1')
stnAtmPortIlmiNetworkOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiNetworkOrientation.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiNetworkOrientation.setDescription('Specifies the ATM device type. Valid options are: user, network')
stnAtmPortIlmiAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiAutoNegotiate.setDescription('Indicates ILMI auto negotiation mode')
stnAtmPortIlmiPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiPollInterval.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiPollInterval.setDescription('ILMI connection poll interval (S) in seconds. When DC-ILMI is transmitting SNMP Get messages during the attempt to establish connectivity with the remote ILMI component, this parameter determines the time in seconds between transmissions. The default value is from the ATM Forum ILMI Specification Version 4.0: ILMI Connectivity Procedures (section 8.3.1).')
stnAtmPortIlmiCheckConnectionInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 6), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiCheckConnectionInt.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiCheckConnectionInt.setDescription('ILMI check connection poll interval (T) in seconds. If connectivity checking is enabled (as spec by the value connect in the Admin_Status parameter below), this parameter specifies the time in seconds between successive transmissions of MIB Get msgs for the purpose of detecting loss of ILMI connectivity. If connectivity checking is not enabled, this parameter must be set to zero. The default value is from the ATM Forum ILMI Specification Version 4.0: ILMI Connectivity Procedures (section 8.3.1).')
stnAtmPortIlmiInactivityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 7), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiInactivityFactor.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiInactivityFactor.setDescription('ILMI inactivity factor (K). The number of consecutive polls for which no response is received from the remote ILMI component before ILMI connectivity is assumed to be lost. The dflt value is from the ATM Forum ILMI Specification Version 4.0: ILMI Connectivity Procedures (section 8.3.1).')
stnAtmPortIlmiLocalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("public", 2), ("private", 3))).clone('private')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiLocalConn.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiLocalConn.setDescription("Specifies whether the local end of the ILMI connection is advertised as a 'public' or 'private' ILMI device. Values are: other, public, private")
stnAtmPortIlmiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("std-ilmi", 0), ("addr-reg", 1), ("connect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiAdminStatus.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiAdminStatus.setDescription("Specifies which functions of DC-ILMI are enabled. The value std-ilmi must be specified; this value may be combined (using a bitwise OR) with one or more of the following values: std-ilmi - Standard ILMI functions are enabled. addr-reg - Address registration is enabled. connect - Connectivity chcking is enabled (DC-ILMI periodically sends a MIB Get request for the remote system's System ID, to ensure that it can still send and rcvd data on the ILMI connection). Default: (std-ilmi | addr-reg | connect)")
stnAtmPortIlmiEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiEnterprise.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiEnterprise.setDescription('Enterprise Object ID that DC-ILMI will use in building SNMP traps (or other generic MIB traps). This parameter can be used to identify the originator of the trap. The Object ID is specified as an array of unsigned long vals, as follows: The first entry in the array is the length of the array (the num of unsigned long values it contains, including the len value). The second entry in the array is an identifier specifying the Family type of the Object ID. This reps a prefix Object ID; the MIB Sub-Agent is responsible for matching this id with the dotted-decimal notation for this prefix. The remainder of the array gives the index part of the Object ID (the dotted-decimal notation from the end of the Family), with 1 unsigned long for each decimal number in this notation.')
stnAtmPortIlmiLocalOid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiLocalOid.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiLocalOid.setDescription('Object ID identifying the local machine - the first 4 octets indicate the length of the object id. For example, the null object id (0.0), which should be used if no object id is specified, is encoded as 3, 0, 0.')
stnAtmPortIlmiNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiNetPrefix.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiNetPrefix.setDescription('Default network prefix. If the prefix length is non-zero, ILMI creates an entry in the ILMI NetPrefix Table for this prefix; otherwise the Net_Prefix parameter is not used.')
stnAtmPortIlmiPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiPrefixLen.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortIlmiPrefixLen.setDescription('The length of the default network prefix')
stnAtmPortSigTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1), )
if mibBuilder.loadTexts: stnAtmPortSigTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigTable.setDescription('A list of ATM port signal entries.')
stnAtmPortSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigEntry.setDescription('Entry contains information about a particular ATM port signal entry.')
stnAtmPortSigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni-3-dot-0", 1), ("uni-3-dot-1", 2), ("iisp-3-dot-1", 3), ("pnni-1-dot-0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVersion.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigVersion.setDescription('Specifies the signaling stack protocol type to be used on this port. Valid options are: UNI 3.0, UNI 3.1, IISP 3.1, PNNI 1.0')
stnAtmPortSigNetworkOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigNetworkOrientation.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigNetworkOrientation.setDescription('Indicates whether the ATM device is of the user or network type. Valid values are: user, network')
stnAtmPortSigAssignVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 4), TruthValue().clone('true'))
if mibBuilder.loadTexts: stnAtmPortSigAssignVpiVci.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigAssignVpiVci.setDescription('Specifies whether VPI/VCI assignment is the responsibility of the local signaling stack or of its partner stack. This parameter is used only for UNI 4.0. Values are: true - The local signaling stack is responsible for assigning VPIs/VCIs. false - The parent-signaling stack is responsible for assigning VPIs/VCIs.')
stnAtmPortSigVpSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("associated-signaling", 1), ("explicit-vpci", 2))).clone('explicit-vpci')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVpSigType.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigVpSigType.setDescription('Specifies whether this signaling stack performs VP associated signaling: Valid options are: associated-signaling explicit-vpci')
stnAtmPortSigParseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("strict", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigParseMode.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigParseMode.setDescription('Specifies whether the message parser component of Sig should perform validity checking on the contents of received IEs. This element resides in the CCS MIB to allow software config of this behavior for compliance testing. Values are: normal - The parser checks the contents of the IEs the Sig uses and ensures that they are valid. For other IEs, it checks only the IE type and length and does not parse the contents. strict - The parser checks the contents of addit IEs as well as those used by Signaling and also checks for incorrect repetition of these add it IEs. Errors are handled in the same way as for the IEs used by sig (by sending a status message in UNI 3.1 or by following the IE instruction indicator in UNI 4.0).')
stnAtmPortSigPrefCarrierPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigPrefCarrierPresent.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigPrefCarrierPresent.setDescription('Specifies whether a default prefrd carrier (transit network) is defined. Valid options are: true - the Default_Network_Id below defines which carr is the preferred carrier. false - no default preferred carrier is defined.')
stnAtmPortSigPrefCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigPrefCarrier.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigPrefCarrier.setDescription('Specifies the default preferred carrier. If stnAtmPortIlmiPrefCarrierPresent is set to false, this element is not used.')
stnAtmPortSigDurationTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: stnAtmPortSigDurationTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigDurationTable.setDescription('A list of ATM Port Signaling Duration entries.')
stnAtmPortSigDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigDurIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigDurationEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigDurationEntry.setDescription('Entry contains information about a particular ATM Port Signaling Duration entry.')
stnAtmPortSigDurIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigDurIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigDurIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortSigT301Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 2), Integer32().clone(180000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT301Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT301Duration.setDescription('T301 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT303Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 3), Integer32().clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT303Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT303Duration.setDescription('T303 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT306Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 4), Integer32().clone(30000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT306Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT306Duration.setDescription('T306 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT308Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 5), Integer32().clone(30000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT308Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT308Duration.setDescription('T308 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Intrface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT309Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 6), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT309Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT309Duration.setDescription('T309 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT310Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 7), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT310Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT310Duration.setDescription('T310 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT313Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 8), Integer32().clone(30000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT313Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT313Duration.setDescription('T313 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT316Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 9), Integer32().clone(120000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT316Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT316Duration.setDescription('T316 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT317Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 10), Integer32().clone(60000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT317Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT317Duration.setDescription('T317 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT322Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 11), Integer32().clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT322Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT322Duration.setDescription('T322 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT331Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 12), Integer32().clone(60000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT331Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT331Duration.setDescription('T331 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT333Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 13), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT333Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT333Duration.setDescription('T333 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT397Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 14), Integer32().clone(180000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT397Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT397Duration.setDescription('T397 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT398Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 15), Integer32().clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT398Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT398Duration.setDescription('T398 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigT399Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 16), Integer32().clone(14000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT399Duration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT399Duration.setDescription('T399 timer. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigSaalRetryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 17), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSaalRetryDuration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSaalRetryDuration.setDescription('SAAL retry duration. See ITU-T Q.2931 B-ISDN DSS2 User-Network Interface (UNI) Layer 3 Specification for Basic Call/Connection Control')
stnAtmPortSigRetryTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1), )
if mibBuilder.loadTexts: stnAtmPortSigRetryTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigRetryTable.setDescription('A list of ATM Port Signaling retry entries.')
stnAtmPortSigRetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigRetryIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigRetryEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigRetryEntry.setDescription('Entry contains information about a ITU-T Q.2931 timer retry counters.')
stnAtmPortSigRetryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigRetryIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigRetryIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortSigT303Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 2), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT303Retries.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT303Retries.setDescription('The number of ATM Port Signaling T303 retries.')
stnAtmPortSigT308Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT308Retries.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT308Retries.setDescription('The number of ATM Port Signaling T308 retries.')
stnAtmPortSigT316Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 4), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT316Retries.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT316Retries.setDescription('The number of ATM Port Signaling T316 retries.')
stnAtmPortSigT322Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT322Retries.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT322Retries.setDescription('The number of ATM Port Signaling T322 retries.')
stnAtmPortSigT331Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 6), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT331Retries.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigT331Retries.setDescription('The number of ATM Port Signaling T331 retries.')
stnAtmPortSigSSCSTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2), )
if mibBuilder.loadTexts: stnAtmPortSigSSCSTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSTable.setDescription('A list of ATM Port Signaling SSCS entries.')
stnAtmPortSigSSCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigSSCSIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigSSCSEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSEntry.setDescription('Entry contains information about a particular Atm Port Signaling SSCS entry.')
stnAtmPortSigSSCSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortSigSSCSPollDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 2), Integer32().clone(750)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSPollDuration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSPollDuration.setDescription('The duration of the SSCS Poll timer in milliseconds.')
stnAtmPortSigSSCSKeepAliveDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 3), Integer32().clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSKeepAliveDuration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSKeepAliveDuration.setDescription('The duration of the SSCS keep-alive timer in milliseconds.')
stnAtmPortSigSSCSIdleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 4), Integer32().clone(15000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSIdleDuration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSIdleDuration.setDescription('The duration of the SSCS idle timer in milliseconds.')
stnAtmPortSigSSCSNoRspDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 5), Integer32().clone(7000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSNoRspDuration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSNoRspDuration.setDescription('The duration of the SSCS no-response timer in milliseconds.')
stnAtmPortSigSSCSCcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 6), Integer32().clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSCcDuration.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSCcDuration.setDescription('The duration of the SSCS CC timer in milliseconds.')
stnAtmPortSigSSCSMaxRcvWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 7), Integer32().clone(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxRcvWindowSize.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxRcvWindowSize.setDescription('The maximum size on a receive window.')
stnAtmPortSigSSCSMaxCcRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 8), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxCcRetries.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxCcRetries.setDescription('The maximum number of expiries and subsequent connection control PDU retransmissions acceptable before closing the connection.')
stnAtmPortSigSSCSMaxSdBetwPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 9), Integer32().clone(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxSdBetwPolls.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxSdBetwPolls.setDescription('The maximum number of STAT list elements in a STAT PDU.')
stnAtmPortSigSSCSMaxStatListElms = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 10), Integer32().clone(67)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxStatListElms.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxStatListElms.setDescription('The maximum number of STAT list elements in a STAT PDU.')
stnAtmPortSigSSCSPollAfterRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSPollAfterRetrans.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSPollAfterRetrans.setDescription('Whether to send a POLL after retransmitting PDUs.')
stnAtmPortSigSSCSRepeatUstat = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSRepeatUstat.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSRepeatUstat.setDescription('QSAAL only: if true, send two USTATs each time a USTAT is sent.')
stnAtmPortSigSSCSUstatRspToPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSUstatRspToPoll.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortSigSSCSUstatRspToPoll.setDescription('QSAAL only: whether USTAT PDUs are issued in response to POLLs.')
stnAtmPortTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1), )
if mibBuilder.loadTexts: stnAtmPortTrafficTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafficTable.setDescription('A list of ATM port traffic entries.')
stnAtmPortTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortTrafIndex"))
if mibBuilder.loadTexts: stnAtmPortTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafficEntry.setDescription('Entry contains information about a particular ATM port traffic entry.')
stnAtmPortTrafIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmPortTrafTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafTxCells.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafTxCells.setDescription('The number of ATM cells transmitted.')
stnAtmPortTrafRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafRxCells.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafRxCells.setDescription('The number of ATM cells received.')
stnAtmPortTrafTxParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafTxParityErrors.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafTxParityErrors.setDescription('The number of ATM transmit parity errors.')
stnAtmPortTrafRxHdrChkSumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafRxHdrChkSumErrors.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafRxHdrChkSumErrors.setDescription('The number of received ATM header checksum errors.')
stnAtmPortTrafPhyParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafPhyParityErrors.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafPhyParityErrors.setDescription('The number of ATM physical parity errors.')
stnAtmPortTrafCrc10Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafCrc10Errors.setStatus('current')
if mibBuilder.loadTexts: stnAtmPortTrafCrc10Errors.setDescription('The number of ATM CRC-10 errors.')
stnAtmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1), )
if mibBuilder.loadTexts: stnAtmAddressTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmAddressTable.setDescription('A list of ATM address entries.')
stnAtmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmAddrIfIndex"), (0, "STN-ATM-MIB", "stnAtmAddrAddress"))
if mibBuilder.loadTexts: stnAtmAddressEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmAddressEntry.setDescription('Entry contains information about a particular session.')
stnAtmAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnAtmAddrIfIndex.setDescription('The interface index represents a connection point on the switch fabric from a module or line card. It is calculated based on the slot and port of the module.')
stnAtmAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1, 2), NSAPAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAddrAddress.setStatus('current')
if mibBuilder.loadTexts: stnAtmAddrAddress.setDescription('The value of the ATM NSAP address.')
stnAtmAddrAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAddrAddressLen.setStatus('current')
if mibBuilder.loadTexts: stnAtmAddrAddressLen.setDescription('The number of relevent bits in the ATM address.')
stnAtmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1), )
if mibBuilder.loadTexts: stnAtmThresholdTable.setStatus('current')
if mibBuilder.loadTexts: stnAtmThresholdTable.setDescription('A list of ATM threshold entries.')
stnAtmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmTholdTgrpId"), (0, "STN-ATM-MIB", "stnAtmTholdRegionId"))
if mibBuilder.loadTexts: stnAtmThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: stnAtmThresholdEntry.setDescription('Entry contains information about a particular ATM threshold entry.')
stnAtmTholdTgrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdTgrpId.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdTgrpId.setDescription('Specifies the threshold group indentifier.')
stnAtmTholdRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdRegionId.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdRegionId.setDescription('Region identifier within a threshold group.')
stnAtmTholdCellLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdCellLowerLimit.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdCellLowerLimit.setDescription('Lower Cell number limit for region.')
stnAtmTholdCellUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdCellUpperLimit.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdCellUpperLimit.setDescription('Upper Cell number limit for region.')
stnAtmTholdCellQLimitMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdCellQLimitMarking.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdCellQLimitMarking.setDescription('Queue limit for any flow above which EFCI marking occurs.')
stnAtmTholdQLimitDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdQLimitDiscard.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdQLimitDiscard.setDescription('Queue limit for any flow above which Discard processing occurs.')
stnAtmTholdQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdQueueLimit.setStatus('current')
if mibBuilder.loadTexts: stnAtmTholdQueueLimit.setDescription('Queue limit for any flow above which cells are automatically discarded.')
stnAtmAcctEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctEnabled.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctEnabled.setDescription('Specifies whether account logging is turned on or off.')
stnAtmAcctMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 2), Integer32().clone(1024)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctMaxSize.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctMaxSize.setDescription('Specifies the maximum accounting log buffer size. in Kbytes. The accounting log file will be closed when it reaches the maximum size and the name appended with a numeric differentiation.')
stnAtmAcctMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 3), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctMaxFiles.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctMaxFiles.setDescription('Specifies the maximum number of history files to be stored. Once the maximum number of files is reached, the oldest file is deleted.')
stnAtmAcctFilePath = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFilePath.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFilePath.setDescription('Specifies the accounting log output path and file name on remote device.')
stnAtmAcctFtpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpServer1.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpServer1.setDescription('The IP address of the first remote FTP server.')
stnAtmAcctFtpUserName1 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpUserName1.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpUserName1.setDescription('The first FTP server username.')
stnAtmAcctFtpPassword1 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnAtmAcctFtpPassword1.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpPassword1.setDescription('The first FTP server password.')
stnAtmAcctFtpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpServer2.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpServer2.setDescription('The IP address of the second remote FTP server.')
stnAtmAcctFtpUserName2 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpUserName2.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpUserName2.setDescription('The second FTP server username.')
stnAtmAcctFtpPassword2 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnAtmAcctFtpPassword2.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpPassword2.setDescription('The second FTP server password.')
stnAtmAcctFtpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpServer3.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpServer3.setDescription('The IP address of the third remote FTP server.')
stnAtmAcctFtpUserName3 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpUserName3.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpUserName3.setDescription('The third FTP server username.')
stnAtmAcctFtpPassword3 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnAtmAcctFtpPassword3.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctFtpPassword3.setDescription('The third FTP server password.')
stnAtmAcctCurrentFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctCurrentFtpServer.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctCurrentFtpServer.setDescription('The IP address of the current FTP server.')
stnAtmAcctPreviousFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctPreviousFtpServer.setStatus('current')
if mibBuilder.loadTexts: stnAtmAcctPreviousFtpServer.setDescription('The IP address of the previous FTP server.')
stnCdrServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 15)).setObjects(("STN-ATM-MIB", "stnAtmAcctCurrentFtpServer"), ("STN-ATM-MIB", "stnAtmAcctPreviousFtpServer"))
if mibBuilder.loadTexts: stnCdrServerFailure.setStatus('current')
if mibBuilder.loadTexts: stnCdrServerFailure.setDescription('A stnCdrServerFailure trap signifies that the agent entity has detected that the accounting server has failed over to an auxilary server. The generation of this trap can be controlled by the stnNotificationEnableCdrServerFailure object in this MIB.')
stnCdrLogFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 16)).setObjects(("STN-ATM-MIB", "stnAtmAcctFtpServer1"), ("STN-ATM-MIB", "stnAtmAcctFtpServer2"), ("STN-ATM-MIB", "stnAtmAcctFtpServer3"))
if mibBuilder.loadTexts: stnCdrLogFailure.setStatus('current')
if mibBuilder.loadTexts: stnCdrLogFailure.setDescription('A stnCdrLogFailure trap signifies that the agent entity has detected that all accounting servers are inaccessible. Accounting data could be lost. The generation of this trap can be controlled by the stnNotificationEnableCdrLogFailure object in this MIB.')
stnConfigAuditPvcFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 31)).setObjects(("STN-ATM-MIB", "stnVcLinkIfIndex"), ("STN-ATM-MIB", "stnVcLinkVpi"), ("STN-ATM-MIB", "stnVcLinkVci"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditPvcFailure.setStatus('current')
if mibBuilder.loadTexts: stnConfigAuditPvcFailure.setDescription('A stnConfigAuditPvcFailure trap signifies that the agent entity has detected an inconsistency between an active and configured PVC after a failover. The generation of this trap can be controlled by the CfgAuditPvcTraps configuration object.')
stnConfigAuditSpvcFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 32)).setObjects(("STN-ATM-MIB", "stnVcLinkIfIndex"), ("STN-ATM-MIB", "stnVcLinkVpi"), ("STN-ATM-MIB", "stnVcLinkVci"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditSpvcFailure.setStatus('current')
if mibBuilder.loadTexts: stnConfigAuditSpvcFailure.setDescription('A stnConfigAuditSpvcFailure trap signifies that the agent entity has detected an inconsistency between an active and configured SPVC after a failover. The generation of this trap can be controlled by the CfgAuditSpvcTraps configuration object.')
mibBuilder.exportSymbols("STN-ATM-MIB", stnAtmPortSigT331Duration=stnAtmPortSigT331Duration, stnQosClass3CLR=stnQosClass3CLR, PYSNMP_MODULE_ID=stnAtm, stnVcLinkTable=stnVcLinkTable, stnTrafDescrCommittedRate=stnTrafDescrCommittedRate, stnTracePdExceptionEnabled=stnTracePdExceptionEnabled, stnAtmPortAttrTable=stnAtmPortAttrTable, stnAtmPortOamXmtFrequency=stnAtmPortOamXmtFrequency, stnAtmAcctEnabled=stnAtmAcctEnabled, stnAtmPortSigT303Duration=stnAtmPortSigT303Duration, stnAtmPortSigSSCSPollAfterRetrans=stnAtmPortSigSSCSPollAfterRetrans, stnTraceIpsSize=stnTraceIpsSize, stnAtmAddressEntry=stnAtmAddressEntry, stnAtmTholdCellQLimitMarking=stnAtmTholdCellQLimitMarking, stnAtmAcct=stnAtmAcct, stnAtmPortSigPrefCarrierPresent=stnAtmPortSigPrefCarrierPresent, AtmPortOperStatus=AtmPortOperStatus, stnVcLinkOAMXmtFrequency=stnVcLinkOAMXmtFrequency, stnVcLinkCastType=stnVcLinkCastType, stnAtmMibConformance=stnAtmMibConformance, stnAtmPortMaxActiveChannels=stnAtmPortMaxActiveChannels, stnTracePdDeveloperEnabled=stnTracePdDeveloperEnabled, stnAtmPortIlmiIfIndex=stnAtmPortIlmiIfIndex, stnAtmThresholdTable=stnAtmThresholdTable, stnQosClass1CLR=stnQosClass1CLR, stnVcLinkVpi=stnVcLinkVpi, stnAtmPortSigNetworkOrientation=stnAtmPortSigNetworkOrientation, stnVcCrossConns=stnVcCrossConns, stnAtmPortSigT398Duration=stnAtmPortSigT398Duration, stnAtmPortSigSSCSTable=stnAtmPortSigSSCSTable, stnAtmPortSigSSCSIfIndex=stnAtmPortSigSSCSIfIndex, stnVcLinkRcvTrafDescr=stnVcLinkRcvTrafDescr, stnAtmPortSignaling=stnAtmPortSignaling, stnQosCLR=stnQosCLR, stnTracePd=stnTracePd, stnVcCrossConnTable=stnVcCrossConnTable, stnAtmPortTrafTxCells=stnAtmPortTrafTxCells, stnAtmPortSigTable=stnAtmPortSigTable, stnAtmAcctFtpUserName2=stnAtmAcctFtpUserName2, stnAtmPortIlmiLocalOid=stnAtmPortIlmiLocalOid, stnVcLinkXmtTrafDescr=stnVcLinkXmtTrafDescr, stnAtmPortSigParseMode=stnAtmPortSigParseMode, stnAtmPortIlmiEnabled=stnAtmPortIlmiEnabled, stnTrafficDescrTable=stnTrafficDescrTable, stnVcLinkOAMRetryDownCount=stnVcLinkOAMRetryDownCount, stnAtmPortSigT322Retries=stnAtmPortSigT322Retries, stnAtmPortIlmiVpi=stnAtmPortIlmiVpi, stnAtmAcctFtpPassword2=stnAtmAcctFtpPassword2, stnVcCrossConnLowIfIndex=stnVcCrossConnLowIfIndex, stnAtmPortOamRetryUpCount=stnAtmPortOamRetryUpCount, stnAtmPortSigT399Duration=stnAtmPortSigT399Duration, stnAtmPortTrafRxCells=stnAtmPortTrafRxCells, stnAtmPortSigSSCSMaxCcRetries=stnAtmPortSigSSCSMaxCcRetries, stnVcLinkIfIndex=stnVcLinkIfIndex, stnAtmPortMaxActivePaths=stnAtmPortMaxActivePaths, stnAtmPortSigT317Duration=stnAtmPortSigT317Duration, stnAtmPortOamRetryDownCount=stnAtmPortOamRetryDownCount, stnAtmPortSigSSCSMaxRcvWindowSize=stnAtmPortSigSSCSMaxRcvWindowSize, stnAtmTrafficDescrs=stnAtmTrafficDescrs, stnQosClass2MaxCTD=stnQosClass2MaxCTD, stnVpCrossConns=stnVpCrossConns, stnVcCrossConnLowAutoAssign=stnVcCrossConnLowAutoAssign, stnTrafDescrType=stnTrafDescrType, stnQosClass2CDV=stnQosClass2CDV, stnVcLinkPppId=stnVcLinkPppId, stnVcCrossConnHighVpi=stnVcCrossConnHighVpi, stnAtmPortSigSSCSMaxSdBetwPolls=stnAtmPortSigSSCSMaxSdBetwPolls, stnTrafDescrParam2=stnTrafDescrParam2, stnCdrServerFailure=stnCdrServerFailure, stnAtm=stnAtm, stnVcCrossConnOperStatus=stnVcCrossConnOperStatus, stnTrafDescrServiceCategory=stnTrafDescrServiceCategory, stnQosClass3MaxCTD=stnQosClass3MaxCTD, stnAtmPortMaxVpcVpi=stnAtmPortMaxVpcVpi, stnAtmPortSigT322Duration=stnAtmPortSigT322Duration, stnAtmPortSigSSCSRepeatUstat=stnAtmPortSigSSCSRepeatUstat, stnVcCrossConnLowVci=stnVcCrossConnLowVci, stnAtmPortTraffic=stnAtmPortTraffic, stnAtmTholdQueueLimit=stnAtmTholdQueueLimit, stnVcLinkOAMRetryUpCount=stnVcLinkOAMRetryUpCount, stnVcLinkAccEnabled=stnVcLinkAccEnabled, stnTrafDescrMaximumRate=stnTrafDescrMaximumRate, stnAtmPortIlmiEntry=stnAtmPortIlmiEntry, stnTraceIps=stnTraceIps, stnAtmPortSigT308Duration=stnAtmPortSigT308Duration, stnAtmAcctFtpPassword1=stnAtmAcctFtpPassword1, stnVcLinkOAMMgmtEnabled=stnVcLinkOAMMgmtEnabled, stnAtmPortAttrEntry=stnAtmPortAttrEntry, stnAtmAcctFtpServer3=stnAtmAcctFtpServer3, stnAtmTholdTgrpId=stnAtmTholdTgrpId, stnAtmPortSigT316Duration=stnAtmPortSigT316Duration, stnAtmPortMaxVccVpi=stnAtmPortMaxVccVpi, stnAtmAcctFtpServer2=stnAtmAcctFtpServer2, stnQosClass4MaxCTD=stnQosClass4MaxCTD, stnAtmPortSigT301Duration=stnAtmPortSigT301Duration, stnVcLinkAal5RcvSDUSize=stnVcLinkAal5RcvSDUSize, stnAtmPortIlmi=stnAtmPortIlmi, stnTrafDescrQosClass=stnTrafDescrQosClass, stnAtmPortSigRetries=stnAtmPortSigRetries, stnAtmPortSigT303Retries=stnAtmPortSigT303Retries, stnAtmPortIlmiLocalConn=stnAtmPortIlmiLocalConn, stnQosCTD=stnQosCTD, stnAtmPortSigRetryIfIndex=stnAtmPortSigRetryIfIndex, stnAtmPortSigSSCSCcDuration=stnAtmPortSigSSCSCcDuration, stnAtmPortIlmiNetPrefix=stnAtmPortIlmiNetPrefix, stnAtmPortSigVpSigType=stnAtmPortSigVpSigType, stnVcLinkEntry=stnVcLinkEntry, stnVcLinkAal5XmtSDUSize=stnVcLinkAal5XmtSDUSize, stnAtmPortSigIfIndex=stnAtmPortSigIfIndex, stnAtmPortTrafficTable=stnAtmPortTrafficTable, stnAtmThresholds=stnAtmThresholds, stnAtmPortSigDurationEntry=stnAtmPortSigDurationEntry, stnAtmPortSVCAddress=stnAtmPortSVCAddress, stnVcLinkVci=stnVcLinkVci, stnAtmAddressTable=stnAtmAddressTable, stnAtmPortTrafCrc10Errors=stnAtmPortTrafCrc10Errors, stnAtmPortTrafTxParityErrors=stnAtmPortTrafTxParityErrors, stnVcLinkConnKind=stnVcLinkConnKind, stnAtmPortSigVpi=stnAtmPortSigVpi, stnAtmPortSigT306Duration=stnAtmPortSigT306Duration, stnQosClass4CDV=stnQosClass4CDV, stnAtmPortMinVccVci=stnAtmPortMinVccVci, stnVcLinkOperStatus=stnVcLinkOperStatus, stnTrafDescrParam1=stnTrafDescrParam1, stnAtmAcctCurrentFtpServer=stnAtmAcctCurrentFtpServer, stnAtmPortSigDurIfIndex=stnAtmPortSigDurIfIndex, stnAtmAcctFtpUserName3=stnAtmAcctFtpUserName3, stnTrafficDescrEntry=stnTrafficDescrEntry, stnTracePdAuditEnabled=stnTracePdAuditEnabled, stnAtmPortIfIndex=stnAtmPortIfIndex, stnAtmAcctMaxSize=stnAtmAcctMaxSize, stnAtmPortMinVpcVpi=stnAtmPortMinVpcVpi, stnAtmPortIfType=stnAtmPortIfType, stnAtmPortOamManagementEnabled=stnAtmPortOamManagementEnabled, stnVcCrossConnHighAutoAssign=stnVcCrossConnHighAutoAssign, stnAtmQos=stnAtmQos, stnQosClass1CDV=stnQosClass1CDV, stnAtmPortIlmiInactivityFactor=stnAtmPortIlmiInactivityFactor, stnQosClass1MaxCTD=stnQosClass1MaxCTD, stnAtmAcctPreviousFtpServer=stnAtmAcctPreviousFtpServer, stnTrafDescrOperStatus=stnTrafDescrOperStatus, stnTracePdSize=stnTracePdSize, stnTrafDescrFrameDiscard=stnTrafDescrFrameDiscard, stnAtmPortSigSSCSIdleDuration=stnAtmPortSigSSCSIdleDuration, stnAtmPortSigSSCSMaxStatListElms=stnAtmPortSigSSCSMaxStatListElms, stnAtmAcctFtpServer1=stnAtmAcctFtpServer1, stnAtmPortSigT397Duration=stnAtmPortSigT397Duration, stnAtmPortIlmiEnterprise=stnAtmPortIlmiEnterprise, stnAtmPortSigT331Retries=stnAtmPortSigT331Retries, stnAtmPortSigPrefCarrier=stnAtmPortSigPrefCarrier, stnAtmPortSigSaalRetryDuration=stnAtmPortSigSaalRetryDuration, stnQosCDV=stnQosCDV, stnAtmPortSigSSCSKeepAliveDuration=stnAtmPortSigSSCSKeepAliveDuration, VcLinkOperStatus=VcLinkOperStatus, stnConfigAuditPvcFailure=stnConfigAuditPvcFailure, stnAtmPortSigRetryEntry=stnAtmPortSigRetryEntry, VcCrossConnOperStatus=VcCrossConnOperStatus, stnQosClass4CLR=stnQosClass4CLR, stnAtmPortSigT309Duration=stnAtmPortSigT309Duration, stnAtmPortIlmiPollInterval=stnAtmPortIlmiPollInterval, stnAtmPortAttrs=stnAtmPortAttrs, stnAtmAcctFtpUserName1=stnAtmAcctFtpUserName1, stnAtmAddresses=stnAtmAddresses, stnAtmPortPVCAddress=stnAtmPortPVCAddress, stnAtmPortIlmiAdminStatus=stnAtmPortIlmiAdminStatus, stnAtmPortSigDurationTable=stnAtmPortSigDurationTable, stnAtmAddrAddressLen=stnAtmAddrAddressLen, stnAtmPortSigSSCSPollDuration=stnAtmPortSigSSCSPollDuration, stnConfigAuditSpvcFailure=stnConfigAuditSpvcFailure, stnAtmPortSigSSCSUstatRspToPoll=stnAtmPortSigSSCSUstatRspToPoll, stnAtmPortSigEntry=stnAtmPortSigEntry, stnTrafDescrName=stnTrafDescrName, stnVcLinkOAMRetryFrequency=stnVcLinkOAMRetryFrequency, stnAtmPorts=stnAtmPorts, stnAtmPortMinVccVpi=stnAtmPortMinVccVpi, stnAtmPortSigSSCSNoRspDuration=stnAtmPortSigSSCSNoRspDuration, stnAtmPortTrafRxHdrChkSumErrors=stnAtmPortTrafRxHdrChkSumErrors, stnTrafDescrParam5=stnTrafDescrParam5, stnAtmPortIfState=stnAtmPortIfState, stnAtmPortSigAssignVpiVci=stnAtmPortSigAssignVpiVci, stnAtmPortSigEnabled=stnAtmPortSigEnabled, stnAtmPortSigDurations=stnAtmPortSigDurations, stnAtmPortIlmiVersion=stnAtmPortIlmiVersion, stnTrafDescrParam3=stnTrafDescrParam3, stnAtmPortSigSSCSEntry=stnAtmPortSigSSCSEntry, stnQosClass3CDV=stnQosClass3CDV, stnVcCrossConnHighVci=stnVcCrossConnHighVci, stnAtmTholdQLimitDiscard=stnAtmTholdQLimitDiscard, stnAtmPortTrafIndex=stnAtmPortTrafIndex, stnAtmPortIlmiAutoNegotiate=stnAtmPortIlmiAutoNegotiate, stnAtmPortTrafPhyParityErrors=stnAtmPortTrafPhyParityErrors, stnAtmTholdCellLowerLimit=stnAtmTholdCellLowerLimit, stnAtmTholdCellUpperLimit=stnAtmTholdCellUpperLimit, stnAtmPortIlmiPrefixLen=stnAtmPortIlmiPrefixLen, stnAtmPortSigs=stnAtmPortSigs, stnAtmAcctFtpPassword3=stnAtmAcctFtpPassword3, stnTrafDescrParam4=stnTrafDescrParam4, stnAtmAcctMaxFiles=stnAtmAcctMaxFiles, stnVcLinkAalType=stnVcLinkAalType, stnTraceIpsFile=stnTraceIpsFile, stnAtmPortSigT310Duration=stnAtmPortSigT310Duration, stnAtmAcctFilePath=stnAtmAcctFilePath, stnAtmCrossConns=stnAtmCrossConns, stnTracePdProblemEnabled=stnTracePdProblemEnabled, stnAtmPortSigT308Retries=stnAtmPortSigT308Retries, stnAtmPortIlmiNetworkOrientation=stnAtmPortIlmiNetworkOrientation, stnAtmAddrIfIndex=stnAtmAddrIfIndex, stnAtmLinks=stnAtmLinks, stnAtmAddrAddress=stnAtmAddrAddress, stnAtmThresholdEntry=stnAtmThresholdEntry, stnVcCrossConnLowVpi=stnVcCrossConnLowVpi, stnVcLinkAal5EncapsType=stnVcLinkAal5EncapsType, stnAtmPortTrafficEntry=stnAtmPortTrafficEntry, stnAtmPortMaxVccVci=stnAtmPortMaxVccVci, stnAtmPortIlmiCheckConnectionInt=stnAtmPortIlmiCheckConnectionInt, stnTracePdFile=stnTracePdFile, stnVcLinkAalObjectsValid=stnVcLinkAalObjectsValid, stnVcCrossConnEntry=stnVcCrossConnEntry, stnAtmTraces=stnAtmTraces, stnAtmPortSigRetryTable=stnAtmPortSigRetryTable, stnAtmPortOamRetryFrequency=stnAtmPortOamRetryFrequency, stnQosClass2CLR=stnQosClass2CLR, stnAtmPortSigT313Duration=stnAtmPortSigT313Duration, stnAtmPortEnabled=stnAtmPortEnabled, stnAtmPortSigT316Retries=stnAtmPortSigT316Retries, stnTrafDescrIndex=stnTrafDescrIndex, stnAtmPortIlmiTable=stnAtmPortIlmiTable, stnTraceIpsEnabled=stnTraceIpsEnabled, stnAtmPortOperStatus=stnAtmPortOperStatus, stnAtmPortSigVci=stnAtmPortSigVci, stnAtmPortSigVersion=stnAtmPortSigVersion, stnAtmTholdRegionId=stnAtmTholdRegionId, stnAtmPortSigT333Duration=stnAtmPortSigT333Duration, stnCdrLogFailure=stnCdrLogFailure, stnVcCrossConnHighIfIndex=stnVcCrossConnHighIfIndex, stnAtmObjects=stnAtmObjects, stnVcLinks=stnVcLinks, stnAtmPortIlmiVci=stnAtmPortIlmiVci, TrafficDescrOperStatus=TrafficDescrOperStatus)
