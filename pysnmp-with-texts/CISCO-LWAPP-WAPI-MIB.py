#
# PySNMP MIB module CISCO-LWAPP-WAPI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-WAPI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:06:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
cLApSysMacAddress, = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress")
cldcClientMacAddress, = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress")
CLSecKeyFormat, = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLSecKeyFormat")
cLWlanIndex, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, ObjectIdentity, iso, NotificationType, ModuleIdentity, Integer32, Gauge32, Bits, MibIdentifier, TimeTicks, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "ObjectIdentity", "iso", "NotificationType", "ModuleIdentity", "Integer32", "Gauge32", "Bits", "MibIdentifier", "TimeTicks", "Counter64", "Counter32")
DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
ciscoLwappWapiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 9997))
ciscoLwappWapiMIB.setRevisions(('2010-12-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappWapiMIB.setRevisionsDescriptions(('cisco WiFi Controller Snmp agent support for Wapi. WAPI is a Chinese National Standard for Wireless LAN (GB 15629.11-2003)',))
if mibBuilder.loadTexts: ciscoLwappWapiMIB.setLastUpdated('201005230000Z')
if mibBuilder.loadTexts: ciscoLwappWapiMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoLwappWapiMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email : cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappWapiMIB.setDescription('cisco WiFi Controller Snmp agent support for Wapi. WAPI is a Chinese National Standard for Wireless LAN (GB 15629.11-2003) GLOSSARY: WAPI - WLAN Authentication and Privacy Infrastructures WAI - WLAN Authentication Interface WLAN - Wireless Local Area Network WPI - Wireless Privacy Interface MSK - multicast session key AKM - authentication and key management BKID - Base Key IDentification')
ciscoLwappWapiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1))
cLWapiWlanStats = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1), )
if mibBuilder.loadTexts: cLWapiWlanStats.setStatus('current')
if mibBuilder.loadTexts: cLWapiWlanStats.setDescription('This table maintains the WAPI statistics for each WLAN on which WAPI is configured as the security protocol.')
cLWapiWlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWapiWlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cLWapiWlanStatsEntry.setDescription('An entry in the cLWWSW Table')
cLWWSWAISignatureErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAISignatureErrors.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAISignatureErrors.setDescription('This counter shall increment when the signature in the received WAI message is incorrect')
cLWWSWAIHMACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAIHMACErrors.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAIHMACErrors.setDescription('This counter shall increment when the message authentication code in the received WAI message is incorrect')
cLWWSWAIAuthResultFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAIAuthResultFailures.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAIAuthResultFailures.setDescription('This counter shall increment when the WAI authentication is unsuccessful')
cLWWSWAIDiscardCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAIDiscardCounters.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAIDiscardCounters.setDescription('This counter shall increment when the received WAI message is discarded')
cLWWSWAITimeoutCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAITimeoutCounters.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAITimeoutCounters.setDescription('This counter shall increment when the WAI message is timeout')
cLWWSWAIFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAIFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAIFormatErrors.setDescription('This counter shall increment when there exists format error in the WAI message')
cLWWSWAICertHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAICertHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAICertHandshakeFailures.setDescription('This counter shall increment when the WAI Certificate Authentication is unsuccessful')
cLWWSWAIUnicastHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAIUnicastHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAIUnicastHandshakeFailures.setDescription('This counter shall increment when the WAI Unicast Key Negotiation is unsuccessful')
cLWWSWAIMulticastHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWAIMulticastHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: cLWWSWAIMulticastHandshakeFailures.setDescription('This counter shall increment when the WAI Multicast Key Negotiation is unsuccessful')
cLWWSWPIRXReplayCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWPIRXReplayCounters.setStatus('current')
if mibBuilder.loadTexts: cLWWSWPIRXReplayCounters.setDescription('This counter shall increment when the WPI RX replay check is unsuccessful')
cLWWSWPIRXMicErrorCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWPIRXMicErrorCounters.setStatus('current')
if mibBuilder.loadTexts: cLWWSWPIRXMicErrorCounters.setDescription('This counter shall increment when the WPI MIC is error')
cLWWSWPIRXDecryptErrorCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWWSWPIRXDecryptErrorCounters.setStatus('current')
if mibBuilder.loadTexts: cLWWSWPIRXDecryptErrorCounters.setDescription('This counter shall increment when the WPI Decryption is error')
cLWapiClientStats = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2), )
if mibBuilder.loadTexts: cLWapiClientStats.setStatus('current')
if mibBuilder.loadTexts: cLWapiClientStats.setDescription('This table maintains the WAPI statistics for each client connected to a WLAN on which WAPI is configured as the security protocol.')
cLWapiClientStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cLWapiClientStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cLWapiClientStatsEntry.setDescription('An entry in the cLWapiClientStats Table')
cLWCSWapiClientVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWapiClientVersion.setStatus('current')
if mibBuilder.loadTexts: cLWCSWapiClientVersion.setDescription('This object represents the WAPI draft version used by the WAPI client')
cLWCSWAISignatureErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAISignatureErrors.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAISignatureErrors.setDescription('This counter shall increment when the signature in the received WAI message is incorrect')
cLWCSWAIHMACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIHMACErrors.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIHMACErrors.setDescription('This counter shall increment when the message authentication code in the received WAI message is incorrect')
cLWCSWAIAuthResultFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIAuthResultFailures.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIAuthResultFailures.setDescription('This counter shall increment when the WAI authentication is unsuccessful')
cLWCSWAIDiscardCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIDiscardCounters.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIDiscardCounters.setDescription('This counter shall increment when the received WAI message is discarded')
cLWCSWAITimeoutCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAITimeoutCounters.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAITimeoutCounters.setDescription('This counter shall increment when the WAI message is timeout')
cLWCSWAIFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIFormatErrors.setDescription('This counter shall increment when there exists format error in the WAI message')
cLWCSWAICertHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAICertHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAICertHandshakeFailures.setDescription('This counter shall increment when the WAI Certificate Authentication is unsuccessful')
cLWCSWAIUnicastHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIUnicastHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIUnicastHandshakeFailures.setDescription('This counter shall increment when the WAI Unicast Key Negotiation is unsuccessful')
cLWCSWAIMulticastHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIMulticastHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIMulticastHandshakeFailures.setDescription('This counter shall increment when the WAI Multicast Key Negotiation is unsuccessful')
cLWCSWAIUnicastCipherSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIUnicastCipherSuite.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIUnicastCipherSuite.setDescription('This value represents the Client Unicast Cipher Suite in use, of which obtained from Assoc req frame')
cLWCSWAIMcastCipherSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIMcastCipherSuite.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIMcastCipherSuite.setDescription('This value represents the Client Multicast Cipher Suite in use, of which obtained from Assoc req frame')
cLWCSWAIAuthenticationSuiteRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIAuthenticationSuiteRequested.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIAuthenticationSuiteRequested.setDescription('This object specificies the last AKM suite requested from client. 0x 00 14 72 01 : cert 0x 00 14 72 02 : psk ')
cLWCSWAIBKIDUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAIBKIDUsed.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAIBKIDUsed.setDescription('This value represents the selector of the last BKID used in the last Unicast Key Negotiation Handshake')
cLWCSWAICtrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWAICtrPortState.setStatus('current')
if mibBuilder.loadTexts: cLWCSWAICtrPortState.setDescription('This value represents the state of client controlled port entity, true means authenticated, false means not authenticated')
cLWapiWlanConfig = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3), )
if mibBuilder.loadTexts: cLWapiWlanConfig.setStatus('current')
if mibBuilder.loadTexts: cLWapiWlanConfig.setDescription('This table maintains the WAPI config entry for the WLAN.')
cLWapiWlanConfigEntrty = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWapiWlanConfigEntrty.setStatus('current')
if mibBuilder.loadTexts: cLWapiWlanConfigEntrty.setDescription('An entry in the cLWapiWlanConfig Table')
cLWCSWlanWapiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiEnable.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiEnable.setDescription('This object is used to enable the WAPI security on the WLAN.')
cLWCSWlanWapiAkmKeyMgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cert", 1), ("psk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiAkmKeyMgmtMode.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiAkmKeyMgmtMode.setDescription('This object is used to enable the AKM type to be used for the WAPI WLAN.')
cLWCSWlanWapiEncryptType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("sms4", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiEncryptType.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiEncryptType.setDescription('This object is used to enable the encryption type for WAPI WLAN.')
cLWCSWlanWapiPskFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 4), CLSecKeyFormat().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiPskFmt.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiPskFmt.setDescription('This object indicates the type of the authentication preshared key configured through the object cLWCSWlanWapiPskSetkey. Note that the key configuration is applicable only when psk is configured as the key management mechanism through the cLWCSWlanWapiAkmKeyMgmtMode object.')
cLWCSWlanWapiPsk = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiPsk.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiPsk.setDescription("This object is used to configure the Pre-Shared Key for WAI PSK authentication for the WLAN. The key can be in ASCII or HEX format. 'ascii' 8-40 characters 'hex' 4-40 octets. ")
cLWCSWlanWapiConfigUnicasCiphersEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiConfigUnicasCiphersEntry.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiConfigUnicasCiphersEntry.setDescription('The selector of a supported unicast cipher suite. It consists of an OUI (the first 3 octets) and a cipher suite identifier (the last octet).')
cLWCSWlanWapiConfigUnicastCipherSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiConfigUnicastCipherSize.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiConfigUnicastCipherSize.setDescription('This object indicates the length in bit of the USK. This should be 256 for SMS4. The first 128bits is the UEK and the last 128bits is the UCK.')
cLWCSWlanWapiMcastCipherSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiMcastCipherSize.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiMcastCipherSize.setDescription('This object indicates the length in bit of the MSK. This should be 256 for in SMS4. The first 128bits is the MEK and the last 128bits is the MCK.')
cLWCSWlanBKLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 9), Unsigned32().clone(43200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanBKLifeTime.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanBKLifeTime.setDescription('This object is used to configure the maximum lifetime of a BK in the BK cache.')
cLWCSWlanBKReauthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 10), Unsigned32().clone(70)).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanBKReauthThreshold.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanBKReauthThreshold.setDescription('This object is used to configure the percentage of the BK lifetime that should expire before a WAI reauthentication occurs.')
cLWCSWlanWapiConfigMulticastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiConfigMulticastCipher.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiConfigMulticastCipher.setDescription('This object indicates the multicast cipher suite that this entity must adopt. The WAPI Parameter Set information element shall adopt the value of this variable, which contains a 3-octet OUI and a one-octet cipher suite identifier.')
cLWCSWlanWapiAuthenticationSuiteSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuiteSelected.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuiteSelected.setDescription('This object represents the selector of the last AKM suite negotiated.')
cLWCSWlanWapiUnicastCipherSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiUnicastCipherSelected.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiUnicastCipherSelected.setDescription('This object indicates the selector of the last unicast cipher suite negotiated.')
cLWCSWlanWapiMulticastCipherSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiMulticastCipherSelected.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiMulticastCipherSelected.setDescription('This object indicates the selector of the last multicast cipher suite negotiated.')
cLWCSWlanWapiPreauthenticationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiPreauthenticationState.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiPreauthenticationState.setDescription('This object represents the state of Preauthentication in WAPI and currently it is not supported.')
cLWapiAPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 4), )
if mibBuilder.loadTexts: cLWapiAPTable.setStatus('current')
if mibBuilder.loadTexts: cLWapiAPTable.setDescription('This table maintains the WAPI details and configurations for each AP connected.')
cLWapiAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLWapiAPEntry.setStatus('current')
if mibBuilder.loadTexts: cLWapiAPEntry.setDescription('An entry in the cLWapiAPTable Table.')
cLWCSWapiAPMaxUnicastKeysSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWapiAPMaxUnicastKeysSupport.setStatus('current')
if mibBuilder.loadTexts: cLWCSWapiAPMaxUnicastKeysSupport.setDescription("This object represents the maximum number of USK's that an AP can support.")
cLWapiWlanAKMSuitesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 5), )
if mibBuilder.loadTexts: cLWapiWlanAKMSuitesConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLWapiWlanAKMSuitesConfigTable.setDescription('This table maintains the WAPI config entry for the WLAN.')
cLWapiWlanAKMSuitesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WAPI-MIB", "cLWCSWlanWapiAuthenticationSuiteIndex"))
if mibBuilder.loadTexts: cLWapiWlanAKMSuitesConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLWapiWlanAKMSuitesConfigEntry.setDescription('An entry in the cLWapiWlanAKMSuitesConfig Table')
cLWCSWlanWapiAuthenticationSuiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cert", 1), ("psk", 2))))
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuiteIndex.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuiteIndex.setDescription('This object is used to a index for AKM suites on the WLAN.')
cLWCSWlanWapiAuthenticationSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuite.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuite.setDescription('This object is used to indicate the AKM suite octects on the WLAN.')
cLWCSWlanWapiAuthenticationSuiteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuiteEnable.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanWapiAuthenticationSuiteEnable.setDescription('This object is used to enable the AKM suites on the WLAN.')
cLWapiCiphers = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 6), )
if mibBuilder.loadTexts: cLWapiCiphers.setStatus('current')
if mibBuilder.loadTexts: cLWapiCiphers.setDescription('This table maintains the unicast cipher suites supported by this entity. It allows enabling and disabling of each unicast cipher suite by network management. The unicast cipher suite list in the WAPI Parameter Set information element is formed using the information in this table.')
cLWapiCiphersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WAPI-MIB", "cLWCSWlanCipherIndex"))
if mibBuilder.loadTexts: cLWapiCiphersEntry.setStatus('current')
if mibBuilder.loadTexts: cLWapiCiphersEntry.setDescription('An entry in the cLWapiCiphers Table.')
cLWCSWlanCipherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLWCSWlanCipherIndex.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanCipherIndex.setDescription('This object represents auxiliary index of the CiscoWapiCiphersEntry.')
cLWCSWlanCipherEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9997, 1, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWCSWlanCipherEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWCSWlanCipherEnabled.setDescription('This object represents enables or disables the unicast cipher.')
ciscoLwappWapiConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2))
clWapiASIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiASIpAddress.setStatus('current')
if mibBuilder.loadTexts: clWapiASIpAddress.setDescription('This object represents the IP address of the WAPI authentication server.')
clWapiASPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiASPortNumber.setStatus('current')
if mibBuilder.loadTexts: clWapiASPortNumber.setDescription('This object represents the UDP port number for WAPI authentication server.')
clWapiASRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiASRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: clWapiASRequestTimeout.setDescription('This object represents timeout value for the packets sent to Auth Server.')
clWapiMulticastRekeyMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("timeBased", 2), ("messageBased", 3), ("timemessageBased", 4))).clone('timeBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiMulticastRekeyMethod.setStatus('current')
if mibBuilder.loadTexts: clWapiMulticastRekeyMethod.setDescription('This object selects a mechanism for rekeying the WAPI MSK. The default is time-based, once per day. Rekeying the MSK is only applicable to an entry acting in the AE role.')
clWapiMulticastRekeyTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 5), Unsigned32().clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiMulticastRekeyTime.setStatus('current')
if mibBuilder.loadTexts: clWapiMulticastRekeyTime.setDescription('This object represents the time in seconds after which the WAPI MSK will be refreshed. The timer will start the moment the MSK was set using the MLME-SETWPIKEYS request primitive.')
clWapiMulticastRekeyMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiMulticastRekeyMessages.setStatus('current')
if mibBuilder.loadTexts: clWapiMulticastRekeyMessages.setDescription('This object represents the message count in thousands after which the WAPI MSK will be refreshed. The message counter will start the moment the MSK was set using the MLME-SETWPIKEYS request primitive.')
clWapiMulticastRekeyStrict = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiMulticastRekeyStrict.setStatus('current')
if mibBuilder.loadTexts: clWapiMulticastRekeyStrict.setDescription('This object signals that the MSK shall be refreshed whenever a STA leaves the BSS that possesses the MSK.')
clWapiConfigCertificateUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 8), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiConfigCertificateUpdateCount.setStatus('current')
if mibBuilder.loadTexts: clWapiConfigCertificateUpdateCount.setDescription('This object represents the number of times messages in the WAPI hhandshake protocol will be retried per certificate handshake attempt.')
clWapiConfigMulticastUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 9), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiConfigMulticastUpdateCount.setStatus('current')
if mibBuilder.loadTexts: clWapiConfigMulticastUpdateCount.setDescription('This object represents the number of times message 1 in the WAPI muticast key announcement handshake will be retried per MSK handshake attempt.')
clWapiConfigUnicastUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 10), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiConfigUnicastUpdateCount.setStatus('current')
if mibBuilder.loadTexts: clWapiConfigUnicastUpdateCount.setDescription('This object represents the number of times message 1 and message 3 in the WAPI unicast key announcement handshake will be retried per USK handshake attempt.')
cLWCSWapiConfigureVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWCSWapiConfigureVersion.setStatus('current')
if mibBuilder.loadTexts: cLWCSWapiConfigureVersion.setDescription('This object represents the WAPI configuration version')
clWapiConfigControlledPortControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("auto", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clWapiConfigControlledPortControl.setStatus('current')
if mibBuilder.loadTexts: clWapiConfigControlledPortControl.setDescription('This object indicates the value of the Controlled port. If the value is 0 which means automatic, the current behaviour. The state of the controlled port shall be based on the result of authentication.')
clWapiUserInvalidCertificationInbreakNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clWapiUserInvalidCertificationInbreakNetwork.setStatus('current')
if mibBuilder.loadTexts: clWapiUserInvalidCertificationInbreakNetwork.setDescription('This object represents the WAPI user with invalid certification.')
cLApWAPISecurityLowAttack = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApWAPISecurityLowAttack.setStatus('current')
if mibBuilder.loadTexts: cLApWAPISecurityLowAttack.setDescription('This object represents the WAPI security low attack notification information.')
clWapiUnicastRekeyMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("timeBased", 2), ("messageBased", 3), ("timeMessageBased", 4))).clone('timeBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiUnicastRekeyMethod.setStatus('current')
if mibBuilder.loadTexts: clWapiUnicastRekeyMethod.setDescription('This object selects a mechanism for rekeying the WAPI USK. The default is time-based, once per day. Rekeying the USK is only applicable to an entry acting in the AE role. Method 1 (disabled) will temporarily stop the unicast rekeying')
clWapiUnicastRekeyTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 16), Unsigned32().clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiUnicastRekeyTime.setStatus('current')
if mibBuilder.loadTexts: clWapiUnicastRekeyTime.setDescription('This object represents the time in seconds after which the WAPI USK will be refreshed. The timer will start the moment the USK was set using the MLME-SETWPIKEYS request primitive.')
clWapiUnicastRekeyMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 17), Unsigned32()).setUnits('1000 messages').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiUnicastRekeyMessage.setStatus('current')
if mibBuilder.loadTexts: clWapiUnicastRekeyMessage.setDescription('This object represents the message count in thousands after which the WAPI USK will be refreshed. The message counter will start the moment the USK was set using the MLME-SETWPIKEYS request primitive. This MIB will be configurable od of TIME or TIME&PACKET')
clWapiConfigSATimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 18), Unsigned32().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clWapiConfigSATimeout.setStatus('current')
if mibBuilder.loadTexts: clWapiConfigSATimeout.setDescription('This object represents the maximum time a security association shall take to set up.')
cLApWAPIReplayAttack = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApWAPIReplayAttack.setStatus('current')
if mibBuilder.loadTexts: cLApWAPIReplayAttack.setDescription('This object represents the WAPI replay attack notification information.')
cLApWAPITamperAttack = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLApWAPITamperAttack.setStatus('current')
if mibBuilder.loadTexts: cLApWAPITamperAttack.setDescription('This object represents the WAPI tamper attack notification information.')
clWapiAddressRedirectAttack = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clWapiAddressRedirectAttack.setStatus('current')
if mibBuilder.loadTexts: clWapiAddressRedirectAttack.setDescription('This object represents the WAPI redirect attack notification information.')
ciscoLwappWapiCertificateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9997, 3))
clWapiWLCCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 3, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clWapiWLCCertificateStatus.setStatus('current')
if mibBuilder.loadTexts: clWapiWLCCertificateStatus.setDescription('This object represents the installation state of WLC Certificate. True means the WLC certificate is installed. False means it is uninstalled.')
clWapiCACertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 3, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clWapiCACertificateStatus.setStatus('current')
if mibBuilder.loadTexts: clWapiCACertificateStatus.setDescription('This object represents the installation state of Certificate Authority Certificate. True means the CA certificate is installed. False means it is uninstalled')
clWapiASCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9997, 3, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clWapiASCertificateStatus.setStatus('current')
if mibBuilder.loadTexts: clWapiASCertificateStatus.setDescription('This object represents the installation state of Auth Server Certificate. True means the AS certificate is installed. False means it is uninstalled.')
ciscoLwappWapiMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9997, 4))
ciscoLwappWapiUserInvalidCertificateNetworkTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 9997, 4, 1)).setObjects(("CISCO-LWAPP-WAPI-MIB", "clWapiUserInvalidCertificationInbreakNetwork"))
if mibBuilder.loadTexts: ciscoLwappWapiUserInvalidCertificateNetworkTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWapiUserInvalidCertificateNetworkTrap.setDescription('This notification will be sent when the WAPI Client is installed with invalid certificates.')
ciscoLwappWapiSecurityLowAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 9997, 4, 2)).setObjects(("CISCO-LWAPP-WAPI-MIB", "cLApWAPISecurityLowAttack"))
if mibBuilder.loadTexts: ciscoLwappWapiSecurityLowAttackTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWapiSecurityLowAttackTrap.setDescription('This notification will be sent when AP received a fake Unicast Key Negotiation Response frame of which the WIE_AUSE is different with that of AP sent before.')
ciscoLwappWapiReplayAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 9997, 4, 3)).setObjects(("CISCO-LWAPP-WAPI-MIB", "cLApWAPIReplayAttack"))
if mibBuilder.loadTexts: ciscoLwappWapiReplayAttackTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWapiReplayAttackTrap.setDescription('This notification will be sent when AP received an AE challenge is different with that of AP received before.')
ciscoLwappWapiTamperAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 9997, 4, 4)).setObjects(("CISCO-LWAPP-WAPI-MIB", "cLApWAPITamperAttack"))
if mibBuilder.loadTexts: ciscoLwappWapiTamperAttackTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWapiTamperAttackTrap.setDescription('This notification will be sent when AP received an invaild Message Authentication Code.')
ciscoLwappWapiAddressRedirectAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 9997, 4, 5)).setObjects(("CISCO-LWAPP-WAPI-MIB", "clWapiAddressRedirectAttack"))
if mibBuilder.loadTexts: ciscoLwappWapiAddressRedirectAttackTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWapiAddressRedirectAttackTrap.setDescription('This notification will be sent when AP received an address redirect attack trap. Radio interface information (MAC), BSSID, SSID, Mac of station')
mibBuilder.exportSymbols("CISCO-LWAPP-WAPI-MIB", cLWCSWlanWapiPskFmt=cLWCSWlanWapiPskFmt, cLWCSWlanWapiPreauthenticationState=cLWCSWlanWapiPreauthenticationState, cLWapiAPEntry=cLWapiAPEntry, cLWCSWlanWapiAuthenticationSuite=cLWCSWlanWapiAuthenticationSuite, cLWCSWAIMulticastHandshakeFailures=cLWCSWAIMulticastHandshakeFailures, cLWCSWAIBKIDUsed=cLWCSWAIBKIDUsed, clWapiConfigSATimeout=clWapiConfigSATimeout, cLWWSWAITimeoutCounters=cLWWSWAITimeoutCounters, ciscoLwappWapiReplayAttackTrap=ciscoLwappWapiReplayAttackTrap, cLWWSWAIDiscardCounters=cLWWSWAIDiscardCounters, clWapiUserInvalidCertificationInbreakNetwork=clWapiUserInvalidCertificationInbreakNetwork, clWapiWLCCertificateStatus=clWapiWLCCertificateStatus, clWapiConfigCertificateUpdateCount=clWapiConfigCertificateUpdateCount, clWapiASRequestTimeout=clWapiASRequestTimeout, cLWCSWAIFormatErrors=cLWCSWAIFormatErrors, clWapiASIpAddress=clWapiASIpAddress, cLApWAPITamperAttack=cLApWAPITamperAttack, ciscoLwappWapiCertificateObjects=ciscoLwappWapiCertificateObjects, cLWCSWAIAuthResultFailures=cLWCSWAIAuthResultFailures, cLWCSWlanWapiConfigUnicastCipherSize=cLWCSWlanWapiConfigUnicastCipherSize, cLWWSWAIAuthResultFailures=cLWWSWAIAuthResultFailures, clWapiASPortNumber=clWapiASPortNumber, cLWCSWAIMcastCipherSuite=cLWCSWAIMcastCipherSuite, cLWWSWAISignatureErrors=cLWWSWAISignatureErrors, cLWCSWapiClientVersion=cLWCSWapiClientVersion, cLWapiCiphers=cLWapiCiphers, cLApWAPISecurityLowAttack=cLApWAPISecurityLowAttack, cLWCSWAIDiscardCounters=cLWCSWAIDiscardCounters, clWapiCACertificateStatus=clWapiCACertificateStatus, ciscoLwappWapiAddressRedirectAttackTrap=ciscoLwappWapiAddressRedirectAttackTrap, cLWCSWlanWapiEncryptType=cLWCSWlanWapiEncryptType, cLWWSWAIHMACErrors=cLWWSWAIHMACErrors, cLWCSWlanCipherEnabled=cLWCSWlanCipherEnabled, cLWCSWAIAuthenticationSuiteRequested=cLWCSWAIAuthenticationSuiteRequested, cLWCSWlanWapiAkmKeyMgmtMode=cLWCSWlanWapiAkmKeyMgmtMode, cLApWAPIReplayAttack=cLApWAPIReplayAttack, clWapiMulticastRekeyStrict=clWapiMulticastRekeyStrict, clWapiConfigMulticastUpdateCount=clWapiConfigMulticastUpdateCount, cLWCSWlanWapiUnicastCipherSelected=cLWCSWlanWapiUnicastCipherSelected, cLWCSWapiAPMaxUnicastKeysSupport=cLWCSWapiAPMaxUnicastKeysSupport, clWapiUnicastRekeyTime=clWapiUnicastRekeyTime, cLWapiWlanStats=cLWapiWlanStats, cLWCSWlanWapiConfigMulticastCipher=cLWCSWlanWapiConfigMulticastCipher, cLWCSWlanBKLifeTime=cLWCSWlanBKLifeTime, cLWCSWlanWapiMulticastCipherSelected=cLWCSWlanWapiMulticastCipherSelected, ciscoLwappWapiMIBNotifObjects=ciscoLwappWapiMIBNotifObjects, cLWCSWlanWapiAuthenticationSuiteIndex=cLWCSWlanWapiAuthenticationSuiteIndex, cLWapiCiphersEntry=cLWapiCiphersEntry, ciscoLwappWapiTamperAttackTrap=ciscoLwappWapiTamperAttackTrap, cLWCSWlanWapiAuthenticationSuiteEnable=cLWCSWlanWapiAuthenticationSuiteEnable, ciscoLwappWapiSecurityLowAttackTrap=ciscoLwappWapiSecurityLowAttackTrap, cLWCSWAITimeoutCounters=cLWCSWAITimeoutCounters, cLWCSWAIUnicastCipherSuite=cLWCSWAIUnicastCipherSuite, cLWWSWPIRXReplayCounters=cLWWSWPIRXReplayCounters, cLWWSWAIMulticastHandshakeFailures=cLWWSWAIMulticastHandshakeFailures, cLWCSWlanCipherIndex=cLWCSWlanCipherIndex, cLWCSWlanBKReauthThreshold=cLWCSWlanBKReauthThreshold, cLWCSWlanWapiAuthenticationSuiteSelected=cLWCSWlanWapiAuthenticationSuiteSelected, ciscoLwappWapiMIB=ciscoLwappWapiMIB, cLWapiWlanAKMSuitesConfigTable=cLWapiWlanAKMSuitesConfigTable, cLWWSWAIUnicastHandshakeFailures=cLWWSWAIUnicastHandshakeFailures, cLWWSWPIRXMicErrorCounters=cLWWSWPIRXMicErrorCounters, cLWapiWlanConfig=cLWapiWlanConfig, clWapiConfigControlledPortControl=clWapiConfigControlledPortControl, cLWCSWAIHMACErrors=cLWCSWAIHMACErrors, clWapiMulticastRekeyTime=clWapiMulticastRekeyTime, cLWWSWAIFormatErrors=cLWWSWAIFormatErrors, ciscoLwappWapiConfig=ciscoLwappWapiConfig, clWapiMulticastRekeyMessages=clWapiMulticastRekeyMessages, cLWCSWAICtrPortState=cLWCSWAICtrPortState, cLWCSWAIUnicastHandshakeFailures=cLWCSWAIUnicastHandshakeFailures, cLWapiWlanAKMSuitesConfigEntry=cLWapiWlanAKMSuitesConfigEntry, cLWCSWlanWapiMcastCipherSize=cLWCSWlanWapiMcastCipherSize, cLWapiAPTable=cLWapiAPTable, cLWWSWPIRXDecryptErrorCounters=cLWWSWPIRXDecryptErrorCounters, clWapiASCertificateStatus=clWapiASCertificateStatus, clWapiUnicastRekeyMessage=clWapiUnicastRekeyMessage, cLWCSWAISignatureErrors=cLWCSWAISignatureErrors, cLWCSWlanWapiEnable=cLWCSWlanWapiEnable, cLWWSWAICertHandshakeFailures=cLWWSWAICertHandshakeFailures, cLWCSWapiConfigureVersion=cLWCSWapiConfigureVersion, ciscoLwappWapiMIBObjects=ciscoLwappWapiMIBObjects, cLWapiClientStatsEntry=cLWapiClientStatsEntry, cLWapiClientStats=cLWapiClientStats, ciscoLwappWapiUserInvalidCertificateNetworkTrap=ciscoLwappWapiUserInvalidCertificateNetworkTrap, cLWCSWlanWapiConfigUnicasCiphersEntry=cLWCSWlanWapiConfigUnicasCiphersEntry, cLWapiWlanStatsEntry=cLWapiWlanStatsEntry, clWapiMulticastRekeyMethod=clWapiMulticastRekeyMethod, cLWapiWlanConfigEntrty=cLWapiWlanConfigEntrty, PYSNMP_MODULE_ID=ciscoLwappWapiMIB, clWapiAddressRedirectAttack=clWapiAddressRedirectAttack, clWapiConfigUnicastUpdateCount=clWapiConfigUnicastUpdateCount, cLWCSWlanWapiPsk=cLWCSWlanWapiPsk, clWapiUnicastRekeyMethod=clWapiUnicastRekeyMethod, cLWCSWAICertHandshakeFailures=cLWCSWAICertHandshakeFailures)
