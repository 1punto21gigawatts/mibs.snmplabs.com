#
# PySNMP MIB module WS-INFRA-LIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WS-INFRA-LIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, NotificationType, TimeTicks, Integer32, ModuleIdentity, Bits, IpAddress, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "TimeTicks", "Integer32", "ModuleIdentity", "Bits", "IpAddress", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wsInfraLic, = mibBuilder.importSymbols("WS-INFRA-SMI-MIB", "wsInfraLic")
wsInfraLicMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1))
wsInfraLicMib.setRevisions(('2007-02-07 11:27', '2006-05-24 15:19', '2006-05-01 14:36', '2006-04-28 14:16', '2005-06-27 17:08', '2005-06-22 15:10', '2005-06-22 11:27',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wsInfraLicMib.setRevisionsDescriptions(('01a07', '01a06', '01a05', '01a04', '01a03', '01a02', '01a01',))
if mibBuilder.loadTexts: wsInfraLicMib.setLastUpdated('200506231126Z')
if mibBuilder.loadTexts: wsInfraLicMib.setOrganization('Symbol Technologies')
if mibBuilder.loadTexts: wsInfraLicMib.setContactInfo('Symbol Technologies, Inc. Customer Service Postal: One Symbol Plaza Holtsville, NY 11742-1300 USA Tel: +1. 631.738.6213 E-mail: support@symbol.com Web: http://www.symbol.com/support')
if mibBuilder.loadTexts: wsInfraLicMib.setDescription('License management MIB.')
wsInfraAPLicNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraAPLicNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraAPLicNum.setDescription('A parameter associated with the number of licenses for the APs.')
wsInfraLicMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2))
wsInfraLicNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraLicNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicNum.setDescription('Number of license types currently registered with the License Manager. Effectively, this count reports on the number of rows in the license table.')
wsInfraLicActionFeature = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraLicActionFeature.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicActionFeature.setDescription('Description.')
wsInfraLicActionKey = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraLicActionKey.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicActionKey.setDescription('This object provides an entry point by which the License Manager receives instruction to alter the list of recognised licenses. Alterations are, for this entry point, limited to: 1. addition of new license types, (a row in the license table); 2. update of the count field of a license table row.')
wsInfraLicAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraLicAction.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicAction.setDescription('This object provides an entry point by which the License Manager receives instruction to alter the list of recognised licenses. Alteration are, for this entry point, limited to: 1. deletion of license types, (a row of the license table).')
wsInfraLicTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5), )
if mibBuilder.loadTexts: wsInfraLicTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicTable.setDescription('This object represents a table of licenses that are know to the License Manager. Licenses become known to the License Manager by means of license key submittal. The submittal of a key that is unknown to the License Manager causes the creation of a row in this object. The submittal of a known license key causes an update of the entries of the corresponding table row. NB - There is a one-to-one relationship between licenses and table rows.')
wsInfraLicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5, 1), ).setIndexNames((0, "WS-INFRA-LIC-MIB", "wsInfraLicIndex"))
if mibBuilder.loadTexts: wsInfraLicEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicEntry.setDescription('A row of the license table.')
wsInfraLicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: wsInfraLicIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicIndex.setDescription('This object contains a character-coded representation of the license type, and is used as the license table index.')
wsInfraLicFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraLicFeature.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicFeature.setDescription('The object contains a character-coded representation of the license type, and is also known as the *feature*.')
wsInfraLicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraLicKey.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicKey.setDescription('This objecdt represents the key recognised by the License Manager for the feature described by the corresponding row of the license table.')
wsInfraLicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraLicCount.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicCount.setDescription('This object represents the number of licenses known to the License Manager for the license type of the corresponding row of the license table. This number is the upper limit on the number of access points that the switch is allowed to support at any one time. NB - This value is specific to AP licensing, only.')
wsInfraLicUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraLicUsage.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicUsage.setDescription('This object represents the current usage of the license type of the correpsonding row of the license table. This value ranges from zero to the value of the license count, inclusively. NB - This value could exceed the license count, within some cluster configurations. See cluster statistics.')
wsInfraLicSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraLicSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicSerialNumber.setDescription('The serial number of the wireless switch. This is used in the generation of the license key.')
wsInfraLicMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 100))
wsInfraLicMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 100, 1))
wsInfraLicMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 100, 1, 1)).setObjects(("WS-INFRA-LIC-MIB", "wsInfraLicMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfraLicMIBCompliance = wsInfraLicMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicMIBCompliance.setDescription('Description.')
wsInfraLicMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 100, 2))
wsInfraLicMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 100, 2, 1)).setObjects(("WS-INFRA-LIC-MIB", "wsInfraAPLicNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfraLicMIBGroup = wsInfraLicMIBGroup.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicMIBGroup.setDescription('Description.')
wsInfraLicMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 1, 9, 1, 100, 2, 2)).setObjects(("WS-INFRA-LIC-MIB", "wsInfraLicNum"), ("WS-INFRA-LIC-MIB", "wsInfraLicFeature"), ("WS-INFRA-LIC-MIB", "wsInfraLicActionKey"), ("WS-INFRA-LIC-MIB", "wsInfraLicAction"), ("WS-INFRA-LIC-MIB", "wsInfraLicUsage"), ("WS-INFRA-LIC-MIB", "wsInfraLicKey"), ("WS-INFRA-LIC-MIB", "wsInfraLicSerialNumber"), ("WS-INFRA-LIC-MIB", "wsInfraAPLicNum"), ("WS-INFRA-LIC-MIB", "wsInfraLicCount"), ("WS-INFRA-LIC-MIB", "wsInfraLicActionFeature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfraLicMgmtGroup = wsInfraLicMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: wsInfraLicMgmtGroup.setDescription('The License Management group of objects.')
mibBuilder.exportSymbols("WS-INFRA-LIC-MIB", PYSNMP_MODULE_ID=wsInfraLicMib, wsInfraLicAction=wsInfraLicAction, wsInfraLicTable=wsInfraLicTable, wsInfraLicMib=wsInfraLicMib, wsInfraLicKey=wsInfraLicKey, wsInfraLicMIBGroup=wsInfraLicMIBGroup, wsInfraLicNum=wsInfraLicNum, wsInfraLicMIBCompliance=wsInfraLicMIBCompliance, wsInfraLicCount=wsInfraLicCount, wsInfraLicMgmtGroup=wsInfraLicMgmtGroup, wsInfraLicActionKey=wsInfraLicActionKey, wsInfraLicUsage=wsInfraLicUsage, wsInfraLicMIBConformance=wsInfraLicMIBConformance, wsInfraLicIndex=wsInfraLicIndex, wsInfraLicEntry=wsInfraLicEntry, wsInfraAPLicNum=wsInfraAPLicNum, wsInfraLicFeature=wsInfraLicFeature, wsInfraLicMIBCompliances=wsInfraLicMIBCompliances, wsInfraLicMIBGroups=wsInfraLicMIBGroups, wsInfraLicMgmt=wsInfraLicMgmt, wsInfraLicSerialNumber=wsInfraLicSerialNumber, wsInfraLicActionFeature=wsInfraLicActionFeature)
