#
# PySNMP MIB module HP-ICF-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, iso, NotificationType, ObjectIdentity, Counter32, Integer32, IpAddress, ModuleIdentity, Gauge32, Bits, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "iso", "NotificationType", "ObjectIdentity", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "Gauge32", "Bits", "Counter64", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpicfSnmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38))
hpicfSnmpMIB.setRevisions(('2008-12-09 00:00', '2007-08-24 00:00', '2006-11-11 00:00', '2006-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfSnmpMIB.setRevisionsDescriptions(('Updated Description for hpicfSnmpResponseSourceAddrPolicy, hpicfSnmpResponseSourceAddress, hpicfSnmpResponseSourceAddrIfIndex, hpicfSnmpTrapSourceAddrPolicy,hpicfSnmpTrapSourceAddress, and hpicfSnmpTrapSourceAddrIfIndex ', 'Added hpicfSnmpNotification information.', 'Updated description and changed InterfaceIndex to InterfaceIndexOrZero for hpicfSnmpResponseSourceAddrIfIndex and hpicfSnmpTrapSourceAddrIfIndex objects.', 'Initial revision',))
if mibBuilder.loadTexts: hpicfSnmpMIB.setLastUpdated('200812090000Z')
if mibBuilder.loadTexts: hpicfSnmpMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfSnmpMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfSnmpMIB.setDescription('This MIB module contains HP proprietary objects for managing SNMP entity.')
hpicfSnmpNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 0))
hpicfSnmpAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 0, 1)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFailCount"), ("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFailIPType"), ("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFailIP"))
if mibBuilder.loadTexts: hpicfSnmpAuthFail.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpAuthFail.setDescription('The switch sends this notification when an SNMP SET command fails at the authorization check stage. This notification applies to SETs within the hpicf tree that are network security related. This object is controlled by hpicfSnmpAuthNotifyEnable')
hpicfSnmpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1))
hpicfSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1))
hpicfSnmpGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1))
hpicfSnmpResponseSourceAddrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrPolicyTable.setDescription('A table of entries used to configure the policy for selecting source address while sending SNMP response. When this entry is configured, the source address field in the IP PKT header get modified based on the configured option. There are 4 valid options that can be configured for ipv4 and ipv6 networks a) rfc1517 This is the default behavior if no other policy is configured. In this case the source address will be the address of the interface from which packet goes out of the box. b) user configured IP address In this case the configured address will be used as source address in the SNMP response. c) user configured interface In this case the IP address configured on the specified interface will be used as source address in the SNMP response. In case of multinet interface then smallest IP address present on the interface in lexicographical order will be used as source address while sending SNMP responses for requests. d) dst_ip_of_request In this case, the destination IP address present in the IP header of received SNMP request will be used as source address in the SNMP response.')
hpicfSnmpResponseSourceAddrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 1, 1), ).setIndexNames((0, "HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddressType"))
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrPolicyEntry.setDescription('An entry in the table, containing information about a single source address. This table allows only 2 values that can be used as index to this table. These are: 1) hpicfSnmpResponseSourceAddressType = ipv4 Where user wants to configure the source address type used while sending the SNMP response on IPV4 network. 2) hpicfSnmpResponseSourceAddressType = ipv6 Where user wants to configure the source address type used while sending the SNMP response on IPV6 network.')
hpicfSnmpResponseSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 1, 1, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddressType.setDescription('We allow only 2 values for this object as an index for hpicfSnmpResponseSourceAddrPolicyEntry - 1) hpicfSnmpResponseSourceAddressType = ipv4 Where user wants to configure the source address type used while sending the SNMP response on IPV4 network 2) hpicfSnmpResponseSourceAddressType = ipv6 Where user wants to configure the source address type used while sending the SNMP response on IPV6 network.')
hpicfSnmpResponseSourceAddrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1517", 1), ("configuredIP", 2), ("configuredInterface", 3), ("dstIpOfRequest", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrPolicy.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrPolicy.setDescription(" This specifies the policy for selecting the source address for outgoing SNMP responses. a) rfc1517 This is the default behavior if no other policy is configured. In this case the source address will be the address of the interface from which packet goes out of the box. b) configuredIP By setting this value will enable the SNMP agent to use IP addresses specified in hpicfSnmpResponseSourceAddress object as source address while sending the response. hpicfSnmpResponseSourceAddress must be set to a valid and active IP address before setting policy to configuredIP. Note: This IP address will be used in the SNMP response PDU provided it is configured as an IP address on any one of the interfaces of the device. c) configuredInterface By setting this value will enable the SNMP agent to use IP addresses configured on the interface specified by hpicfSnmpResponseSourceAddrIfIndex object as source address while sending the response. In case of multinet interface then smallest IP address present on the interface in lexicographical order will be used as source address while sending SNMP responses for requests. hpicfSnmpResponseSourceAddrIfIndex object must be set to a valid loopback interface number before setting policy to configuredInterface. Note: The configured interface's IP address will be used in the SNMP response PDU provided the interface has an IP address configured. d) dst_ip_of_request In this case, the destination IP address present in the IP header of received SNMP request will be used as source address in the SNMP response.")
hpicfSnmpResponseSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddress.setDescription('This object is used to set the IP address which will be used as source IP while sending the SNMP response. This object should be used in conjunction with the hpicfSnmpResponseSourceAddressType and hpicfSnmpResponseSourceAddrPolicy. Note: This IP address will be used in the SNMP response PDU provided it is configured as an IP address on any one of the interfaces of the device.')
hpicfSnmpResponseSourceAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrIfIndex.setDescription("This object is used to set the interface whose IP address will be used as source IP while sending the SNMP response. This object should be used in conjunction with the hpicfSnmpResponseSourceAddressType and hpicfSnmpResponseSourceAddrPolicy. Note: The configured interface's IP address will be used in the SNMP response PDU provided the interface has an IP address configured.")
hpicfSnmpTrapSourceAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrTable.setDescription('A table of entries used to configure the source address used while generating SNMP Traps. When this entry is configured, the source address field in the IP PKT header get modified based on the configured option.')
hpicfSnmpTrapSourceAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 2, 1), ).setIndexNames((0, "HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddressType"))
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrEntry.setDescription('An entry in the table, containing information about a single source address. This table allows only 2 values that can be used as index to this table. These are: 1) hpicfSnmpResponseSourceAddressType = ipv4 Where user wants to configure the source address used while sending the SNMP TRAPs on IPV4 network. 2) hpicfSnmpResponseSourceAddressType = ipv6 Where user wants to configure the source address used while sending the SNMP TRAPs on IPV6 network.')
hpicfSnmpTrapSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 2, 1, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddressType.setDescription(' This table allows only 2 values that can be used as index to this table. These are: 1) hpicfSnmpResponseSourceAddressType = ipv4 Where user wants to configure the source address used while sending the SNMP TRAPs on IPV4 network. 2) hpicfSnmpResponseSourceAddressType = ipv6 Where user wants to configure the source address used while sending the SNMP TRAPs on IPV6 network.')
hpicfSnmpTrapSourceAddrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1517", 1), ("configuredIP", 2), ("configuredInterface", 3), ("dstIpOfRequest", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrPolicy.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrPolicy.setDescription(" This specifies the policy for selecting the source address for outgoing SNMP responses. a) rfc1517 This is the default behavior if no other policy is configured. In this case the source address will be the address of the interface from which packet goes out of the box. b) configuredIP By setting this value will enable the SNMP agent to use IP addresses specified in hpicfSnmpResponseSourceAddress object as source address while sending the response. hpicfSnmpTrapSourceAddress must be set to a valid and active ip address before setting policy to configuredIP. Note: This IP address will be used in the SNMP trap PDU provided it is configured as an IP address on any one of the interfaces of the device. c) configuredInterface By setting this value will enable the SNMP agent to use IP addresses configured on the interface specified by hpicfSnmpResponseSourceAddrIfIndex object as source address while sending the response. In case of multinet interface then smallest IP address present on the interface in lexicographical order will be used as source address while sending SNMP responses for requests. Note: The configured interface's IP address will be used in the SNMP trap PDU provided the interface has an IP address configured. hpicfSnmpTrapSourceAddrIfIndex object must be set to a valid loopback interface number before setting policy to configuredInterface.")
hpicfSnmpTrapSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddress.setDescription('This object is used to set the IP address which will be used as source IP while sending the SNMP TRAPs. This object should be used in conjunction with the hpicfSnmpResponseSourceAddressType and hpicfSnmpTrapSourceAddrPolicy. Note: This IP address will be used in the SNMP trap PDU provided it is configured as an IP address on any one of the interfaces of the device.')
hpicfSnmpTrapSourceAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrIfIndex.setDescription("This object is used to set the interface whose IP address will be used as source IP while sending the SNMP TRAPs. This object should be used in conjunction with the hpicfSnmpResponseSourceAddressType and hpicfSnmpTrapSourceAddrPolicy. Note: The configured interface's IP address will be used in the SNMP trap PDU provided the interface has an IP address configured.")
hpicfSnmpAuthNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSnmpAuthNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpAuthNotifyEnable.setDescription('Controls whether hpicfSnmpAuthFail notifications will be generated. The default value is 1 (Enabled). A value of 2 represents Disabled. Writing this object requires authentication, such as provided by SNMPv3. NOTE that hpicfSnmpAuthFail and snmpEnableAuthenTraps (RFC-1157) are mutually exclusive. While they may both be disabled, only one may be enabled at any given time. Notifications enabled by hpicfSnmpAuthFail are more comprehensive and are therefore recommended.')
hpicfSnmpNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 2))
hpicfSnmpAuthFailCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 2, 1), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSnmpAuthFailCount.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpAuthFailCount.setDescription('A count of SNMP authorization failures detected by the SNMP entity.')
hpicfSnmpAuthFailIPType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 2, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSnmpAuthFailIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpAuthFailIPType.setDescription('Type of IP address contained in hpicfSnmpAuthFailIP.')
hpicfSnmpAuthFailIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 1, 2, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSnmpAuthFailIP.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpAuthFailIP.setDescription('IP address of sender of message that failed authentication.')
hpicfSnmpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2))
hpicfSnmpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 1))
hpicfSnmpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 1, 1)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrTableCompliancesGroup"), ("HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddrTableCompliancesGroup"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrTableGroup"), ("HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddrTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpCompliance = hpicfSnmpCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpCompliance.setDescription('A compliance statement for HP Routing switches with SNMP')
hpicfSnmpCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 1, 2)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpNotifyObjectGroup"), ("HP-ICF-SNMP-MIB", "hpicfSnmpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpCompliance1 = hpicfSnmpCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpCompliance1.setDescription('A compliance statement for HP Routing switches with SNMP')
hpicfSnmpCompliancesGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2))
hpicfSnmpResponseSourceAddrTableCompliancesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2, 1)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddressType"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrPolicy"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddress"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpResponseSourceAddrTableCompliancesGroup = hpicfSnmpResponseSourceAddrTableCompliancesGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrTableCompliancesGroup.setDescription('A collection of objects allowing configuration of policies in the switch for selecting the source address used while generating SNMP response')
hpicfSnmpTrapSourceAddrTableCompliancesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2, 2)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddressType"), ("HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddrPolicy"), ("HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddress"), ("HP-ICF-SNMP-MIB", "hpicfSnmpTrapSourceAddrIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpTrapSourceAddrTableCompliancesGroup = hpicfSnmpTrapSourceAddrTableCompliancesGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrTableCompliancesGroup.setDescription('A collection of objects allowing configuration of source addresses for SNMP traps generated by the switch.')
hpicfSnmpResponseSourceAddrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2, 3)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddressType"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrPolicy"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddress"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpResponseSourceAddrTableGroup = hpicfSnmpResponseSourceAddrTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpResponseSourceAddrTableGroup.setDescription('Description.')
hpicfSnmpTrapSourceAddrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2, 4)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddressType"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrPolicy"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddress"), ("HP-ICF-SNMP-MIB", "hpicfSnmpResponseSourceAddrIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpTrapSourceAddrTableGroup = hpicfSnmpTrapSourceAddrTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpTrapSourceAddrTableGroup.setDescription('Description.')
hpicfSnmpNotifyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2, 5)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFailCount"), ("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFailIPType"), ("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFailIP"), ("HP-ICF-SNMP-MIB", "hpicfSnmpAuthNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpNotifyObjectGroup = hpicfSnmpNotifyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpNotifyObjectGroup.setDescription('The operational status of hpicfSwitchAuthServerFail notifications. The default value is 1 (Enabled). A value of 2 represents Disabled. Writing this object requires authentication, such as provided by SNMPv3.')
hpicfSnmpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 38, 2, 2, 6)).setObjects(("HP-ICF-SNMP-MIB", "hpicfSnmpAuthFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpNotificationGroup = hpicfSnmpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSnmpNotificationGroup.setDescription('Description.')
mibBuilder.exportSymbols("HP-ICF-SNMP-MIB", hpicfSnmpResponseSourceAddrPolicy=hpicfSnmpResponseSourceAddrPolicy, hpicfSnmpResponseSourceAddrTableGroup=hpicfSnmpResponseSourceAddrTableGroup, hpicfSnmpTrapSourceAddrTableGroup=hpicfSnmpTrapSourceAddrTableGroup, hpicfSnmpTrapSourceAddrPolicy=hpicfSnmpTrapSourceAddrPolicy, hpicfSnmpCompliance1=hpicfSnmpCompliance1, hpicfSnmpResponseSourceAddrIfIndex=hpicfSnmpResponseSourceAddrIfIndex, hpicfSnmpAuthNotifyEnable=hpicfSnmpAuthNotifyEnable, hpicfSnmpTrapSourceAddrTableCompliancesGroup=hpicfSnmpTrapSourceAddrTableCompliancesGroup, hpicfSnmpTrapSourceAddrTable=hpicfSnmpTrapSourceAddrTable, hpicfSnmpAuthFailIP=hpicfSnmpAuthFailIP, hpicfSnmpCompliance=hpicfSnmpCompliance, hpicfSnmpAuthFailIPType=hpicfSnmpAuthFailIPType, hpicfSnmpTrapSourceAddrEntry=hpicfSnmpTrapSourceAddrEntry, hpicfSnmpNotificationObjects=hpicfSnmpNotificationObjects, hpicfSnmpConformance=hpicfSnmpConformance, hpicfSnmpGlobalCfg=hpicfSnmpGlobalCfg, hpicfSnmpObjects=hpicfSnmpObjects, hpicfSnmpResponseSourceAddrTableCompliancesGroup=hpicfSnmpResponseSourceAddrTableCompliancesGroup, PYSNMP_MODULE_ID=hpicfSnmpMIB, hpicfSnmpCompliancesGroups=hpicfSnmpCompliancesGroups, hpicfSnmpResponseSourceAddrPolicyTable=hpicfSnmpResponseSourceAddrPolicyTable, hpicfSnmpTrapSourceAddrIfIndex=hpicfSnmpTrapSourceAddrIfIndex, hpicfSnmpResponseSourceAddressType=hpicfSnmpResponseSourceAddressType, hpicfSnmpNotifyObjectGroup=hpicfSnmpNotifyObjectGroup, hpicfSnmpNotificationGroup=hpicfSnmpNotificationGroup, hpicfSnmpTrapSourceAddress=hpicfSnmpTrapSourceAddress, hpicfSnmpTrapSourceAddressType=hpicfSnmpTrapSourceAddressType, hpicfSnmpAuthFail=hpicfSnmpAuthFail, hpicfSnmpResponseSourceAddrPolicyEntry=hpicfSnmpResponseSourceAddrPolicyEntry, hpicfSnmpNotification=hpicfSnmpNotification, hpicfSnmpAuthFailCount=hpicfSnmpAuthFailCount, hpicfSnmpCompliances=hpicfSnmpCompliances, hpicfSnmpResponseSourceAddress=hpicfSnmpResponseSourceAddress, hpicfSnmpMIB=hpicfSnmpMIB, hpicfSnmpConfig=hpicfSnmpConfig)
