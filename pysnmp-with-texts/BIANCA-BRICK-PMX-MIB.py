#
# PySNMP MIB module BIANCA-BRICK-PMX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-PMX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, Gauge32, Integer32, TimeTicks, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, iso, MibIdentifier, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Gauge32", "Integer32", "TimeTicks", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "iso", "MibIdentifier", "Counter64", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
pmx = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 12))
class Date(Integer32):
    pass

class HexValue(Integer32):
    pass

pmxIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 12, 1), )
if mibBuilder.loadTexts: pmxIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfTable.setDescription('The pmxIfTable contains information relating to the interfaces found on the system. Each entry corresponds to a connected primary rate interface. Entries can only be added or deleted by the system. Creating entries: Entries are created by the system only when a new PMX module is installed. Deleting entries: Entries are removed by the system after the appropriate PMX module is removed.')
pmxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-PMX-MIB", "pmxIfIndex"))
if mibBuilder.loadTexts: pmxIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfEntry.setDescription('')
pmxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfIndex.setDescription('Unique Index of the primary rate interface. The index is similar to slotnumber * 1000 and is also refenced in the ifTable, the isdnIfTable and in the isdnStkTable ')
pmxIfSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("successful", 1), ("acfa-failure", 2), ("m32-failure", 3), ("mem-failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfSelftest.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfSelftest.setDescription('The result of the initial selftest of the PMX module If the result is not succesful, the module is disabled successful(1) All selftests succeeded; acfa-failure(2) failure with the module ACFA Chip m32-failure(3) failure with the module M32 Chip mem-failure(4) failure with the module memory')
pmxIfLayer1State = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("active", 1), ("remote-alarm", 2), ("no-signal", 3), ("no-sync", 4), ("crc-error", 5), ("power-on", 6), ("resync", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmxIfLayer1State.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfLayer1State.setDescription('The layer 1 state of the primary rate interface active(F1) active, framing and synchronisation is o.k. This is the only state where data-transmission is possible remote-alarm(F2) receipt of an RAI, remote alarm indication, from the remote side; The remote-alarm is also known as yellow alarm or distant alarm no-signal(F3) no signal is received, RAI will be transmitted. NOS is also known as red alarm . no-sync(F4) signal is received but synchronistation is not possible, RAI will be transmitted The received signal may also consist of contingous Ones crc-error(F5) signal and synchronisation are o.k. but signal has heavy crc errors, RAI will be transmitted power-on(F6) initial state after power was switched on (transient) resync(7) Setting Layer 1 State to resync can be used to force resynchronisation The Layer1states are also visible in the isdnIfTable, but the state numbers are mapped to those of an BRI-Interface ')
pmxIfLayer1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfLayer1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfLayer1Mode.setDescription('In T1 and E1 mode the primary rate interface is working with totaly different clock frequencies, framing and impedance. This depends on one of the jumpers on the PMX module. For correct operation all 5 jumpers must be in correct position. E1 is normaly used in Europe and is similar to PCM30, 30 channels, 2 Mbit/sec, Impedance 120 Ohm T1 is normaly used in USA and is similar to PCM24, 24 channels, 1.5 Mbit/sec, Impedance 100 Ohm ')
pmxIfLayer1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("e1", 1), ("e1-mf", 2), ("e1-crc", 3), ("e1-mf-crc", 4), ("t1-esf", 5), ("t1-d4", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmxIfLayer1Framing.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfLayer1Framing.setDescription('In T1 and E1 mode the primary rate interface can work with totaly different framing types on layer 1. The framing type must match the configuration of the first connected point e.g. the exchange or the NT e1(1) E1 - minimum mode, CCITT Recommendation G.704 (Table 4a) e1-crc(2) E1 , crc mode, CCITT Recommendation G.704 (Table 4b) e1-mf(3) E1 , CCITT Recommendation G.704 (Table 4a) with Timeslot 16 multiframing enabled e1-mf-crc(4) E1 , CCITT Recommendation G.704 (Table 4b) with Timeslot 16 multiframing enabled t1-esf(5) T1 , Extended SuperFrame mode DS1 t1-d4(6) T1 , AT&T D4 format DS1 t1-framings can only be set when pmxIfLayer1Mode is t1 e1-framings can only be set when pmxIfLayer1Mode is e1 The default framing for t1 is t1-esf, the default framing for e1 is e1-crc Modifications of the default values are usualy not required. Exceptions are only known for sweden and france (use e1) ')
pmxIfLayer1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1-hdb3", 1), ("t1-b8zs", 2), ("t1-ami", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmxIfLayer1LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfLayer1LineCode.setDescription('In T1 mode the primary rate interface is able to work with different line codes. e1-hdb3(1) High Density Bipolar 3 Level Coding This is the only valid linecoding for E1 t1-b8zs(2) Bipolar 8 Zero Substitution B8ZS refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits t1-ami(3) Alternating Mark Inversion. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density requirements, such as inverting HDLC data. t1-linecodes can only be set when pmxIfLayer1Mode is t1 e1-linecodes can only be set when pmxIfLayer1Mode is e1 The default linecode for t1 is t1-b8zs ')
pmxIfChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("e1-standard", 1), ("e1-1tr6", 2), ("e1-H0", 3), ("e1-H12", 4), ("e1-burst", 5), ("e1-raw", 6), ("t1-standard", 10), ("t1-H0", 11), ("t1-H11", 12), ("t1-burst", 13), ("t1-raw", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmxIfChannelMode.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfChannelMode.setDescription('In T1 and E1 mode the primary rate interface may work with different channel types. Usually every timeslot is similar to one channel but it is also possible to bundle multiple timeslots to one channel with a higher bandwith. This channel bundeling is currently not supported by the switching equipment for dialup connections of any network-provider. But usage is possible with leased lines. e1-standard(1) 1 D-channel 64 kbit, 30 B-channels 64kbit bchannels are numbered from 1 to 15 and from 16 to 31 e1-1tr6(2) 1 D-channel 64 kbit, 30 B-channels 64kbit identical timeslotassignment as e1-standard but bchannels are numbered from 1 to 30 e1-H0(3) 1 D-channel 64 kbit, 5 B-channels 384kbit bchannels are numbered from 1 to 5 e1-H12(4) 1 D-channel 64 kbit, 1 B-channel 1920kbit e1-burst(5) 1 channel 1984kbit, channel number is 0 t1-standard(6) 1 D-channel 64 kbit, 23 B-channels 64kbit bchannels are numbered from 1 to 23 t1-H0(7) 1 D-channel 64 kbit, 4 B-channels 384kbit bchannels are numbered from 1 to 4 t1-H11(8) 1 D-channel 64 kbit, 1 B-channel 1472kbit t1-burst(9) 1 channel 1536kbit, channel number is 0 t1-channelmodes can only be set when pmxIfLayer1Mode is t1 e1-channelmodes can only be set when pmxIfLayer1Mode is e1 ')
pmxIfLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-loop", 1), ("full-loop", 2), ("all-channels", 3), ("only-bchannels", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmxIfLoopbackMode.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfLoopbackMode.setDescription('Loopback-Mode is only required for equipment test no-loop(1) do not loopanything, this is the correct mode for normal operation full-loop(2) loopback everything incl. the signaling channel all-channels(3) loopback all B and D-channels only-bchannels(4) loopback only the B-channels The loops are usualy not reversible. Reboot is required to regain normal operation mode. ')
pmxIfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfErrors.setDescription('The measured PMX interface errors since startup')
pmxIfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("go-thru", 2), ("go-thru-tst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmxIfPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfPortMode.setDescription("PortMode switches the CM-PRI's 'Out'-port normal(1) 'Out'-port is disabled, this CM-PRI is connected to 'In' go-thru(2) 'Out'-port is enabled, this CM-PRI is disconnected. go-thru-tst(3) same as 'go-thru' but an internal test loop is activated ")
pmxIfLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfLOS.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfLOS.setDescription('Loss Of Signal conditions since startup')
pmxIfNoFAS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfNoFAS.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfNoFAS.setDescription('Loss Of Frame Alignment conditions since startup')
pmxIfRemoteAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfRemoteAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfRemoteAlarms.setDescription('Remote Alarms received since startup')
pmxIfAlarmInds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfAlarmInds.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfAlarmInds.setDescription('Alarms received since startup')
pmxIfCRC4Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfCRC4Errors.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfCRC4Errors.setDescription('CRC4 errors detected since startup')
pmxIfSlipPositive = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfSlipPositive.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfSlipPositive.setDescription('Positive Slip conditions detected since startup; flags that the frequency of receive clock is less than frequency of internal system clock')
pmxIfSlipNegative = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 12, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmxIfSlipNegative.setStatus('mandatory')
if mibBuilder.loadTexts: pmxIfSlipNegative.setDescription('Negative Slip conditions detected since startup; flags that the frequency of receive clock is greater than frequency of internal system clock')
mibBuilder.exportSymbols("BIANCA-BRICK-PMX-MIB", enterprises=enterprises, pmxIfErrors=pmxIfErrors, pmxIfEntry=pmxIfEntry, pmxIfNoFAS=pmxIfNoFAS, org=org, pmxIfChannelMode=pmxIfChannelMode, bintec=bintec, pmxIfAlarmInds=pmxIfAlarmInds, pmxIfRemoteAlarms=pmxIfRemoteAlarms, pmxIfLayer1Mode=pmxIfLayer1Mode, pmxIfLayer1LineCode=pmxIfLayer1LineCode, pmxIfSlipPositive=pmxIfSlipPositive, internet=internet, pmxIfLayer1State=pmxIfLayer1State, private=private, pmxIfLayer1Framing=pmxIfLayer1Framing, pmxIfTable=pmxIfTable, pmxIfLOS=pmxIfLOS, pmxIfSlipNegative=pmxIfSlipNegative, pmxIfCRC4Errors=pmxIfCRC4Errors, HexValue=HexValue, dod=dod, pmx=pmx, Date=Date, pmxIfIndex=pmxIfIndex, pmxIfPortMode=pmxIfPortMode, pmxIfSelftest=pmxIfSelftest, bibo=bibo, pmxIfLoopbackMode=pmxIfLoopbackMode)
