#
# PySNMP MIB module CISCO-ATM-TRAFFIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-TRAFFIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
atmTrafficDescrParamEntry, = mibBuilder.importSymbols("ATM-MIB", "atmTrafficDescrParamEntry")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, TimeTicks, Counter64, ModuleIdentity, IpAddress, Unsigned32, Bits, Integer32, ObjectIdentity, MibIdentifier, iso, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Counter64", "ModuleIdentity", "IpAddress", "Unsigned32", "Bits", "Integer32", "ObjectIdentity", "MibIdentifier", "iso", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoAtmTrafficExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 11))
ciscoAtmTrafficExtMIB.setRevisions(('2002-08-26 00:00', '2001-11-01 00:00', '1997-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmTrafficExtMIB.setRevisionsDescriptions(('Deprecated atmNoClpNoScrCdvt as a similar object atmNoClpNoScrCdvt defined in RFC-2514 can be used instead.', 'Added an object to identify the traffic descriptor by a name in human readable form.', 'Added traffic for types dual-leaky bucket and mcr support made possible on the LS1010 by the Feature Card Per Flow Queueing support for per-VC queueing hardware structures.',))
if mibBuilder.loadTexts: ciscoAtmTrafficExtMIB.setLastUpdated('200208260000Z')
if mibBuilder.loadTexts: ciscoAtmTrafficExtMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoAtmTrafficExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmTrafficExtMIB.setDescription('This MIB module is an extension to traffic OIDs and variables defined in rfc1695.')
ciscoAtmTrafficExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 11, 1))
ciscoAtmTrafficTypeExt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 1))
ciscoAtmTrafficTableExt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 2))
atmNoClpNoScrCdvt = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 1, 1))
if mibBuilder.loadTexts: atmNoClpNoScrCdvt.setStatus('deprecated')
if mibBuilder.loadTexts: atmNoClpNoScrCdvt.setDescription('Specifies peak cell rate for CLP, and cell delay variation tolerance: Parameter 1: CLP=0+1 peak cell rate in cells per second Parameter 2: CDVT in cell-times Parameter 3: not used Parameter 4: not used Parameter 5: not used. This traffic descriptor is for cbr, abr or ubr service categories, desiring to specify the cdvt as well as pcr.')
atmClpScrMbsCdvt = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 1, 2))
if mibBuilder.loadTexts: atmClpScrMbsCdvt.setStatus('current')
if mibBuilder.loadTexts: atmClpScrMbsCdvt.setDescription('This traffic descriptor is for Peak Cell Rate (PCR), Sustained Cell Rate (SCR), Maximum Burst Size applied to SCR, and Cell Delay Variation Tolerance applied to PCR. The use of the parameter vector for this type: Parameter 1: CLP=0+1 peak cell rate in cells per second Parameter 2: CLP=0 sustained cell rate in cells per second. Parameter 3: maximum burst size in cells Parameter 4: CDVT in cell-times Parameter 5: not used.')
atmNoClpScrMbsCdvt = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 1, 3))
if mibBuilder.loadTexts: atmNoClpScrMbsCdvt.setStatus('current')
if mibBuilder.loadTexts: atmNoClpScrMbsCdvt.setDescription('This traffic descriptor is for Peak Cell Rate (PCR), Sustained Cell Rate (SCR), Maximum Burst Size applied to SCR, and Cell Delay Variation Tolerance applied to PCR. The use of the parameter vector for this type: Parameter 1: CLP=0+1 peak cell rate in cells per second Parameter 2: CLP=0+1 sustained cell rate in cells per second. Parameter 3: maximum burst size in cells Parameter 4: CDVT in cell-times Parameter 5: not used.')
atmNoClpMcr = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 1, 4))
if mibBuilder.loadTexts: atmNoClpMcr.setStatus('current')
if mibBuilder.loadTexts: atmNoClpMcr.setDescription('This traffic descriptor is for Peak Cell Rate (PCR) and Minimum Cell Rate (MCR). The use of the parameter vector for this type: Parameter 1: CLP=0+1 peak cell rate in cells per second Parameter 2: CLP=0+1 minimum cell rate in cells per second. Parameter 3: not used. Parameter 4: not used. Parameter 5: not used.')
atmNoClpMcrCdvt = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 1, 5))
if mibBuilder.loadTexts: atmNoClpMcrCdvt.setStatus('current')
if mibBuilder.loadTexts: atmNoClpMcrCdvt.setDescription('This traffic descriptor is for Peak Cell Rate (PCR), Minimum Cell Rate (MCR), and Cell Delay Variation Tolerance applied to PCR. The use of the parameter vector for this type: Parameter 1: CLP=0+1 peak cell rate in cells per second Parameter 2: CDVT in cell-times Parameter 3: CLP=0+1 minimum cell rate in cells per second. Parameter 4: not used. Parameter 5: not used.')
atmTrafficDescrParamExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 2, 1), )
if mibBuilder.loadTexts: atmTrafficDescrParamExtTable.setStatus('current')
if mibBuilder.loadTexts: atmTrafficDescrParamExtTable.setDescription('Provide additional information specifying traffic parameters for a VC/VP.')
atmTrafficDescrParamExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 2, 1, 1), )
atmTrafficDescrParamEntry.registerAugmentions(("CISCO-ATM-TRAFFIC-MIB", "atmTrafficDescrParamExtEntry"))
atmTrafficDescrParamExtEntry.setIndexNames(*atmTrafficDescrParamEntry.getIndexNames())
if mibBuilder.loadTexts: atmTrafficDescrParamExtEntry.setStatus('current')
if mibBuilder.loadTexts: atmTrafficDescrParamExtEntry.setDescription(' An entry in the Traffic Parameter Descriptor extension table.')
atmTrafficExplicitServCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cbr", 1), ("vbrRt", 2), ("vbrNrt", 3), ("abr", 4), ("ubr", 5), ("notDef", 6))).clone('notDef')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficExplicitServCategory.setStatus('current')
if mibBuilder.loadTexts: atmTrafficExplicitServCategory.setDescription('This objects indicates the Service Category specified by the Traffic Descriptor. If it is defined, the setting of this object determines the Service Category used for the connection. This then limits the possible Traffic Descriptor Types as follows: Explicit Service Category Type may only be ----------------------------------------- cbr atmNoClpNoScr. atmClpNoTaggingNoScr atmClpTaggingNoScr atmNoClpNoScrCdvt abr/ubr atmNoTrafficDescriptor atmNoClpNoScr. atmNoClpNoScrCdvt atmNoClpMcr -- ubr+/abr atmNoClpMcrCdvt -- ubr+/abr vbr atmNoClpScr atmClpNoTaggingScr atmClpTaggingScr atmClpScrMbsCdvt atmNoClpScrMbsCdvt ----------------------------------------- If the settings of Service Category and Traffic Descriptor Type are not compatible, the row can not be made active.')
atmTrafficDerivedServCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbrRt", 2), ("vbrNrt", 3), ("abr", 4), ("ubr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrafficDerivedServCategory.setStatus('current')
if mibBuilder.loadTexts: atmTrafficDerivedServCategory.setDescription('This object indicates the Service Category derived from the Traffic Descriptor. If the object atmTrafficExplicitServCategory has a defined value, then this object mirrors that value. If Explicit Service Category has the value notDef, then this object reflects the Service Category derived from the Traffic Descriptor Type as follows: Traffic Descriptor Service Type Category ----------------------------------------- atmNoTrafficDescriptor ubr atmNoClpMcr abr atmNoClpMcrCdvt abr atmNoClpNoScr --| atmClpNoTaggingNoScr |-- cbr atmClpTaggingNoScr | atmNoClpNoScrCdvt --| atmNoClpScr --| atmClpNoTaggingScr |-- vbr-rt atmClpScrMbsCdvt | atmNoClpScrMbsCdvt | atmClpTaggingScr --| -----------------------------------------')
atmTrafficDescriptorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 11, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrafficDescriptorName.setStatus('current')
if mibBuilder.loadTexts: atmTrafficDescriptorName.setDescription('A human readable string that contains the unique name of this Traffic Descriptor. This object will return a zero-length string if value is not set.')
ciscoAtmTrafficExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 11, 3))
ciscoAtmTrafficExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 11, 3, 1))
ciscoAtmTrafficExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 11, 3, 2))
ciscoAtmTrafficExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 11, 3, 1, 1)).setObjects(("CISCO-ATM-TRAFFIC-MIB", "ciscoAtmTrafficTableExtMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmTrafficExtMIBCompliance = ciscoAtmTrafficExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoAtmTrafficExtMIBCompliance.setDescription('The compliance statement for the Cisco ATM Traffic Extension MIB.')
ciscoAtmTrafficExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 11, 3, 1, 2)).setObjects(("CISCO-ATM-TRAFFIC-MIB", "ciscoAtmTrafficTableExtMIBGroup"), ("CISCO-ATM-TRAFFIC-MIB", "ciscoAtmTrafficNmsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmTrafficExtMIBComplianceRev1 = ciscoAtmTrafficExtMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmTrafficExtMIBComplianceRev1.setDescription('The compliance statement for the Cisco ATM Traffic Extension MIB.')
ciscoAtmTrafficTableExtMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 11, 3, 2, 1)).setObjects(("CISCO-ATM-TRAFFIC-MIB", "atmTrafficExplicitServCategory"), ("CISCO-ATM-TRAFFIC-MIB", "atmTrafficDerivedServCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmTrafficTableExtMIBGroup = ciscoAtmTrafficTableExtMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmTrafficTableExtMIBGroup.setDescription('A collection of objects which provide extensions to the ATM Traffic Parameter Descriptor Table.')
ciscoAtmTrafficNmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 11, 3, 2, 2)).setObjects(("CISCO-ATM-TRAFFIC-MIB", "atmTrafficDescriptorName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmTrafficNmsGroup = ciscoAtmTrafficNmsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmTrafficNmsGroup.setDescription('A collection of objects which provide additional information for a management system.')
mibBuilder.exportSymbols("CISCO-ATM-TRAFFIC-MIB", atmTrafficDescriptorName=atmTrafficDescriptorName, ciscoAtmTrafficExtMIBConformance=ciscoAtmTrafficExtMIBConformance, ciscoAtmTrafficTypeExt=ciscoAtmTrafficTypeExt, ciscoAtmTrafficNmsGroup=ciscoAtmTrafficNmsGroup, ciscoAtmTrafficExtMIBCompliances=ciscoAtmTrafficExtMIBCompliances, atmNoClpNoScrCdvt=atmNoClpNoScrCdvt, atmNoClpMcr=atmNoClpMcr, ciscoAtmTrafficTableExt=ciscoAtmTrafficTableExt, ciscoAtmTrafficExtMIBComplianceRev1=ciscoAtmTrafficExtMIBComplianceRev1, atmTrafficDescrParamExtTable=atmTrafficDescrParamExtTable, ciscoAtmTrafficExtMIBCompliance=ciscoAtmTrafficExtMIBCompliance, atmTrafficDerivedServCategory=atmTrafficDerivedServCategory, ciscoAtmTrafficExtMIBObjects=ciscoAtmTrafficExtMIBObjects, atmTrafficExplicitServCategory=atmTrafficExplicitServCategory, atmTrafficDescrParamExtEntry=atmTrafficDescrParamExtEntry, PYSNMP_MODULE_ID=ciscoAtmTrafficExtMIB, atmClpScrMbsCdvt=atmClpScrMbsCdvt, ciscoAtmTrafficTableExtMIBGroup=ciscoAtmTrafficTableExtMIBGroup, atmNoClpMcrCdvt=atmNoClpMcrCdvt, ciscoAtmTrafficExtMIBGroups=ciscoAtmTrafficExtMIBGroups, ciscoAtmTrafficExtMIB=ciscoAtmTrafficExtMIB, atmNoClpScrMbsCdvt=atmNoClpScrMbsCdvt)
