#
# PySNMP MIB module BESTPOWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BESTPOWER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:37:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, enterprises, Integer32, Unsigned32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, TimeTicks, IpAddress, Counter32, NotificationType, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "enterprises", "Integer32", "Unsigned32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "TimeTicks", "IpAddress", "Counter32", "NotificationType", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class NonNegativeInteger(Integer32):
    pass

class PositiveInteger(Integer32):
    pass

bestPower = MibIdentifier((1, 3, 6, 1, 4, 1, 2947))
bestLink = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 4))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 7))
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 8))
upsIdentUpsName = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUpsName.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentUpsName.setDescription('An ID string identifying the Family of UPS.')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentModel.setDescription("The UPS model name (example: 'FE500VA').")
upsIdentVARating = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentVARating.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentVARating.setDescription('The capacity rating of the UPS expressed in VoltAmperes(VA).')
upsIdentUpsType = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby", 1), ("online", 2), ("offline", 3), ("lineInteractive", 4), ("hybrid", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUpsType.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentUpsType.setDescription('Type of UPS.')
upsIdentUpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUpsSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentUpsSerialNumber.setDescription('A unique identification number provided by the factory.')
upsIdentUpsIdentification = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentUpsIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentUpsIdentification.setDescription('A string entered by the administrator to provide a unique name for the UPS.')
upsIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentFirmwareRevision.setDescription('The firmware revision of the UPS.')
upsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentDateOfManufacture.setDescription('The date when the UPS was manufactured in mm/dd/yyyy format.')
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inverterOff", 1), ("inverterOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryStatus.setDescription('The status of the inverter .')
upsBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTimeOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTimeOnBattery.setDescription('The elapsed time in seconds since the UPS has switched to battery power.')
upsBatteryRuntimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryRuntimeRemaining.setDescription('The remaining time in minutes that the UPS will be able to run on battery power.')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryVoltage.setDescription('The UPS battery voltage expressed in 1/10 VDC.')
upsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryCurrent.setDescription('The battery current expressed in 1/10 ADC.')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTemperature.setDescription('The internal UPS temperature expressed in 1/10 degree C.')
upsBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryLastReplaceDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryLastReplaceDate.setDescription("The date when the UPS system's batteries were last replaced in mm/dd/yyyy format. When the UPS batteries are replaced, this value should be reset by the administrator.")
upsInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputPhase.setDescription('The AC input phase.')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency.setDescription('The utility line frequency in 1/10 Hz.')
upsInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVoltage.setDescription('The utility line voltage in 1/10 VAC.')
upsInputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrent.setDescription('The utility line current in 1/10 Ampere AC.')
upsInputPower = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputPower.setDescription('The utility line power in 1/10 Watts.')
upsInputPhase2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6))
upsInputP2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputP2.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputP2.setDescription('The AC input phase.')
upsInputFrequency2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency2.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency2.setDescription('The utility line frequency in 1/10 Hz.')
upsInputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVoltage2.setDescription('The utility line voltage in 1/10 VAC.')
upsInputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrent2.setDescription('The utility line current in 1/10 Ampere AC.')
upsInputPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPower2.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputPower2.setDescription('The utility line power in 1/10 Watts.')
upsInputPhase3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7))
upsInputP3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputP3.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputP3.setDescription('The AC input phase.')
upsInputFrequency3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency3.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency3.setDescription('The utility line frequency in 1/10 Hz.')
upsInputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage3.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVoltage3.setDescription('The utility line voltage in 1/10 VAC.')
upsInputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent3.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrent3.setDescription('The utility line current in 1/10 Ampere AC.')
upsInputPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPower3.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputPower3.setDescription('The utility line power in 1/10 Watts.')
upsOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBypass", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputStatus.setDescription('The current state of the UPS. If the UPS is unable to determine its state, this variable is set to unknown(1).')
upsOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPhase.setDescription('The output phase.')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputFrequency.setDescription('The output frequency of the UPS expressed in 1/10 Hz.')
upsOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputVoltage.setDescription('The output voltage of the UPS expressed in 1/10 VAC.')
upsOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrent.setDescription('The output current of the UPS expressed in 1/10 AC Amperes.')
upsOutputTruePower = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTruePower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTruePower.setDescription('The true output power of the UPS expressed in 1/10 Watts.')
upsOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputApparentPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputApparentPower.setDescription('The apparent output power of the UPS expressed in 1/10 VoltAmperes(VA).')
upsOutputPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPowerFactor.setDescription('The output powerfactor of the UPS expressed in +/- 1/10 units deviating from 1.')
upsOutputPercentLoad = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPercentLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPercentLoad.setDescription('The percentage of the total UPS power capacity being used expressed in % of 100.')
upsOutputPhase2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10))
upsOutputP2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputP2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputP2.setDescription('The output phase.')
upsOutputFrequency2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputFrequency2.setDescription('The output frequency of the UPS expressed in 1/10 Hz.')
upsOutputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputVoltage2.setDescription('The output voltage of the UPS expressed in 1/10 VAC.')
upsOutputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrent2.setDescription('The output current of the UPS expressed in 1/10 AC Amperes.')
upsOutputTruePower2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTruePower2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTruePower2.setDescription('The true output power of the UPS expressed in 1/10 Watts.')
upsOutputApparentPower2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputApparentPower2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputApparentPower2.setDescription('The apparent output power of the UPS expressed in 1/10 VoltAmperes(VA).')
upsOutputPowerFactor2 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor2.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPowerFactor2.setDescription(' The output powerfactor of the UPS expressed in +\\- 1/10 units deviating from 1.')
upsOutputPhase3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11))
upsOutputP3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputP3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputP3.setDescription('The output phase.')
upsOutputFrequency3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputFrequency3.setDescription('The output frequency of the UPS expressed in 1/10 Hz.')
upsOutputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputVoltage3.setDescription('The output voltage of the UPS expressed in 1/10 VAC.')
upsOutputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrent3.setDescription('The output current of the UPS expressed in 1/10 AC Amperes.')
upsOutputTruePower3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputTruePower3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTruePower3.setDescription('The true output power of the UPS expressed in 1/10 Watts.')
upsOutputApparentPower3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputApparentPower3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputApparentPower3.setDescription('The apparent output power of the UPS expressed in 1/10 VoltAmperes = (VA).')
upsOutputPowerFactor3 = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 4, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPowerFactor3.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPowerFactor3.setDescription(' The output powerfactor of the UPS expressed in +/- 1/10 units deviating from 1.')
upsConfigLowRuntimeSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigLowRuntimeSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigLowRuntimeSetpoint.setDescription('This setpoint controls when the UPS will initiate a Low Runtime Alarm.')
upsConfigDelayBeforeRestart = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDelayBeforeRestart.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigDelayBeforeRestart.setDescription('The delay in seconds after utility line power returns before the UPS will turn on. This value is used in conjunction with TurnUPSOff, RebootUPS, and the Scheduled Shutdown objects.')
upsConfigDelayBeforeShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDelayBeforeShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigDelayBeforeShutdown.setDescription('The delay in seconds that the UPS waits before executing an off command upon request of an external device.')
upsConfigTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4))
upsConfigTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("logic", 2), ("inverter", 3), ("battery", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigTestLevel.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigTestLevel.setDescription('This is the level of the System Test.')
upsConfigDaysBetweenTests = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 366))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDaysBetweenTests.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigDaysBetweenTests.setDescription('The number of days between Tests.')
upsConfigBatteryTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryTestDuration.setDescription('The number of seconds the UPS must run on battery power during a battery test.')
upsConfigScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5), )
if mibBuilder.loadTexts: upsConfigScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleTable.setDescription('The table to schedule shutting down the ups.')
upsConfigScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1), ).setIndexNames((0, "BESTPOWER-MIB", "upsConfigScheduleIndex"))
if mibBuilder.loadTexts: upsConfigScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleEntry.setDescription('The entries for each day.')
upsConfigScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleIndex.setDescription('The index of scheduled events.')
upsConfigScheduleShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleShutdownDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleShutdownDay.setDescription('The weekday on which the UPS should shut down.')
upsConfigScheduleShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleShutdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleShutdownTime.setDescription('The time that the process of shutting down the UPS will be initiated')
upsConfigScheduleRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleRestartDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleRestartDay.setDescription('The weekday on which the UPS should restart')
upsConfigScheduleRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigScheduleRestartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigScheduleRestartTime.setDescription('The time the UPS will restart in hh:mm:ss format.')
upsConfigbestLink = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8))
bestLinkHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkHistoryLogFrequency.setDescription('The frequency of updating the history log in minutes.')
bestLinkRefreshFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkRefreshFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkRefreshFrequency.setDescription('The frequency of saving configuration,history and event log data in non-volatile memory. If the value is set to 0, then saving data is disabled.')
bestLinkNetId = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkNetId.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkNetId.setDescription('The IP address of the device. Setting this parameter causes BestLink to reboot.')
bestLinkGateway = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkGateway.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkGateway.setDescription('The gateway address for the network BestLink is connected to.')
bestLinkNetMask = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkNetMask.setDescription('The net mask of the device.')
bestLinkSysDate = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkSysDate.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkSysDate.setDescription('The system date of the device. The date is in mm/dd/yyyy format. The range of system date is from 1/1/1980 to 12/31/2037.')
bestLinkSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkSysTime.setDescription('The system time of the device. The time is in hh:mm:ss format.')
bestLinkTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkTftpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkTftpFileName.setDescription('The tftp file name that contains the software upgrade image.')
bestLinkTftpHost = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkTftpHost.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkTftpHost.setDescription('The tftp host IP address from where to get the image.')
bestLinkFlashEEPROM = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkFlashEEPROM.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkFlashEEPROM.setDescription('Saves the history log, eventlog, and configuration data to non-volatile memory.')
bestLinkPrimaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkPrimaryTimeServer.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkPrimaryTimeServer.setDescription('The primary time server is responsible for sending the correct time to the UPS.')
bestLinkSecondaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bestLinkSecondaryTimeServer.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkSecondaryTimeServer.setDescription('The secondary time server responsible for sending the correct time to the UPS.')
bestLinkSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 8, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bestLinkSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: bestLinkSoftwareVersion.setDescription('The version of BestLink software.')
upsConfigTrapsReceivers = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9))
upsConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1), )
if mibBuilder.loadTexts: upsConfigTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigTrapsReceiversTable.setDescription('A list of managers to send traps to.')
upsConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1), ).setIndexNames((0, "BESTPOWER-MIB", "trapsIndex"))
if mibBuilder.loadTexts: upsConfigTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when sent to the manager.')
severityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: severityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: severityLevel.setDescription('The severity threshold of traps to send to the manager. Traps are labeled by severity as informational(1), warning(2), severe(3). Only traps of equal or greater severity than this value are sent to the manager.')
receiverAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAccept.setStatus('mandatory')
if mibBuilder.loadTexts: receiverAccept.setDescription('An entry will become active if yes, otherwise it will be disabled.')
upsConfigRegisteredShutdownClients = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10))
upsRegisteredShutdownClientsTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1), )
if mibBuilder.loadTexts: upsRegisteredShutdownClientsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsRegisteredShutdownClientsTable.setDescription('A list of registered shutdown client table entries. The table contains zero, one, or many rows at any moment, depending upon the number of Netwatch clients registered with BestLink')
upsRegisteredShutdownClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1, 1), ).setIndexNames((0, "BESTPOWER-MIB", "upsRegisteredShutdownClientsIndex"))
if mibBuilder.loadTexts: upsRegisteredShutdownClientsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsRegisteredShutdownClientsEntry.setDescription('An entry containing information applicable to a particular registered shutdown client.')
upsRegisteredShutdownClientsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRegisteredShutdownClientsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsRegisteredShutdownClientsIndex.setDescription('An index of alarm entries in the RegisteredShutdownClientsTable.')
upsRegisteredShutdownClientsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRegisteredShutdownClientsIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: upsRegisteredShutdownClientsIPAddress.setDescription('The IP Address of the registered shutdown client')
upsRegisteredShutdownClientsTotalNumberOf = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 5, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRegisteredShutdownClientsTotalNumberOf.setStatus('mandatory')
if mibBuilder.loadTexts: upsRegisteredShutdownClientsTotalNumberOf.setDescription('The total number of registered shutdown clients.')
upsControlTurnOffUPS = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("cancelUpsOff", 1), ("upsOff", 2), ("rebootUps", 3), ("cancelrebootUps", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlTurnOffUPS.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlTurnOffUPS.setDescription('Setting this variable to UpsOff(2) causes the UPS to shut off. When the UPS is in the off state, the UPS will remain off until the ON/OFF switch is manually toggled. Setting this variable to cancelUpsOff(1) allows for a method to cancel the upsOff(2) command to the UPS that is still pending, or will make an attempt to restart a UPS that has been shutdown, provided that BestLink is powered by some other means. Setting this variable to rebootUps(3) causes the UPS to shut off and turn back on. Setting this variable to cancelrebootUps(4) allows for a method to cancel the rebootUps(3) command to the UPS that is still pending, or will make an attempt to restart a UPS that has been shutdown, provided that BestLink is powered by some other means.')
upsControlActivateUpsScheduling = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlActivateUpsScheduling.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlActivateUpsScheduling.setDescription('Setting this variable to On(2) causes the UPS to activate the scheduling parameters that have been previously configured within the upsConfigDailyShutdownScheduleTable and the upsConfigWeeklyShutdownScheduleTable. Setting this variable to Off(1) suspends all currently configured schedules.')
upsManualTests = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noTestInitiated", 1), ("initiateManualBeeperTest", 2), ("initiateManualSystemTest", 3), ("initiateManualInverterTest", 4), ("initiateManualBatteryTest", 5), ("abortManualBeeperTest", 6), ("abortManualSystemTest", 7), ("abortManualInverterTest", 8), ("abortManualBatteryTest", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsManualTests.setStatus('mandatory')
if mibBuilder.loadTexts: upsManualTests.setDescription('Setting this variable to any value other than (1) causes the UPS to perform a manual test or abort a particular test in progress.')
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmsPresent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmsPresent.setDescription('The present number of active alarm conditions.')
upsLastKnownAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("onBattery", 1), ("lowRuntime", 2), ("nearLowBattery", 3), ("lowBattery", 4), ("highBattery", 5), ("checkBattery", 6), ("replaceBattery", 7), ("checkInverter", 8), ("batteriesDisconnected", 9), ("outputOverload", 10), ("lowAcOut", 11), ("circuitBreakerWarning", 12), ("circuitBreakerShdn", 13), ("bypassOn", 14), ("autoBypass", 15), ("siteWiringFault", 16), ("checkFan", 17), ("highAmbTemp", 18), ("highHSTemp", 19), ("highXFMRTemp", 20), ("highPFMTemp", 21), ("probeMissing", 22), ("checkPowerSupply", 23), ("tapRegulator", 24), ("relayFailure", 25), ("checkFuse", 26), ("checkMOV", 27), ("memoryError", 28), ("callService", 29), ("upsFailed", 30), ("userTest", 31), ("testInProgress", 32), ("diagnosticTestFailed", 33), ("ePO", 34), ("upsOff", 35), ("communicationsLost", 36), ("noAlarm", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsLastKnownAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: upsLastKnownAlarm.setDescription("A unique identifier for an alarm condition. This value must remain constant. Value 'noAlarm(37)' will be returned if no Alarm has occured till the point of GET operation.")
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3), )
if mibBuilder.loadTexts: upsAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTable.setDescription('A list of alarm table entries. The table contains zero, one, or many rows at any moment, depending upon the number of alarm conditions in effect. The table is initially empty at agent startup. The agent creates a row in the table each time a condition is detected and deletes that row when that condition no longer pertains. The agent creates the first row with upsAlarmIndex equal to 1, and increments the value of upsAlarmIndex each time a new row is created.')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1), ).setIndexNames((0, "BESTPOWER-MIB", "upsAlarmIndex"))
if mibBuilder.loadTexts: upsAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmEntry.setDescription('An entry containing information applicable to a particular alarm.')
upsAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmIndex.setDescription('An index of alarm entries in the alarm log.')
upsAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("onBattery", 1), ("lowRuntime", 2), ("nearLowBattery", 3), ("lowBattery", 4), ("highBattery", 5), ("checkBattery", 6), ("replaceBattery", 7), ("checkInverter", 8), ("batteriesDisconnected", 9), ("outputOverload", 10), ("lowAcOut", 11), ("circuitBreakerWarning", 12), ("circuitBreakerShdn", 13), ("bypassOn", 14), ("autoBypass", 15), ("siteWiringFault", 16), ("checkFan", 17), ("highAmbTemp", 18), ("highHSTemp", 19), ("highXFMRTemp", 20), ("highPFMTemp", 21), ("probeMissing", 22), ("checkPowerSupply", 23), ("tapRegulator", 24), ("relayFailure", 25), ("checkFuse", 26), ("checkMOV", 27), ("memoryError", 28), ("callService", 29), ("upsFailed", 30), ("userTest", 31), ("testInProgress", 32), ("diagnosticTestFailed", 33), ("ePO", 34), ("upsOff", 35), ("communicationsLost", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmName.setDescription('A unique identifier for an alarm condition. This value must remain constant.')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2947, 1, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTime.setDescription('The time that the alarm occurred in hh:mm:ss format.')
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4))
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOnBattery.setDescription('The UPS is drawing power from the batteries.')
upsAlarmLowRuntime = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowRuntime.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmLowRuntime.setDescription('The remaining battery runtime is less than or equal to the upsConfigLowRuntimeSetpoint.')
upsAlarmNearLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmNearLowBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmNearLowBattery.setDescription('The battery voltage on the UPS has reached a value where the inverter will not be able to function very much longer.')
upsAlarmLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmLowBattery.setDescription('The battery voltage on the UPS has reached a value where the inverter has stopped providing output power to the connected load equipment. The UPS has shutdown to protect the batteries from complete discharge.')
upsAlarmHighBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmHighBattery.setDescription('The battery charger voltage on the UPS has reached a value that is too high for safe battery maintenance.')
upsAlarmCheckBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCheckBattery.setDescription('The periodic battery test has failed. A manual test of the batteries needs to be performed to determine which battery\\batteries need replaced.')
upsAlarmReplaceBattery = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmReplaceBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmReplaceBattery.setDescription('One or more batteries have been determined to require replacement. Compatibility: Fortress II')
upsAlarmCheckInverter = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckInverter.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCheckInverter.setDescription('The inverter has failed the automatic system test.')
upsAlarmBatteriesDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteriesDisconnected.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBatteriesDisconnected.setDescription('The UPS has detected that the DC voltage needed to start up is too low or missing.')
upsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOverload.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOutputOverload.setDescription('The output load exceeds the UPS output capacity.')
upsAlarmLowAcOut = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowAcOut.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmLowAcOut.setDescription('The output load has exceeded the UPS output capacity, and the UPS has shut down.')
upsAlarmCircuitBreakerWarning = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCircuitBreakerWarning.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCircuitBreakerWarning.setDescription('To much load equipment has been connected to the UPS and has has caused excess current draw from the output.')
upsAlarmCircuitBreakerShdn = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCircuitBreakerShdn.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCircuitBreakerShdn.setDescription('The UPS has shut down due to an extended excess of current draw from the output.')
upsAlarmBypassOn = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBypassOn.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBypassOn.setDescription('The Bypass is presently engaged on the UPS.')
upsAlarmAutoBypass = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmAutoBypass.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmAutoBypass.setDescription('The UPS has gone into the Auto Bypass mode to redirect power around the UPS circuitry.')
upsAlarmSiteWiringFault = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmSiteWiringFault.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmSiteWiringFault.setDescription('The UPS has found a problem in your wall outlet.')
upsAlarmCheckFan = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckFan.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCheckFan.setDescription('The fan on the UPS has stopped ')
upsAlarmHighAmbTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighAmbTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmHighAmbTemp.setDescription('The internal temperature inside the UPS is too hot.')
upsAlarmHighHSTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighHSTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmHighHSTemp.setDescription('The Inverter heatsink assembly inside the UPS is to hot .')
upsAlarmHighXFMRTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighXFMRTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmHighXFMRTemp.setDescription('The temperature of the main transformer inside the UPS is too hot .')
upsAlarmHighPFMTemp = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmHighPFMTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmHighPFMTemp.setDescription('The temperature of the PFM module inside the UPS is too hot .')
upsAlarmProbeMissing = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmProbeMissing.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmProbeMissing.setDescription('One or all of the sense probes has been disconnected on the UPS.')
upsAlarmCheckPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCheckPowerSupply.setDescription('The internal DC supply voltages are attenuated or missing.')
upsAlarmTapRegulator = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTapRegulator.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTapRegulator.setDescription('The UPS detected a possible failure in the tap changer (open or welded relay, etc.)')
upsAlarmRelayFailure = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmRelayFailure.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmRelayFailure.setDescription('There is a hardware problem inside the UPS.')
upsAlarmCheckFuse = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckFuse.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCheckFuse.setDescription('The failure of one or more fuses has been detected.')
upsAlarmCheckMOV = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCheckMOV.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCheckMOV.setDescription('One or more MOVs have failed due to a voltage surge.')
upsAlarmMemoryError = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmMemoryError.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmMemoryError.setDescription('The UPS has lost the programmed settings in the memory of the logic board.')
upsAlarmCallService = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCallService.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCallService.setDescription('A hardware malfunction has occurred inside the UPS. Please consult a factory authorized service representative for assistance.')
upsAlarmupsFailed = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmupsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmupsFailed.setDescription('A general fault in the UPS has been detected.')
upsAlarmUserTest = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUserTest.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmUserTest.setDescription('A user test of the alarm beeper is in progress.')
upsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTestInProgress.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTestInProgress.setDescription('A test is in progress.')
upsAlarmDiagnosticTestFailed = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDiagnosticTestFailed.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
upsAlarmEPO = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmEPO.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmEPO.setDescription('The Emergency Power OFF feature has been activiated at the RS-232 port on the UPS.')
upsAlarmUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUpsOff.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmUpsOff.setDescription('The output of the UPS is in the off state.')
upsAlarmCommunicationsLost = MibScalar((1, 3, 6, 1, 4, 1, 2947, 1, 8, 4, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCommunicationsLost.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCommunicationsLost.setDescription('A problem has been encountered in the communications between the agent and the UPS.')
upsTrapPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,1))
if mibBuilder.loadTexts: upsTrapPowerFail.setDescription('WARNING: Utility power not available.')
upsTrapPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,2))
if mibBuilder.loadTexts: upsTrapPowerRestored.setDescription('INFORMATION: Utility power has been restored.')
upsTrapUPSOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,3)).setObjects(("BESTPOWER-MIB", "upsBatteryTimeOnBattery"), ("BESTPOWER-MIB", "upsBatteryRuntimeRemaining"), ("BESTPOWER-MIB", "upsConfigLowRuntimeSetpoint"), ("BESTPOWER-MIB", "upsBatteryVoltage"))
if mibBuilder.loadTexts: upsTrapUPSOnBattery.setDescription('WARNING: The UPS has switched to battery backup power.')
upsTrapUPSNotOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,4))
if mibBuilder.loadTexts: upsTrapUPSNotOnBattery.setDescription('INFORMATION: The UPS is not on battery power.')
upsTrapLowRuntime = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,5))
if mibBuilder.loadTexts: upsTrapLowRuntime.setDescription('SEVERE: The runtime remaining on battery power is very short, and the UPS will soon shut down.')
upsTrapUPSCanRunOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,6))
if mibBuilder.loadTexts: upsTrapUPSCanRunOnBattery.setDescription('INFORMATION: The UPS has returned from a low runtime condition.')
upsTrapNearLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,7)).setObjects(("BESTPOWER-MIB", "upsBatteryVoltage"))
if mibBuilder.loadTexts: upsTrapNearLowBattery.setDescription("SEVERE: The UPS batteries are low and will soon be exhausted. If utility power is not restored the UPS will put itself to 'sleep' and immediately cut power to the load.")
upsTrapHighBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,8)).setObjects(("BESTPOWER-MIB", "upsBatteryVoltage"))
if mibBuilder.loadTexts: upsTrapHighBattery.setDescription('WARNING: The battery charger voltage on the UPS has reached a value that is too high for safe battery maintenance.')
upsTrapBatteryOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,9))
if mibBuilder.loadTexts: upsTrapBatteryOK.setDescription('INFORMATION: The UPS has returned from a near low or high battery condition.')
upsTrapLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,10)).setObjects(("BESTPOWER-MIB", "upsBatteryVoltage"))
if mibBuilder.loadTexts: upsTrapLowBattery.setDescription('SEVERE: The UPS will run for approximately 2 minutes more and then put itself to sleep to prevent a complete discharge of the batteries.')
upsTrapCheckBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,11))
if mibBuilder.loadTexts: upsTrapCheckBattery.setDescription('SEVERE: The UPS has failed a scheduled or manual battery test.')
upsTrapReplaceBattery = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,12))
if mibBuilder.loadTexts: upsTrapReplaceBattery.setDescription('SEVERE: One or more UPS batteries need to be replaced.')
upsTrapCheckInverter = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,13))
if mibBuilder.loadTexts: upsTrapCheckInverter.setDescription('SEVERE: The UPS has failed a scheduled or manual inverter test.')
upsTrapBatteriesDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,14))
if mibBuilder.loadTexts: upsTrapBatteriesDisconnected.setDescription('WARNING: The UPS battery voltage is either too low or missing to start up.')
upsTrapOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,15))
if mibBuilder.loadTexts: upsTrapOutputOverload.setDescription('WARNING: The output load exceeds the UPS output capacity.')
upsTrapUPSNoLongerOverloaded = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,16))
if mibBuilder.loadTexts: upsTrapUPSNoLongerOverloaded.setDescription('INFORMATION: The UPS has returned from an output overload condition.')
upsTrapLowAcOut = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,17))
if mibBuilder.loadTexts: upsTrapLowAcOut.setDescription('SEVERE: The output load has exceeded the UPS output capacity, and the UPS has shut down.')
upsTrapCircuitBreakerWarning = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,18))
if mibBuilder.loadTexts: upsTrapCircuitBreakerWarning.setDescription('SEVERE: To much load equipment has been connected to the UPS and has has caused excess current draw from the output.')
upsTrapCircuitBreakerOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,19))
if mibBuilder.loadTexts: upsTrapCircuitBreakerOK.setDescription('INFORMATION: The UPS has returned from a circuit breaker warning condition.')
upsTrapCircuitBreakerShdn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,20))
if mibBuilder.loadTexts: upsTrapCircuitBreakerShdn.setDescription('SEVERE: The UPS has shut down due to an extended excess of current draw from the output.')
upsTrapBypassOn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,21))
if mibBuilder.loadTexts: upsTrapBypassOn.setDescription('SEVERE: The Bypass is presently engaged on the UPS.')
upsTrapUPSOnline = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,22))
if mibBuilder.loadTexts: upsTrapUPSOnline.setDescription('INFORMATION: The UPS has returned from an on bypass condition.')
upsTrapSiteWiringFault = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,23))
if mibBuilder.loadTexts: upsTrapSiteWiringFault.setDescription('SEVERE: The UPS has found a problem in your wall outlet.')
upsTrapCheckFan = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,24))
if mibBuilder.loadTexts: upsTrapCheckFan.setDescription('SEVERE: The fan on the UPS has stopped .')
upsTrapHighUPSTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,25))
if mibBuilder.loadTexts: upsTrapHighUPSTemp.setDescription('SEVERE: The internal temperature inside the UPS is too hot.')
upsTrapTempOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,26))
if mibBuilder.loadTexts: upsTrapTempOK.setDescription('INFORMATION: The UPS has returned from a high ambient temp condition.')
upsTrapHighHSTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,27))
if mibBuilder.loadTexts: upsTrapHighHSTemp.setDescription('SEVERE: The Inverter heatsink assembly inside the UPS is too hot .')
upsTrapHSTempOK = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,28))
if mibBuilder.loadTexts: upsTrapHSTempOK.setDescription('INFORMATION: The UPS has returned from a high heatsink temp condition.')
upsTrapHighXFMRTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,29))
if mibBuilder.loadTexts: upsTrapHighXFMRTemp.setDescription('SEVERE: The temperature of the main transformer inside the UPS is too hot .')
upsTrapHighPFMTemp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,30))
if mibBuilder.loadTexts: upsTrapHighPFMTemp.setDescription('SEVERE: The temperature of the PFM module inside the UPS is too hot.')
upsTrapProbeMissing = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,31))
if mibBuilder.loadTexts: upsTrapProbeMissing.setDescription('SEVERE: One or all of the temperature probes has been disconnected on the UPS.')
upsTrapProbeReconnected = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,32))
if mibBuilder.loadTexts: upsTrapProbeReconnected.setDescription('INFORMATION: The UPS has returned from a probe missing condition.')
upsTrapCheckPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,33))
if mibBuilder.loadTexts: upsTrapCheckPowerSupply.setDescription('SEVERE: The internal DC supply voltages are attenuated or missing.')
upsTrapTapRegulatorFault = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,34))
if mibBuilder.loadTexts: upsTrapTapRegulatorFault.setDescription('SEVERE: The UPS detected a possible failure in the tap changer (open or welded relay, etc.)')
upsTrapRelayFailure = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,35))
if mibBuilder.loadTexts: upsTrapRelayFailure.setDescription('SEVERE: There is a hardware problem inside the UPS.')
upsTrapCheckFuse = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,36))
if mibBuilder.loadTexts: upsTrapCheckFuse.setDescription('SEVERE: The failure of one or more fuses has been detected.')
upsTrapCheckMOV = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,37))
if mibBuilder.loadTexts: upsTrapCheckMOV.setDescription('SEVERE: One or more MOVs have failed due to a voltage surge.')
upsTrapMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,38))
if mibBuilder.loadTexts: upsTrapMemoryError.setDescription('SEVERE: The UPS has lost the programmed settings in the memory of the logic board.')
upsTrapCallService = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,39))
if mibBuilder.loadTexts: upsTrapCallService.setDescription('SEVERE: A hardware malfunction has occurred inside the UPS. Please consult a factory authorized service representative for assistance.')
upsTrapManualAlarmBeeperTestInitiated = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,40))
if mibBuilder.loadTexts: upsTrapManualAlarmBeeperTestInitiated.setDescription('INFORMATION: A manual test of the alarm beeper is being performed on the UPS.')
upsTrapManualAlarmBeeperTestAborted = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,41))
if mibBuilder.loadTexts: upsTrapManualAlarmBeeperTestAborted.setDescription('INFORMATION: The test of UPS has completed.')
upsTrapScheduledTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,42))
if mibBuilder.loadTexts: upsTrapScheduledTestInProgress.setDescription('INFORMATION: A test is in progress.')
upsTrapScheduledTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,43))
if mibBuilder.loadTexts: upsTrapScheduledTestFailed.setDescription('SEVERE: The last test performed failed.')
upsTrapCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,44))
if mibBuilder.loadTexts: upsTrapCommunicationLost.setDescription('SEVERE: Communication to the UPS has been lost. Steps to reestablish communication are in progress.')
upsTrapCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,45))
if mibBuilder.loadTexts: upsTrapCommunicationRestored.setDescription('INFORMATION: Communication with the UPS has been restored.')
upsTrapUPSGoingDown = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,46))
if mibBuilder.loadTexts: upsTrapUPSGoingDown.setDescription('WARNING: The ups has been given shutdown command by the management station.')
upsTrapUPSTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,47))
if mibBuilder.loadTexts: upsTrapUPSTurnedOff.setDescription('INFORMATION: The ups has been turned off by the management station.')
upsTrapUPSSleeping = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,48))
if mibBuilder.loadTexts: upsTrapUPSSleeping.setDescription("INFORMATION: The UPS has entered in 'sleep' mode. Power to the load has been cut off.")
upsTrapUPSWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,49))
if mibBuilder.loadTexts: upsTrapUPSWokeUp.setDescription("INFORMATION: The UPS woke up from 'sleep' mode. Power to the load has been restored.")
upsTrapUPSRebooted = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,50))
if mibBuilder.loadTexts: upsTrapUPSRebooted.setDescription('INFORMATION: The UPS is rebooted.')
upsTrapEmergencyPowerOFF = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,51))
if mibBuilder.loadTexts: upsTrapEmergencyPowerOFF.setDescription('SEVERE: The Emergency Power OFF feature has been activiated at the RS-232 port on the UPS.')
upsTrapHistLogWarn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,52))
if mibBuilder.loadTexts: upsTrapHistLogWarn.setDescription('WARNING: The ups history log buffer is almost full.')
upsTrapEventLogWarn = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,53))
if mibBuilder.loadTexts: upsTrapEventLogWarn.setDescription('WARNING: The ups event log buffer is almost full.')
upsTrapUPSFail = NotificationType((1, 3, 6, 1, 4, 1, 2947, 1) + (0,54))
if mibBuilder.loadTexts: upsTrapUPSFail.setDescription('SEVERE: A critical fault has been detected inside the UPS. Power to the load has been shut off.')
mibBuilder.exportSymbols("BESTPOWER-MIB", upsInputCurrent=upsInputCurrent, upsConfigScheduleRestartTime=upsConfigScheduleRestartTime, upsOutputFrequency=upsOutputFrequency, upsTrapUPSNoLongerOverloaded=upsTrapUPSNoLongerOverloaded, upsAlarmProbeMissing=upsAlarmProbeMissing, upsTrapOutputOverload=upsTrapOutputOverload, upsTrapCheckFan=upsTrapCheckFan, bestLinkPrimaryTimeServer=bestLinkPrimaryTimeServer, upsBatteryCurrent=upsBatteryCurrent, severityLevel=severityLevel, upsInputFrequency2=upsInputFrequency2, upsConfigScheduleTable=upsConfigScheduleTable, upsTrapCheckPowerSupply=upsTrapCheckPowerSupply, upsTrapUPSNotOnBattery=upsTrapUPSNotOnBattery, upsTrapUPSSleeping=upsTrapUPSSleeping, upsAlarmMemoryError=upsAlarmMemoryError, upsOutputVoltage3=upsOutputVoltage3, upsRegisteredShutdownClientsTable=upsRegisteredShutdownClientsTable, bestLinkHistoryLogFrequency=bestLinkHistoryLogFrequency, upsAlarmTapRegulator=upsAlarmTapRegulator, upsTrapRelayFailure=upsTrapRelayFailure, upsAlarmReplaceBattery=upsAlarmReplaceBattery, upsTrapEmergencyPowerOFF=upsTrapEmergencyPowerOFF, upsOutputTruePower3=upsOutputTruePower3, upsAlarmUserTest=upsAlarmUserTest, upsInput=upsInput, upsConfigScheduleRestartDay=upsConfigScheduleRestartDay, upsAlarmTime=upsAlarmTime, upsIdent=upsIdent, upsAlarmHighXFMRTemp=upsAlarmHighXFMRTemp, upsAlarmSiteWiringFault=upsAlarmSiteWiringFault, upsTrapCheckInverter=upsTrapCheckInverter, upsTrapHighXFMRTemp=upsTrapHighXFMRTemp, upsAlarmIndex=upsAlarmIndex, upsAlarmUpsOff=upsAlarmUpsOff, upsConfigLowRuntimeSetpoint=upsConfigLowRuntimeSetpoint, upsInputCurrent2=upsInputCurrent2, upsAlarmCheckBattery=upsAlarmCheckBattery, upsAlarmEPO=upsAlarmEPO, upsInputFrequency=upsInputFrequency, upsOutputFrequency3=upsOutputFrequency3, upsTrapReplaceBattery=upsTrapReplaceBattery, upsTrapHighHSTemp=upsTrapHighHSTemp, upsTrapHighUPSTemp=upsTrapHighUPSTemp, bestLinkRefreshFrequency=bestLinkRefreshFrequency, receiverAccept=receiverAccept, upsTrapManualAlarmBeeperTestInitiated=upsTrapManualAlarmBeeperTestInitiated, upsTrapUPSOnBattery=upsTrapUPSOnBattery, upsTrapUPSWokeUp=upsTrapUPSWokeUp, upsOutputPowerFactor=upsOutputPowerFactor, upsConfigDelayBeforeShutdown=upsConfigDelayBeforeShutdown, bestLinkSysTime=bestLinkSysTime, upsIdentUpsSerialNumber=upsIdentUpsSerialNumber, upsAlarmDiagnosticTestFailed=upsAlarmDiagnosticTestFailed, upsConfigScheduleShutdownTime=upsConfigScheduleShutdownTime, upsIdentDateOfManufacture=upsIdentDateOfManufacture, receiverCommunityString=receiverCommunityString, upsBatteryVoltage=upsBatteryVoltage, upsRegisteredShutdownClientsIPAddress=upsRegisteredShutdownClientsIPAddress, upsTrapCheckFuse=upsTrapCheckFuse, upsTest=upsTest, upsIdentUpsType=upsIdentUpsType, upsRegisteredShutdownClientsTotalNumberOf=upsRegisteredShutdownClientsTotalNumberOf, upsAlarmCommunicationsLost=upsAlarmCommunicationsLost, upsBatteryStatus=upsBatteryStatus, upsAlarmCallService=upsAlarmCallService, upsOutputApparentPower3=upsOutputApparentPower3, upsTrapProbeReconnected=upsTrapProbeReconnected, upsRegisteredShutdownClientsIndex=upsRegisteredShutdownClientsIndex, bestLinkTftpFileName=bestLinkTftpFileName, upsOutputVoltage=upsOutputVoltage, bestPower=bestPower, upsConfigTest=upsConfigTest, upsTrapPowerRestored=upsTrapPowerRestored, bestLink=bestLink, upsOutputCurrent=upsOutputCurrent, upsBatteryRuntimeRemaining=upsBatteryRuntimeRemaining, upsOutputVoltage2=upsOutputVoltage2, upsOutputCurrent2=upsOutputCurrent2, upsLastKnownAlarm=upsLastKnownAlarm, upsTrapNearLowBattery=upsTrapNearLowBattery, upsAlarmOnBattery=upsAlarmOnBattery, upsInputP2=upsInputP2, upsTrapScheduledTestInProgress=upsTrapScheduledTestInProgress, upsBatteryTemperature=upsBatteryTemperature, upsAlarmCircuitBreakerShdn=upsAlarmCircuitBreakerShdn, upsBatteryLastReplaceDate=upsBatteryLastReplaceDate, upsAlarmBatteriesDisconnected=upsAlarmBatteriesDisconnected, upsAlarmCircuitBreakerWarning=upsAlarmCircuitBreakerWarning, upsAlarmCheckFuse=upsAlarmCheckFuse, PositiveInteger=PositiveInteger, upsConfigBatteryTestDuration=upsConfigBatteryTestDuration, bestLinkTftpHost=bestLinkTftpHost, upsConfigTrapsReceiversEntry=upsConfigTrapsReceiversEntry, trapsIndex=trapsIndex, upsConfigScheduleIndex=upsConfigScheduleIndex, upsAlarmCheckMOV=upsAlarmCheckMOV, upsTrapCommunicationLost=upsTrapCommunicationLost, upsOutputPhase=upsOutputPhase, upsAlarmsPresent=upsAlarmsPresent, upsTrapLowRuntime=upsTrapLowRuntime, upsTrapEventLogWarn=upsTrapEventLogWarn, upsInputPhase=upsInputPhase, upsInputFrequency3=upsInputFrequency3, bestLinkSysDate=bestLinkSysDate, upsControlTurnOffUPS=upsControlTurnOffUPS, upsWellKnownAlarms=upsWellKnownAlarms, upsAlarmBypassOn=upsAlarmBypassOn, upsTrapScheduledTestFailed=upsTrapScheduledTestFailed, bestLinkSoftwareVersion=bestLinkSoftwareVersion, upsAlarmAutoBypass=upsAlarmAutoBypass, upsConfig=upsConfig, upsAlarmHighPFMTemp=upsAlarmHighPFMTemp, upsTrapTapRegulatorFault=upsTrapTapRegulatorFault, upsTrapHistLogWarn=upsTrapHistLogWarn, upsBattery=upsBattery, upsAlarmHighBattery=upsAlarmHighBattery, upsTrapSiteWiringFault=upsTrapSiteWiringFault, upsBatteryTimeOnBattery=upsBatteryTimeOnBattery, upsAlarmEntry=upsAlarmEntry, upsTrapCheckMOV=upsTrapCheckMOV, upsInputPhase3=upsInputPhase3, upsAlarmHighAmbTemp=upsAlarmHighAmbTemp, upsOutputApparentPower=upsOutputApparentPower, upsConfigScheduleShutdownDay=upsConfigScheduleShutdownDay, upsOutputFrequency2=upsOutputFrequency2, upsTrapManualAlarmBeeperTestAborted=upsTrapManualAlarmBeeperTestAborted, upsTrapUPSRebooted=upsTrapUPSRebooted, upsConfigRegisteredShutdownClients=upsConfigRegisteredShutdownClients, upsAlarm=upsAlarm, upsInputCurrent3=upsInputCurrent3, upsConfigScheduleEntry=upsConfigScheduleEntry, upsOutputPowerFactor3=upsOutputPowerFactor3, upsOutputApparentPower2=upsOutputApparentPower2, upsIdentUpsName=upsIdentUpsName, upsTrapCircuitBreakerShdn=upsTrapCircuitBreakerShdn, upsAlarmCheckInverter=upsAlarmCheckInverter, upsTrapCheckBattery=upsTrapCheckBattery, upsTrapBatteriesDisconnected=upsTrapBatteriesDisconnected, upsConfigbestLink=upsConfigbestLink, upsAlarmName=upsAlarmName, upsTrapCircuitBreakerWarning=upsTrapCircuitBreakerWarning, upsTrapMemoryError=upsTrapMemoryError, upsOutputPowerFactor2=upsOutputPowerFactor2, upsIdentModel=upsIdentModel, upsInputVoltage3=upsInputVoltage3, upsInputPhase2=upsInputPhase2, upsIdentUpsIdentification=upsIdentUpsIdentification, bestLinkNetId=bestLinkNetId, upsTrapHighBattery=upsTrapHighBattery, trapsReceiverAddr=trapsReceiverAddr, upsTrapBatteryOK=upsTrapBatteryOK, upsAlarmCheckFan=upsAlarmCheckFan, upsInputVoltage=upsInputVoltage, upsAlarmHighHSTemp=upsAlarmHighHSTemp, upsOutputP3=upsOutputP3, NonNegativeInteger=NonNegativeInteger, upsInputVoltage2=upsInputVoltage2, upsOutputTruePower=upsOutputTruePower, upsIdentVARating=upsIdentVARating, upsAlarmLowAcOut=upsAlarmLowAcOut, upsTrapUPSTurnedOff=upsTrapUPSTurnedOff, upsOutputCurrent3=upsOutputCurrent3, upsControl=upsControl, upsTrapUPSFail=upsTrapUPSFail, upsInputPower3=upsInputPower3, upsInputPower2=upsInputPower2, upsManualTests=upsManualTests, upsTrapTempOK=upsTrapTempOK, upsInputP3=upsInputP3, upsConfigTestLevel=upsConfigTestLevel, upsAlarmNearLowBattery=upsAlarmNearLowBattery, upsTrapHighPFMTemp=upsTrapHighPFMTemp, upsTrapLowBattery=upsTrapLowBattery, upsOutputPhase3=upsOutputPhase3, upsConfigDelayBeforeRestart=upsConfigDelayBeforeRestart, upsTrapHSTempOK=upsTrapHSTempOK, upsOutputPhase2=upsOutputPhase2, upsAlarmLowRuntime=upsAlarmLowRuntime, upsTrapCallService=upsTrapCallService, upsInputPower=upsInputPower, bestLinkGateway=bestLinkGateway, upsAlarmTestInProgress=upsAlarmTestInProgress, upsConfigTrapsReceiversTable=upsConfigTrapsReceiversTable, upsAlarmCheckPowerSupply=upsAlarmCheckPowerSupply, upsTrapPowerFail=upsTrapPowerFail, upsAlarmRelayFailure=upsAlarmRelayFailure, bestLinkNetMask=bestLinkNetMask, upsRegisteredShutdownClientsEntry=upsRegisteredShutdownClientsEntry, upsOutput=upsOutput, upsConfigTrapsReceivers=upsConfigTrapsReceivers, upsAlarmTable=upsAlarmTable, bestLinkSecondaryTimeServer=bestLinkSecondaryTimeServer, upsOutputTruePower2=upsOutputTruePower2, upsTrapProbeMissing=upsTrapProbeMissing, upsTrapUPSGoingDown=upsTrapUPSGoingDown, upsControlActivateUpsScheduling=upsControlActivateUpsScheduling, upsTrapCircuitBreakerOK=upsTrapCircuitBreakerOK, upsConfigDaysBetweenTests=upsConfigDaysBetweenTests, upsOutputP2=upsOutputP2, upsOutputPercentLoad=upsOutputPercentLoad, bestLinkFlashEEPROM=bestLinkFlashEEPROM, upsAlarmLowBattery=upsAlarmLowBattery, upsTrapLowAcOut=upsTrapLowAcOut, upsTrapUPSCanRunOnBattery=upsTrapUPSCanRunOnBattery, upsAlarmOutputOverload=upsAlarmOutputOverload, upsTrapCommunicationRestored=upsTrapCommunicationRestored, upsTrapUPSOnline=upsTrapUPSOnline, upsIdentFirmwareRevision=upsIdentFirmwareRevision, upsAlarmupsFailed=upsAlarmupsFailed, upsTrapBypassOn=upsTrapBypassOn, upsOutputStatus=upsOutputStatus)
