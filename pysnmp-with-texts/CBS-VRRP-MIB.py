#
# PySNMP MIB module CBS-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CBS-VRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cbsTrapSeverity, cbsHwModuleID, ModuleState = mibBuilder.importSymbols("CBS-HARDWARE-MIB", "cbsTrapSeverity", "cbsHwModuleID", "ModuleState")
cbsVgVapGroupID, cbsVgVapGroupName = mibBuilder.importSymbols("CBS-VAPGROUP-MIB", "cbsVgVapGroupID", "cbsVgVapGroupName")
cbsMIBs, cbsTraps, cbsMgmt = mibBuilder.importSymbols("CROSSBEAM-SYSTEMS-MIB", "cbsMIBs", "cbsTraps", "cbsMgmt")
ProductID, KBytes = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "ProductID", "KBytes")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Unsigned32, MibIdentifier, iso, Integer32, ModuleIdentity, Counter32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Unsigned32", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "Counter32", "TimeTicks", "NotificationType")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
cbsVrrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6848, 3, 5))
cbsVrrpMIB.setRevisions(('2005-08-30 00:00', '2010-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cbsVrrpMIB.setRevisionsDescriptions(('Initial Revision', 'Added cbsVrrpFailGrTable, cbsVrrpFailGrCompTable, cbsVrrpRemoteBoxPathTable and some new traps.',))
if mibBuilder.loadTexts: cbsVrrpMIB.setLastUpdated('200508300000Z')
if mibBuilder.loadTexts: cbsVrrpMIB.setOrganization('Crossbeam Systems, Inc.')
if mibBuilder.loadTexts: cbsVrrpMIB.setContactInfo('Email: mib-admin@crossbeamsys.com Postal: 80 Central Street Boxborough, MA 01719')
if mibBuilder.loadTexts: cbsVrrpMIB.setDescription('XOS, Release 9.5: This MIB module defines the objects related to Crossbeam VRRP Traps.')
class FailGroupStatus(TextualConvention, Integer32):
    description = 'Failover group status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("init", 0), ("master", 1), ("backup", 2), ("down", 3))

class RemoteBoxPathStatus(TextualConvention, Integer32):
    description = "Remote box path's status"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("down", 0), ("secondary", 1), ("standby", 2), ("active", 3))

cbsVrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 5))
cbsVrrpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 4, 4))
cbsVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1))
cbsVrrpTrapNewMasterReason = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("priority", 0), ("preempted", 1), ("masterNoResponse", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterReason.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterReason.setDescription('This indicates the reason for NewMaster trap. Used by cbsVrrpTrapNewMaster trap.')
cbsVrrpTrapNewMasterFailGrName = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterFailGrName.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterFailGrName.setDescription('This object contains the VRRP Failover Group name. Used by cbsVrrpTrapNewMaster trap.')
cbsVrrpTrapNewMasterVrId = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterVrId.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterVrId.setDescription('This object contains the Virtual Router Identifier (VRID). Used by cbsVrrpTrapNewMaster trap.')
cbsVrrpTrapNewMasterCirId = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterCirId.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterCirId.setDescription('This object contains the circuit ID. Used by cbsVrrpTrapNewMaster trap.')
cbsVrrpTrapNewMasterCirName = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterCirName.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNewMasterCirName.setDescription('This object contains the circuit name. Used by cbsVrrpTrapNewMaster trap.')
cbsVrrpTrapProtoErrReason = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hopLimitError", 0), ("versionError", 1), ("checksumError", 2), ("vridError", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapProtoErrReason.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapProtoErrReason.setDescription('This indicates the reason for protocol error trap. Used by cbsVrrpTrapProtoError trap.')
cbsVrrpTrapFailGrOldStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 7), FailGroupStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpTrapFailGrOldStatus.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrOldStatus.setDescription('The old status for the failover group.')
cbsVrrpTrapFailGrNewStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 8), FailGroupStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpTrapFailGrNewStatus.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrNewStatus.setDescription('The new status for the failover group.')
cbsVrrpTrapFailGrStatusChgReason = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpTrapFailGrStatusChgReason.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrStatusChgReason.setDescription('Indicates the reason of the status changed, e.g. 1. Down --> Master: Priority is 255 2. Down --> Master: Priority higher than remote box <id> 3. Down --> Master: Timed out waiting for master 4. Down --> Backup: Remote box <id> has higher priority 5. Down --> Backup: Master <id> has lower priority, but preemption is disabled 6. Master --> Backup: Relinquished by user 7. Master --> Backup: Preempted by remote box <id> 8. Master --> Down: Priority is 0 9. Master --> Down: Vrrp failover group is disabled. 10. Master --> Down: No valid virtual routers configured 11. Backup --> Master: Priority higher than remote box <id> 12. Backup --> Master: Priority is 255 13. Backup --> Master: Timed out waiting for master 14. Backup --> Down: Priority is 0 15. Backup --> Down: Vrrp failover group is disabled 16. Backup --> Down: No valid virtual routers configured ')
cbsVrrpTrapFailGrOldPriority = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpTrapFailGrOldPriority.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrOldPriority.setDescription("The failover group's old actual priority.")
cbsVrrpTrapFailGrNewPriority = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpTrapFailGrNewPriority.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrNewPriority.setDescription("The failover group's new actual priority.")
cbsVrrpTrapFailGrPriorityChgReason = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("configured", 0), ("vrDown", 1), ("vrUp", 2), ("virturRouter", 3), ("verifyNextHop", 4), ("monitorCircuit", 5), ("monitorInterface", 6), ("monitorGroupInterface", 7), ("activeVapThreshold", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapFailGrPriorityChgReason.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrPriorityChgReason.setDescription('This indicates the reason for PriorityChanged trap. Used by cbsVrrpTrapFailGrPriorityChanged trap. configured - configured priority changed vrDown - failover group down due to deleted/disabled or invalid configuration vrUp - failover group up due to becoming enable or valid virtualRouter - priority delta of involved virtual router changed verifyNextHop - priority delta of involved nexthop changed monitorCircuit - priority delta of involved monitored circuit changed monitorInterface - priority delta of involved monitored interface changed monitorGroupInterface - priority delta of involved monitored group interface changed activeVapThreshold - priority delta of involved active vap changed ')
cbsVrrpTrapRemoteBoxPathOldStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 13), RemoteBoxPathStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathOldStatus.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathOldStatus.setDescription('Old status of the specified path of remote box.')
cbsVrrpTrapRemoteBoxPathNewStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 14), RemoteBoxPathStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathNewStatus.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathNewStatus.setDescription('New status of the specified path of remote box.')
cbsVrrpRemBoxPathAddrs = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 5, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbsVrrpRemBoxPathAddrs.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemBoxPathAddrs.setDescription("All paths' IP addresses of the remote box, they are separated by comma.")
cbsVrrpFailGrTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2), )
if mibBuilder.loadTexts: cbsVrrpFailGrTable.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrTable.setDescription('This table contains information about the VRRP failover groups.')
cbsVrrpFailGrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1), ).setIndexNames((0, "CBS-VRRP-MIB", "cbsVrrpFailGrID"))
if mibBuilder.loadTexts: cbsVrrpFailGrEntry.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrEntry.setDescription('An entry in the failover group table.')
cbsVrrpFailGrID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrID.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrID.setDescription('The unique Group ID for the failover group.')
cbsVrrpFailGrName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrName.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrName.setDescription('The name for the failover group.')
cbsVrrpFailGrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 3), FailGroupStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrStatus.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrStatus.setDescription('The status for the failover group.')
cbsVrrpFailGrConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrConfigPriority.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrConfigPriority.setDescription('The configured priority for the failover group.')
cbsVrrpFailGrActualPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrActualPriority.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrActualPriority.setDescription('The actual priority for the failover group.')
cbsVrrpFailGrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrEnabled.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrEnabled.setDescription('Specifies if failover group is enabled or not.')
cbsVrrpFailGrPreemption = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrPreemption.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrPreemption.setDescription('Specifies preemption for the failover group is off or on.')
cbsVrrpFailGrLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrLastChangeTime.setDescription('Indicates the elapsed time since the status last changed.')
cbsVrrpFailGrLastChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrLastChangeReason.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrLastChangeReason.setDescription('Indicates the reason of the status last changed, e.g. 1. Down --> Master: Priority is 255 2. Down --> Master: Priority higher than remote box <id> 3. Down --> Master: Timed out waiting for master 4. Down --> Backup: Remote box <id> has higher priority 5. Down --> Backup: Master <id> has lower priority, but preemption is disabled 6. Master --> Backup: Relinquished by user 7. Master --> Backup: Preempted by remote box <id> 8. Master --> Down: Priority is 0 9. Master --> Down: Vrrp failover group is disabled. 10. Master --> Down: No valid virtual routers configured 11. Backup --> Master: Priority higher than remote box <id> 12. Backup --> Master: Priority is 255 13. Backup --> Master: Timed out waiting for master 14. Backup --> Down: Priority is 0 15. Backup --> Down: Vrrp failover group is disabled 16. Backup --> Down: No valid virtual routers configured ')
cbsVrrpFailGrMasterSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrMasterSysID.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrMasterSysID.setDescription('The system ID of the platform that is operating as the master of this failover group.')
cbsVrrpFailGrMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrMasterPriority.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrMasterPriority.setDescription("The master failover group's actual priority.")
cbsVrrpFailGrCompTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3), )
if mibBuilder.loadTexts: cbsVrrpFailGrCompTable.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrCompTable.setDescription('This table contains information about the components of VRRP failover groups')
cbsVrrpFailGrCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1), ).setIndexNames((0, "CBS-VRRP-MIB", "cbsVrrpFailGroupID"), (0, "CBS-VRRP-MIB", "cbsVrrpFailGrCompIndex"))
if mibBuilder.loadTexts: cbsVrrpFailGrCompEntry.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrCompEntry.setDescription('An entry in the VRRP failover group component table.')
cbsVrrpFailGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGroupID.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGroupID.setDescription('The ID of the VRRP failover group.')
cbsVrrpFailGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGroupName.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGroupName.setDescription('The name of the VRRP failover group.')
cbsVrrpFailGrCompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrCompIndex.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrCompIndex.setDescription('The index for the component.')
cbsVrrpFailGrCompType = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vr", 0), ("mc", 1), ("mi", 2), ("mg", 3), ("vg", 4), ("nh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrCompType.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrCompType.setDescription('The type of the component.')
cbsVrrpFailGrCompDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrCompDescr.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrCompDescr.setDescription('The detailed description about the component, the format depend on the type of the component, e.g.: vr - virtual router circuit name/virtual router id/OSPF cost increment mc - monitored circuit name mi - monitored interface mg - monitored group interface vg - vap group (active-vap-threshold) nh - verify-next-hop IP/virtual router ID')
cbsVrrpFailGrCompDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpFailGrCompDelta.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpFailGrCompDelta.setDescription("The vrrp component's configured priority delta as well as information about its usage: 10 : priority delta of a component configured as 10 failover group priority NOT decremented by this delta (no failure) -10: priority delta of a component configured as 10 failover group priority decremented by this delta (component failure) 10* or -10*: unknown next hop status")
cbsVrrpRemoteBoxPathTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4), )
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathTable.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathTable.setDescription('This table contains information about the path of VRRP remote box')
cbsVrrpRemoteBoxPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1), ).setIndexNames((0, "CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), (0, "CBS-VRRP-MIB", "cbsVrrpRemoteBoxPathIndex"))
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathEntry.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathEntry.setDescription('An entry in the VRRP remote box path table.')
cbsVrrpRemoteBoxID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxID.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxID.setDescription('The system ID of the VRRP remote box.')
cbsVrrpRemoteBoxPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathIndex.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathIndex.setDescription('The index for path of VRRP remote box.')
cbsVrrpRemoteBoxPathAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathAddr.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathAddr.setDescription("The path's IP address of the VRRP remote box.")
cbsVrrpRemoteBoxPathLocalIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLocalIntf.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLocalIntf.setDescription("The path's IP address can be reachable via this local interface.")
cbsVrrpRemoteBoxPathLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLocalAddr.setDescription('The IP address of the local interface.')
cbsVrrpRemoteBoxPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 6), RemoteBoxPathStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathStatus.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathStatus.setDescription("The path's status of the VRRP remote box.")
cbsVrrpRemoteBoxPathLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLastChangeTime.setDescription('Indicates the elapsed time since the status last changed.')
cbsVrrpRemoteBoxPathLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 5, 4, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLinkQuality.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpRemoteBoxPathLinkQuality.setDescription('The link quality of the remote box path.')
cbsVrrpTrapNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 1)).setObjects(("CBS-VRRP-MIB", "cbsVrrpTrapNewMasterFailGrName"), ("CBS-VRRP-MIB", "cbsVrrpTrapNewMasterVrId"), ("CBS-VRRP-MIB", "cbsVrrpTrapNewMasterCirId"), ("CBS-VRRP-MIB", "cbsVrrpTrapNewMasterCirName"), ("CBS-VRRP-MIB", "cbsVrrpTrapNewMasterReason"))
if mibBuilder.loadTexts: cbsVrrpTrapNewMaster.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNewMaster.setDescription("The newMaster trap indicates that the sending agent transitioned to 'Master' state.")
cbsVrrpTrapProtoError = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 2)).setObjects(("CBS-VRRP-MIB", "cbsVrrpTrapProtoErrReason"))
if mibBuilder.loadTexts: cbsVrrpTrapProtoError.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapProtoError.setDescription('The error trap indicates that the sending agent encountered the protocol error indicated by vrrpTrapProtoErrorReason.')
cbsVrrpTrapFailGrStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 3)).setObjects(("CBS-VRRP-MIB", "cbsVrrpFailGrID"), ("CBS-VRRP-MIB", "cbsVrrpFailGrName"), ("CBS-VRRP-MIB", "cbsVrrpTrapFailGrOldStatus"), ("CBS-VRRP-MIB", "cbsVrrpTrapFailGrNewStatus"), ("CBS-VRRP-MIB", "cbsVrrpTrapFailGrStatusChgReason"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapFailGrStatusChanged.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrStatusChanged.setDescription('The StatusChanged trap indicates that failover group of the sending agent transitioned from old to new state.')
cbsVrrpTrapFailGrPriorityChanged = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 4)).setObjects(("CBS-VRRP-MIB", "cbsVrrpFailGrID"), ("CBS-VRRP-MIB", "cbsVrrpFailGrName"), ("CBS-VRRP-MIB", "cbsVrrpTrapFailGrOldPriority"), ("CBS-VRRP-MIB", "cbsVrrpTrapFailGrNewPriority"), ("CBS-VRRP-MIB", "cbsVrrpTrapFailGrPriorityChgReason"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapFailGrPriorityChanged.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapFailGrPriorityChanged.setDescription("The PriorityChanged trap indicates that priority of the sending agent's failover group changed.")
cbsVrrpTrapRemoteBoxPathStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 5)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-VRRP-MIB", "cbsVrrpRemoteBoxPathAddr"), ("CBS-VRRP-MIB", "cbsVrrpRemoteBoxPathLocalIntf"), ("CBS-VRRP-MIB", "cbsVrrpRemoteBoxPathLocalAddr"), ("CBS-VRRP-MIB", "cbsVrrpTrapRemoteBoxPathOldStatus"), ("CBS-VRRP-MIB", "cbsVrrpTrapRemoteBoxPathNewStatus"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathStatusChanged.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathStatusChanged.setDescription("The StatusChanged trap indicates that one path of remote box on the sending agent's transitioned from old to new state.")
cbsVrrpTrapRemoteBoxNoActivePath = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 6)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxNoActivePath.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxNoActivePath.setDescription('The trap indicates that there is no active path for the remote box.')
cbsVrrpTrapRemoteBoxNoSecondaryPath = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 7)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxNoSecondaryPath.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxNoSecondaryPath.setDescription('The trap indicates that there is no secondary path for the remote box that contains 2 CPMs.')
cbsVrrpTrapRemoteBoxNoStandbyPath = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 8)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxNoStandbyPath.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxNoStandbyPath.setDescription('The trap indicates that there is 1 active path but no standby path for the remote box.')
cbsVrrpTrapRemoteBoxPathSharedIntf = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 9)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-VRRP-MIB", "cbsVrrpRemBoxPathAddrs"), ("CBS-VRRP-MIB", "cbsVrrpRemoteBoxPathLocalIntf"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathSharedIntf.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxPathSharedIntf.setDescription('The trap indicates that all paths of the remote box only are reachable via single local interface on the sending agent.')
cbsVrrpTrapNoRemoteBoxConfigured = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 10)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapNoRemoteBoxConfigured.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapNoRemoteBoxConfigured.setDescription('The trap indicates that VRRP configured but there is no remote box configured.')
cbsVrrpTrapOnlyOnePathDefined = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 11)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapOnlyOnePathDefined.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapOnlyOnePathDefined.setDescription('The trap indicates that the remote box configured with only one path.')
cbsVrrpTrapRemoteBoxRunLegacyXOS = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 4, 12)).setObjects(("CBS-VRRP-MIB", "cbsVrrpRemoteBoxID"), ("CBS-HARDWARE-MIB", "cbsTrapSeverity"))
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxRunLegacyXOS.setStatus('current')
if mibBuilder.loadTexts: cbsVrrpTrapRemoteBoxRunLegacyXOS.setDescription('The trap indicates that the remote box is running legacy XOS.')
mibBuilder.exportSymbols("CBS-VRRP-MIB", cbsVrrpFailGrEnabled=cbsVrrpFailGrEnabled, cbsVrrpFailGrCompType=cbsVrrpFailGrCompType, PYSNMP_MODULE_ID=cbsVrrpMIB, cbsVrrpFailGrPreemption=cbsVrrpFailGrPreemption, cbsVrrpFailGrCompDelta=cbsVrrpFailGrCompDelta, cbsVrrpRemoteBoxPathLocalIntf=cbsVrrpRemoteBoxPathLocalIntf, cbsVrrpRemoteBoxPathAddr=cbsVrrpRemoteBoxPathAddr, cbsVrrpTrapFailGrStatusChgReason=cbsVrrpTrapFailGrStatusChgReason, cbsVrrpFailGrConfigPriority=cbsVrrpFailGrConfigPriority, cbsVrrpTrapOnlyOnePathDefined=cbsVrrpTrapOnlyOnePathDefined, cbsVrrpTrapNewMasterCirId=cbsVrrpTrapNewMasterCirId, cbsVrrpTrapNewMasterReason=cbsVrrpTrapNewMasterReason, cbsVrrpFailGrCompEntry=cbsVrrpFailGrCompEntry, cbsVrrpRemoteBoxPathIndex=cbsVrrpRemoteBoxPathIndex, cbsVrrpRemoteBoxPathLinkQuality=cbsVrrpRemoteBoxPathLinkQuality, RemoteBoxPathStatus=RemoteBoxPathStatus, cbsVrrpTrapNewMasterVrId=cbsVrrpTrapNewMasterVrId, cbsVrrpRemBoxPathAddrs=cbsVrrpRemBoxPathAddrs, cbsVrrpTrapNewMasterFailGrName=cbsVrrpTrapNewMasterFailGrName, cbsVrrpOperations=cbsVrrpOperations, cbsVrrpFailGrCompIndex=cbsVrrpFailGrCompIndex, cbsVrrpTraps=cbsVrrpTraps, cbsVrrpFailGrTable=cbsVrrpFailGrTable, cbsVrrpFailGrStatus=cbsVrrpFailGrStatus, cbsVrrpFailGrLastChangeReason=cbsVrrpFailGrLastChangeReason, cbsVrrpFailGroupName=cbsVrrpFailGroupName, cbsVrrpRemoteBoxPathStatus=cbsVrrpRemoteBoxPathStatus, cbsVrrpRemoteBoxPathTable=cbsVrrpRemoteBoxPathTable, cbsVrrpTrapFailGrOldStatus=cbsVrrpTrapFailGrOldStatus, cbsVrrpTrapFailGrPriorityChanged=cbsVrrpTrapFailGrPriorityChanged, cbsVrrpTrapFailGrNewPriority=cbsVrrpTrapFailGrNewPriority, cbsVrrpFailGrID=cbsVrrpFailGrID, cbsVrrpFailGrMasterPriority=cbsVrrpFailGrMasterPriority, cbsVrrpFailGrMasterSysID=cbsVrrpFailGrMasterSysID, cbsVrrpTrapProtoErrReason=cbsVrrpTrapProtoErrReason, cbsVrrpMIB=cbsVrrpMIB, cbsVrrpFailGrActualPriority=cbsVrrpFailGrActualPriority, cbsVrrpFailGrCompTable=cbsVrrpFailGrCompTable, cbsVrrpTrapRemoteBoxRunLegacyXOS=cbsVrrpTrapRemoteBoxRunLegacyXOS, cbsVrrpRemoteBoxPathEntry=cbsVrrpRemoteBoxPathEntry, cbsVrrpTrapProtoError=cbsVrrpTrapProtoError, FailGroupStatus=FailGroupStatus, cbsVrrpRemoteBoxPathLastChangeTime=cbsVrrpRemoteBoxPathLastChangeTime, cbsVrrpTrapRemoteBoxNoStandbyPath=cbsVrrpTrapRemoteBoxNoStandbyPath, cbsVrrpTrapRemoteBoxPathStatusChanged=cbsVrrpTrapRemoteBoxPathStatusChanged, cbsVrrpTrapFailGrPriorityChgReason=cbsVrrpTrapFailGrPriorityChgReason, cbsVrrpTrapNewMasterCirName=cbsVrrpTrapNewMasterCirName, cbsVrrpTrapFailGrStatusChanged=cbsVrrpTrapFailGrStatusChanged, cbsVrrpTrapNewMaster=cbsVrrpTrapNewMaster, cbsVrrpTrapRemoteBoxNoActivePath=cbsVrrpTrapRemoteBoxNoActivePath, cbsVrrpFailGrEntry=cbsVrrpFailGrEntry, cbsVrrpRemoteBoxPathLocalAddr=cbsVrrpRemoteBoxPathLocalAddr, cbsVrrpTrapFailGrNewStatus=cbsVrrpTrapFailGrNewStatus, cbsVrrpTrapNoRemoteBoxConfigured=cbsVrrpTrapNoRemoteBoxConfigured, cbsVrrpFailGrName=cbsVrrpFailGrName, cbsVrrpFailGroupID=cbsVrrpFailGroupID, cbsVrrpRemoteBoxID=cbsVrrpRemoteBoxID, cbsVrrpTrapRemoteBoxPathSharedIntf=cbsVrrpTrapRemoteBoxPathSharedIntf, cbsVrrp=cbsVrrp, cbsVrrpTrapFailGrOldPriority=cbsVrrpTrapFailGrOldPriority, cbsVrrpTrapRemoteBoxPathOldStatus=cbsVrrpTrapRemoteBoxPathOldStatus, cbsVrrpTrapRemoteBoxNoSecondaryPath=cbsVrrpTrapRemoteBoxNoSecondaryPath, cbsVrrpFailGrLastChangeTime=cbsVrrpFailGrLastChangeTime, cbsVrrpTrapRemoteBoxPathNewStatus=cbsVrrpTrapRemoteBoxPathNewStatus, cbsVrrpFailGrCompDescr=cbsVrrpFailGrCompDescr)
