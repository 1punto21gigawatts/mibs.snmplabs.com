#
# PySNMP MIB module CISCO-TRUSTSEC-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TRUSTSEC-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CtsSecurityGroupTag, = mibBuilder.importSymbols("CISCO-TRUSTSEC-TC-MIB", "CtsSecurityGroupTag")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, ModuleIdentity, NotificationType, TimeTicks, MibIdentifier, Integer32, iso, Unsigned32, ObjectIdentity, IpAddress, Gauge32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "NotificationType", "TimeTicks", "MibIdentifier", "Integer32", "iso", "Unsigned32", "ObjectIdentity", "IpAddress", "Gauge32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DateAndTime, DisplayString, TruthValue, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue", "StorageType")
ciscoTrustSecIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 740))
ciscoTrustSecIfMIB.setRevisions(('2014-01-28 00:00', '2012-04-06 00:00', '2010-05-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTrustSecIfMIB.setRevisionsDescriptions(('Added following OBJECT-GROUP - ciscoTrustSecIfMIBCriticalAuthStatusGrp Added new compliance - ciscoTrustSecIfMIBCompliance3', 'Added following OBJECT-GROUP - ciscoTrustSecIfMIBNotifsCtrlGrp - ciscoTrustSecIfMIBNotifsOnlyInfoGrp - ciscoTrustSecIfMIBNotifsGrp Added new compliance - ciscoTrustSecIfMIBCompliance2 Modified DEFVAL - ctsiIfManualSapModeList.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTrustSecIfMIB.setLastUpdated('201401280000Z')
if mibBuilder.loadTexts: ciscoTrustSecIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTrustSecIfMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoTrustSecIfMIB.setDescription('This MIB module defines management objects for configuration and monitoring of the interfaces in Cisco Trusted Security environment. Glossary: ACS - Cisco Secure Access Control Server IFC - TrustSec Interface Controller MACSec - Media Access Control (MAC) Security PMK - Pairwise Master Key SAP - Security Association Protocol SGT - Security Group Tag. A tag identifying its source, assigned to a packet on ingress to a TrustSec cloud, and used to determine security and other policy to be applied to it along its path through the cloud. TrustSec - Cisco Trusted Security')
class CtsiCasheDataSource(TextualConvention, Integer32):
    description = 'The source of cached authorization data. unknown - cache source type not covered by any of the follow enumerations. acs - authorization data is loaded from ACS dram - authorization data is loaded from DRAM. nvram - authorization data is loaded from NVRAM. dramOrNvram - authorization data is loaded from DRAM or NVRAM.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("acs", 2), ("dram", 3), ("nvram", 4), ("all", 5))

class CtsSapNegMode(TextualConvention, Integer32):
    description = 'The SAP negotiation modes supported in TrustSec system. encapNoAuthenNoEncrypt - Encapsulation present, no authentication, no encryption. gcmAuthenNoEncrypt - GCM authentication, no encryption. gcmAuthenGcmEncrypt - GCM authentication, GCM encryption. noEncap - No encapsulation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("encapNoAuthenNoEncrypt", 1), ("gcmAuthenNoEncrypt", 2), ("gcmAuthenGcmEncrypt", 3), ("noEncap", 4))

class CtsSapNegModeList(TextualConvention, OctetString):
    description = 'The list of SAP negotiation modes provided within TrustSec (Cisco Trusted Security) system. Each octet represents a SAP negotiation mode which is defined in CtsSapNegMode. The DESCRIPTION clause of CtsSapNegModeList objects must fully describe the relationship between modes.'
    status = 'current'

class CtsiInterfaceControllerState(TextualConvention, Integer32):
    description = 'The state of the TrustSec Interface Controller state machine. unknown - none of the following states. initializing - the TrustSec interface controller state machine enter the initialize state when TrustSec is enabled on this interface. authenticating - the peer is being authenticated if the dot1x mode is enabled. authorizing - the peer is being authorized. sapNegotiating - the SA(Security Association) is being negotiated with the peer. open - the line is up from TrustSec perspective. held - a hold down timer is set. disconnecting - a failure has occurred, or the TrustSec link is going down, or TrustSec is being disabled. invalid - unable to start the TrustSec state machine. licenseError - No MACSec software license.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("initialize", 2), ("authenticating", 3), ("authorizing", 4), ("sapNegotiating", 5), ("open", 6), ("held", 7), ("disconnecting", 8), ("invalid", 9), ("licenseError", 10))

ciscoTrustSecIfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 0))
ciscoTrustSecIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1))
ciscoTrustSecIfMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 2))
ctsiIfConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1))
ctsiIfDot1xObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2))
ctsiIfManualObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3))
ctsiIfL3ForwardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 4))
ctsiIfStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5))
ctsiIfStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6))
ctsiAuthorizationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7))
ctsiIfcStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 8))
ctsiEventsStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9))
ctsiIfModeStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 10))
ctsiIfNotifsControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 11))
ctsiIfNotifsOnlyInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 12))
ctsiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1, 1), )
if mibBuilder.loadTexts: ctsiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfConfigTable.setDescription('A list of the TrustSec capable interfaces.')
ctsiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctsiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfConfigEntry.setDescription('An entry contains the configuration information for a particular TrustSec interface.')
ctsiIfModeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("dot1x", 0), ("manual", 1), ("l3Forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfModeCapability.setStatus('current')
if mibBuilder.loadTexts: ctsiIfModeCapability.setDescription('This object indicates the supported TrustSec mode on this interface.')
ctsiIfConfiguredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("dot1x", 3), ("manual", 4), ("l3Forward", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfConfiguredMode.setStatus('current')
if mibBuilder.loadTexts: ctsiIfConfiguredMode.setDescription('This object indicates the TrustSec mode currently configured on the interface. Each mode may have a corresponding entry in its corresponding configuration table. unknown - The configured TrustSec mode is none of the following. none - TrustSec is not configured in any mode. dot1x - TrustSec dot1x mode is configured for this interface. TrustSec system will use 802.1x for authentication, RADIUS for authorization and SAP negotiation for SA parameter. manual - TrustSec manual mode is configured for this interface. The authentication was bypassed in manual mode. User needs to manually to configure the policy and the SAP negotiation parameter. l3Forward - TrustSec L3 forwarding mode is configured for this interface.')
ctsiIfCacheClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiIfCacheClear.setStatus('current')
if mibBuilder.loadTexts: ctsiIfCacheClear.setDescription("This object allows user to clear the cache for the specific TrustSec interface by setting the value to 'true'. Setting the value to 'false' has no effect. When read, this object always returns 'false'.")
ctsiIfRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiIfRekey.setStatus('current')
if mibBuilder.loadTexts: ctsiIfRekey.setDescription("This object allows user to re-generate the SAP key for the specific TrustSec interface by setting the value to 'true'. Setting the value to 'false' has no effect. When read, this object always returns 'false'.")
ctsiIfDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1), )
if mibBuilder.loadTexts: ctsiIfDot1xTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xTable.setDescription('A list of the interfaces which have TrustSec dot1x mode configuration information.')
ctsiIfDot1xEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctsiIfDot1xEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xEntry.setDescription("An entry containing the TrustSec dot1x configuration for a particular interface. An entry can be created or deleted by using ctsiIfDot1xRowStatus. An entry can only be created if the value of corresponding instance of ctsiIfConfiguredMode is 'none' and the 'dot1x' BIT of corresponding instance ctsiIfModeCapability is set.")
ctsiIfDot1xSgtPropagateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfDot1xSgtPropagateEnabled.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xSgtPropagateEnabled.setDescription('This object specifies whether the SGT propagation is enabled on this interface.')
ctsiIfDot1xReauthInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 2), Integer32().clone(86400)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfDot1xReauthInterval.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xReauthInterval.setDescription('This object specifies the re-authentication interval applied to this interface when it is not provided from the ACS.')
ctsiIfDot1xSapModeList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 3), CtsSapNegModeList().clone(hexValue="04000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfDot1xSapModeList.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xSapModeList.setDescription('This object specifies the advertised modes for the SAP negotiation on this interface. Modes are executed in the order as specified in the mode list. Mode which is at the beginning of the method list will be executed first. Method which is at the end of mode list will be executed last. This object is not allowed to be set to a zero length string.')
ctsiIfDot1xDownloadReauthInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfDot1xDownloadReauthInterval.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xDownloadReauthInterval.setDescription('This object indicates the re-authentication interval which is downloaded from ACS. A value of zero indicates no re-authentication interval is downloaded from ACS. A value of -1 indicates that this object is not applicable on this interface.')
ctsiIfDot1xOperReauthInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfDot1xOperReauthInterval.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xOperReauthInterval.setDescription('This object indicates the operational re-authentication interval of the interface. A value of zero indicates that dot1x re-authentication is disabled on this interface. A value of -1 indicates that this object is not applicable on this interface.')
ctsiIfDot1xReauthTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfDot1xReauthTimeLeft.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xReauthTimeLeft.setDescription('This object indicates the leftover time of the current authentication session. A value of zero indicates the re-authentication is in progress. A value of -1 indicates that this object is not applicable on this interface.')
ctsiIfDot1xStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfDot1xStorageType.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xStorageType.setDescription('The storage type for this conceptual row.')
ctsiIfDot1xRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfDot1xRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xRowStatus.setDescription('The status of this conceptual row. All writable objects in this row may be modified at any time.')
ctsiIfManualTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1), )
if mibBuilder.loadTexts: ctsiIfManualTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualTable.setDescription('A list of the interfaces which have TrustSec manual mode configuration information.')
ctsiIfManualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctsiIfManualEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualEntry.setDescription("An entry containing the TrustSec manual configuration information for a particular interface. An entry can be created or deleted by using ctsiIfManualRowStatus. An entry can only be created if the value of corresponding instance of ctsiIfConfiguredMode is 'none' and the 'manual' BIT of corresponding instance ctsiIfModeCapability is set.")
ctsiIfManualDynamicPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualDynamicPeerId.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualDynamicPeerId.setDescription("This object specifies the peer's device identity which is used to obtain the desired policy for authorization request. Setting a none-zero value on this object is not allowed if the value of ctsiIfManualStaticSgt is not set to zero. A zero length string indicates that the policy acquisition from the ACS using the peer's identity is disabled on this interface.")
ctsiIfManualStaticSgt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 2), CtsSecurityGroupTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualStaticSgt.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualStaticSgt.setDescription('This object specifies the statically configured SGT for tagging the ingress traffic from the peer. Setting a none-zero value on this object is not allowed if the value of ctsiIfManualDynamicPeerId is not set to a zero length string. A value of zero indicates that no statically SGT tagging.')
ctsiIfManualStaticSgtTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualStaticSgtTrusted.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualStaticSgtTrusted.setDescription("This object specifies the peer's SGT assignment trust state. This object only can be set when ctsiIfManualStaticSgt is none-zero.")
ctsiIfManualSgtPropagateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualSgtPropagateEnabled.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualSgtPropagateEnabled.setDescription('This object specifies whether the SGT propagation is enabled on this interface.')
ctsiIfManualSapPmk = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualSapPmk.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualSapPmk.setDescription('This object specifies the PMK used by SAP. A zero length string for this object indicates the SAP negotiation is disabled on this interface.')
ctsiIfManualSapModeList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 6), CtsSapNegModeList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualSapModeList.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualSapModeList.setDescription('This object specified the advertised modes for the SAP negotiation on this interface. Modes are executed in the order as specified in the mode list. Mode which is at the beginning of the mode list will be executed first. Mode which is at the end of mode list will be executed last. Value of this object will becomes zero length octet if SAP negotiation is disabled. This object is not allowed to be set to a zero length string.')
ctsiIfManualStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualStorageType.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualStorageType.setDescription('The storage type for this conceptual row.')
ctsiIfManualRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfManualRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfManualRowStatus.setDescription('The status of this conceptual row. All writable objects in this row may be modified at any time.')
ctsiIfL3ForwardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 4, 1), )
if mibBuilder.loadTexts: ctsiIfL3ForwardTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfL3ForwardTable.setDescription('A list of the interfaces which have TrustSec L3 forwarding configuration information.')
ctsiIfL3ForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctsiIfL3ForwardEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfL3ForwardEntry.setDescription("An entry containing the TrustSec L3 forwarding configuration information for a particular interface. An entry can be created or deleted by using ctsiIfL3ForwardRowStatus. An entry can only be created if the value of corresponding instance of ctsiIfConfiguredMode is 'none' and the 'l3Forward' BIT of corresponding instance ctsiIfModeCapability is set.")
ctsiIfL3ForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l3Ipv4Forward", 1), ("l3Ipv6Forward", 2), ("l3IpForward", 3))).clone('l3Ipv4Forward')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfL3ForwardMode.setStatus('current')
if mibBuilder.loadTexts: ctsiIfL3ForwardMode.setDescription('This object specifies the type of L3 forwarding for the interface. l3Ipv4Forward - TrustSec L3 IPv4 forwarding. l3Ipv6Forward - TrustSec L3 IPv6 forwarding. l3IpForward - TrustSec L3 IPv6 and IPv4 forwarding.')
ctsiIfL3ForwardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 4, 1, 1, 2), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfL3ForwardStorageType.setStatus('current')
if mibBuilder.loadTexts: ctsiIfL3ForwardStorageType.setDescription('The storage type for this conceptual row.')
ctsiIfL3ForwardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsiIfL3ForwardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfL3ForwardRowStatus.setDescription('The status of this conceptual row. All writable objects in this row may be modified at any time.')
ctsiIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1), )
if mibBuilder.loadTexts: ctsiIfStatusTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfStatusTable.setDescription('A list of TrustSec enabled interfaces.')
ctsiIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctsiIfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfStatusEntry.setDescription('An entry contains the information of the specific TrustSec interface. A entry is created by system when TrustSec is enabled for an interface. An entry is deleted by system if TrustSec is disabled for an interface.')
ctsiIfControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 1), CtsiInterfaceControllerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfControllerState.setStatus('current')
if mibBuilder.loadTexts: ctsiIfControllerState.setDescription('This object indicates the current IFC state of this interface.')
ctsiIfAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("succeeded", 2), ("rejected", 3), ("logOff", 4), ("noRespond", 5), ("notApplicable", 6), ("incomplete", 7), ("failed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthenticationStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationStatus.setDescription('This object indicates the current TrustSec authentication status of this interface. unknown - status not covered by any of the follow enumerations. succeeded - authentication is succeeded. rejected - authentication is rejected. logOff - peer logged off. noRespond - peer no respond. notApplicable - bypassing the authentication. incomplete - authentication is not completed. failed - authentication failed.')
ctsiIfPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfPeerId.setStatus('current')
if mibBuilder.loadTexts: ctsiIfPeerId.setDescription('This object indicates the device identity or symbolic group name of the remote peer.')
ctsiIfPeerAdvCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 4), Bits().clone(namedValues=NamedValues(("sap", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfPeerAdvCapability.setStatus('current')
if mibBuilder.loadTexts: ctsiIfPeerAdvCapability.setDescription('This object indicates the advertised capabilities of the remote peer associated with this interface.')
ctsiIfAuthorizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4), ("fallBackPolicy", 5), ("incomplete", 6), ("peerSucceeded", 7), ("rbaclSucceeded", 8), ("policySucceeded", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthorizationStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthorizationStatus.setDescription('This object indicates the current TrustSec authorization status of the interface. unknown - status not covered by any of the follow enumerations. inProgress - authorization in progress. succeeded - authorization succeeded. failed - authorization failed. fallBackPolicy - apply the fallback policy. incomplete - authorization aborted. peerSucceeded - apply the peer policy succeeded. rbaclSucceeded - apply the RBACL policy succeeded. policySucceeded - apply the all policy succeeded.')
ctsiIfPeerSgt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 6), CtsSecurityGroupTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfPeerSgt.setStatus('current')
if mibBuilder.loadTexts: ctsiIfPeerSgt.setDescription('This object indicates the SGT value of the remote peer.')
ctsiIfPeerSgtTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfPeerSgtTrusted.setStatus('current')
if mibBuilder.loadTexts: ctsiIfPeerSgtTrusted.setDescription('This object indicates whether the SGT of the remote peer is trusted.')
ctsiIfSapNegotiationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("inProgress", 3), ("succeeded", 4), ("failed", 5), ("licenseError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfSapNegotiationStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfSapNegotiationStatus.setDescription('This object indicates the SAP negotiation status on this interface. notApplicable - SAP disabled on local or remote peer is not SAP capable. unknown - status not covered by any of the follow enumerations. inProgress - SAP negotiation in progress. succeeded - SAP negotiation completed. failed - SAP negotiation failed. licenseError - No MACSec software license.')
ctsiIfSapNegModeList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 9), CtsSapNegModeList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfSapNegModeList.setStatus('current')
if mibBuilder.loadTexts: ctsiIfSapNegModeList.setDescription('This object indicates the operational SAP negotiation mode list on this interface.')
ctsiIfCacheExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfCacheExpirationTime.setStatus('current')
if mibBuilder.loadTexts: ctsiIfCacheExpirationTime.setDescription('This object indicates the time when the current cached data applied on the interface will be expired. A value of zero indicates that the cached data will never be expired.')
ctsiIfCacheDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 11), CtsiCasheDataSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfCacheDataSource.setStatus('current')
if mibBuilder.loadTexts: ctsiIfCacheDataSource.setDescription('This object indicates the source of cached data applied to the interface.')
ctsiIfCriticalAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("cache", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfCriticalAuthStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiIfCriticalAuthStatus.setDescription('This object indicates the CTS Critical-Auth status of interface. disable - link is not in Critical-Auth mode. cache - link is in Critical-Auth cached mode. default - link is in Critical-Auth default mode.')
ctsiIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1), )
if mibBuilder.loadTexts: ctsiIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfStatsTable.setDescription('A list of Cisco Trusted Security capable interface.')
ctsiIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctsiIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfStatsEntry.setDescription('An entry contains the statistics information of a particular TrustSec interface. An entry created by system for each interface is TrustSec enabled. An entry deleted by system for each interface is TrustSec disabled.')
ctsiIfAuthenticationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthenticationSuccess.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationSuccess.setDescription('The number of times that peer has been successfully authenticated on this interface.')
ctsiIfAuthenticationReject = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthenticationReject.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationReject.setDescription('The number of times that peer has been rejected in authentication on this interface.')
ctsiIfAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationFailure.setDescription('The number of times that peer has been failed in authentication on this interface.')
ctsiIfAuthenticationNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthenticationNoResponse.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationNoResponse.setDescription('The number of times that no authentication respond received from the remote peer associated with this interface.')
ctsiIfAuthenticationLogoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthenticationLogoff.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationLogoff.setDescription('The number of times that received authentication log off from the peer associated with this interface.')
ctsiIfAuthorizationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthorizationSuccess.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthorizationSuccess.setDescription('The number of times that the peer entity successfully passed the TrustSec authorization challenge on this interface.')
ctsiIfAuthorizationPolicyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthorizationPolicyFail.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthorizationPolicyFail.setDescription('The number of time that fail to access policy or refresh the policy for TrustSec authorization on this interface.')
ctsiIfAuthorizationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfAuthorizationFail.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthorizationFail.setDescription('The number of times that peer has been failed in TrustSec authorization on this interface.')
ctsiIfSapSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfSapSuccess.setStatus('current')
if mibBuilder.loadTexts: ctsiIfSapSuccess.setDescription('The number of times that SAP negotiation is succeed on this interface.')
ctsiIfSapFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfSapFail.setStatus('current')
if mibBuilder.loadTexts: ctsiIfSapFail.setDescription('The number of times that SAP negotiation has failed on this interface.')
ctsiAuthorizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1), )
if mibBuilder.loadTexts: ctsiAuthorizationTable.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationTable.setDescription('A list of authorized remote peers on this device.')
ctsiAuthorizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1), ).setIndexNames((1, "CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationPeerId"))
if mibBuilder.loadTexts: ctsiAuthorizationEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationEntry.setDescription('An entry containing the management information for a particular authorized peer. An entry is created when the policy acquired from the ACS for a new peer. An entry is deleted when the authorization of the peer has expired or fails to refresh its policy.')
ctsiAuthorizationPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ctsiAuthorizationPeerId.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationPeerId.setDescription('This object indicates the device identity or symbolic group name of the remote peer.')
ctsiAuthorizationPeerSgt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 2), CtsSecurityGroupTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationPeerSgt.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationPeerSgt.setDescription('This object indicates the SGT of the remote peer.')
ctsiAuthorizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("start", 2), ("waitingRespond", 3), ("assessing", 4), ("complete", 5), ("failure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationState.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationState.setDescription('This object indicates the current state of the authorization entity. unknown - none of the following states. start - authorization entity created and initialized. waitingRespond - a policy request has been made by remote peer to the ACS and waiting for the response. assessing - the policy been received from ACS and is being assessed. complete - policy has been received and assessed. failure - failed to download the policy from the ACS.')
ctsiAuthorizationLastRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationLastRefresh.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationLastRefresh.setDescription('The object indicates the date and time when the authorized peer was last refreshed.')
ctsiAuthorizationTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationTimeLeft.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationTimeLeft.setDescription('This object indicates the leftover time for the current policy. A value of zero indicates that policy refresh is in progress. A value of -1 indicates that this object is not applicable on this authorization entry.')
ctsiAuthorizationTimeToRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationTimeToRefresh.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationTimeToRefresh.setDescription('This object indicates the time left to start the policy refresh. A value of zero indicates that policy refresh is in progress. A value of -1 indicates that this object is not applicable on this authorization entry.')
ctsiAuthorizationCacheDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 7), CtsiCasheDataSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationCacheDataSource.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationCacheDataSource.setDescription('This object indicates the source of cached data.')
ctsiAuthorizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4), ("fallbackPolicy", 5), ("incomplete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationStatus.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationStatus.setDescription('This object indicates the status of this authorization peer. unknown - status not covered by any of the follow enumerations. inProgress - new authorization link created or add a new policy request for an existing link. succeeded - policy received successful. failed - policy download failed. fallbackPolicy - download policy failed apply fallback policy. incomplete - policy received incomplete.')
ctsiIfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 8, 1), )
if mibBuilder.loadTexts: ctsiIfcStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfcStatsTable.setDescription('A list of IFC state statistic on this device.')
ctsiIfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfcState"))
if mibBuilder.loadTexts: ctsiIfcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctsiIfcStatsEntry.setDescription('An entry containing the total number of interfaces which are currently belong to a particular IFC state.')
ctsiIfcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 8, 1, 1, 1), CtsiInterfaceControllerState())
if mibBuilder.loadTexts: ctsiIfcState.setStatus('current')
if mibBuilder.loadTexts: ctsiIfcState.setDescription('This object indicates the IFC state.')
ctsiIfcStatsIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 8, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiIfcStatsIfCount.setStatus('current')
if mibBuilder.loadTexts: ctsiIfcStatsIfCount.setDescription('The total number of interfaces on the device which is currently in the IFC state.')
ctsiAuthenticationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthenticationSuccess.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthenticationSuccess.setDescription('The total number of times that remote peers authentication succeed on this device.')
ctsiAuthenticationReject = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthenticationReject.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthenticationReject.setDescription('The total number of times that remote peers authentication rejected on this device.')
ctsiAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthenticationFailure.setDescription('The total number of times that remote peers authentication failed on this device')
ctsiAuthenticationLogoff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthenticationLogoff.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthenticationLogoff.setDescription('The total number of times that remote peer log off on this device.')
ctsiAuthenticationNoRespond = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthenticationNoRespond.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthenticationNoRespond.setDescription('The total number of times that not received authentication respond from remote peer on this device.')
ctsiAuthorizationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationSuccess.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationSuccess.setDescription('The total number of times that remote peer authorization succeed on this device.')
ctsiAuthorizationFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationFailure.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationFailure.setDescription('The total number of times that remote peer TrustSec authorization failed on this device.')
ctsiAuthorizationPolicyFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiAuthorizationPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationPolicyFailure.setDescription('The number of time that fail to access policy or refresh the policy for TrustSec authorization on this device.')
ctsiSapNegotiationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiSapNegotiationSuccess.setStatus('current')
if mibBuilder.loadTexts: ctsiSapNegotiationSuccess.setDescription('The total number of times that TrustSec SAP negotiation succeed on this device.')
ctsiSapNegotiationFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiSapNegotiationFailure.setStatus('current')
if mibBuilder.loadTexts: ctsiSapNegotiationFailure.setDescription('The total number of times that TrustSec SAP negotiation failure on this device.')
ctsiInDot1xModeIfCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiInDot1xModeIfCount.setStatus('current')
if mibBuilder.loadTexts: ctsiInDot1xModeIfCount.setDescription('The total number of interfaces on the device which is in TrustSec 802.1X mode.')
ctsiInManualModeIfCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiInManualModeIfCount.setStatus('current')
if mibBuilder.loadTexts: ctsiInManualModeIfCount.setDescription('The total number of interfaces on the device which is in TrustSec Manual mode.')
ctsiInL3ForwardModeIfCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 10, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsiInL3ForwardModeIfCount.setStatus('current')
if mibBuilder.loadTexts: ctsiInL3ForwardModeIfCount.setDescription('The total number of interfaces on the device which is in TrustSec Layer 3 forwarding mode.')
ctsiAuthorizationFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiAuthorizationFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationFailNotifEnable.setDescription("This object specifies whether the system generates the ctsiAuthorizationFailNotif. A value of 'false' will prevent ctsiAuthorizationFailNotif notifications from being generated by this system.")
ctsiIfAddSupplicantFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 11, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiIfAddSupplicantFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAddSupplicantFailNotifEnable.setDescription("This object specifies whether the system generates the ctsiIfAddSupplicantFailNotif. A value of 'false' will prevent ctsiIfAddSupplicantFailNotif notifications from being generated by this system.")
ctsiIfAuthenticationFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiIfAuthenticationFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationFailNotifEnable.setDescription("This object specifies whether the system generates the ctsiIfAuthenticationFailNotif. A value of 'false' will prevent ctsiIfAuthenticationFailNotif notifications from being generated by this system.")
ctsiIfSapNegotiationFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 11, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiIfSapNegotiationFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfSapNegotiationFailNotifEnable.setDescription("This object specifies whether the system generates the ctsiIfSapNegotiationFailNotif. A value of 'false' will prevent ctsiIfSapNegotiationFailNotif notifications from being generated by this system.")
ctsiIfUnauthorizedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 11, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsiIfUnauthorizedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsiIfUnauthorizedNotifEnable.setDescription("This object specifies whether the system generates the ctsiIfUnauthorizedNotif. A value of 'false' will prevent ctsiIfUnauthorizedNotif notifications from being generated by this system.")
ctsiIfNotifMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 12, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsiIfNotifMessage.setStatus('current')
if mibBuilder.loadTexts: ctsiIfNotifMessage.setDescription('This object indicates detail message associated with notifications.')
ctsiIfDot1xPaeRole = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 740, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("authenticator", 2), ("supplicant", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsiIfDot1xPaeRole.setStatus('current')
if mibBuilder.loadTexts: ctsiIfDot1xPaeRole.setDescription('This object indicates dot1x PAE role information. notApplicable: Dot1x PAE role is not applicable in this notification. authenticator: PAE Authenticator. supplicant : PAE Supplicant.')
ctsiAuthorizationFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 740, 0, 1)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationPeerSgt"))
if mibBuilder.loadTexts: ctsiAuthorizationFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsiAuthorizationFailNotif.setDescription('A ctsiAuthorizationFailNotif is generated when the policy acquisition failed for the peer.')
ctsiIfAddSupplicantFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 740, 0, 2)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: ctsiIfAddSupplicantFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAddSupplicantFailNotif.setDescription('A ctsiIfAddSupplicantFailNotif is generated when the system fails to add dot1x supplicant for an interface.')
ctsiIfAuthenticationFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 740, 0, 3)).setObjects(("IF-MIB", "ifName"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfPeerId"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xPaeRole"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationStatus"))
if mibBuilder.loadTexts: ctsiIfAuthenticationFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsiIfAuthenticationFailNotif.setDescription('A ctsiIfAuthenticationFailNotif is generated when an authentication error for the peer is detected for an interface.')
ctsiIfSapNegotiationFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 740, 0, 4)).setObjects(("IF-MIB", "ifName"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfNotifMessage"))
if mibBuilder.loadTexts: ctsiIfSapNegotiationFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsiIfSapNegotiationFailNotif.setDescription('A ctsiIfSapNegotiationFailNotif is generated when a SAP negotiation error with the peer is detected for an interface.')
ctsiIfUnauthorizedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 740, 0, 5)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: ctsiIfUnauthorizedNotif.setStatus('current')
if mibBuilder.loadTexts: ctsiIfUnauthorizedNotif.setDescription('A ctsiIfUnauthorizedNotif is generated when a interface becomes unauthorized on the Cisco TrustSec link.')
ciscoTrustSecIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 1))
ciscoTrustSecIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2))
ciscoTrustSecIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 1, 1)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfConfigGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBDot1xGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBManualGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBL3ForwardGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBStatusGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBAuthorizationGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfcStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBEventStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfModeStatisticGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBCompliance = ciscoTrustSecIfMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBCompliance.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecIfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 1, 2)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfConfigGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBDot1xGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBManualGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBL3ForwardGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBStatusGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBAuthorizationGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfcStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBEventStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfModeStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBNotifsCtrlGrp"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBNotifsOnlyInfoGrp"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBNotifsGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBCompliance2 = ciscoTrustSecIfMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBCompliance2.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecIfMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 1, 3)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfConfigGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBDot1xGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBManualGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBL3ForwardGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBStatusGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBAuthorizationGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfcStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBEventStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBIfModeStatisticGroup"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBNotifsCtrlGrp"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBNotifsOnlyInfoGrp"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBNotifsGrp"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ciscoTrustSecIfMIBCriticalAuthStatusGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBCompliance3 = ciscoTrustSecIfMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBCompliance3.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecIfMIBIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 1)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfModeCapability"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfConfiguredMode"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfCacheClear"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfRekey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBIfConfigGroup = ciscoTrustSecIfMIBIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBIfConfigGroup.setDescription('A collection of objects that provides the interface configuration for Cisco Trusted Security capable interface in the system.')
ciscoTrustSecIfMIBDot1xGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 2)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xSgtPropagateEnabled"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xReauthInterval"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xSapModeList"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xDownloadReauthInterval"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xOperReauthInterval"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xReauthTimeLeft"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xStorageType"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBDot1xGroup = ciscoTrustSecIfMIBDot1xGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBDot1xGroup.setDescription('A collection of objects that provides the dot1x mode configuration for the Cisco Trusted Security capable interface in the system.')
ciscoTrustSecIfMIBManualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 3)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualDynamicPeerId"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualStaticSgt"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualStaticSgtTrusted"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualSgtPropagateEnabled"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualSapPmk"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualSapModeList"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualStorageType"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfManualRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBManualGroup = ciscoTrustSecIfMIBManualGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBManualGroup.setDescription('A collection of objects that provides the manual mode configuration for the Cisco Trusted Security capable interface in the system.')
ciscoTrustSecIfMIBL3ForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 4)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfL3ForwardMode"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfL3ForwardStorageType"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfL3ForwardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBL3ForwardGroup = ciscoTrustSecIfMIBL3ForwardGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBL3ForwardGroup.setDescription('A collection of objects that provides the L3 forwarding mode configuration for the Cisco Trusted Security capable interface in the system.')
ciscoTrustSecIfMIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 5)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfControllerState"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationStatus"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfPeerId"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfPeerAdvCapability"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthorizationStatus"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfPeerSgt"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfPeerSgtTrusted"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfCacheExpirationTime"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfCacheDataSource"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfSapNegotiationStatus"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfSapNegModeList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBStatusGroup = ciscoTrustSecIfMIBStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBStatusGroup.setDescription('A collection of objects that provides the status information for the Cisco Trusted Security capable interface in the system.')
ciscoTrustSecIfMIBStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 6)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationSuccess"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationReject"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationFailure"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationNoResponse"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationLogoff"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthorizationSuccess"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthorizationPolicyFail"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthorizationFail"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfSapSuccess"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfSapFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBStatisticGroup = ciscoTrustSecIfMIBStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBStatisticGroup.setDescription('A collection of objects that provides the statistic information for the Cisco Trusted Security capable interface in the system.')
ciscoTrustSecIfMIBAuthorizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 7)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationPeerSgt"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationState"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationLastRefresh"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationTimeLeft"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationTimeToRefresh"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationCacheDataSource"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBAuthorizationGroup = ciscoTrustSecIfMIBAuthorizationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBAuthorizationGroup.setDescription('A collection of objects that provides the status information for the authorization link in the system.')
ciscoTrustSecIfMIBIfcStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 8)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfcStatsIfCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBIfcStatisticGroup = ciscoTrustSecIfMIBIfcStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBIfcStatisticGroup.setDescription('A collection of objects that provides the global IFC state statistic information in the system.')
ciscoTrustSecIfMIBEventStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 9)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthenticationSuccess"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthenticationReject"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthenticationFailure"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthenticationLogoff"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthenticationNoRespond"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationSuccess"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationFailure"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationPolicyFailure"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiSapNegotiationSuccess"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiSapNegotiationFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBEventStatisticGroup = ciscoTrustSecIfMIBEventStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBEventStatisticGroup.setDescription('A collection of objects that provides the global statistic information for the TrustSec events.')
ciscoTrustSecIfMIBIfModeStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 10)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiInDot1xModeIfCount"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiInManualModeIfCount"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiInL3ForwardModeIfCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBIfModeStatisticGroup = ciscoTrustSecIfMIBIfModeStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBIfModeStatisticGroup.setDescription('A collection of objects that provides the global TrustSec mode statistic information.')
ciscoTrustSecIfMIBNotifsCtrlGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 11)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationFailNotifEnable"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAddSupplicantFailNotifEnable"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationFailNotifEnable"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfSapNegotiationFailNotifEnable"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfUnauthorizedNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBNotifsCtrlGrp = ciscoTrustSecIfMIBNotifsCtrlGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBNotifsCtrlGrp.setDescription('A collection of objects that provides notification control for TrustSec interfaces.')
ciscoTrustSecIfMIBNotifsOnlyInfoGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 12)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfNotifMessage"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfDot1xPaeRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBNotifsOnlyInfoGrp = ciscoTrustSecIfMIBNotifsOnlyInfoGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBNotifsOnlyInfoGrp.setDescription('A collection of objects that provides the notification information for TrustSec interfaces.')
ciscoTrustSecIfMIBNotifsGrp = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 13)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiAuthorizationFailNotif"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAddSupplicantFailNotif"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfAuthenticationFailNotif"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfSapNegotiationFailNotif"), ("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfUnauthorizedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBNotifsGrp = ciscoTrustSecIfMIBNotifsGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBNotifsGrp.setDescription('A collection of notifications for TrustSec interfaces.')
ciscoTrustSecIfMIBCriticalAuthStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 740, 2, 2, 14)).setObjects(("CISCO-TRUSTSEC-INTERFACE-MIB", "ctsiIfCriticalAuthStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecIfMIBCriticalAuthStatusGrp = ciscoTrustSecIfMIBCriticalAuthStatusGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecIfMIBCriticalAuthStatusGrp.setDescription('A collection of objects that provides the Critical-Auth status information for the Cisco Trusted Security capable interface in the system.')
mibBuilder.exportSymbols("CISCO-TRUSTSEC-INTERFACE-MIB", ctsiIfControllerState=ctsiIfControllerState, ctsiIfDot1xOperReauthInterval=ctsiIfDot1xOperReauthInterval, ctsiIfAddSupplicantFailNotif=ctsiIfAddSupplicantFailNotif, ciscoTrustSecIfMIBObjects=ciscoTrustSecIfMIBObjects, ctsiIfCriticalAuthStatus=ctsiIfCriticalAuthStatus, ctsiIfL3ForwardEntry=ctsiIfL3ForwardEntry, ctsiIfUnauthorizedNotif=ctsiIfUnauthorizedNotif, ctsiIfManualTable=ctsiIfManualTable, CtsSapNegMode=CtsSapNegMode, ctsiIfCacheDataSource=ctsiIfCacheDataSource, ctsiIfManualStaticSgtTrusted=ctsiIfManualStaticSgtTrusted, ctsiIfManualSapModeList=ctsiIfManualSapModeList, ctsiIfL3ForwardStorageType=ctsiIfL3ForwardStorageType, ctsiAuthorizationFailNotifEnable=ctsiAuthorizationFailNotifEnable, ctsiAuthorizationState=ctsiAuthorizationState, ciscoTrustSecIfMIBCompliance3=ciscoTrustSecIfMIBCompliance3, ctsiIfAddSupplicantFailNotifEnable=ctsiIfAddSupplicantFailNotifEnable, ctsiAuthorizationTimeToRefresh=ctsiAuthorizationTimeToRefresh, ciscoTrustSecIfMIBConform=ciscoTrustSecIfMIBConform, ctsiIfcState=ctsiIfcState, ctsiSapNegotiationFailure=ctsiSapNegotiationFailure, ctsiIfAuthenticationReject=ctsiIfAuthenticationReject, ctsiIfSapFail=ctsiIfSapFail, ctsiAuthorizationLastRefresh=ctsiAuthorizationLastRefresh, ctsiIfPeerAdvCapability=ctsiIfPeerAdvCapability, ciscoTrustSecIfMIBStatusGroup=ciscoTrustSecIfMIBStatusGroup, ctsiInManualModeIfCount=ctsiInManualModeIfCount, ctsiIfUnauthorizedNotifEnable=ctsiIfUnauthorizedNotifEnable, ctsiIfDot1xReauthInterval=ctsiIfDot1xReauthInterval, ctsiIfPeerSgt=ctsiIfPeerSgt, ctsiIfCacheClear=ctsiIfCacheClear, ctsiIfL3ForwardObjects=ctsiIfL3ForwardObjects, ctsiIfDot1xSgtPropagateEnabled=ctsiIfDot1xSgtPropagateEnabled, ciscoTrustSecIfMIBCompliance2=ciscoTrustSecIfMIBCompliance2, ciscoTrustSecIfMIBNotifsOnlyInfoGrp=ciscoTrustSecIfMIBNotifsOnlyInfoGrp, ctsiAuthenticationFailure=ctsiAuthenticationFailure, ctsiIfDot1xPaeRole=ctsiIfDot1xPaeRole, ctsiIfDot1xSapModeList=ctsiIfDot1xSapModeList, ciscoTrustSecIfMIBManualGroup=ciscoTrustSecIfMIBManualGroup, ctsiIfDot1xStorageType=ctsiIfDot1xStorageType, ciscoTrustSecIfMIBGroups=ciscoTrustSecIfMIBGroups, ctsiIfConfigTable=ctsiIfConfigTable, ctsiAuthenticationLogoff=ctsiAuthenticationLogoff, ciscoTrustSecIfMIBNotifsGrp=ciscoTrustSecIfMIBNotifsGrp, ciscoTrustSecIfMIBNotifs=ciscoTrustSecIfMIBNotifs, ctsiIfAuthenticationFailure=ctsiIfAuthenticationFailure, PYSNMP_MODULE_ID=ciscoTrustSecIfMIB, ctsiIfcStatsEntry=ctsiIfcStatsEntry, ciscoTrustSecIfMIBCompliances=ciscoTrustSecIfMIBCompliances, ctsiAuthenticationNoRespond=ctsiAuthenticationNoRespond, ctsiIfConfigEntry=ctsiIfConfigEntry, ctsiIfManualDynamicPeerId=ctsiIfManualDynamicPeerId, ciscoTrustSecIfMIBStatisticGroup=ciscoTrustSecIfMIBStatisticGroup, ctsiIfSapNegotiationFailNotifEnable=ctsiIfSapNegotiationFailNotifEnable, ctsiAuthorizationFailNotif=ctsiAuthorizationFailNotif, ciscoTrustSecIfMIBAuthorizationGroup=ciscoTrustSecIfMIBAuthorizationGroup, ctsiSapNegotiationSuccess=ctsiSapNegotiationSuccess, ctsiIfDot1xTable=ctsiIfDot1xTable, ctsiAuthenticationSuccess=ctsiAuthenticationSuccess, ctsiIfAuthorizationPolicyFail=ctsiIfAuthorizationPolicyFail, ctsiAuthorizationPeerSgt=ctsiAuthorizationPeerSgt, ctsiIfL3ForwardMode=ctsiIfL3ForwardMode, ctsiEventsStatsObjects=ctsiEventsStatsObjects, ciscoTrustSecIfMIB=ciscoTrustSecIfMIB, ctsiAuthorizationTimeLeft=ctsiAuthorizationTimeLeft, ctsiIfStatusEntry=ctsiIfStatusEntry, ctsiIfStatusObjects=ctsiIfStatusObjects, ctsiAuthorizationEntry=ctsiAuthorizationEntry, ctsiIfConfigObjects=ctsiIfConfigObjects, ctsiAuthenticationReject=ctsiAuthenticationReject, ctsiInDot1xModeIfCount=ctsiInDot1xModeIfCount, ctsiIfManualStorageType=ctsiIfManualStorageType, ctsiIfPeerSgtTrusted=ctsiIfPeerSgtTrusted, ctsiAuthorizationObjects=ctsiAuthorizationObjects, ctsiIfAuthenticationLogoff=ctsiIfAuthenticationLogoff, CtsiInterfaceControllerState=CtsiInterfaceControllerState, ctsiIfAuthorizationFail=ctsiIfAuthorizationFail, CtsiCasheDataSource=CtsiCasheDataSource, ctsiAuthorizationCacheDataSource=ctsiAuthorizationCacheDataSource, ctsiIfcStatsIfCount=ctsiIfcStatsIfCount, ctsiIfNotifsOnlyInfoObjects=ctsiIfNotifsOnlyInfoObjects, CtsSapNegModeList=CtsSapNegModeList, ctsiIfNotifMessage=ctsiIfNotifMessage, ctsiIfStatusTable=ctsiIfStatusTable, ctsiIfDot1xDownloadReauthInterval=ctsiIfDot1xDownloadReauthInterval, ctsiIfcStatsObjects=ctsiIfcStatsObjects, ctsiIfCacheExpirationTime=ctsiIfCacheExpirationTime, ctsiIfSapNegotiationStatus=ctsiIfSapNegotiationStatus, ctsiIfcStatsTable=ctsiIfcStatsTable, ctsiIfModeCapability=ctsiIfModeCapability, ctsiIfAuthenticationFailNotif=ctsiIfAuthenticationFailNotif, ctsiIfManualSgtPropagateEnabled=ctsiIfManualSgtPropagateEnabled, ctsiIfDot1xEntry=ctsiIfDot1xEntry, ciscoTrustSecIfMIBL3ForwardGroup=ciscoTrustSecIfMIBL3ForwardGroup, ciscoTrustSecIfMIBIfModeStatisticGroup=ciscoTrustSecIfMIBIfModeStatisticGroup, ctsiIfAuthenticationSuccess=ctsiIfAuthenticationSuccess, ciscoTrustSecIfMIBCompliance=ciscoTrustSecIfMIBCompliance, ctsiIfManualRowStatus=ctsiIfManualRowStatus, ctsiAuthorizationPeerId=ctsiAuthorizationPeerId, ctsiIfRekey=ctsiIfRekey, ctsiIfL3ForwardRowStatus=ctsiIfL3ForwardRowStatus, ctsiIfDot1xRowStatus=ctsiIfDot1xRowStatus, ctsiIfDot1xReauthTimeLeft=ctsiIfDot1xReauthTimeLeft, ciscoTrustSecIfMIBCriticalAuthStatusGrp=ciscoTrustSecIfMIBCriticalAuthStatusGrp, ctsiIfAuthenticationNoResponse=ctsiIfAuthenticationNoResponse, ctsiIfStatsEntry=ctsiIfStatsEntry, ctsiIfManualEntry=ctsiIfManualEntry, ctsiIfSapNegotiationFailNotif=ctsiIfSapNegotiationFailNotif, ctsiIfDot1xObjects=ctsiIfDot1xObjects, ctsiIfStatsObjects=ctsiIfStatsObjects, ctsiIfL3ForwardTable=ctsiIfL3ForwardTable, ctsiIfSapNegModeList=ctsiIfSapNegModeList, ctsiIfConfiguredMode=ctsiIfConfiguredMode, ctsiIfAuthenticationFailNotifEnable=ctsiIfAuthenticationFailNotifEnable, ctsiIfSapSuccess=ctsiIfSapSuccess, ciscoTrustSecIfMIBDot1xGroup=ciscoTrustSecIfMIBDot1xGroup, ctsiAuthorizationTable=ctsiAuthorizationTable, ctsiIfStatsTable=ctsiIfStatsTable, ctsiInL3ForwardModeIfCount=ctsiInL3ForwardModeIfCount, ctsiIfManualObjects=ctsiIfManualObjects, ctsiAuthorizationPolicyFailure=ctsiAuthorizationPolicyFailure, ctsiIfAuthenticationStatus=ctsiIfAuthenticationStatus, ctsiAuthorizationStatus=ctsiAuthorizationStatus, ciscoTrustSecIfMIBNotifsCtrlGrp=ciscoTrustSecIfMIBNotifsCtrlGrp, ctsiIfManualStaticSgt=ctsiIfManualStaticSgt, ciscoTrustSecIfMIBIfConfigGroup=ciscoTrustSecIfMIBIfConfigGroup, ctsiIfAuthorizationStatus=ctsiIfAuthorizationStatus, ciscoTrustSecIfMIBIfcStatisticGroup=ciscoTrustSecIfMIBIfcStatisticGroup, ctsiIfManualSapPmk=ctsiIfManualSapPmk, ctsiAuthorizationSuccess=ctsiAuthorizationSuccess, ctsiAuthorizationFailure=ctsiAuthorizationFailure, ctsiIfAuthorizationSuccess=ctsiIfAuthorizationSuccess, ciscoTrustSecIfMIBEventStatisticGroup=ciscoTrustSecIfMIBEventStatisticGroup, ctsiIfPeerId=ctsiIfPeerId, ctsiIfNotifsControlObjects=ctsiIfNotifsControlObjects, ctsiIfModeStatsObjects=ctsiIfModeStatsObjects)
