#
# PySNMP MIB module CISCO-TAP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TAP2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, ObjectIdentity, Counter32, MibIdentifier, IpAddress, TimeTicks, ModuleIdentity, Counter64, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter64", "NotificationType", "Integer32")
DisplayString, TruthValue, RowStatus, TextualConvention, StorageType, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention", "StorageType", "DateAndTime")
ciscoTap2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 399))
ciscoTap2MIB.setRevisions(('2008-09-10 00:00', '2007-12-21 00:00', '2006-11-27 00:00', '2004-03-11 00:00', '2004-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTap2MIB.setRevisionsDescriptions(("Added the 'mobility' enum to cTap2StreamType as a specific filter defined by CISCO-MOBILITY-TAP-MIB.", "- Added support for cTap2DebugUserTable. - Added new enumeration rtp to 'cTap2MediationTransport' object. - Added new enumeration rtp to 'cTap2MediationCapabilities' object. - Added ciscoTap2MIBComplianceRev3 compliance which deprecates ciscoTap2MIBComplianceRev2. - Added ciscoTap2DebugComplianceGroupRev1 compliance Group which deprecates ciscoTap2DebugComplianceGroup.", '- Following objects are added in table cTap2StreamTable to support counter64 data cTap2StreamInterceptedHCPackets cTap2StreamInterceptHCDrops - Added ciscoTap2StreamHCStatsGroup OBJECT-GROUP - Added ciscoTap2MIBComplianceRev2 compliance which deprecates ciscoTap2MIBCompliance.', 'Added a new type to cTap2StreamType for intercepting sessions/flows of Mobile subscribers in wireless CDMA technology. Specific intercept filter is defined in CISCO-CDMA-PDSN-TAP-MIB.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTap2MIB.setLastUpdated('200809100000Z')
if mibBuilder.loadTexts: ciscoTap2MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTap2MIB.setContactInfo('Cisco Systems Customer Service Postal:170 W. Tasman Drive San Jose, CA 95134 USA Tel:+1 800 553-NETS E-mail:cs-li@cisco.com')
if mibBuilder.loadTexts: ciscoTap2MIB.setDescription("This module manages Cisco's intercept feature. This MIB replaces CISCO-TAP-MIB. This MIB defines a generic stream table that contains fields common to all intercept types. Specific intercept filters are defined in extension MIBs. They are CISCO-IP-TAP-MIB for IP intercepts, CISCO-802-TAP-MIB for IEEE 802 intercepts and CISCO-USER-CONNECTION-TAP-MIB for RADIUS-based user connection intercepts.")
ciscoTap2MIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 0))
ciscoTap2MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 1))
ciscoTap2MIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 2))
cTap2MediationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1))
cTap2StreamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2))
cTap2DebugGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3))
class Ctap2Dscp(TextualConvention, Integer32):
    description = 'An integer that is in the range of the DiffServ codepoint values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

cTap2MediationNewIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2MediationNewIndex.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationNewIndex.setDescription('This object contains a value which may be used as an index value for a new cTap2MediationEntry. Whenever read, the agent will change the value to a new non-conflicting value. This is to reduce the probability of errors during creation of new cTap2MediationTable entries.')
cTap2MediationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2), )
if mibBuilder.loadTexts: cTap2MediationTable.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationTable.setDescription('This table lists the Mediation Devices with which the intercepting device communicates. These may be on the same or different Mediation Devices. This table is written by the Mediation Device, and is always volatile. This is because intercepts may disappear during a restart of the intercepting equipment. Entries are added to this table via cTap2MediationStatus in accordance with the RowStatus convention.')
cTap2MediationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-TAP2-MIB", "cTap2MediationContentId"))
if mibBuilder.loadTexts: cTap2MediationEntry.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationEntry.setDescription('The entry describes a single session maintained with an application on a Mediation Device.')
cTap2MediationContentId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cTap2MediationContentId.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationContentId.setDescription("cTap2MediationContentId is a session identifier, from the intercept application's perspective, and a content identifier from the Mediation Device's perspective. The Mediation Device is responsible for making sure these are unique, although the SNMP RowStatus row creation process will help by not allowing it to create conflicting entries. Before creating a new entry, a value for this variable may be obtained by reading cTap2MediationNewIndex to reduce the probability of a value collision.")
cTap2MediationDestAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationDestAddressType.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationDestAddressType.setDescription('The type of cTap2MediationDestAddress.')
cTap2MediationDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationDestAddress.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationDestAddress.setDescription("The IP Address of the Mediation Device's network interface to which to direct intercepted traffic.")
cTap2MediationDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationDestPort.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationDestPort.setDescription("The port number on the Mediation Device's network interface to which to direct intercepted traffic.")
cTap2MediationSrcInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationSrcInterface.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationSrcInterface.setDescription('The interface on the intercepting device from which to transmit intercepted data. If zero, any interface may be used according to normal IP practice.')
cTap2MediationRtcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2MediationRtcpPort.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationRtcpPort.setDescription("The port number on the intercepting device to which the Mediation Devices directs RTCP Receiver Reports and Nacks. This object is only relevant when the value of cTap2MediationTransport is 'rtpNack'. This port is assigned by the intercepting device, rather than by the Mediation Device or manager application. The value of this MIB object has no effect before activating the cTap2MediationEntry.")
cTap2MediationDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 7), Ctap2Dscp().clone(34)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationDscp.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationDscp.setDescription('The Differentiated Services Code Point the intercepting device applies to the IP packets encapsulating the intercepted traffic.')
cTap2MediationDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationDataType.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationDataType.setDescription("If RTP with Ack/Nack resilience is selected as a transport, the mediation process requires an RTP payload type for data transmissions, and a second RTP payload type for retransmissions. This is the RTP payload type for transmissions. This object is only effective when the value of cTap2MediationTransport is 'rtpNack'.")
cTap2MediationRetransmitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationRetransmitType.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationRetransmitType.setDescription("If RTP with Ack/Nack resilience is selected as a transport, the mediation process requires an RTP payload type for data transmissions, and a second RTP payload type for retransmissions. This is the RTP payload type for retransmissions. This object is only effective when the value of cTap2MediationTransport is 'rtpNack'.")
cTap2MediationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 10), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationTimeout.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationTimeout.setDescription("The time at which this row and all related Stream Table rows should be automatically removed, and the intercept function cease. Since the initiating network manager may be the only device able to manage a specific intercept or know of its existence, this acts as a fail-safe for the failure or removal of the network manager. The object is only effective when the value of cTap2MediationStatus is 'active'.")
cTap2MediationTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("udp", 1), ("rtpNack", 2), ("tcp", 3), ("sctp", 4), ("rtp", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationTransport.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationTransport.setDescription('The protocol used in transferring intercepted data to the Mediation Device. The following protocols may be supported: udp: PacketCable udp format rtpNack: RTP with Nack resilience tcp: TCP with head of line blocking sctp: SCTP with head of line blocking rtp: Realtime Transport Protocol(RTP) packet format')
cTap2MediationNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationNotificationEnable.setDescription('This variable controls the generation of any notifications or informs by the MIB agent for this table entry.')
cTap2MediationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2MediationStatus.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationStatus.setDescription("The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table. cTap2MediationTimeout may be modified at any time (even while the row is active). But when the row is active, the other writable objects may not be modified without setting its value to 'notInService'. The entry may not be deleted or deactivated by setting its value to 'destroy' or 'notInService' if there is any associated entry in cTap2StreamTable.")
cTap2MediationCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 1, 3), Bits().clone(namedValues=NamedValues(("ipV4SrcInterface", 0), ("ipV6SrcInterface", 1), ("udp", 2), ("rtpNack", 3), ("tcp", 4), ("sctp", 5), ("rtp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2MediationCapabilities.setStatus('current')
if mibBuilder.loadTexts: cTap2MediationCapabilities.setDescription('This object displays the device capabilities with respect to certain fields in Mediation Device table. This may be dependent on hardware capabilities, software capabilities. The following values may be supported: ipV4SrcInterface: SNMP ifIndex Value may be used to select the interface (denoted by cTap2MediationSrcInterface) on the intercepting device from which to transmit intercepted data to an IPv4 address Mediation Device. ipV6SrcInterface: SNMP ifIndex Value may be used to select the interface (denoted by cTap2MediationSrcInterface) on the intercepting device from which to transmit intercepted data to an IPv6 address Mediation Device. udp: UDP may be used as transport protocol (denoted by cTap2MediationTransport) in transferring intercepted data to the Mediation Device. rtcpNack: RTP with Nack resilience may be used as transport protocol (denoted by cTap2MediationTransport) in transferring intercepted data to the Mediation Device. tcp: TCP may be used as transport protocol (denoted by cTap2MediationTransport) in transferring intercepted data to the Mediation Device. sctp: SCTP may be used as transport protocol (denoted by cTap2MediationTransport) in transferring intercepted data to the Mediation Device. rtp: RTP may be used as transport protocol (denoted by cTap2MediationTransport) in transferring intercepted data to the Mediation Device.')
cTap2StreamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1), )
if mibBuilder.loadTexts: cTap2StreamTable.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamTable.setDescription('The Intercept Stream Table lists the traffic streams to be intercepted. The same data stream may be required by multiple taps, and one might assume that often the intercepted stream is a small subset of the traffic that could be intercepted. The Table consists of generic fields that are independent of the type of intercept. It contains type of the specific filter which is defined in an extension MIB and counters to account for packets intercepted or dropped by the attached filter specification. Note that the Mediation Device must make sure there is only one type of specific filter created with the same indices as that of a row in this table, otherwise the later creations will fail. For example, if there is a row in this table with index 1.2, there can be a corresponding row with the same index either in citapStreamTable, c8tapStreamTable or cuctTapStreamTable, but not all. The first index indicates which Mediation Device the intercepted traffic will be diverted to. The second index permits multiple classifiers to be used together. Entries are added to this table via cTap2StreamStatus in accordance with the RowStatus convention.')
cTap2StreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-TAP2-MIB", "cTap2MediationContentId"), (0, "CISCO-TAP2-MIB", "cTap2StreamIndex"))
if mibBuilder.loadTexts: cTap2StreamEntry.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamEntry.setDescription('A stream entry indicates a single data stream to be intercepted to a Mediation Device. Many selected data streams may go to the same application interface, and many application interfaces are supported.')
cTap2StreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cTap2StreamIndex.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamIndex.setDescription('The index of the stream itself.')
cTap2StreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("userConnection", 3), ("msPdsn", 4), ("mobility", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2StreamType.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamType.setDescription('Identifies the type of intercept filter associated to this generic stream. The following types of streams are supported: ip: The specific filter is an IP filter with same indices as that of this table. The exact filter is a row in citapStreamTable of CISCO-IP-TAP-MIB. mac: The specific filter is a MAC filter with same indices as that of this table. The exact filter is a row in c8tapStreamTable of CISCO-802-TAP-MIB. userConnecton: The specific filter is a user connection filter with same indices as that of this table. The exact filter is a row in cuctTapStreamTable of CISCO-USER-CONNECTION-TAP-MIB. msPdsn: The specific filter is a Mobile Sub connection filter with same indices as that of this table. The exact filter is a row in ccptapStreamTable of CISCO-CDMA-PDSN-TAP-MIB. mobility: The specific filter is a Mobile Subscriber connection filter with same indices as that of this table. The exact filter is a row in cmtapStreamTable of CISCO-MOBILITY-TAP-MIB.')
cTap2StreamInterceptEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2StreamInterceptEnable.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamInterceptEnable.setDescription("If 'true', the tap should intercept matching traffic. The value for this object should be set to 'true' only after an additional filter specification has been attached to this stream.")
cTap2StreamInterceptedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2StreamInterceptedPackets.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamInterceptedPackets.setDescription('The number of packets matching this data stream specification that have been intercepted.')
cTap2StreamInterceptDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2StreamInterceptDrops.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamInterceptDrops.setDescription('The number of packets matching this data stream specification that, having been intercepted, were dropped in the lawful intercept process.')
cTap2StreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2StreamStatus.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamStatus.setDescription("The status of this conceptual row. This object manages creation, modification, and deletion of rows in this table. cTap2StreamInterceptEnable may be modified any time even the value of this entry rowStatus object is 'active'. When other rows must be changed, cTap2StreamStatus must be first set to 'notInService'.")
cTap2StreamInterceptedHCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2StreamInterceptedHCPackets.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamInterceptedHCPackets.setDescription('The number of packets matching this data stream specification that have been intercepted. This object is a 64-bit version of cTap2StreamInterceptedPackets.')
cTap2StreamInterceptHCDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2StreamInterceptHCDrops.setStatus('current')
if mibBuilder.loadTexts: cTap2StreamInterceptHCDrops.setDescription('The number of packets matching this data stream specification that, having been intercepted, were dropped in the lawful intercept process. This object is a 64-bit version of cTap2StreamInterceptDrops.')
cTap2DebugAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2DebugAge.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugAge.setDescription('This object contains the duration in minutes for which an entry in cTap2DebugTable is maintained by the implementing device after which the entry is deleted. The management station also has the option of deleting the entry itself by setting cTap2DebugStatus.')
cTap2DebugMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2DebugMaxEntries.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugMaxEntries.setDescription('This object contains the maximum number of debug messages maintained by the implementing device at a time. If this limit is crossed, most recent message will replace the least recent message.')
cTap2DebugTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3), )
if mibBuilder.loadTexts: cTap2DebugTable.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugTable.setDescription('A table that contains Lawful Intercept debug messages generated by the implementing device. This table is used by ciscoTap2MediationDebug and ciscoTap2StreamDebug notifications. An entry in this table contains a debug message which is regarding either a Mediation Device or a intercept stream created by a Mediation Device. The Mediation device is identified by cTap2DebugMediationId whose value is that of cTap2MediationContentId of cTapMediationEntry. The stream is identified by cTap2DebugMediationId and cTap2DebugStreamId whose values are that of cTap2MediationContentId and cTap2StreamIndex of the corresponding cTap2StreamEntry. Note that cTap2DebugStreamId may be zero for an entry, in which case the debug message is regarding a Medation Device. Entries are added to this table via cTap2DebugStatus in accordance with the RowStatus convention.')
cTap2DebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-TAP2-MIB", "cTap2DebugIndex"))
if mibBuilder.loadTexts: cTap2DebugEntry.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugEntry.setDescription('A list of the debug messages.')
cTap2DebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cTap2DebugIndex.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugIndex.setDescription('Index to the debug table.')
cTap2DebugMediationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2DebugMediationId.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugMediationId.setDescription('The value of this object is that of cTap2MediationContentId identifying an entry in cTap2MediationTable. Note this object may contain a value for which an entry in cTap2MediationTable does not exist. This happens when creation of an entry in cTap2MediationTable fails and this debug message conveys more detailed information regarding the failure.')
cTap2DebugStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2DebugStreamId.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugStreamId.setDescription('The value of this object is that of cTap2StreamIndex of an entry in cTap2StreamTable. This object along with cTap2DebugMediationId identifies an entry in cTap2StreamTable. The value of this object may be zero, in which this debug message is regarding a Mediation Device, but not a particular stream. Note this object may contain a value for which an entry in cTap2MediationTable does not exist. This happens when creation of an entry in cTap2StreamTable fails.')
cTap2DebugMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cTap2DebugMessage.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugMessage.setDescription('A text string contains the debug message.')
cTap2DebugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cTap2DebugStatus.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugStatus.setDescription("The status of this conceptual row. A row in this table is created by the implementing device. A management station cannot modify any of the objects in this row, except deleting the row by setting this object to 'destroy'.")
cTap2DebugUserTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 4), )
if mibBuilder.loadTexts: cTap2DebugUserTable.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugUserTable.setDescription("The User Table lists information of all the users configured in the system who are given permission by different Mediation Devices to access Lawful Intercept CLIs. This table will have dependancy on cTap2MediationTable. When entry in cTap2MediationTable is deleted or moved to 'notInService', entries corresponding cTap2MediationContentId in this table will be deleted.")
cTap2DebugUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-TAP2-MIB", "cTap2MediationContentId"), (0, "CISCO-TAP2-MIB", "cTap2DebugUserName"))
if mibBuilder.loadTexts: cTap2DebugUserEntry.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugUserEntry.setDescription('A conceptual row in the cTap2DebugUserTable. Each row represents name of user on the router to whom Mediation Device with CCCid represented by cTap2MediationContentId has given access to Lawful Intercept commands and cTap2DebugUserTimeout represents the time when the entry will expire.')
cTap2DebugUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cTap2DebugUserName.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugUserName.setDescription('A human readable string representing the name of debug user who will have access to Lawful Intercept commands.')
cTap2DebugUserTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 4, 1, 2), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2DebugUserTimeout.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugUserTimeout.setDescription("This object specifies the time at which the row will be removed from the table by the system. The value of this object is only effective when the value of corresponding instance of cTap2DebugUserStatus is 'active'.")
cTap2DebugUserStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 4, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2DebugUserStorageType.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugUserStorageType.setDescription("This object specifies the storage type of this conceptual row. If it is set to 'nonVolatile', this entry can be saved into non-volatile memory.")
cTap2DebugUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 399, 1, 3, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cTap2DebugUserStatus.setStatus('current')
if mibBuilder.loadTexts: cTap2DebugUserStatus.setDescription("The status of this conceptual row. This object manages creation, modification, and deletion of rows in this table. cTap2DebugUserTimeout may be modified any time even when the value of this entry rowStatus object is 'active'.")
ciscoTap2MIBActive = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 399, 0, 1))
if mibBuilder.loadTexts: ciscoTap2MIBActive.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2MIBActive.setDescription('This Notification is sent when an intercepting router or switch is first capable of intercepting a packet corresponding to a configured data stream. The value of the corresponding cTap2StreamType which identifies the actual intercept stream type is included in this notification. This notification may be generated in conjunction with the intercept application, which is designed to expect the notification to be sent as reliably as possible, e.g., through the use of a finite number of retransmissions until acknowledged, as and when such mechanisms are available; for example, with SNMPv3, this would be an InformRequest. Filter installation can take a long period of time, during which call progress may be delayed.')
ciscoTap2MediationTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 399, 0, 2)).setObjects(("CISCO-TAP2-MIB", "cTap2MediationStatus"))
if mibBuilder.loadTexts: ciscoTap2MediationTimedOut.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2MediationTimedOut.setDescription('When an intercept is autonomously removed by an intercepting device, such as due to the time specified in cTap2MediationTimeout arriving, the device notifies the manager of the action.')
ciscoTap2MediationDebug = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 399, 0, 3)).setObjects(("CISCO-TAP2-MIB", "cTap2DebugMediationId"), ("CISCO-TAP2-MIB", "cTap2DebugMessage"))
if mibBuilder.loadTexts: ciscoTap2MediationDebug.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2MediationDebug.setDescription('When there is intervention needed due to some events related to entries configured in cTap2MediationTable, the device notifies the manager of the event. This notification may be generated in conjunction with the intercept application, which is designed to expect the notification to be sent as reliably as possible, e.g., through the use of a finite number of retransmissions until acknowledged, as and when such mechanisms are available; for example, with SNMPv3, this would be an InformRequest.')
ciscoTap2StreamDebug = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 399, 0, 4)).setObjects(("CISCO-TAP2-MIB", "cTap2DebugMediationId"), ("CISCO-TAP2-MIB", "cTap2DebugStreamId"), ("CISCO-TAP2-MIB", "cTap2DebugMessage"))
if mibBuilder.loadTexts: ciscoTap2StreamDebug.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2StreamDebug.setDescription('When there is intervention needed due to some events related to entries configured in cTap2StreamTable, the device notifies the manager of the event. This notification may be generated in conjunction with the intercept application, which is designed to expect the notification to be sent as reliably as possible, e.g., through the use of a finite number of retransmissions until acknowledged, as and when such mechanisms are available; for example, with SNMPv3, this would be an InformRequest.')
ciscoTap2Switchover = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 399, 0, 5))
if mibBuilder.loadTexts: ciscoTap2Switchover.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2Switchover.setDescription('This notification is sent when there is a redundant (standby) route processor available on the intercepting device and the current active processor is going down causing standby to takeover. Note that this notification may be sent by the intercepting device only when it had a chance to know before it goes down. Mediation device when received this notification should assume that configured intercepts on the intercepting device no longer exist, when the standby processor takes control. This means that the Mediation device should again configure the intercepts.')
ciscoTap2MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 1))
ciscoTap2MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2))
ciscoTap2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 1, 1)).setObjects(("CISCO-TAP2-MIB", "ciscoTap2MediationComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2StreamComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2MediationCpbComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2MIBCompliance = ciscoTap2MIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTap2MIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Intercept MIB')
ciscoTap2MIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 1, 2)).setObjects(("CISCO-TAP2-MIB", "ciscoTap2MediationComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2StreamComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2MediationCpbComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2NotificationGroup"), ("CISCO-TAP2-MIB", "ciscoTap2StreamHCStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2MIBComplianceRev2 = ciscoTap2MIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTap2MIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Intercept MIB. This compliance deprecates ciscoTap2MIBCompliance.')
ciscoTap2MIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 1, 3)).setObjects(("CISCO-TAP2-MIB", "ciscoTap2MediationComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2StreamComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2MediationCpbComplianceGroup"), ("CISCO-TAP2-MIB", "ciscoTap2NotificationGroup"), ("CISCO-TAP2-MIB", "ciscoTap2StreamHCStatsGroup"), ("CISCO-TAP2-MIB", "ciscoTap2DebugComplianceGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2MIBComplianceRev3 = ciscoTap2MIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2MIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco Intercept MIB. This compliance deprecates ciscoTap2MIBComplianceRev2.')
ciscoTap2MediationComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 1)).setObjects(("CISCO-TAP2-MIB", "cTap2MediationNewIndex"), ("CISCO-TAP2-MIB", "cTap2MediationDestAddressType"), ("CISCO-TAP2-MIB", "cTap2MediationDestAddress"), ("CISCO-TAP2-MIB", "cTap2MediationDestPort"), ("CISCO-TAP2-MIB", "cTap2MediationSrcInterface"), ("CISCO-TAP2-MIB", "cTap2MediationRtcpPort"), ("CISCO-TAP2-MIB", "cTap2MediationDscp"), ("CISCO-TAP2-MIB", "cTap2MediationDataType"), ("CISCO-TAP2-MIB", "cTap2MediationRetransmitType"), ("CISCO-TAP2-MIB", "cTap2MediationTimeout"), ("CISCO-TAP2-MIB", "cTap2MediationTransport"), ("CISCO-TAP2-MIB", "cTap2MediationNotificationEnable"), ("CISCO-TAP2-MIB", "cTap2MediationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2MediationComplianceGroup = ciscoTap2MediationComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2MediationComplianceGroup.setDescription('These objects are necessary for description of the data streams directed to a Mediation Device.')
ciscoTap2StreamComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 2)).setObjects(("CISCO-TAP2-MIB", "cTap2StreamType"), ("CISCO-TAP2-MIB", "cTap2StreamInterceptEnable"), ("CISCO-TAP2-MIB", "cTap2StreamInterceptedPackets"), ("CISCO-TAP2-MIB", "cTap2StreamInterceptDrops"), ("CISCO-TAP2-MIB", "cTap2StreamStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2StreamComplianceGroup = ciscoTap2StreamComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2StreamComplianceGroup.setDescription('These objects are necessary for a description of the packets to select for interception.')
ciscoTap2NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 3)).setObjects(("CISCO-TAP2-MIB", "ciscoTap2MIBActive"), ("CISCO-TAP2-MIB", "ciscoTap2MediationTimedOut"), ("CISCO-TAP2-MIB", "ciscoTap2MediationDebug"), ("CISCO-TAP2-MIB", "ciscoTap2StreamDebug"), ("CISCO-TAP2-MIB", "ciscoTap2Switchover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2NotificationGroup = ciscoTap2NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2NotificationGroup.setDescription('These notifications are used to present status from the intercepting device to the Mediation Device.')
ciscoTap2MediationCpbComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 4)).setObjects(("CISCO-TAP2-MIB", "cTap2MediationCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2MediationCpbComplianceGroup = ciscoTap2MediationCpbComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2MediationCpbComplianceGroup.setDescription('These objects are necessary for a description of the mediation device to select for Lawful Intercept.')
ciscoTap2DebugComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 5)).setObjects(("CISCO-TAP2-MIB", "cTap2DebugAge"), ("CISCO-TAP2-MIB", "cTap2DebugMaxEntries"), ("CISCO-TAP2-MIB", "cTap2DebugMediationId"), ("CISCO-TAP2-MIB", "cTap2DebugStreamId"), ("CISCO-TAP2-MIB", "cTap2DebugMessage"), ("CISCO-TAP2-MIB", "cTap2DebugStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2DebugComplianceGroup = ciscoTap2DebugComplianceGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTap2DebugComplianceGroup.setDescription('These objects are necessary for debug information.')
ciscoTap2StreamHCStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 6)).setObjects(("CISCO-TAP2-MIB", "cTap2StreamInterceptedHCPackets"), ("CISCO-TAP2-MIB", "cTap2StreamInterceptHCDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2StreamHCStatsGroup = ciscoTap2StreamHCStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2StreamHCStatsGroup.setDescription('These objects are required for 64 bit version of cTap2StreamInterceptedPackets and cTap2StreamInterceptDrops')
ciscoTap2DebugComplianceGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 399, 2, 2, 7)).setObjects(("CISCO-TAP2-MIB", "cTap2DebugAge"), ("CISCO-TAP2-MIB", "cTap2DebugMaxEntries"), ("CISCO-TAP2-MIB", "cTap2DebugMediationId"), ("CISCO-TAP2-MIB", "cTap2DebugStreamId"), ("CISCO-TAP2-MIB", "cTap2DebugMessage"), ("CISCO-TAP2-MIB", "cTap2DebugStatus"), ("CISCO-TAP2-MIB", "cTap2DebugUserTimeout"), ("CISCO-TAP2-MIB", "cTap2DebugUserStorageType"), ("CISCO-TAP2-MIB", "cTap2DebugUserStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTap2DebugComplianceGroupRev1 = ciscoTap2DebugComplianceGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoTap2DebugComplianceGroupRev1.setDescription('These objects are necessary for debug information. This compliance group deprecates ciscoTap2DebugComplianceGroup.')
mibBuilder.exportSymbols("CISCO-TAP2-MIB", cTap2DebugStreamId=cTap2DebugStreamId, ciscoTap2DebugComplianceGroupRev1=ciscoTap2DebugComplianceGroupRev1, cTap2StreamInterceptedPackets=cTap2StreamInterceptedPackets, ciscoTap2MIBNotifs=ciscoTap2MIBNotifs, ciscoTap2StreamDebug=ciscoTap2StreamDebug, ciscoTap2MIBCompliance=ciscoTap2MIBCompliance, cTap2MediationRtcpPort=cTap2MediationRtcpPort, cTap2MediationDestPort=cTap2MediationDestPort, cTap2MediationTransport=cTap2MediationTransport, ciscoTap2NotificationGroup=ciscoTap2NotificationGroup, cTap2MediationDscp=cTap2MediationDscp, cTap2MediationStatus=cTap2MediationStatus, ciscoTap2MediationCpbComplianceGroup=ciscoTap2MediationCpbComplianceGroup, ciscoTap2MIBObjects=ciscoTap2MIBObjects, Ctap2Dscp=Ctap2Dscp, cTap2MediationRetransmitType=cTap2MediationRetransmitType, cTap2MediationTimeout=cTap2MediationTimeout, cTap2StreamIndex=cTap2StreamIndex, cTap2MediationDestAddress=cTap2MediationDestAddress, cTap2DebugAge=cTap2DebugAge, ciscoTap2MediationDebug=ciscoTap2MediationDebug, ciscoTap2MIBCompliances=ciscoTap2MIBCompliances, cTap2DebugUserStatus=cTap2DebugUserStatus, ciscoTap2MIBActive=ciscoTap2MIBActive, cTap2DebugUserName=cTap2DebugUserName, cTap2StreamInterceptedHCPackets=cTap2StreamInterceptedHCPackets, ciscoTap2StreamHCStatsGroup=ciscoTap2StreamHCStatsGroup, cTap2MediationGroup=cTap2MediationGroup, cTap2MediationEntry=cTap2MediationEntry, ciscoTap2MIBComplianceRev3=ciscoTap2MIBComplianceRev3, ciscoTap2StreamComplianceGroup=ciscoTap2StreamComplianceGroup, ciscoTap2MediationTimedOut=ciscoTap2MediationTimedOut, cTap2MediationTable=cTap2MediationTable, cTap2DebugUserEntry=cTap2DebugUserEntry, ciscoTap2Switchover=ciscoTap2Switchover, cTap2DebugIndex=cTap2DebugIndex, cTap2DebugStatus=cTap2DebugStatus, cTap2StreamInterceptHCDrops=cTap2StreamInterceptHCDrops, cTap2DebugUserStorageType=cTap2DebugUserStorageType, cTap2DebugTable=cTap2DebugTable, cTap2StreamInterceptEnable=cTap2StreamInterceptEnable, cTap2MediationDataType=cTap2MediationDataType, cTap2DebugMessage=cTap2DebugMessage, cTap2DebugUserTimeout=cTap2DebugUserTimeout, cTap2DebugMaxEntries=cTap2DebugMaxEntries, cTap2MediationSrcInterface=cTap2MediationSrcInterface, ciscoTap2MediationComplianceGroup=ciscoTap2MediationComplianceGroup, cTap2StreamTable=cTap2StreamTable, cTap2StreamStatus=cTap2StreamStatus, cTap2StreamGroup=cTap2StreamGroup, cTap2MediationContentId=cTap2MediationContentId, cTap2DebugGroup=cTap2DebugGroup, cTap2MediationNewIndex=cTap2MediationNewIndex, cTap2StreamType=cTap2StreamType, cTap2MediationNotificationEnable=cTap2MediationNotificationEnable, PYSNMP_MODULE_ID=ciscoTap2MIB, cTap2DebugEntry=cTap2DebugEntry, cTap2MediationCapabilities=cTap2MediationCapabilities, ciscoTap2MIBComplianceRev2=ciscoTap2MIBComplianceRev2, cTap2DebugMediationId=cTap2DebugMediationId, ciscoTap2MIBGroups=ciscoTap2MIBGroups, cTap2StreamInterceptDrops=cTap2StreamInterceptDrops, cTap2DebugUserTable=cTap2DebugUserTable, ciscoTap2DebugComplianceGroup=ciscoTap2DebugComplianceGroup, ciscoTap2MIB=ciscoTap2MIB, cTap2StreamEntry=cTap2StreamEntry, cTap2MediationDestAddressType=cTap2MediationDestAddressType, ciscoTap2MIBConform=ciscoTap2MIBConform)
