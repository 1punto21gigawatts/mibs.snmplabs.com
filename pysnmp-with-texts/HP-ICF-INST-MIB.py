#
# PySNMP MIB module HP-ICF-INST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-INST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:34:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, TimeTicks, Counter32, Counter64, MibIdentifier, Unsigned32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Integer32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter32", "Counter64", "MibIdentifier", "Unsigned32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Integer32", "iso", "ObjectIdentity")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
hpicfInstMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45))
hpicfInstMIB.setRevisions(('2007-09-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfInstMIB.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: hpicfInstMIB.setLastUpdated('200709070000Z')
if mibBuilder.loadTexts: hpicfInstMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfInstMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfInstMIB.setDescription('This MIB module contains HP proprietary definitions for Instrumentation.')
hpicfInstObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1))
hpicfInstConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 2))
hpicfInstGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 2, 1))
hpicfInstCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 2, 2))
hpicfInstEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 1), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInstEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfInstEnable.setDescription('The operational status of Instrumentation on this switch.')
hpicfInstMaxMemMB = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 2), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfInstMaxMemMB.setStatus('current')
if mibBuilder.loadTexts: hpicfInstMaxMemMB.setDescription('The maximum memory that can be used by Instrumentation, in megabytes.')
hpicfInstParameterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3), )
if mibBuilder.loadTexts: hpicfInstParameterTable.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParameterTable.setDescription('Values of monitored instrumentation parameters.')
hpicfInstParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1), ).setIndexNames((0, "HP-ICF-INST-MIB", "hpicfInstParameterIndex"), (0, "HP-ICF-INST-MIB", "hpicfInstInterfaceIndex"), (0, "HP-ICF-INST-MIB", "hpicfInstIntervalIndex"))
if mibBuilder.loadTexts: hpicfInstParameterEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParameterEntry.setDescription('An entry in the hpicfInstParameterTable.')
hpicfInstParameterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfInstParameterIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParameterIndex.setDescription('The index of the parameter.')
hpicfInstInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfInstInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfInstInterfaceIndex.setDescription('Interface index i.e. port number for per port parameters and 0 for global parameters.')
hpicfInstIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfInstIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfInstIntervalIndex.setDescription('The index of the interval.')
hpicfInstParameterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInstParameterName.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParameterName.setDescription('The name of the parameter.')
hpicfInstIntervalName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInstIntervalName.setStatus('current')
if mibBuilder.loadTexts: hpicfInstIntervalName.setDescription('The name of the interval.')
hpicfInstParameterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInstParameterValue.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParameterValue.setDescription('The current parameter value for the given interface and interval.')
hpicfInstParamValMin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInstParamValMin.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParamValMin.setDescription('The minimum value of the parameter for the given interface and interval.')
hpicfInstParamValMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInstParamValMax.setStatus('current')
if mibBuilder.loadTexts: hpicfInstParamValMax.setDescription('The maximum value of the parameter for the given interface and interval.')
hpicfInstBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 2, 1, 2)).setObjects(("HP-ICF-INST-MIB", "hpicfInstEnable"), ("HP-ICF-INST-MIB", "hpicfInstMaxMemMB"), ("HP-ICF-INST-MIB", "hpicfInstParameterName"), ("HP-ICF-INST-MIB", "hpicfInstIntervalName"), ("HP-ICF-INST-MIB", "hpicfInstParameterValue"), ("HP-ICF-INST-MIB", "hpicfInstParamValMin"), ("HP-ICF-INST-MIB", "hpicfInstParamValMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInstBaseGroup = hpicfInstBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfInstBaseGroup.setDescription('A collection of objects to support basic Instrumentation configuration on HP switches.')
hpicfInstBaseCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 45, 2, 2, 1)).setObjects(("HP-ICF-INST-MIB", "hpicfInstBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInstBaseCompliance = hpicfInstBaseCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfInstBaseCompliance.setDescription('The compliance statement for HP switches running Instrumentation and implementing the HP-ICF-INST MIB.')
mibBuilder.exportSymbols("HP-ICF-INST-MIB", hpicfInstIntervalIndex=hpicfInstIntervalIndex, hpicfInstEnable=hpicfInstEnable, hpicfInstBaseGroup=hpicfInstBaseGroup, hpicfInstCompliances=hpicfInstCompliances, hpicfInstParameterEntry=hpicfInstParameterEntry, hpicfInstConformance=hpicfInstConformance, hpicfInstParameterName=hpicfInstParameterName, hpicfInstBaseCompliance=hpicfInstBaseCompliance, hpicfInstInterfaceIndex=hpicfInstInterfaceIndex, hpicfInstParamValMax=hpicfInstParamValMax, hpicfInstParameterTable=hpicfInstParameterTable, hpicfInstGroups=hpicfInstGroups, hpicfInstObjects=hpicfInstObjects, hpicfInstMaxMemMB=hpicfInstMaxMemMB, hpicfInstParameterValue=hpicfInstParameterValue, hpicfInstIntervalName=hpicfInstIntervalName, PYSNMP_MODULE_ID=hpicfInstMIB, hpicfInstMIB=hpicfInstMIB, hpicfInstParamValMin=hpicfInstParamValMin, hpicfInstParameterIndex=hpicfInstParameterIndex)
