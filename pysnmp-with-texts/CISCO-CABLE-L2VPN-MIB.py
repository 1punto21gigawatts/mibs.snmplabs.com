#
# PySNMP MIB module CISCO-CABLE-L2VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CABLE-L2VPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
CpwVcIDType, CpwVcType = mibBuilder.importSymbols("CISCO-IETF-PW-TC-MIB", "CpwVcIDType", "CpwVcType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Gauge32, Counter32, MibIdentifier, TimeTicks, ModuleIdentity, Integer32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Counter32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Integer32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "ObjectIdentity", "Unsigned32")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
ciscoCableL2vpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 700))
ciscoCableL2vpnMIB.setRevisions(('2009-06-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCableL2vpnMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCableL2vpnMIB.setLastUpdated('200906170000Z')
if mibBuilder.loadTexts: ciscoCableL2vpnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCableL2vpnMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ubr@cisco.com')
if mibBuilder.loadTexts: ciscoCableL2vpnMIB.setDescription('This MIB module defines managed objects that facilitate the management of Cisco devices complying to the DOCSIS L2VPN Feature for IP/MPLS pseudo-wire. The Cisco CMTS implementation of IP/MPLS pseudo-wire is based on DOCSIS BSOD L2VPN specification. The information available through this MIB includes: Mapping information between various configuration of the pseudo-wire pertaining to DOCSIS BSOD L2VPN. The MIB tables implemented give quick access to information using either Cable Modem MAC address/VPN, peer IP address/VCID or L2vpnIndex as index in tables. Glossary: CMTS - Cable Modem Termination System VCID - Virtual Circuit Identifier MPLS - Multi-Protocol Label Switching AToM - Any Transport Over MPLS DOCSIS - Data over Cable Service Interface Specification BSOD - Business Services over DOCSIS L2VPN - Layer 2 Virtual Private Network pseudo-wire - Layer 2 connection over IP/MPLS backbone')
class CiscoCableL2vpnIndex(TextualConvention, Unsigned32):
    description = 'An integer value locally generated by the CMTS for each known pseudo-wire. It is intended to be used as a short index for tables in this MIB module. This index is allocated at runtime from a pool of indices for each pseudo-wire and is unique to that pseudo-wire only between every creation and deletion of that pseudo-wire.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

ciscoCableL2vpnMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 700, 0))
ciscoCableL2vpnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 700, 1))
ciscoCableL2vpnMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 700, 2))
ccl2vpnMacVpnIdL2vpnIndexTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 1), )
if mibBuilder.loadTexts: ccl2vpnMacVpnIdL2vpnIndexTable.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnMacVpnIdL2vpnIndexTable.setDescription('Every L2VPN provisioned Cable Modem can be a part of multiple VPNs and the CMTS assigns a L2vpnIndex for each {Cable Modem MAC address, VPN-id} pair. This table maps {Cable Modem MAC address, VPN-id} to the L2vpnIndex.')
ccl2vpnMacVpnIdL2vpnIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 1, 1), ).setIndexNames((0, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnMac"), (1, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnVpnId"))
if mibBuilder.loadTexts: ccl2vpnMacVpnIdL2vpnIndexEntry.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnMacVpnIdL2vpnIndexEntry.setDescription('Each row contains the Cable Modem MAC address and VPN identifier and the corresponding L2vpnIndex. Entry in this table is populated for each one of the pseudo-wire provisioned on the CMTS.')
ccl2vpnMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ccl2vpnMac.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnMac.setDescription('This object identifies the Cable Modem MAC address.')
ccl2vpnVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: ccl2vpnVpnId.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnVpnId.setDescription('This object identifies the VPN provisioned for L2VPN Cable Modem.')
ccl2vpnMacVpnIdToL2vpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 1, 1, 3), CiscoCableL2vpnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnMacVpnIdToL2vpnIndex.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnMacVpnIdToL2vpnIndex.setDescription('This object identifies the L2vpnIndex assigned for this Cable Modem MAC Address/VPN pair by the CMTS.')
ccl2vpnPWL2vpnIndexTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2), )
if mibBuilder.loadTexts: ccl2vpnPWL2vpnIndexTable.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWL2vpnIndexTable.setDescription('Every L2VPN Cable Modem can be provisioned with multiple VPNs and for each {Cable Modem MAC address, VPN-id} pair, there is a IP/MPLS pseudo-wire established. The pseudo-wire is specified by {peer IP address, VCID}. This table maps {peer IP address, VCID} to the L2vpnIndex.')
ccl2vpnPWL2vpnIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2, 1), ).setIndexNames((0, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnPseudoWireType"), (0, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnPeerIPAddressType"), (0, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnPeerIPAddress"), (0, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnVCID"))
if mibBuilder.loadTexts: ccl2vpnPWL2vpnIndexEntry.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWL2vpnIndexEntry.setDescription('Each row contains the pseudo-wire peer IP address and Virtual Circuit Identifier (VCID) and the corresponding L2vpnIndex. Entry in this table is populated for each one of the pseudo-wire provisioned on the CMTS.')
ccl2vpnPseudoWireType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2, 1, 1), CpwVcType())
if mibBuilder.loadTexts: ccl2vpnPseudoWireType.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPseudoWireType.setDescription('This object identifies the pseudo-wire type.')
ccl2vpnPeerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccl2vpnPeerIPAddressType.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPeerIPAddressType.setDescription('This object identifies the pseudo-wire peer IP address type provisioned for L2VPN.')
ccl2vpnPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccl2vpnPeerIPAddress.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPeerIPAddress.setDescription('This object identifies the pseudo-wire peer IP address provisioned for L2VPN. The type of this address is determined by the value of ccl2vpnPeerIPAddressType object.')
ccl2vpnVCID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2, 1, 4), CpwVcIDType())
if mibBuilder.loadTexts: ccl2vpnVCID.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnVCID.setDescription('This object identifies the Virtual Circuit Identifier (VCID) of the pseudo-wire.')
ccl2vpnPWToL2vpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 2, 1, 5), CiscoCableL2vpnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWToL2vpnIndex.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWToL2vpnIndex.setDescription('This object identifies the L2vpnIndex assigned by CMTS for this pseudo-wire peer IP address/VCID pair and for this Cable Modem MAC Address/VPN.')
ccl2vpnL2vpnIndexPWTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3), )
if mibBuilder.loadTexts: ccl2vpnL2vpnIndexPWTable.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnL2vpnIndexPWTable.setDescription('For every VPN provisioned for the L2VPN Cable Modem, the CMTS establishes pseudo-wire. This table maps L2vpnIndex to pseudo-wire configuration parameters.')
ccl2vpnL2vpnIndexPWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1), ).setIndexNames((0, "CISCO-CABLE-L2VPN-MIB", "ccl2vpnL2vpnIndex"))
if mibBuilder.loadTexts: ccl2vpnL2vpnIndexPWEntry.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnL2vpnIndexPWEntry.setDescription('Each row contains the L2vpnIndex for the pseudo-wire and the corresponding configuration paramters including the Cable Modem MAC address, VPN identifier, peer IP address, Virtual Circuit Identifier (VCID) and pseudo-wire type. Entry in this table is populated for each one of the pseudo-wire provisioned on the CMTS.')
ccl2vpnL2vpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 1), CiscoCableL2vpnIndex())
if mibBuilder.loadTexts: ccl2vpnL2vpnIndex.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnL2vpnIndex.setDescription('This object identifies the L2vpnIndex assigned for this Cable Modem MAC Address/VPN pair by the CMTS.')
ccl2vpnPWMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWMAC.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWMAC.setDescription('This object identifies the Cable Modem MAC address.')
ccl2vpnPWVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWVpnId.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWVpnId.setDescription('This object identifies the VPN Identifier provisioned for L2VPN Cable Modem.')
ccl2vpnPWPeerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWPeerIPAddressType.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWPeerIPAddressType.setDescription('This object identifies the pseudo-wire peer IP address type.')
ccl2vpnPWPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWPeerIPAddress.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWPeerIPAddress.setDescription('This object identifies the pseudo-wire peer IP address. The type of this address is determined by the value of ccl2vpnPWPeerIPAddressType object.')
ccl2vpnPWType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 6), CpwVcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWType.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWType.setDescription('This object identifies the pseudo-wire type.')
ccl2vpnPWVCID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 700, 1, 3, 1, 7), CpwVcIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccl2vpnPWVCID.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWVCID.setDescription('This object identifies the Virtual Circuit Identifier (VCID) for pseudo-wire.')
ccl2vpnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 700, 2, 1))
ccl2vpnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 700, 2, 2))
ccl2vpnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 700, 2, 1, 1)).setObjects(("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccl2vpnMIBCompliance = ccl2vpnMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnMIBCompliance.setDescription('The compliance statement for the CISCO-CABLE-L2VPN-MIB.')
ccl2vpnPWMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 700, 2, 2, 1)).setObjects(("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWMAC"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWVpnId"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWPeerIPAddressType"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWPeerIPAddress"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWType"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWVCID"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnMacVpnIdToL2vpnIndex"), ("CISCO-CABLE-L2VPN-MIB", "ccl2vpnPWToL2vpnIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccl2vpnPWMappingGroup = ccl2vpnPWMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ccl2vpnPWMappingGroup.setDescription('A collection of objects providing Cable L2VPN pseudo-wire configuration.')
mibBuilder.exportSymbols("CISCO-CABLE-L2VPN-MIB", ciscoCableL2vpnMIBConform=ciscoCableL2vpnMIBConform, ccl2vpnL2vpnIndexPWTable=ccl2vpnL2vpnIndexPWTable, ccl2vpnVpnId=ccl2vpnVpnId, ccl2vpnPWPeerIPAddressType=ccl2vpnPWPeerIPAddressType, ccl2vpnMIBCompliances=ccl2vpnMIBCompliances, ccl2vpnL2vpnIndexPWEntry=ccl2vpnL2vpnIndexPWEntry, ccl2vpnPWPeerIPAddress=ccl2vpnPWPeerIPAddress, ccl2vpnPWVCID=ccl2vpnPWVCID, ciscoCableL2vpnMIB=ciscoCableL2vpnMIB, ccl2vpnMacVpnIdL2vpnIndexTable=ccl2vpnMacVpnIdL2vpnIndexTable, ccl2vpnVCID=ccl2vpnVCID, ccl2vpnPeerIPAddressType=ccl2vpnPeerIPAddressType, ccl2vpnPWToL2vpnIndex=ccl2vpnPWToL2vpnIndex, ccl2vpnMIBGroups=ccl2vpnMIBGroups, PYSNMP_MODULE_ID=ciscoCableL2vpnMIB, ccl2vpnPWMAC=ccl2vpnPWMAC, ccl2vpnPWVpnId=ccl2vpnPWVpnId, ccl2vpnPWType=ccl2vpnPWType, CiscoCableL2vpnIndex=CiscoCableL2vpnIndex, ccl2vpnMac=ccl2vpnMac, ciscoCableL2vpnMIBNotifs=ciscoCableL2vpnMIBNotifs, ccl2vpnMacVpnIdL2vpnIndexEntry=ccl2vpnMacVpnIdL2vpnIndexEntry, ccl2vpnPWMappingGroup=ccl2vpnPWMappingGroup, ccl2vpnMacVpnIdToL2vpnIndex=ccl2vpnMacVpnIdToL2vpnIndex, ccl2vpnPseudoWireType=ccl2vpnPseudoWireType, ccl2vpnPWL2vpnIndexTable=ccl2vpnPWL2vpnIndexTable, ccl2vpnMIBCompliance=ccl2vpnMIBCompliance, ccl2vpnPeerIPAddress=ccl2vpnPeerIPAddress, ciscoCableL2vpnMIBObjects=ciscoCableL2vpnMIBObjects, ccl2vpnL2vpnIndex=ccl2vpnL2vpnIndex, ccl2vpnPWL2vpnIndexEntry=ccl2vpnPWL2vpnIndexEntry)
