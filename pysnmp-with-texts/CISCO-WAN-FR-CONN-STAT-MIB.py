#
# PySNMP MIB module CISCO-WAN-FR-CONN-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-FR-CONN-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
frChan, = mibBuilder.importSymbols("BASIS-MIB", "frChan")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, TimeTicks, MibIdentifier, Integer32, NotificationType, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, ModuleIdentity, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Integer32", "NotificationType", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "ModuleIdentity", "Counter32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanFrConnStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 48))
ciscoWanFrConnStatMIB.setRevisions(('2002-10-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanFrConnStatMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB.',))
if mibBuilder.loadTexts: ciscoWanFrConnStatMIB.setLastUpdated('200210180000Z')
if mibBuilder.loadTexts: ciscoWanFrConnStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanFrConnStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanFrConnStatMIB.setDescription("The MIB module for frame relay connection statistics. Terminologies Used: SIW - Frame-Relay-to ATM Service Interworking FECN - Forward Explicit Congestion Notification. The FECN bit in Frame Relay header communicate network congestion to the endpoint in the forward direction. BECN - Backward Explicit Congestion Notification. The BECN bit in Frame Relay header communicate network congestion to the endpoint in the backward direction. DE - Discard Eligibility. The DE bit in Frame Relay header communicates the loss priority. A marked frame with a DE bit value of 1 is considered less important than other frames in transmission and should be discarded before frames with a DE bit value of zero. Tagged - Some of the statistics objects described in this MIB are applicable where the information is Set by the Switch/Service-Module. These objects contain word 'Tagged' in the name. For example : 'rcvFramesTaggedFECN'; This is the counter where FECN is set by the Switch in the frame received from the network. FECN was not set in the frame from the Network. The bit Set by the switch on an incoming or outgoing frame is called 'tagged' in this mib.")
frChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3))
frChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: frChanCntGrpTable.setStatus('current')
if mibBuilder.loadTexts: frChanCntGrpTable.setDescription('This table contains information on statistics for Frame Relay Connections.')
frChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-CONN-STAT-MIB", "cntChanNum"))
if mibBuilder.loadTexts: frChanCntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frChanCntGrpEntry.setDescription('Each entry in this table describes the statistical information for Frame Relay connections.')
cntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntChanNum.setReference('chanNum object in CISCO-WAN-FR-CONN-MIB.')
if mibBuilder.loadTexts: cntChanNum.setStatus('current')
if mibBuilder.loadTexts: cntChanNum.setDescription("The value of this object refers to refers to the virtual connection/channel index. The value for this object must be same as the value of 'chanNum' from frChanCnfGrpTable.")
rcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 2), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFrames.setStatus('current')
if mibBuilder.loadTexts: rcvFrames.setDescription('The number of frames Received by the network (ingress) for this PVC end-point.')
rcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 3), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytes.setStatus('current')
if mibBuilder.loadTexts: rcvBytes.setDescription('The number of bytes Received by the network (ingress) for this PVC end-point.')
rcvFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 4), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDE.setStatus('current')
if mibBuilder.loadTexts: rcvFramesDE.setDescription('The number of frames received by the network(ingress) with the DE bit set to (1) for this frame relay connection.')
rcvBytesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 5), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDE.setStatus('current')
if mibBuilder.loadTexts: rcvBytesDE.setDescription('The number of frames received by the network(ingress) with the DE bit set to (1) for this frame relay connection.')
rcvFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 6), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscard.setStatus('current')
if mibBuilder.loadTexts: rcvFramesDiscard.setDescription('The number of frames received by the network(ingress) that were discarded due to traffic enforcement for this frame relay connection.')
rcvBytesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 7), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDiscard.setStatus('current')
if mibBuilder.loadTexts: rcvBytesDiscard.setDescription('The number of bytes received by the network(ingress) that were discarded due to traffic enforcement for this frame relay connection.')
rcvFramesDiscShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 8), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscShelfAlarm.setStatus('current')
if mibBuilder.loadTexts: rcvFramesDiscShelfAlarm.setDescription('The number of frames discarded on the ingress due to shelf alarm For FRSM12 Card: Not Supported.')
rcvFramesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 9), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscXceedQDepth.setStatus('current')
if mibBuilder.loadTexts: rcvFramesDiscXceedQDepth.setDescription('The number of frames discarded on the ingress due to exceeded queue depth.')
rcvBytesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 10), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDiscXceedQDepth.setStatus('current')
if mibBuilder.loadTexts: rcvBytesDiscXceedQDepth.setDescription('The number of bytes discarded on the ingress due to exceeded queue depth.')
rcvFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 11), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscXceedDEThresh.setStatus('current')
if mibBuilder.loadTexts: rcvFramesDiscXceedDEThresh.setDescription('The number of frames discarded on the ingress due to exceeded DE Threshold.')
rcvFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 12), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesFECN.setStatus('current')
if mibBuilder.loadTexts: rcvFramesFECN.setDescription('The number of frames received by the network(ingress) that have the FECN bit set for this frame relay connection.')
rcvFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 13), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesBECN.setStatus('current')
if mibBuilder.loadTexts: rcvFramesBECN.setDescription('The number of frames received by the network(ingress) that have the BECN bit set for this frame relay connection.')
rcvFramesTaggedFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 14), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesTaggedFECN.setStatus('current')
if mibBuilder.loadTexts: rcvFramesTaggedFECN.setDescription('The number of frames received for which the the switch set(tagged) the FECN bit.')
rcvFramesTaggedBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 15), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesTaggedBECN.setStatus('current')
if mibBuilder.loadTexts: rcvFramesTaggedBECN.setDescription('The number of frames received for which the switch set(tagged) the BECN bit.')
rcvFramesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 16), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesTaggedDE.setStatus('current')
if mibBuilder.loadTexts: rcvFramesTaggedDE.setDescription('The number of frames received for which the switch set(tagged) the DE bit.')
rcvBytesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 17), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesTaggedDE.setStatus('current')
if mibBuilder.loadTexts: rcvBytesTaggedDE.setDescription('The number of bytes received for which the switch set the DE bit.')
rcvKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 18), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvKbpsAIR.setStatus('current')
if mibBuilder.loadTexts: rcvKbpsAIR.setDescription('Received Average Information Rate in KBPS.')
xmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 19), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFrames.setStatus('current')
if mibBuilder.loadTexts: xmtFrames.setDescription('The number of frames sent by the network(egress).')
xmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 20), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytes.setStatus('current')
if mibBuilder.loadTexts: xmtBytes.setDescription('The number of bytes sent by the network(egress).')
xmtFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 21), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesFECN.setStatus('current')
if mibBuilder.loadTexts: xmtFramesFECN.setDescription('The number of frames sent by the network(egress) that have the FECN bit set for this frame relay connection.')
xmtFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 22), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesBECN.setStatus('current')
if mibBuilder.loadTexts: xmtFramesBECN.setDescription('The number of frames sent by the network(egress) that have the BECN bit set for this frame relay connection.')
xmtFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 23), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDE.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDE.setDescription('The number of frames sent by the network(egress) with the DE bit set to (1) for this frame relay connection.')
xmtBytesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 24), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDE.setStatus('current')
if mibBuilder.loadTexts: xmtBytesDE.setDescription('The number of frames sent by the network(egress) with the DE bit set to (1) for this frame relay connection.')
xmtFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 25), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscard.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscard.setDescription('The number of frames sent by the network(egress) that were discarded due to traffic enforcement for this frame relay connection.')
xmtBytesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 26), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDiscard.setStatus('current')
if mibBuilder.loadTexts: xmtBytesDiscard.setDescription('The number of bytes discarded on the egress For FRSM12 Card: Not Supported ')
xmtFramesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 27), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscXceedQDepth.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscXceedQDepth.setDescription('The number of frames discarded on the egress due to exceeded queue depth For FRSM12 Card: Not Supported.')
xmtBytesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 28), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDiscXceedQDepth.setStatus('current')
if mibBuilder.loadTexts: xmtBytesDiscXceedQDepth.setDescription('The number of bytes discarded on the egress due to exceeded queue depth For FRSM12 Card: Not Supported.')
xmtFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 29), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscXceedDEThresh.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscXceedDEThresh.setDescription('The number of frames discarded on the egress due to exceeded DE Threshold For FRSM12 Card: Not Supported ')
xmtFramesDiscPhyLayerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 30), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscPhyLayerFail.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscPhyLayerFail.setDescription('The number of frames discarded on the egress due to physical layer failure.')
xmtFramesDiscCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 31), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscCRCError.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscCRCError.setDescription('The number of frames discarded on the egress due to CRC Error.')
xmtFramesDiscReassmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscReassmFail.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscReassmFail.setDescription('The number of frames discarded on the egress due to reassembly failure For FRSM12 Card: Not Supported.')
xmtFramesDiscSrcAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscSrcAbort.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDiscSrcAbort.setDescription('The number of frames discarded on the egress due to source abort.')
xmtFramesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDuringLMIAlarm.setStatus('current')
if mibBuilder.loadTexts: xmtFramesDuringLMIAlarm.setDescription('The number of frames transmitted during LMI logical port alarm ')
xmtBytesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDuringLMIAlarm.setStatus('current')
if mibBuilder.loadTexts: xmtBytesDuringLMIAlarm.setDescription('The number of bytes transmitted during LMI logical port alarm.')
xmtFramesTaggedFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesTaggedFECN.setStatus('current')
if mibBuilder.loadTexts: xmtFramesTaggedFECN.setDescription('The number of frames transmitted for which the switch set the FECN bit.')
xmtFramesTaggedBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 37), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesTaggedBECN.setStatus('current')
if mibBuilder.loadTexts: xmtFramesTaggedBECN.setDescription('The number of frames transmitted for which the switch set the BECN bit.')
xmtKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 38), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtKbpsAIR.setStatus('current')
if mibBuilder.loadTexts: xmtKbpsAIR.setDescription('Transmitted Average Information Rate in KBPS.')
chanClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanClrButton.setStatus('current')
if mibBuilder.loadTexts: chanClrButton.setDescription('Channel clear button. Clears Channel Counters.')
xmtFramesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 40), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesTaggedDE.setStatus('current')
if mibBuilder.loadTexts: xmtFramesTaggedDE.setDescription('The number of frames transmitted which have been DE tagged at the far end ingress in excess of CIR.')
xmtBytesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 41), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesTaggedDE.setStatus('current')
if mibBuilder.loadTexts: xmtBytesTaggedDE.setDescription('The number of bytes transmitted which have been DE tagged at the far end ingress in excess of CIR.')
rcvFramesDiscUPC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 42), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscUPC.setStatus('current')
if mibBuilder.loadTexts: rcvFramesDiscUPC.setDescription('The number of frames discarded at ingress due to the UPC measurement in excess of CIR+EIR.')
chanSecUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 43), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: chanSecUpTime.setStatus('current')
if mibBuilder.loadTexts: chanSecUpTime.setDescription('The time in seconds the PVC stay in service.')
xmtFramesInvalidCPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 44), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesInvalidCPIs.setStatus('current')
if mibBuilder.loadTexts: xmtFramesInvalidCPIs.setDescription('Number of frames transmitted with invalid CPI header. currently valid is 0.')
xmtFramesLengthViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 45), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesLengthViolations.setStatus('current')
if mibBuilder.loadTexts: xmtFramesLengthViolations.setDescription('The number of frames discarded due to violation of length in the egress direction.')
xmtFramesOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 46), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesOversizedSDUs.setStatus('current')
if mibBuilder.loadTexts: xmtFramesOversizedSDUs.setDescription('The number of frames discarded because the size is beyond the max in the egress direction.')
xmtFramesUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesUnknownProtocols.setStatus('current')
if mibBuilder.loadTexts: xmtFramesUnknownProtocols.setDescription('The number of frames discarded for Unknown protocol in the egress direction. Used only in SIW for PDUs that are dropped.')
rcvFramesUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 48), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesUnknownProtocols.setStatus('current')
if mibBuilder.loadTexts: rcvFramesUnknownProtocols.setDescription('Number of frames discarded for Unknown protocol in the ingress direction. Used only in SIW for PDUs that are dropped.')
xmtBytesDEDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 49), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDEDiscard.setStatus('current')
if mibBuilder.loadTexts: xmtBytesDEDiscard.setDescription('Number of bytes discarded in the egress direction by the channel due to exceeded DE Threshold.')
rcvBytesDEDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 50), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDEDiscard.setStatus('current')
if mibBuilder.loadTexts: rcvBytesDEDiscard.setDescription('Number of bytes discarded in the ingress direction by the channel due to exceeded DE Threshold.')
frstdABRCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2), )
if mibBuilder.loadTexts: frstdABRCntGrpTable.setStatus('current')
if mibBuilder.loadTexts: frstdABRCntGrpTable.setDescription('This table contains information on statistics for Frame Relay Connections. This is applicable for ABR Frame Relay connections only.')
frstdABRCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1), ).setIndexNames((0, "CISCO-WAN-FR-CONN-STAT-MIB", "frstdABRcntChanNum"))
if mibBuilder.loadTexts: frstdABRCntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frstdABRCntGrpEntry.setDescription('Each entry in this table describes the statistical information for Frame Relay connections.')
frstdABRcntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frstdABRcntChanNum.setReference('chanNum object in CISCO-WAN-FR-CONN-MIB.')
if mibBuilder.loadTexts: frstdABRcntChanNum.setStatus('current')
if mibBuilder.loadTexts: frstdABRcntChanNum.setDescription("The value of this object refers to the frame relay connection/channel index. The value for this object must be same as the value of object 'chanNum' from frChanCnfGrpTable.")
frChanFrmXmtToNetworkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanFrmXmtToNetworkCnt.setStatus('current')
if mibBuilder.loadTexts: frChanFrmXmtToNetworkCnt.setDescription('The total number of Forward RM cells transmitted to the network.')
frChanBrmXmtToNetworkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanBrmXmtToNetworkCnt.setStatus('current')
if mibBuilder.loadTexts: frChanBrmXmtToNetworkCnt.setDescription('The total number of Backward RM cells transmitted to the network.')
frChanCrcErrRmRcvFromNetworkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanCrcErrRmRcvFromNetworkCnt.setStatus('current')
if mibBuilder.loadTexts: frChanCrcErrRmRcvFromNetworkCnt.setDescription('The number of RM cells received from the network with incorrect CRC-10.')
frChanFrmRcvFromNetworkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanFrmRcvFromNetworkCnt.setStatus('current')
if mibBuilder.loadTexts: frChanFrmRcvFromNetworkCnt.setDescription('The number of Forward RM cells received from the network.')
frChanBrmRcvFromNetworkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanBrmRcvFromNetworkCnt.setStatus('current')
if mibBuilder.loadTexts: frChanBrmRcvFromNetworkCnt.setDescription('The number of Backward RM cells received from the network.')
frChanFrmNotTurnedAroundCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanFrmNotTurnedAroundCnt.setStatus('current')
if mibBuilder.loadTexts: frChanFrmNotTurnedAroundCnt.setDescription('The number of Forward RM cells received from the network and not turned around.')
cwfConnStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 48, 2))
cwfConnStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 48, 2, 1))
cwfConnStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 48, 2, 2))
ciscoWanFrConnStatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 48, 2, 2, 1)).setObjects(("CISCO-WAN-FR-CONN-STAT-MIB", "ciscoWanFrConnStatsGroup"), ("CISCO-WAN-FR-CONN-STAT-MIB", "ciscoWanFrConnABRStatsGroup"), ("CISCO-WAN-FR-CONN-STAT-MIB", "ciscoWanFrConnQueueStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrConnStatCompliance = ciscoWanFrConnStatCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrConnStatCompliance.setDescription('The compliance statement for Frame Relay Connection Statstics MIB.')
ciscoWanFrConnStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 48, 2, 1, 1)).setObjects(("CISCO-WAN-FR-CONN-STAT-MIB", "cntChanNum"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFrames"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvBytes"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvBytesDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesDiscard"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvBytesDiscard"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesDiscShelfAlarm"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesFECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesBECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesTaggedFECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesTaggedBECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesTaggedDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvBytesTaggedDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvKbpsAIR"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFrames"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytes"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesFECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesBECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytesDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscard"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytesDiscard"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscPhyLayerFail"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscCRCError"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscReassmFail"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscSrcAbort"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDuringLMIAlarm"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytesDuringLMIAlarm"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesTaggedFECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesTaggedBECN"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtKbpsAIR"), ("CISCO-WAN-FR-CONN-STAT-MIB", "chanClrButton"), ("CISCO-WAN-FR-CONN-STAT-MIB", "chanSecUpTime"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesDiscUPC"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytesTaggedDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesTaggedDE"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesInvalidCPIs"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesLengthViolations"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesOversizedSDUs"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesUnknownProtocols"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesUnknownProtocols"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytesDEDiscard"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvBytesDEDiscard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrConnStatsGroup = ciscoWanFrConnStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrConnStatsGroup.setDescription('The objects related to Frame Relay connection statistics.')
ciscoWanFrConnQueueStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 48, 2, 1, 2)).setObjects(("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesDiscXceedQDepth"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvBytesDiscXceedQDepth"), ("CISCO-WAN-FR-CONN-STAT-MIB", "rcvFramesDiscXceedDEThresh"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscXceedQDepth"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtBytesDiscXceedQDepth"), ("CISCO-WAN-FR-CONN-STAT-MIB", "xmtFramesDiscXceedDEThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrConnQueueStatsGroup = ciscoWanFrConnQueueStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrConnQueueStatsGroup.setDescription('The objects related to Queue depth and threshold related statistics for Frame Relay connections.')
ciscoWanFrConnABRStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 48, 2, 1, 3)).setObjects(("CISCO-WAN-FR-CONN-STAT-MIB", "frstdABRcntChanNum"), ("CISCO-WAN-FR-CONN-STAT-MIB", "frChanFrmXmtToNetworkCnt"), ("CISCO-WAN-FR-CONN-STAT-MIB", "frChanBrmXmtToNetworkCnt"), ("CISCO-WAN-FR-CONN-STAT-MIB", "frChanCrcErrRmRcvFromNetworkCnt"), ("CISCO-WAN-FR-CONN-STAT-MIB", "frChanFrmRcvFromNetworkCnt"), ("CISCO-WAN-FR-CONN-STAT-MIB", "frChanBrmRcvFromNetworkCnt"), ("CISCO-WAN-FR-CONN-STAT-MIB", "frChanFrmNotTurnedAroundCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrConnABRStatsGroup = ciscoWanFrConnABRStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrConnABRStatsGroup.setDescription('The objects related to ABR statistics on frame relay connections.')
mibBuilder.exportSymbols("CISCO-WAN-FR-CONN-STAT-MIB", rcvFramesDiscard=rcvFramesDiscard, frChanCntGrpTable=frChanCntGrpTable, cntChanNum=cntChanNum, rcvFramesDiscShelfAlarm=rcvFramesDiscShelfAlarm, xmtFramesDiscard=xmtFramesDiscard, frChanFrmXmtToNetworkCnt=frChanFrmXmtToNetworkCnt, frChanBrmRcvFromNetworkCnt=frChanBrmRcvFromNetworkCnt, xmtBytesDE=xmtBytesDE, chanSecUpTime=chanSecUpTime, ciscoWanFrConnABRStatsGroup=ciscoWanFrConnABRStatsGroup, frstdABRCntGrpEntry=frstdABRCntGrpEntry, chanClrButton=chanClrButton, frChanCntGrp=frChanCntGrp, cwfConnStatMIBConformance=cwfConnStatMIBConformance, ciscoWanFrConnStatMIB=ciscoWanFrConnStatMIB, ciscoWanFrConnQueueStatsGroup=ciscoWanFrConnQueueStatsGroup, rcvBytesTaggedDE=rcvBytesTaggedDE, frChanFrmRcvFromNetworkCnt=frChanFrmRcvFromNetworkCnt, frstdABRcntChanNum=frstdABRcntChanNum, xmtFramesDiscCRCError=xmtFramesDiscCRCError, rcvFramesTaggedBECN=rcvFramesTaggedBECN, frstdABRCntGrpTable=frstdABRCntGrpTable, rcvKbpsAIR=rcvKbpsAIR, xmtFramesDE=xmtFramesDE, rcvFramesTaggedDE=rcvFramesTaggedDE, rcvFramesDiscXceedDEThresh=rcvFramesDiscXceedDEThresh, xmtFramesTaggedFECN=xmtFramesTaggedFECN, xmtFramesTaggedBECN=xmtFramesTaggedBECN, frChanBrmXmtToNetworkCnt=frChanBrmXmtToNetworkCnt, xmtFramesDiscPhyLayerFail=xmtFramesDiscPhyLayerFail, PYSNMP_MODULE_ID=ciscoWanFrConnStatMIB, rcvBytesDE=rcvBytesDE, rcvFramesTaggedFECN=rcvFramesTaggedFECN, rcvFramesFECN=rcvFramesFECN, rcvFramesBECN=rcvFramesBECN, xmtFramesDiscXceedDEThresh=xmtFramesDiscXceedDEThresh, xmtFramesDiscSrcAbort=xmtFramesDiscSrcAbort, frChanCrcErrRmRcvFromNetworkCnt=frChanCrcErrRmRcvFromNetworkCnt, rcvFramesDE=rcvFramesDE, ciscoWanFrConnStatCompliance=ciscoWanFrConnStatCompliance, rcvBytes=rcvBytes, cwfConnStatMIBGroups=cwfConnStatMIBGroups, frChanFrmNotTurnedAroundCnt=frChanFrmNotTurnedAroundCnt, rcvBytesDEDiscard=rcvBytesDEDiscard, xmtFramesDiscReassmFail=xmtFramesDiscReassmFail, xmtFramesUnknownProtocols=xmtFramesUnknownProtocols, frChanCntGrpEntry=frChanCntGrpEntry, xmtBytesDiscard=xmtBytesDiscard, xmtFramesDuringLMIAlarm=xmtFramesDuringLMIAlarm, rcvFramesUnknownProtocols=rcvFramesUnknownProtocols, xmtBytesTaggedDE=xmtBytesTaggedDE, xmtBytesDEDiscard=xmtBytesDEDiscard, xmtFramesFECN=xmtFramesFECN, rcvBytesDiscard=rcvBytesDiscard, xmtKbpsAIR=xmtKbpsAIR, rcvBytesDiscXceedQDepth=rcvBytesDiscXceedQDepth, xmtFramesBECN=xmtFramesBECN, xmtBytesDiscXceedQDepth=xmtBytesDiscXceedQDepth, xmtFramesTaggedDE=xmtFramesTaggedDE, xmtFrames=xmtFrames, rcvFramesDiscUPC=rcvFramesDiscUPC, xmtFramesOversizedSDUs=xmtFramesOversizedSDUs, xmtFramesDiscXceedQDepth=xmtFramesDiscXceedQDepth, cwfConnStatMIBCompliances=cwfConnStatMIBCompliances, ciscoWanFrConnStatsGroup=ciscoWanFrConnStatsGroup, xmtBytes=xmtBytes, xmtBytesDuringLMIAlarm=xmtBytesDuringLMIAlarm, xmtFramesInvalidCPIs=xmtFramesInvalidCPIs, rcvFramesDiscXceedQDepth=rcvFramesDiscXceedQDepth, rcvFrames=rcvFrames, xmtFramesLengthViolations=xmtFramesLengthViolations)
