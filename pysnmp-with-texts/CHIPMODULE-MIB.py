#
# PySNMP MIB module CHIPMODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPMODULE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, ModuleIdentity, IpAddress, Integer32, ObjectIdentity, Counter32, Gauge32, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "ModuleIdentity", "IpAddress", "Integer32", "ObjectIdentity", "Counter32", "Gauge32", "NotificationType", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
ol50nnMCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1), )
if mibBuilder.loadTexts: ol50nnMCTLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModTable.setDescription('A table that contains information about each 50nnM-CTL in the concentrator. Note, current architecture will limit the number of instances to one per concentrator.')
ol50nnMCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol50nnMCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMCTLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModEntry.setDescription('A list of information for each 50nnM-CTL module in the concentrator.')
ol50nnMCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModSlotIndex.setDescription('The slot number for this module.')
ol50nnMCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModTempStatus.setDescription('The temperature as detected by the probes on this module.')
ol51nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1), )
if mibBuilder.loadTexts: ol51nnMMGTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModTable.setDescription('A table that contains module information about each 51nnM-MGT module in the concentrator.')
ol51nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMMGTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModEntry.setDescription('A list of module information for each 51nnM-MGT module in the concentrator.')
ol51nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModSlotIndex.setDescription('The slot number of this module.')
ol51nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMMGTModMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Priority is only used when an election occurs. Mastership is not preemptive unless the reset mastership command is used.')
ol51nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModMasterStatus.setDescription('The mastership status of this agent.')
ol51nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1. Note that EMMs before v3.0 will have 00-00-00-00-00-00 as their station address.')
ol51nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2), )
if mibBuilder.loadTexts: ol51nnMMGTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortTable.setDescription('A table of information that contains port-specific information for each port on each 51nnM-MGT module.')
ol51nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMMGTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol51nnMMGTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortEntry.setDescription('A list of information about a specific port on a 51nnM-MGT module.')
ol51nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortIndex.setDescription('The port number of this port.')
ol51nnMMGTIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTIpAddress.setDescription('The IP Address associated with this port.')
ol51nnMFIBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1), )
if mibBuilder.loadTexts: ol51nnMFIBModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModTable.setDescription('A table of module-specific information for each 51nnM-FIB module in the concentrator.')
ol51nnMFIBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFIBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFIBModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModEntry.setDescription('A list of module-specific information associated with a particular 51nnM-FIB module in the concentrator.')
ol51nnMFIBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFIBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMFIBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBModLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModLLW.setDescription("The current state of this module's low light warning configuration. Enabling this feature causes the module to check for low light and to issue a warning if low light is present. Disabling low light has the advantage of faster redundancy switchover in the event of a port error.")
ol51nnMFIBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFIBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2), )
if mibBuilder.loadTexts: ol51nnMFIBPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortTable.setDescription('A table of port-specific information for each port of each 51nnM-FIB module.')
ol51nnMFIBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFIBPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFIBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFIBPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortEntry.setDescription('A list of information about a specific port on a 51nnM-FIB module.')
ol51nnMFIBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFIBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortIndex.setDescription('The port number of this port.')
ol51nnMFIBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFIBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFIBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFIBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMUTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1), )
if mibBuilder.loadTexts: ol51nnMUTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModTable.setDescription('A list of module-specific information associated with a particular 51nnM-UTP module in the concentrator.')
ol51nnMUTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMUTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMUTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModEntry.setDescription('A module entry containing objects that describe the module level for that particular module.')
ol51nnMUTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMUTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMUTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModCrossover.setDescription("The current state of this module's crossover configuration. Setting this object to uncrossed(2) allows the last port to be used to connect to another repeater. Often this feature is used to connect one 10BASE-T module to another.")
ol51nnMUTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModDipCrossover.setDescription("The crossover configuration indicated by this module's dip switches.")
ol51nnMUTPModFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModFFL.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModFFL.setDescription("The number of bits to store in the repeater's fifo buffer. See the module user's guide for more information.")
ol51nnMUTPModDipFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModDipFFL.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModDipFFL.setDescription("The fifo fill level as indicated by this module's dip switches.")
ol51nnMUTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2), )
if mibBuilder.loadTexts: ol51nnMUTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMUTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMUTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMUTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMUTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortEntry.setDescription('A port entry containing objects that describe this port.')
ol51nnMUTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMUTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortIndex.setDescription('The port number of this port.')
ol51nnMUTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMUTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMUTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMUTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMUTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortLinkInteg.setDescription("The port's link integrity configuration. Enabling link integrity configures the port to conform to the link integrity feature as specified by 10BASE-T.")
ol51nnMUTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this port's dip switches.")
ol51nnMUTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortSquelch.setDescription("The port's squelch configuration. See the module's user's guide for more information.")
ol51nnMUTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortDipSquelch.setDescription("The port's squelch configuration as indicated by this port's dip switches.")
ol51nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1), )
if mibBuilder.loadTexts: ol51nnMTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModTable.setDescription('A table of module-specific information for each 51nnM-TP module in the concentrator.')
ol51nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModEntry.setDescription('A list of module-specific information about a specific 51nnM-TP module in the concentrator.')
ol51nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPModCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModCrossover.setDescription("The current state of this module's crossover configuration. Setting this object to uncrossed(2) allows the last port to be used to connect to another repeater. Often this feature is used to connect one 10BASE-T module to another.")
ol51nnMTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModDipCrossover.setDescription("The crossover configuration indicated by this module's dip switches.")
ol51nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2), )
if mibBuilder.loadTexts: ol51nnMTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortEntry.setDescription('A port entry containing objects that describe this port.')
ol51nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortIndex.setDescription('The port number of this port.')
ol51nnMTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortLinkInteg.setDescription("The port's link integrity configuration. Enabling link integrity configures the port to conform to the link integrity feature as specified by 10BASE-T.")
ol51nnMTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this port's dip switches.")
ol51nnMTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortSquelch.setDescription("The port's squelch configuration. See the module's user's guide for more information.")
ol51nnMTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortDipSquelch.setDescription("The port's squelch configuration as indicated by this port's dip switches.")
ol51nnMBNCModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1), )
if mibBuilder.loadTexts: ol51nnMBNCModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModTable.setDescription('A list of module-specific information associated with a particular 51nnM-BNC module in the concentrator.')
ol51nnMBNCModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMBNCModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMBNCModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModEntry.setDescription('A module entry containing objects that describe the module level for that particular module.')
ol51nnMBNCModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModSlotIndex.setDescription('The slot number of this module.')
ol51nnMBNCModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMBNCPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2), )
if mibBuilder.loadTexts: ol51nnMBNCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMBNCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMBNCPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMBNCPortIndex"))
if mibBuilder.loadTexts: ol51nnMBNCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortEntry.setDescription('A port entry containing objects that describe this port.')
ol51nnMBNCPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMBNCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortIndex.setDescription('The port number of this port.')
ol51nnMBNCPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMBNCPortDipTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminated", 1), ("not-terminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipTermination.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortDipTermination.setDescription("The state of this port's termination as indicated by the port's dip switches.")
ol51nnMBNCPortDipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("grounded", 1), ("not-grounded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipGround.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortDipGround.setDescription("The state of this port's ground as indicated by the port's dip switches.")
ol51nnBEEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1), )
if mibBuilder.loadTexts: ol51nnBEEModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModTable.setDescription('A table of module-specific information for each 51nnB-EE module in the concentrator.')
ol51nnBEEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnBEEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnBEEModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModEntry.setDescription('A list of module-specific information about a specific 51nnB-EE module in the concentrator.')
ol51nnBEEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModSlotIndex.setDescription('The slot number of this module.')
ol51nnBEEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnBEEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnBEEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2), )
if mibBuilder.loadTexts: ol51nnBEEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortTable.setDescription('A table of port-specific for each port of each 51nnBEE module in the concentrator.')
ol51nnBEEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnBEEPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnBEEPortIndex"))
if mibBuilder.loadTexts: ol51nnBEEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortEntry.setDescription('A list of port-specific informatoin about a specific 51nnB-EE port in the concentrator.')
ol51nnBEEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnBEEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortIndex.setDescription('The port number for this port within this slot.')
ol51nnBEEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnBEEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnBEEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortDefNetwork.setDescription("The network for this port as specified by the OEBM's non-volatile storage.")
ol51nnRESModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1), )
if mibBuilder.loadTexts: ol51nnRESModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModTable.setDescription('A table of module-specific information for each 51nnR-ES module in the concentrator.')
ol51nnRESModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnRESModSlotIndex"))
if mibBuilder.loadTexts: ol51nnRESModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModEntry.setDescription('A list of module-specific information about a specific 51nnR-ES module in the concentrator.')
ol51nnRESModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModSlotIndex.setDescription('The slot number of this module.')
ol51nnRESModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnRESModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnRESPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2), )
if mibBuilder.loadTexts: ol51nnRESPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortTable.setDescription('A table of port-specific for each port of each 51nnR-ES module in the concentrator.')
ol51nnRESPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnRESPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnRESPortIndex"))
if mibBuilder.loadTexts: ol51nnRESPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortEntry.setDescription('A list of port-specific informatoin about a specific 51nnR-ES port in the concentrator.')
ol51nnRESPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnRESPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortIndex.setDescription('The port number for this port.')
ol51nnRESPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnRESPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnRESPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortDefNetwork.setDescription("The network for this port as specified by the OERM's non-volatile storage.")
ol51nnREEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1), )
if mibBuilder.loadTexts: ol51nnREEModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModTable.setDescription('A table of module-specific information for each 51nnR-EE module in the concentrator.')
ol51nnREEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnREEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnREEModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModEntry.setDescription('A list of module-specific information about a specific 51nnR-EE module in the concentrator.')
ol51nnREEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModSlotIndex.setDescription('The slot number of this module.')
ol51nnREEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnREEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnREEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2), )
if mibBuilder.loadTexts: ol51nnREEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortTable.setDescription('A table of port-specific for each port of each 51nnR-EE module in the concentrator.')
ol51nnREEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnREEPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnREEPortIndex"))
if mibBuilder.loadTexts: ol51nnREEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortEntry.setDescription('A list of port-specific informatoin about a specific 51nnR-EE port in the concentrator.')
ol51nnREEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnREEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortIndex.setDescription('The port number of this port.')
ol51nnREEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnREEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnREEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortDefNetwork.setDescription("The network for this port as specified by the OERM's non-volatile storage.")
ol51nnMAUIFModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1), )
if mibBuilder.loadTexts: ol51nnMAUIFModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFModTable.setDescription('A list of module-specific information associated with a particular 51nnMAUIF module in the concentrator.')
ol51nnMAUIFModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIFModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFModEntry.setDescription('A list of module-specific information about a specific 51nnMAUIF module in the concentrator.')
ol51nnMAUIFModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFModSlotIndex.setDescription('The slot number of this module.')
ol51nnMAUIFPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2), )
if mibBuilder.loadTexts: ol51nnMAUIFPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMAUIFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIFPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMAUIFPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortEntry.setDescription('A list of module-specific information about a specific 51nnM-AUIF port in the concentrator.')
ol51nnMAUIFPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMAUIFPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortIndex.setDescription('The port number of this port.')
ol51nnMAUIFPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMAUIFPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIFPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIFPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMAUIFPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMAUIMModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1), )
if mibBuilder.loadTexts: ol51nnMAUIMModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMModTable.setDescription('A list of module-specific information associated with a particular 51nnM-AUIM module in the concentrator.')
ol51nnMAUIMModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIMModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMModEntry.setDescription('A list of module-specific information about a specific 51nnM-AUIM module in the concentrator.')
ol51nnMAUIMModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMModSlotIndex.setDescription('The slot number of this module.')
ol51nnMAUIMPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2), )
if mibBuilder.loadTexts: ol51nnMAUIMPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMAUIMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIMPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMAUIMPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortEntry.setDescription('A list of module-specific information about a specific 51nnM-AUIM port in the concentrator.')
ol51nnMAUIMPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMAUIMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortIndex.setDescription('The port number of this port.')
ol51nnMAUIMPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMAUIMPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIMPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIMPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMAUIMPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMAUIMPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortSQETest.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortSQETest.setDescription('The current SQE test configuration for this port.')
ol51nnMAUIMPortDipSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipSQETest.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipSQETest.setDescription("The SQE test configuration for this port as indicated by the port's dip switches.")
ol51nnMAUIMPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortCollision.setDescription('The current collision configuration for this port.')
ol51nnMAUIMPortDipCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipCollision.setDescription("The collision configuration for this port as indicated by the port's dip switches.")
ol51nnMAUIMPortHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortHalfStep.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortHalfStep.setDescription('The current step configuration for this port.')
ol51nnMAUIMPortDipHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipHalfStep.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipHalfStep.setDescription("The step configuration for this port as indicated by the port's dip switches.")
ol5208MTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1), )
if mibBuilder.loadTexts: ol5208MTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModTable.setDescription('A list of module-specific information associated with a particular 5208M-TP module in the concentrator.')
ol5208MTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol5208MTPModSlotIndex"))
if mibBuilder.loadTexts: ol5208MTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModEntry.setDescription('A description of the 5208M-TP module attributes.')
ol5208MTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModSlotIndex.setDescription('The slot number of this module.')
ol5208MTPModBypsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPModBypsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModBypsAdminState.setDescription("The desired state of this module with respect to the ring. Setting this attribute to bypass(2) will cause this module to be removed from the ring that passes through the module's ring in and ring out ports.")
ol5208MTPModBypsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModBypsOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModBypsOperState.setDescription("The operational state of this module with respect to the ring. If this attribute is equal to bypass(2), then the module has been removed from the ring that passes through the module's ring in and ring out ports.")
ol5208MTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModDipCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModDipCableImp.setDescription("The setting of this module's port impedance matching, with 100 ohm corresponding to unshielded twisted pair cabling and 150 ohm corresponding to shielded twisted pair cabling. This setting is valid for all ports on this module.")
ol5208MTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2), )
if mibBuilder.loadTexts: ol5208MTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol5208MTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol5208MTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol5208MTPPortIndex"))
if mibBuilder.loadTexts: ol5208MTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortEntry.setDescription('A description of 5208M-TP port attributes.')
ol5208MTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol5208MTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortIndex.setDescription('The port number of this port.')
ol5208MTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol5208MTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPPortStationType.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortStationType.setDescription('Determines whether the station connected to this port has a MAC address.')
ol5208MTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3), )
if mibBuilder.loadTexts: ol5208MTPTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkTable.setDescription('A list of trunk-specific information about each trunk for this module type.')
ol5208MTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol5208MTPTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol5208MTPTrunkIndex"))
if mibBuilder.loadTexts: ol5208MTPTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkEntry.setDescription('A description of 5208M-TP trunk attributes.')
ol5208MTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol5208MTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkIndex.setDescription('The trunk number for this trunk.')
ol5208MTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkDipAdminState.setDescription("The state of this trunk as indicated by the trunk's dip switches.")
ol5208MTPTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkCableMon.setDescription('The cable monitor configuration for this trunk.')
ol5208MTPTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkDipCableMon.setDescription("The cable monitor configuration as indicated by this trunk's dip switches.")
ol5208MTPTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkNetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkNetMapState.setDescription('The map state of the copper ring-in trunk. This should be set to external for ring-in trunks which connect to external hubs. The mapping logic will not operate on trunks which are set to external. This prevents incorrect mapping which can occur when a module in one hub detects the mapping signal from another hub. This attribute only applies to copper ring-in trunks.')
ol5208MTPTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkExtBcnRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkExtBcnRecovery.setDescription('Indicates whether the trunk is connected to a segment that will perform beacon recovery. This should be set to exists(1) for trunks which connect to hubs which perform beacon recovery. This attribute is used to determine the fault domain when resolving a beaconing condition. The beacon recovery process will resolve beaconing on trunks with this attribute set to nonExists(2) before trunks with the attribute set to exists(1) are resolved. For backplane trunks, setting to a value other than notApplicable will return invalidData error. The default value is nonExists(2).')
ol51nnMFPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1), )
if mibBuilder.loadTexts: ol51nnMFPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPModTable.setDescription('A list of module-specific information associated with a particular 51nnM-FP module in the concentrator.')
ol51nnMFPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPModEntry.setDescription('A list of module-specific information about a specific 51nnM-FP module in the concentrator.')
ol51nnMFPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2), )
if mibBuilder.loadTexts: ol51nnMFPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMFPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortEntry.setDescription('A list of module-specific information about a specific 51nnM-FP port in the concentrator.')
ol51nnMFPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortIndex.setDescription('The port number of this port.')
ol51nnMFPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMFPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMFPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortLLW.setDescription('The current low light warning configuration for this port.')
ol51nnMFPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortHipwr.setDescription('The current high power optic configuration for this port.')
ol51nnMFPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipHipwr.setDescription("The high power optic configuration for this port as indicated by the port's dip switches.")
ol51nnMFBPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1), )
if mibBuilder.loadTexts: ol51nnMFBPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPModTable.setDescription('A list of module-specific information associated with a particular 51nnM-FBP module in the concentrator.')
ol51nnMFBPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPModEntry.setDescription('A list of module-specific information about a specific 51nnM-FBP module in the concentrator.')
ol51nnMFBPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFBPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2), )
if mibBuilder.loadTexts: ol51nnMFBPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMFBPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFBPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortEntry.setDescription('A list of module-specific information about a specific 51nnM-FBP port in the concentrator.')
ol51nnMFBPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFBPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortIndex.setDescription('The port number of this port.')
ol51nnMFBPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFBPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMFBPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMFBPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortLLW.setDescription('The current low light warning configuration for this port.')
ol51nnMFBPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFBPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortHipwr.setDescription('The current high power optic configuration for this port.')
ol51nnMFBPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipHipwr.setDescription("The high power optic configuration for this port as indicated by the port's dip switches.")
ol51nnMTPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1), )
if mibBuilder.loadTexts: ol51nnMTPLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModTable.setDescription('A list of module-specific information associated with a particular 51nnM-TPL module in the concentrator.')
ol51nnMTPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModEntry.setDescription('A list of module-specific information about a specific 51nnM-TPL module in the concentrator.')
ol51nnMTPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMTPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2), )
if mibBuilder.loadTexts: ol51nnMTPLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortEntry.setDescription('A list of module-specific information about a specific 51nnM-TPL port in the concentrator.')
ol51nnMTPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortIndex.setDescription('The port number of this port.')
ol51nnMTPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant or for remote diagnostics with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the slot index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the port index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortLinkInteg.setDescription('The current link integrity configuration for this port.')
ol51nnMTPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this module's dip switches.")
ol51nnMTPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortSquelch.setDescription("The current squelch configuration for this port. See the module's user's guide for more information.")
ol51nnMTPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortJabber.setDescription('The current receive jabber configuration for this port.')
ol51nnMTPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortDipJabber.setDescription("The receive jabber configuration as indicated by this module's dip switches.")
ol51nnMTPPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1), )
if mibBuilder.loadTexts: ol51nnMTPPLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLModTable.setDescription('A list of module-specific information about a specific 51nnM-TPPL module in the concentrator.')
ol51nnMTPPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLModEntry.setDescription('A list of module-specific information about a specific 51nnM-TPPL module in the concentrator.')
ol51nnMTPPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2), )
if mibBuilder.loadTexts: ol51nnMTPPLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPPLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortEntry.setDescription('A list of module-specific information about a specific 51nnM-TPPL port in the concentrator.')
ol51nnMTPPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortIndex.setDescription('The port number of this port.')
ol51nnMTPPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant or for remote diagnostics with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the slot index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the port index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPPLPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMTPPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortLinkInteg.setDescription('The current link integrity configuration for this port.')
ol51nnMTPPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this module's dip switches.")
ol51nnMTPPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortSquelch.setDescription("The current squelch configuration for this port. See the module's user's guide for more information.")
ol51nnMTPPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortJabber.setDescription('The current receive jabber configuration for this port.')
ol51nnMTPPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipJabber.setDescription("The receive jabber configuration as indicated by this module's dip switches.")
ol52nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1), )
if mibBuilder.loadTexts: ol52nnMTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModTable.setDescription('A list of module-specific information about a specific 52nnM-TP module in the concentrator.')
ol52nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModEntry.setDescription('A description of the 52nnM-TP module attributes.')
ol52nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol52nnMTPModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModRingSpeed.setDescription("The ring's bandwidth.")
ol52nnMTPModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModDipRingSpeed.setDescription("The dip switch setting for the ring's bandwidth.")
ol52nnMTPModCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModCableImp.setDescription("The setting of this module's port impedance matching, with 100 ohm corresponding to unshielded twisted pair cabling and 150 ohm corresponding to shielded twisted pair cabling. This setting is valid for all ports on this module.")
ol52nnMTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModDipCableImp.setDescription("The dip switch setting for the module's port impedance matching.")
ol52nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2), )
if mibBuilder.loadTexts: ol52nnMTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol52nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMTPPortIndex"))
if mibBuilder.loadTexts: ol52nnMTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortEntry.setDescription('A description of 52nnM-TP port attributes.')
ol52nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol52nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortIndex.setDescription('The port number of this port.')
ol52nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol52nnMTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPPortStationType.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortStationType.setDescription('Determines whether the station connected to this port has a MAC address.')
ol52nnMTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3), )
if mibBuilder.loadTexts: ol52nnMTPTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkTable.setDescription('A list of trunk-specific information about each trunk for this module type.')
ol52nnMTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMTPTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMTPTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMTPTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkEntry.setDescription('A description of 52nnM-TP trunk attributes.')
ol52nnMTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol52nnMTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkIndex.setDescription('The trunk number for this trunk.')
ol52nnMTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkDipAdminState.setDescription("The state of this trunk as indicated by the trunk's dip switches.")
ol52nnMFRModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1), )
if mibBuilder.loadTexts: ol52nnMFRModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModTable.setDescription('A list of module-specific information about a specific 52nnM-FR module in the concentrator.')
ol52nnMFRModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMFRModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMFRModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModEntry.setDescription('A description of the 52nnMFR module attributes.')
ol52nnMFRModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModSlotIndex.setDescription('The slot number of this module.')
ol52nnMFRModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRModRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModRingSpeed.setDescription("The ring's bandwidth.")
ol52nnMFRModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModDipRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModDipRingSpeed.setDescription("The dip switch setting for the ring's bandwidth.")
ol52nnMFRPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2), )
if mibBuilder.loadTexts: ol52nnMFRPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol52nnMFRPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMFRPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMFRPortIndex"))
if mibBuilder.loadTexts: ol52nnMFRPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortEntry.setDescription('A description of 52nnMFR port attributes.')
ol52nnMFRPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortSlotIndex.setDescription("The slot number of this port's module.")
ol52nnMFRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortIndex.setDescription('The port number of this port.')
ol52nnMFRPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol52nnMFRPortCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortCableImp.setDescription("The setting of this port's impedance matching, with 100 ohm corresponding to unshielded twisted pair cabling and 150 ohm corresponding to shielded twisted pair cabling.")
ol52nnMFRPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRPortStationType.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortStationType.setDescription('Determines whether the station connected to this port has a MAC address.')
ol52nnMFRTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3), )
if mibBuilder.loadTexts: ol52nnMFRTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkTable.setDescription('A list of trunk-specific information about each trunk for this module type.')
ol52nnMFRTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMFRTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMFRTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMFRTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkEntry.setDescription('A description of 52nnMFR trunk attributes.')
ol52nnMFRTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol52nnMFRTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkIndex.setDescription('The trunk number of this trunk.')
ol52nnMFRTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkDipAdminState.setDescription("The state of this trunk as indicated by the trunk's dip switches.")
ol52nnMFRTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkCableMon.setDescription('The cable monitor configuration for this trunk. This does not apply to fiber trunks.')
ol52nnMFRTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCableMon.setDescription("The cable monitor configuration as indicated by this trunk's dip switches. This does not apply to fiber trunks.")
ol52nnMFRTrunkCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCompMode.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkCompMode.setDescription('The compatibility mode for this trunk. This only applies to fiber trunks.')
ol52nnMFRTrunkDipCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCompMode.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCompMode.setDescription("The compatibility mode as indicated by this trunk's dip switches. This only applies to fiber trunks.")
ol52nnMFRTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkNetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkNetMapState.setDescription('The map state of the copper ring-in trunk. This should be set to external for ring-in trunks which connect to external hubs. The mapping logic will not operate on trunks which are set to external. This prevents incorrect mapping which can occur when a module in one hub detects the mapping signal from another hub. This attribute only applies to copper ring-in trunks.')
ol52nnMFRTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkExtBcnRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkExtBcnRecovery.setDescription('Indicates whether the trunk is connected to a segment that will perform beacon recovery. This should be set to exists(1) for trunks which connect to hubs which perform beacon recovery. This attribute is used to determine the fault domain when resolving a beaconing condition. The beacon recovery process will resolve beaconing on trunks with this attribute set to nonExists(2) before trunks with the attribute set to exists(1) are resolved. For backplane trunks, setting to a value other than notApplicable will return invalidData error. The default value is nonExists(2).')
ol51nnMTSModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1), )
if mibBuilder.loadTexts: ol51nnMTSModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModTable.setDescription('A table of module-specific information for each 51nnM-TS module in the concentrator.')
ol51nnMTSModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTSModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTSModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModEntry.setDescription('A list of module information for each 51nnMTS module in the concentrator.')
ol51nnMTSModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTSModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnMTSModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModIpAddress.setDescription('The IP Address of the terminal terver.')
ol51nnMTSModTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModTCPPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModTCPPort.setDescription("The TCP port number of the the terminal server's remote console port.")
ol51nnMTSModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of the terminal server.')
ol51nnMTSModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMTSModCPURev = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModCPURev.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModCPURev.setDescription("The terminal server's CPU revision.")
ol51nnMTSPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2), )
if mibBuilder.loadTexts: ol51nnMTSPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortTable.setDescription('A table of information that contains port-specific information for each port on each 51nnMTS module.')
ol51nnMTSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTSPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTSPortIndex"))
if mibBuilder.loadTexts: ol51nnMTSPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortEntry.setDescription('A list of information about a specific port on a 51nnMTS module.')
ol51nnMTSPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortSlotIndex.setDescription('The slot number for this port.')
ol51nnMTSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortIndex.setDescription('The port number of this port.')
ol51nnMTSPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("local", 6), ("remote", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTSPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortAdminState.setDescription('The administrative state of this port.')
ol51nnMTSPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortOperState.setDescription('The operational mode of this port.')
ol51nnMFLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1), )
if mibBuilder.loadTexts: ol51nnMFLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModTable.setDescription('A table of module-specific information for each 51nnM-FL module in the concentrator.')
ol51nnMFLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModEntry.setDescription('A list of module-specific information associated with a particular 51nnM-FL module in the concentrator.')
ol51nnMFLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMFLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2), )
if mibBuilder.loadTexts: ol51nnMFLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortTable.setDescription('A table of port-specific information for each port of each 51nnMFL module.')
ol51nnMFLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFLPortIndex"))
if mibBuilder.loadTexts: ol51nnMFLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortEntry.setDescription('A list of information about a specific port on a 51nnMFL module.')
ol51nnMFLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol51nnMFLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortIndex.setDescription('The port number of this port.')
ol51nnMFLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return invalidData error. Remote Failure Signaling (RFS), is set on connected module port to permit transmit error detection on local port. Port must be set to be RFS when connected port is set to be redundant')
ol51nnMFLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. ")
ol51nnMFLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortBuddyPort.setDescription("The port index of the redundant port's buddy.")
ol51nnMFLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol50nnMRCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1), )
if mibBuilder.loadTexts: ol50nnMRCTLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModTable.setDescription('A table that contains information about each 50nnMRCTL in the concentrator. ')
ol50nnMRCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol50nnMRCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMRCTLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModEntry.setDescription('A list of information for each 50nnMRCTL module in the concentrator.')
ol50nnMRCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModSlotIndex.setDescription('The slot number for this module.')
ol50nnMRCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModOperState.setDescription('The operational state of the 50nnMRCTL module. Specifically, this is an indicator of whether the 50nnMRCTL module is providing clock signals to the backplane. An active 50nnMRCTL module provides clock signals to the backplane while a standby 50nnMRCTL module does not. Note that only one 50nnMRCTL module will be active at any given time; all other 50nnMRCTL modules in the concentrator will be in standby mode.')
ol50nnMRCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModClockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModClockStatus.setDescription('The current status of the on-board clocks on this module.')
ol50nnMRCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModTempStatus.setDescription('The temperature as detected by the probe on this module.')
ol51nnMFBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1), )
if mibBuilder.loadTexts: ol51nnMFBModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModTable.setDescription('A list of module-specific information associated with a particular 51nnM-FB module in the concentrator.')
ol51nnMFBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModEntry.setDescription('A list of module-specific information about a specific 51nnM-FB module in the concentrator.')
ol51nnMFBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMFBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBModLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModLLW.setDescription("The current state of this module's low light warning configuration. Enabling this feature causes the module to check for low light and to issue a warning if low light is present. Disabling low light has the advantage of faster redundancy switchover in the event of a port error.")
ol51nnMFBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2), )
if mibBuilder.loadTexts: ol51nnMFBPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMFBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortEntry.setDescription('A list of module-specific information about a specific 51nnM-FB port in the concentrator.')
ol51nnMFBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortIndex.setDescription('The port number of this port.')
ol51nnMFBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol53nnMFBMICModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1), )
if mibBuilder.loadTexts: ol53nnMFBMICModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMFBMICModTable entry, the ol53nnMFBMICModSlotIndex attribute is used.')
ol53nnMFBMICModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFBMICModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModEntry.setDescription('A list of module-specific information about a specific 53nnM-FBMIC module in the concentrator.')
ol53nnMFBMICModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMFBMICModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMFBMICModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamModule.setDescription('Up stream slot (receve from)')
ol53nnMFBMICModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamOperPath.setDescription('Transmit DBA (debug only)')
ol53nnMFBMICModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamOperPath.setDescription('Receive DBA (debug only)')
ol53nnMFBMICModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMFBMICPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2), )
if mibBuilder.loadTexts: ol53nnMFBMICPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMFBMICPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFBMICPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFBMICPortIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortEntry.setDescription('A list of module-specific information about a specific 53nnM-FBMIC port in the concentrator.')
ol53nnMFBMICPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMFBMICPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMFBMICPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFBMICPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortConfig.setDescription('Specifies the FDDI port type. If the port is on an FPM, the only allowed values are slave(3), and master(4). In addition, there can only be one active slave port on any concentrator FDDI network.')
ol53nnMFBMICPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMFBMICPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMFBMICPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFBMICPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFBMICPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMFBMICPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMFBMICPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMFBMICTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3), )
if mibBuilder.loadTexts: ol53nnMFBMICTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMFBMICTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFBMICTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFBMICTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkEntry.setDescription('A description of 53nnM-FBMIC trunk attributes.')
ol53nnMFBMICTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMFBMICTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol53nnMFIBSTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1), )
if mibBuilder.loadTexts: ol53nnMFIBSTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMFIBSTModTable entry, the ol53nnMFIBSTModSlotIndex attribute is used.')
ol53nnMFIBSTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFIBSTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModEntry.setDescription('A list of module-specific information about a specific 53nnM-FIBST module in the concentrator.')
ol53nnMFIBSTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMFIBSTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMFIBSTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamModule.setDescription('Up stream slot (receve from)')
ol53nnMFIBSTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamOperPath.setDescription('Transmit DBA (debug only)')
ol53nnMFIBSTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamOperPath.setDescription('Receive DBA (debug only)')
ol53nnMFIBSTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMFIBSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2), )
if mibBuilder.loadTexts: ol53nnMFIBSTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMFIBSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFIBSTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFIBSTPortIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortEntry.setDescription('A list of module-specific information about a specific 53nnM-FIBST port in the concentrator.')
ol53nnMFIBSTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMFIBSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMFIBSTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortConfig.setDescription('Specifies the FDDI port type. If the port is on an FPM, the only allowed values are slave(3) and master(4). In addition, there can only be one active slave port on any concentrator FDDI network.')
ol53nnMFIBSTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMFIBSTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMFIBSTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFIBSTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFIBSTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMFIBSTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMFIBSTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMFIBSTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3), )
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMFIBSTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFIBSTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFIBSTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkEntry.setDescription('A description of 53nnM-FIBST trunk attributes.')
ol53nnMFIBSTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMFIBSTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol53nnMSTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1), )
if mibBuilder.loadTexts: ol53nnMSTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMSTPModTable entry, the ol53nnMSTPModSlotIndex attribute is used.')
ol53nnMSTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMSTPModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMSTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModEntry.setDescription('A list of module-specific information about a specific 53nnM-FIBSTP module in the concentrator.')
ol53nnMSTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMSTPModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMSTPModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamModule.setDescription('Down stream slot (receve from)')
ol53nnMSTPModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamOperPath.setDescription('transmit DBA (debug only)')
ol53nnMSTPModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamOperPath.setDescription('receive DBA (debug only)')
ol53nnMSTPModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2), )
if mibBuilder.loadTexts: ol53nnMSTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMSTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMSTPPortIndex"))
if mibBuilder.loadTexts: ol53nnMSTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortEntry.setDescription('A list of module-specific information about a specific 53nnM-STP port in the concentrator.')
ol53nnMSTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMSTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMSTPPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortConfig.setDescription('Specifies the FDDI port type. If the port is on an FPM, the only allowed values are slave(3) and master(4). In addition, there can only be one active slave port on any concentrator FDDI network.')
ol53nnMSTPPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMSTPPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMSTPPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMSTPPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMSTPPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMSTPPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMSTPPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMSTPPortPersonality = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sddi", 1), ("tpddi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortPersonality.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortPersonality.setDescription('Specifies the physical signaling used by the port, the only valid values are sddi(3) and tpddi(4).')
ol53nnMSTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3), )
if mibBuilder.loadTexts: ol53nnMSTPTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMSTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMSTPTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMSTPTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMSTPTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkEntry.setDescription('A description of 53nnM-STP trunk attributes.')
ol53nnMSTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMSTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol51nnMTPCLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1), )
if mibBuilder.loadTexts: ol51nnMTPCLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModTable.setDescription('A list of module-specific information about a specific 51nnM-TPCL module in the concentrator.')
ol51nnMTPCLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPCLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModEntry.setDescription('A list of module-specific information about a specific 51nnM-TPCL module in the concentrator.')
ol51nnMTPCLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPCLModMonitorConn = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connector-1", 1), ("connector-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModMonitorConn.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModMonitorConn.setDescription('When both connectors are on the same network: Setting this object to connector-1 allows the EMM to monitor the port statistics of port 1-12 on a per-port basis, and the port statistics of port 13-24 are summed and are reported through port 13. Setting this object to connector-2 allows the EMM to monitor the port statistics of port 12-24 on a per-port basis, and the port statistics of port 1-12 are summed and are reported through port 13. Note: when the 2 connectors are on different networks, setting this object to the value connector-1 or connector-2 will not have any effect. The port counters will be cleared whenever the value of this object is changed.')
ol51nnMTPCLModConn1Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1Network.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn1Network.setDescription('The network that this connector is attached to.')
ol51nnMTPCLModConn2Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2Network.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn2Network.setDescription('The network that this connector is attached to.')
ol51nnMTPCLModConn1DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1DipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn1DipNetwork.setDescription('The network indicated by the connector dip switch.')
ol51nnMTPCLModConn2DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2DipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn2DipNetwork.setDescription('The network indicated by the connector dip switch.')
ol51nnMTPCLModAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("collisions-31", 1), ("collisions-63", 2), ("collisions-127", 3), ("collisions-255", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModAutoPartition.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModAutoPartition.setDescription('This object holds the consecutive collision count limit value. The module goes into the auto-partition mode whenever the consecutive collision count exceeds the consecutive collision limit count.')
ol51nnMTPCLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2), )
if mibBuilder.loadTexts: ol51nnMTPCLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPCLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPCLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPCLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortEntry.setDescription('A list of module-specific information about a specific 51nnM-TPCL port in the concentrator.')
ol51nnMTPCLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPCLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortIndex.setDescription('The port number of this port.')
ol51nnMTPCLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant or for remote diagnostics with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPCLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the slot index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPCLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the port index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPCLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPCLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortLinkInteg.setDescription('The current link integrity configuration for this port.')
ol51nnMTPCLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortDipLinkInteg.setDescription('The link integrity configuration as indicated by this dip switch.')
ol52nnBTTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1), )
if mibBuilder.loadTexts: ol52nnBTTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModTable.setDescription('A table of module-specific information for each 52nnB-TT module in the concentrator.')
ol52nnBTTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnBTTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnBTTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModEntry.setDescription('A list of module-specific information about a specific 52nnB-TT module in the concentrator.')
ol52nnBTTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModSlotIndex.setDescription('The slot number of this module.')
ol52nnBTTModBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge-type-sr", 1), ("bridge-type-srt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModBridgeType.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModBridgeType.setDescription('Whether the bridge is a source-routing bridge or a source-routing-transparent bridge.')
ol52nnBTTModSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModSoftwareVersion.setDescription("The version number of the software loaded into the module's flash chips.")
ol52nnBTTModSRBridgeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSRBridgeNo.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModSRBridgeNo.setDescription("The module's source routing bridge number.")
ol52nnBTTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModNetworkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModNetworkStatus.setDescription('The status of the ring containing this module.')
ol52nnBTTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2), )
if mibBuilder.loadTexts: ol52nnBTTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortTable.setDescription('A table of port-specific for each port of each 52nnB-TT module i the concentrator.')
ol52nnBTTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnBTTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnBTTPortIndex"))
if mibBuilder.loadTexts: ol52nnBTTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortEntry.setDescription('A list of port-specific information about a specific 52nnB-TT port in the concentrator.')
ol52nnBTTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortSlotIndex.setDescription("The slot number for this port's module.")
ol52nnBTTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortIndex.setDescription('The port number for this port within this slot.')
ol52nnBTTPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10))).clone(namedValues=NamedValues(("backPlane", 1), ("rj45", 8), ("db-9", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortConnector.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortConnector.setDescription('The port connector. Notice that setting port connector available only for the front pannel port.')
ol52nnBTTPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSTAPState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortSTAPState.setDescription('The port connector. Notice that setting port connector available only for the front pannel port.')
ol52nnBTTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortIpAddress.setDescription('The IP address associated with this port.')
ol52nnBTTPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortMACAddress.setDescription('A 6 octet address that uniquely identifies this port.')
ol52nnBTTPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortThroughput.setDescription('Port throughput measured in Kbytes per second.')
ol52nnBTTPortForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortForwarding.setDescription('Port forwarding rate measured in frames per second.')
ol52nnBTTPortSRRingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSRRingNo.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortSRRingNo.setDescription("The port's source routing ring number.")
ol52nnBTTPortRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortRingSpeed.setDescription("The ring's bandwidth.")
ol52nnBTTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3), )
if mibBuilder.loadTexts: ol52nnBTTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkTable.setDescription('A table that contains trunk-specific information for each trunk on each 52nnB-TT in the concentrator.')
ol52nnBTTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnBTTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnBTTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnBTTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkEntry.setDescription('A list of information about a specific Trunk on a 52nnB-TT module in the concentrator.')
ol52nnBTTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkSlotIndex.setDescription('The slot number of this module. Its value ranges between 1 and olConcNumSlots.')
ol52nnBTTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkIndex.setDescription('The trunk number of this module. Its value ranges between 1 and olModNumTrunks.')
ol52nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1), )
if mibBuilder.loadTexts: ol52nnMMGTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModTable.setDescription('A table that contains module information about each 52nnM-MGT in the concentrator.')
ol52nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMMGTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModEntry.setDescription('A list of module information for each 52nnM-MGT in the concentrator.')
ol52nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModSlotIndex.setDescription('The slot number of this module. Its value ranges between 1 and olConcNumSlots.')
ol52nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Priority is only used when an election occurs. Mastership is not preemptive unless the reset mastership command is used.')
ol52nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModMasterStatus.setDescription('The mastership status of this agent.')
ol52nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the MAC address of port 1.')
ol52nnMMGTModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModRingSpeed.setDescription("The ring's bandwidth.")
ol52nnMMGTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModNetworkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModNetworkStatus.setDescription('The status of the ring containing this module.')
ol52nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2), )
if mibBuilder.loadTexts: ol52nnMMGTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortTable.setDescription('A table that contains port-specific information for each port on each 52nnM-MGT in the concentrator.')
ol52nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMMGTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol52nnMMGTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortEntry.setDescription('A list of information about a specific port on a 52nnM-MGT module in the concentrator.')
ol52nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortSlotIndex.setDescription("The slot number of this port's module.")
ol52nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortIndex.setDescription('The port number of this port.')
ol52nnMMGTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortIpAddress.setDescription('The IP address associated with this port.')
ol52nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3), )
if mibBuilder.loadTexts: ol52nnMMGTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkTable.setDescription('A table that contains trunk-specific information for each trunk on each 52nnM-MGT in the concentrator.')
ol52nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMMGTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMMGTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkEntry.setDescription('A list of information about a specific Trunk on a 52nnM-MGT module in the concentrator.')
ol52nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkSlotIndex.setDescription('The slot number of this module. Its value ranges between 1 and olConcNumSlots.')
ol52nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkIndex.setDescription('The slot number of this module. Its value ranges between 1 and olModNumTrunks.')
ol52nnMMGTTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkCableMon.setDescription('The cable monitor configuration for this trunk.')
ol52nnMMGTTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkNetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkNetMapState.setDescription('The map state of the copper ring-in trunk. This should be set to external for ring-in trunks which connect to external hubs. The mapping logic will not operate on trunks which are set to external. This prevents incorrect mapping which can occur when a module in one hub detects the mapping signal from another hub. This attribute only applies to copper ring-in trunks.')
ol52nnMMGTTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkExtBcnRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkExtBcnRecovery.setDescription('Indicates whether the trunk is connected to a segment that will perform beacon recovery. This should be set to exists(1) for trunks which connect to hubs which perform beacon recovery. This attribute is used to determine the fault domain when resolving a beaconing condition. The beacon recovery process will resolve beaconing on trunks with this attribute set to nonExists(2) before trunks with the attribute set to exists(1) are resolved. For backplane trunks, setting to a value other than notApplicable will return invalidData error. The default value is nonExists(2).')
ol51nnIxModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1), )
if mibBuilder.loadTexts: ol51nnIxModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModTable.setDescription('A table of module-specific information for each 51nnI-x module in the concentrator.')
ol51nnIxModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnIxModSlotIndex"))
if mibBuilder.loadTexts: ol51nnIxModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModEntry.setDescription('A list of module-specific information about a specific 51nnI-x module in the concentrator.')
ol51nnIxModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModSlotIndex.setDescription('The slot number of this module.')
ol51nnIxModSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bridge", 1), ("switch", 2), ("router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSwType.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModSwType.setDescription('The software currently loaded and executing has the module operating as a Bridge, Switch or Router.')
ol51nnIxModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnIxModDipPromDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModDipPromDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModDipPromDefaults.setDescription('The current module configuration with respect to default PROM values as specified by dip switches.')
ol51nnIxModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnIxPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2), )
if mibBuilder.loadTexts: ol51nnIxPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortTable.setDescription('A table of port-specific information for each port of each 51nnI-x module in the concentrator.')
ol51nnIxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnIxPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnIxPortIndex"))
if mibBuilder.loadTexts: ol51nnIxPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortEntry.setDescription('A list of port-specific information about a specific 51nnI-x port in the concentrator.')
ol51nnIxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnIxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortIndex.setDescription('The port number for this port within this slot.')
ol51nnIxPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnIxPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSTAPState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortSTAPState.setDescription('The current IEEE 802.1d Spanning Tree Algorithm and Protocol state (STAP) of this port.')
ol51nnIxPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnIxPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnIxPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortDefNetwork.setDescription("The network for this port as specified by the OEIM's non-volatile storage.")
ol53nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1), )
if mibBuilder.loadTexts: ol53nnMMGTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMMGTModTable entry, the ol53nnMMGTModSlotIndex attribute is used.')
ol53nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMMGTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModEntry.setDescription('A list of module-specific information about a specific 53nnM-MGT module in the concentrator.')
ol53nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Priority is only used when an election occurs. Mastership is not preemptive unless the reset mastership command is used.')
ol53nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModMasterStatus.setDescription('The mastership status of this agent.')
ol53nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the MAC address of port 1.')
ol53nnMMGTModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModIpAddress.setDescription('The IP address associated with this module.')
ol53nnMMGTModDownStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamMAC.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamMAC.setDescription('Down stream MAC')
ol53nnMMGTModUpStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamMAC.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamMAC.setDescription('Up stream MAC')
ol53nnMMGTModfddiMACPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModfddiMACPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModfddiMACPath.setDescription('The FDDI path which should be inserted into the MAC')
ol53nnMMGTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMMGTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamModule.setDescription('Up stream slot (receve from)')
ol53nnMMGTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamOperPath.setDescription('Transmit DBA (debug only)')
ol53nnMMGTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamOperPath.setDescription('Receive DBA (debug only)')
ol53nnMMGTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2), )
if mibBuilder.loadTexts: ol53nnMMGTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMMGTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol53nnMMGTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortEntry.setDescription('A list of module-specific information about a specific 53nnM-MGT port in the concentrator.')
ol53nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMMGTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortConfig.setDescription('Specifies the FDDI port type (a or b).')
ol53nnMMGTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMMGTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMMGTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMMGTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMMGTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMMGTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMMGTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3), )
if mibBuilder.loadTexts: ol53nnMMGTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMMGTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMMGTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkEntry.setDescription('A description of 53nnM-MGT trunk attributes.')
ol53nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol50nnMHCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1), )
if mibBuilder.loadTexts: ol50nnMHCTLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModTable.setDescription('A table that contains information about each 50nnM-HCTL in the concentrator. ')
ol50nnMHCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol50nnMHCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMHCTLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModEntry.setDescription('A list of information for each 50nnM-HCTL module in the concentrator.')
ol50nnMHCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModSlotIndex.setDescription('The slot number for this module. The value should be 7.')
ol50nnMHCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModOperState.setDescription('The operational state of the 50nnM-HCTL module. Specifically, this is an indicator of whether the 50nnM-HCTL module is providing clock signals to the backplane. An active 50nnM-HCTL module provides clock signals to the backplane while a standby 50nnM-HCTL module does not. Note that only one 50nnM-HCTL module will be active at any given time; all other 50nnM-HCTL/ 50nnMRCTL modules in the concentrator will be in standby mode.')
ol50nnMHCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModClockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModClockStatus.setDescription('The current status of the on-board clocks on this module.')
ol50nnMHCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModTempStatus.setDescription('The temperature as detected by the probe on this module.')
ol50nnMHCTLModPDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModPDBStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModPDBStatus.setDescription('Indicates whether this 6-slot concentrator contains a power distribution board that supports powersupply redundancy.')
ol50nnMHCTLModDipCh1ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh1ActCol.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh1ActCol.setDescription("The Ethernet channel 1 activity/collision LED configuration as indicated by this module's dip switches.")
ol50nnMHCTLModDipCh2ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh2ActCol.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh2ActCol.setDescription("The Ethernet channel 2 activity/collision LED configuration as indicated by this module's dip switches.")
ol50nnMHCTLModDipCh3ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh3ActCol.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh3ActCol.setDescription("The Ethernet channel 3 activity/collision LED configuration as indicated by this module's dip switches.")
mibBuilder.exportSymbols("CHIPMODULE-MIB", ol51nnMTPPLPortSlotIndex=ol51nnMTPPLPortSlotIndex, ol5208MTPTrunkIndex=ol5208MTPTrunkIndex, ol52nnBTTPortTable=ol52nnBTTPortTable, ol51nnIxPortSlotIndex=ol51nnIxPortSlotIndex, ol51nnRESModTable=ol51nnRESModTable, ol51nnMTPLPortBuddySlot=ol51nnMTPLPortBuddySlot, ol51nnMFIBPortBuddySlot=ol51nnMFIBPortBuddySlot, ol51nnMTPLPortDipAdminState=ol51nnMTPLPortDipAdminState, ol51nnMTSModStationAddr=ol51nnMTSModStationAddr, ol52nnBTTModNetworkStatus=ol52nnBTTModNetworkStatus, chipProducts=chipProducts, ol51nnMMGTModTable=ol51nnMMGTModTable, ol51nnMTPPortBuddySlot=ol51nnMTPPortBuddySlot, ol52nnBTTModEntry=ol52nnBTTModEntry, ol51nnMTPLPortAdminState=ol51nnMTPLPortAdminState, ol51nnMFBPPortDipLLW=ol51nnMFBPPortDipLLW, ol51nnMTPLPortDipLinkInteg=ol51nnMTPLPortDipLinkInteg, ol5208MTPTrunkDipAdminState=ol5208MTPTrunkDipAdminState, ol51nnMFBPPortDipAdminState=ol51nnMFBPPortDipAdminState, ol52nnMFRTrunkNetMapState=ol52nnMFRTrunkNetMapState, ol51nnMUTPModCrossover=ol51nnMUTPModCrossover, ol53nnMMGTModUpStreamMAC=ol53nnMMGTModUpStreamMAC, ol53nnMMGTModDownStreamOperPath=ol53nnMMGTModDownStreamOperPath, ol51nnMAUIFPortDipAdminState=ol51nnMAUIFPortDipAdminState, ol51nnMTPCLModTable=ol51nnMTPCLModTable, ol51nnREEPortDipNetwork=ol51nnREEPortDipNetwork, ol51nnMFLModTable=ol51nnMFLModTable, dot5=dot5, ol51nnMFBPPortBuddySlot=ol51nnMFBPPortBuddySlot, ol51nnMUTPPortSlotIndex=ol51nnMUTPPortSlotIndex, ol51nnMFBPModSlotIndex=ol51nnMFBPModSlotIndex, ol53nnMFIBSTPortLerCondition=ol53nnMFIBSTPortLerCondition, ol53nnMMGTPortRemoteMACIndicated=ol53nnMMGTPortRemoteMACIndicated, ol52nnMFRTrunkSlotIndex=ol52nnMFRTrunkSlotIndex, ol51nnMBNCModTable=ol51nnMBNCModTable, midnight=midnight, ol51nnMFPPortLLW=ol51nnMFPPortLLW, ol5208MTPTrunkNetMapState=ol5208MTPTrunkNetMapState, ol51nnMFLPortBuddySlot=ol51nnMFLPortBuddySlot, ol53nnMSTPPortNeighbor=ol53nnMSTPPortNeighbor, ol52nnBTTModTable=ol52nnBTTModTable, ol5208MTPTrunkSlotIndex=ol5208MTPTrunkSlotIndex, ol51nnMTPPL=ol51nnMTPPL, ol53nnMMGT=ol53nnMMGT, ol51nnMTPModDipCrossover=ol51nnMTPModDipCrossover, ol51nnMBNCPortDipAdminState=ol51nnMBNCPortDipAdminState, ol52nnMTPPortDipAdminState=ol52nnMTPPortDipAdminState, ol53nnMFIBSTModRingInfo=ol53nnMFIBSTModRingInfo, ol53nnMFIBSTPortConnectState=ol53nnMFIBSTPortConnectState, ol53nnMFIBSTPortSlotIndex=ol53nnMFIBSTPortSlotIndex, ol51nnMFIB=ol51nnMFIB, ol53nnMFIBSTTrunkTable=ol53nnMFIBSTTrunkTable, ol5208MTPPortDipAdminState=ol5208MTPPortDipAdminState, ol51nnMFPPortIndex=ol51nnMFPPortIndex, ol51nnMMGTModMasterPriority=ol51nnMMGTModMasterPriority, ol52nnMTPPortStationType=ol52nnMTPPortStationType, ol51nnMFLPortEntry=ol51nnMFLPortEntry, ol52nnBTTTrunkIndex=ol52nnBTTTrunkIndex, ol51nnMFBModLLW=ol51nnMFBModLLW, ol51nnIxPortEntry=ol51nnIxPortEntry, ol51nnMAUIMPortDipCollision=ol51nnMAUIMPortDipCollision, ol51nnMAUIMPortSQETest=ol51nnMAUIMPortSQETest, ol52nnBTTPortSRRingNo=ol52nnBTTPortSRRingNo, ol51nnREEPortIndex=ol51nnREEPortIndex, ol53nnMMGTPortConnectState=ol53nnMMGTPortConnectState, ol51nnBEEPortDefNetwork=ol51nnBEEPortDefNetwork, ol53nnMMGTPortTable=ol53nnMMGTPortTable, ol51nnMUTPPortDipSquelch=ol51nnMUTPPortDipSquelch, chipTFTP=chipTFTP, ol51nnBEEModStationAddr=ol51nnBEEModStationAddr, ol51nnMAUIFPortTable=ol51nnMAUIFPortTable, ol51nnMTPCLPortDipLinkInteg=ol51nnMTPCLPortDipLinkInteg, ol52nnMMGTModSlotIndex=ol52nnMMGTModSlotIndex, ol51nnBEEPortIpAddress=ol51nnBEEPortIpAddress, ol53nnMMGTPortPCWithhold=ol53nnMMGTPortPCWithhold, ol51nnRESPortIpAddress=ol51nnRESPortIpAddress, ol52nnMFRPortEntry=ol52nnMFRPortEntry, ol52nnMMGTPortTable=ol52nnMMGTPortTable, ol53nnMMGTModMasterStatus=ol53nnMMGTModMasterStatus, ol51nnMTPCLPortAdminState=ol51nnMTPCLPortAdminState, ol51nnMTSModProtocols=ol51nnMTSModProtocols, olTRnet=olTRnet, ol51nnMAUIMPortAdminState=ol51nnMAUIMPortAdminState, ol50nnMCTLModSlotIndex=ol50nnMCTLModSlotIndex, ol52nnBTTPortSlotIndex=ol52nnBTTPortSlotIndex, ol51nnMTPModTable=ol51nnMTPModTable, ol50nnMHCTLModDipCh3ActCol=ol50nnMHCTLModDipCh3ActCol, ol52nnMFRTrunkDipCompMode=ol52nnMFRTrunkDipCompMode, ol51nnMFBPModTable=ol51nnMFBPModTable, oeim=oeim, ol51nnMTSPortTable=ol51nnMTSPortTable, ol51nnMTPPLPortSquelch=ol51nnMTPPLPortSquelch, ol51nnMFPModTable=ol51nnMFPModTable, ol51nnMFBPortTable=ol51nnMFBPortTable, ol51nnMAUIMPortSlotIndex=ol51nnMAUIMPortSlotIndex, boardGroup=boardGroup, ol51nnRESModStationAddr=ol51nnRESModStationAddr, ol53nnMSTPModDownStreamOperPath=ol53nnMSTPModDownStreamOperPath, ol50nnMHCTLModSlotIndex=ol50nnMHCTLModSlotIndex, ol51nnMFLModDipNetwork=ol51nnMFLModDipNetwork, ol51nnMFLPortAdminState=ol51nnMFLPortAdminState, ol51nnIxPortTable=ol51nnIxPortTable, ol51nnMAUIF=ol51nnMAUIF, ol52nnMMGTTrunkEntry=ol52nnMMGTTrunkEntry, ol51nnIxPortIpAddress=ol51nnIxPortIpAddress, ol52nnBTTPortForwarding=ol52nnBTTPortForwarding, ol51nnMTPLPortSquelch=ol51nnMTPLPortSquelch, ol51nnMTPPortSlotIndex=ol51nnMTPPortSlotIndex, ol51nnMUTPPortDipAdminState=ol51nnMUTPPortDipAdminState, ol51nnMFBPortEntry=ol51nnMFBPortEntry, ol52nnBTTModSRBridgeNo=ol52nnBTTModSRBridgeNo, ol51nnMFBPPortBuddyPort=ol51nnMFBPPortBuddyPort, ol53nnMSTPTrunkTable=ol53nnMSTPTrunkTable, ol53nnMSTPPortIndex=ol53nnMSTPPortIndex, ol51nnMAUIFPortDipNetwork=ol51nnMAUIFPortDipNetwork, ol51nnMFPModEntry=ol51nnMFPModEntry, ol51nnMFPPortAdminState=ol51nnMFPPortAdminState, ol52nnMFRPortIndex=ol52nnMFRPortIndex, ol51nnMAUIFPortBuddySlot=ol51nnMAUIFPortBuddySlot, ol52nnMFRModTable=ol52nnMFRModTable, ol51nnMAUIMPortBuddySlot=ol51nnMAUIMPortBuddySlot, ol51nnMMGTPortEntry=ol51nnMMGTPortEntry, ol51nnMFPPortDipHipwr=ol51nnMFPPortDipHipwr, ol51nnRESPortDipNetwork=ol51nnRESPortDipNetwork, ol5208MTPModBypsOperState=ol5208MTPModBypsOperState, ol52nnMTPTrunkIndex=ol52nnMTPTrunkIndex, ol52nnMMGTTrunkTable=ol52nnMMGTTrunkTable, ol51nnMFPPortSlotIndex=ol51nnMFPPortSlotIndex, ol52nnMTPModDipCableImp=ol52nnMTPModDipCableImp, ol52nnBTTModSlotIndex=ol52nnBTTModSlotIndex, ol53nnMFBMICPortPcmState=ol53nnMFBMICPortPcmState, ol53nnMMGTTrunkIndex=ol53nnMMGTTrunkIndex, ol50nnMRCTLModSlotIndex=ol50nnMRCTLModSlotIndex, ol53nnMMGTTrunkTable=ol53nnMMGTTrunkTable, ol51nnMTPLPortIndex=ol51nnMTPLPortIndex, ol52nnMFRPortSlotIndex=ol52nnMFRPortSlotIndex, ol53nnMMGTModUpStreamOperPath=ol53nnMMGTModUpStreamOperPath, olNet=olNet, ol51nnMUTPPortSquelch=ol51nnMUTPPortSquelch, ol52nnBTTPortRingSpeed=ol52nnBTTPortRingSpeed, ol51nnMFBPPortDipNetwork=ol51nnMFBPPortDipNetwork, ol5208MTPPortSlotIndex=ol5208MTPPortSlotIndex, ol51nnMTSModSlotIndex=ol51nnMTSModSlotIndex, ol50nnMRCTLModOperState=ol50nnMRCTLModOperState, ol53nnMSTPTrunkIndex=ol53nnMSTPTrunkIndex, ol53nnMMGTModEntry=ol53nnMMGTModEntry, ol53nnMMGTPortIndex=ol53nnMMGTPortIndex, ol51nnMFBPortIndex=ol51nnMFBPortIndex, ol51nnMBNCModSlotIndex=ol51nnMBNCModSlotIndex, ol52nnMMGTPortIpAddress=ol52nnMMGTPortIpAddress, ol53nnMSTPPortRemoteMACIndicated=ol53nnMSTPPortRemoteMACIndicated, ol51nnMFL=ol51nnMFL, ol51nnMAUIMModSlotIndex=ol51nnMAUIMModSlotIndex, ol51nnMTPModEntry=ol51nnMTPModEntry, ol51nnMTSModEntry=ol51nnMTSModEntry, ol51nnIxModEntry=ol51nnIxModEntry, ol52nnBTTPortIpAddress=ol52nnBTTPortIpAddress, ol53nnMMGTPortPcmState=ol53nnMMGTPortPcmState, ol51nnMTPLPortTable=ol51nnMTPLPortTable, ol51nnMUTPPortTable=ol51nnMUTPPortTable, ol53nnMFIBSTTrunkSlotIndex=ol53nnMFIBSTTrunkSlotIndex, ol5208MTPTrunkDipCableMon=ol5208MTPTrunkDipCableMon, ol51nnMFPPortBuddyPort=ol51nnMFPPortBuddyPort, ol51nnMFLPortTable=ol51nnMFLPortTable, ol51nnMTPPLModTable=ol51nnMTPPLModTable, ol51nnBEEModEntry=ol51nnBEEModEntry, ol52nnMMGTTrunkIndex=ol52nnMMGTTrunkIndex, ol53nnMMGTModStationAddr=ol53nnMMGTModStationAddr, ol51nnMTPCLModConn2Network=ol51nnMTPCLModConn2Network, ol51nnBEE=ol51nnBEE, ol53nnMSTPTrunkSlotIndex=ol53nnMSTPTrunkSlotIndex, ol5208MTPTrunkExtBcnRecovery=ol5208MTPTrunkExtBcnRecovery, ol51nnMTPPortAdminState=ol51nnMTPPortAdminState, ol51nnMFBPortDipAdminState=ol51nnMFBPortDipAdminState, softwareGroup=softwareGroup, ol51nnMBNC=ol51nnMBNC, ol52nnMFRTrunkCableMon=ol52nnMFRTrunkCableMon, ol51nnMAUIMPortHalfStep=ol51nnMAUIMPortHalfStep, ol51nnMMGTModEntry=ol51nnMMGTModEntry, alarmGroup=alarmGroup, chipExpTokenRing=chipExpTokenRing, olAlarm=olAlarm, ol53nnMFBMICModEntry=ol53nnMFBMICModEntry, ol5208MTPModBypsAdminState=ol5208MTPModBypsAdminState, ol53nnMFBMICPortConfig=ol53nnMFBMICPortConfig, ol53nnMMGTPortSlotIndex=ol53nnMMGTPortSlotIndex, ol51nnIxModSwType=ol51nnIxModSwType, ol51nnMFIBModEntry=ol51nnMFIBModEntry, ol51nnMTPLModEntry=ol51nnMTPLModEntry, ol51nnMMGTModStationAddr=ol51nnMMGTModStationAddr, ol51nnMFBPPortDipHipwr=ol51nnMFBPPortDipHipwr, ol51nnMFIBModDipLLW=ol51nnMFIBModDipLLW, ol50nnMHCTLModDipCh1ActCol=ol50nnMHCTLModDipCh1ActCol, ol51nnMFIBPortDipAdminState=ol51nnMFIBPortDipAdminState, ol53nnMMGTPortNeighbor=ol53nnMMGTPortNeighbor, ol51nnMBNCPortSlotIndex=ol51nnMBNCPortSlotIndex, ol51nnREEPortTable=ol51nnREEPortTable, ol51nnMFLPortDipAdminState=ol51nnMFLPortDipAdminState, ol51nnMUTPModEntry=ol51nnMUTPModEntry, ol51nnBEEPortSlotIndex=ol51nnBEEPortSlotIndex, ol53nnMFBMICPortLerCondition=ol53nnMFBMICPortLerCondition, ol53nnMFBMICModTable=ol53nnMFBMICModTable, ol51nnMFIBPortEntry=ol51nnMFIBPortEntry, ol51nnMFBModEntry=ol51nnMFBModEntry, ol51nnMTSModCPURev=ol51nnMTSModCPURev, ol51nnMTSPortSlotIndex=ol51nnMTSPortSlotIndex, ol51nnMFBPortBuddyPort=ol51nnMFBPortBuddyPort, ol51nnMTPPLModEntry=ol51nnMTPPLModEntry, ol53nnMFBMICPortIndex=ol53nnMFBMICPortIndex, ol51nnMTPPLPortIndex=ol51nnMTPPLPortIndex, ol51nnMAUIMPortDipNetwork=ol51nnMAUIMPortDipNetwork, ol53nnMSTPPortSlotIndex=ol53nnMSTPPortSlotIndex, oebm=oebm, ol52nnMFRTrunkCompMode=ol52nnMFRTrunkCompMode, ol53nnMFBMICTrunkEntry=ol53nnMFBMICTrunkEntry, ol51nnMTPCLPortIndex=ol51nnMTPCLPortIndex, ol5208MTPTrunkEntry=ol5208MTPTrunkEntry, portGroup=portGroup, ol51nnMAUIFPortBuddyPort=ol51nnMAUIFPortBuddyPort, ol53nnMSTPModSlotIndex=ol53nnMSTPModSlotIndex, ol51nnMTPModSlotIndex=ol51nnMTPModSlotIndex, ol51nnMTPCL=ol51nnMTPCL, ol51nnMTPPLPortJabber=ol51nnMTPPLPortJabber, ol51nnMFBPPortLLW=ol51nnMFBPPortLLW, ol51nnMTPLPortEntry=ol51nnMTPLPortEntry, ol51nnMAUIFModSlotIndex=ol51nnMAUIFModSlotIndex, ol51nnIxPortDipAdminState=ol51nnIxPortDipAdminState, ol53nnMMGTModTable=ol53nnMMGTModTable, ol51nnMMGTPortIndex=ol51nnMMGTPortIndex, ol51nnMTSPortEntry=ol51nnMTSPortEntry, ol51nnMBNCModEntry=ol51nnMBNCModEntry, ol53nnMMGTModSlotIndex=ol53nnMMGTModSlotIndex, ol51nnRESPortSlotIndex=ol51nnRESPortSlotIndex, ol5208MTPPortStationType=ol5208MTPPortStationType, ol51nnMTSModIpAddress=ol51nnMTSModIpAddress, ol52nnMFRPortStationType=ol52nnMFRPortStationType, focus1=focus1, ol51nnMTSPortOperState=ol51nnMTSPortOperState, ol51nnMFIBModTable=ol51nnMFIBModTable, chipBridge=chipBridge, ol53nnMMGTTrunkEntry=ol53nnMMGTTrunkEntry, ol51nnMTPPLModSlotIndex=ol51nnMTPPLModSlotIndex, ol51nnMUTPModDipNetwork=ol51nnMUTPModDipNetwork, ol51nnRES=ol51nnRES, ol51nnMFIBPortBuddyPort=ol51nnMFIBPortBuddyPort, ol50nnMHCTLModEntry=ol50nnMHCTLModEntry, ol50nnMHCTLModTable=ol50nnMHCTLModTable, ol51nnMFBPPortIndex=ol51nnMFBPPortIndex, ol51nnMUTPPortEntry=ol51nnMUTPPortEntry, ol50nnMCTLModEntry=ol50nnMCTLModEntry, ol52nnBTTPortThroughput=ol52nnBTTPortThroughput, ol5208MTPModSlotIndex=ol5208MTPModSlotIndex, ol51nnMBNCModDipNetwork=ol51nnMBNCModDipNetwork, ol50nnMHCTLModClockStatus=ol50nnMHCTLModClockStatus)
mibBuilder.exportSymbols("CHIPMODULE-MIB", ol53nnMFIBSTModUpStreamOperPath=ol53nnMFIBSTModUpStreamOperPath, ol52nnMTPModTable=ol52nnMTPModTable, ol51nnMAUIMModEntry=ol51nnMAUIMModEntry, ol51nnBEEPortIndex=ol51nnBEEPortIndex, ol50nnMHCTLModTempStatus=ol50nnMHCTLModTempStatus, ol51nnMUTPPortBuddySlot=ol51nnMUTPPortBuddySlot, ol51nnMTPPLPortLinkInteg=ol51nnMTPPLPortLinkInteg, ol53nnMMGTModDownStreamMAC=ol53nnMMGTModDownStreamMAC, ol52nnMFRTrunkExtBcnRecovery=ol52nnMFRTrunkExtBcnRecovery, ol53nnMFBMICPortRemoteMACIndicated=ol53nnMFBMICPortRemoteMACIndicated, ol51nnMAUIMModTable=ol51nnMAUIMModTable, ol51nnMTSModDipNetwork=ol51nnMTSModDipNetwork, ol52nnMTPPortTable=ol52nnMTPPortTable, ol51nnMFLPortIndex=ol51nnMFLPortIndex, ol51nnMAUIMPortBuddyPort=ol51nnMAUIMPortBuddyPort, ol5208MTPPortTable=ol5208MTPPortTable, ol51nnMAUIMPortTable=ol51nnMAUIMPortTable, ol51nnMTPLModDipNetwork=ol51nnMTPLModDipNetwork, ol53nnMFBMICPortSlotIndex=ol53nnMFBMICPortSlotIndex, ol52nnMTPModSlotIndex=ol52nnMTPModSlotIndex, ol51nnMTPPLPortAdminState=ol51nnMTPPLPortAdminState, ol52nnMFRModSlotIndex=ol52nnMFRModSlotIndex, ol53nnMFIBSTPortEntry=ol53nnMFIBSTPortEntry, chipDownload=chipDownload, ol53nnMFIBSTModUpStreamModule=ol53nnMFIBSTModUpStreamModule, ol51nnBEEModProtocols=ol51nnBEEModProtocols, ol51nnMAUIFPortIndex=ol51nnMAUIFPortIndex, ol51nnIxPortSTAPState=ol51nnIxPortSTAPState, ol51nnMFBPPortSlotIndex=ol51nnMFBPPortSlotIndex, ol53nnMFBMICModDownStreamOperPath=ol53nnMFBMICModDownStreamOperPath, ol52nnMTP=ol52nnMTP, ol51nnIx=ol51nnIx, ol51nnMUTPModSlotIndex=ol51nnMUTPModSlotIndex, emm=emm, ol53nnMSTPPortPersonality=ol53nnMSTPPortPersonality, ol53nnMSTPPortPCWithhold=ol53nnMSTPPortPCWithhold, ol53nnMSTPModDownStreamModule=ol53nnMSTPModDownStreamModule, ol51nnMAUIMPortIndex=ol51nnMAUIMPortIndex, ol50nnMRCTL=ol50nnMRCTL, ol50nnMCTLModTable=ol50nnMCTLModTable, ol53nnMFBMICPortConnectState=ol53nnMFBMICPortConnectState, ol51nnREEModEntry=ol51nnREEModEntry, ol51nnMFBModDipNetwork=ol51nnMFBModDipNetwork, ol53nnMSTPPortConnectState=ol53nnMSTPPortConnectState, ol53nnMFIBSTPortBSFlag=ol53nnMFIBSTPortBSFlag, ol53nnMMGTPortEntry=ol53nnMMGTPortEntry, ol53nnMMGTModRingInfo=ol53nnMMGTModRingInfo, ol51nnMFBP=ol51nnMFBP, ol51nnMUTPModTable=ol51nnMUTPModTable, ol51nnMTPPortDipLinkInteg=ol51nnMTPPortDipLinkInteg, ol52nnMTPTrunkTable=ol52nnMTPTrunkTable, ol53nnMFIBSTPortPcmState=ol53nnMFIBSTPortPcmState, ol53nnMMGTModDownStreamModule=ol53nnMMGTModDownStreamModule, ol52nnMFRModDipRingSpeed=ol52nnMFRModDipRingSpeed, ol51nnREEModTable=ol51nnREEModTable, ol51nnMTPPortSquelch=ol51nnMTPPortSquelch, ol52nnMTPModRingSpeed=ol52nnMTPModRingSpeed, ol53nnMMGTModIpAddress=ol53nnMMGTModIpAddress, olAgents=olAgents, ol51nnMTPPLPortDipAdminState=ol51nnMTPPLPortDipAdminState, ol51nnMTPPortDipAdminState=ol51nnMTPPortDipAdminState, ol53nnMSTPPortLerCondition=ol53nnMSTPPortLerCondition, ol51nnMTPCLModSlotIndex=ol51nnMTPCLModSlotIndex, hubSysGroup=hubSysGroup, ol53nnMSTPModUpStreamOperPath=ol53nnMSTPModUpStreamOperPath, ol51nnMTPLPortJabber=ol51nnMTPLPortJabber, ol51nnIxPortDefNetwork=ol51nnIxPortDefNetwork, olSpecMods=olSpecMods, ol52nnMTPPortSlotIndex=ol52nnMTPPortSlotIndex, ol50nnMCTL=ol50nnMCTL, ol51nnREEPortIpAddress=ol51nnREEPortIpAddress, ol53nnMFIBSTPortTable=ol53nnMFIBSTPortTable, ol53nnMSTPPortEntry=ol53nnMSTPPortEntry, ol52nnMMGTTrunkCableMon=ol52nnMMGTTrunkCableMon, ol52nnMMGTTrunkNetMapState=ol52nnMMGTTrunkNetMapState, ol52nnMFRModEntry=ol52nnMFRModEntry, ol51nnMTSModTCPPort=ol51nnMTSModTCPPort, ol5208MTPPortEntry=ol5208MTPPortEntry, ol51nnMFBPortSlotIndex=ol51nnMFBPortSlotIndex, ol51nnREEModStationAddr=ol51nnREEModStationAddr, ol51nnMTPPortIndex=ol51nnMTPPortIndex, ol53nnMFBMICPortTable=ol53nnMFBMICPortTable, ol51nnMTPCLPortEntry=ol51nnMTPCLPortEntry, ol50nnMHCTLModPDBStatus=ol50nnMHCTLModPDBStatus, ol50nnMRCTLModTempStatus=ol50nnMRCTLModTempStatus, ol51nnMAUIM=ol51nnMAUIM, ol51nnMFBModTable=ol51nnMFBModTable, ol53nnMFIBSTModTable=ol53nnMFIBSTModTable, hubGroup=hubGroup, ol53nnMFIBSTTrunkIndex=ol53nnMFIBSTTrunkIndex, chipEcho=chipEcho, olThresh=olThresh, ol51nnIxPortDipNetwork=ol51nnIxPortDipNetwork, ol53nnMSTPTrunkEntry=ol53nnMSTPTrunkEntry, ol52nnMMGTPortIndex=ol52nnMMGTPortIndex, ol50nnMHCTL=ol50nnMHCTL, olEnv=olEnv, ol51nnMTS=ol51nnMTS, ol52nnBTTPortMACAddress=ol52nnBTTPortMACAddress, ol51nnMAUIMPortDipHalfStep=ol51nnMAUIMPortDipHalfStep, ol51nnBEEModSlotIndex=ol51nnBEEModSlotIndex, ol51nnRESModSlotIndex=ol51nnRESModSlotIndex, ol52nnMMGTTrunkSlotIndex=ol52nnMMGTTrunkSlotIndex, ol51nnREEPortDefNetwork=ol51nnREEPortDefNetwork, ol51nnMTPPortDipSquelch=ol51nnMTPPortDipSquelch, ol53nnMSTPPortBSFlag=ol53nnMSTPPortBSFlag, ol51nnMFIBPortIndex=ol51nnMFIBPortIndex, ol53nnMFIBSTModDownStreamModule=ol53nnMFIBSTModDownStreamModule, ol53nnMFBMICTrunkIndex=ol53nnMFBMICTrunkIndex, ol50nnMRCTLModEntry=ol50nnMRCTLModEntry, ol52nnMFRTrunkDipCableMon=ol52nnMFRTrunkDipCableMon, ol51nnMTSPortAdminState=ol51nnMTSPortAdminState, ol51nnMFPPortTable=ol51nnMFPPortTable, ol53nnMFBMICPortPCWithhold=ol53nnMFBMICPortPCWithhold, chipmib02=chipmib02, olConc=olConc, ol51nnMFBPortAdminState=ol51nnMFBPortAdminState, olModules=olModules, ol52nnMTPModCableImp=ol52nnMTPModCableImp, ol5208MTPModDipCableImp=ol5208MTPModDipCableImp, ol51nnBEEPortDipNetwork=ol51nnBEEPortDipNetwork, ol52nnBTTModSoftwareVersion=ol52nnBTTModSoftwareVersion, ol50nnMHCTLModDipCh2ActCol=ol50nnMHCTLModDipCh2ActCol, ol52nnMMGTModRingSpeed=ol52nnMMGTModRingSpeed, ol53nnMFIBSTPortIndex=ol53nnMFIBSTPortIndex, ol52nnMMGTModMasterPriority=ol52nnMMGTModMasterPriority, fmm=fmm, ol53nnMFBMICPortNeighbor=ol53nnMFBMICPortNeighbor, ol51nnMFIBPortSlotIndex=ol51nnMFIBPortSlotIndex, ol52nnMMGTModStationAddr=ol52nnMMGTModStationAddr, ol52nnMMGTPortSlotIndex=ol52nnMMGTPortSlotIndex, ol51nnMFPPortDipAdminState=ol51nnMFPPortDipAdminState, ol51nnMFPPortEntry=ol51nnMFPPortEntry, ol53nnMSTPModUpStreamModule=ol53nnMSTPModUpStreamModule, ol51nnMUTPModDipFFL=ol51nnMUTPModDipFFL, ol53nnMFIBSTModDownStreamOperPath=ol53nnMFIBSTModDownStreamOperPath, ol51nnMTPLPortDipJabber=ol51nnMTPLPortDipJabber, ol51nnMTSPortIndex=ol51nnMTSPortIndex, ol52nnBTTPortConnector=ol52nnBTTPortConnector, ol51nnMTPCLPortDipAdminState=ol51nnMTPCLPortDipAdminState, olEnet=olEnet, ol51nnMFIBModSlotIndex=ol51nnMFIBModSlotIndex, ol51nnRESModProtocols=ol51nnRESModProtocols, ol53nnMMGTModfddiMACPath=ol53nnMMGTModfddiMACPath, ol52nnMFRTrunkTable=ol52nnMFRTrunkTable, trmm=trmm, ol51nnMMGTPortSlotIndex=ol51nnMMGTPortSlotIndex, ol52nnBTTPortEntry=ol52nnBTTPortEntry, ol53nnMSTPModEntry=ol53nnMSTPModEntry, olFDDInet=olFDDInet, ol51nnMTPPLPortBuddyPort=ol51nnMTPPLPortBuddyPort, ol52nnMFRTrunkEntry=ol52nnMFRTrunkEntry, ol51nnMFBPPortEntry=ol51nnMFBPPortEntry, ol51nnMTPPLPortDipNetwork=ol51nnMTPPLPortDipNetwork, ol51nnMFBPPortHipwr=ol51nnMFBPPortHipwr, ol52nnMMGTTrunkExtBcnRecovery=ol52nnMMGTTrunkExtBcnRecovery, ol53nnMSTPModTable=ol53nnMSTPModTable, ol51nnMTP=ol51nnMTP, ol51nnMUTPPortIndex=ol51nnMUTPPortIndex, ol51nnMFIBPortAdminState=ol51nnMFIBPortAdminState, ol51nnMUTPPortAdminState=ol51nnMUTPPortAdminState, ol51nnMBNCPortDipTermination=ol51nnMBNCPortDipTermination, ol51nnMTPLPortSlotIndex=ol51nnMTPLPortSlotIndex, ol53nnMFIBSTModEntry=ol53nnMFIBSTModEntry, ol51nnMTPCLPortSlotIndex=ol51nnMTPCLPortSlotIndex, ol51nnMTPCLPortBuddyPort=ol51nnMTPCLPortBuddyPort, ol51nnMTSModTable=ol51nnMTSModTable, ol5208MTPTrunkCableMon=ol5208MTPTrunkCableMon, ol51nnMTPCLPortTable=ol51nnMTPCLPortTable, ol51nnMFPPortHipwr=ol51nnMFPPortHipwr, online=online, ol51nnMFIBModLLW=ol51nnMFIBModLLW, ol51nnREEModSlotIndex=ol51nnREEModSlotIndex, ol51nnMTPModDipNetwork=ol51nnMTPModDipNetwork, ol53nnMFBMIC=ol53nnMFBMIC, chipExperiment=chipExperiment, dot1dBridge=dot1dBridge, ol53nnMMGTTrunkSlotIndex=ol53nnMMGTTrunkSlotIndex, ol52nnBTTTrunkTable=ol52nnBTTTrunkTable, ol52nnMTPTrunkEntry=ol52nnMTPTrunkEntry, ol51nnMTPLModTable=ol51nnMTPLModTable, ol51nnIxModStationAddr=ol51nnIxModStationAddr, ol51nnMUTPPortDipLinkInteg=ol51nnMUTPPortDipLinkInteg, ol51nnMAUIFPortEntry=ol51nnMAUIFPortEntry, ol52nnBTTPortIndex=ol52nnBTTPortIndex, ol50nnMCTLModTempStatus=ol50nnMCTLModTempStatus, ol52nnMTPModEntry=ol52nnMTPModEntry, ol51nnMFB=ol51nnMFB, ol52nnMMGTPortEntry=ol52nnMMGTPortEntry, workGroupHub=workGroupHub, ol51nnBEEModTable=ol51nnBEEModTable, ol52nnMMGTModTable=ol52nnMMGTModTable, ol51nnMFP=ol51nnMFP, olGroups=olGroups, ol52nnMTPModDipRingSpeed=ol52nnMTPModDipRingSpeed, ol53nnMFIBSTModSlotIndex=ol53nnMFIBSTModSlotIndex, ol53nnMFIBSTPortPCWithhold=ol53nnMFIBSTPortPCWithhold, ol51nnMMGTIpAddress=ol51nnMMGTIpAddress, ol53nnMFBMICModUpStreamModule=ol53nnMFBMICModUpStreamModule, ol53nnMSTPPortConfig=ol53nnMSTPPortConfig, ol51nnMAUIMPortDipSQETest=ol51nnMAUIMPortDipSQETest, ol52nnMMGTModNetworkStatus=ol52nnMMGTModNetworkStatus, ol53nnMMGTModUpStreamModule=ol53nnMMGTModUpStreamModule, ol51nnMAUIMPortCollision=ol51nnMAUIMPortCollision, ol51nnMFPModSlotIndex=ol51nnMFPModSlotIndex, ol51nnMFLModSlotIndex=ol51nnMFLModSlotIndex, ol51nnMTPPortEntry=ol51nnMTPPortEntry, ol51nnMFPPortBuddySlot=ol51nnMFPPortBuddySlot, ol53nnMFIBSTPortConfig=ol53nnMFIBSTPortConfig, ol53nnMSTP=ol53nnMSTP, ol52nnMTPTrunkSlotIndex=ol52nnMTPTrunkSlotIndex, ol51nnMTPPortLinkInteg=ol51nnMTPPortLinkInteg, ol52nnMMGTModEntry=ol52nnMMGTModEntry, ol52nnMFRPortCableImp=ol52nnMFRPortCableImp, ol51nnMMGT=ol51nnMMGT, ol51nnMFBPPortTable=ol51nnMFBPPortTable, ol53nnMSTPPortTable=ol53nnMSTPPortTable, ol51nnMMGTModMasterStatus=ol51nnMMGTModMasterStatus, chipcom=chipcom, ol51nnMFBModDipLLW=ol51nnMFBModDipLLW, chipGen=chipGen, ol51nnMFLPortSlotIndex=ol51nnMFLPortSlotIndex, ol5208MTPTrunkTable=ol5208MTPTrunkTable, ol50nnMRCTLModClockStatus=ol50nnMRCTLModClockStatus, ol51nnMTPPLPortEntry=ol51nnMTPPLPortEntry, ol51nnMTPPortBuddyPort=ol51nnMTPPortBuddyPort, ol52nnMFRTrunkDipAdminState=ol52nnMFRTrunkDipAdminState, ol53nnMSTPPortPcmState=ol53nnMSTPPortPcmState, ol53nnMFBMICModRingInfo=ol53nnMFBMICModRingInfo, ol52nnMFRPortDipAdminState=ol52nnMFRPortDipAdminState, ol53nnMFIBSTPortRemoteMACIndicated=ol53nnMFIBSTPortRemoteMACIndicated, olNets=olNets, ol51nnMAUIFPortAdminState=ol51nnMAUIFPortAdminState, ol53nnMFIBSTPortNeighbor=ol53nnMFIBSTPortNeighbor, ol51nnMAUIMPortEntry=ol51nnMAUIMPortEntry, ol51nnMBNCPortDipGround=ol51nnMBNCPortDipGround, ol51nnRESPortEntry=ol51nnRESPortEntry, ol53nnMMGTPortLerCondition=ol53nnMMGTPortLerCondition, ol51nnMFLModEntry=ol51nnMFLModEntry, ol51nnBEEPortTable=ol51nnBEEPortTable, ol51nnMFBModSlotIndex=ol51nnMFBModSlotIndex, ol53nnMSTPModRingInfo=ol53nnMSTPModRingInfo, ol51nnMAUIMPortDipAdminState=ol51nnMAUIMPortDipAdminState, ol53nnMFIBST=ol53nnMFIBST, ol52nnMMGT=ol52nnMMGT, ol53nnMFBMICPortBSFlag=ol53nnMFBMICPortBSFlag, ol5208MTPModTable=ol5208MTPModTable, ol5208MTPModEntry=ol5208MTPModEntry, ol51nnMFIBPortTable=ol51nnMFIBPortTable, ol51nnMTPModCrossover=ol51nnMTPModCrossover, ol51nnMFIBModDipNetwork=ol51nnMFIBModDipNetwork, ol52nnMFR=ol52nnMFR, ol51nnRESPortDefNetwork=ol51nnRESPortDefNetwork, ol51nnMFPPortDipLLW=ol51nnMFPPortDipLLW)
mibBuilder.exportSymbols("CHIPMODULE-MIB", ol53nnMFBMICPortEntry=ol53nnMFBMICPortEntry, ol51nnMMGTPortTable=ol51nnMMGTPortTable, ol52nnMFRModRingSpeed=ol52nnMFRModRingSpeed, ol51nnMUTP=ol51nnMUTP, ol51nnMTPPLPortDipLinkInteg=ol51nnMTPPLPortDipLinkInteg, ol53nnMMGTModMasterPriority=ol53nnMMGTModMasterPriority, ol51nnMAUIFPortSlotIndex=ol51nnMAUIFPortSlotIndex, ol51nnMUTPPortBuddyPort=ol51nnMUTPPortBuddyPort, ol51nnREEPortSlotIndex=ol51nnREEPortSlotIndex, ol51nnMTPCLModMonitorConn=ol51nnMTPCLModMonitorConn, ol51nnIxModDipPromDefaults=ol51nnIxModDipPromDefaults, ol52nnMMGTModMasterStatus=ol52nnMMGTModMasterStatus, ol51nnIxModProtocols=ol51nnIxModProtocols, ol52nnBTTTrunkSlotIndex=ol52nnBTTTrunkSlotIndex, ol51nnREEModProtocols=ol51nnREEModProtocols, ol52nnMTPTrunkDipAdminState=ol52nnMTPTrunkDipAdminState, ol51nnMAUIFModEntry=ol51nnMAUIFModEntry, ol51nnMUTPModFFL=ol51nnMUTPModFFL, ol51nnMTPPLPortDipJabber=ol51nnMTPPLPortDipJabber, ol51nnMFPPortDipNetwork=ol51nnMFPPortDipNetwork, ol52nnMFRPortTable=ol52nnMFRPortTable, ol51nnMTPCLModConn1DipNetwork=ol51nnMTPCLModConn1DipNetwork, ol52nnBTTPortSTAPState=ol52nnBTTPortSTAPState, ol51nnMTPLPortLinkInteg=ol51nnMTPLPortLinkInteg, ol51nnBEEPortEntry=ol51nnBEEPortEntry, ol51nnMTPCLModConn1Network=ol51nnMTPCLModConn1Network, ol51nnMUTPPortLinkInteg=ol51nnMUTPPortLinkInteg, ol53nnMFBMICModSlotIndex=ol53nnMFBMICModSlotIndex, ol53nnMFBMICModDownStreamModule=ol53nnMFBMICModDownStreamModule, ol53nnMFBMICModUpStreamOperPath=ol53nnMFBMICModUpStreamOperPath, ol52nnMTPPortIndex=ol52nnMTPPortIndex, olThreshControl=olThreshControl, ol51nnIxPortIndex=ol51nnIxPortIndex, ol50nnMRCTLModTable=ol50nnMRCTLModTable, ol51nnMTPCLModConn2DipNetwork=ol51nnMTPCLModConn2DipNetwork, ol51nnMTPCLPortLinkInteg=ol51nnMTPCLPortLinkInteg, ol53nnMFBMICTrunkTable=ol53nnMFBMICTrunkTable, ol51nnMTPLPortBuddyPort=ol51nnMTPLPortBuddyPort, ol52nnBTT=ol52nnBTT, ol51nnMUTPModDipCrossover=ol51nnMUTPModDipCrossover, ol51nnMFBPortBuddySlot=ol51nnMFBPortBuddySlot, ol51nnMMGTModSlotIndex=ol51nnMMGTModSlotIndex, ol53nnMMGTPortConfig=ol53nnMMGTPortConfig, ol51nnMTPCLPortBuddySlot=ol51nnMTPCLPortBuddySlot, chipTTY=chipTTY, ol51nnMTPL=ol51nnMTPL, ol52nnMTPPortEntry=ol52nnMTPPortEntry, ol51nnMFLPortBuddyPort=ol51nnMFLPortBuddyPort, ol51nnMFBPPortAdminState=ol51nnMFBPPortAdminState, ol53nnMMGTPortBSFlag=ol53nnMMGTPortBSFlag, ol51nnRESPortIndex=ol51nnRESPortIndex, ol51nnMBNCPortEntry=ol51nnMBNCPortEntry, ol51nnMTPPLPortTable=ol51nnMTPPLPortTable, ol52nnMFRTrunkIndex=ol52nnMFRTrunkIndex, ol51nnMTPCLModAutoPartition=ol51nnMTPCLModAutoPartition, ol53nnMFIBSTTrunkEntry=ol53nnMFIBSTTrunkEntry, ol52nnBTTTrunkEntry=ol52nnBTTTrunkEntry, ol50nnMHCTLModOperState=ol50nnMHCTLModOperState, ol52nnBTTModBridgeType=ol52nnBTTModBridgeType, ol5208MTPPortIndex=ol5208MTPPortIndex, ol51nnREE=ol51nnREE, ol51nnMTPPortTable=ol51nnMTPPortTable, ol51nnMBNCPortTable=ol51nnMBNCPortTable, ol51nnIxModSlotIndex=ol51nnIxModSlotIndex, ol53nnMFBMICTrunkSlotIndex=ol53nnMFBMICTrunkSlotIndex, ol51nnMBNCPortIndex=ol51nnMBNCPortIndex, ol51nnRESModEntry=ol51nnRESModEntry, hardwareGroup=hardwareGroup, ol51nnIxModTable=ol51nnIxModTable, ol51nnREEPortEntry=ol51nnREEPortEntry, ol51nnMTPCLModEntry=ol51nnMTPCLModEntry, ol51nnMAUIFModTable=ol51nnMAUIFModTable, ol51nnMTPPLPortBuddySlot=ol51nnMTPPLPortBuddySlot, ol51nnMTPLModSlotIndex=ol51nnMTPLModSlotIndex, ol51nnMFBPModEntry=ol51nnMFBPModEntry, ol51nnRESPortTable=ol51nnRESPortTable, ol5208MTP=ol5208MTP)
