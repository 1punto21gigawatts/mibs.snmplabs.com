#
# PySNMP MIB module FMS100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FMS100-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, iso, Unsigned32, Counter32, IpAddress, ModuleIdentity, TimeTicks, MibIdentifier, Bits, enterprises, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "iso", "Unsigned32", "Counter32", "IpAddress", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Bits", "enterprises", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8))
cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9))
linkBuilderFMS100_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 19)).setLabel("linkBuilderFMS100-mib")
linkBuilderFMS100 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 20))
linkBuilderFMS100_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 10)).setLabel("linkBuilderFMS100-cards")
linkBuilderFMS100_cards_12utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 10, 1)).setLabel("linkBuilderFMS100-cards-12utp")
hubEnviroObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 19, 2))
hubEnviroGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 19, 2, 1), )
if mibBuilder.loadTexts: hubEnviroGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: hubEnviroGroupTable.setDescription('Table of Environment information about the group.')
hubEnviroGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 19, 2, 1, 1), ).setIndexNames((0, "FMS100-MIB", "hubServiceId"), (0, "FMS100-MIB", "hubGroupIndex"))
if mibBuilder.loadTexts: hubEnviroGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hubEnviroGroupEntry.setDescription('An Entry in the table, containing information about a single group.')
hubServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubServiceId.setStatus('mandatory')
if mibBuilder.loadTexts: hubServiceId.setDescription('This object identifies the repeater which this entry contains information. For FMS100, this is a constant 1.')
hubGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hubGroupIndex.setDescription('This object identifies the group within the repeater for which this entry contains information. This number is never greater than paRptrGroupCapacity.')
hubHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubHighTemp.setStatus('mandatory')
if mibBuilder.loadTexts: hubHighTemp.setDescription(' This variable shows the current temperature status of the hub. If the variable changed from false to true, The enterprise-specific trap(a3comHighTemp) will be sent to the configured SNMP manager stations.')
hubFanFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubFanFailed.setStatus('mandatory')
if mibBuilder.loadTexts: hubFanFailed.setDescription(' This variable shows the current Fan Fail status of the hub. If the variable changed from false to true, The enterprise-specific trap(a3comFanFailed) will be sent to the configured SNMP manager stations.')
pa100RptrSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 19, 3))
pa100RptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 19, 3, 1))
pa100GroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 19, 3, 2))
pa100PortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 19, 3, 3))
pa100RptrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 19, 3, 1, 1), )
if mibBuilder.loadTexts: pa100RptrTable.setStatus('mandatory')
if mibBuilder.loadTexts: pa100RptrTable.setDescription('Table of descriptive and STATUS information about the 100Mb Ethernet Hub')
pa100RptrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 19, 3, 1, 1, 1), ).setIndexNames((0, "FMS100-MIB", "pa100RptrServiceId"))
if mibBuilder.loadTexts: pa100RptrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pa100RptrEntry.setDescription('An entry in the table, containing information about the repeater.')
pa100RptrServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100RptrServiceId.setStatus('mandatory')
if mibBuilder.loadTexts: pa100RptrServiceId.setDescription('This object identifies the repeater which this entry contains information.')
pa100RptrClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classI", 1), ("classII", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100RptrClass.setStatus('mandatory')
if mibBuilder.loadTexts: pa100RptrClass.setDescription('The pa100RptrClass is the repeater class as defined in 802.3 standard. Class I: A type of repeater set specified such that in a maximum length segment topology, only one such repeater set may exist between any two DTEs within a single collision domain. Class II: A type of repeater set specified such that in a maximum length segment topology, only two such repeater set may exist between any two DTEs within a single collision domain.')
pa100RptrStackCardTypeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100RptrStackCardTypeInfo.setStatus('mandatory')
if mibBuilder.loadTexts: pa100RptrStackCardTypeInfo.setDescription("Supplies the information about the type of Cards in the repeater stack. There is one octet for each unit in the stack. Each octet can have the following values: 0 : undetected(power off or non-exist) 1 : repeater card 2 : management unit 3 : bridge/management card 4 : backup management(/bridge) card 5 : powered off 6 : unknown Value 0 indicates either the powered off card's cardindex is higher than all of the powered on cards or the card is non-existant. Value 5 indicates that the card is powered off and there are powered on card(s) with higher index number. Octet offset(started 0) N indicates N+1 th card information. I.e. The first octet indicates card 1's information.")
pa100PortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1), )
if mibBuilder.loadTexts: pa100PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortTable.setDescription('Table of descriptive and STATUS information about the ports that is specific to 100Mb Ethernet Hub')
pa100PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1, 1), ).setIndexNames((0, "FMS100-MIB", "pa100PortServiceId"), (0, "FMS100-MIB", "pa100PortGroupIndex"), (0, "FMS100-MIB", "pa100PortIndex"))
if mibBuilder.loadTexts: pa100PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortEntry.setDescription('An entry in the table, containing information about a single port.')
pa100PortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100PortServiceId.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortServiceId.setDescription('This object identifies the repeater which this entry contains information.')
pa100PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100PortGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortGroupIndex.setDescription('This object identifies the group containing the port for which this entry contains information.')
pa100PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortIndex.setDescription('This object identifies the port within the group for which this entry contains information. This value can never be greater than paRptrGroupPortCapacity for the associated group.')
pa100PortIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100PortIsolate.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortIsolate.setDescription('Increment counter by each time that the repeater port automatically isolates as a consequence of false carrier events. The conditions which cause a port to automatically isolate are as defined by the transition from the False Carrier state to the Link Unstable state of the carrier integrity state diagram.(802.3 std)')
pa100PortSymbolErrorDuringPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 19, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pa100PortSymbolErrorDuringPacket.setStatus('mandatory')
if mibBuilder.loadTexts: pa100PortSymbolErrorDuringPacket.setDescription('A count of the number of times when valid length packet was received at the port and there was at least one occurrence of an invalid symbol. This can increment only once per valid carrier event. A collision presence at any port of the repeater containing port N, will not cause this attribute to increment. ')
mibBuilder.exportSymbols("FMS100-MIB", hubGroupIndex=hubGroupIndex, pa100PortServiceId=pa100PortServiceId, pa100RptrInfo=pa100RptrInfo, linkBuilderFMS100_cards=linkBuilderFMS100_cards, linkBuilderFMS100_cards_12utp=linkBuilderFMS100_cards_12utp, hubEnviroGroupEntry=hubEnviroGroupEntry, linkBuilderFMS100_mib=linkBuilderFMS100_mib, pa100RptrSpecific=pa100RptrSpecific, hubEnviroObject=hubEnviroObject, pa100RptrEntry=pa100RptrEntry, hubEnviroGroupTable=hubEnviroGroupTable, hub=hub, pa100PortTable=pa100PortTable, pa100PortIsolate=pa100PortIsolate, pa100GroupInfo=pa100GroupInfo, pa100PortGroupIndex=pa100PortGroupIndex, cards=cards, pa100RptrServiceId=pa100RptrServiceId, pa100RptrStackCardTypeInfo=pa100RptrStackCardTypeInfo, pa100RptrTable=pa100RptrTable, hubFanFailed=hubFanFailed, pa100PortEntry=pa100PortEntry, pa100PortSymbolErrorDuringPacket=pa100PortSymbolErrorDuringPacket, pa100PortInfo=pa100PortInfo, a3Com=a3Com, hubServiceId=hubServiceId, linkBuilderFMS100=linkBuilderFMS100, pa100PortIndex=pa100PortIndex, products=products, hubHighTemp=hubHighTemp, pa100RptrClass=pa100RptrClass)
