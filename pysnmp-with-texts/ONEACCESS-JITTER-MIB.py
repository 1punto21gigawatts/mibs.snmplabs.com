#
# PySNMP MIB module ONEACCESS-JITTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ONEACCESS-JITTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:34:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
OwnerString, = mibBuilder.importSymbols("IF-MIB", "OwnerString")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
oacMIBModules, oacRequirements, oacExpIMManagement = mibBuilder.importSymbols("ONEACCESS-GLOBAL-REG", "oacMIBModules", "oacRequirements", "oacExpIMManagement")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, Bits, MibIdentifier, Counter64, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, ObjectIdentity, TimeTicks, ModuleIdentity, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "MibIdentifier", "Counter64", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Integer32", "iso")
RowStatus, DisplayString, TextualConvention, DateAndTime, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "DateAndTime", "TimeStamp")
oacJitterMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 13191, 1, 100, 2000))
oacJitterMIBModule.setRevisions(('2011-10-27 00:00', '2010-07-08 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: oacJitterMIBModule.setRevisionsDescriptions(('Fixed minor corrections.', 'This MIB module describes a MIB for getting statistics as jitter calculation, transit time measurement and loss packet rate between nodes',))
if mibBuilder.loadTexts: oacJitterMIBModule.setLastUpdated('201110270000Z')
if mibBuilder.loadTexts: oacJitterMIBModule.setOrganization(' OneAccess ')
if mibBuilder.loadTexts: oacJitterMIBModule.setContactInfo('Pascal KESTELOOT Postal: ONE ACCESS 381 Avenue du Gnral de Gaulle 92140 Clamart, France FRANCE Tel: (+33) 01 41 87 70 00 Fax: (+33) 01 41 87 74 00 E-mail: pascal.kesteloot@oneaccess-net.com')
if mibBuilder.loadTexts: oacJitterMIBModule.setDescription('Contact updated')
class OacJitterControlJitterType(TextualConvention, Integer32):
    description = 'Describes the type of probe to execute.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jitter-ICMP-TIMESTAMP", 1), ("jitter-UDP-PING", 2), ("jitter-UDP-PING-TIMESTAMP", 3))

class OacJitterResponseSense(TextualConvention, Integer32):
    description = 'Values for status of the operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16))
    namedValues = NamedValues(("ok", 1), ("disconnected", 2), ("overThreshold", 3), ("timeout", 4), ("busy", 5), ("notConnected", 6), ("dropped", 7), ("sequenceError", 8), ("verifyError", 9), ("applicationSpecific", 10), ("noStatisticsAvailable", 11), ("error", 16))

oacExpIMJitter = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5))
oacJitterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1))
oacJitterControlTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1), )
if mibBuilder.loadTexts: oacJitterControlTable.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlTable.setDescription('Config Table for JITTER probe.')
oacJitterControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1), ).setIndexNames((0, "ONEACCESS-JITTER-MIB", "oacJitterControlIndex"))
if mibBuilder.loadTexts: oacJitterControlEntry.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlEntry.setDescription('List of objects defining a conceptual JITTER probe.')
oacJitterControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: oacJitterControlIndex.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlIndex.setDescription('Identifies a row (session number) in the control table.')
oacJitterControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 2), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlOwner.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlOwner.setDescription('Use as a comment field.')
oacJitterControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 3), OacJitterControlJitterType().clone('jitter-ICMP-TIMESTAMP')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlType.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlType.setDescription('Specifies the protocol used by the probe.')
oacJitterControlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlFrequency.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlFrequency.setDescription('Defines the time in seconds between two probes.')
oacJitterControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlTimeout.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlTimeout.setDescription('Defines the maximum time of waiting a response to a packet.')
oacJitterControlTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlTargetAddress.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlTargetAddress.setDescription('Specifies the IP address of the target.')
oacJitterControlTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlTargetPort.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlTargetPort.setDescription('Specifies the port number of the target.')
oacJitterControlSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlSourceAddress.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlSourceAddress.setDescription('Specifies the source IP address.')
oacJitterControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 9), Integer32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlInterval.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlInterval.setDescription('Time interval between each packet of a probe.')
oacJitterControlPktDataRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 10), Integer32().clone(32)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlPktDataRequestSize.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlPktDataRequestSize.setDescription('Specifies the size of the packet to send.')
oacJitterControlPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 11), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlPacketCount.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlPacketCount.setDescription('Number of packets to send for a probe.')
oacJitterControlTos = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlTos.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlTos.setDescription('This object represents the type of service in an IP header.')
oacJitterControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacJitterControlStatus.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlStatus.setDescription('The status of the jitter probe (see definition from SNMPv2-TC module).')
oacJitterControlVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacJitterControlVrfName.setStatus('current')
if mibBuilder.loadTexts: oacJitterControlVrfName.setDescription('VRF name')
oacJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2), )
if mibBuilder.loadTexts: oacJitterStatsTable.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsTable.setDescription('Statistics Table for JITTER probe.')
oacJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1), ).setIndexNames((0, "ONEACCESS-JITTER-MIB", "oacJitterControlIndex"))
if mibBuilder.loadTexts: oacJitterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsEntry.setDescription('List of objects defining the results for JITTER probe.')
oacJitterStatsCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 2), OacJitterResponseSense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsCompleted.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsCompleted.setDescription('The status of the last measure.')
oacJitterStatsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsTime.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsTime.setDescription('The date of the last measure.')
oacJitterStatsNumRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumRTT.setDescription('The total number of probe operations that have been done.')
oacJitterStatsPacketRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsPacketRecv.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsPacketRecv.setDescription('The number of received packets during a probe test.')
oacJitterStatsAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsAvgRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsAvgRTT.setDescription('The average value of the Round Trip Time measures.')
oacJitterStatsSumRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumRTT.setDescription('The sum of the Round Trip Time measures.')
oacJitterStatsMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsMinRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsMinRTT.setDescription('The minimum value of the Round Trip Time measures.')
oacJitterStatsMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsMaxRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsMaxRTT.setDescription('The maximum value of the Round Trip Time measures.')
oacJitterStatsSumPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumPosJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumPosJitter.setDescription('The sum of positive jitter measures (Source <-> Target).')
oacJitterStatsNumPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumPosJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumPosJitter.setDescription('The number of positive jitter measures (Source <-> Target).')
oacJitterStatsSumNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumNegJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumNegJitter.setDescription('The sum of negative jitter measures (Source <-> Target).')
oacJitterStatsNumNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumNegJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumNegJitter.setDescription('The number of negative jitter mesures (Source <-> Target).')
oacJitterStatsSumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumPosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumPosSD.setDescription('The sum of positive jitter measures (Source -> Target).')
oacJitterStatsNumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumPosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumPosSD.setDescription('The number of positive jitter measures (Source -> Target).')
oacJitterStatsSumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumNegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumNegSD.setDescription('The sum of negative jitter measures (Source -> Target).')
oacJitterStatsNumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumNegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumNegSD.setDescription('The number of negative jitter measures (Source -> Target).')
oacJitterStatsSumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumPosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumPosDS.setDescription('The sum of positive jitter measures (Source <- Target).')
oacJitterStatsNumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumPosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumPosDS.setDescription('The number of positive jitter measures (Source <- Target).')
oacJitterStatsSumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSumNegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSumNegDS.setDescription('The sum of negative jitter measures (Source <- Target).')
oacJitterStatsNumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsNumNegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsNumNegDS.setDescription('The number of negative jitter measures (Source <- Target).')
oacJitterStatsPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsPacketLossSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsPacketLossSD.setDescription('The number of packets lost when sent from source to target.')
oacJitterStatsPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsPacketLossDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsPacketLossDS.setDescription('The number of packets lost when sent from target to source.')
oacJitterStatsPacketOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsPacketOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsPacketOutOfSequence.setDescription('The number of packets arrived out of sequence.')
oacJitterStatsPacketLateArrival = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsPacketLateArrival.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsPacketLateArrival.setDescription('The number of packets that arrived after the timeout.')
oacJitterStatsPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsPacketLoss.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsPacketLoss.setDescription('The number of packets that are lost for which we cannot determine the direction.')
oacJitterStatsMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsMaxPosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsMaxPosSD.setDescription('The maximum measure of positive jitter measures (Source -> Target).')
oacJitterStatsMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsMaxNegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsMaxNegSD.setDescription('The maximum measure of negative jitter measures (Source -> Target).')
oacJitterStatsMaxPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsMaxPosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsMaxPosDS.setDescription('The maximum measure of positive jitter measures (Source <- Target).')
oacJitterStatsMaxNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsMaxNegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsMaxNegDS.setDescription('The maximum measure of negative jitter measures (Source <- Target).')
oacJitterStatsSum2PosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSum2PosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSum2PosSD.setDescription('The sum of squared positive jitter measures (Source -> Target).')
oacJitterStatsSum2NegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSum2NegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSum2NegSD.setDescription('The sum of squared negative jitter measures (Source -> Target).')
oacJitterStatsSum2PosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSum2PosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSum2PosDS.setDescription('The sum of squared positive jitter measures (Source <- Target).')
oacJitterStatsSum2NegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsSum2NegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsSum2NegDS.setDescription('The sum of squared negative jitter measures (Source <- Target).')
oacJitterStatsDeviationSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsDeviationSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsDeviationSD.setDescription('Standard jitter measures deviation (Source -> Target).')
oacJitterStatsDeviationDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsDeviationDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsDeviationDS.setDescription('Standard jitter measures deviation (Source <- Target).')
oacJitterStatsHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3), )
if mibBuilder.loadTexts: oacJitterStatsHistoryTable.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryTable.setDescription('Statistics History Table for JITTER probe.')
oacJitterStatsHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1), ).setIndexNames((0, "ONEACCESS-JITTER-MIB", "oacJitterControlIndex"), (0, "ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryIndex"))
if mibBuilder.loadTexts: oacJitterStatsHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryEntry.setDescription('List of objects defining the history results for JITTER probe.')
oacJitterStatsHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryIndex.setDescription('The index of the entry.')
oacJitterStatsHistoryCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 2), OacJitterResponseSense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryCompleted.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryCompleted.setDescription('The status of the last measure.')
oacJitterStatsHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryTime.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryTime.setDescription('The date of the last measure.')
oacJitterStatsHistoryNumRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumRTT.setDescription('The total number of probe operations that have been done.')
oacJitterStatsHistoryPacketRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketRecv.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketRecv.setDescription('The number of received packets during a probe test.')
oacJitterStatsHistoryAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryAvgRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryAvgRTT.setDescription('The average value of the Round Trip Time measures.')
oacJitterStatsHistorySumRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumRTT.setDescription('The sum of the Round Trip Time measures.')
oacJitterStatsHistoryMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryMinRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryMinRTT.setDescription('The minimum value of the Round Trip Time measures.')
oacJitterStatsHistoryMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxRTT.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxRTT.setDescription('The maximum value of the Round Trip Time measures.')
oacJitterStatsHistorySumPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumPosJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumPosJitter.setDescription('The sum of positive jitter measures (Source <-> Target).')
oacJitterStatsHistoryNumPosJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumPosJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumPosJitter.setDescription('The number of positive jitter measures (Source <-> Target).')
oacJitterStatsHistorySumNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumNegJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumNegJitter.setDescription('The sum of negative jitter measures (Source <-> Target).')
oacJitterStatsHistoryNumNegJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumNegJitter.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumNegJitter.setDescription('The number of negative jitter mesures (Source <-> Target).')
oacJitterStatsHistorySumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumPosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumPosSD.setDescription('The sum of positive jitter measures (Source -> Target).')
oacJitterStatsHistoryNumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumPosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumPosSD.setDescription('The number of positive jitter measures (Source -> Target).')
oacJitterStatsHistorySumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumNegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumNegSD.setDescription('The sum of negative jitter measures (Source -> Target).')
oacJitterStatsHistoryNumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumNegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumNegSD.setDescription('The number of negative jitter measures (Source -> Target).')
oacJitterStatsHistorySumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumPosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumPosDS.setDescription('The sum of positive jitter measures (Source <- Target).')
oacJitterStatsHistoryNumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumPosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumPosDS.setDescription('The number of positive jitter measures (Source <- Target).')
oacJitterStatsHistorySumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySumNegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySumNegDS.setDescription('The sum of negative jitter measures (Source <- Target).')
oacJitterStatsHistoryNumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryNumNegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryNumNegDS.setDescription('The number of negative jitter measures (Source <- Target).')
oacJitterStatsHistoryPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLossSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLossSD.setDescription('The number of packets lost when sent from source to target.')
oacJitterStatsHistoryPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLossDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLossDS.setDescription('The number of packets lost when sent from target to source.')
oacJitterStatsHistoryPacketOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketOutOfSequence.setDescription('The number of packets arrived out of sequence.')
oacJitterStatsHistoryPacketLateArrival = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLateArrival.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLateArrival.setDescription('The number of packets that arrived after the timeout.')
oacJitterStatsHistoryPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLoss.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryPacketLoss.setDescription('The number of packets that are lost for which we cannot determine the direction.')
oacJitterStatsHistoryMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxPosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxPosSD.setDescription('The maximum measure of positive jitter measures (Source -> Target).')
oacJitterStatsHistoryMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxNegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxNegSD.setDescription('The maximum measure of negative jitter measures (Source -> Target).')
oacJitterStatsHistoryMaxPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxPosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxPosDS.setDescription('The maximum measure of positive jitter measures (Source <- Target).')
oacJitterStatsHistoryMaxNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxNegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryMaxNegDS.setDescription('The maximum measure of negative jitter measures (Source <- Target).')
oacJitterStatsHistorySum2PosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySum2PosSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySum2PosSD.setDescription('The sum of squared positive jitter measures (Source -> Target).')
oacJitterStatsHistorySum2NegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySum2NegSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySum2NegSD.setDescription('The sum of squared negative jitter measures (Source -> Target).')
oacJitterStatsHistorySum2PosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySum2PosDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySum2PosDS.setDescription('The sum of squared positive jitter measures (Source <- Target).')
oacJitterStatsHistorySum2NegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistorySum2NegDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistorySum2NegDS.setDescription('The sum of squared negative jitter measures (Source <- Target).')
oacJitterStatsHistoryDeviationSD = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryDeviationSD.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryDeviationSD.setDescription('Standard jitter measures deviation (Source -> Target).')
oacJitterStatsHistoryDeviationDS = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 5, 1, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacJitterStatsHistoryDeviationDS.setStatus('current')
if mibBuilder.loadTexts: oacJitterStatsHistoryDeviationDS.setDescription('Standard jitter measures deviation (Source <- Target).')
oacJitterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 5, 2000))
oacJitterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 5, 2000, 1))
oacJitterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 5, 2000, 2))
oacJitterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 13191, 5, 2000, 2, 1)).setObjects(("ONEACCESS-JITTER-MIB", "oacJitterGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oacJitterCompliance = oacJitterCompliance.setStatus('current')
if mibBuilder.loadTexts: oacJitterCompliance.setDescription('The compliance statement for agents that support the ONEACCESS-JITTER-MIB.')
oacJitterGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13191, 5, 2000, 1, 1)).setObjects(("ONEACCESS-JITTER-MIB", "oacJitterControlOwner"), ("ONEACCESS-JITTER-MIB", "oacJitterControlType"), ("ONEACCESS-JITTER-MIB", "oacJitterControlFrequency"), ("ONEACCESS-JITTER-MIB", "oacJitterControlTimeout"), ("ONEACCESS-JITTER-MIB", "oacJitterControlStatus"), ("ONEACCESS-JITTER-MIB", "oacJitterControlTargetAddress"), ("ONEACCESS-JITTER-MIB", "oacJitterControlTargetPort"), ("ONEACCESS-JITTER-MIB", "oacJitterControlSourceAddress"), ("ONEACCESS-JITTER-MIB", "oacJitterControlInterval"), ("ONEACCESS-JITTER-MIB", "oacJitterControlPktDataRequestSize"), ("ONEACCESS-JITTER-MIB", "oacJitterControlPacketCount"), ("ONEACCESS-JITTER-MIB", "oacJitterControlTos"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsCompleted"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsTime"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsPacketRecv"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsAvgRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsMinRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsMaxRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumPosJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumPosJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumNegJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumNegJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumPosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumPosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsMaxPosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumNegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumNegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsMaxNegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumPosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumPosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsMaxPosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSumNegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsNumNegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsMaxNegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSum2PosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSum2NegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSum2PosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsSum2NegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsDeviationSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsDeviationDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsPacketLossSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsPacketLossDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsPacketOutOfSequence"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsPacketLateArrival"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsPacketLoss"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryCompleted"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryTime"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryPacketRecv"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryAvgRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryMinRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryMaxRTT"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumPosJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumPosJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumNegJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumNegJitter"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumPosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumPosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumNegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumNegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumPosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumPosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySumNegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryNumNegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryPacketLossSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryPacketLossDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryPacketOutOfSequence"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryPacketLateArrival"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryPacketLoss"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryMaxPosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryMaxNegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryMaxPosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryMaxNegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySum2PosSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySum2NegSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySum2PosDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistorySum2NegDS"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryDeviationSD"), ("ONEACCESS-JITTER-MIB", "oacJitterStatsHistoryDeviationDS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oacJitterGeneralGroup = oacJitterGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: oacJitterGeneralGroup.setDescription('This group is mandatory for Jitter entity.')
mibBuilder.exportSymbols("ONEACCESS-JITTER-MIB", oacJitterStatsHistorySumPosDS=oacJitterStatsHistorySumPosDS, oacJitterStatsSum2NegDS=oacJitterStatsSum2NegDS, oacJitterControlTable=oacJitterControlTable, oacJitterStatsNumRTT=oacJitterStatsNumRTT, oacJitterControlTargetPort=oacJitterControlTargetPort, oacJitterStatsMaxNegDS=oacJitterStatsMaxNegDS, oacJitterStatsHistorySumNegJitter=oacJitterStatsHistorySumNegJitter, oacJitterStatsHistorySumRTT=oacJitterStatsHistorySumRTT, oacJitterStatsHistoryEntry=oacJitterStatsHistoryEntry, oacJitterStatsPacketLoss=oacJitterStatsPacketLoss, oacJitterControlPktDataRequestSize=oacJitterControlPktDataRequestSize, oacJitterStatsHistoryPacketLossSD=oacJitterStatsHistoryPacketLossSD, oacJitterStatsHistorySumNegDS=oacJitterStatsHistorySumNegDS, oacJitterStatsHistoryMaxNegDS=oacJitterStatsHistoryMaxNegDS, oacJitterStatsHistoryNumPosSD=oacJitterStatsHistoryNumPosSD, oacJitterStatsMaxPosDS=oacJitterStatsMaxPosDS, oacJitterStatsSum2NegSD=oacJitterStatsSum2NegSD, oacJitterStatsHistoryPacketLossDS=oacJitterStatsHistoryPacketLossDS, oacJitterStatsMaxNegSD=oacJitterStatsMaxNegSD, oacJitterStatsHistoryIndex=oacJitterStatsHistoryIndex, oacJitterStatsHistoryPacketLoss=oacJitterStatsHistoryPacketLoss, oacJitterControlType=oacJitterControlType, oacJitterStatsHistorySum2NegSD=oacJitterStatsHistorySum2NegSD, oacJitterStatsHistorySum2NegDS=oacJitterStatsHistorySum2NegDS, oacJitterControlOwner=oacJitterControlOwner, oacJitterStatsPacketLossSD=oacJitterStatsPacketLossSD, oacJitterStatsSum2PosDS=oacJitterStatsSum2PosDS, oacJitterStatsHistoryPacketRecv=oacJitterStatsHistoryPacketRecv, oacJitterStatsPacketLateArrival=oacJitterStatsPacketLateArrival, oacJitterObjects=oacJitterObjects, oacJitterStatsHistoryMaxNegSD=oacJitterStatsHistoryMaxNegSD, oacJitterStatsTime=oacJitterStatsTime, oacJitterStatsNumPosSD=oacJitterStatsNumPosSD, oacJitterStatsNumNegDS=oacJitterStatsNumNegDS, oacJitterControlPacketCount=oacJitterControlPacketCount, oacJitterStatsHistoryDeviationSD=oacJitterStatsHistoryDeviationSD, oacJitterStatsSumRTT=oacJitterStatsSumRTT, oacJitterControlIndex=oacJitterControlIndex, oacJitterStatsPacketRecv=oacJitterStatsPacketRecv, oacJitterStatsPacketLossDS=oacJitterStatsPacketLossDS, oacJitterStatsHistoryMaxRTT=oacJitterStatsHistoryMaxRTT, oacJitterStatsHistoryMaxPosSD=oacJitterStatsHistoryMaxPosSD, oacJitterStatsTable=oacJitterStatsTable, oacJitterControlTos=oacJitterControlTos, oacJitterStatsMaxRTT=oacJitterStatsMaxRTT, oacJitterMIBModule=oacJitterMIBModule, oacJitterStatsHistoryNumRTT=oacJitterStatsHistoryNumRTT, oacJitterControlVrfName=oacJitterControlVrfName, oacJitterControlStatus=oacJitterControlStatus, oacJitterStatsHistoryPacketOutOfSequence=oacJitterStatsHistoryPacketOutOfSequence, oacJitterStatsSum2PosSD=oacJitterStatsSum2PosSD, oacJitterControlEntry=oacJitterControlEntry, oacJitterGeneralGroup=oacJitterGeneralGroup, oacJitterControlSourceAddress=oacJitterControlSourceAddress, oacJitterStatsHistoryPacketLateArrival=oacJitterStatsHistoryPacketLateArrival, oacJitterControlTargetAddress=oacJitterControlTargetAddress, oacJitterStatsHistoryTime=oacJitterStatsHistoryTime, oacJitterStatsHistoryMinRTT=oacJitterStatsHistoryMinRTT, oacJitterStatsDeviationDS=oacJitterStatsDeviationDS, oacJitterControlTimeout=oacJitterControlTimeout, oacJitterStatsSumPosSD=oacJitterStatsSumPosSD, oacJitterStatsNumNegSD=oacJitterStatsNumNegSD, OacJitterResponseSense=OacJitterResponseSense, oacJitterStatsHistoryTable=oacJitterStatsHistoryTable, oacJitterStatsHistorySum2PosDS=oacJitterStatsHistorySum2PosDS, oacJitterStatsHistoryDeviationDS=oacJitterStatsHistoryDeviationDS, PYSNMP_MODULE_ID=oacJitterMIBModule, oacJitterStatsHistoryNumNegDS=oacJitterStatsHistoryNumNegDS, oacJitterControlInterval=oacJitterControlInterval, oacJitterStatsHistoryNumPosJitter=oacJitterStatsHistoryNumPosJitter, oacJitterStatsEntry=oacJitterStatsEntry, oacJitterStatsHistoryMaxPosDS=oacJitterStatsHistoryMaxPosDS, oacJitterStatsSumNegSD=oacJitterStatsSumNegSD, oacJitterStatsPacketOutOfSequence=oacJitterStatsPacketOutOfSequence, oacJitterStatsHistorySumPosSD=oacJitterStatsHistorySumPosSD, oacJitterStatsSumPosDS=oacJitterStatsSumPosDS, oacJitterStatsNumPosDS=oacJitterStatsNumPosDS, oacExpIMJitter=oacExpIMJitter, oacJitterConformance=oacJitterConformance, oacJitterStatsSumPosJitter=oacJitterStatsSumPosJitter, oacJitterStatsSumNegJitter=oacJitterStatsSumNegJitter, oacJitterStatsMinRTT=oacJitterStatsMinRTT, oacJitterCompliances=oacJitterCompliances, oacJitterControlFrequency=oacJitterControlFrequency, oacJitterStatsHistoryNumPosDS=oacJitterStatsHistoryNumPosDS, oacJitterStatsHistorySumPosJitter=oacJitterStatsHistorySumPosJitter, oacJitterStatsDeviationSD=oacJitterStatsDeviationSD, oacJitterStatsHistoryNumNegSD=oacJitterStatsHistoryNumNegSD, oacJitterCompliance=oacJitterCompliance, oacJitterStatsMaxPosSD=oacJitterStatsMaxPosSD, oacJitterStatsHistorySum2PosSD=oacJitterStatsHistorySum2PosSD, oacJitterStatsHistoryAvgRTT=oacJitterStatsHistoryAvgRTT, oacJitterStatsAvgRTT=oacJitterStatsAvgRTT, oacJitterGroups=oacJitterGroups, oacJitterStatsSumNegDS=oacJitterStatsSumNegDS, oacJitterStatsHistoryCompleted=oacJitterStatsHistoryCompleted, OacJitterControlJitterType=OacJitterControlJitterType, oacJitterStatsHistorySumNegSD=oacJitterStatsHistorySumNegSD, oacJitterStatsCompleted=oacJitterStatsCompleted, oacJitterStatsHistoryNumNegJitter=oacJitterStatsHistoryNumNegJitter, oacJitterStatsNumPosJitter=oacJitterStatsNumPosJitter, oacJitterStatsNumNegJitter=oacJitterStatsNumNegJitter)
