#
# PySNMP MIB module CLNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CLNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, experimental, TimeTicks, iso, ModuleIdentity, MibIdentifier, ObjectIdentity, Counter64, NotificationType, Unsigned32, Bits, Gauge32, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "experimental", "TimeTicks", "iso", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Counter64", "NotificationType", "Unsigned32", "Bits", "Gauge32", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
clns = MibIdentifier((1, 3, 6, 1, 3, 1))
class ClnpAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

clnp = MibIdentifier((1, 3, 6, 1, 3, 1, 1))
error = MibIdentifier((1, 3, 6, 1, 3, 1, 2))
echo = MibIdentifier((1, 3, 6, 1, 3, 1, 3))
es_is = MibIdentifier((1, 3, 6, 1, 3, 1, 4)).setLabel("es-is")
clnpForwarding = MibScalar((1, 3, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is", 1), ("es", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: clnpForwarding.setDescription('The indication of whether this entity is active as an intermediate or end system. Only intermediate systems will forward PDUs onward that are not addressed to them.')
clnpDefaultLifeTime = MibScalar((1, 3, 6, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpDefaultLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: clnpDefaultLifeTime.setDescription('The default value inserted into the Lifetime field of the CLNP PDU header of PDUs sourced by this entity.')
clnpInReceives = MibScalar((1, 3, 6, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInReceives.setDescription('The total number of input PDUs received from all connected network interfaces running CLNP, including errors.')
clnpInHdrErrors = MibScalar((1, 3, 6, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInHdrErrors.setDescription('The number of input PDUs discarded due to errors in the CLNP header, including bad checksums, version mismatch, lifetime exceeded, errors discovered in processing options, etc.')
clnpInAddrErrors = MibScalar((1, 3, 6, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInAddrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInAddrErrors.setDescription("The number of input PDUs discarded because the NSAP address in the CLNP header's destination field was not a valid NSAP to be received at this entity. This count includes addresses not understood. For end systems, this is a count of PDUs which arrived with a destination NSAP which was not local.")
clnpForwPDUs = MibScalar((1, 3, 6, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpForwPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpForwPDUs.setDescription('The number of input PDUs for which this entity was not the final destination and which an attempt was made to forward them onward.')
clnpInUnknownNLPs = MibScalar((1, 3, 6, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInUnknownNLPs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInUnknownNLPs.setDescription('The number of locally-addressed PDUs successfully received but discarded because the network layer protocol was unknown or unsupported (e.g., not CLNP or ES-IS).')
clnpInUnknownULPs = MibScalar((1, 3, 6, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInUnknownULPs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInUnknownULPs.setDescription('The number of locally-addressed PDUs successfully received but discarded because the upper layer protocol was unknown or unsupported (e.g., not TP4).')
clnpInDiscards = MibScalar((1, 3, 6, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInDiscards.setDescription('The number of input CLNP PDUs for which no problems were encountered to prevent their continued processing, but were discarded (e.g., for lack of buffer space). Note that this counter does not include any PDUs discarded while awaiting re-assembly.')
clnpInDelivers = MibScalar((1, 3, 6, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInDelivers.setDescription('The total number of input PDUs successfully delivered to the CLNS transport user.')
clnpOutRequests = MibScalar((1, 3, 6, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutRequests.setDescription('The total number of CLNP PDUs which local CLNS user protocols supplied to CLNP for transmission requests. This counter does not include any PDUs counted in clnpForwPDUs.')
clnpOutDiscards = MibScalar((1, 3, 6, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutDiscards.setDescription('The number of output CLNP PDUs for which no other problem was encountered to prevent their transmission but were discarded (e.g., for lack of buffer space). Note this counter includes PDUs counted in clnpForwPDUs.')
clnpOutNoRoutes = MibScalar((1, 3, 6, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutNoRoutes.setDescription('The number of CLNP PDUs discarded because no route could be found to transmit them to their destination. This counter includes any PDUs counted in clnpForwPDUs.')
clnpReasmTimeout = MibScalar((1, 3, 6, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpReasmTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: clnpReasmTimeout.setDescription('The maximum number of seconds which received segments are held while they are awaiting reassembly at this entity.')
clnpReasmReqds = MibScalar((1, 3, 6, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpReasmReqds.setStatus('mandatory')
if mibBuilder.loadTexts: clnpReasmReqds.setDescription('The number of CLNP segments received which needed to be reassembled at this entity.')
clnpReasmOKs = MibScalar((1, 3, 6, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpReasmOKs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpReasmOKs.setDescription('The number of CLNP PDUs successfully re-assembled at this entity.')
clnpReasmFails = MibScalar((1, 3, 6, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpReasmFails.setStatus('mandatory')
if mibBuilder.loadTexts: clnpReasmFails.setDescription('The number of failures detected by the CLNP reassembly algorithm (for any reason: timed out, buffer size, etc).')
clnpSegOKs = MibScalar((1, 3, 6, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpSegOKs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpSegOKs.setDescription('The number of CLNP PDUs that have been successfully segmented at this entity.')
clnpSegFails = MibScalar((1, 3, 6, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpSegFails.setStatus('mandatory')
if mibBuilder.loadTexts: clnpSegFails.setDescription('The number of CLNP PDUs that have been discarded because they needed to be fragmented at this entity but could not.')
clnpSegCreates = MibScalar((1, 3, 6, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpSegCreates.setStatus('mandatory')
if mibBuilder.loadTexts: clnpSegCreates.setDescription('The number of CLNP PDU segments that have been generated as a result of segmentation at this entity.')
clnpInOpts = MibScalar((1, 3, 6, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInOpts.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInOpts.setDescription('The number of CLNP PDU segments that have been input with options at this entity.')
clnpOutOpts = MibScalar((1, 3, 6, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutOpts.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutOpts.setDescription('The number of CLNP PDU segments that have been generated with options by this entity.')
clnpRoutingDiscards = MibScalar((1, 3, 6, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpRoutingDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRoutingDiscards.setDescription('The number of routing entries which were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free-up buffer space for other routing entries.')
clnpAddrTable = MibTable((1, 3, 6, 1, 3, 1, 1, 21), )
if mibBuilder.loadTexts: clnpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: clnpAddrTable.setDescription("The table of addressing information relevant to this entity's CLNP addresses. ")
clnpAddrEntry = MibTableRow((1, 3, 6, 1, 3, 1, 1, 21, 1), ).setIndexNames((0, "CLNS-MIB", "clnpAdEntAddr"))
if mibBuilder.loadTexts: clnpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clnpAddrEntry.setDescription("The addressing information for one of this entity's CLNP addresses.")
clnpAdEntAddr = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 21, 1, 1), ClnpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpAdEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: clnpAdEntAddr.setDescription("The CLNP address to which this entry's addressing information pertains.")
clnpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpAdEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clnpAdEntIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
clnpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpAdEntReasmMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: clnpAdEntReasmMaxSize.setDescription('The size of the largest CLNP PDU which this entity can re-assemble from incoming CLNP segmented PDUs received on this interface.')
clnpRoutingTable = MibTable((1, 3, 6, 1, 3, 1, 1, 22), )
if mibBuilder.loadTexts: clnpRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRoutingTable.setDescription("This entity's CLNP routing table.")
clnpRouteEntry = MibTableRow((1, 3, 6, 1, 3, 1, 1, 22, 1), ).setIndexNames((0, "CLNS-MIB", "clnpRouteDest"))
if mibBuilder.loadTexts: clnpRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteEntry.setDescription('A route to a particular destination.')
clnpRouteDest = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 1), ClnpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteDest.setDescription('The destination CLNP address of this route.')
clnpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same as identified by the same value of ifIndex.')
clnpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteMetric1.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's clnpRouteProto value. If this metric is not used, its value should be set to -1.")
clnpRouteMetric2 = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteMetric2.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's clnpRouteProto value. If this metric is not used, its value should be set to -1.")
clnpRouteMetric3 = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteMetric3.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's clnpRouteProto value. If this metric is not used, its value should be set to -1.")
clnpRouteMetric4 = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteMetric4.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's clnpRouteProto value. If this metric is not used, its value should be set to -1.")
clnpRouteNextHop = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 7), ClnpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteNextHop.setDescription('The CLNP address of the next hop of this route.')
clnpRouteType = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteType.setDescription('The type of route. Setting this object to the value invalid(2) has the effect of invaliding the corresponding entry in the clnpRoutingTable. That is, it effectively dissasociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant clnpRouteType object.')
clnpRouteProto = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("is-is", 9), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpRouteProto.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
clnpRouteAge = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
clnpRouteMetric5 = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpRouteMetric5.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's clnpRouteProto value. If this metric is not used, its value should be set to -1.")
clnpRouteInfo = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 22, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpRouteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: clnpRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's clnpRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.")
clnpNetToMediaTable = MibTable((1, 3, 6, 1, 3, 1, 1, 23), )
if mibBuilder.loadTexts: clnpNetToMediaTable.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaTable.setDescription('The CLNP Address Translation table used for mapping from CLNP addresses to physical addresses.')
clnpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 3, 1, 1, 23, 1), ).setIndexNames((0, "CLNS-MIB", "clnpNetToMediaIfIndex"), (0, "CLNS-MIB", "clnpNetToMediaNetAddress"))
if mibBuilder.loadTexts: clnpNetToMediaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaEntry.setDescription("Each entry contains one CLNP address to `physical' address equivalence.")
clnpNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 23, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpNetToMediaIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
clnpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 23, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpNetToMediaPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaPhysAddress.setDescription("The media-dependent `physical' address.")
clnpNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 23, 1, 3), ClnpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpNetToMediaNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaNetAddress.setDescription("The CLNP address corresponding to the media- dependent `physical' address.")
clnpNetToMediaType = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpNetToMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaType.setDescription('The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the clnpNetToMediaTable. That is, it effectively dissassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant clnpNetToMediaType object.')
clnpNetToMediaAge = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpNetToMediaAge.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaAge.setDescription("The number of seconds since this entry was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the type of entry.")
clnpNetToMediaHoldTime = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 23, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpNetToMediaHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: clnpNetToMediaHoldTime.setDescription('The time in seconds this entry will be valid. Static entries should always report this field as -1.')
clnpMediaToNetTable = MibTable((1, 3, 6, 1, 3, 1, 1, 24), )
if mibBuilder.loadTexts: clnpMediaToNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetTable.setDescription('The CLNP Address Translation table used for mapping from physical addresses to CLNP addresses.')
clnpMediaToNetEntry = MibTableRow((1, 3, 6, 1, 3, 1, 1, 24, 1), ).setIndexNames((0, "CLNS-MIB", "clnpMediaToNetIfIndex"), (0, "CLNS-MIB", "clnpMediaToNetPhysAddress"))
if mibBuilder.loadTexts: clnpMediaToNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetEntry.setDescription("Each entry contains on ClnpAddress to `physical' address equivalence.")
clnpMediaToNetIfIndex = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 24, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpMediaToNetIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
clnpMediaToNetAddress = MibScalar((1, 3, 6, 1, 3, 1, 1, 24, 1, 2), ClnpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpMediaToNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetAddress.setDescription("The ClnpAddress corresponding to the media- dependent `physical' address.")
clnpMediaToNetPhysAddress = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 24, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpMediaToNetPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetPhysAddress.setDescription("The media-dependent `physical' address.")
clnpMediaToNetType = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpMediaToNetType.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetType.setDescription('The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the clnpMediaToNetTable. That is, it effectively dissassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant clnpMediaToNetType object.')
clnpMediaToNetAge = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 24, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpMediaToNetAge.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetAge.setDescription("The number of seconds since this entry was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the type of entry.")
clnpMediaToNetHoldTime = MibTableColumn((1, 3, 6, 1, 3, 1, 1, 24, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clnpMediaToNetHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: clnpMediaToNetHoldTime.setDescription('The time in seconds this entry will be valid. Static entries should always report this field as -1.')
clnpInErrors = MibScalar((1, 3, 6, 1, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrors.setDescription('The number of CLNP Error PDUs received by this entity.')
clnpOutErrors = MibScalar((1, 3, 6, 1, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrors.setDescription('The number of CLNP Error PDUs sent by this entity.')
clnpInErrUnspecs = MibScalar((1, 3, 6, 1, 3, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnspecs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnspecs.setDescription('The number of unspecified CLNP Error PDUs received by this entity.')
clnpInErrProcs = MibScalar((1, 3, 6, 1, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrProcs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrProcs.setDescription('The number of protocol procedure CLNP Error PDUs received by this entity.')
clnpInErrCksums = MibScalar((1, 3, 6, 1, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrCksums.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrCksums.setDescription('The number of checksum CLNP Error PDUs received by this entity.')
clnpInErrCongests = MibScalar((1, 3, 6, 1, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrCongests.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrCongests.setDescription('The number of congestion drop CLNP Error PDUs received by this entity.')
clnpInErrHdrs = MibScalar((1, 3, 6, 1, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrHdrs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrHdrs.setDescription('The number of header syntax CLNP Error PDUs received by this entity.')
clnpInErrSegs = MibScalar((1, 3, 6, 1, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrSegs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrSegs.setDescription('The number of segmentation disallowed CLNP Error PDUs received by this entity.')
clnpInErrIncomps = MibScalar((1, 3, 6, 1, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrIncomps.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrIncomps.setDescription('The number of incomplete PDU CLNP Error PDUs received by this entity.')
clnpInErrDups = MibScalar((1, 3, 6, 1, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrDups.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrDups.setDescription('The number of duplicate option CLNP Error PDUs received by this entity.')
clnpInErrUnreachDsts = MibScalar((1, 3, 6, 1, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnreachDsts.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnreachDsts.setDescription('The number of unreachable destination CLNP Error PDUs received by this entity.')
clnpInErrUnknownDsts = MibScalar((1, 3, 6, 1, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnknownDsts.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnknownDsts.setDescription('The number of unknown destination CLNP Error PDUs received by this entity.')
clnpInErrSRUnspecs = MibScalar((1, 3, 6, 1, 3, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrSRUnspecs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrSRUnspecs.setDescription('The number of unspecified source route CLNP Error PDUs received by this entity.')
clnpInErrSRSyntaxes = MibScalar((1, 3, 6, 1, 3, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrSRSyntaxes.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrSRSyntaxes.setDescription('The number of source route syntax CLNP Error PDUs received by this entity.')
clnpInErrSRUnkAddrs = MibScalar((1, 3, 6, 1, 3, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrSRUnkAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrSRUnkAddrs.setDescription('The number of source route unknown address CLNP Error PDUs received by this entity.')
clnpInErrSRBadPaths = MibScalar((1, 3, 6, 1, 3, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrSRBadPaths.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrSRBadPaths.setDescription('The number of source route bad path CLNP Error PDUs received by this entity.')
clnpInErrHops = MibScalar((1, 3, 6, 1, 3, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrHops.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrHops.setDescription('The number of hop count exceeded CLNP Error PDUs received by this entity.')
clnpInErrHopReassms = MibScalar((1, 3, 6, 1, 3, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrHopReassms.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrHopReassms.setDescription('The number of hop count exceeded while reassembling CLNP Error PDUs received by this entity.')
clnpInErrUnsOptions = MibScalar((1, 3, 6, 1, 3, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnsOptions.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnsOptions.setDescription('The number of unsupported option CLNP Error PDUs received by this entity.')
clnpInErrUnsVersions = MibScalar((1, 3, 6, 1, 3, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnsVersions.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnsVersions.setDescription('The number of version mismatch CLNP Error PDUs received by this entity.')
clnpInErrUnsSecurities = MibScalar((1, 3, 6, 1, 3, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnsSecurities.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnsSecurities.setDescription('The number of unsupported security option CLNP Error PDUs received by this entity.')
clnpInErrUnsSRs = MibScalar((1, 3, 6, 1, 3, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnsSRs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnsSRs.setDescription('The number of unsupported source route option CLNP Error PDUs received by this entity.')
clnpInErrUnsRRs = MibScalar((1, 3, 6, 1, 3, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrUnsRRs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrUnsRRs.setDescription('The number of unsupported record route option CLNP Error PDUs received by this entity.')
clnpInErrInterferences = MibScalar((1, 3, 6, 1, 3, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpInErrInterferences.setStatus('mandatory')
if mibBuilder.loadTexts: clnpInErrInterferences.setDescription('The number of reassembly interference CLNP Error PDUs received by this entity.')
clnpOutErrUnspecs = MibScalar((1, 3, 6, 1, 3, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnspecs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnspecs.setDescription('The number of unspecified CLNP Error PDUs sent by this entity.')
clnpOutErrProcs = MibScalar((1, 3, 6, 1, 3, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrProcs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrProcs.setDescription('The number of protocol procedure CLNP Error PDUs sent by this entity.')
clnpOutErrCksums = MibScalar((1, 3, 6, 1, 3, 1, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrCksums.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrCksums.setDescription('The number of checksum CLNP Error PDUs sent by this entity.')
clnpOutErrCongests = MibScalar((1, 3, 6, 1, 3, 1, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrCongests.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrCongests.setDescription('The number of congestion drop CLNP Error PDUs sent by this entity.')
clnpOutErrHdrs = MibScalar((1, 3, 6, 1, 3, 1, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrHdrs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrHdrs.setDescription('The number of header syntax CLNP Error PDUs sent by this entity.')
clnpOutErrSegs = MibScalar((1, 3, 6, 1, 3, 1, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrSegs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrSegs.setDescription('The number of segmentation disallowed CLNP Error PDUs sent by this entity.')
clnpOutErrIncomps = MibScalar((1, 3, 6, 1, 3, 1, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrIncomps.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrIncomps.setDescription('The number of incomplete PDU CLNP Error PDUs sent by this entity.')
clnpOutErrDups = MibScalar((1, 3, 6, 1, 3, 1, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrDups.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrDups.setDescription('The number of duplicate option CLNP Error PDUs sent by this entity.')
clnpOutErrUnreachDsts = MibScalar((1, 3, 6, 1, 3, 1, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnreachDsts.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnreachDsts.setDescription('The number of unreachable destination CLNP Error PDUs sent by this entity.')
clnpOutErrUnknownDsts = MibScalar((1, 3, 6, 1, 3, 1, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnknownDsts.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnknownDsts.setDescription('The number of unknown destination CLNP Error PDUs sent by this entity.')
clnpOutErrSRUnspecs = MibScalar((1, 3, 6, 1, 3, 1, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrSRUnspecs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrSRUnspecs.setDescription('The number of unspecified source route CLNP Error PDUs sent by this entity.')
clnpOutErrSRSyntaxes = MibScalar((1, 3, 6, 1, 3, 1, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrSRSyntaxes.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrSRSyntaxes.setDescription('The number of source route syntax CLNP Error PDUs sent by this entity.')
clnpOutErrSRUnkAddrs = MibScalar((1, 3, 6, 1, 3, 1, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrSRUnkAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrSRUnkAddrs.setDescription('The number of source route unknown address CLNP Error PDUs sent by this entity.')
clnpOutErrSRBadPaths = MibScalar((1, 3, 6, 1, 3, 1, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrSRBadPaths.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrSRBadPaths.setDescription('The number of source route bad path CLNP Error PDUs sent by this entity.')
clnpOutErrHops = MibScalar((1, 3, 6, 1, 3, 1, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrHops.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrHops.setDescription('The number of hop count exceeded CLNP Error PDUs sent by this entity.')
clnpOutErrHopReassms = MibScalar((1, 3, 6, 1, 3, 1, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrHopReassms.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrHopReassms.setDescription('The number of hop count exceeded while reassembling CLNP Error PDUs sent by this entity.')
clnpOutErrUnsOptions = MibScalar((1, 3, 6, 1, 3, 1, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnsOptions.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnsOptions.setDescription('The number of unsupported option CLNP Error PDUs sent by this entity.')
clnpOutErrUnsVersions = MibScalar((1, 3, 6, 1, 3, 1, 2, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnsVersions.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnsVersions.setDescription('The number of version mismatch CLNP Error PDUs sent by this entity.')
clnpOutErrUnsSecurities = MibScalar((1, 3, 6, 1, 3, 1, 2, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnsSecurities.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnsSecurities.setDescription('The number of unsupported security option CLNP Error PDUs sent by this entity.')
clnpOutErrUnsSRs = MibScalar((1, 3, 6, 1, 3, 1, 2, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnsSRs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnsSRs.setDescription('The number of unsupported source route option CLNP Error PDUs sent by this entity.')
clnpOutErrUnsRRs = MibScalar((1, 3, 6, 1, 3, 1, 2, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrUnsRRs.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrUnsRRs.setDescription('The number of unsupported record route option CLNP Error PDUs sent by this entity.')
clnpOutErrInterferences = MibScalar((1, 3, 6, 1, 3, 1, 2, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnpOutErrInterferences.setStatus('mandatory')
if mibBuilder.loadTexts: clnpOutErrInterferences.setDescription('The number of reassembly interference CLNP Error PDUs sent by this entity.')
esisESHins = MibScalar((1, 3, 6, 1, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esisESHins.setStatus('mandatory')
if mibBuilder.loadTexts: esisESHins.setDescription('The number of ESH PDUs received by this entity.')
esisESHouts = MibScalar((1, 3, 6, 1, 3, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esisESHouts.setStatus('mandatory')
if mibBuilder.loadTexts: esisESHouts.setDescription('The number of ESH PDUs sent by this entity.')
esisISHins = MibScalar((1, 3, 6, 1, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esisISHins.setStatus('mandatory')
if mibBuilder.loadTexts: esisISHins.setDescription('The number of ISH PDUs received by this entity.')
esisISHouts = MibScalar((1, 3, 6, 1, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esisISHouts.setStatus('mandatory')
if mibBuilder.loadTexts: esisISHouts.setDescription('The number of ISH PDUs sent by this entity.')
esisRDUins = MibScalar((1, 3, 6, 1, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esisRDUins.setStatus('mandatory')
if mibBuilder.loadTexts: esisRDUins.setDescription('The number of RDU PDUs received by this entity.')
esisRDUouts = MibScalar((1, 3, 6, 1, 3, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esisRDUouts.setStatus('mandatory')
if mibBuilder.loadTexts: esisRDUouts.setDescription('The number of RDU PDUs sent by this entity.')
mibBuilder.exportSymbols("CLNS-MIB", clnpInErrSRBadPaths=clnpInErrSRBadPaths, clnpNetToMediaEntry=clnpNetToMediaEntry, esisESHouts=esisESHouts, clnpInOpts=clnpInOpts, clnpInErrProcs=clnpInErrProcs, clnpInHdrErrors=clnpInHdrErrors, clnpAdEntAddr=clnpAdEntAddr, clnpMediaToNetHoldTime=clnpMediaToNetHoldTime, clnpOutErrIncomps=clnpOutErrIncomps, clnpOutErrCksums=clnpOutErrCksums, clnpOutErrHopReassms=clnpOutErrHopReassms, clnpForwarding=clnpForwarding, clnpInErrUnsSRs=clnpInErrUnsSRs, clnpInErrUnsRRs=clnpInErrUnsRRs, clnpInErrSegs=clnpInErrSegs, clnpInErrHops=clnpInErrHops, clnpNetToMediaIfIndex=clnpNetToMediaIfIndex, clnpAdEntReasmMaxSize=clnpAdEntReasmMaxSize, clnpInErrSRSyntaxes=clnpInErrSRSyntaxes, clnpInDiscards=clnpInDiscards, clnpOutErrSRUnkAddrs=clnpOutErrSRUnkAddrs, clnpRouteEntry=clnpRouteEntry, clnpInErrUnsOptions=clnpInErrUnsOptions, clnpOutErrInterferences=clnpOutErrInterferences, clnpAddrTable=clnpAddrTable, clnpOutErrSRBadPaths=clnpOutErrSRBadPaths, clnpDefaultLifeTime=clnpDefaultLifeTime, clnpInErrUnknownDsts=clnpInErrUnknownDsts, clnpForwPDUs=clnpForwPDUs, clnpOutDiscards=clnpOutDiscards, clnpReasmOKs=clnpReasmOKs, clnpReasmReqds=clnpReasmReqds, clnpInErrUnsVersions=clnpInErrUnsVersions, error=error, clnpInErrInterferences=clnpInErrInterferences, clnpOutErrProcs=clnpOutErrProcs, clnpOutErrCongests=clnpOutErrCongests, clnpInUnknownNLPs=clnpInUnknownNLPs, clnpNetToMediaPhysAddress=clnpNetToMediaPhysAddress, clnpMediaToNetTable=clnpMediaToNetTable, clnpMediaToNetAddress=clnpMediaToNetAddress, clnpInErrCksums=clnpInErrCksums, clnpInErrors=clnpInErrors, clnpOutRequests=clnpOutRequests, clnpNetToMediaAge=clnpNetToMediaAge, clnpInErrHdrs=clnpInErrHdrs, clnpRouteMetric2=clnpRouteMetric2, clnpInErrHopReassms=clnpInErrHopReassms, clnpNetToMediaTable=clnpNetToMediaTable, clnpInDelivers=clnpInDelivers, clnpInErrUnsSecurities=clnpInErrUnsSecurities, clnpRouteMetric5=clnpRouteMetric5, clnpMediaToNetType=clnpMediaToNetType, clnpOutErrSRSyntaxes=clnpOutErrSRSyntaxes, clnpRouteAge=clnpRouteAge, clnpOutErrUnsSRs=clnpOutErrUnsSRs, clnpMediaToNetEntry=clnpMediaToNetEntry, clnpOutErrUnknownDsts=clnpOutErrUnknownDsts, clnpOutOpts=clnpOutOpts, clnpInAddrErrors=clnpInAddrErrors, ClnpAddress=ClnpAddress, clnpOutErrHops=clnpOutErrHops, clnpInErrSRUnspecs=clnpInErrSRUnspecs, clnpAdEntIfIndex=clnpAdEntIfIndex, clnpRoutingTable=clnpRoutingTable, clnpRouteIfIndex=clnpRouteIfIndex, clnpInErrCongests=clnpInErrCongests, clnpOutErrSegs=clnpOutErrSegs, clnpOutErrUnreachDsts=clnpOutErrUnreachDsts, clnpRouteType=clnpRouteType, clnpInErrIncomps=clnpInErrIncomps, esisISHouts=esisISHouts, clnpRouteInfo=clnpRouteInfo, clnpOutErrHdrs=clnpOutErrHdrs, esisRDUins=esisRDUins, esisISHins=esisISHins, clnpInErrUnspecs=clnpInErrUnspecs, clnp=clnp, clnpMediaToNetPhysAddress=clnpMediaToNetPhysAddress, clnpRouteProto=clnpRouteProto, clnpNetToMediaHoldTime=clnpNetToMediaHoldTime, esisESHins=esisESHins, clnpAddrEntry=clnpAddrEntry, clnpOutErrSRUnspecs=clnpOutErrSRUnspecs, clnpOutErrors=clnpOutErrors, clnpOutErrUnsRRs=clnpOutErrUnsRRs, clnpReasmTimeout=clnpReasmTimeout, clnpReasmFails=clnpReasmFails, clnpRoutingDiscards=clnpRoutingDiscards, clns=clns, clnpNetToMediaType=clnpNetToMediaType, es_is=es_is, esisRDUouts=esisRDUouts, clnpInUnknownULPs=clnpInUnknownULPs, clnpOutErrDups=clnpOutErrDups, clnpInErrSRUnkAddrs=clnpInErrSRUnkAddrs, clnpSegOKs=clnpSegOKs, clnpRouteMetric3=clnpRouteMetric3, clnpRouteNextHop=clnpRouteNextHop, clnpOutErrUnsOptions=clnpOutErrUnsOptions, clnpOutErrUnsSecurities=clnpOutErrUnsSecurities, clnpRouteMetric1=clnpRouteMetric1, echo=echo, clnpRouteMetric4=clnpRouteMetric4, clnpNetToMediaNetAddress=clnpNetToMediaNetAddress, clnpOutNoRoutes=clnpOutNoRoutes, clnpOutErrUnsVersions=clnpOutErrUnsVersions, clnpInReceives=clnpInReceives, clnpOutErrUnspecs=clnpOutErrUnspecs, clnpSegFails=clnpSegFails, clnpInErrDups=clnpInErrDups, clnpInErrUnreachDsts=clnpInErrUnreachDsts, clnpMediaToNetAge=clnpMediaToNetAge, clnpRouteDest=clnpRouteDest, clnpMediaToNetIfIndex=clnpMediaToNetIfIndex, clnpSegCreates=clnpSegCreates)
