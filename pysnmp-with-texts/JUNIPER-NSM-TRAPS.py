#
# PySNMP MIB module JUNIPER-NSM-TRAPS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-NSM-TRAPS
# Produced by pysmi-0.3.4 at Wed May  1 14:00:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
jnxNsm, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxNsm")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, ObjectIdentity, Integer32, IpAddress, Counter32, ModuleIdentity, MibIdentifier, Bits, iso, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "ObjectIdentity", "Integer32", "IpAddress", "Counter32", "ModuleIdentity", "MibIdentifier", "Bits", "iso", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
nsmTrapInfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 6, 1))
if mibBuilder.loadTexts: nsmTrapInfo.setLastUpdated('200506301100Z')
if mibBuilder.loadTexts: nsmTrapInfo.setOrganization('Juniper Networks, Inc')
if mibBuilder.loadTexts: nsmTrapInfo.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: nsmTrapInfo.setDescription('NetScreen Manger trap definitions for NSM')
nsmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 6, 0))
nsmDayID = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDayID.setStatus('current')
if mibBuilder.loadTexts: nsmDayID.setDescription('The day id of the log for the specified day (encoded yyyymmdd)')
nsmRecordID = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmRecordID.setStatus('current')
if mibBuilder.loadTexts: nsmRecordID.setDescription('The record id of the log for the specified day (nth log received)')
nsmTimeReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmTimeReceived.setStatus('current')
if mibBuilder.loadTexts: nsmTimeReceived.setDescription('Time the log was received by the Mgt-Svr')
nsmTimeGenerated = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 4), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmTimeGenerated.setStatus('current')
if mibBuilder.loadTexts: nsmTimeGenerated.setDescription('Time the log was generated by the device')
nsmDeviceDomain = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDeviceDomain.setStatus('current')
if mibBuilder.loadTexts: nsmDeviceDomain.setDescription('The domain for the device that generated this log')
nsmDeviceDomainVer2 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDeviceDomainVer2.setStatus('current')
if mibBuilder.loadTexts: nsmDeviceDomainVer2.setDescription('The version of the domain that contained the device that generated this log')
nsmDevice = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDevice.setStatus('current')
if mibBuilder.loadTexts: nsmDevice.setDescription('The device that generated this log')
nsmDeviceIp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDeviceIp.setStatus('current')
if mibBuilder.loadTexts: nsmDeviceIp.setDescription('IP address of the device that generated this log')
nsmCategory = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("self", 0), ("config", 1), ("traffic", 2), ("alarm", 3), ("info", 4), ("predefined", 5), ("predefined1", 6), ("custom", 7), ("screen", 8), ("implicit", 9), ("profiler", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmCategory.setStatus('current')
if mibBuilder.loadTexts: nsmCategory.setDescription('The type of log (e.g. Info, Misc, Alarm, etc.)')
nsmSubcategory = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmSubcategory.setStatus('current')
if mibBuilder.loadTexts: nsmSubcategory.setDescription('Subcategory values have different semantics depending on the value of the log category.')
nsmSrcZone = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmSrcZone.setStatus('current')
if mibBuilder.loadTexts: nsmSrcZone.setDescription("The name of the packet-centric 'inbound' zone")
nsmSrcIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmSrcIfName.setStatus('current')
if mibBuilder.loadTexts: nsmSrcIfName.setDescription("The name of the packet-centric 'inbound' interface")
nsmSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 13), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmSrcAddr.setStatus('current')
if mibBuilder.loadTexts: nsmSrcAddr.setDescription('The Source Address of the packet that generated the log')
nsmSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmSrcPort.setStatus('current')
if mibBuilder.loadTexts: nsmSrcPort.setDescription('The Source Port of the packet that generated the log')
nsmNatSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 15), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmNatSrcAddr.setStatus('current')
if mibBuilder.loadTexts: nsmNatSrcAddr.setDescription("The NAT'ed Source Address of the packet that generated the log")
nsmNatSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmNatSrcPort.setStatus('current')
if mibBuilder.loadTexts: nsmNatSrcPort.setDescription("The NAT'ed Source Port of the packet that generated the log")
nsmDstZone = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDstZone.setStatus('current')
if mibBuilder.loadTexts: nsmDstZone.setDescription("The name of the packet-centric 'outbound' zone")
nsmDstIfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDstIfName.setStatus('current')
if mibBuilder.loadTexts: nsmDstIfName.setDescription("The name of the packet-centric 'outbound' interface")
nsmDstAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 19), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDstAddr.setStatus('current')
if mibBuilder.loadTexts: nsmDstAddr.setDescription('The Destination Address of the packet that generated the log')
nsmDstPort = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmDstPort.setStatus('current')
if mibBuilder.loadTexts: nsmDstPort.setDescription('The Destination Port of the packet that generated the log')
nsmNatDstAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 21), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmNatDstAddr.setStatus('current')
if mibBuilder.loadTexts: nsmNatDstAddr.setDescription("The NAT'ed Destination Address of the packet that generated the log")
nsmNatDstPort = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmNatDstPort.setStatus('current')
if mibBuilder.loadTexts: nsmNatDstPort.setDescription("The NAT'ed Destination Port of the packet that generated the log")
nsmProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 255))).clone(namedValues=NamedValues(("hopopt", 0), ("icmp", 1), ("igmp", 2), ("ggp", 3), ("ip", 4), ("st", 5), ("tcp", 6), ("cbt", 7), ("egp", 8), ("igp", 9), ("bbn-rcc-mon", 10), ("nvp-ii", 11), ("pup", 12), ("argus", 13), ("emcon", 14), ("xnet", 15), ("chaos", 16), ("udp", 17), ("mux", 18), ("dcn-meas", 19), ("hmp", 20), ("prm", 21), ("xns-idp", 22), ("trunk-1", 23), ("trunk-2", 24), ("leaf-1", 25), ("leaf-2", 26), ("rdp", 27), ("irtp", 28), ("iso-tp4", 29), ("netblt", 30), ("mfe-nsp", 31), ("merit-inp", 32), ("sep", 33), ("a3pc", 34), ("idpr-1", 35), ("xtp", 36), ("ddp", 37), ("idpr-cmt", 38), ("tp-plusplus", 39), ("il", 40), ("ipv6", 41), ("sdpr", 42), ("ipv6-route", 43), ("ipv6-frag", 44), ("idpr-2", 45), ("rsvp", 46), ("gre", 47), ("mhrp", 48), ("bn", 49), ("esp", 50), ("ah", 51), ("i-nslp", 52), ("swipe", 53), ("narp", 54), ("mobile", 55), ("tlsp", 56), ("skip", 57), ("ipv6-icmp", 58), ("ipv6-nonxt", 59), ("ipv6-opts", 60), ("ahip", 61), ("cftp", 62), ("alnp", 63), ("sat-expak", 64), ("kryptolan", 65), ("rvd", 66), ("ippc", 67), ("adfsp", 68), ("sat-mon", 69), ("visa", 70), ("ipcv", 71), ("cpnx", 72), ("cphb", 73), ("wsn", 74), ("pvp", 75), ("br-sat-mon", 76), ("sun-nd", 77), ("wb-mon", 78), ("wb-expak", 79), ("iso-ip", 80), ("vmpt", 81), ("secure-vmtp", 82), ("vines", 83), ("ttp", 84), ("nsfnet-igp", 85), ("dgp", 86), ("tcf", 87), ("eigrp", 88), ("ospfigp", 89), ("sprite-rcp", 90), ("larp", 91), ("mtp", 92), ("ax-25", 93), ("ipip", 94), ("micp", 95), ("scc-sp", 96), ("etherip", 97), ("encap", 98), ("apes", 99), ("gmtp", 100), ("ifmp", 101), ("pnni", 102), ("pim", 103), ("aris", 104), ("scps", 105), ("qnx", 106), ("a-n", 107), ("ipcomp", 108), ("snp", 109), ("compat-peer", 110), ("ipx-in-ip", 111), ("vrrp", 112), ("pgm", 113), ("hop-0", 114), ("l2tp", 115), ("ddx", 116), ("iatp", 117), ("stp", 118), ("srp", 119), ("uti", 120), ("smp", 121), ("ssm", 122), ("ptp", 123), ("isis", 124), ("fire", 125), ("crtp", 126), ("crudp", 127), ("sscopmce", 128), ("iplt", 129), ("sps", 130), ("pipe", 131), ("sctp", 132), ("fc", 133), ("rsvp-e2e-ignore", 134), ("reserved", 255)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmProtocol.setStatus('current')
if mibBuilder.loadTexts: nsmProtocol.setDescription('The protocol that the packet that generated this log was using')
nsmRuleDomain = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 24), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmRuleDomain.setStatus('current')
if mibBuilder.loadTexts: nsmRuleDomain.setDescription('The Domain that contained the rule that generated this log')
nsmRuleDomainVer = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmRuleDomainVer.setStatus('current')
if mibBuilder.loadTexts: nsmRuleDomainVer.setDescription('The version of the domain that contained the rule that generated this log')
nsmPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmPolicy.setStatus('current')
if mibBuilder.loadTexts: nsmPolicy.setDescription('The policy in a specific version of a domain that contained the rule that generated this log')
nsmRulebase = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("main", 1), ("fw", 2), ("idp", 3), ("honeypot", 4), ("backdoor", 5), ("synpro", 6), ("vpn", 7), ("mpolicy", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmRulebase.setStatus('current')
if mibBuilder.loadTexts: nsmRulebase.setDescription('The rulebase inside the policy in a specific version of a domain that generated this log')
nsmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmRuleNumber.setStatus('current')
if mibBuilder.loadTexts: nsmRuleNumber.setDescription('The rule in the rulebase in the policy in the specific version of a domain that generated this log')
nsmAction = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("accept", 0), ("drop-packet", 1), ("drop", 2), ("close", 3), ("close-client", 4), ("close-server", 5), ("ignore", 6), ("dismiss", 7), ("not-set", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmAction.setStatus('current')
if mibBuilder.loadTexts: nsmAction.setDescription('The action the device performed on that packet / connection that generated this log')
nsmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-set", 0), ("unused1", 1), ("info", 2), ("warning", 3), ("minor", 4), ("major", 5), ("unused2", 6), ("critical", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmSeverity.setStatus('current')
if mibBuilder.loadTexts: nsmSeverity.setDescription('The severity rating associated with this kind of log')
nsmIsAlert = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 31), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmIsAlert.setStatus('current')
if mibBuilder.loadTexts: nsmIsAlert.setDescription('A statement on if logs of this type are to alert the user')
nsmMisc = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 32), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmMisc.setStatus('current')
if mibBuilder.loadTexts: nsmMisc.setDescription('Miscellaneous information associated with the event (typically the repeat count of the event)')
nsmUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 33), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmUser.setStatus('current')
if mibBuilder.loadTexts: nsmUser.setDescription('The name of the user associated with the event')
nsmApp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 34), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmApp.setStatus('current')
if mibBuilder.loadTexts: nsmApp.setDescription("The 'application' associated with this log")
nsmUri = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 35), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmUri.setStatus('current')
if mibBuilder.loadTexts: nsmUri.setDescription("The 'Universal Resource Indicator' associated with this log")
nsmElapsedSecs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 36), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmElapsedSecs.setStatus('current')
if mibBuilder.loadTexts: nsmElapsedSecs.setDescription('For sessions, specifies how long the session lasted')
nsmBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 37), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmBytesIn.setStatus('current')
if mibBuilder.loadTexts: nsmBytesIn.setDescription("For sessions, specifies the number of 'inbound' bytes")
nsmBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 38), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmBytesOut.setStatus('current')
if mibBuilder.loadTexts: nsmBytesOut.setDescription("For sessions, specifies the number of 'outbound' bytes")
nsmBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 39), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmBytesTotal.setStatus('current')
if mibBuilder.loadTexts: nsmBytesTotal.setDescription('For sessions, specifies bytes-in + bytes-out')
nsmPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 40), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmPacketsIn.setStatus('current')
if mibBuilder.loadTexts: nsmPacketsIn.setDescription("For sessions, specifies the number of 'inbound' packets")
nsmPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 41), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmPacketsOut.setStatus('current')
if mibBuilder.loadTexts: nsmPacketsOut.setDescription("For sessions, specifies the number of 'outbound' packets")
nsmPacketsTotal = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 42), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmPacketsTotal.setStatus('current')
if mibBuilder.loadTexts: nsmPacketsTotal.setDescription('For sessions, specifies packets-in + packets-out')
nsmRepeatCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 43), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmRepeatCount.setStatus('current')
if mibBuilder.loadTexts: nsmRepeatCount.setDescription('The number of logs the device compressed into this one log')
nsmHasPacketData = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 44), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmHasPacketData.setStatus('current')
if mibBuilder.loadTexts: nsmHasPacketData.setDescription('Specifies if this log has associated packet data')
nsmVarDataEnum = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("none", 0), ("test", 1), ("ftp", 2), ("sip", 3), ("msrpc-udp", 4), ("msrpc-tcp", 5), ("portmapper", 6), ("http", 7), ("smtp", 8), ("pop3", 9), ("imap", 10), ("telnet", 11), ("rtsp", 12), ("whois", 13), ("icmp", 14), ("arp", 15), ("tcp", 16), ("dns", 17), ("finger", 18), ("ptype", 19), ("ymsg-v2", 20), ("msn-v2", 21), ("smb", 22), ("gnutella-v2", 23), ("tbd-24", 24), ("scan", 25), ("tbd-26", 26), ("tbd-27", 27), ("tbd-28", 28), ("dhcp", 29), ("tbd-30", 30), ("idp", 31), ("bwmon", 32), ("irc", 33), ("ymsg", 34), ("ident", 35), ("nntp", 36), ("aim", 37), ("rusers", 38), ("tbd-39", 39), ("gopher", 40), ("tbd-41", 41), ("msn", 42), ("gnutella", 43), ("nfs", 44), ("attalarm", 45)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmVarDataEnum.setStatus('current')
if mibBuilder.loadTexts: nsmVarDataEnum.setDescription('The kind of variable data (if any) associated with this log')
nsmVarData = MibScalar((1, 3, 6, 1, 4, 1, 2636, 6, 1, 46), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsmVarData.setStatus('current')
if mibBuilder.loadTexts: nsmVarData.setDescription('Variable data')
nsmTrapNotification = NotificationType((1, 3, 6, 1, 4, 1, 2636, 6, 0, 1)).setObjects(("JUNIPER-NSM-TRAPS", "nsmDayID"), ("JUNIPER-NSM-TRAPS", "nsmRecordID"), ("JUNIPER-NSM-TRAPS", "nsmTimeReceived"), ("JUNIPER-NSM-TRAPS", "nsmTimeGenerated"), ("JUNIPER-NSM-TRAPS", "nsmDeviceDomain"), ("JUNIPER-NSM-TRAPS", "nsmDeviceDomainVer2"), ("JUNIPER-NSM-TRAPS", "nsmDevice"), ("JUNIPER-NSM-TRAPS", "nsmDeviceIp"), ("JUNIPER-NSM-TRAPS", "nsmCategory"), ("JUNIPER-NSM-TRAPS", "nsmSubcategory"), ("JUNIPER-NSM-TRAPS", "nsmSrcZone"), ("JUNIPER-NSM-TRAPS", "nsmSrcIfName"), ("JUNIPER-NSM-TRAPS", "nsmSrcAddr"), ("JUNIPER-NSM-TRAPS", "nsmSrcPort"), ("JUNIPER-NSM-TRAPS", "nsmNatSrcAddr"), ("JUNIPER-NSM-TRAPS", "nsmNatSrcPort"), ("JUNIPER-NSM-TRAPS", "nsmDstZone"), ("JUNIPER-NSM-TRAPS", "nsmDstIfName"), ("JUNIPER-NSM-TRAPS", "nsmDstAddr"), ("JUNIPER-NSM-TRAPS", "nsmDstPort"), ("JUNIPER-NSM-TRAPS", "nsmNatDstAddr"), ("JUNIPER-NSM-TRAPS", "nsmNatDstPort"), ("JUNIPER-NSM-TRAPS", "nsmProtocol"), ("JUNIPER-NSM-TRAPS", "nsmRuleDomain"), ("JUNIPER-NSM-TRAPS", "nsmRuleDomainVer"), ("JUNIPER-NSM-TRAPS", "nsmPolicy"), ("JUNIPER-NSM-TRAPS", "nsmRulebase"), ("JUNIPER-NSM-TRAPS", "nsmRuleNumber"), ("JUNIPER-NSM-TRAPS", "nsmAction"), ("JUNIPER-NSM-TRAPS", "nsmSeverity"), ("JUNIPER-NSM-TRAPS", "nsmIsAlert"), ("JUNIPER-NSM-TRAPS", "nsmMisc"), ("JUNIPER-NSM-TRAPS", "nsmUser"), ("JUNIPER-NSM-TRAPS", "nsmApp"), ("JUNIPER-NSM-TRAPS", "nsmUri"), ("JUNIPER-NSM-TRAPS", "nsmElapsedSecs"), ("JUNIPER-NSM-TRAPS", "nsmBytesIn"), ("JUNIPER-NSM-TRAPS", "nsmBytesOut"), ("JUNIPER-NSM-TRAPS", "nsmBytesTotal"), ("JUNIPER-NSM-TRAPS", "nsmPacketsIn"), ("JUNIPER-NSM-TRAPS", "nsmPacketsOut"), ("JUNIPER-NSM-TRAPS", "nsmPacketsTotal"), ("JUNIPER-NSM-TRAPS", "nsmRepeatCount"), ("JUNIPER-NSM-TRAPS", "nsmHasPacketData"), ("JUNIPER-NSM-TRAPS", "nsmVarDataEnum"))
if mibBuilder.loadTexts: nsmTrapNotification.setStatus('current')
if mibBuilder.loadTexts: nsmTrapNotification.setDescription('A trap describing one log data.')
mibBuilder.exportSymbols("JUNIPER-NSM-TRAPS", nsmSrcPort=nsmSrcPort, nsmBytesTotal=nsmBytesTotal, nsmRuleNumber=nsmRuleNumber, nsmElapsedSecs=nsmElapsedSecs, nsmBytesOut=nsmBytesOut, nsmSubcategory=nsmSubcategory, nsmNatDstPort=nsmNatDstPort, nsmMisc=nsmMisc, nsmTimeReceived=nsmTimeReceived, nsmAction=nsmAction, nsmDstPort=nsmDstPort, nsmRepeatCount=nsmRepeatCount, nsmCategory=nsmCategory, PYSNMP_MODULE_ID=nsmTrapInfo, nsmDeviceDomain=nsmDeviceDomain, nsmRecordID=nsmRecordID, nsmDeviceDomainVer2=nsmDeviceDomainVer2, nsmSrcAddr=nsmSrcAddr, nsmRuleDomain=nsmRuleDomain, nsmNatSrcPort=nsmNatSrcPort, nsmRuleDomainVer=nsmRuleDomainVer, nsmTrapInfo=nsmTrapInfo, nsmVarData=nsmVarData, nsmRulebase=nsmRulebase, nsmIsAlert=nsmIsAlert, nsmUri=nsmUri, nsmSrcZone=nsmSrcZone, nsmNatDstAddr=nsmNatDstAddr, nsmDstZone=nsmDstZone, nsmVarDataEnum=nsmVarDataEnum, nsmBytesIn=nsmBytesIn, nsmDevice=nsmDevice, nsmSeverity=nsmSeverity, nsmUser=nsmUser, nsmPacketsTotal=nsmPacketsTotal, nsmNatSrcAddr=nsmNatSrcAddr, nsmDstAddr=nsmDstAddr, nsmPacketsIn=nsmPacketsIn, nsmDstIfName=nsmDstIfName, nsmProtocol=nsmProtocol, nsmSrcIfName=nsmSrcIfName, nsmTrapNotification=nsmTrapNotification, nsmDayID=nsmDayID, nsmPacketsOut=nsmPacketsOut, nsmDeviceIp=nsmDeviceIp, nsmHasPacketData=nsmHasPacketData, nsmPolicy=nsmPolicy, nsmApp=nsmApp, nsmTrap=nsmTrap, nsmTimeGenerated=nsmTimeGenerated)
