#
# PySNMP MIB module ZYXEL-DIFFSERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-DIFFSERV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:49:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, MibIdentifier, Bits, ObjectIdentity, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Gauge32, Integer32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "MibIdentifier", "Bits", "ObjectIdentity", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Gauge32", "Integer32", "NotificationType", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelDiffserv = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22))
if mibBuilder.loadTexts: zyxelDiffserv.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelDiffserv.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelDiffserv.setContactInfo('')
if mibBuilder.loadTexts: zyxelDiffserv.setDescription('The subtree for Differentiated services (Diffserv)')
zyxelDiffservSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1))
zyDiffservState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDiffservState.setStatus('current')
if mibBuilder.loadTexts: zyDiffservState.setDescription('Enable/Disable DiffServ on the switch. DiffServ is a class of service (CoS) model that marks packets so that they receive specific per-hop treatment at DiffServ-compliant network devices along the route based on the application types and traffic flow.')
zyxelDiffservMapTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 2), )
if mibBuilder.loadTexts: zyxelDiffservMapTable.setStatus('current')
if mibBuilder.loadTexts: zyxelDiffservMapTable.setDescription('The table contains Diffserv map configuration. ')
zyxelDiffservMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 2, 1), ).setIndexNames((0, "ZYXEL-DIFFSERV-MIB", "zyDiffservMapDscp"))
if mibBuilder.loadTexts: zyxelDiffservMapEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelDiffservMapEntry.setDescription('An entry contains Diffserv map configuration.')
zyDiffservMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyDiffservMapDscp.setStatus('current')
if mibBuilder.loadTexts: zyDiffservMapDscp.setDescription('The DSCP classification identification number.')
zyDiffservMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDiffservMapPriority.setStatus('current')
if mibBuilder.loadTexts: zyDiffservMapPriority.setDescription('Set the IEEE 802.1p priority mapping.')
zyxelDiffservPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 3), )
if mibBuilder.loadTexts: zyxelDiffservPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelDiffservPortTable.setDescription('The table contains Diffserv port configuration.')
zyxelDiffservPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelDiffservPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelDiffservPortEntry.setDescription('An entry contains Diffserv port configuration.')
zyDiffservPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 22, 1, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDiffservPortState.setStatus('current')
if mibBuilder.loadTexts: zyDiffservPortState.setDescription('Enable/Disable DiffServ on the port.')
mibBuilder.exportSymbols("ZYXEL-DIFFSERV-MIB", zyDiffservState=zyDiffservState, zyxelDiffservMapTable=zyxelDiffservMapTable, zyxelDiffservPortTable=zyxelDiffservPortTable, zyxelDiffservSetup=zyxelDiffservSetup, zyDiffservPortState=zyDiffservPortState, zyxelDiffservPortEntry=zyxelDiffservPortEntry, PYSNMP_MODULE_ID=zyxelDiffserv, zyxelDiffserv=zyxelDiffserv, zyDiffservMapDscp=zyDiffservMapDscp, zyxelDiffservMapEntry=zyxelDiffservMapEntry, zyDiffservMapPriority=zyDiffservMapPriority)
