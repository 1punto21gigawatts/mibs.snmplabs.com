#
# PySNMP MIB module COM21-HCXETH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXETH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
com21Hcx, com21Traps, com21 = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Hcx", "com21Traps", "com21")
hcxEventLogTime, hcxAlmSeverity = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxEventLogTime", "hcxAlmSeverity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, TimeTicks, Counter32, Bits, ObjectIdentity, Unsigned32, iso, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32", "Bits", "ObjectIdentity", "Unsigned32", "iso", "MibIdentifier", "NotificationType")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
com21HcxEth = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 40))
if mibBuilder.loadTexts: com21HcxEth.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxEth.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxEth.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxEth.setDescription('This is the Com21 ComController Ethernet MIB module. COM21 Part# 005-0025-00')
com21HcxEtherUnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 41))
com21HcxEtherPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 42))
com21HcxEtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 43))
com21HcxEtherIpAddrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 44))
com21HcxEtherStuStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 45))
com21HcxServGrpAssocGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 46))
class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

com21HcxEtherUnitTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1), )
if mibBuilder.loadTexts: com21HcxEtherUnitTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherUnitTable.setDescription('.')
com21HcxEtherUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1), ).setIndexNames((0, "COM21-HCXETH-MIB", "hcxEtherShelfId"), (0, "COM21-HCXETH-MIB", "hcxEtherSlotId"))
if mibBuilder.loadTexts: com21HcxEtherUnitEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherUnitEntry.setDescription('.')
hcxEtherShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherShelfId.setDescription(' contains the associated shelf id.')
hcxEtherSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherSlotId.setDescription(' contains associated slot id.')
hcxEtherCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenBaseT", 1), ("onehundredBaseT", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCardType.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCardType.setDescription(' contains Ethernet card type.')
hcxEtherNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherNoPorts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherNoPorts.setDescription(' contains the number of ports supported by the Ethernet card.')
hcxEtherHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hcxEtherHardwareVersion.setDescription(' contains the hardware version of the Ethernet card. Will contain empty string if card has not been inserted in the slot.')
hcxEtherBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherBootVersion.setStatus('current')
if mibBuilder.loadTexts: hcxEtherBootVersion.setDescription(' contains the version of the Ethernet card boot ROM. Will contain empty string if card has not been inserted in the slot.')
hcxEtherUnitPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 7), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherUnitPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxEtherUnitPrimServState.setDescription(' contains primary service state of the Ethernet Unit.')
hcxEtherUnitPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 20)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherShelfId"), ("COM21-HCXETH-MIB", "hcxEtherSlotId"), ("COM21-HCXETH-MIB", "hcxEtherUnitPrimServState"))
if mibBuilder.loadTexts: hcxEtherUnitPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherUnitPrimStateChange.setDescription(' This trap is generated whenever a change in the the hcxEtherUnitPrimServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxEtherUnitSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherUnitSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxEtherUnitSecServState.setDescription(' contains a string defining the secondary service states of the Ethernet Unit. The substrings supported by the Ethernet Unit shall be: UNEQ - unequipped.')
hcxEtherUnitSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 21)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherShelfId"), ("COM21-HCXETH-MIB", "hcxEtherSlotId"), ("COM21-HCXETH-MIB", "hcxEtherUnitSecServState"))
if mibBuilder.loadTexts: hcxEtherUnitSecStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherUnitSecStateChange.setDescription(' This trap is generated whenever a change in the the hcxEtherUnitSecServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxEtherRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherRestartAction.setStatus('current')
if mibBuilder.loadTexts: hcxEtherRestartAction.setDescription(' The Ethernet Unit Restart Action is an active-value. The setting of this attribute to restart(2) causes the Ethernet card to reset and download a new image.')
hcxEtherTestStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherTestStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxEtherTestStatusLed.setDescription(' The Ethernet Test Status LED is a read-only attribute which describes the condition of the Ethernet Test Status light emitting diode located on the Ethernet board. A value of on(1) indicates that a service effecting test is in progress and that the LED is illuminated. Will be off if no card present.')
hcxEtherTestStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 22)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherShelfId"), ("COM21-HCXETH-MIB", "hcxEtherSlotId"), ("COM21-HCXETH-MIB", "hcxEtherTestStatusLed"))
if mibBuilder.loadTexts: hcxEtherTestStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherTestStatusLedChange.setDescription(' generated whenever there is a change in test LED status. This an event with no clear condition. Only severity is WARNING.')
hcxEtherFaultStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherFaultStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxEtherFaultStatusLed.setDescription(' The Ethernet Fault Status LED is a read-only attribute which describes the condition of the Ethernet Fault Status light emitting diode located on the Ethernet board. A value of on(1) indicates that an fault condition has been detected (for which a trap will have been issued) and the LED is illuminated. Will be off if no card present.')
hcxEtherFaultStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 23)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherShelfId"), ("COM21-HCXETH-MIB", "hcxEtherSlotId"), ("COM21-HCXETH-MIB", "hcxEtherFaultStatusLed"))
if mibBuilder.loadTexts: hcxEtherFaultStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherFaultStatusLedChange.setDescription(' generated whenever there is a change in the Fault LED status. This an event with no clear condition. Only severity is WARNING.')
hcxEtherSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 41, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hcxEtherSerialNumber.setDescription(' contains the serial number of the Ethernet card. Will contain empty string if card has not been inserted in the slot.')
com21HcxEtherPortTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1), )
if mibBuilder.loadTexts: com21HcxEtherPortTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherPortTable.setDescription('.')
com21HcxEtherPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1), ).setIndexNames((0, "COM21-HCXETH-MIB", "hcxEtherPortShelfId"), (0, "COM21-HCXETH-MIB", "hcxEtherPortSlotId"), (0, "COM21-HCXETH-MIB", "hcxEtherPortId"))
if mibBuilder.loadTexts: com21HcxEtherPortEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherPortEntry.setDescription('.')
hcxEtherPortShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortShelfId.setDescription(' contains shelf in which this Ethernet port is located.')
hcxEtherPortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortSlotId.setDescription(' contains slot in which this Ethernet port is located.')
hcxEtherPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortId.setDescription(' contains Ethernet port id. Represents the port number on the card. In the case of single 10baseT or 100baseT, this value will always be 1. In the case of a quad 10baseT card, this value is in the range 1-4.')
hcxEtherPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenBaseT", 1), ("onehundredBaseT", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortType.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortType.setDescription(' contains type of Ethernet port.')
hcxEtherPortService = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortService.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortService.setDescription(' contains string defining the service provided by the Ethernet port (VLAN). Set by NMAPS. Default null string. CC most ensure uniqueness.')
hcxEtherPortPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 6), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortPrimServState.setDescription(' contains primary service state of the Ethernet Unit. This state shall be effected by the hcxEtherPortState attribute.')
hcxEtherPortPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 24)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherPortShelfId"), ("COM21-HCXETH-MIB", "hcxEtherPortSlotId"), ("COM21-HCXETH-MIB", "hcxEtherPortId"), ("COM21-HCXETH-MIB", "hcxEtherPortPrimServState"))
if mibBuilder.loadTexts: hcxEtherPortPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortPrimStateChange.setDescription(' This trap is generated whenever a change in the the hcxEtherPortPrimServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxEtherPortSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortSecServState.setDescription(' contains a string defining the secondary service states of the Ethernet Unit. The substrings supported by the Ethernet Unit shall be: MT - offline, set by hcxEthernetUnitState, FAULT - hardware failure, TEST - test, UNEQ - unequipped.')
hcxEtherPortSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 25)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherPortShelfId"), ("COM21-HCXETH-MIB", "hcxEtherPortSlotId"), ("COM21-HCXETH-MIB", "hcxEtherPortId"), ("COM21-HCXETH-MIB", "hcxEtherPortSecServState"))
if mibBuilder.loadTexts: hcxEtherPortSecStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortSecStateChange.setDescription(' This trap is generated whenever a change in the the hcxEtherPortSecServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxEtherMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22222))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: hcxEtherMaxBandwidth.setDescription(' This attribute defines the maximum output payload bandwidth associated with the Ethernet port. Defined in thousands of bps. From 0 to 22222. This value shall be checked by the CC which shall ensure that the aggregate of the hcxEtherMaxBandwidth attributes for each of the Ethernet ports does not exceed the system maximum. Note max for 10bT port is 11560. Default: 7000.')
hcxEtherAggrDnStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrDnStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrDnStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream CBR rates configured on the Ethernet port (VLAN). This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxEtherAggrDnStrmPcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrDnStrmPcrRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrDnStrmPcrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream PCR rates configured on the Ethernet port (VLAN). This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxEtherAggrUpStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrUpStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrUpStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream CBR rates configured on the Ethernet port (VLAN). This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxEtherAggrUpStrmMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrUpStrmMinRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrUpStrmMinRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream minimum PCR rates on the Ethernet port (VLAN). This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxEtherAggrUpStrmMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrUpStrmMaxRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrUpStrmMaxRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream maximum cell rates on the Ethernet port (VLAN). This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxEtherAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherAgeTime.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAgeTime.setDescription(' This attribute defines, in seconds, the aging time for non-accessed entries in the Bridge mapping table. The default shall be 300secs. If this set to 0, then aging is disabled.')
hcxEtherPortConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000, 2001, 2002))).clone(namedValues=NamedValues(("offline", 2000), ("online", 2001), ("test", 2002)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortConfigState.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortConfigState.setDescription(' The Ethernet Port State is an active-value. The Ethernet port will default to offline, in which case no traffic shall be passed. Default offline.')
hcxEtherPortRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortRestartAction.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortRestartAction.setDescription(' The Ethernet Port Restart Action is an active-value. The setting of this attribute to restart(2) causes the Ethernet port to reset and download a new image.')
hcxEtherPortDiagTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortDiagTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortDiagTestAction.setDescription(' This attribute is used to invoke the internal Ethernet card diagnostic test. In order to activate this test, the card must be placed in the test state.')
hcxEtherPortDiagTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 26)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherPortShelfId"), ("COM21-HCXETH-MIB", "hcxEtherPortSlotId"), ("COM21-HCXETH-MIB", "hcxEtherPortId"), ("COM21-HCXETH-MIB", "hcxEtherPortDiagTestResult"))
if mibBuilder.loadTexts: hcxEtherPortDiagTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortDiagTestComplete.setDescription(' This notification is generated whenever the Ethernet port internal diagnostic tests are completed. Event only, no clear. Only severity allowed is WARNING.')
hcxEtherPortDiagTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3), ("invalidState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortDiagTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortDiagTestResult.setDescription(' This attribute contains the result of the last Ethernet port diagnostic test.')
hcxEtherOperationFailure = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 27)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherPortShelfId"), ("COM21-HCXETH-MIB", "hcxEtherPortSlotId"), ("COM21-HCXETH-MIB", "hcxEtherPortId"))
if mibBuilder.loadTexts: hcxEtherOperationFailure.setStatus('current')
if mibBuilder.loadTexts: hcxEtherOperationFailure.setDescription(' This notification is generated by the CC whenever an Ethernet port fails to respond correctly to a request. This failure could indicate either a resource problem or software failure. Note that if an Ethernet card failures to respond completely to a CC request, then a hcxInsertChange trap shall be generated. This is an event without a corresponding clear. Only severity allowed is WARNING.')
hcxEtherPortLinkStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortLinkStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortLinkStatusLed.setDescription(' The Ethernet Link Status LED is a read-only attribute which describes the condition of the Ethernet Link Status light emitting diode located on the Ethernet board. A value of on(1) indicates that the link is up and active, and that the LED is illuminated. Will be off if no card present.')
hcxEtherPortLinkStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 28)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXETH-MIB", "hcxEtherPortShelfId"), ("COM21-HCXETH-MIB", "hcxEtherPortSlotId"), ("COM21-HCXETH-MIB", "hcxEtherPortId"), ("COM21-HCXETH-MIB", "hcxEtherPortLinkStatusLed"))
if mibBuilder.loadTexts: hcxEtherPortLinkStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortLinkStatusLedChange.setDescription(' generated whenever there is a change in link LED status. This an event with no clear condition. Only severity is WARNING.')
hcxEtherPortArpFiltRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortArpFiltRate.setStatus('deprecated')
if mibBuilder.loadTexts: hcxEtherPortArpFiltRate.setDescription(' No longer supported')
hcxEtherAggrActDnStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrActDnStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrActDnStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream CBR rates active on the Ethernet port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxEtherAggrActDnStrmPcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrActDnStrmPcrRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrActDnStrmPcrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream PCR rates active on the Ethernet port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxEtherAggrActUpStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrActUpStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrActUpStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream CBR rates active on the Ethernet port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxEtherAggrActUpStrmMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrActUpStrmMinRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrActUpStrmMinRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream minimum PCR rates active on the Ethernet port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxEtherAggrActUpStrmMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherAggrActUpStrmMaxRate.setStatus('current')
if mibBuilder.loadTexts: hcxEtherAggrActUpStrmMaxRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream maximum cell rates active on the Ethernet port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxEtherPortIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortIpAddr.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortIpAddr.setDescription(' IP Address associated with this ethernet port. This is a future item for telephone return support.')
hcxEtherPortIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortIpMask.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortIpMask.setDescription(' IP mask associated with port. Default is ff.ff.ff.ff. This is a future item for telephone return support.')
hcxEtherPortMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 32), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPortMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortMacAddr.setDescription(' MAC address associated with port.')
hcxEtherPortAutoNegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortAutoNegEnable.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortAutoNegEnable.setDescription(' This attribute is used for 100BaseT ports ONLY, to enable/disable Auto Negotiation Feature. Default is Auto Negotiation Enable. For 10bT ports this attribute will be read-only with a value of off.')
hcxEtherPortSpeedSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMbpsHalfDuplex", 1), ("tenMbpsFullDuplex", 2), ("hundredMbpsHalfDulplex", 3), ("hundredMbpsFullDuplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherPortSpeedSelect.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPortSpeedSelect.setDescription(" If 'hcxEtherPortAutoNegEnble' is set to 'off' then the Media speed of the port is set to the value in this attribute. This attribute is valid only for 100BaseT ports - for 10bT ports this attribute shall be read-only with a value of tenMbpsHalfDuplex. Default for 100bT ports is 'hundredMbps'. An error will be returned if PortSpeed is set to 'tenMbps' and 'hcxEtherMaxBandwidth' is greater than 10 Mbps")
hcxEtherCurrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 42, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("linkFail", 1), ("autoNegPending", 2), ("autoNegFailure", 3), ("tenMbpsHalfDuplex", 4), ("tenMbpsFullDuplex", 5), ("hundredMbpsHalfDulplex", 6), ("hundredMbpsFullDuplex", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrPortState.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrPortState.setDescription(' specifies the Media speed of the port.')
com21HcxEtherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1), )
if mibBuilder.loadTexts: com21HcxEtherStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherStatsTable.setDescription('.')
com21HcxEtherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1), ).setIndexNames((0, "COM21-HCXETH-MIB", "hcxEtherStatsShelfId"), (0, "COM21-HCXETH-MIB", "hcxEtherStatsSlotId"), (0, "COM21-HCXETH-MIB", "hcxEtherStatsPortId"))
if mibBuilder.loadTexts: com21HcxEtherStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherStatsEntry.setDescription('.')
hcxEtherStatsShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStatsShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStatsShelfId.setDescription(' contains shelf in which the associated Ethernet port is located.')
hcxEtherStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStatsSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStatsSlotId.setDescription(' contains slot in which the associated Ethernet port is located.')
hcxEtherStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStatsPortId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStatsPortId.setDescription(' contains the associated Ethernet port id.')
hcxEtherCurrCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrCollisions.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrCollisions.setDescription(' contains the number of detected collisions in the current 15 minute period.')
hcxEtherCurrRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrRunts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrRunts.setDescription(' contains the number of receive runt packets in the current 15 minute period.')
hcxEtherCurrGrunts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrGrunts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrGrunts.setDescription(' contains the number of received grunt packets in the current 15 minute period.')
hcxEtherCurrCrcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrCrcPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrCrcPkts.setDescription(' contains the number of ethernet packets with CRC errors received in the current 15 minute period.')
hcxEtherCurrTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrTxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrTxPkts.setDescription(' contains the number of ethernet packets transmitted in the current 15 minute period.')
hcxEtherCurrRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherCurrRxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherCurrRxPkts.setDescription(' contains the number of ethernet packets received in the current 15 minute period.')
hcxEtherPrevCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPrevCollisions.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPrevCollisions.setDescription(' contains the number of detected collisions in the previous 15 minute period.')
hcxEtherPrevRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPrevRunts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPrevRunts.setDescription(' contains the number of received runt packets in the previous 15 minute period.')
hcxEtherPrevGrunts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPrevGrunts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPrevGrunts.setDescription(' contains the number of received grunt packets in the previous 15 minute period.')
hcxEtherPrevCrcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPrevCrcPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPrevCrcPkts.setDescription(' contains the number of ethernet packets received with CRC errors in the previous 15 minute period.')
hcxEtherPrevTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPrevTxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPrevTxPkts.setDescription(' contains the number of ethernet packets transmitted in the previous 15 minute period.')
hcxEtherPrevRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherPrevRxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherPrevRxPkts.setDescription(' contains the number of ethernet packets received in the previous 15 minute period.')
hcxEtherClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 43, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxEtherClearStats.setDescription(' This attribute is used to clear all Ethernet statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21HcxEtherStuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1), )
if mibBuilder.loadTexts: com21HcxEtherStuStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherStuStatsTable.setDescription('.')
com21HcxEtherStuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1), ).setIndexNames((0, "COM21-HCXETH-MIB", "hcxEtherStuStatsMacAddr"))
if mibBuilder.loadTexts: com21HcxEtherStuStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherStuStatsEntry.setDescription('.')
hcxEtherStuStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuStatsMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxEtherStuCurrDnstrmBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuCurrDnstrmBytes.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuCurrDnstrmBytes.setDescription(' Contains the number of unicast bytes transmitted downstream to this ComPort in the current 15 minute collection period.')
hcxEtherStuCurrUpstrmBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuCurrUpstrmBytes.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuCurrUpstrmBytes.setDescription(' Contains the number of bytes received upstream from this ComPort in the current 15 minute collection period.')
hcxEtherStuCurrUpstrmAal5CrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuCurrUpstrmAal5CrcErrs.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuCurrUpstrmAal5CrcErrs.setDescription(' Contains the number of AAL5 CRC errors related to upstream traffic from the ComPort in the current 15 minute collection period. Each of these errors indicates a dropped Ethernet frame.')
hcxEtherStuCurrDnstrmDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuCurrDnstrmDropPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuCurrDnstrmDropPkts.setDescription(' Contains the number of dropped Ethernet frames in the downstream direction in the current 15min period. These frames are generally dropped due to policing.')
hcxEtherStuPrevDnstrmBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuPrevDnstrmBytes.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuPrevDnstrmBytes.setDescription(' Contains the number of unicast bytes transmitted downstream to this ComPort in the last 15 minute collection period.')
hcxEtherStuPrevUpstrmBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuPrevUpstrmBytes.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuPrevUpstrmBytes.setDescription(' Contains the number of bytes received upstream from this ComPort in the last 15 minute collection period.')
hcxEtherStuPrevUpstrmAal5CrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuPrevUpstrmAal5CrcErrs.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuPrevUpstrmAal5CrcErrs.setDescription(' Contains the number of AAL5 CRC errors related to upstream traffic from the ComPort in the last 15 minute collection period. Each of these errors indicates a dropped Ethernet frame.')
hcxEtherStuPrevDnstrmDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherStuPrevDnstrmDropPkts.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuPrevDnstrmDropPkts.setDescription(' Contains the number of dropped RX frames in the upstream direction in the previous 15min period.')
hcxEtherStuClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 45, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherStuClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxEtherStuClearStats.setDescription(' This attribute is used to clear all ComPort statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21HcxEtherIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1), )
if mibBuilder.loadTexts: com21HcxEtherIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherIpAddrTable.setDescription('TBD.')
com21HcxEtherIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1), ).setIndexNames((0, "COM21-HCXETH-MIB", "hcxEtherIpAddrShelfId"), (0, "COM21-HCXETH-MIB", "hcxEtherIpAddrSlotId"), (0, "COM21-HCXETH-MIB", "hcxEtherIpAddrPortId"), (0, "COM21-HCXETH-MIB", "hcxEtherIpAddrIPAddr"))
if mibBuilder.loadTexts: com21HcxEtherIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxEtherIpAddrEntry.setDescription('.')
hcxEtherIpAddrShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherIpAddrShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherIpAddrShelfId.setDescription(' contains shelf in which the associated Ethernet port is located.')
hcxEtherIpAddrSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherIpAddrSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherIpAddrSlotId.setDescription(' contains slot in which the associated Ethernet port is located.')
hcxEtherIpAddrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherIpAddrPortId.setStatus('current')
if mibBuilder.loadTexts: hcxEtherIpAddrPortId.setDescription(' contains the associated Ethernet port id.')
hcxEtherIpAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEtherIpAddrIPAddr.setStatus('current')
if mibBuilder.loadTexts: hcxEtherIpAddrIPAddr.setDescription(' target IP Address. No ComPort will be able to use this IP address in an ARP response.')
hcxEtherIpAddrIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxEtherIpAddrIPMask.setStatus('current')
if mibBuilder.loadTexts: hcxEtherIpAddrIPMask.setDescription(' IP mask. Default is ff.ff.ff.ff.')
hcxEtherIpAddrIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 44, 1, 1, 6), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxEtherIpAddrIPStatus.setStatus('current')
if mibBuilder.loadTexts: hcxEtherIpAddrIPStatus.setDescription(' Used to delete or create an entry.')
com21HcxServGrpAssocTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1), )
if mibBuilder.loadTexts: com21HcxServGrpAssocTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxServGrpAssocTable.setDescription('.')
com21HcxServGrpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1), ).setIndexNames((0, "COM21-HCXETH-MIB", "hcxServGrpAssocShelfId"), (0, "COM21-HCXETH-MIB", "hcxServGrpAssocSlotId"), (0, "COM21-HCXETH-MIB", "hcxServGrpAssocCardType"), (0, "COM21-HCXETH-MIB", "hcxServGrpAssocPortId"), (0, "COM21-HCXETH-MIB", "hcxServGrpAssocEntryId"))
if mibBuilder.loadTexts: com21HcxServGrpAssocEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxServGrpAssocEntry.setDescription('.')
hcxServGrpAssocShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocShelfId.setDescription(' defines shelfId to index into this entry. It is the ShelfId where this Service Group has an entry')
hcxServGrpAssocSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocSlotId.setDescription(' defines SlotId to index into this entry. It is the slot where this Service Group has an entry')
hcxServGrpAssocCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenBaseT", 1), ("onehundredBaseT", 2), ("oc3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocCardType.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocCardType.setDescription(' defines cardType to index into this entry. It is the card Type where this Service Group has an entry')
hcxServGrpAssocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocPortId.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocPortId.setDescription(' defines portId to index into this entry. It is the port number where this Service Group has an entry')
hcxServGrpAssocEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocEntryId.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocEntryId.setDescription(' defines entryId to index into this entry. it is the entry number assigned to this service group')
hcxServGrpAssocRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocRate.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocRate.setDescription(' contains Rate associated with this Entry.')
hcxServGrpAssocType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("ondemand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocType.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocType.setDescription(' contains Type associated with this Entry.')
hcxServGrpAssocNumOfVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocNumOfVlans.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocNumOfVlans.setDescription(' contains number of Vlans associated with this Service Group ')
hcxServGrpAssocNumOfStus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 46, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxServGrpAssocNumOfStus.setStatus('current')
if mibBuilder.loadTexts: hcxServGrpAssocNumOfStus.setDescription(' contains number of Stus associated with this Service Group ')
mibBuilder.exportSymbols("COM21-HCXETH-MIB", com21HcxServGrpAssocGroup=com21HcxServGrpAssocGroup, hcxServGrpAssocEntryId=hcxServGrpAssocEntryId, hcxEtherFaultStatusLed=hcxEtherFaultStatusLed, hcxEtherAggrActUpStrmCbrRate=hcxEtherAggrActUpStrmCbrRate, hcxEtherAggrActUpStrmMaxRate=hcxEtherAggrActUpStrmMaxRate, hcxEtherPortDiagTestResult=hcxEtherPortDiagTestResult, hcxEtherCurrCollisions=hcxEtherCurrCollisions, com21HcxEtherUnitEntry=com21HcxEtherUnitEntry, com21HcxServGrpAssocEntry=com21HcxServGrpAssocEntry, com21HcxEtherIpAddrEntry=com21HcxEtherIpAddrEntry, hcxEtherPortDiagTestComplete=hcxEtherPortDiagTestComplete, hcxEtherPortIpMask=hcxEtherPortIpMask, com21HcxEtherStuStatsEntry=com21HcxEtherStuStatsEntry, hcxEtherAggrDnStrmPcrRate=hcxEtherAggrDnStrmPcrRate, hcxEtherBootVersion=hcxEtherBootVersion, hcxEtherCurrPortState=hcxEtherCurrPortState, hcxServGrpAssocShelfId=hcxServGrpAssocShelfId, hcxEtherPrevRunts=hcxEtherPrevRunts, hcxEtherCardType=hcxEtherCardType, hcxEtherPortSecServState=hcxEtherPortSecServState, hcxEtherPortMacAddr=hcxEtherPortMacAddr, hcxEtherSlotId=hcxEtherSlotId, hcxEtherOperationFailure=hcxEtherOperationFailure, hcxEtherPortDiagTestAction=hcxEtherPortDiagTestAction, hcxEtherSerialNumber=hcxEtherSerialNumber, hcxEtherPortLinkStatusLed=hcxEtherPortLinkStatusLed, hcxEtherStuCurrUpstrmBytes=hcxEtherStuCurrUpstrmBytes, hcxEtherIpAddrPortId=hcxEtherIpAddrPortId, hcxEtherPrevTxPkts=hcxEtherPrevTxPkts, hcxEtherPortPrimServState=hcxEtherPortPrimServState, hcxEtherPortShelfId=hcxEtherPortShelfId, hcxEtherPortPrimStateChange=hcxEtherPortPrimStateChange, hcxEtherStuClearStats=hcxEtherStuClearStats, hcxEtherIpAddrIPStatus=hcxEtherIpAddrIPStatus, hcxEtherPortConfigState=hcxEtherPortConfigState, hcxEtherFaultStatusLedChange=hcxEtherFaultStatusLedChange, hcxEtherCurrRxPkts=hcxEtherCurrRxPkts, hcxEtherPortRestartAction=hcxEtherPortRestartAction, hcxEtherPortSpeedSelect=hcxEtherPortSpeedSelect, hcxServGrpAssocSlotId=hcxServGrpAssocSlotId, com21HcxEtherStatsEntry=com21HcxEtherStatsEntry, hcxEtherPrevCollisions=hcxEtherPrevCollisions, PYSNMP_MODULE_ID=com21HcxEth, com21HcxEtherUnitGroup=com21HcxEtherUnitGroup, hcxEtherPrevCrcPkts=hcxEtherPrevCrcPkts, com21HcxEtherStuStatsTable=com21HcxEtherStuStatsTable, hcxEtherStatsPortId=hcxEtherStatsPortId, com21HcxServGrpAssocTable=com21HcxServGrpAssocTable, hcxEtherClearStats=hcxEtherClearStats, com21HcxEtherIpAddrTable=com21HcxEtherIpAddrTable, com21HcxEtherStatsTable=com21HcxEtherStatsTable, hcxEtherAggrUpStrmMaxRate=hcxEtherAggrUpStrmMaxRate, hcxEtherPortId=hcxEtherPortId, hcxEtherPortService=hcxEtherPortService, hcxEtherCurrCrcPkts=hcxEtherCurrCrcPkts, hcxEtherPortLinkStatusLedChange=hcxEtherPortLinkStatusLedChange, hcxEtherUnitSecStateChange=hcxEtherUnitSecStateChange, hcxEtherAggrActUpStrmMinRate=hcxEtherAggrActUpStrmMinRate, hcxServGrpAssocNumOfStus=hcxServGrpAssocNumOfStus, hcxEtherStuPrevDnstrmDropPkts=hcxEtherStuPrevDnstrmDropPkts, hcxEtherTestStatusLed=hcxEtherTestStatusLed, hcxServGrpAssocRate=hcxServGrpAssocRate, hcxEtherPortSecStateChange=hcxEtherPortSecStateChange, com21HcxEtherPortEntry=com21HcxEtherPortEntry, hcxEtherStuPrevUpstrmBytes=hcxEtherStuPrevUpstrmBytes, hcxEtherIpAddrShelfId=hcxEtherIpAddrShelfId, hcxEtherStuCurrDnstrmDropPkts=hcxEtherStuCurrDnstrmDropPkts, hcxEtherUnitSecServState=hcxEtherUnitSecServState, hcxServGrpAssocNumOfVlans=hcxServGrpAssocNumOfVlans, hcxEtherIpAddrIPMask=hcxEtherIpAddrIPMask, com21HcxEtherStatsGroup=com21HcxEtherStatsGroup, com21HcxEtherPortTable=com21HcxEtherPortTable, hcxEtherPortSlotId=hcxEtherPortSlotId, Com21RowStatus=Com21RowStatus, hcxEtherAggrActDnStrmCbrRate=hcxEtherAggrActDnStrmCbrRate, hcxEtherAgeTime=hcxEtherAgeTime, hcxEtherAggrUpStrmCbrRate=hcxEtherAggrUpStrmCbrRate, hcxEtherStuCurrDnstrmBytes=hcxEtherStuCurrDnstrmBytes, hcxEtherAggrActDnStrmPcrRate=hcxEtherAggrActDnStrmPcrRate, hcxEtherShelfId=hcxEtherShelfId, hcxEtherPortType=hcxEtherPortType, hcxEtherCurrRunts=hcxEtherCurrRunts, hcxServGrpAssocType=hcxServGrpAssocType, hcxEtherStatsShelfId=hcxEtherStatsShelfId, hcxEtherAggrUpStrmMinRate=hcxEtherAggrUpStrmMinRate, hcxEtherStuCurrUpstrmAal5CrcErrs=hcxEtherStuCurrUpstrmAal5CrcErrs, PrimServiceState=PrimServiceState, hcxEtherNoPorts=hcxEtherNoPorts, hcxEtherStuStatsMacAddr=hcxEtherStuStatsMacAddr, hcxEtherPortIpAddr=hcxEtherPortIpAddr, hcxEtherStuPrevUpstrmAal5CrcErrs=hcxEtherStuPrevUpstrmAal5CrcErrs, hcxEtherHardwareVersion=hcxEtherHardwareVersion, hcxEtherUnitPrimServState=hcxEtherUnitPrimServState, hcxEtherMaxBandwidth=hcxEtherMaxBandwidth, hcxEtherStuPrevDnstrmBytes=hcxEtherStuPrevDnstrmBytes, hcxEtherPortAutoNegEnable=hcxEtherPortAutoNegEnable, com21HcxEtherUnitTable=com21HcxEtherUnitTable, hcxEtherIpAddrIPAddr=hcxEtherIpAddrIPAddr, hcxEtherTestStatusLedChange=hcxEtherTestStatusLedChange, hcxEtherIpAddrSlotId=hcxEtherIpAddrSlotId, hcxEtherCurrGrunts=hcxEtherCurrGrunts, com21HcxEtherStuStatsGroup=com21HcxEtherStuStatsGroup, hcxEtherRestartAction=hcxEtherRestartAction, hcxEtherCurrTxPkts=hcxEtherCurrTxPkts, com21HcxEtherIpAddrGroup=com21HcxEtherIpAddrGroup, hcxEtherUnitPrimStateChange=hcxEtherUnitPrimStateChange, hcxServGrpAssocPortId=hcxServGrpAssocPortId, com21HcxEtherPortGroup=com21HcxEtherPortGroup, hcxEtherStatsSlotId=hcxEtherStatsSlotId, hcxEtherPrevRxPkts=hcxEtherPrevRxPkts, hcxEtherPortArpFiltRate=hcxEtherPortArpFiltRate, hcxServGrpAssocCardType=hcxServGrpAssocCardType, com21HcxEth=com21HcxEth, hcxEtherAggrDnStrmCbrRate=hcxEtherAggrDnStrmCbrRate, hcxEtherPrevGrunts=hcxEtherPrevGrunts)
