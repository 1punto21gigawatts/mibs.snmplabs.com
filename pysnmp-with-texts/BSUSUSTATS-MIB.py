#
# PySNMP MIB module BSUSUSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUSUSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aniBsuSuGroup, = mibBuilder.importSymbols("ANIROOT-MIB", "aniBsuSuGroup")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
aniBsuSuMacAddr, = mibBuilder.importSymbols("BSUSUINV-MIB", "aniBsuSuMacAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, IpAddress, ObjectIdentity, Bits, Counter32, Counter64, NotificationType, Integer32, Unsigned32, iso, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "IpAddress", "ObjectIdentity", "Bits", "Counter32", "Counter64", "NotificationType", "Integer32", "Unsigned32", "iso", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aniBsuSuStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4))
if mibBuilder.loadTexts: aniBsuSuStatistics.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniBsuSuStatistics.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniBsuSuStatistics.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniBsuSuStatistics.setDescription('This group contains Statistical information for each SU connected to this BSU. It displays statistics per SU per Service Flow ID when viewed from the BSU. ')
aniBsuSuServStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1), )
if mibBuilder.loadTexts: aniBsuSuServStatsTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsTable.setDescription('This table provides the statistics information for each SU for each Service Flow. ')
aniBsuSuServStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1), ).setIndexNames((0, "BSUSUINV-MIB", "aniBsuSuMacAddr"), (0, "BSUSUSTATS-MIB", "aniBsuSuServStatsFlowId"))
if mibBuilder.loadTexts: aniBsuSuServStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsEntry.setDescription('An entry with objects that provide statistics information for each Service Flow. ')
aniBsuSuServStatsFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsFlowId.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsFlowId.setDescription('The Service Flow Identifier. ')
aniBsuSuServStatsDSEthernetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsDSEthernetPkts.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsDSEthernetPkts.setDescription('The total number of downstream Ethernet packets for this Service FlowId. ')
aniBsuSuServStatsDSDropEthernetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsDSDropEthernetPkts.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsDSDropEthernetPkts.setDescription('The total number of downstream Ethernet packets that got dropped. This is visible only when ARQ is enabled. ')
aniBsuSuServStatsDSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsDSBytes.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsDSBytes.setDescription('The total number of downstream bytes successfully received. ')
aniBsuSuServStatsDSWirelessPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsDSWirelessPkts.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsDSWirelessPkts.setDescription('The total number of downstream Wireless packets for this Service FlowId. ')
aniBsuSuServStatsDSWirelessPktsRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsDSWirelessPktsRetrans.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsDSWirelessPktsRetrans.setDescription('The number of times downstream Wireless packets are retransmitted. This is visible only when ARQ is enabled. ')
aniBsuSuServStatsUSEthernetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsUSEthernetPkts.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsUSEthernetPkts.setDescription('The total number of upstream Ethernet packets for this Service FlowId. ')
aniBsuSuServStatsUSDropEthernetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsUSDropEthernetPkts.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsUSDropEthernetPkts.setDescription('The total number of upstream Ethernet packets that got dropped. This is visible only when ARQ is enabled. ')
aniBsuSuServStatsUSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsUSBytes.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsUSBytes.setDescription('The total number of upstream bytes successfully received. ')
aniBsuSuServStatsUSWirelessPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuServStatsUSWirelessPkts.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuServStatsUSWirelessPkts.setDescription('The total number of upstream Wireless packets for this Service FlowId. ')
aniBsuSuSignalQualityTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2), )
if mibBuilder.loadTexts: aniBsuSuSignalQualityTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSignalQualityTable.setDescription('A table with entries for describing the Signal Quality associated with the SU per Service Flow. ')
aniBsuSuSignalQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1), ).setIndexNames((0, "BSUSUINV-MIB", "aniBsuSuMacAddr"), (0, "BSUSUSTATS-MIB", "aniBsuSuServStatsFlowId"))
if mibBuilder.loadTexts: aniBsuSuSignalQualityEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSignalQualityEntry.setDescription('An entry with objects that describe the signal quality for a given SU Service Flow. ')
aniBsuSuSigQCollidedBurstsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuSigQCollidedBurstsCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSigQCollidedBurstsCount.setDescription('The number of Wireless Packet collisions. ')
aniBsuSuSigQCorrFecErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuSigQCorrFecErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSigQCorrFecErrorCount.setDescription('The number of FEC errors which were corrected. ')
aniBsuSuSigQUnCorrFecErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuSigQUnCorrFecErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSigQUnCorrFecErrorCount.setDescription('The total number of FEC errors that are uncorrectable. ')
aniBsuSuSigQNoFecErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuSigQNoFecErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSigQNoFecErrorCount.setDescription('The number of codewords detected without any errors. ')
aniBsuSuSigQNoUniqWordDetectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuSigQNoUniqWordDetectedCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSigQNoUniqWordDetectedCount.setDescription('The No Unique Word Deteced count. ')
aniBsuSuSigQNoEnergyDetectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuSigQNoEnergyDetectedCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuSigQNoEnergyDetectedCount.setDescription('The total number of instances where no energy is detected. ')
mibBuilder.exportSymbols("BSUSUSTATS-MIB", PYSNMP_MODULE_ID=aniBsuSuStatistics, aniBsuSuSigQCorrFecErrorCount=aniBsuSuSigQCorrFecErrorCount, aniBsuSuStatistics=aniBsuSuStatistics, aniBsuSuServStatsUSEthernetPkts=aniBsuSuServStatsUSEthernetPkts, aniBsuSuSigQNoFecErrorCount=aniBsuSuSigQNoFecErrorCount, aniBsuSuServStatsEntry=aniBsuSuServStatsEntry, aniBsuSuServStatsFlowId=aniBsuSuServStatsFlowId, aniBsuSuServStatsUSDropEthernetPkts=aniBsuSuServStatsUSDropEthernetPkts, aniBsuSuServStatsUSBytes=aniBsuSuServStatsUSBytes, aniBsuSuSigQNoEnergyDetectedCount=aniBsuSuSigQNoEnergyDetectedCount, aniBsuSuSignalQualityEntry=aniBsuSuSignalQualityEntry, aniBsuSuServStatsDSEthernetPkts=aniBsuSuServStatsDSEthernetPkts, aniBsuSuServStatsUSWirelessPkts=aniBsuSuServStatsUSWirelessPkts, aniBsuSuServStatsDSDropEthernetPkts=aniBsuSuServStatsDSDropEthernetPkts, aniBsuSuSigQCollidedBurstsCount=aniBsuSuSigQCollidedBurstsCount, aniBsuSuServStatsDSWirelessPkts=aniBsuSuServStatsDSWirelessPkts, aniBsuSuSigQNoUniqWordDetectedCount=aniBsuSuSigQNoUniqWordDetectedCount, aniBsuSuSignalQualityTable=aniBsuSuSignalQualityTable, aniBsuSuServStatsTable=aniBsuSuServStatsTable, aniBsuSuServStatsDSBytes=aniBsuSuServStatsDSBytes, aniBsuSuServStatsDSWirelessPktsRetrans=aniBsuSuServStatsDSWirelessPktsRetrans, aniBsuSuSigQUnCorrFecErrorCount=aniBsuSuSigQUnCorrFecErrorCount)
