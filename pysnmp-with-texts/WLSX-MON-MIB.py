#
# PySNMP MIB module WLSX-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-MON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaHTRate, ArubaAPMatchType, ArubaFrameType, ArubaMonAuthAlgorithm, ArubaHTMode, ArubaRogueApType, ArubaEnableValue, ArubaStationType, ArubaPhyType, ArubaAPMatchMethod, ArubaMonEncryptionType, ArubaMonEncryptionCipher = mibBuilder.importSymbols("ARUBA-TC", "ArubaHTRate", "ArubaAPMatchType", "ArubaFrameType", "ArubaMonAuthAlgorithm", "ArubaHTMode", "ArubaRogueApType", "ArubaEnableValue", "ArubaStationType", "ArubaPhyType", "ArubaAPMatchMethod", "ArubaMonEncryptionType", "ArubaMonEncryptionCipher")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, iso, MibIdentifier, ObjectIdentity, Integer32, Counter32, Counter64, Bits, ModuleIdentity, Gauge32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TextualConvention, IpAddress, snmpModules = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibIdentifier", "ObjectIdentity", "Integer32", "Counter32", "Counter64", "Bits", "ModuleIdentity", "Gauge32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TextualConvention", "IpAddress", "snmpModules")
TimeInterval, RowStatus, PhysAddress, TestAndIncr, MacAddress, TAddress, StorageType, TruthValue, DisplayString, TDomain, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "RowStatus", "PhysAddress", "TestAndIncr", "MacAddress", "TAddress", "StorageType", "TruthValue", "DisplayString", "TDomain", "TextualConvention")
wlsxMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6))
wlsxMonMIB.setRevisions(('1908-04-16 02:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxMonMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxMonMIB.setLastUpdated('0804160206Z')
if mibBuilder.loadTexts: wlsxMonMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxMonMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxMonMIB.setDescription(' This MIB module defines MIB objects which provide information about the Monitored Access Points. ')
wlsxMonStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6))
wlsxMonInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7))
wlsxMonAccessPointStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1))
wlsxMonStationStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2))
wlsxMonAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1), )
if mibBuilder.loadTexts: wlsxMonAPStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPStatsTable.setDescription(' This Table lists the statistics of all the APs being monitored by the controller. ')
wlsxMonAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPStatsEntry.setDescription('Monitored Access Point Stats entry')
monPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: monPhyAddress.setStatus('current')
if mibBuilder.loadTexts: monPhyAddress.setDescription(' MAC address of the air monitor that is monitoring the AP. ')
monRadioNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: monRadioNumber.setStatus('current')
if mibBuilder.loadTexts: monRadioNumber.setDescription(' Radio number of the air monitor that is monitoring the AP. ')
monitoredApBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 3), MacAddress())
if mibBuilder.loadTexts: monitoredApBSSID.setStatus('current')
if mibBuilder.loadTexts: monitoredApBSSID.setDescription(' BSSID of the access point being monitored. ')
monPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 4), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPhyType.setStatus('current')
if mibBuilder.loadTexts: monPhyType.setDescription(' PHY type of the access point being monitored. ')
monAPCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: monAPCurrentChannel.setDescription(' Channel the monitored AP is using. ')
monAPNumClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPNumClients.setStatus('current')
if mibBuilder.loadTexts: monAPNumClients.setDescription(' Number of clients associated to this monitored AP. ')
monAPTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPTxPkts.setStatus('current')
if mibBuilder.loadTexts: monAPTxPkts.setDescription(' The number of packets transmitted by this monitored AP. ')
monAPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPTxBytes.setStatus('current')
if mibBuilder.loadTexts: monAPTxBytes.setDescription(' The number of bytes transmitted by this monitored AP. ')
monAPRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRxPkts.setStatus('current')
if mibBuilder.loadTexts: monAPRxPkts.setDescription(' The number of packets received by this monitored AP. ')
monAPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRxBytes.setStatus('current')
if mibBuilder.loadTexts: monAPRxBytes.setDescription(' The number of bytes received by this monitored AP. ')
monAPTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPTxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: monAPTxDeauthentications.setDescription(' The number of deauthentications transmitted by this monitored AP. ')
monAPRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: monAPRxDeauthentications.setDescription(' The number of deauthentications received by this monitored AP. ')
monAPChannelThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPChannelThroughput.setStatus('current')
if mibBuilder.loadTexts: monAPChannelThroughput.setDescription(' The throughput achieved on this channel by this monitored AP. ')
monAPFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: monAPFrameRetryRate.setDescription(' The number of retry packets as a percentage of the total packets transmitted and received by this monitored AP ')
monAPFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: monAPFrameLowSpeedRate.setDescription(' The number of low data rate (<= 18Mbps for A/G bands and <=2Mbps for B band) packets as a percentage of the total packets transmitted and received by this monitored AP ')
monAPFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: monAPFrameNonUnicastRate.setDescription(' The multicast rate on this monitored AP. ')
monAPFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: monAPFrameFragmentationRate.setDescription(' The number of fragments as a percentage of the total packets transmitted by this monitored AP. ')
monAPFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: monAPFrameBandwidthRate.setDescription(' The bandwidth of this monitored AP in Kbps. ')
monAPFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameRetryErrorRate.setStatus('deprecated')
if mibBuilder.loadTexts: monAPFrameRetryErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on this monitored AP. ')
monAPChannelErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPChannelErrorRate.setStatus('current')
if mibBuilder.loadTexts: monAPChannelErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on the current channel. ')
monAPESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPESSID.setStatus('current')
if mibBuilder.loadTexts: monAPESSID.setDescription(' ESSID of the access point being monitored. ')
monAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPRSSI.setStatus('current')
if mibBuilder.loadTexts: monAPRSSI.setDescription(' SNR of the access point being monitored. ')
monAPFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: monAPFrameReceiveErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on this monitored AP. ')
wlsxMonAPRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2), )
if mibBuilder.loadTexts: wlsxMonAPRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPRateStatsTable.setDescription(' This table contains all the monitored AP Packet and Byte Counts but represented in terms of rate categories. ')
wlsxMonAPRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPRateStatsEntry.setDescription('Data rate based packet and byte count entry for a monitored AP')
monAPStatsTotPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt1Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 1Mbps rate. ')
monAPStatsTotBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt1Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 1Mbps rate. ')
monAPStatsTotPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt2Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 2Mbps rate. ')
monAPStatsTotBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt2Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 2Mbps rate. ')
monAPStatsTotPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt5Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 5Mbps rate. ')
monAPStatsTotBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt5Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 5Mbps rate. ')
monAPStatsTotPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt11Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 11Mbps rate. ')
monAPStatsTotBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt11Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 11Mbps rate. ')
monAPStatsTotPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt6Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 6Mbps rate. ')
monAPStatsTotBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt6Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 6Mbps rate. ')
monAPStatsTotPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt12Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 12Mbps rate. ')
monAPStatsTotBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt12Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 12Mbps rate. ')
monAPStatsTotPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt18Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 18Mbps rate. ')
monAPStatsTotBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt18Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 18Mbps rate. ')
monAPStatsTotPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt24Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 24Mbps rate. ')
monAPStatsTotBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt24Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 24Mbps rate. ')
monAPStatsTotPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt36Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 36Mbps rate. ')
monAPStatsTotBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt36Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 36Mbps rate. ')
monAPStatsTotPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt48Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 48Mbps rate. ')
monAPStatsTotBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt48Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 48Mbps rate. ')
monAPStatsTotPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt54Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 54Mbps rate. ')
monAPStatsTotBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt54Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 54Mbps rate. ')
monAPStatsTotPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotPktsAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotPktsAt9Mbps.setDescription(' This attribute indicates the total number of packets observed from this BSSID at 9Mbps rate. ')
monAPStatsTotBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotBytesAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotBytesAt9Mbps.setDescription(' This attribute indicates the total number of Bytes observed from this BSSID at 9Mbps rate. ')
wlsxMonAPDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3), )
if mibBuilder.loadTexts: wlsxMonAPDATypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPDATypeStatsTable.setDescription(' This table contains all the per BSSID Packet and Byte Counts but broken down in terms of Destination Address Type. ')
wlsxMonAPDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPDATypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPDATypeStatsEntry.setDescription(' Destination Address based packet and byte count entry for a monitored AP ')
monAPStatsTotDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDABroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDABroadcastPkts.setDescription(' This attribute indicates the total number of Broadcast packets observed from this BSSID. ')
monAPStatsTotDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDABroadcastBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDABroadcastBytes.setDescription(' This attribute indicates the total number of Broadcast Bytes observed from this BSSID. ')
monAPStatsTotDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDAMulticastPkts.setDescription(' This attribute indicates the total number of Multicast packets observed from this BSSID. ')
monAPStatsTotDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDAMulticastBytes.setDescription(' This attribute indicates the total number of Multicast Bytes observed from this BSSID. ')
monAPStatsTotDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDAUnicastPkts.setDescription(' This attribute indicates the total number of Unicast packets observed from this BSSID. ')
monAPStatsTotDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDAUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDAUnicastBytes.setDescription(' This attribute indicates the total number of Unicast Bytes observed from this BSSID. ')
wlsxMonAPFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4), )
if mibBuilder.loadTexts: wlsxMonAPFrameTypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPFrameTypeStatsTable.setDescription(' This table contains all the per BSSID Packet and Byte Counts but broken down into different Frame Types. ')
wlsxMonAPFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPFrameTypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPFrameTypeStatsEntry.setDescription('Frame Type based packet and byte count entry for a monitored AP')
monAPStatsTotMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotMgmtPkts.setDescription(' This attribute indicates the total number of Management packets observed from this BSSID. ')
monAPStatsTotMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotMgmtBytes.setDescription(' This attribute indicates the total number of Management Bytes observed from this BSSID. ')
monAPStatsTotCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotCtrlPkts.setDescription(' This attribute indicates the total number of Control packets observed from this BSSID. ')
monAPStatsTotCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotCtrlBytes.setDescription(' This attribute indicates the total number of Control Bytes observed from this BSSID. ')
monAPStatsTotDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDataPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDataPkts.setDescription(' This attribute indicates the total number of Data packets observed from this BSSID. ')
monAPStatsTotDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotDataBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotDataBytes.setDescription(' This attribute indicates the total number of Data Bytes observed from this BSSID. ')
wlsxMonAPPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5), )
if mibBuilder.loadTexts: wlsxMonAPPktSizeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPPktSizeStatsTable.setDescription(' This table contains all the per BSSID Packet and Byte Counts but broken down into different Packet Sizes. ')
wlsxMonAPPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPPktSizeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPPktSizeStatsEntry.setDescription('Packet Size based packet count entry for a BSSID')
monAPStatsPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsPkts63Bytes.setDescription(' This attribute indicates the total number of packets transmitted by the AP that were less than 64 bytes long. ')
monAPStatsPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts64To127.setStatus('current')
if mibBuilder.loadTexts: monAPStatsPkts64To127.setDescription(' This attribute indicates the total number of packets transmitted by the AP that were between 64 and 127 bytes long. ')
monAPStatsPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts128To255.setStatus('current')
if mibBuilder.loadTexts: monAPStatsPkts128To255.setDescription(' This attribute indicates the total number of packets transmitted by the AP that were between 128 and 255 bytes long. ')
monAPStatsPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts256To511.setStatus('current')
if mibBuilder.loadTexts: monAPStatsPkts256To511.setDescription(' This attribute indicates the total number of packets transmitted by the AP that were between 256 and 511 bytes long. ')
monAPStatsPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: monAPStatsPkts512To1023.setDescription(' This attribute indicates the total number of packets transmitted by the AP that were between 512 and 1023 bytes long. ')
monAPStatsPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: monAPStatsPkts1024To1518.setDescription(' This attribute indicates the total number of packets transmitted by the AP that were between 1024 and 1518 bytes long. ')
wlsxMonAPHTRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6), )
if mibBuilder.loadTexts: wlsxMonAPHTRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPHTRateStatsTable.setDescription(' This table contains all the monitored AP Packet and Byte Counts but represented in terms of HT rate categories. ')
wlsxMonAPHTRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"), (0, "WLSX-MON-MIB", "monHTRate"))
if mibBuilder.loadTexts: wlsxMonAPHTRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPHTRateStatsEntry.setDescription('Data rate based packet and byte count entry for a monitored AP')
monHTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1, 1), ArubaHTRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHTRate.setStatus('current')
if mibBuilder.loadTexts: monHTRate.setDescription(' The rate at which the counters apply ')
monAPStatsTotHTPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotHTPkts.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotHTPkts.setDescription(' The total number of packets processed at the indicated rate ')
monAPStatsTotHTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPStatsTotHTBytes.setStatus('current')
if mibBuilder.loadTexts: monAPStatsTotHTBytes.setDescription(' The total number of bytes processed at the indicated rate ')
wlsxMonStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1), )
if mibBuilder.loadTexts: wlsxMonStationStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationStatsTable.setDescription(' This Table lists the statistics of all the wireless stations being monitored by an AP connected to this controller. ')
wlsxMonStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationStatsEntry.setDescription('Monitored Station Stats Entry')
monitoredStaPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: monitoredStaPhyAddress.setStatus('current')
if mibBuilder.loadTexts: monitoredStaPhyAddress.setDescription(' MAC address of the monitored station ')
monStaChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaChannelNum.setStatus('current')
if mibBuilder.loadTexts: monStaChannelNum.setDescription(' The channel the station is currently using. ')
monStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts.setDescription(' The number of packets transmitted by this station. ')
monStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytes.setDescription(' The number of bytes transmitted by this station. ')
monStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts.setDescription(' The number of packets received by this station. ')
monStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytes.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytes.setDescription(' The number of bytes received by this station. ')
monStaTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBCastPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxBCastPkts.setDescription(' The number of broadcast packets transmitted by this station. ')
monStaTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBCastBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxBCastBytes.setDescription(' The number of broadcast bytes transmitted by this station. ')
monStaTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMCastPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxMCastPkts.setDescription(' The number of multicast packets transmitted by this station. ')
monStaTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMCastBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxMCastBytes.setDescription(' The number of multicast bytes transmitted by this station. ')
monStaDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaDataPkts.setStatus('current')
if mibBuilder.loadTexts: monStaDataPkts.setDescription(' The total number of Data packets transmitted by this station. ')
monStaCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: monStaCtrlPkts.setDescription(' The total number of Control packets transmitted by this station. ')
monStaNumAssocRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaNumAssocRequests.setStatus('current')
if mibBuilder.loadTexts: monStaNumAssocRequests.setDescription(' The number of Association requests transmitted by this station. ')
monStaNumAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaNumAuthRequests.setStatus('current')
if mibBuilder.loadTexts: monStaNumAuthRequests.setDescription(' The number of Authentication requests transmitted by this station ')
monStaTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: monStaTxDeauthentications.setDescription(' The number of Deauthentication frames transmitted by this station. ')
monStaRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: monStaRxDeauthentications.setDescription(' The number of Deauthentication frames received by this station. ')
monStaFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: monStaFrameRetryRate.setDescription(' The number of retry packets as a percentage of the total packets transmitted and received by this station. ')
monStaFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: monStaFrameLowSpeedRate.setDescription(' The number of low data rate (<= 18Mbps for A/G bands and <=2Mbps for B band) packets as a percentage of the total packets transmitted and received by this station. ')
monStaFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: monStaFrameNonUnicastRate.setDescription(' The number of broadcast and multicast packets as a percentage of the total packets transmitted by this station. ')
monStaFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: monStaFrameFragmentationRate.setDescription(' The number of fragments as a percentage of the total packets transmitted by this station. ')
monStaFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: monStaFrameBandwidthRate.setDescription(' The bandwidth of this station in Kbps. ')
monStaFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameRetryErrorRate.setStatus('deprecated')
if mibBuilder.loadTexts: monStaFrameRetryErrorRate.setDescription(' The number of error packets as a percentage of the total packets received by this station. ')
monStaBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 23), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaBSSID.setStatus('current')
if mibBuilder.loadTexts: monStaBSSID.setDescription(' BSSID of the station being monitored. ')
monStaESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaESSID.setStatus('current')
if mibBuilder.loadTexts: monStaESSID.setDescription(' ESSID of the station being monitored. ')
monStaPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 25), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaPhyType.setStatus('current')
if mibBuilder.loadTexts: monStaPhyType.setDescription(' PHY type of the station being monitored. ')
monStaRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRSSI.setStatus('current')
if mibBuilder.loadTexts: monStaRSSI.setDescription(' SNR of the station being monitored. ')
monStaFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: monStaFrameReceiveErrorRate.setDescription(' The number of error packets as a percentage of the total packets received by this station. ')
wlsxMonStaRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2), )
if mibBuilder.loadTexts: wlsxMonStaRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaRateStatsTable.setDescription(' This table contains all the Packet and Byte Counts for a monitored station represented in terms of rate categories. ')
wlsxMonStaRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaRateStatsEntry.setDescription('Data rate based packet and byte count entry for a monitored station')
monStaTxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt1Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 1Mbps rate. ')
monStaTxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt1Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 1Mbps rate. ')
monStaTxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt2Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 2Mbps rate. ')
monStaTxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt2Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 2Mbps rate. ')
monStaTxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt5Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 5Mbps rate. ')
monStaTxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt5Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 5Mbps rate. ')
monStaTxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt11Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 11Mbps rate. ')
monStaTxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt11Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 11Mbps rate. ')
monStaTxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt6Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 6Mbps rate. ')
monStaTxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt6Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 6Mbps rate. ')
monStaTxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt12Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 12Mbps rate. ')
monStaTxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt12Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 12Mbps rate. ')
monStaTxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt18Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 18Mbps rate. ')
monStaTxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt18Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 18Mbps rate. ')
monStaTxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt24Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 24Mbps rate. ')
monStaTxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt24Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 24Mbps rate. ')
monStaTxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt36Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 36Mbps rate. ')
monStaTxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt36Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 36Mbps rate. ')
monStaTxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt48Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 48Mbps rate. ')
monStaTxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt48Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 48Mbps rate. ')
monStaTxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt54Mbps.setDescription(' This attribute indicates the number of Packets transmitted by the station at 54Mbps rate. ')
monStaTxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt54Mbps.setDescription(' This attribute indicates the number of Octets transmitted by the station at 54Mbps rate. ')
monStaRxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt1Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 1Mbps rate. ')
monStaRxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt1Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 1Mbps rate. ')
monStaRxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt2Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 2Mbps rate. ')
monStaRxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt2Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 2Mbps rate. ')
monStaRxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt5Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 5Mbps rate. ')
monStaRxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt5Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 5Mbps rate. ')
monStaRxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt11Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 11Mbps rate. ')
monStaRxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt11Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 11Mbps rate. ')
monStaRxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt6Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 6Mbps rate. ')
monStaRxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt6Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 6Mbps rate. ')
monStaRxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt12Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 12Mbps rate. ')
monStaRxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt12Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 12Mbps rate. ')
monStaRxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt18Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 18Mbps rate. ')
monStaRxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt18Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 18Mbps rate. ')
monStaRxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt24Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 24Mbps rate. ')
monStaRxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt24Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 24Mbps rate. ')
monStaRxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt36Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 36Mbps rate. ')
monStaRxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt36Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 36Mbps rate. ')
monStaRxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt48Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 48Mbps rate. ')
monStaRxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt48Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 48Mbps rate. ')
monStaRxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt54Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 54Mbps rate. ')
monStaRxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt54Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 54Mbps rate. ')
monStaTxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPktsAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxPktsAt9Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 9Mbps rate. ')
monStaTxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxBytesAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaTxBytesAt9Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 9Mbps rate. ')
monStaRxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPktsAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxPktsAt9Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 9Mbps rate. ')
monStaRxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxBytesAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: monStaRxBytesAt9Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 9Mbps rate. ')
wlsxMonStaDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3), )
if mibBuilder.loadTexts: wlsxMonStaDATypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaDATypeStatsTable.setDescription(' This table contains all the Packet and Byte Counts for a monitored station but but broken down in terms of Destination Address Type. ')
wlsxMonStaDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaDATypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaDATypeStatsEntry.setDescription('Data rate based packet and byte count entry for a monitored station')
monStaTxDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDABroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxDABroadcastPkts.setDescription(' This attribute indicates the number of Broadcast packets transmitted by this Station. ')
monStaTxDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDABroadcastBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxDABroadcastBytes.setDescription(' This attribute indicates the number of Broadcast Bytes transmitted by this Station. ')
monStaTxDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxDAMulticastPkts.setDescription(' This attribute indicates the number of Multicast packets transmitted by this station. ')
monStaTxDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxDAMulticastBytes.setDescription(' This attribute indicates the number of Multicast Bytes transmitted by this station. ')
monStaTxDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxDAUnicastPkts.setDescription(' This attribute indicates the total of Unicast packets transmitted by this station. ')
monStaTxDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDAUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxDAUnicastBytes.setDescription(' This attribute indicates the total of Unicast Bytes transmitted by this station. ')
wlsxMonStaFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4), )
if mibBuilder.loadTexts: wlsxMonStaFrameTypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaFrameTypeStatsTable.setDescription(' This table contains all the Packet and Byte Counts for monitored stations but broken down into different Frame Types. ')
wlsxMonStaFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaFrameTypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaFrameTypeStatsEntry.setDescription('Frame Type based packet and byte count entry for a monitored station')
monStaTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxMgmtPkts.setDescription(' This attribute indicates the transmitted Management packets from a station. ')
monStaTxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxMgmtBytes.setDescription(' This attribute indicates the transmitted Management Bytes from a station ')
monStaTxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxCtrlPkts.setDescription(' This attribute indicates the transmitted Control packets from a station ')
monStaTxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxCtrlBytes.setDescription(' This attribute indicates the transmitted Control Bytes from a station ')
monStaTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDataPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxDataPkts.setDescription(' This attribute indicates the transmitted Data packets from a station ')
monStaTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxDataBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxDataBytes.setDescription(' This attribute indicates the transmitted Data Bytes observed from this station. ')
monStaRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: monStaRxMgmtPkts.setDescription(' This attribute indicates the number of received Management packets at a station. ')
monStaRxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: monStaRxMgmtBytes.setDescription(' This attribute indicates the number of received Management Bytes at a station. ')
monStaRxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: monStaRxCtrlPkts.setDescription(' This attribute indicates the number of received Control packets at a station. ')
monStaRxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: monStaRxCtrlBytes.setDescription(' This attribute indicates the number of received Control Bytes at a station. ')
monStaRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxDataPkts.setStatus('current')
if mibBuilder.loadTexts: monStaRxDataPkts.setDescription(' This attribute indicates the number of received Data packets at a station. ')
monStaRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxDataBytes.setStatus('current')
if mibBuilder.loadTexts: monStaRxDataBytes.setDescription(' This attribute indicates the number of received Data Bytes at a station. ')
wlsxMonStaPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5), )
if mibBuilder.loadTexts: wlsxMonStaPktSizeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaPktSizeStatsTable.setDescription(' This table contains all the Packet and Byte Counts for monitored stations but broken down into different Packet Sizes. ')
wlsxMonStaPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStaPktSizeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStaPktSizeStatsEntry.setDescription('Packet Size based packet count entry for a monitored station')
monStaTxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts63Bytes.setDescription(' This attribute indicates the number of packets transmitted by the station that were less than 64 bytes long. ')
monStaTxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts64To127.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts64To127.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 64 and 127 bytes long. ')
monStaTxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts128To255.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts128To255.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 128 and 255 bytes long. ')
monStaTxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts256To511.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts256To511.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 256 and 511 bytes long. ')
monStaTxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts512To1023.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 512 and 1023 bytes long. ')
monStaTxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: monStaTxPkts1024To1518.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 1024 and 1518 bytes long. ')
monStaRxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts63Bytes.setDescription(' This attribute indicates the number of packets Received by the station that were less than 64 bytes long. ')
monStaRxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts64To127.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts64To127.setDescription(' This attribute indicates the number of packets Received by the station that were between 64 and 127 bytes long. ')
monStaRxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts128To255.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts128To255.setDescription(' This attribute indicates the number of packets Received by the station that were between 128 and 255 bytes long. ')
monStaRxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts256To511.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts256To511.setDescription(' This attribute indicates the number of packets Received by the station that were between 256 and 511 bytes long. ')
monStaRxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts512To1023.setDescription(' This attribute indicates the number of packets Received by the station that were between 512 and 1023 bytes long. ')
monStaRxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: monStaRxPkts1024To1518.setDescription(' This attribute indicates the number of packets Received by the station that were between 1024 and 1518 bytes long. ')
wlsxMonAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1))
wlsxMonStationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2))
wlsxMonAPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1), )
if mibBuilder.loadTexts: wlsxMonAPInfoTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPInfoTable.setDescription(' This lists all of the Access Points being monitored by the controller. ')
wlsxMonAPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredApBSSID"))
if mibBuilder.loadTexts: wlsxMonAPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPInfoEntry.setDescription('Access Point Info entry')
monAPInfoPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 1), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoPhyType.setStatus('current')
if mibBuilder.loadTexts: monAPInfoPhyType.setDescription(' PHY type of the access point being monitored. ')
monAPInfoCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: monAPInfoCurrentChannel.setDescription(' Channel the monitored AP is using. ')
monAPInfoClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 3), ArubaRogueApType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoClassification.setStatus('current')
if mibBuilder.loadTexts: monAPInfoClassification.setDescription(' This attribute indicates the type of the AP. ')
monAPInfoESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoESSID.setStatus('current')
if mibBuilder.loadTexts: monAPInfoESSID.setDescription(' ESSID of the access point being monitored. ')
monAPInfoRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoRSSI.setStatus('current')
if mibBuilder.loadTexts: monAPInfoRSSI.setDescription(' SNR of the access point being monitored. ')
monAPInfoMonitorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoMonitorTime.setStatus('current')
if mibBuilder.loadTexts: monAPInfoMonitorTime.setDescription(' This attribute indicates how long the access point has been monitored. ')
monAPInfoInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoInactivityTime.setStatus('current')
if mibBuilder.loadTexts: monAPInfoInactivityTime.setDescription(' This attribute indicates how long the access point has been inactive. ')
monAPInfoSnrSignalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoSnrSignalPkts.setStatus('current')
if mibBuilder.loadTexts: monAPInfoSnrSignalPkts.setDescription(' The Number of Signal Packets observed by the Monitoring AP during this sample time. ')
monAPInfoSnrSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoSnrSampleTime.setStatus('current')
if mibBuilder.loadTexts: monAPInfoSnrSampleTime.setDescription(' The Sample Time in which SNR data was collected. ')
monAPInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoStatus.setStatus('current')
if mibBuilder.loadTexts: monAPInfoStatus.setDescription(' Indicates whether this AP is considered to be up or down. ')
monAPInfoConfidence = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoConfidence.setStatus('current')
if mibBuilder.loadTexts: monAPInfoConfidence.setDescription(' Indicates the confidence that a suspected rogue AP is in fact a rogue in terms of percentage. ')
monAPInfoMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 12), ArubaAPMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoMatchType.setStatus('current')
if mibBuilder.loadTexts: monAPInfoMatchType.setDescription(' The method used to classify the AP as a rogue or suspected rogue AP. ')
monAPInfoMatchMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 13), ArubaAPMatchMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoMatchMethod.setStatus('current')
if mibBuilder.loadTexts: monAPInfoMatchMethod.setDescription(' Indicates how the match occured for rogue or suspect-rogue classification: an exact or +1 or -1 MAC match. ')
monAPInfoHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 14), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoHTMode.setStatus('current')
if mibBuilder.loadTexts: monAPInfoHTMode.setDescription(' Indicates the HT mode of the monitored AP, if any. ')
monAPInfoEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 15), ArubaMonEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoEncryptionType.setStatus('current')
if mibBuilder.loadTexts: monAPInfoEncryptionType.setDescription(' Indicates the Encryption type of the monitored AP. ')
monAPInfoWPAUnicastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 16), ArubaMonEncryptionCipher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoWPAUnicastCipher.setStatus('current')
if mibBuilder.loadTexts: monAPInfoWPAUnicastCipher.setDescription(' Indicates the WPA/WPA2 unicast cipher supported by the monitored AP. If multiple ciphers are supported, the weakest will be indicated. ')
monAPInfoWPAAuthAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 17), ArubaMonAuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoWPAAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: monAPInfoWPAAuthAlgorithm.setDescription(' Indicates the WPA/WPA2 authentication algorithm supported by the monitored AP. If multiple authentication algorithms are supported, the weakest will be indicated. ')
monAPInfoIBSS = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 1, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monAPInfoIBSS.setStatus('current')
if mibBuilder.loadTexts: monAPInfoIBSS.setDescription(' Indicates if the monitored AP is part of an adhoc network. ')
wlsxMonStationInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1), )
if mibBuilder.loadTexts: wlsxMonStationInfoTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationInfoTable.setDescription(' This Table lists statistics of all the wireless stations being monitored. ')
wlsxMonStationInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"))
if mibBuilder.loadTexts: wlsxMonStationInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationInfoEntry.setDescription('Station Info Entry')
monStaInfoChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoChannelNum.setStatus('current')
if mibBuilder.loadTexts: monStaInfoChannelNum.setDescription(' The channel the station is currently using. ')
monStaInfoBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoBSSID.setStatus('current')
if mibBuilder.loadTexts: monStaInfoBSSID.setDescription(' BSSID of the station being monitored. ')
monStaInfoESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoESSID.setStatus('current')
if mibBuilder.loadTexts: monStaInfoESSID.setDescription(' ESSID of the station being monitored. ')
monStaInfoPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 4), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoPhyType.setStatus('current')
if mibBuilder.loadTexts: monStaInfoPhyType.setDescription(' PHY type the station being monitored. ')
monStaInfoRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoRSSI.setStatus('current')
if mibBuilder.loadTexts: monStaInfoRSSI.setDescription(' SNR of the station being monitored. ')
monStaInfoClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 6), ArubaStationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoClassification.setStatus('current')
if mibBuilder.loadTexts: monStaInfoClassification.setDescription(' ')
monStaInfoMonitorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoMonitorTime.setStatus('current')
if mibBuilder.loadTexts: monStaInfoMonitorTime.setDescription(' This attribute indicates how long the station has been monitored. ')
monStaInfoInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoInactivityTime.setStatus('current')
if mibBuilder.loadTexts: monStaInfoInactivityTime.setDescription(' This attribute indicates how long the station has been inactive. ')
monStaInfoSnrSignalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoSnrSignalPkts.setStatus('current')
if mibBuilder.loadTexts: monStaInfoSnrSignalPkts.setDescription(' The Number of Signal Packets observed by the Monitoring station during this sample time. ')
monStaInfoSnrSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoSnrSampleTime.setStatus('current')
if mibBuilder.loadTexts: monStaInfoSnrSampleTime.setDescription(' The Sample Time in which SNR data was collected. ')
monStaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoStatus.setStatus('current')
if mibBuilder.loadTexts: monStaInfoStatus.setDescription(' Indicates whether this station is considered up or down. ')
monStaInfoHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 7, 2, 1, 1, 12), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaInfoHTMode.setStatus('current')
if mibBuilder.loadTexts: monStaInfoHTMode.setDescription(' Indicates the HT mode of the station, if any. ')
wlsxMonEventCountTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6), )
if mibBuilder.loadTexts: wlsxMonEventCountTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonEventCountTable.setDescription(' This Table lists counts of Events generated by the APs. ')
wlsxMonEventCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monEventID"))
if mibBuilder.loadTexts: wlsxMonEventCountEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonEventCountEntry.setDescription('Event Count Entry')
monEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monEventID.setStatus('current')
if mibBuilder.loadTexts: monEventID.setDescription(' Event ID ')
monEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monEventCount.setStatus('current')
if mibBuilder.loadTexts: monEventCount.setDescription(' Event Count ')
wlsxMonStationHTRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7), )
if mibBuilder.loadTexts: wlsxMonStationHTRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationHTRateStatsTable.setDescription(' This table contains all the monitored AP Packet and Byte Counts but represented in terms of HT rate categories. ')
wlsxMonStationHTRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1), ).setIndexNames((0, "WLSX-MON-MIB", "monPhyAddress"), (0, "WLSX-MON-MIB", "monRadioNumber"), (0, "WLSX-MON-MIB", "monitoredStaPhyAddress"), (0, "WLSX-MON-MIB", "monHTRate"))
if mibBuilder.loadTexts: wlsxMonStationHTRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationHTRateStatsEntry.setDescription('HT Data rate based packet and byte count entry for a monitored station')
monStaTxHTPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxHTPkts.setStatus('current')
if mibBuilder.loadTexts: monStaTxHTPkts.setDescription(' The total number of packets transmitted at the indicated rate ')
monStaTxHTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaTxHTBytes.setStatus('current')
if mibBuilder.loadTexts: monStaTxHTBytes.setDescription(' The total number of bytes transmitted at the indicated rate ')
monStaRxHTPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxHTPkts.setStatus('current')
if mibBuilder.loadTexts: monStaRxHTPkts.setDescription(' The total number of packets received at the indicated rate ')
monStaRxHTBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 6, 6, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monStaRxHTBytes.setStatus('current')
if mibBuilder.loadTexts: monStaRxHTBytes.setDescription(' The total number of bytes received at the indicated rate ')
mibBuilder.exportSymbols("WLSX-MON-MIB", monStaTxBytesAt18Mbps=monStaTxBytesAt18Mbps, monAPStatsTotDABroadcastBytes=monAPStatsTotDABroadcastBytes, monStaRxPktsAt18Mbps=monStaRxPktsAt18Mbps, monStaTxDataPkts=monStaTxDataPkts, monStaRxBytesAt48Mbps=monStaRxBytesAt48Mbps, wlsxMonStationHTRateStatsEntry=wlsxMonStationHTRateStatsEntry, wlsxMonInfoGroup=wlsxMonInfoGroup, monStaRxPktsAt12Mbps=monStaRxPktsAt12Mbps, monStaTxDeauthentications=monStaTxDeauthentications, monAPStatsTotBytesAt1Mbps=monAPStatsTotBytesAt1Mbps, wlsxMonAPFrameTypeStatsTable=wlsxMonAPFrameTypeStatsTable, monStaFrameRetryErrorRate=monStaFrameRetryErrorRate, monEventID=monEventID, monAPStatsPkts256To511=monAPStatsPkts256To511, monAPInfoCurrentChannel=monAPInfoCurrentChannel, monStaFrameNonUnicastRate=monStaFrameNonUnicastRate, monAPStatsTotCtrlPkts=monAPStatsTotCtrlPkts, monStaTxDABroadcastPkts=monStaTxDABroadcastPkts, monAPStatsPkts128To255=monAPStatsPkts128To255, wlsxMonStaRateStatsEntry=wlsxMonStaRateStatsEntry, monAPInfoWPAAuthAlgorithm=monAPInfoWPAAuthAlgorithm, monAPStatsTotBytesAt2Mbps=monAPStatsTotBytesAt2Mbps, wlsxMonEventCountTable=wlsxMonEventCountTable, monAPInfoMonitorTime=monAPInfoMonitorTime, monStaRxPkts63Bytes=monStaRxPkts63Bytes, monStaRxBytesAt2Mbps=monStaRxBytesAt2Mbps, wlsxMonAccessPointStatsGroup=wlsxMonAccessPointStatsGroup, monStaTxMCastPkts=monStaTxMCastPkts, monStaTxCtrlBytes=monStaTxCtrlBytes, monAPStatsTotBytesAt24Mbps=monAPStatsTotBytesAt24Mbps, monStaRxCtrlPkts=monStaRxCtrlPkts, monRadioNumber=monRadioNumber, wlsxMonAPDATypeStatsTable=wlsxMonAPDATypeStatsTable, monStaFrameReceiveErrorRate=monStaFrameReceiveErrorRate, monStaTxPkts63Bytes=monStaTxPkts63Bytes, monAPStatsTotHTBytes=monAPStatsTotHTBytes, wlsxMonEventCountEntry=wlsxMonEventCountEntry, monAPFrameReceiveErrorRate=monAPFrameReceiveErrorRate, monAPStatsTotPktsAt12Mbps=monAPStatsTotPktsAt12Mbps, monStaTxBytesAt2Mbps=monStaTxBytesAt2Mbps, monStaChannelNum=monStaChannelNum, monStaInfoMonitorTime=monStaInfoMonitorTime, monStaNumAssocRequests=monStaNumAssocRequests, wlsxMonAPInfoEntry=wlsxMonAPInfoEntry, monAPStatsTotDAUnicastBytes=monAPStatsTotDAUnicastBytes, monHTRate=monHTRate, monAPStatsTotBytesAt54Mbps=monAPStatsTotBytesAt54Mbps, wlsxMonMIB=wlsxMonMIB, wlsxMonAPFrameTypeStatsEntry=wlsxMonAPFrameTypeStatsEntry, monStaRxBytesAt24Mbps=monStaRxBytesAt24Mbps, wlsxMonAPStatsTable=wlsxMonAPStatsTable, wlsxMonStaPktSizeStatsTable=wlsxMonStaPktSizeStatsTable, monStaTxBytesAt9Mbps=monStaTxBytesAt9Mbps, monStaFrameBandwidthRate=monStaFrameBandwidthRate, monAPCurrentChannel=monAPCurrentChannel, monStaTxPktsAt1Mbps=monStaTxPktsAt1Mbps, wlsxMonStatsGroup=wlsxMonStatsGroup, monAPRxPkts=monAPRxPkts, monAPStatsTotPktsAt11Mbps=monAPStatsTotPktsAt11Mbps, monStaTxPktsAt18Mbps=monStaTxPktsAt18Mbps, monStaTxBytesAt48Mbps=monStaTxBytesAt48Mbps, monStaTxPkts=monStaTxPkts, monAPChannelThroughput=monAPChannelThroughput, monStaTxBytesAt1Mbps=monStaTxBytesAt1Mbps, monStaInfoRSSI=monStaInfoRSSI, wlsxMonAPHTRateStatsEntry=wlsxMonAPHTRateStatsEntry, monStaRxBytesAt9Mbps=monStaRxBytesAt9Mbps, wlsxMonStaFrameTypeStatsTable=wlsxMonStaFrameTypeStatsTable, monAPFrameBandwidthRate=monAPFrameBandwidthRate, monStaTxCtrlPkts=monStaTxCtrlPkts, monAPStatsTotHTPkts=monAPStatsTotHTPkts, monStaRxBytesAt6Mbps=monStaRxBytesAt6Mbps, monStaRxPkts1024To1518=monStaRxPkts1024To1518, monPhyAddress=monPhyAddress, monStaTxPkts64To127=monStaTxPkts64To127, monAPStatsTotBytesAt5Mbps=monAPStatsTotBytesAt5Mbps, monAPStatsTotPktsAt36Mbps=monAPStatsTotPktsAt36Mbps, wlsxMonAPHTRateStatsTable=wlsxMonAPHTRateStatsTable, monStaRxPktsAt48Mbps=monStaRxPktsAt48Mbps, monStaRxDataBytes=monStaRxDataBytes, monStaRxPkts64To127=monStaRxPkts64To127, monStaTxDataBytes=monStaTxDataBytes, monStaTxMgmtBytes=monStaTxMgmtBytes, monAPTxBytes=monAPTxBytes, wlsxMonAPPktSizeStatsEntry=wlsxMonAPPktSizeStatsEntry, wlsxMonStationInfoTable=wlsxMonStationInfoTable, monStaRxBytesAt5Mbps=monStaRxBytesAt5Mbps, monStaNumAuthRequests=monStaNumAuthRequests, wlsxMonStaRateStatsTable=wlsxMonStaRateStatsTable, monAPInfoStatus=monAPInfoStatus, monStaTxPkts128To255=monStaTxPkts128To255, monAPStatsTotBytesAt48Mbps=monAPStatsTotBytesAt48Mbps, monStaRxPktsAt1Mbps=monStaRxPktsAt1Mbps, monStaRxPktsAt54Mbps=monStaRxPktsAt54Mbps, monStaCtrlPkts=monStaCtrlPkts, monStaTxBytesAt6Mbps=monStaTxBytesAt6Mbps, monStaRxBytesAt11Mbps=monStaRxBytesAt11Mbps, monStaRxBytesAt18Mbps=monStaRxBytesAt18Mbps, monStaRxPktsAt6Mbps=monStaRxPktsAt6Mbps, monStaTxBytesAt24Mbps=monStaTxBytesAt24Mbps, monStaRxPktsAt5Mbps=monStaRxPktsAt5Mbps, monStaRxPkts128To255=monStaRxPkts128To255, monAPInfoClassification=monAPInfoClassification, monAPStatsTotDAUnicastPkts=monAPStatsTotDAUnicastPkts, monitoredApBSSID=monitoredApBSSID, monAPStatsTotPktsAt6Mbps=monAPStatsTotPktsAt6Mbps, monStaTxPktsAt54Mbps=monStaTxPktsAt54Mbps, monAPInfoESSID=monAPInfoESSID, monStaInfoStatus=monStaInfoStatus, monStaRxHTBytes=monStaRxHTBytes, monStaTxBCastBytes=monStaTxBCastBytes, wlsxMonStationInfoEntry=wlsxMonStationInfoEntry, monStaTxDABroadcastBytes=monStaTxDABroadcastBytes, monAPInfoRSSI=monAPInfoRSSI, monStaRxCtrlBytes=monStaRxCtrlBytes, monAPFrameFragmentationRate=monAPFrameFragmentationRate, monStaTxBytes=monStaTxBytes, monAPStatsTotPktsAt5Mbps=monAPStatsTotPktsAt5Mbps, monStaTxBytesAt5Mbps=monStaTxBytesAt5Mbps, monAPRSSI=monAPRSSI, monStaInfoBSSID=monStaInfoBSSID, monStaInfoChannelNum=monStaInfoChannelNum, monAPStatsPkts512To1023=monAPStatsPkts512To1023, monAPStatsTotPktsAt2Mbps=monAPStatsTotPktsAt2Mbps, monStaTxPktsAt9Mbps=monStaTxPktsAt9Mbps, monStaInfoHTMode=monStaInfoHTMode, wlsxMonStationHTRateStatsTable=wlsxMonStationHTRateStatsTable, monStaBSSID=monStaBSSID, wlsxMonStaDATypeStatsEntry=wlsxMonStaDATypeStatsEntry, monStaInfoPhyType=monStaInfoPhyType, monAPInfoInactivityTime=monAPInfoInactivityTime, monStaTxBytesAt11Mbps=monStaTxBytesAt11Mbps, monStaTxDAMulticastPkts=monStaTxDAMulticastPkts, monAPStatsTotBytesAt9Mbps=monAPStatsTotBytesAt9Mbps, monAPInfoPhyType=monAPInfoPhyType, monAPStatsTotBytesAt11Mbps=monAPStatsTotBytesAt11Mbps, monPhyType=monPhyType, monAPStatsTotPktsAt18Mbps=monAPStatsTotPktsAt18Mbps, monStaRSSI=monStaRSSI, monStaRxBytesAt12Mbps=monStaRxBytesAt12Mbps, monStaTxDAUnicastPkts=monStaTxDAUnicastPkts, wlsxMonStationStatsGroup=wlsxMonStationStatsGroup, monAPStatsPkts63Bytes=monAPStatsPkts63Bytes, wlsxMonAPPktSizeStatsTable=wlsxMonAPPktSizeStatsTable, monStaRxMgmtPkts=monStaRxMgmtPkts, monEventCount=monEventCount, monStaESSID=monStaESSID, wlsxMonStationStatsEntry=wlsxMonStationStatsEntry, wlsxMonAPDATypeStatsEntry=wlsxMonAPDATypeStatsEntry, monStaInfoClassification=monStaInfoClassification, monStaTxMgmtPkts=monStaTxMgmtPkts, monStaRxHTPkts=monStaRxHTPkts, monStaTxHTBytes=monStaTxHTBytes, monAPStatsTotBytesAt36Mbps=monAPStatsTotBytesAt36Mbps, monStaTxDAMulticastBytes=monStaTxDAMulticastBytes, monStaInfoSnrSampleTime=monStaInfoSnrSampleTime, monStaTxMCastBytes=monStaTxMCastBytes, monAPStatsTotPktsAt54Mbps=monAPStatsTotPktsAt54Mbps, monAPFrameRetryRate=monAPFrameRetryRate, monAPStatsTotPktsAt9Mbps=monAPStatsTotPktsAt9Mbps, wlsxMonAPRateStatsEntry=wlsxMonAPRateStatsEntry, monStaRxBytesAt1Mbps=monStaRxBytesAt1Mbps, monStaTxPkts512To1023=monStaTxPkts512To1023, monStaRxPkts512To1023=monStaRxPkts512To1023, monAPInfoWPAUnicastCipher=monAPInfoWPAUnicastCipher, monAPInfoMatchType=monAPInfoMatchType, monAPRxBytes=monAPRxBytes, monAPStatsTotPktsAt24Mbps=monAPStatsTotPktsAt24Mbps, monAPInfoHTMode=monAPInfoHTMode, monStaTxPktsAt12Mbps=monStaTxPktsAt12Mbps, monStaRxBytes=monStaRxBytes, monStaInfoESSID=monStaInfoESSID, monAPStatsPkts64To127=monAPStatsPkts64To127, monStaTxBytesAt36Mbps=monStaTxBytesAt36Mbps, monStaTxBytesAt54Mbps=monStaTxBytesAt54Mbps, wlsxMonStationStatsTable=wlsxMonStationStatsTable, monAPTxPkts=monAPTxPkts, monStaTxPktsAt11Mbps=monStaTxPktsAt11Mbps, monStaPhyType=monStaPhyType, monAPInfoSnrSignalPkts=monAPInfoSnrSignalPkts, monAPInfoConfidence=monAPInfoConfidence, monAPNumClients=monAPNumClients, monAPStatsTotPktsAt1Mbps=monAPStatsTotPktsAt1Mbps, wlsxMonAPInfoTable=wlsxMonAPInfoTable, monAPStatsTotDataPkts=monAPStatsTotDataPkts, monAPInfoIBSS=monAPInfoIBSS, monStaRxDeauthentications=monStaRxDeauthentications, wlsxMonStaPktSizeStatsEntry=wlsxMonStaPktSizeStatsEntry, monAPStatsTotCtrlBytes=monAPStatsTotCtrlBytes, monStaTxPktsAt5Mbps=monStaTxPktsAt5Mbps, monStaTxDAUnicastBytes=monStaTxDAUnicastBytes, PYSNMP_MODULE_ID=wlsxMonMIB, monAPStatsPkts1024To1518=monAPStatsPkts1024To1518, monStaFrameFragmentationRate=monStaFrameFragmentationRate, monStaFrameLowSpeedRate=monStaFrameLowSpeedRate, wlsxMonAPRateStatsTable=wlsxMonAPRateStatsTable, monAPStatsTotBytesAt6Mbps=monAPStatsTotBytesAt6Mbps, monStaTxPktsAt6Mbps=monStaTxPktsAt6Mbps, monStaRxPktsAt36Mbps=monStaRxPktsAt36Mbps, monStaInfoSnrSignalPkts=monStaInfoSnrSignalPkts, monStaRxBytesAt54Mbps=monStaRxBytesAt54Mbps, monStaRxDataPkts=monStaRxDataPkts, monStaTxPktsAt48Mbps=monStaTxPktsAt48Mbps, wlsxMonStaDATypeStatsTable=wlsxMonStaDATypeStatsTable, monStaRxBytesAt36Mbps=monStaRxBytesAt36Mbps, monAPInfoEncryptionType=monAPInfoEncryptionType, monAPStatsTotDAMulticastBytes=monAPStatsTotDAMulticastBytes, monStaDataPkts=monStaDataPkts, monAPFrameNonUnicastRate=monAPFrameNonUnicastRate, monStaTxHTPkts=monStaTxHTPkts, monStaTxBCastPkts=monStaTxBCastPkts, monAPESSID=monAPESSID, monStaTxPkts1024To1518=monStaTxPkts1024To1518, monStaRxPktsAt11Mbps=monStaRxPktsAt11Mbps, monAPStatsTotPktsAt48Mbps=monAPStatsTotPktsAt48Mbps, wlsxMonStaFrameTypeStatsEntry=wlsxMonStaFrameTypeStatsEntry, monStaFrameRetryRate=monStaFrameRetryRate, monStaTxPktsAt36Mbps=monStaTxPktsAt36Mbps, monitoredStaPhyAddress=monitoredStaPhyAddress, monStaRxPktsAt24Mbps=monStaRxPktsAt24Mbps, wlsxMonAccessPointInfoGroup=wlsxMonAccessPointInfoGroup, monAPFrameLowSpeedRate=monAPFrameLowSpeedRate, monStaTxPktsAt2Mbps=monStaTxPktsAt2Mbps, monStaRxPktsAt2Mbps=monStaRxPktsAt2Mbps, monStaTxPkts256To511=monStaTxPkts256To511, monAPStatsTotDAMulticastPkts=monAPStatsTotDAMulticastPkts, monAPChannelErrorRate=monAPChannelErrorRate, monAPStatsTotDABroadcastPkts=monAPStatsTotDABroadcastPkts, wlsxMonStationInfoGroup=wlsxMonStationInfoGroup, monAPStatsTotBytesAt12Mbps=monAPStatsTotBytesAt12Mbps, monAPStatsTotMgmtPkts=monAPStatsTotMgmtPkts, monStaRxPktsAt9Mbps=monStaRxPktsAt9Mbps, monAPStatsTotMgmtBytes=monAPStatsTotMgmtBytes, monStaTxPktsAt24Mbps=monStaTxPktsAt24Mbps, monAPInfoSnrSampleTime=monAPInfoSnrSampleTime, monAPRxDeauthentications=monAPRxDeauthentications, monAPStatsTotDataBytes=monAPStatsTotDataBytes, monAPFrameRetryErrorRate=monAPFrameRetryErrorRate, monStaRxPkts256To511=monStaRxPkts256To511, monStaTxBytesAt12Mbps=monStaTxBytesAt12Mbps, monAPStatsTotBytesAt18Mbps=monAPStatsTotBytesAt18Mbps, wlsxMonAPStatsEntry=wlsxMonAPStatsEntry, monAPInfoMatchMethod=monAPInfoMatchMethod, monStaRxMgmtBytes=monStaRxMgmtBytes, monStaInfoInactivityTime=monStaInfoInactivityTime, monAPTxDeauthentications=monAPTxDeauthentications, monStaRxPkts=monStaRxPkts)
