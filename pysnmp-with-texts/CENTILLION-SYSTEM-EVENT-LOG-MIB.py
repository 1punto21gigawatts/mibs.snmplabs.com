#
# PySNMP MIB module CENTILLION-SYSTEM-EVENT-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-SYSTEM-EVENT-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
CardId, sysEvtLogMgmt, PortId = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "CardId", "sysEvtLogMgmt", "PortId")
TimeIntervalSec, = mibBuilder.importSymbols("S5-TCS-MIB", "TimeIntervalSec")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, MibIdentifier, Bits, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, iso, TimeTicks, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibIdentifier", "Bits", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "iso", "TimeTicks", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sysEvtLogDuration = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 1), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogDuration.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogDuration.setDescription('This value indicates the remaining duration of Event Logging. The unit is in seconds. The maximum value is equal to 1000 days (86,400,000 seconds). A set value of greater than 1000 days will result BADVALUE return. A value of 0 indicates the Event Logging is now stopped and disabled. A non-zero value indicates that Event Logging is enabled. Default value is set at system cold start only. ')
sysEvtLogPreFilterEntityMap = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="FFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogPreFilterEntityMap.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPreFilterEntityMap.setDescription('The bit array that contains the bit map of all possible entities for event logging pre-filter control. There are total of 64 entities. Each entity represented by one bit. A bit with a value of 1 means that the corresponding Entity is enabled for event logging, 0 when the event logging is disabled for the corresponding entity. The following show the bit position and associated entity. Bit 0 - SNMP_ENT_ATM_PORT Bit 1 - SNMP_ENT_BOOTP Bit 2 - SNMP_ENT_CLC Bit 3 - SNMP_ENT_CLI Bit 4 - SNMP_ENT_CONFIG Bit 5 - SNMP_ENT_ETHERNET Bit 6 - SNMP_ENT_FDB Bit 7 - SNMP_ENT_HW Bit 8 - SNMP_ENT_IISP Bit 9 - SNMP_ENT_ILMI Bit 10 - SNMP_ENT_IP Bit 11 - SNMP_ENT_LANE Bit 12 - SNMP_ENT_LEC Bit 13 - SNMP_ENT_MCP Bit 14 - SNMP_ENT_SIGNL Bit 15 - SNMP_ENT_SNMP Bit 16 - SNMP_ENT_STP Bit 17 - SNMP_ENT_TELNET Bit 18 - SNMP_ENT_TFTP Bit 19 - SNMP_ENT_TOKENRING Bit 20 - SNMP_ENT_VPORT Bit 21 - SNMP_ENT_MPOA When a new entity is created, a new bit position should also be defined. The order of bit is defined as bit 0-7 in the lowest oder of byte (first byte), bit 8-15 in the second lowest order of byte(second bye), and so on. The lower number of bit is the least significant bit within the byte. ')
sysEvtLogPreFilterSeverity = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogPreFilterSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPreFilterSeverity.setDescription('This value indicates the severity level for event log pre-filtering control. An event message with less severity level will not be logged into event message buffer. All messages with equal or greater severity level are logged into the message buffer. The emergency level is also named as panic level inc CLI command. ')
sysEvtLogSlotPreFilterTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 4), )
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterTable.setDescription('A slot table for controlling pre-filter setting for all slots. This table is managed by Event Log application only. Table entries cannot be created or deleted. ')
sysEvtLogSlotPreFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 4, 1), ).setIndexNames((0, "CENTILLION-SYSTEM-EVENT-LOG-MIB", "sysEvtLogSlotPreFilterCardId"))
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterEntry.setDescription('An entry of the slot pre-filter table. ')
sysEvtLogSlotPreFilterCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 4, 1, 1), CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterCardId.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterCardId.setDescription('The slot index varies by system. It is chassis dependent. For C100, valid number is 1-6. For BH left, valid number is 2-7. For BH right, valid number is 8-13. etc. ')
sysEvtLogSlotPreFilterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterControl.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSlotPreFilterControl.setDescription('This value indicates the pre-filter setting for the specified slot. ')
sysEvtLogPortPreFilterTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 5), )
if mibBuilder.loadTexts: sysEvtLogPortPreFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPortPreFilterTable.setDescription('A port table for controlling pre-filter setting for all ports. This table is managed by Event Log application only. Table entries cannot be created or deleted. ')
sysEvtLogPortPreFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 5, 1), ).setIndexNames((0, "CENTILLION-SYSTEM-EVENT-LOG-MIB", "sysEvtLogPortPreFilterCardId"), (0, "CENTILLION-SYSTEM-EVENT-LOG-MIB", "sysEvtLogPortPreFilterPortId"))
if mibBuilder.loadTexts: sysEvtLogPortPreFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPortPreFilterEntry.setDescription('An entry for port table for controlling pre-filter setting for all ports. ')
sysEvtLogPortPreFilterCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 5, 1, 1), CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysEvtLogPortPreFilterCardId.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPortPreFilterCardId.setDescription('The slot index varies by system. It is chassis dependent. For C100, valid number is 1-6. For BH left, valid number is 2-7. For BH right, valid number is 8-13. etc. ')
sysEvtLogPortPreFilterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 5, 1, 2), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysEvtLogPortPreFilterPortId.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPortPreFilterPortId.setDescription('The port index of the specified slot. ')
sysEvtLogPortPreFilterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogPortPreFilterControl.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogPortPreFilterControl.setDescription('This value indicates the pre-filter setting for the specified port. Note: A module must be properly configured before any port of the module can be set with a value of sysEvtLogPortPreFilterControl. A BADVALUE is returned when one enables a port in a disabled slot. ')
sysEvtLogDestMap = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogDestMap.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogDestMap.setDescription('This value is a bit map of each destination that Event Log can forward messages to, where bit 0 for console CLI bit 1 for Syslogd bit 2 for Tftpsave The value of other bits has no effect. A bit value of 1 means the destination is enabled. Otherwise, disabled. Note: Enabling Syslogd prior setting sysEvtLogSysLogHostIp will return BADVALUE for set. Enabling Tftpsave prior setting sysEvtLogTftpsaveHostIp will return BADVALUE for set. ')
sysEvtLogSysLogCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 7))
sysEvtLogSysLogHostIp = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 7, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogSysLogHostIp.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSysLogHostIp.setDescription('The IP address of Unix system that runs Syslogd. The event messages are redirect to Syslogd only when this IP address is valid and the bit value of Syslogd of sysEvtLogDestMap is enabled. Note: Set an invalid IP address results a BADVALUE return. ')
sysEvtLogSysLogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("panic", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogSysLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSysLogSeverity.setDescription('This value indicates the severity level for Event Log to forward events to SysLogd in Unix system. An event message with less severity level will not be forwarded to SysLogd. All messages with equal or greater severity level are forwarded to SysLogd. ')
sysEvtLogSysLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogSysLogFacility.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogSysLogFacility.setDescription('This value indicates the facility number for the event messages to be logged by syslogd. The supported values are from local0 to local7 only (refer to syslogd manual of Unix system) ')
sysEvtLogTftpsaveCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 8))
sysEvtLogTftpsaveHostIp = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 8, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogTftpsaveHostIp.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogTftpsaveHostIp.setDescription('The IP address of TFTP server system. The event messages file is transfered from event log buffer to server system only when this IP is valid and the event message count reach its threshold. (refer to sysEvtLogTftpsaveMaxMsgCount) and the bit value of Tftpsave of sysEvtLogDestMap is enabled. Note: Set an invalid IP address results a BADVALUE return. ')
sysEvtLogTftpsaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogTftpsaveFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogTftpsaveFileName.setDescription('This octet string indicates the file name for the Tftpsave option of event log function. The filename will be appended with an extension nnn, where nnn ranges from 000 to 999, as each TFTP file transfer occurs. The filename is default to the last three bytes of MAC address of the switch in hexadecimal format. ')
sysEvtLogTftpsaveMaxMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 5, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEvtLogTftpsaveMaxMsgCount.setStatus('mandatory')
if mibBuilder.loadTexts: sysEvtLogTftpsaveMaxMsgCount.setDescription('This value indicates how many messages in the event log buffer will trigger the TFTP file transfer for logged messages to TFTP host. the default value is maximum messages count for the event log buffer, which is currently equal to 680. If the value is set to zero or greater than the maximum value, it returns a BADVALUE. ')
mibBuilder.exportSymbols("CENTILLION-SYSTEM-EVENT-LOG-MIB", sysEvtLogTftpsaveFileName=sysEvtLogTftpsaveFileName, sysEvtLogPortPreFilterTable=sysEvtLogPortPreFilterTable, sysEvtLogSysLogHostIp=sysEvtLogSysLogHostIp, sysEvtLogPortPreFilterControl=sysEvtLogPortPreFilterControl, sysEvtLogTftpsaveHostIp=sysEvtLogTftpsaveHostIp, sysEvtLogSlotPreFilterTable=sysEvtLogSlotPreFilterTable, sysEvtLogSysLogSeverity=sysEvtLogSysLogSeverity, sysEvtLogSysLogFacility=sysEvtLogSysLogFacility, sysEvtLogSysLogCfg=sysEvtLogSysLogCfg, sysEvtLogSlotPreFilterControl=sysEvtLogSlotPreFilterControl, sysEvtLogPortPreFilterEntry=sysEvtLogPortPreFilterEntry, sysEvtLogDuration=sysEvtLogDuration, sysEvtLogSlotPreFilterCardId=sysEvtLogSlotPreFilterCardId, sysEvtLogPortPreFilterPortId=sysEvtLogPortPreFilterPortId, sysEvtLogSlotPreFilterEntry=sysEvtLogSlotPreFilterEntry, sysEvtLogTftpsaveCfg=sysEvtLogTftpsaveCfg, sysEvtLogPortPreFilterCardId=sysEvtLogPortPreFilterCardId, sysEvtLogTftpsaveMaxMsgCount=sysEvtLogTftpsaveMaxMsgCount, sysEvtLogPreFilterSeverity=sysEvtLogPreFilterSeverity, sysEvtLogPreFilterEntityMap=sysEvtLogPreFilterEntityMap, sysEvtLogDestMap=sysEvtLogDestMap)
