#
# PySNMP MIB module SW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
fcSwitch, bcsiModules = mibBuilder.importSymbols("Brocade-REG-MIB", "fcSwitch", "bcsiModules")
SwTrunkMaster, SwSensorIndex, SwDomainIndex, FcWwn, SwNbIndex, SwPortIndex = mibBuilder.importSymbols("Brocade-TC", "SwTrunkMaster", "SwSensorIndex", "SwDomainIndex", "FcWwn", "SwNbIndex", "SwPortIndex")
connUnitPortEntry, connUnitPortStatEntry = mibBuilder.importSymbols("FCMGMT-MIB", "connUnitPortEntry", "connUnitPortStatEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, Integer32, ModuleIdentity, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, TimeTicks, MibIdentifier, Counter64, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Integer32", "ModuleIdentity", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "TimeTicks", "MibIdentifier", "Counter64", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
swMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 1588, 3, 1, 3))
swMibModule.setRevisions(('2003-01-13 14:30', '2003-07-20 14:30', '2004-04-15 10:30', '2004-08-06 18:30', '2005-04-29 20:16', '2006-01-09 09:00', '2006-05-17 09:00', '2007-01-23 09:00', '2007-06-08 12:00', '2007-06-27 10:30', '2007-08-01 12:20', '2007-08-29 04:42', '2008-01-29 07:59', '2008-07-17 03:45', '2008-07-24 02:32', '2008-07-25 02:32', '2008-09-09 09:00', '2009-09-28 09:00', '2009-02-21 09:00', '2009-03-30 09:00', '2009-06-25 12:00', '2009-06-29 01:00', '2009-06-30 13:06', '2009-06-30 06:00', '2009-10-30 05:00', '2009-11-03 13:06', '2009-11-05 12:00', '2009-11-05 05:00', '2009-11-06 11:30', '2009-11-30 10:30', '2009-12-03 17:30', '2010-01-30 17:30', '2010-07-08 11:30', '2010-07-15 11:30', '2010-07-21 11:30', '2010-08-06 11:30', '2010-08-20 10:30', '2010-10-07 10:30', '2010-10-09 10:30', '2010-10-25 10:30', '2010-11-01 06:00', '2010-11-02 10:30', '2010-12-02 10:30', '2010-12-08 10:30', '2010-12-20 10:00', '2010-12-21 04:00', '2010-12-22 10:00', '2010-12-30 10:00', '2011-01-06 10:30', '2011-01-07 10:30', '2011-02-18 06:00', '2012-02-23 10:30', '2012-03-05 03:33', '2012-05-15 14:25', '2012-06-04 17:20', '2012-06-14 10:00', '2012-06-29 15:20', '2012-07-10 16:00', '2012-09-26 14:00', '2013-03-21 13:00', '2013-04-04 17:48', '2013-04-22 11:30', '2013-04-25 18:03', '2013-05-15 14:30', '2013-06-05 16:00', '2013-06-29 10:00', '2013-09-12 10:00', '2013-10-04 13:40',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: swMibModule.setRevisionsDescriptions(('The initial version of this module.', 'Added swIDIDMode to the swFabric group.', 'Added object for Trap Severity Level, swFwLastSeverityLevel. Added the enumeration swFwResourceFlash for SwFwClassesAreas. Deprecated the mib object swEventTrapLevel. Updated the description of swGroupId and corrected the spell mistakes. Obsoleted the swFault Trap. Added enumerations four-GB for swFCPortSpeed and unknown, other for swFCPortType.', 'Added swFCPortSpecifier object to swFCPortTable.', 'Modified the #SUMMARY and #ARGUMENTS for swFabricWatchTrap', '1. Modified the description for swPortTrunked 2. Updated the SW Traps summary and description to remove the obsolete varbindings', 'Added swFCPortFlag object to swFCPortTable', 'Added enumerations eight-GB and ten-GB for swFCPortSpeed', 'Included swFCPortFlag as an additiional variable binding for trap SWFCPortScn', 'Added enumerations octuple and decuple for swNbBaudRate', 'Added the enumerations swFwEPortUtil and swFwEPortPktl for swFwClassAreaIndex', 'Added swFCPortBrcdType object to swFCPortTable', 'Added Toptalker support and swVfId to the swFabric group.', 'Added swIPv6ChangeTrap, swIPv6Address and swIPv6Status .', 'Added swModel to distiguish between 7500 and 7500E switch .', 'Added the enumerations swFwPortLr, swFwEPortLr, swFwEPortUtil, swFwEPortPktl, swFwFCUPortLr, swFwFOPPortLr for swFwClassAreaIndex.', 'Added swPmgrEventTrap information.', 'Added additional fabric watch threshold in SwFwActs.', 'Added port phy states.', 'Added swEventVfId in swEventTable.', "Removed the version information from Brocade's proprietary MIB file name.", 'Modified swVfid position at the last of swFabric table', 'Added swFwCPUMemUsage enumeration under swFwClassAreaIndex.', 'Updated the description of swCpuAction/swMemAction and access of swcpuormemoryusage objects and changed the type of swEndDeviceInvalidWord, swEndDeviceLinkFailure,swEndDeviceSyncLoss, swEndDeviceSigLoss, swEndDeviceProtoErr,swEndDeviceInvalidCRC from integer32 to counter32.', 'Added swFabricReconfigTrap and swFabricSegmentTrap.', 'Removed enum switchReboot from swAdmStatus.', 'Changed swFwCustUnit access to read-only', 'Added enums swFwEPortTrunkUtil,swFwFCUPortTrunkUtil and swFwFOPPortTrunkUtil in SwFwClassesAreas', 'Added swConnUnitExtensionTable and entries for 64 bit portstats.', 'Added swMemUsageLimit1 and swMemUsageLimit3 under swCpuOrMemoryUsage', 'Added swExttrap as internal trap.', 'Changed the descriptions for swConnUnitExtensionTable.', 'Obsoleted swGroupTable, swGroupMemTable from swGroup.', 'Added swFCPortWwn, swFCPortBrcdType in swFcPortScn and added swStateChangeTrap', 'Added trap swPortMoveTrap', 'Added trap portStats objects under SwConnUnitPortStatEntry', 'Added trap swBrcdGenericTrap', 'Added swVfName', 'Added swPortConfigTable', 'Added swFCPortPrevType in swFCPortScn', 'Added fifty filter classes under swFwClassAreaIndex', 'Updated the description of swBrcdTrapBitMask and swBrcdGenericTrap for Fapwwn Trap', 'Deprecated swAgtCmtyTable and provided support of standard mibs SnmpCommunityTable and snmpTargetParamsTable and snmpTargetAddrTable', 'Updated the datatype for swPortEncrypt and swPortCompression', 'Added enumeration sexdecuple for swNbBaudRate', 'Added a new value lowBufferCrsd(7) for swFwLastEvent', 'Changed the area name filter-fmcfg to filterFmCfg in SwFwClassesAreas', 'Included FDMI event case in swBrcdTrapBitMask', 'Added class3 discards error in SwConnUnitPortStatEntry', 'Moved swPortConfigTable, CiperMode and Encrypt/CompressStatus to faext.mib', 'Changed fportmode(2) to portmode(2) for object swTopTalkerMntMode.', 'Added swauthProtocolPassword and swauthProtocolPassword for IBM DirectorServer applications', 'Added new enum noSigDet(14) for object swFCPortPhyState', 'Changed the syntax of swCpuAction and swMemAction objects.', 'Added PCS block errors in swConnUnitPortStatEntry', 'Added swDeviceStatus and swDeviceStatusTrap', 'Added sixteenGB support to swFCPortSpeed and also deprecated teh same', 'Added an area filterFmCfg51 in the class SwFwClassesAreas', 'Removed the tab space and added the space key for swFCPortEntry 38 as this caused a crash in MIB browser', 'Added swFCPortDisableReason in SwFCPortEntry and swFCPortScn trap.', 'Added unroutable frame counter in swConnUnitPortStatEntry', 'Made the swFCPortSpeed obsolete', 'Changed the description for swVFName and swConnUnitPCSErrorCounter', 'Updated swFCPortCapacity description', 'Added swFwPowerOnHours in SwFwClassesAreas', 'Updated the description for swCpuUsageLimit, swCpuAction, swMemAction, swMemUsageLimit1 and swMemUsageLimit3.', 'Added FEC Counters swConnUnitFECCorrectedCounter, swConnUnitFECUnCorrectedCounter', 'Added swZoneConfigChangeTrap',))
if mibBuilder.loadTexts: swMibModule.setLastUpdated('201310041340Z')
if mibBuilder.loadTexts: swMibModule.setOrganization('Brocade Communications Systems, Inc.,')
if mibBuilder.loadTexts: swMibModule.setContactInfo('Customer Support Group Brocade Communications Systems, 1745 Technology Drive, San Jose, CA 95110 U.S.A Tel: +1-408-392-6061 Fax: +1-408-392-6656 Email: support@Brocade.COM WEB: www.brocade.com')
if mibBuilder.loadTexts: swMibModule.setDescription("The MIB module is for Brocade's Fibre Channel Switch. Copyright (c) 1996-2003 Brocade Communications Systems, Inc. All rights reserved.")
sw = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1))
if mibBuilder.loadTexts: sw.setStatus('current')
if mibBuilder.loadTexts: sw.setDescription("The OID sub-tree for Brocade's Silkworm Series of Fibre Channel Switches.")
sw28k = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 2))
if mibBuilder.loadTexts: sw28k.setStatus('current')
if mibBuilder.loadTexts: sw28k.setDescription("The OID for Brocade's Silkworm 2800 model Fibre Channel Switch.")
sw21kN24k = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 3))
if mibBuilder.loadTexts: sw21kN24k.setStatus('current')
if mibBuilder.loadTexts: sw21kN24k.setDescription("The OID for Brocade's Silkworm 2100 and 2400 series model Fibre Channel Switch.")
sw20x0 = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 4))
if mibBuilder.loadTexts: sw20x0.setStatus('current')
if mibBuilder.loadTexts: sw20x0.setDescription("The OID for Brocade's Silkworm 20x0 series model Fibre Channel Switch.")
class SwSevType(TextualConvention, Integer32):
    description = "The event trap level in conjunction with the an event's severity level."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("critical", 1), ("error", 2), ("warning", 3), ("informational", 4), ("debug", 5))

class FcPortFlag(TextualConvention, Bits):
    description = 'Represents the port status for a FC Flag. Currently this will indicate if the port is virtual or physical.'
    status = 'current'
    namedValues = NamedValues(("physical", 0), ("virtual", 1))

swSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1))
if mibBuilder.loadTexts: swSystem.setStatus('current')
if mibBuilder.loadTexts: swSystem.setDescription('The OID sub-tree for swSystem group.')
swFabric = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2))
if mibBuilder.loadTexts: swFabric.setStatus('current')
if mibBuilder.loadTexts: swFabric.setDescription('The OID sub-tree for swFabric group.')
swModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 3))
if mibBuilder.loadTexts: swModule.setStatus('current')
if mibBuilder.loadTexts: swModule.setDescription('The OID sub-tree for swModule group.')
swAgtCfg = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4))
if mibBuilder.loadTexts: swAgtCfg.setStatus('current')
if mibBuilder.loadTexts: swAgtCfg.setDescription('The OID sub-tree for swAgtCfg group.')
swFCport = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6))
if mibBuilder.loadTexts: swFCport.setStatus('current')
if mibBuilder.loadTexts: swFCport.setDescription('The OID sub-tree for swFCport group.')
swNs = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7))
if mibBuilder.loadTexts: swNs.setStatus('current')
if mibBuilder.loadTexts: swNs.setDescription('The OID sub-tree for swNs group.')
swEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8))
if mibBuilder.loadTexts: swEvent.setStatus('current')
if mibBuilder.loadTexts: swEvent.setDescription('The OID sub-tree for swEvent group.')
swFwSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10))
if mibBuilder.loadTexts: swFwSystem.setStatus('current')
if mibBuilder.loadTexts: swFwSystem.setDescription('The OID sub-tree for swFwSystem group.')
swEndDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21))
if mibBuilder.loadTexts: swEndDevice.setStatus('current')
if mibBuilder.loadTexts: swEndDevice.setDescription('The OID sub-tree for swEndDevice group.')
swGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22))
if mibBuilder.loadTexts: swGroup.setStatus('obsolete')
if mibBuilder.loadTexts: swGroup.setDescription('The OID sub-tree for swGroup group.')
swBlmPerfMnt = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23))
if mibBuilder.loadTexts: swBlmPerfMnt.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfMnt.setDescription('The OID sub-tree for swBlmPerfMnt (Bloom Performance Monitor) group.')
swTrunk = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24))
if mibBuilder.loadTexts: swTrunk.setStatus('current')
if mibBuilder.loadTexts: swTrunk.setDescription('The OID sub-tree for swTrunk group.')
swTopTalker = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25))
if mibBuilder.loadTexts: swTopTalker.setStatus('current')
if mibBuilder.loadTexts: swTopTalker.setDescription('The OID sub-tree for TopTalker group.')
swCpuOrMemoryUsage = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26))
if mibBuilder.loadTexts: swCpuOrMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: swCpuOrMemoryUsage.setDescription('The OID sub-tree for cpu or memory usage group.')
swConnUnitPortStatExtentionTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27), )
if mibBuilder.loadTexts: swConnUnitPortStatExtentionTable.setStatus('current')
if mibBuilder.loadTexts: swConnUnitPortStatExtentionTable.setDescription('This represents the Conn unit Port Stats')
swCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCurrentDate.setStatus('current')
if mibBuilder.loadTexts: swCurrentDate.setDescription('The current date information in displayable textual format.')
swBootDate = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootDate.setStatus('current')
if mibBuilder.loadTexts: swBootDate.setDescription('The date and time when the system last booted, in displayable textual format.')
swFWLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFWLastUpdated.setStatus('current')
if mibBuilder.loadTexts: swFWLastUpdated.setDescription('The information indicates the date when the firmware was last updated, in displayable textual format.')
swFlashLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFlashLastUpdated.setStatus('current')
if mibBuilder.loadTexts: swFlashLastUpdated.setDescription('The information indicates the date when the FLASH was last updated, in displayable textual format.')
swBootPromLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootPromLastUpdated.setStatus('current')
if mibBuilder.loadTexts: swBootPromLastUpdated.setDescription('The information indicates the date when the boot PROM was last updated, in displayable textual format.')
swFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: swFirmwareVersion.setDescription('The current version of the firwmare.')
swOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOperStatus.setStatus('current')
if mibBuilder.loadTexts: swOperStatus.setDescription('The current operational status of the switch. The states are as follow: o online(1) means the switch is accessible by an external Fibre Channel port; o offline(2) means the switch is not accessible; o testing(3) means the switch is in a built-in test mode and is not accessible by an external Fibre Channel port; o faulty(4) means the switch is not operational.')
swAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("reboot", 5), ("fastboot", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAdmStatus.setStatus('current')
if mibBuilder.loadTexts: swAdmStatus.setDescription("The desired administrative status of the switch. A management station may place the switch in a desired state by setting this object accordingly. The states are as follow: o online(1) means set the switch to be accessible by an external Fibre Channel port; o offline(2) means set the switch to be inaccessible; o testing(3) means set the switch to run the built-in test; o faulty(4) means set the switch to a 'soft' faulty condition; o reboot(5) means set the switch to reboot in 1 second. o fastboot(6) means set the switch to fastboot in 1 second. Fastboot would cause the switch to boot but skip over the POST. When the switch is in faulty state, only two states can be set: faulty and reboot/fastboot.")
swTelnetShellAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("terminated", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTelnetShellAdmStatus.setStatus('current')
if mibBuilder.loadTexts: swTelnetShellAdmStatus.setDescription('The desired administrative status of the Telnet shell. By setting it to terminated(1), the current Telnet shell task is deleted. When this variable instance is read, it reports the value last set through SNMP.')
swSsn = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSsn.setStatus('current')
if mibBuilder.loadTexts: swSsn.setDescription('The soft serial number of the switch.')
swFlashDLOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("swCurrent", 1), ("swFwUpgraded", 2), ("swCfUploaded", 3), ("swCfDownloaded", 4), ("swFwCorrupted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFlashDLOperStatus.setStatus('current')
if mibBuilder.loadTexts: swFlashDLOperStatus.setDescription('The operational status of the FLASH. The operational states are as follow: o swCurrent(1) indicates that the FLASH contains the current firmware image or config file; o swFwUpgraded(2) state indicates that it contains the image upgraded from the swFlashDLHost.0.; o swCfUploaded(3) state indicates that the switch configuration file has been uploaded to the host; and o swCfDownloaded(4) state indicates that the switch configuration file has been downloaded from the host. o swFwCorrupted (5) state indicates that the firmware in the FLASH of the switch is corrupted.')
swFlashDLAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("swCurrent", 1), ("swFwUpgrade", 2), ("swCfUpload", 3), ("swCfDownload", 4), ("swFwCorrupted", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLAdmStatus.setStatus('current')
if mibBuilder.loadTexts: swFlashDLAdmStatus.setDescription('The desired state of the FLASH. A management station may place the FLASH in a desired state by setting this object accordingly: o swCurrent(1) indicates that the FLASH contains the current firmware image or config file; o swFwUpgrade(2) means that the firmware in the FLASH is to be upgraded from the host specified; o swCfUpload(3) means that the switch config file is to be uploaded to the host specified; or o swCfDownload(4) means that the switch config file is to be downloaded from the host specified. o swFwCorrupted(5) state indicates that the firmware in the FLASH is corrupted. This value is for informational purpose only. However, set of swFlashDLAdmStatus to this value is not allowed. The host is specified in swFlashDLHost.0. In addition, user name is specified in swFlashDLUser.0, and the file name specified in swFlashDLFile.0. Reference the user manual on the following commands, o firmwareDownload, o configUpload, and o configDownload.')
swFlashDLHost = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLHost.setStatus('current')
if mibBuilder.loadTexts: swFlashDLHost.setDescription('The name or IP address (in dot notation) of the host to download or upload a relevant file to the FLASH.')
swFlashDLUser = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLUser.setStatus('current')
if mibBuilder.loadTexts: swFlashDLUser.setDescription('The user name on the host to download or upload a relevant file to or from the FLASH.')
swFlashDLFile = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLFile.setStatus('current')
if mibBuilder.loadTexts: swFlashDLFile.setDescription('The name of the file to be downloaded or uploaded.')
swFlashDLPassword = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLPassword.setStatus('current')
if mibBuilder.loadTexts: swFlashDLPassword.setDescription('The password to be used in for FTP transfer of files in the download or upload operation.')
swBeaconOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBeaconOperStatus.setStatus('current')
if mibBuilder.loadTexts: swBeaconOperStatus.setDescription('The current operational status of the switch beacon. When the beacon is on, the LEDs on the front panel of the switch run alternately from left to right and right to left. The color is yellow. When the beacon is off, each LED will be in their its regular status indicating color and state.')
swBeaconAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBeaconAdmStatus.setStatus('current')
if mibBuilder.loadTexts: swBeaconAdmStatus.setDescription('The desired status of the switch beacon. When the beacon is set to on, the LEDs on the front panel of the switch run alternately from left to right and right to left. The color is yellow. When the beacon is set to off, each LED will be in its regular status indicating color and state.')
swDiagResult = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sw-ok", 1), ("sw-faulty", 2), ("sw-embedded-port-fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDiagResult.setStatus('current')
if mibBuilder.loadTexts: swDiagResult.setDescription('The result of the power-on startup (POST) diagnostics.')
swNumSensors = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNumSensors.setStatus('current')
if mibBuilder.loadTexts: swNumSensors.setDescription('The number of sensors inside the switch.')
swSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22), )
if mibBuilder.loadTexts: swSensorTable.setStatus('current')
if mibBuilder.loadTexts: swSensorTable.setDescription('The table of sensor entries.')
swSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1), ).setIndexNames((0, "SW-MIB", "swSensorIndex"))
if mibBuilder.loadTexts: swSensorEntry.setStatus('current')
if mibBuilder.loadTexts: swSensorEntry.setDescription('An entry of the sensor information.')
swSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 1), SwSensorIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorIndex.setStatus('current')
if mibBuilder.loadTexts: swSensorIndex.setDescription('This object identifies the sensor.')
swSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("temperature", 1), ("fan", 2), ("power-supply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorType.setStatus('current')
if mibBuilder.loadTexts: swSensorType.setDescription('This object identifies the sensor type.')
swSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("faulty", 2), ("below-min", 3), ("nominal", 4), ("above-max", 5), ("absent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorStatus.setStatus('current')
if mibBuilder.loadTexts: swSensorStatus.setDescription('The current status of the sensor.')
swSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorValue.setStatus('current')
if mibBuilder.loadTexts: swSensorValue.setDescription('The current value (reading) of the sensor. The value, -2147483648, represents an unknown quantity. It also means that the sensor does not have the capability to measure the actual value. In V2.0, the temperature sensor value will be in Celsius; the fan value will be in RPM (revolution per minute); and the power supply sensor reading will be unknown.')
swSensorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorInfo.setStatus('current')
if mibBuilder.loadTexts: swSensorInfo.setDescription("Additional displayable information on the sensor. In V2.x, it contains the sensor type and number in textual format. For example, 'Temp 3', 'Fan 6'.")
swTrackChangesInfo = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrackChangesInfo.setStatus('current')
if mibBuilder.loadTexts: swTrackChangesInfo.setDescription('Track changes string. For trap only')
swID = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swID.setStatus('current')
if mibBuilder.loadTexts: swID.setDescription('The number of the logical switch (0/1)')
swEtherIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEtherIPAddress.setStatus('current')
if mibBuilder.loadTexts: swEtherIPAddress.setDescription('The IP Address of the Ethernet interface of this logical switch.')
swEtherIPMask = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEtherIPMask.setStatus('current')
if mibBuilder.loadTexts: swEtherIPMask.setDescription('The IP Mask of the Ethernet interface of this logical switch.')
swFCIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCIPAddress.setStatus('current')
if mibBuilder.loadTexts: swFCIPAddress.setDescription('The IP Address of the FC interface of this logical switch.')
swFCIPMask = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCIPMask.setStatus('current')
if mibBuilder.loadTexts: swFCIPMask.setDescription('The IP Mask of the FC interface of this logical switch.')
swIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 29), DisplayString())
if mibBuilder.loadTexts: swIPv6Address.setStatus('current')
if mibBuilder.loadTexts: swIPv6Address.setDescription('IPV6 address.')
swIPv6Status = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tentative", 1), ("preferred", 2), ("ipdeprecated", 3), ("inactive", 4))))
if mibBuilder.loadTexts: swIPv6Status.setStatus('current')
if mibBuilder.loadTexts: swIPv6Status.setDescription('The current status of ipv6 address.')
swModel = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch7500", 1), ("switch7500E", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModel.setStatus('current')
if mibBuilder.loadTexts: swModel.setDescription('Indicates whether the switch is 7500 or 7500E .')
swTestString = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: swTestString.setStatus('current')
if mibBuilder.loadTexts: swTestString.setDescription('presence of this string represents test trap.')
swPortList = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 33), OctetString())
if mibBuilder.loadTexts: swPortList.setStatus('current')
if mibBuilder.loadTexts: swPortList.setDescription('This string represents the list of ports and its WWN when ports moved from one switch to another.')
swBrcdTrapBitMask = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 34), Integer32())
if mibBuilder.loadTexts: swBrcdTrapBitMask.setStatus('current')
if mibBuilder.loadTexts: swBrcdTrapBitMask.setDescription('Type of notification will be represented by a single bit in this variable. 0x01 - Fabric change event 0x02 - Device change event 0x04 - Fapwwn change event 0x08 - FDMI events.')
swFCPortPrevType = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("fl-port", 3), ("f-port", 4), ("e-port", 5), ("g-port", 6), ("ex-port", 7))))
if mibBuilder.loadTexts: swFCPortPrevType.setStatus('current')
if mibBuilder.loadTexts: swFCPortPrevType.setDescription('This represents port type of a port before it goes online/offline and it is valid only in swFcPortSCN trap')
swDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("login", 1), ("logout", 2), ("unknown", 3))))
if mibBuilder.loadTexts: swDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: swDeviceStatus.setDescription('This represents the attached device status. The status will change whenever port/node goes to online/offline')
swDomainID = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 1), SwDomainIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDomainID.setStatus('current')
if mibBuilder.loadTexts: swDomainID.setDescription('The current Fibre Channel domain ID of the switch. To set a new value, the switch (swAdmStatus) must be in offline or testing state.')
swPrincipalSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPrincipalSwitch.setStatus('current')
if mibBuilder.loadTexts: swPrincipalSwitch.setDescription('This object indicates whether the switch is the Principal switch as per FC-SW.')
swNumNbs = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNumNbs.setStatus('current')
if mibBuilder.loadTexts: swNumNbs.setDescription('The number of Inter-Switch Links in the (immediate) neighborhood.')
swNbTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9), )
if mibBuilder.loadTexts: swNbTable.setStatus('current')
if mibBuilder.loadTexts: swNbTable.setDescription('This table contains the ISLs in the immediate neighborhood of the switch.')
swNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1), ).setIndexNames((0, "SW-MIB", "swNbIndex"))
if mibBuilder.loadTexts: swNbEntry.setStatus('current')
if mibBuilder.loadTexts: swNbEntry.setDescription('An entry containing each neighbor ISL parameters.')
swNbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 1), SwNbIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbIndex.setStatus('current')
if mibBuilder.loadTexts: swNbIndex.setDescription('This object identifies the neighbor ISL entry.')
swNbMyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 2), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbMyPort.setStatus('current')
if mibBuilder.loadTexts: swNbMyPort.setDescription('This is the port that has an ISL to another switch.')
swNbRemDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 3), SwDomainIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbRemDomain.setStatus('current')
if mibBuilder.loadTexts: swNbRemDomain.setDescription('This is the Fibre Channel domain on the other end of the ISL.')
swNbRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 4), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbRemPort.setStatus('current')
if mibBuilder.loadTexts: swNbRemPort.setDescription('This is the port index on the other end of the ISL.')
swNbBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512))).clone(namedValues=NamedValues(("other", 1), ("oneEighth", 2), ("quarter", 4), ("half", 8), ("full", 16), ("double", 32), ("quadruple", 64), ("octuple", 128), ("decuple", 256), ("sexdecuple", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbBaudRate.setStatus('current')
if mibBuilder.loadTexts: swNbBaudRate.setDescription('The baud rate of the ISL.')
swNbIslState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sw-down", 0), ("sw-init", 1), ("sw-internal2", 2), ("sw-internal3", 3), ("sw-internal4", 4), ("sw-active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbIslState.setStatus('current')
if mibBuilder.loadTexts: swNbIslState.setDescription('The current state of the ISL. The swNbIslState will be 0 when ISL is in incompatible state or port is a slave port.')
swNbIslCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swNbIslCost.setStatus('current')
if mibBuilder.loadTexts: swNbIslCost.setDescription('The current link cost of the ISL.')
swNbRemPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbRemPortName.setStatus('current')
if mibBuilder.loadTexts: swNbRemPortName.setDescription('The World_wide_Name of the remote port.')
swFabricMemTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10), )
if mibBuilder.loadTexts: swFabricMemTable.setStatus('current')
if mibBuilder.loadTexts: swFabricMemTable.setDescription('This table contains information on the member switches of a fabric. This may not be available on all versions of Fabric OS.')
swFabricMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1), ).setIndexNames((0, "SW-MIB", "swFabricMemWwn"))
if mibBuilder.loadTexts: swFabricMemEntry.setStatus('current')
if mibBuilder.loadTexts: swFabricMemEntry.setDescription('An entry containing each switch in the fabric.')
swFabricMemWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 1), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemWwn.setStatus('current')
if mibBuilder.loadTexts: swFabricMemWwn.setDescription('This object identifies the World wide name of the member switch.')
swFabricMemDid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 2), SwDomainIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemDid.setStatus('current')
if mibBuilder.loadTexts: swFabricMemDid.setDescription('This object identifies the domain id of the member switch.')
swFabricMemName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemName.setStatus('current')
if mibBuilder.loadTexts: swFabricMemName.setDescription('This object identifies the name of the member switch.')
swFabricMemEIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemEIP.setStatus('current')
if mibBuilder.loadTexts: swFabricMemEIP.setDescription('This object identifies the ethernet IP address of the member switch.')
swFabricMemFCIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemFCIP.setStatus('current')
if mibBuilder.loadTexts: swFabricMemFCIP.setDescription('This object identifies the Fibre Channel IP address of the member switch.')
swFabricMemGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemGWIP.setStatus('current')
if mibBuilder.loadTexts: swFabricMemGWIP.setDescription('This object identifies the Gateway IP address of the member switch.')
swFabricMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemType.setStatus('current')
if mibBuilder.loadTexts: swFabricMemType.setDescription('This object identifies the member switch type.')
swFabricMemShortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemShortVersion.setStatus('current')
if mibBuilder.loadTexts: swFabricMemShortVersion.setDescription('This object identifies Fabric OS version of the member switch.')
swIDIDMode = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIDIDMode.setStatus('current')
if mibBuilder.loadTexts: swIDIDMode.setDescription('Status of Insistent Domain ID (IDID) mode. Status indicating IDID mode is enabled or not.')
swPmgrEventType = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("create", 0), ("delete", 1), ("moveport", 2), ("fidchange", 3), ("basechange", 4), ("vfstatechange", 6))))
if mibBuilder.loadTexts: swPmgrEventType.setStatus('current')
if mibBuilder.loadTexts: swPmgrEventType.setDescription('Indicates Partition manager event type.')
swPmgrEventTime = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: swPmgrEventTime.setStatus('current')
if mibBuilder.loadTexts: swPmgrEventTime.setDescription('This object identifies the date and time when this pmgr event occurred, in textual format.')
swPmgrEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: swPmgrEventDescr.setStatus('current')
if mibBuilder.loadTexts: swPmgrEventDescr.setDescription('This object identifies the textual description of the pmgr event.')
swVfId = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVfId.setStatus('current')
if mibBuilder.loadTexts: swVfId.setDescription('The Virtual fabric id.')
swVfName = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVfName.setStatus('current')
if mibBuilder.loadTexts: swVfName.setDescription('This represents the virtual fabric name configured in the switch')
swAgtCmtyTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11), )
if mibBuilder.loadTexts: swAgtCmtyTable.setStatus('deprecated')
if mibBuilder.loadTexts: swAgtCmtyTable.setDescription('A table that contains, one entry for each Community, the access control and parameters of the Community.')
swauthProtocolPassword = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swauthProtocolPassword.setStatus('current')
if mibBuilder.loadTexts: swauthProtocolPassword.setDescription('This entry is created specific to the Pharos switch to change the password for the auth protocol to reserved user DirectorServerSNMPv3User')
swprivProtocolPassword = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swprivProtocolPassword.setStatus('current')
if mibBuilder.loadTexts: swprivProtocolPassword.setDescription('This entry is created specific to the Pharos switch to change the password for the priv protocol to reserved user DirectorServerSNMPv3User')
swAgtCmtyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1), ).setIndexNames((0, "SW-MIB", "swAgtCmtyIdx"))
if mibBuilder.loadTexts: swAgtCmtyEntry.setStatus('deprecated')
if mibBuilder.loadTexts: swAgtCmtyEntry.setDescription('An entry containing the Community parameters.')
swAgtCmtyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAgtCmtyIdx.setStatus('deprecated')
if mibBuilder.loadTexts: swAgtCmtyIdx.setDescription('This object identifies the SNMPv1 Community entry.')
swAgtCmtyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAgtCmtyStr.setStatus('deprecated')
if mibBuilder.loadTexts: swAgtCmtyStr.setDescription('This is a Community string supported by the agent. If a new value is set successfully, it takes effect immediately.')
swAgtTrapRcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAgtTrapRcp.setStatus('deprecated')
if mibBuilder.loadTexts: swAgtTrapRcp.setDescription('This is the trap recipient associated with the Community. If a new value is set successfully, it takes effect immediately.')
swAgtTrapSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 4), SwSevType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAgtTrapSeverityLevel.setStatus('deprecated')
if mibBuilder.loadTexts: swAgtTrapSeverityLevel.setDescription("This is the trap severity level associated with the swAgtTrapRcp. The trap severity level in conjunction with the an event's severity level. When an event occurs and if its severity level is at or below the set value, the SNMP trap is sent to configured trap recipients. The severity level is limited to particular events. If a new value is set successfully, it takes effect immediately.")
swFCPortCapacity = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortCapacity.setStatus('current')
if mibBuilder.loadTexts: swFCPortCapacity.setDescription('The maximum number of of physical ports on the switch. This will include ports of the protocol: FC, FCIP(GE ports), VE(FCIP)...')
swFCPortTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: swFCPortTable.setStatus('current')
if mibBuilder.loadTexts: swFCPortTable.setDescription('A table that contains, one entry for each switch port, configuration and service parameters of the port.')
swFCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "SW-MIB", "swFCPortIndex"))
if mibBuilder.loadTexts: swFCPortEntry.setStatus('current')
if mibBuilder.loadTexts: swFCPortEntry.setDescription('An entry containing the configuration and service parameters of the switch port.')
swFCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortIndex.setStatus('current')
if mibBuilder.loadTexts: swFCPortIndex.setDescription('This object identifies the switch port index. Note that the value of a port index is 1 higher than the port number labeled on the front panel. E.g. port index 1 correspond to port number 0.')
swFCPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stitch", 1), ("flannel", 2), ("loom", 3), ("bloom", 4), ("rdbloom", 5), ("wormhole", 6), ("other", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortType.setStatus('current')
if mibBuilder.loadTexts: swFCPortType.setDescription('This object identifies the type of switch port. It may be of type stitch(1), flannel(2), loom(3) , bloom(4),rdbloom(5) or wormhole(6).')
swFCPortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 255))).clone(namedValues=NamedValues(("noCard", 1), ("noTransceiver", 2), ("laserFault", 3), ("noLight", 4), ("noSync", 5), ("inSync", 6), ("portFault", 7), ("diagFault", 8), ("lockRef", 9), ("validating", 10), ("invalidModule", 11), ("noSigDet", 14), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortPhyState.setStatus('current')
if mibBuilder.loadTexts: swFCPortPhyState.setDescription('This object identifies the physical state of the port: noCard(1) no card present in this switch slot; noTransceiver(2) no Transceiver module in this port. noGbic(2) was used previously. Transceiver is the generic name for GBIC, SFP etc.; laserFault(3) the module is signaling a laser fault (defective Transceiver); noLight(4) the module is not receiving light; noSync(5) the module is receiving light but is out of sync; inSync(6) the module is receiving light and is in sync; portFault(7) the port is marked faulty (defective Transceiver, cable or device); diagFault(8) the port failed diagnostics (defective G_Port or FL_Port card or motherboard); lockRef(9) the port is locking to the reference signal. validating(10) Validation is in progress invalidModule(11) Invalid SFP unknown(255) unknown. ')
swFCPortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortOpStatus.setStatus('current')
if mibBuilder.loadTexts: swFCPortOpStatus.setDescription('This object identifies the operational status of the port. The online(1) state indicates that user frames can be passed. The unknown(0) state indicates that likely the port module is physically absent (see swFCPortPhyState).')
swFCPortAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFCPortAdmStatus.setStatus('current')
if mibBuilder.loadTexts: swFCPortAdmStatus.setDescription('The desired state of the port. A management station may place the port in a desired state by setting this object accordingly. The testing(3) state indicates that no user frames can be passed. As the result of either explicit management action or per configuration information accessible by the switch, swFCPortAdmStatus is then changed to either the online(1) or testing(3) states, or remains in the offline(2) state.')
swFCPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFCPortLinkState.setStatus('current')
if mibBuilder.loadTexts: swFCPortLinkState.setDescription("This object indicates the link state of the port. The value may be: enabled(1) - port is allowed to participate in the FC-PH protocol with its attached port (or ports if it is in a FC-AL loop); disabled(2) - the port is not allowed to participate in the FC-PH protocol with its attached port(s); loopback(3) - the port may transmit frames through an internal path to verify the health of the transmitter and receiver path. Note that when the port's link state changes, its operational status (swFCPortOpStatus) will be affected.")
swFCPortTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("lw", 2), ("sw", 3), ("ld", 4), ("cu", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxType.setStatus('current')
if mibBuilder.loadTexts: swFCPortTxType.setDescription('This object indicates the media transmitter type of the port. The value may be: unknown(1) cannot determined to the port driver lw(2) long wave laser sw(3) short wave laser ld(4) long wave LED cu(5) copper (electrical).')
swFCPortTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxWords.setStatus('current')
if mibBuilder.loadTexts: swFCPortTxWords.setDescription('This object counts the number of Fibre Channel words that the port has transmitted.')
swFCPortRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxWords.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxWords.setDescription('This object counts the number of Fibre Channel words that the port has received.')
swFCPortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxFrames.setStatus('current')
if mibBuilder.loadTexts: swFCPortTxFrames.setDescription('This object counts the number of (Fibre Channel) frames that the port has transmitted.')
swFCPortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxFrames.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxFrames.setDescription('This object counts the number of (Fibre Channel) frames that the port has received.')
swFCPortRxC2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxC2Frames.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxC2Frames.setDescription('This object counts the number of Class 2 frames that the port has received.')
swFCPortRxC3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxC3Frames.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxC3Frames.setDescription('This object counts the number of Class 3 frames that the port has received.')
swFCPortRxLCs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxLCs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxLCs.setDescription('This object counts the number of Link Control frames that the port has received.')
swFCPortRxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxMcasts.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxMcasts.setDescription('This object counts the number of Multicast frames that the port has received.')
swFCPortTooManyRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTooManyRdys.setStatus('current')
if mibBuilder.loadTexts: swFCPortTooManyRdys.setDescription('This object counts the number of times when RDYs exceeds the frames received.')
swFCPortNoTxCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortNoTxCredits.setStatus('current')
if mibBuilder.loadTexts: swFCPortNoTxCredits.setDescription('This object counts the number of times when the transmit credit has reached zero.')
swFCPortRxEncInFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxEncInFrs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxEncInFrs.setDescription('This object counts the number of encoding error or disparity error inside frames received.')
swFCPortRxCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxCrcs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxCrcs.setDescription('This object counts the number of CRC errors detected for frames received.')
swFCPortRxTruncs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxTruncs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxTruncs.setDescription('This object counts the number of truncated frames that the port has received.')
swFCPortRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxTooLongs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxTooLongs.setDescription('This object counts the number of received frames that are too long.')
swFCPortRxBadEofs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxBadEofs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxBadEofs.setDescription('This object counts the number of received frames that have bad EOF delimiter.')
swFCPortRxEncOutFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxEncOutFrs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxEncOutFrs.setDescription('This object counts the number of encoding error or disparity error outside frames received.')
swFCPortRxBadOs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxBadOs.setStatus('current')
if mibBuilder.loadTexts: swFCPortRxBadOs.setDescription('This object counts the number of invalid Ordered Sets received.')
swFCPortC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortC3Discards.setStatus('current')
if mibBuilder.loadTexts: swFCPortC3Discards.setDescription('This object counts the number of Class 3 frames that the port has discarded.')
swFCPortMcastTimedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortMcastTimedOuts.setStatus('current')
if mibBuilder.loadTexts: swFCPortMcastTimedOuts.setDescription('This object counts the number of Multicast frames that has been timed out.')
swFCPortTxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxMcasts.setStatus('current')
if mibBuilder.loadTexts: swFCPortTxMcasts.setDescription('This object counts the number of Multicast frames that has been transmitted.')
swFCPortLipIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortLipIns.setStatus('current')
if mibBuilder.loadTexts: swFCPortLipIns.setDescription('This object counts the number of Loop Initializations that has been initiated by loop devices attached.')
swFCPortLipOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortLipOuts.setStatus('current')
if mibBuilder.loadTexts: swFCPortLipOuts.setDescription('This object counts the number of Loop Initializations that has been initiated by the port.')
swFCPortLipLastAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortLipLastAlpa.setStatus('current')
if mibBuilder.loadTexts: swFCPortLipLastAlpa.setDescription('This object indicates the Physical Address (AL_PA) of the loop device that initiated the last Loop Initialization.')
swFCPortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortWwn.setStatus('current')
if mibBuilder.loadTexts: swFCPortWwn.setDescription('The World_wide_Name of the Fibre Channel port. The contents of an instance are in the IEEE extended format as specified in FC-PH; the 12-bit port identifier represents the port number within the switch.')
swFCPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("one-GB", 1), ("two-GB", 2), ("auto-Negotiate", 3), ("four-GB", 4), ("eight-GB", 5), ("ten-GB", 6), ("unknown", 7), ("sixteen-GB", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFCPortSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: swFCPortSpeed.setDescription('The desired baud rate for the port. It can have the values of 1GB (1), 2GB (2), Auto-Negotiate (3), 4GB (4), 8GB (5), 10GB (6), 16GB (8). Some of the above values may not be supported by all type of switches.')
swFCPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortName.setStatus('current')
if mibBuilder.loadTexts: swFCPortName.setDescription('A string indicates the name of the addressed port. The names should be persistent across switch reboots. Port names do not have to be unique within a switch or within a fabric.')
swFCPortSpecifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortSpecifier.setStatus('current')
if mibBuilder.loadTexts: swFCPortSpecifier.setDescription("This string indicates the physical port number of the addressed port. The format of the string is: <slot>/port, where 'slot' being present only for bladed systems. ")
swFCPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 38), FcPortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortFlag.setStatus('current')
if mibBuilder.loadTexts: swFCPortFlag.setDescription('A bit map of port status flags which includes the information of port type. Currently this will indicate if the port is virtual or physical.')
swFCPortBrcdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("fl-port", 3), ("f-port", 4), ("e-port", 5), ("g-port", 6), ("ex-port", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortBrcdType.setStatus('current')
if mibBuilder.loadTexts: swFCPortBrcdType.setDescription('The Brocade port type.')
swFCPortDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230))).clone(namedValues=NamedValues(("r-recover-fail", 1), ("r-invalid-reason", 2), ("r-forced", 3), ("r-sw-disabled", 4), ("r-bl-disabled", 5), ("r-slot-off", 6), ("r-sw-enabled", 7), ("r-bl-enabled", 8), ("r-slot-on", 9), ("r-persistid", 10), ("r-sw-violation", 11), ("r-prv-dev-violation", 12), ("r-pub-dev-violation", 13), ("r-port-data-fail", 14), ("r-online-incomplete", 15), ("r-online-route-fail", 16), ("r-inconsistent", 17), ("r-set-vcc-fail", 18), ("r-ecp-in-testing", 19), ("r-elp-in-testing", 20), ("r-ecp-retries-exceeded", 21), ("r-invalid-ecp-state", 22), ("r-bad-ecp-rcvd", 23), ("r-send-rtmark-fail", 24), ("r-send-ecp-fail", 25), ("r-save-link-rtt-fail", 26), ("r-em-incnst", 27), ("r-pci-attach-fail", 28), ("r-buf-starv", 29), ("r-elp-fctl-mismatch", 30), ("r-eport-disabled", 31), ("r-trunk-with-vcxlt", 32), ("r-sw-fl-port-not-ready", 33), ("r-link-reinit", 34), ("r-domain-id-change", 35), ("r-auth-rejected", 36), ("r-auth-timeout", 37), ("r-auth-fail-retry", 38), ("r-fcr-conf-mismatch1", 39), ("r-fcr-conf-mismatch2", 40), ("r-fcr-port-ld-mode-mismatch", 41), ("r-fcr-ld-credit-mismatch", 42), ("r-fcr-set-vcc-failed", 43), ("r-fcr-set-rtc-failed", 44), ("r-fcr-elp-ver-inconsis", 45), ("r-fcr-elp-fctl-mismatch", 46), ("r-fcr-pid-mismatch", 47), ("r-fcr-tov-mismatch", 48), ("r-fcr-ld-incompat", 49), ("r-fcr-isolated", 50), ("r-elp-retries-exceeded", 51), ("r-fcr-exports-exceeded", 52), ("r-fcr-license", 53), ("r-fcr-conf-ex", 54), ("r-fcr-ftag-over", 55), ("r-fcr-ftag-conflict", 56), ("r-fcr-fowner-conflict", 57), ("r-fcr-zone-resource", 58), ("r-fcr-port-state-to", 59), ("r-fcr-authn-reject", 60), ("r-fcr-sec-fcs-list", 61), ("r-fcr-sec-failure", 62), ("r-fcr-incompatible-mode", 63), ("r-fcr-sec-scc-list", 64), ("r-fcr-generic", 65), ("r-sw-ex-port-not-ready", 66), ("r-fcr-class-f-incompat", 67), ("r-fcr-class-n-incompat", 68), ("r-fcr-invalid-flow-rcvd", 69), ("r-fcr-state-disabled", 70), ("r-fdd-strict-exist", 71), ("r-last-port-disable-msg", 72), ("r-sw-l-port-not-support", 73), ("r-peer-port-in-di-zone", 74), ("r-zone-incompat", 75), ("r-sw-config-l-port-not-support", 76), ("r-sw-port-mirror-configured", 77), ("r-nportlogin-inprogress", 78), ("r-nonpiv", 79), ("r-nomapping", 80), ("r-unknowntype", 81), ("r-nportoffline", 82), ("r-flogifailed", 83), ("r-nportbusy", 84), ("r-noflogi", 85), ("r-noflogiresp", 86), ("r-flogidupalpa", 87), ("r-loopcfg", 88), ("r-noenclicense", 89), ("r-nofiportmapping", 90), ("r-brcdfabconn", 91), ("r-port-reset", 92), ("r-floginport", 93), ("r-fdd-strict-conflict", 94), ("r-fdd-cfg-conflict", 95), ("r-fdd-cfg-conflict-na-neigh", 96), ("r-fcr-insistent-front-did-mismatch", 97), ("r-fcr-fabric-binding-failure", 98), ("r-fcr-non-standard-domain-offset", 99), ("r-area-in-use", 100), ("r-mstr-diff-pg", 101), ("r-mstr-diff-area", 102), ("r-ta-not-supported", 103), ("r-eport-not-supported", 104), ("r-fport-not-supported", 105), ("r-cfg-not-supported", 106), ("r-port-ll-th-exceeded", 107), ("r-port-synl-th-exceeded", 108), ("r-port-pe-th-exceeded", 109), ("f-port-disable-no-trk-lic", 110), ("r-port-inw-th-exceeded", 111), ("r-port-crc-th-exceeded", 112), ("f-port-tr-disable-speed-not-ok", 113), ("r-port-auto-disable", 114), ("r-fcr-export-in-non-base-sw", 115), ("r-base-switch-supports-no-device", 116), ("r-port-trunk-proto-error", 117), ("r-no-area-avail", 118), ("r-cannot-unbind-existing-area", 119), ("r-cannot-use-10bit-area", 120), ("r-authentication-required", 121), ("r-port-lr-th-exceeded", 122), ("r-fcr-export-lf-conflict", 123), ("r-incompat", 124), ("r-did-overlap", 125), ("r-zone-conflict", 126), ("r-eport-seg", 127), ("r-no-license", 128), ("r-platform-db", 129), ("r-sec-incompat", 130), ("r-sec-violation", 131), ("r-ecp-longdist", 132), ("r-dup-wwn", 133), ("r-eport-isolated", 134), ("r-ad", 135), ("r-esc-did-offset", 136), ("r-esc-etiz", 137), ("r-esc-fid", 138), ("r-safe-zone", 139), ("r-vf", 140), ("r-vf-bs-incompat", 141), ("r-pers-pid-on-lport", 142), ("r-pers-pid-portaddr-collision", 143), ("r-pers-pid-port-on-same-area", 144), ("r-pers-pid-port-addr-bnd", 145), ("r-msfr", 146), ("r-sw-halfbw-lic", 147), ("r-1g-mode-incompat", 148), ("r-10g-mode-incompat", 149), ("r-dual-mode-incompat", 150), ("r-implict-plt-service-block", 151), ("r-port-st-th-exceeded", 152), ("r-port-c3txto-th-exceeded", 153), ("r-eport-not-supported-def-sw", 154), ("r-eport-ll-th-exceeded", 155), ("r-eport-synl-th-exceeded", 156), ("r-eport-pe-th-exceeded", 157), ("r-eport-inw-th-exceeded", 158), ("r-eport-crc-th-exceeded", 159), ("r-eport-lr-th-exceeded", 160), ("r-eport-st-th-exceeded", 161), ("r-eport-c3txto-th-exceeded", 162), ("r-fopport-ll-th-exceeded", 163), ("r-fopport-synl-th-exceeded", 164), ("r-fopport-pe-th-exceeded", 165), ("r-fopport-inw-th-exceeded", 166), ("r-fopport-crc-th-exceeded", 167), ("r-fopport-lr-th-exceeded", 168), ("r-fopport-st-th-exceeded", 169), ("r-fopport-c3txto-th-exceeded", 170), ("r-fcuport-ll-th-exceeded", 171), ("r-fcuport-synl-th-exceeded", 172), ("r-fcuport-pe-th-exceeded", 173), ("r-fcuport-inw-th-exceeded", 174), ("r-fcuport-crc-th-exceeded", 175), ("r-fcuport-lr-th-exceeded", 176), ("r-fcuport-st-th-exceeded", 177), ("r-fcuport-c3txto-th-exceeded", 178), ("r-port-no-area-avail-pers-disable", 179), ("r-eport-locked", 180), ("r-enh-tizone", 181), ("r-sw-port-swap-not-supported", 182), ("r-fport-slow-drain-condition", 183), ("r-esc-vlanid", 184), ("r-port-recov-state", 185), ("r-port-auto-disable-losn", 186), ("r-port-auto-disable-losg", 187), ("r-port-auto-disable-ols", 188), ("r-port-auto-disable-nos", 189), ("r-port-auto-disable-lip", 190), ("r-port-compression", 191), ("r-port-encryption", 192), ("r-port-enccomp-res", 193), ("r-port-decommissioned", 194), ("r-port-dportmode", 195), ("r-port-dport-incompat", 196), ("r-port-enc-comp-mismatch", 197), ("r-non-rcs-rem-dom", 198), ("r-port-fips-comp-mismatch", 199), ("r-port-non-fips-comp-mismatch", 200), ("r-port-enc-auth-disabled", 201), ("r-port-disable-on-zeroize", 202), ("r-cfgspeed-not-supported", 203), ("r-fcr-ex-port-not-allowed", 204), ("r-port-duplicate-pwwn", 205), ("r-fcr-trunk-master-sfid-not-set", 206), ("r-nportistrunkmem", 207), ("r-policynotsupported", 208), ("r-no-icl-license", 209), ("r-no-ten-gig-license", 210), ("r-fdd-strict-scc-conflict", 211), ("r-fdd-strict-dcc-conflict", 212), ("r-fdd-strict-fcs-conflict", 213), ("r-fdd-strict-fabwide-conflict", 214), ("r-fdd-strict-pwd-conflict", 215), ("r-fcr-interop-conf", 216), ("r-port-enc-interop-conflict", 217), ("r-port-comp-interop-conflict", 218), ("r-no-port-open-rsp", 219), ("r-no-eicl-license", 220), ("r-eicl-license-limited", 221), ("r-esc-base-sw", 222), ("r-sw-cpu-overload", 223), ("r-no-icl-pod2-license", 224), ("r-port-area-mismatch-pers-disable", 225), ("r-unauthorized-device", 226), ("r-max-flogi-reached", 227), ("r-auth-not-supported-in-switch", 228), ("r-icl-ex-on-non-vf", 229), ("r-user-disabled-reason", 230))))
if mibBuilder.loadTexts: swFCPortDisableReason.setStatus('current')
if mibBuilder.loadTexts: swFCPortDisableReason.setDescription('It indicates the state change reason when port goes from online to offline')
swNsLocalNumEntry = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsLocalNumEntry.setStatus('current')
if mibBuilder.loadTexts: swNsLocalNumEntry.setDescription('The number of local Name Server entries.')
swNsLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: swNsLocalTable.setStatus('current')
if mibBuilder.loadTexts: swNsLocalTable.setDescription('The table of local Name Server entries.')
swNsLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "SW-MIB", "swNsEntryIndex"))
if mibBuilder.loadTexts: swNsLocalEntry.setStatus('current')
if mibBuilder.loadTexts: swNsLocalEntry.setDescription('An entry of the local Name Server database.')
swNsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsEntryIndex.setStatus('current')
if mibBuilder.loadTexts: swNsEntryIndex.setDescription('The object identifies the Name Server database entry.')
swNsPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortID.setStatus('current')
if mibBuilder.loadTexts: swNsPortID.setDescription('The object identifies the Fibre Channel port address ID of the entry.')
swNsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nPort", 1), ("nlPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortType.setStatus('current')
if mibBuilder.loadTexts: swNsPortType.setDescription('The object identifies the type of port: N_Port, NL_Port, etc., for this entry. The type is defined in FC-GS-2.')
swNsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 4), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortName.setStatus('current')
if mibBuilder.loadTexts: swNsPortName.setDescription('The object identifies the Fibre Channel World_wide Name of the port entry.')
swNsPortSymb = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortSymb.setStatus('current')
if mibBuilder.loadTexts: swNsPortSymb.setDescription("The object identifies the contents of a Symbolic Name of the port entry. In FC-GS-2, a Symbolic Name consists of a byte array of 1 through 255 bytes, and the first byte of the array specifies the length of its 'contents'. This object variable corresponds to the 'contents' of the Symbolic Name, without the first byte.")
swNsNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 6), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsNodeName.setStatus('current')
if mibBuilder.loadTexts: swNsNodeName.setDescription('The object identifies the Fibre Channel World_wide Name of the associated node as defined in FC-GS-2.')
swNsNodeSymb = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsNodeSymb.setStatus('current')
if mibBuilder.loadTexts: swNsNodeSymb.setDescription("The object identifies the contents of a Symbolic Name of the the node associated with the entry. In FC-GS-2, a Symbolic Name consists of a byte array of 1 through 255 bytes, and the first byte of the array specifies the length of its 'contents'. This object variable corresponds to the 'contents' of the Symbolic Name, without the first byte (specifying the length).")
swNsIPA = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsIPA.setStatus('current')
if mibBuilder.loadTexts: swNsIPA.setDescription('The object identifies the Initial Process Associator of the node for the entry as defined in FC-GS-2.')
swNsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsIpAddress.setStatus('current')
if mibBuilder.loadTexts: swNsIpAddress.setDescription('The object identifies the IP address of the node for the entry as defined in FC-GS-2. The format of the address is in IPv6.')
swNsCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("class-F", 1), ("class-1", 2), ("class-F-1", 3), ("class-2", 4), ("class-F-2", 5), ("class-1-2", 6), ("class-F-1-2", 7), ("class-3", 8), ("class-F-3", 9), ("class-1-3", 10), ("class-F-1-3", 11), ("class-2-3", 12), ("class-F-2-3", 13), ("class-1-2-3", 14), ("class-F-1-2-3", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsCos.setStatus('current')
if mibBuilder.loadTexts: swNsCos.setDescription('The object identifies the class of services supported by the port. The value is a bit-map defined as follows: o bit 0 is class F, o bit 1 is class 1, o bit 2 is class 2, o bit 3 is class 3, o bit 4 is class 4, etc.')
swNsFc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsFc4.setStatus('current')
if mibBuilder.loadTexts: swNsFc4.setDescription('The object identifies the FC-4s supported by the port as defined in FC-GS-2.')
swNsIpNxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsIpNxPort.setStatus('current')
if mibBuilder.loadTexts: swNsIpNxPort.setDescription('The object identifies IpAddress of the Nx_port for the entry.')
swNsWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsWwn.setStatus('current')
if mibBuilder.loadTexts: swNsWwn.setDescription('The object identifies the World Wide Name (WWN) of the Fx_port for the entry.')
swNsHardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsHardAddr.setStatus('current')
if mibBuilder.loadTexts: swNsHardAddr.setDescription('The object identifies the 24-bit hard address of the node for the entry.')
swEventTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("critical", 1), ("error", 2), ("warning", 3), ("informational", 4), ("debug", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEventTrapLevel.setStatus('deprecated')
if mibBuilder.loadTexts: swEventTrapLevel.setDescription("swAgtTrapSeverityLevel, in absence of swEventTrapLevel, specifies the Trap Severity Level of each defined trap recipient host. This object specifies the swEventTrap level in conjunction with an event's severity level. When an event occurs and if its severity level is at or below the value specified by this object instance, the agent will send the associated swEventTrap to configured recipients.")
swEventNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventNumEntries.setStatus('current')
if mibBuilder.loadTexts: swEventNumEntries.setDescription('The number of entries in the Event Table.')
swEventTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5), )
if mibBuilder.loadTexts: swEventTable.setStatus('current')
if mibBuilder.loadTexts: swEventTable.setDescription('The table of event entries.')
swEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1), ).setIndexNames((0, "SW-MIB", "swEventIndex"))
if mibBuilder.loadTexts: swEventEntry.setStatus('current')
if mibBuilder.loadTexts: swEventEntry.setDescription('An entry of the event table.')
swEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventIndex.setStatus('current')
if mibBuilder.loadTexts: swEventIndex.setDescription('This object identifies the event entry.')
swEventTimeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventTimeInfo.setStatus('current')
if mibBuilder.loadTexts: swEventTimeInfo.setDescription('This object identifies the date and time when this event occurred, in textual format.')
swEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("error", 2), ("warning", 3), ("informational", 4), ("debug", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventLevel.setStatus('current')
if mibBuilder.loadTexts: swEventLevel.setDescription('This object identifies the severity level of this event entry.')
swEventRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventRepeatCount.setStatus('current')
if mibBuilder.loadTexts: swEventRepeatCount.setDescription('This object identifies how many times this particular event has occurred.')
swEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventDescr.setStatus('current')
if mibBuilder.loadTexts: swEventDescr.setDescription('This object identifies the textual description of the event.')
swEventVfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventVfId.setStatus('current')
if mibBuilder.loadTexts: swEventVfId.setDescription('This object identifies the Virtual fabric id.')
class SwFwActs(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))
    namedValues = NamedValues(("swFwNoAction", 0), ("swFwErrlog", 1), ("swFwSnmptrap", 2), ("swFwErrlogSnmptrap", 3), ("swFwPortloglock", 4), ("swFwErrlogPortloglock", 5), ("swFwSnmptrapPortloglock", 6), ("swFwErrlogSnmptrapPortloglock", 7), ("swFwRn", 8), ("swFwElRn", 9), ("swFwStRn", 10), ("swFwElStRn", 11), ("swFwPlRn", 12), ("swFwElPlRn", 13), ("swFwStPlRn", 14), ("swFwElStPlRn", 15), ("swFwMailAlert", 16), ("swFwMailAlertErrlog", 17), ("swFwMailAlertSnmptrap", 18), ("swFwMailAlertErrlogSnmptrap", 19), ("swFwMailAlertPortloglock", 20), ("swFwMailAlertErrlogPortloglock", 21), ("swFwMailAlertSnmptrapPortloglock", 22), ("swFwMailAlertErrlogSnmptrapPortloglock", 23), ("swFwMailAlertRn", 24), ("swFwElMailAlertRn", 25), ("swFwMailAlertStRn", 26), ("swFwMailAlertElStRn", 27), ("swFwMailAlertPlRn", 28), ("swFwMailAlertElPlRn", 29), ("swFwMailAlertStPlRn", 30), ("swFwMailAlertElStPlRn", 31), ("swFwPf", 32), ("swFwElPf", 33), ("swFwStPf", 34), ("swFwElStPf", 35), ("swFwPlPf", 36), ("swFwElPlPf", 37), ("swFwStPlPf", 38), ("swFwElStPlPf", 39), ("swFwRnPf", 40), ("swFwElRnPf", 41), ("swFwStRnPf", 42), ("swFwElStRnPf", 43), ("swFwPlRnPf", 44), ("swFwElPlRnPf", 45), ("swFwStPlRnPf", 46), ("swFwElStPlRnPf", 47), ("swFwMailAlertPf", 48), ("swFwMailAlertElPf", 49), ("swFwMailAlertStPf", 50), ("swFwMailAlertElStPf", 51), ("swFwMailAlertPlPf", 52), ("swFwMailAlertElPlPf", 53), ("swFwMailAlertStPlPf", 54), ("swFwMailAlertElStPlPf", 55), ("swFwMailAlertRnPf", 56), ("swFwMailAlertElRnPf", 57), ("swFwMailAlertStRnPf", 58), ("swFwMailAlertElStRnPf", 59), ("swFwMailAlertPlRnPf", 60), ("swFwMailAlertElPlRnPf", 61), ("swFwMailAlertStPlRnPf", 62), ("swFwMailAlertElStPlRnPf", 63))

class SwFwLevels(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("swFwReserved", 1), ("swFwDefault", 2), ("swFwCustom", 3))

class SwFwClassesAreas(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152))
    namedValues = NamedValues(("swFwEnvTemp", 1), ("swFwEnvFan", 2), ("swFwEnvPs", 3), ("swFwTransceiverTemp", 4), ("swFwTransceiverRxp", 5), ("swFwTransceiverTxp", 6), ("swFwTransceiverCurrent", 7), ("swFwPortLink", 8), ("swFwPortSync", 9), ("swFwPortSignal", 10), ("swFwPortPe", 11), ("swFwPortWords", 12), ("swFwPortCrcs", 13), ("swFwPortRXPerf", 14), ("swFwPortTXPerf", 15), ("swFwPortState", 16), ("swFwFabricEd", 17), ("swFwFabricFr", 18), ("swFwFabricDi", 19), ("swFwFabricSc", 20), ("swFwFabricZc", 21), ("swFwFabricFq", 22), ("swFwFabricFl", 23), ("swFwFabricGs", 24), ("swFwEPortLink", 25), ("swFwEPortSync", 26), ("swFwEPortSignal", 27), ("swFwEPortPe", 28), ("swFwEPortWords", 29), ("swFwEPortCrcs", 30), ("swFwEPortRXPerf", 31), ("swFwEPortTXPerf", 32), ("swFwEPortState", 33), ("swFwFCUPortLink", 34), ("swFwFCUPortSync", 35), ("swFwFCUPortSignal", 36), ("swFwFCUPortPe", 37), ("swFwFCUPortWords", 38), ("swFwFCUPortCrcs", 39), ("swFwFCUPortRXPerf", 40), ("swFwFCUPortTXPerf", 41), ("swFwFCUPortState", 42), ("swFwFOPPortLink", 43), ("swFwFOPPortSync", 44), ("swFwFOPPortSignal", 45), ("swFwFOPPortPe", 46), ("swFwFOPPortWords", 47), ("swFwFOPPortCrcs", 48), ("swFwFOPPortRXPerf", 49), ("swFwFOPPortTXPerf", 50), ("swFwFOPPortState", 51), ("swFwPerfALPACRC", 52), ("swFwPerfEToECRC", 53), ("swFwPerfEToERxCnt", 54), ("swFwPerfEToETxCnt", 55), ("swFwPerffltCusDef", 56), ("swFwTransceiverVoltage", 57), ("swFwSecTelnetViolations", 58), ("swFwSecHTTPViolations", 59), ("swFwSecAPIViolations", 60), ("swFwSecRSNMPViolations", 61), ("swFwSecWSNMPViolations", 62), ("swFwSecSESViolations", 63), ("swFwSecMSViolations", 64), ("swFwSecSerialViolations", 65), ("swFwSecFPViolations", 66), ("swFwSecSCCViolations", 67), ("swFwSecDCCViolations", 68), ("swFwSecLoginViolations", 69), ("swFwSecInvalidTS", 70), ("swFwSecInvalidSign", 71), ("swFwSecInvalidCert", 72), ("swFwSecSlapFail", 73), ("swFwSecSlapBadPkt", 74), ("swFwSecTSOutSync", 75), ("swFwSecNoFcs", 76), ("swFwSecIncompDB", 77), ("swFwSecIllegalCmd", 78), ("swFwSAMTotalDownTime", 79), ("swFwSAMTotalUpTime", 80), ("swFwSAMDurationOfOccur", 81), ("swFwSAMFreqOfOccur", 82), ("swFwResourceFlash", 83), ("swFwEPortUtil", 84), ("swFwEPortPktl", 85), ("swFwPortLr", 86), ("swFwEPortLr", 87), ("swFwFCUPortLr", 88), ("swFwFOPPortLr", 89), ("swFwPortC3Discard", 90), ("swFwEPortC3Discard", 91), ("swFwFCUPortC3Discard", 92), ("swFwFOPPortC3Discard", 93), ("swFwVEPortStateChange", 94), ("swFwVEPortUtil", 95), ("swFwVEPortPktLoss", 96), ("swFwEPortTrunkUtil", 97), ("swFwFCUPortTrunkUtil", 98), ("swFwFOPPortTrunkUtil", 99), ("swFwCPUMemUsage", 100), ("filterFmCfg1", 101), ("filterFmCfg2", 102), ("filterFmCfg3", 103), ("filterFmCfg4", 104), ("filterFmCfg5", 105), ("filterFmCfg6", 106), ("filterFmCfg7", 107), ("filterFmCfg8", 108), ("filterFmCfg9", 109), ("filterFmCfg10", 110), ("filterFmCfg11", 111), ("filterFmCfg12", 112), ("filterFmCfg13", 113), ("filterFmCfg14", 114), ("filterFmCfg15", 115), ("filterFmCfg16", 116), ("filterFmCfg17", 117), ("filterFmCfg18", 118), ("filterFmCfg19", 119), ("filterFmCfg20", 120), ("filterFmCfg21", 121), ("filterFmCfg22", 122), ("filterFmCfg23", 123), ("filterFmCfg24", 124), ("filterFmCfg25", 125), ("filterFmCfg26", 126), ("filterFmCfg27", 127), ("filterFmCfg28", 128), ("filterFmCfg29", 129), ("filterFmCfg30", 130), ("filterFmCfg31", 131), ("filterFmCfg32", 132), ("filterFmCfg33", 133), ("filterFmCfg34", 134), ("filterFmCfg35", 135), ("filterFmCfg36", 136), ("filterFmCfg37", 137), ("filterFmCfg38", 138), ("filterFmCfg39", 139), ("filterFmCfg40", 140), ("filterFmCfg41", 141), ("filterFmCfg42", 142), ("filterFmCfg43", 143), ("filterFmCfg44", 144), ("filterFmCfg45", 145), ("filterFmCfg46", 146), ("filterFmCfg47", 147), ("filterFmCfg48", 148), ("filterFmCfg49", 149), ("filterFmCfg50", 150), ("filterFmCfg51", 151), ("swFwPowerOnHours", 152))

class SwFwWriteVals(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("swFwCancelWrite", 1), ("swFwApplyWrite", 2))

class SwFwTimebase(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("swFwTbNone", 1), ("swFwTbSec", 2), ("swFwTbMin", 3), ("swFwTbHour", 4), ("swFwTbDay", 5))

class SwFwStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class SwFwEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("started", 1), ("changed", 2), ("exceeded", 3), ("below", 4), ("above", 5), ("inBetween", 6), ("lowBufferCrsd", 7))

class SwFwBehavior(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("triggered", 1), ("continuous", 2))

class SwFwState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("swFwInformative", 1), ("swFwNormal", 2), ("swFwFaulty", 3))

class SwFwLicense(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("swFwLicensed", 1), ("swFwNotLicensed", 2))

swFwFabricWatchLicense = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 1), SwFwLicense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwFabricWatchLicense.setStatus('current')
if mibBuilder.loadTexts: swFwFabricWatchLicense.setDescription('tells if licensed or not.')
swFwClassAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2), )
if mibBuilder.loadTexts: swFwClassAreaTable.setStatus('current')
if mibBuilder.loadTexts: swFwClassAreaTable.setDescription('The table of classes and areas.')
swFwClassAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1), ).setIndexNames((0, "SW-MIB", "swFwClassAreaIndex"))
if mibBuilder.loadTexts: swFwClassAreaEntry.setStatus('current')
if mibBuilder.loadTexts: swFwClassAreaEntry.setDescription('An entry of the classes and areas.')
swFwClassAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 1), SwFwClassesAreas()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwClassAreaIndex.setStatus('current')
if mibBuilder.loadTexts: swFwClassAreaIndex.setDescription('This object identifies the class type.')
swFwWriteThVals = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 2), SwFwWriteVals()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwWriteThVals.setStatus('current')
if mibBuilder.loadTexts: swFwWriteThVals.setDescription('This object is set to apply the value changes.')
swFwDefaultUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultUnit.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultUnit.setDescription('A Default unit string name for a threshold area.')
swFwDefaultTimebase = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 4), SwFwTimebase()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultTimebase.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultTimebase.setDescription('A Default timebase for the current threshold counter.')
swFwDefaultLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultLow.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultLow.setDescription('A Default low threshold value.')
swFwDefaultHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultHigh.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultHigh.setDescription('A Default high threshold value.')
swFwDefaultBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultBufSize.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultBufSize.setDescription('A Default buffer size value.')
swFwCustUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwCustUnit.setStatus('current')
if mibBuilder.loadTexts: swFwCustUnit.setDescription('A custom unit string name for a threshold area.')
swFwCustTimebase = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 9), SwFwTimebase()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustTimebase.setStatus('current')
if mibBuilder.loadTexts: swFwCustTimebase.setDescription('A custom timebase for the current threshold counter.')
swFwCustLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustLow.setStatus('current')
if mibBuilder.loadTexts: swFwCustLow.setDescription('A custom low threshold value.')
swFwCustHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustHigh.setStatus('current')
if mibBuilder.loadTexts: swFwCustHigh.setDescription('A custom high threshold value.')
swFwCustBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustBufSize.setStatus('current')
if mibBuilder.loadTexts: swFwCustBufSize.setDescription('A custom buffer size value.')
swFwThLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 13), SwFwLevels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwThLevel.setStatus('current')
if mibBuilder.loadTexts: swFwThLevel.setDescription('A level where all the threshold values are set at.')
swFwWriteActVals = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 14), SwFwWriteVals()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwWriteActVals.setStatus('current')
if mibBuilder.loadTexts: swFwWriteActVals.setDescription('This object is set to apply act value changes.')
swFwDefaultChangedActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 15), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultChangedActs.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultChangedActs.setDescription('Default action matrix for changed event.')
swFwDefaultExceededActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 16), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultExceededActs.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultExceededActs.setDescription('Default action matrix for exceeded event.')
swFwDefaultBelowActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 17), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultBelowActs.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultBelowActs.setDescription('Default action matrix for below event.')
swFwDefaultAboveActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 18), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultAboveActs.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultAboveActs.setDescription('Default action matrix for above event.')
swFwDefaultInBetweenActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 19), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultInBetweenActs.setStatus('current')
if mibBuilder.loadTexts: swFwDefaultInBetweenActs.setDescription('Default action matrix for in-between event.')
swFwCustChangedActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 20), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustChangedActs.setStatus('current')
if mibBuilder.loadTexts: swFwCustChangedActs.setDescription('custom action matrix for changed event.')
swFwCustExceededActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 21), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustExceededActs.setStatus('current')
if mibBuilder.loadTexts: swFwCustExceededActs.setDescription('custom action matrix for exceeded event.')
swFwCustBelowActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 22), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustBelowActs.setStatus('current')
if mibBuilder.loadTexts: swFwCustBelowActs.setDescription('custom action matrix for below event.')
swFwCustAboveActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 23), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustAboveActs.setStatus('current')
if mibBuilder.loadTexts: swFwCustAboveActs.setDescription('custom action matrix for above event.')
swFwCustInBetweenActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 24), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustInBetweenActs.setStatus('current')
if mibBuilder.loadTexts: swFwCustInBetweenActs.setDescription('custom action matrix for in-between event.')
swFwValidActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 25), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwValidActs.setStatus('current')
if mibBuilder.loadTexts: swFwValidActs.setDescription('matrix of valid acts for an class/area.')
swFwActLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 26), SwFwLevels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwActLevel.setStatus('current')
if mibBuilder.loadTexts: swFwActLevel.setDescription('A level where all the actions are set at.')
swFwThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3), )
if mibBuilder.loadTexts: swFwThresholdTable.setStatus('current')
if mibBuilder.loadTexts: swFwThresholdTable.setDescription('The table of individual thresholds.')
swFwThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1), ).setIndexNames((0, "SW-MIB", "swFwClassAreaIndex"), (0, "SW-MIB", "swFwThresholdIndex"))
if mibBuilder.loadTexts: swFwThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: swFwThresholdEntry.setDescription('An entry of an individual threshold.')
swFwThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: swFwThresholdIndex.setDescription('This object identifies the element index of an threshold.')
swFwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 2), SwFwStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwStatus.setStatus('current')
if mibBuilder.loadTexts: swFwStatus.setDescription('This object identifies if an threshold is enabled or disabled.')
swFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwName.setStatus('current')
if mibBuilder.loadTexts: swFwName.setDescription('This object is a name of the threshold.')
swFwLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLabel.setStatus('current')
if mibBuilder.loadTexts: swFwLabel.setDescription('This object is a label of the threshold.')
swFwCurVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwCurVal.setStatus('current')
if mibBuilder.loadTexts: swFwCurVal.setDescription('This object is a current counter of the threshold.')
swFwLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 6), SwFwEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastEvent.setStatus('current')
if mibBuilder.loadTexts: swFwLastEvent.setDescription('This object is a last event type of the threshold.')
swFwLastEventVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastEventVal.setStatus('current')
if mibBuilder.loadTexts: swFwLastEventVal.setDescription('This object is a last event value of the threshold.')
swFwLastEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastEventTime.setStatus('current')
if mibBuilder.loadTexts: swFwLastEventTime.setDescription('This object is a last event time of the threshold.')
swFwLastState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 9), SwFwState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastState.setStatus('current')
if mibBuilder.loadTexts: swFwLastState.setDescription('This object is a last event state of the threshold.')
swFwBehaviorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 10), SwFwBehavior()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwBehaviorType.setStatus('current')
if mibBuilder.loadTexts: swFwBehaviorType.setDescription('A behavior of which the thresholds generate event.')
swFwBehaviorInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwBehaviorInt.setStatus('current')
if mibBuilder.loadTexts: swFwBehaviorInt.setDescription('A integer of which the thresholds generate continuous event.')
swFwLastSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 12), SwSevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: swFwLastSeverityLevel.setDescription('This object is a last event severity level of the threshold.')
swEndDeviceRlsTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1), )
if mibBuilder.loadTexts: swEndDeviceRlsTable.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceRlsTable.setDescription("The table of individual end devices' rls.")
swEndDeviceRlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1), ).setIndexNames((0, "SW-MIB", "swEndDevicePort"), (0, "SW-MIB", "swEndDeviceAlpa"))
if mibBuilder.loadTexts: swEndDeviceRlsEntry.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceRlsEntry.setDescription("An entry of an individual end devices' rls.")
swEndDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: swEndDevicePort.setStatus('current')
if mibBuilder.loadTexts: swEndDevicePort.setDescription('This object identifies the port of the end device.')
swEndDeviceAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: swEndDeviceAlpa.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceAlpa.setDescription('This object identifies the alpa of the end device.')
swEndDevicePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDevicePortID.setStatus('current')
if mibBuilder.loadTexts: swEndDevicePortID.setDescription('The object identifies the Fibre Channel port address ID of the entry.')
swEndDeviceLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceLinkFailure.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceLinkFailure.setDescription('Link failure count for the end device.')
swEndDeviceSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceSyncLoss.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceSyncLoss.setDescription('Sync loss count for the end device.')
swEndDeviceSigLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceSigLoss.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceSigLoss.setDescription('Sig loss count for the end device.')
swEndDeviceProtoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceProtoErr.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceProtoErr.setDescription('Protocol err count for the end device.')
swEndDeviceInvalidWord = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceInvalidWord.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceInvalidWord.setDescription('Invalid word count for the end device.')
swEndDeviceInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceInvalidCRC.setStatus('current')
if mibBuilder.loadTexts: swEndDeviceInvalidCRC.setDescription('Invalid CRC count for the end device.')
swGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1), )
if mibBuilder.loadTexts: swGroupTable.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupTable.setDescription('The table of groups. This may not be available on all versions of Fabric OS.')
swGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1), ).setIndexNames((0, "SW-MIB", "swGroupIndex"))
if mibBuilder.loadTexts: swGroupEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupEntry.setDescription('An entry of table of groups.')
swGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupIndex.setDescription('This object is the group index starting from 1.')
swGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupName.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupName.setDescription('This object identifies the name of the group.')
swGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupType.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupType.setDescription('This object identifies the type of the group.')
swGroupMemTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2), )
if mibBuilder.loadTexts: swGroupMemTable.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupMemTable.setDescription('The table of members of all groups. This may not be available on all versions of Fabric OS.')
swGroupMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1), ).setIndexNames((0, "SW-MIB", "swGroupId"), (0, "SW-MIB", "swGroupMemWwn"))
if mibBuilder.loadTexts: swGroupMemEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupMemEntry.setDescription('An entry for a member of a group.')
swGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupId.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupId.setDescription('This object identifies the Group Id of the member switch.')
swGroupMemWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1, 2), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupMemWwn.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupMemWwn.setDescription('This object identifies the WWN of the member switch.')
swGroupMemPos = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupMemPos.setStatus('obsolete')
if mibBuilder.loadTexts: swGroupMemPos.setDescription('This object identifies position of the member switch in the group. This is based on the order that the switches were added in the group.')
swBlmPerfALPAMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1), )
if mibBuilder.loadTexts: swBlmPerfALPAMntTable.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfALPAMntTable.setDescription('ALPA monitoring counter Table. ')
swBlmPerfALPAMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1), ).setIndexNames((0, "SW-MIB", "swBlmPerfAlpaPort"), (0, "SW-MIB", "swBlmPerfAlpaIndx"))
if mibBuilder.loadTexts: swBlmPerfALPAMntEntry.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfALPAMntEntry.setDescription(' ALPA monitoring counter for given ALPA.')
swBlmPerfAlpaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpaPort.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfAlpaPort.setDescription(' This Object identifies the port index of the switch.')
swBlmPerfAlpaIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpaIndx.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfAlpaIndx.setDescription(' This Object identifies the ALPA index. There can be 126 ALPA values')
swBlmPerfAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpa.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfAlpa.setDescription(" This Object identifies the ALPA values. These values range between x'01' and x'EF'(1 to 239). ALPA value x'00' is reserved for FL_Port If Alpa device is invalid, then it will have -1 value. ")
swBlmPerfAlpaCRCCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpaCRCCnt.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfAlpaCRCCnt.setDescription('Get CRC count for given ALPA and port. This monitoring provides information on the number of CRC errors occurred on the frames destined to each possible ALPA attached to a specific port.')
swBlmPerfEEMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2), )
if mibBuilder.loadTexts: swBlmPerfEEMntTable.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEEMntTable.setDescription(' End-to-End monitoring counter Table')
swBlmPerfEEMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1), ).setIndexNames((0, "SW-MIB", "swBlmPerfEEPort"), (0, "SW-MIB", "swBlmPerfEERefKey"))
if mibBuilder.loadTexts: swBlmPerfEEMntEntry.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEEMntEntry.setDescription('End-to-End monitoring counter for given port.')
swBlmPerfEEPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEPort.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEEPort.setDescription(' This object identifies the port number of the switch.')
swBlmPerfEERefKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEERefKey.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEERefKey.setDescription('This object identifies the reference number of the counter. This reference is number assigned when a filter is created. In SNMP Index start one instead of 0, add one to actual ref key')
swBlmPerfEECRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEECRC.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEECRC.setDescription(' Get End to End CRC error for the frames that matched the SID-DID pair.')
swBlmPerfEEFCWRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEFCWRx.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEEFCWRx.setDescription('Get End to End count of Fibre Channel words (FCW), received by the port, that matched the SID-DID pair. ')
swBlmPerfEEFCWTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEFCWTx.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEEFCWTx.setDescription('Get End to End count of Fibre Channel words (FCW), transmitted by the port, that matched the SID-DID pair. ')
swBlmPerfEESid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEESid.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEESid.setDescription(' Gets SID info by reference number. SID (Source Identifier) is a 3-byte field in the frame header used to indicate the address identifier of the N-Port from which the frame was sent.')
swBlmPerfEEDid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEDid.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfEEDid.setDescription('Gets DID info by reference number. DID (Destination Identifier) is a 3-byte field in the frame header used to indicate the address identifier of the N-Port to which the frame was sent.')
swBlmPerfFltMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3), )
if mibBuilder.loadTexts: swBlmPerfFltMntTable.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfFltMntTable.setDescription('Filter based monitoring counter.')
swBlmPerfFltMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1), ).setIndexNames((0, "SW-MIB", "swBlmPerfFltPort"), (0, "SW-MIB", "swBlmPerfFltRefkey"))
if mibBuilder.loadTexts: swBlmPerfFltMntEntry.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfFltMntEntry.setDescription(' Filter base monitoring counter for given port.')
swBlmPerfFltPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltPort.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfFltPort.setDescription('This object identifies the port number of the switch.')
swBlmPerfFltRefkey = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltRefkey.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfFltRefkey.setDescription(' This object identifies the reference number of the filter. This reference number is assigned when a filter is created. In SNMP Index start one instead of 0, add one to actual ref key')
swBlmPerfFltCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltCnt.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfFltCnt.setDescription('Get statistics of filter based monitor. Filter based monitoring provides information about a filter hit count such as 1. Read command 2. SCSI or IP traffic 3. SCSI Read/Write')
swBlmPerfFltAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltAlias.setStatus('current')
if mibBuilder.loadTexts: swBlmPerfFltAlias.setDescription(' Alias name for the filter.')
swSwitchTrunkable = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 0))).clone(namedValues=NamedValues(("yes", 8), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSwitchTrunkable.setStatus('current')
if mibBuilder.loadTexts: swSwitchTrunkable.setDescription('The trunking status of the switch - whether the switch supports the trunking feature or not. The values are yes(8) - the trunking feature is supported no(0). - the trunking feature is not supported. ')
swTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2), )
if mibBuilder.loadTexts: swTrunkTable.setStatus('current')
if mibBuilder.loadTexts: swTrunkTable.setDescription(' Table to display trunking information for the switch. ')
swTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1), ).setIndexNames((0, "SW-MIB", "swTrunkPortIndex"))
if mibBuilder.loadTexts: swTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: swTrunkEntry.setDescription('Entry for the trunking table.')
swTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkPortIndex.setStatus('current')
if mibBuilder.loadTexts: swTrunkPortIndex.setDescription('This object identifies the switch port index. Note that the value of a port index is 1 higher than the port number labeled on the front panel. e.g. port index 1 correspond to port number 0. ')
swTrunkGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGroupNumber.setStatus('current')
if mibBuilder.loadTexts: swTrunkGroupNumber.setDescription('This object is a logical entity which specifies the Group Number to which the port belongs to. If this value is Zero it means the port is not Trunked.')
swTrunkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 3), SwTrunkMaster()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkMaster.setStatus('current')
if mibBuilder.loadTexts: swTrunkMaster.setDescription('Port number that is the trunk master of the group. The trunk master implicitly defines the group. All ports with the same master are considered to be part of the same group.')
swPortTrunked = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunked.setStatus('current')
if mibBuilder.loadTexts: swPortTrunked.setDescription('The active trunk status for a member port. Values are enabled(1) or disabled(0).')
swTrunkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3), )
if mibBuilder.loadTexts: swTrunkGrpTable.setStatus('current')
if mibBuilder.loadTexts: swTrunkGrpTable.setDescription('Table to display trunking Performance information for the switch.')
swTrunkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1), ).setIndexNames((0, "SW-MIB", "swTrunkGrpNumber"))
if mibBuilder.loadTexts: swTrunkGrpEntry.setStatus('current')
if mibBuilder.loadTexts: swTrunkGrpEntry.setDescription('Entry for the trunking Group table.')
swTrunkGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpNumber.setStatus('current')
if mibBuilder.loadTexts: swTrunkGrpNumber.setDescription('This object is a logical entity which specifies the Group Number to which port belongs to.')
swTrunkGrpMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 2), SwTrunkMaster()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpMaster.setStatus('current')
if mibBuilder.loadTexts: swTrunkGrpMaster.setDescription('This object gives the master port id for the TrunkGroup.')
swTrunkGrpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpTx.setStatus('current')
if mibBuilder.loadTexts: swTrunkGrpTx.setDescription('Gives the aggregate value of the transmitted words from this TrunkGroup.')
swTrunkGrpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpRx.setStatus('current')
if mibBuilder.loadTexts: swTrunkGrpRx.setDescription('Gives the aggregate value of the received words by this TrunkGroup.')
swTopTalkerMntMode = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fabricmode", 1), ("portmode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntMode.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntMode.setDescription('Gives the mode in which toptalker is installed')
swTopTalkerMntNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntNumEntries.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntNumEntries.setDescription('Gives the number of toptalking flows')
swTopTalkerMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3), )
if mibBuilder.loadTexts: swTopTalkerMntTable.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntTable.setDescription('Table to display toptalkingflows')
swTopTalkerMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1), ).setIndexNames((0, "SW-MIB", "swTopTalkerMntIndex"))
if mibBuilder.loadTexts: swTopTalkerMntEntry.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntEntry.setDescription('Entry for the toptalker table')
swTopTalkerMntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntIndex.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntIndex.setDescription('This object identifies the list/object entry')
swTopTalkerMntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntPort.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntPort.setDescription('This object identifies the switch port number on which the f-port mode toptalker is added.')
swTopTalkerMntSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntSpid.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntSpid.setDescription('This object identifies the SID of the host')
swTopTalkerMntDpid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntDpid.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntDpid.setDescription('This object identifies the DID of the SID-DID pair')
swTopTalkerMntflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntflow.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntflow.setDescription('This object identifies the traffic flow in MB/sec')
swTopTalkerMntSwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 6), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntSwwn.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntSwwn.setDescription('This object identifies the SID in WWN format of the host')
swTopTalkerMntDwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 7), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntDwwn.setStatus('current')
if mibBuilder.loadTexts: swTopTalkerMntDwwn.setDescription('This object identifies the DID in WWN format of the SID-DID pair')
swCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuUsage.setStatus('current')
if mibBuilder.loadTexts: swCpuUsage.setDescription("System's cpu usage.")
swCpuNoOfRetries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuNoOfRetries.setStatus('current')
if mibBuilder.loadTexts: swCpuNoOfRetries.setDescription('Number of times system should take cpu utilization sample before sending the CPU utilization trap.')
swCpuUsageLimit = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuUsageLimit.setStatus('current')
if mibBuilder.loadTexts: swCpuUsageLimit.setDescription('CPU usage limit. If MAPS is enabled, then this object is not supported and return 0 value.')
swCpuPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuPollingInterval.setStatus('current')
if mibBuilder.loadTexts: swCpuPollingInterval.setDescription('Time interval between two memory samples.')
swCpuAction = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("raslog", 1), ("snmp", 2), ("raslogandSnmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAction.setStatus('current')
if mibBuilder.loadTexts: swCpuAction.setDescription('Specifies the actions to be taken if system resources exceed the specified threshold. If MAPS is enabled, then this object is not supported and return 0 value.')
swMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsage.setStatus('current')
if mibBuilder.loadTexts: swMemUsage.setDescription("System's memory usage.")
swMemNoOfRetries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemNoOfRetries.setStatus('current')
if mibBuilder.loadTexts: swMemNoOfRetries.setDescription('Number of times system should take memory usage sample before sending the memory usage trap.')
swMemUsageLimit = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsageLimit.setStatus('current')
if mibBuilder.loadTexts: swMemUsageLimit.setDescription('Memory usage limit')
swMemPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemPollingInterval.setStatus('current')
if mibBuilder.loadTexts: swMemPollingInterval.setDescription('Time interval between two memory samples.')
swMemAction = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("raslog", 1), ("snmp", 2), ("raslogandSnmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemAction.setStatus('current')
if mibBuilder.loadTexts: swMemAction.setDescription('Specifies the actions to be taken if system resources exceed the specified threshold. If MAPS is enabled, then this object is not supported and return 0 value.')
swMemUsageLimit1 = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsageLimit1.setStatus('current')
if mibBuilder.loadTexts: swMemUsageLimit1.setDescription('Low memory usage limit. If MAPS is enabled, then this object is not supported and return 0 value.')
swMemUsageLimit3 = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsageLimit3.setStatus('current')
if mibBuilder.loadTexts: swMemUsageLimit3.setDescription('High memory usage limit. If MAPS is enabled, then this object is not supported and return 0 value.')
swConnUnitPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1), )
connUnitPortStatEntry.registerAugmentions(("SW-MIB", "swConnUnitPortStatEntry"))
swConnUnitPortStatEntry.setIndexNames(*connUnitPortStatEntry.getIndexNames())
if mibBuilder.loadTexts: swConnUnitPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: swConnUnitPortStatEntry.setDescription('This represents the Conn unit Port Stats')
swConnUnitCRCWithBadEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitCRCWithBadEOF.setStatus('current')
if mibBuilder.loadTexts: swConnUnitCRCWithBadEOF.setDescription('The number of frames with CRC error with Bad EOF.')
swConnUnitZeroTenancy = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitZeroTenancy.setStatus('current')
if mibBuilder.loadTexts: swConnUnitZeroTenancy.setDescription('This counter is incremented when the FL_port acquires the loop but does not transmit a frame.')
swConnUnitFLNumOfTenancy = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFLNumOfTenancy.setStatus('current')
if mibBuilder.loadTexts: swConnUnitFLNumOfTenancy.setDescription('This counter is incremented when the FL_port acquires the loop.')
swConnUnitNLNumOfTenancy = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitNLNumOfTenancy.setStatus('current')
if mibBuilder.loadTexts: swConnUnitNLNumOfTenancy.setDescription('This counter is incremented when the NL_port acquires the loop.')
swConnUnitStopTenancyStarVation = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitStopTenancyStarVation.setStatus('current')
if mibBuilder.loadTexts: swConnUnitStopTenancyStarVation.setDescription('This counter is incremented when the FL_port can not transmit a frame because of lack of credit.')
swConnUnitOpend = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitOpend.setStatus('current')
if mibBuilder.loadTexts: swConnUnitOpend.setDescription('The number of times FC port entered OPENED state.')
swConnUnitTransferConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitTransferConnection.setStatus('current')
if mibBuilder.loadTexts: swConnUnitTransferConnection.setDescription('The number of times FC port entered TRANSFER state.')
swConnUnitOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitOpen.setStatus('current')
if mibBuilder.loadTexts: swConnUnitOpen.setDescription('The number of times FC port entered OPEN state.')
swConnUnitInvalidARB = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitInvalidARB.setStatus('current')
if mibBuilder.loadTexts: swConnUnitInvalidARB.setDescription('The number of times FC port received invalid ARB.')
swConnUnitFTB1Miss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFTB1Miss.setStatus('current')
if mibBuilder.loadTexts: swConnUnitFTB1Miss.setDescription('This counter is incremented when the port receives a frame with a DID that can not be routed by FCR.. Applicable to 8G platforms only.')
swConnUnitFTB2Miss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFTB2Miss.setStatus('current')
if mibBuilder.loadTexts: swConnUnitFTB2Miss.setDescription('This counter is incremented when the port receives a frame with an SID/DID combination that can not be routed by the VF module.Applicable to 8G platforms only.')
swConnUnitFTB6Miss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFTB6Miss.setStatus('current')
if mibBuilder.loadTexts: swConnUnitFTB6Miss.setDescription('This counter is incremented when port receives a frame with an SID that can not be routed by FCR. Applicable to 8G platforms.')
swConnUnitZoneMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitZoneMiss.setStatus('current')
if mibBuilder.loadTexts: swConnUnitZoneMiss.setDescription('This counter is incremented when the port receives a frame with an SID and DID that are not zoned together.')
swConnUnitLunZoneMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitLunZoneMiss.setStatus('current')
if mibBuilder.loadTexts: swConnUnitLunZoneMiss.setDescription('This counter is incremented when the port receives a frame with an SID, DID and LUN that are not zoned together( This is not currently used ).')
swConnUnitBadEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitBadEOF.setStatus('current')
if mibBuilder.loadTexts: swConnUnitBadEOF.setDescription('The number of frames with bad end-of-frame.')
swConnUnitLCRX = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitLCRX.setStatus('current')
if mibBuilder.loadTexts: swConnUnitLCRX.setDescription('The number of link control frames received.')
swConnUnitRDYPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitRDYPriority.setStatus('current')
if mibBuilder.loadTexts: swConnUnitRDYPriority.setDescription('The number of times that sending R_RDY or VC_RDY primitive signals was a higher priority than sending frames, due to diminishing credit reserves in the transmitter at the other end of the fibre.')
swConnUnitLli = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitLli.setStatus('current')
if mibBuilder.loadTexts: swConnUnitLli.setDescription('The number low level interrupts generated by the physical and link layer.')
swConnUnitInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitInterrupts.setStatus('current')
if mibBuilder.loadTexts: swConnUnitInterrupts.setDescription(' This represents all the interrupts received on a port. Includes LLI, unknown etc')
swConnUnitUnknownInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitUnknownInterrupts.setStatus('current')
if mibBuilder.loadTexts: swConnUnitUnknownInterrupts.setDescription(' Represents all the unknown interrupts received on a port.')
swConnUnitTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitTimedOut.setStatus('current')
if mibBuilder.loadTexts: swConnUnitTimedOut.setDescription('Represents number of timed out frames due to any reason.')
swConnUnitProcRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitProcRequired.setStatus('current')
if mibBuilder.loadTexts: swConnUnitProcRequired.setDescription('Represents number of frames trapped by CPU.')
swConnUnitTxBufferUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitTxBufferUnavailable.setStatus('current')
if mibBuilder.loadTexts: swConnUnitTxBufferUnavailable.setDescription('Number of times port failed to transmit frames .')
swConnUnitStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitStateChange.setStatus('current')
if mibBuilder.loadTexts: swConnUnitStateChange.setDescription(' Number of times port has gone to offline, online, and faulty state.')
swConnUnitC3DiscardDueToRXTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToRXTimeout.setStatus('current')
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToRXTimeout.setDescription('Number of Class 3 receive frames discarded due to timeout.')
swConnUnitC3DiscardDueToDestUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToDestUnreachable.setStatus('current')
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToDestUnreachable.setDescription('Number of Class 3 frames discarded due to destination unreachable.')
swConnUnitC3DiscardDueToTXTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToTXTimeout.setStatus('current')
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToTXTimeout.setDescription('Number of Class 3 transmit frames discarded due to timeout.')
swConnUnitC3DiscardOther = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardOther.setStatus('current')
if mibBuilder.loadTexts: swConnUnitC3DiscardOther.setDescription('Number of Class 3 frames discarded due to unknow reasons.')
swConnUnitPCSErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitPCSErrorCounter.setStatus('current')
if mibBuilder.loadTexts: swConnUnitPCSErrorCounter.setDescription('Number of Physical coding sublayer(PCS) block errors. It records the encoding violations on 10G or 16Gbps port.')
swConnUnitUnroutableFrameCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitUnroutableFrameCounter.setStatus('current')
if mibBuilder.loadTexts: swConnUnitUnroutableFrameCounter.setDescription('It indicates unroutable frame counter')
swConnUnitFECCorrectedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFECCorrectedCounter.setStatus('current')
if mibBuilder.loadTexts: swConnUnitFECCorrectedCounter.setDescription('It indicates Forward Error Correction Corrected Blocks count.FEC feature is only applicable to 10G/16G platforms.')
swConnUnitFECUnCorrectedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFECUnCorrectedCounter.setStatus('current')
if mibBuilder.loadTexts: swConnUnitFECUnCorrectedCounter.setDescription('It indicates Forward Error Correction UnCorrected Blocks count.FEC feature is only applicable to 10G/16G platforms.')
swTrapsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0))
if mibBuilder.loadTexts: swTrapsV2.setStatus('current')
if mibBuilder.loadTexts: swTrapsV2.setDescription("The Traps for Brocade's Fibre Channel Switch.")
swFault = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 1)).setObjects(("SW-MIB", "swDiagResult"), ("SW-MIB", "swSsn"))
if mibBuilder.loadTexts: swFault.setStatus('obsolete')
if mibBuilder.loadTexts: swFault.setDescription("Obsoleted this trap as firmware doesn't support this trap. A swFault(1) is generated whenever the diagnostics detects a fault with the switch.")
swSensorScn = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 2)).setObjects(("SW-MIB", "swSensorStatus"), ("SW-MIB", "swSensorIndex"), ("SW-MIB", "swSensorType"), ("SW-MIB", "swSensorValue"), ("SW-MIB", "swSensorInfo"), ("SW-MIB", "swSsn"))
if mibBuilder.loadTexts: swSensorScn.setStatus('current')
if mibBuilder.loadTexts: swSensorScn.setDescription('A swSensorScn(2) is generated whenever an environment sensor changes its operational state. For instance, a fan stop working. The VarBind in the Trap Data Unit shall contain the corresponding instance of the sensor status, sensor index, sensor type, sensor value (reading) and sensor information. Note that the sensor information contains the type of sensor and its number in textual format.')
swFCPortScn = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 3)).setObjects(("SW-MIB", "swFCPortOpStatus"), ("SW-MIB", "swFCPortIndex"), ("SW-MIB", "swFCPortName"), ("SW-MIB", "swFCPortWwn"), ("SW-MIB", "swFCPortPrevType"), ("SW-MIB", "swFCPortBrcdType"), ("SW-MIB", "swSsn"), ("SW-MIB", "swFCPortFlag"), ("SW-MIB", "swFCPortDisableReason"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swFCPortScn.setStatus('current')
if mibBuilder.loadTexts: swFCPortScn.setDescription('This trap is sent whenever an FC port operational status or its type changed. The events that trigger this trap are port goes to online/offline, port type changed to E-port/F-port/FL-port. swFCPortName and swSsn are optional varbind in the trap PDU')
swEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 4)).setObjects(("SW-MIB", "swEventIndex"), ("SW-MIB", "swEventTimeInfo"), ("SW-MIB", "swEventLevel"), ("SW-MIB", "swEventRepeatCount"), ("SW-MIB", "swEventDescr"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swEventTrap.setStatus('current')
if mibBuilder.loadTexts: swEventTrap.setDescription('This trap is generated when an event whose level at or below swEventTrapLevel occurs.')
swFabricWatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 5)).setObjects(("SW-MIB", "swFwClassAreaIndex"), ("SW-MIB", "swFwThresholdIndex"), ("SW-MIB", "swFwName"), ("SW-MIB", "swFwLabel"), ("SW-MIB", "swFwLastEventVal"), ("SW-MIB", "swFwLastEventTime"), ("SW-MIB", "swFwLastEvent"), ("SW-MIB", "swFwLastState"), ("SW-MIB", "swFwLastSeverityLevel"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swFabricWatchTrap.setStatus('current')
if mibBuilder.loadTexts: swFabricWatchTrap.setDescription('trap to be sent by Fabric Watch to notify of an event.')
swTrackChangesTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 6)).setObjects(("SW-MIB", "swTrackChangesInfo"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swTrackChangesTrap.setStatus('current')
if mibBuilder.loadTexts: swTrackChangesTrap.setDescription('trap to be sent for tracking login/logout/config changes.')
swIPv6ChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 7)).setObjects(("SW-MIB", "swIPv6Address"), ("SW-MIB", "swIPv6Status"))
if mibBuilder.loadTexts: swIPv6ChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swIPv6ChangeTrap.setDescription('This trap is generated when an ipv6 address status change event occurs.')
swPmgrEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 8)).setObjects(("SW-MIB", "swPmgrEventType"), ("SW-MIB", "swPmgrEventTime"), ("SW-MIB", "swPmgrEventDescr"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swPmgrEventTrap.setStatus('current')
if mibBuilder.loadTexts: swPmgrEventTrap.setDescription('This trap is generated when any partition manager change happens.')
swFabricReconfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 9)).setObjects(("SW-MIB", "swDomainID"))
if mibBuilder.loadTexts: swFabricReconfigTrap.setStatus('current')
if mibBuilder.loadTexts: swFabricReconfigTrap.setDescription('trap to be sent for tracking fabric reconfiguration')
swFabricSegmentTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 10)).setObjects(("SW-MIB", "swFCPortIndex"), ("SW-MIB", "swFCPortName"), ("SW-MIB", "swSsn"), ("SW-MIB", "swFCPortFlag"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swFabricSegmentTrap.setStatus('current')
if mibBuilder.loadTexts: swFabricSegmentTrap.setDescription('trap to be sent for tracking segmentation')
swExtTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 11))
if mibBuilder.loadTexts: swExtTrap.setStatus('current')
if mibBuilder.loadTexts: swExtTrap.setDescription('THIS IS INTERNAL TRAP')
swStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 12)).setObjects(("SW-MIB", "swOperStatus"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swStateChangeTrap.setDescription('This trap is sent whenever switch state changes to online/offline')
swPortMoveTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 13)).setObjects(("SW-MIB", "swPortList"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swPortMoveTrap.setStatus('current')
if mibBuilder.loadTexts: swPortMoveTrap.setDescription('This trap is sent when ports are moved from one switch to another')
swBrcdGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 14)).setObjects(("SW-MIB", "swBrcdTrapBitMask"))
if mibBuilder.loadTexts: swBrcdGenericTrap.setStatus('current')
if mibBuilder.loadTexts: swBrcdGenericTrap.setDescription("This trap is sent when there is any one of the following event occured. 1. fabric change 2. device change 3. Fapwwn change 4. fdmi event This Trap is strictly for brocade's internal usage.")
swDeviceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 15)).setObjects(("SW-MIB", "swFCPortSpecifier"), ("SW-MIB", "swDeviceStatus"), ("SW-MIB", "swEndDevicePortID"), ("SW-MIB", "swNsNodeName"))
if mibBuilder.loadTexts: swDeviceStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swDeviceStatusTrap.setDescription('This trap is sent whenever there is a device login or logout')
swZoneConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 16)).setObjects(("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swZoneConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swZoneConfigChangeTrap.setDescription('This trap is sent whenever there is change in local zone database.')
mibBuilder.exportSymbols("SW-MIB", swFwCustUnit=swFwCustUnit, swIDIDMode=swIDIDMode, swSensorValue=swSensorValue, swFabric=swFabric, swTrunkMaster=swTrunkMaster, swDeviceStatusTrap=swDeviceStatusTrap, swTrunkGrpMaster=swTrunkGrpMaster, swFabricMemName=swFabricMemName, swSensorType=swSensorType, sw20x0=sw20x0, swTrunkPortIndex=swTrunkPortIndex, swGroupTable=swGroupTable, swFwClassAreaEntry=swFwClassAreaEntry, swNsWwn=swNsWwn, swBlmPerfEESid=swBlmPerfEESid, swFCPortAdmStatus=swFCPortAdmStatus, swGroupName=swGroupName, swFwValidActs=swFwValidActs, swTrunkGrpNumber=swTrunkGrpNumber, swEventTable=swEventTable, swConnUnitTxBufferUnavailable=swConnUnitTxBufferUnavailable, swFCPortType=swFCPortType, swTrackChangesInfo=swTrackChangesInfo, swTopTalkerMntNumEntries=swTopTalkerMntNumEntries, swFCPortTooManyRdys=swFCPortTooManyRdys, swTopTalkerMntDwwn=swTopTalkerMntDwwn, swSensorInfo=swSensorInfo, swVfName=swVfName, swEventTrapLevel=swEventTrapLevel, swFwDefaultBelowActs=swFwDefaultBelowActs, swGroupEntry=swGroupEntry, swFabricSegmentTrap=swFabricSegmentTrap, swGroup=swGroup, swEndDevicePortID=swEndDevicePortID, SwFwWriteVals=SwFwWriteVals, swFCPortPhyState=swFCPortPhyState, swTopTalkerMntSwwn=swTopTalkerMntSwwn, swTrunkTable=swTrunkTable, swVfId=swVfId, SwFwClassesAreas=SwFwClassesAreas, swSwitchTrunkable=swSwitchTrunkable, swFwCustHigh=swFwCustHigh, swFwLastEventTime=swFwLastEventTime, swFlashDLPassword=swFlashDLPassword, swBlmPerfAlpa=swBlmPerfAlpa, swFCPortMcastTimedOuts=swFCPortMcastTimedOuts, swConnUnitC3DiscardDueToRXTimeout=swConnUnitC3DiscardDueToRXTimeout, swTopTalkerMntflow=swTopTalkerMntflow, swExtTrap=swExtTrap, swFCPortLipIns=swFCPortLipIns, swBlmPerfEEDid=swBlmPerfEEDid, swNsPortName=swNsPortName, PYSNMP_MODULE_ID=swMibModule, swEventIndex=swEventIndex, swNsPortID=swNsPortID, swCpuUsageLimit=swCpuUsageLimit, swPortMoveTrap=swPortMoveTrap, swFwClassAreaTable=swFwClassAreaTable, swFCPortRxBadEofs=swFCPortRxBadEofs, swBlmPerfMnt=swBlmPerfMnt, swFCPortLipLastAlpa=swFCPortLipLastAlpa, swFwSystem=swFwSystem, swBlmPerfFltMntEntry=swBlmPerfFltMntEntry, swFCPortRxCrcs=swFCPortRxCrcs, swTopTalkerMntPort=swTopTalkerMntPort, swEndDeviceSyncLoss=swEndDeviceSyncLoss, swBlmPerfEEPort=swBlmPerfEEPort, swFlashDLFile=swFlashDLFile, swConnUnitUnknownInterrupts=swConnUnitUnknownInterrupts, swNumSensors=swNumSensors, swFlashDLOperStatus=swFlashDLOperStatus, swTopTalkerMntSpid=swTopTalkerMntSpid, swConnUnitC3DiscardDueToDestUnreachable=swConnUnitC3DiscardDueToDestUnreachable, swFault=swFault, swFCPortTable=swFCPortTable, swBlmPerfAlpaPort=swBlmPerfAlpaPort, swFwDefaultUnit=swFwDefaultUnit, swConnUnitLCRX=swConnUnitLCRX, swFCIPMask=swFCIPMask, swConnUnitRDYPriority=swConnUnitRDYPriority, swFCport=swFCport, swConnUnitTransferConnection=swConnUnitTransferConnection, swNsCos=swNsCos, swEventNumEntries=swEventNumEntries, swBlmPerfEERefKey=swBlmPerfEERefKey, swTopTalkerMntMode=swTopTalkerMntMode, swGroupIndex=swGroupIndex, swConnUnitZeroTenancy=swConnUnitZeroTenancy, swFabricWatchTrap=swFabricWatchTrap, swNsIpAddress=swNsIpAddress, swBlmPerfFltMntTable=swBlmPerfFltMntTable, swMemNoOfRetries=swMemNoOfRetries, swNsPortSymb=swNsPortSymb, swNsIpNxPort=swNsIpNxPort, swIPv6ChangeTrap=swIPv6ChangeTrap, swTrunk=swTrunk, swBlmPerfAlpaIndx=swBlmPerfAlpaIndx, swBlmPerfEEMntTable=swBlmPerfEEMntTable, swConnUnitPortStatEntry=swConnUnitPortStatEntry, swEndDevicePort=swEndDevicePort, swFCPortRxC2Frames=swFCPortRxC2Frames, swDomainID=swDomainID, swAdmStatus=swAdmStatus, swGroupMemWwn=swGroupMemWwn, swMemAction=swMemAction, SwFwState=SwFwState, swNbEntry=swNbEntry, swFabricMemEntry=swFabricMemEntry, swFabricMemDid=swFabricMemDid, FcPortFlag=FcPortFlag, swFwCustLow=swFwCustLow, swFCPortSpeed=swFCPortSpeed, swTelnetShellAdmStatus=swTelnetShellAdmStatus, swFwStatus=swFwStatus, swConnUnitUnroutableFrameCounter=swConnUnitUnroutableFrameCounter, swNsEntryIndex=swNsEntryIndex, swFCPortRxFrames=swFCPortRxFrames, swConnUnitBadEOF=swConnUnitBadEOF, swEndDeviceInvalidWord=swEndDeviceInvalidWord, swSensorEntry=swSensorEntry, swConnUnitPCSErrorCounter=swConnUnitPCSErrorCounter, SwFwLicense=SwFwLicense, swSensorStatus=swSensorStatus, swNs=swNs, swMemUsage=swMemUsage, swAgtCmtyIdx=swAgtCmtyIdx, swFwDefaultLow=swFwDefaultLow, swNbMyPort=swNbMyPort, swFCPortIndex=swFCPortIndex, swSsn=swSsn, swConnUnitInvalidARB=swConnUnitInvalidARB, swConnUnitFTB1Miss=swConnUnitFTB1Miss, swNsHardAddr=swNsHardAddr, swEventEntry=swEventEntry, swModel=swModel, swFCIPAddress=swFCIPAddress, swFCPortTxFrames=swFCPortTxFrames, swEndDevice=swEndDevice, swEventVfId=swEventVfId, swFWLastUpdated=swFWLastUpdated, swConnUnitInterrupts=swConnUnitInterrupts, swFwWriteActVals=swFwWriteActVals, swFlashDLAdmStatus=swFlashDLAdmStatus, swEvent=swEvent, swEtherIPMask=swEtherIPMask, SwFwActs=SwFwActs, swFwThLevel=swFwThLevel, swFwCustBelowActs=swFwCustBelowActs, sw=sw, swCpuPollingInterval=swCpuPollingInterval, swBlmPerfFltCnt=swBlmPerfFltCnt, swFwFabricWatchLicense=swFwFabricWatchLicense, swAgtTrapSeverityLevel=swAgtTrapSeverityLevel, swPortTrunked=swPortTrunked, swEventLevel=swEventLevel, swSensorTable=swSensorTable, swPmgrEventTrap=swPmgrEventTrap, swTrunkEntry=swTrunkEntry, swFwLastSeverityLevel=swFwLastSeverityLevel, swNumNbs=swNumNbs, swGroupMemEntry=swGroupMemEntry, SwFwLevels=SwFwLevels, swBlmPerfAlpaCRCCnt=swBlmPerfAlpaCRCCnt, swFlashLastUpdated=swFlashLastUpdated, swZoneConfigChangeTrap=swZoneConfigChangeTrap, swBootPromLastUpdated=swBootPromLastUpdated, swNsLocalEntry=swNsLocalEntry, swFwLastEvent=swFwLastEvent, swFwClassAreaIndex=swFwClassAreaIndex, swBlmPerfEEFCWRx=swBlmPerfEEFCWRx, swConnUnitOpen=swConnUnitOpen, swBlmPerfEEFCWTx=swBlmPerfEEFCWTx, swFwCustAboveActs=swFwCustAboveActs, swNbTable=swNbTable, swNsPortType=swNsPortType, swConnUnitStopTenancyStarVation=swConnUnitStopTenancyStarVation, swFwThresholdEntry=swFwThresholdEntry, swMibModule=swMibModule, swConnUnitFTB2Miss=swConnUnitFTB2Miss, swAgtCmtyStr=swAgtCmtyStr, swFCPortRxC3Frames=swFCPortRxC3Frames, swID=swID, swDeviceStatus=swDeviceStatus, swBlmPerfALPAMntTable=swBlmPerfALPAMntTable, swFCPortCapacity=swFCPortCapacity, swBrcdTrapBitMask=swBrcdTrapBitMask, swNsNodeName=swNsNodeName, swFwBehaviorInt=swFwBehaviorInt, swFCPortBrcdType=swFCPortBrcdType, swFabricMemTable=swFabricMemTable, swFCPortEntry=swFCPortEntry, swTrunkGroupNumber=swTrunkGroupNumber, swTopTalkerMntDpid=swTopTalkerMntDpid, swprivProtocolPassword=swprivProtocolPassword, swFwWriteThVals=swFwWriteThVals, swConnUnitZoneMiss=swConnUnitZoneMiss, swFCPortRxEncOutFrs=swFCPortRxEncOutFrs, swBootDate=swBootDate, swFCPortLipOuts=swFCPortLipOuts, swGroupMemPos=swGroupMemPos, swTrackChangesTrap=swTrackChangesTrap, swConnUnitNLNumOfTenancy=swConnUnitNLNumOfTenancy, swFCPortRxEncInFrs=swFCPortRxEncInFrs, swBeaconAdmStatus=swBeaconAdmStatus, swBlmPerfEEMntEntry=swBlmPerfEEMntEntry, swEventDescr=swEventDescr, swNbIslCost=swNbIslCost, swConnUnitC3DiscardDueToTXTimeout=swConnUnitC3DiscardDueToTXTimeout, swFwCustExceededActs=swFwCustExceededActs, swEventRepeatCount=swEventRepeatCount, swFCPortTxMcasts=swFCPortTxMcasts, swConnUnitOpend=swConnUnitOpend, swOperStatus=swOperStatus, swBlmPerfALPAMntEntry=swBlmPerfALPAMntEntry, swFwDefaultInBetweenActs=swFwDefaultInBetweenActs, sw21kN24k=sw21kN24k, swFwDefaultExceededActs=swFwDefaultExceededActs, swModule=swModule, swBlmPerfEECRC=swBlmPerfEECRC, swNbRemDomain=swNbRemDomain, swCpuOrMemoryUsage=swCpuOrMemoryUsage, swAgtCmtyEntry=swAgtCmtyEntry, swFCPortRxTooLongs=swFCPortRxTooLongs, swIPv6Address=swIPv6Address, swTopTalkerMntEntry=swTopTalkerMntEntry, swFwLastState=swFwLastState, swMemUsageLimit1=swMemUsageLimit1, swTrunkGrpTable=swTrunkGrpTable, swSystem=swSystem, swFwThresholdIndex=swFwThresholdIndex, swPortList=swPortList, swFCPortNoTxCredits=swFCPortNoTxCredits, swFCPortC3Discards=swFCPortC3Discards, swEndDeviceAlpa=swEndDeviceAlpa, swFirmwareVersion=swFirmwareVersion, swGroupType=swGroupType, swEndDeviceSigLoss=swEndDeviceSigLoss, swTrapsV2=swTrapsV2, swMemUsageLimit=swMemUsageLimit, swConnUnitFECCorrectedCounter=swConnUnitFECCorrectedCounter, swTopTalker=swTopTalker, swFabricReconfigTrap=swFabricReconfigTrap, swConnUnitC3DiscardOther=swConnUnitC3DiscardOther, swFlashDLUser=swFlashDLUser, swauthProtocolPassword=swauthProtocolPassword, swCpuNoOfRetries=swCpuNoOfRetries, SwSevType=SwSevType, swFwName=swFwName, swFwDefaultChangedActs=swFwDefaultChangedActs, swFwCustTimebase=swFwCustTimebase, swTrunkGrpEntry=swTrunkGrpEntry, swAgtTrapRcp=swAgtTrapRcp, swCpuUsage=swCpuUsage, swEndDeviceRlsEntry=swEndDeviceRlsEntry)
mibBuilder.exportSymbols("SW-MIB", swFwCustInBetweenActs=swFwCustInBetweenActs, swFabricMemWwn=swFabricMemWwn, swFCPortTxWords=swFCPortTxWords, swConnUnitPortStatExtentionTable=swConnUnitPortStatExtentionTable, swConnUnitTimedOut=swConnUnitTimedOut, swTrunkGrpTx=swTrunkGrpTx, swNbIndex=swNbIndex, swNbIslState=swNbIslState, swBlmPerfFltAlias=swBlmPerfFltAlias, swMemPollingInterval=swMemPollingInterval, swIPv6Status=swIPv6Status, swFabricMemType=swFabricMemType, swFwCustBufSize=swFwCustBufSize, swFCPortWwn=swFCPortWwn, swFCPortLinkState=swFCPortLinkState, swEventTrap=swEventTrap, swFCPortFlag=swFCPortFlag, swConnUnitStateChange=swConnUnitStateChange, swFwDefaultBufSize=swFwDefaultBufSize, swNsIPA=swNsIPA, swDiagResult=swDiagResult, swNbBaudRate=swNbBaudRate, swFwDefaultHigh=swFwDefaultHigh, swNsLocalTable=swNsLocalTable, swConnUnitProcRequired=swConnUnitProcRequired, swAgtCfg=swAgtCfg, swFCPortOpStatus=swFCPortOpStatus, swFabricMemGWIP=swFabricMemGWIP, swAgtCmtyTable=swAgtCmtyTable, swFCPortRxLCs=swFCPortRxLCs, swFwCurVal=swFwCurVal, swFabricMemEIP=swFabricMemEIP, swConnUnitLli=swConnUnitLli, swPmgrEventDescr=swPmgrEventDescr, SwFwStatus=SwFwStatus, swTopTalkerMntTable=swTopTalkerMntTable, swGroupMemTable=swGroupMemTable, swPmgrEventType=swPmgrEventType, swFwThresholdTable=swFwThresholdTable, swFabricMemShortVersion=swFabricMemShortVersion, swCpuAction=swCpuAction, swFwBehaviorType=swFwBehaviorType, swFwActLevel=swFwActLevel, swTestString=swTestString, swFCPortRxWords=swFCPortRxWords, swNbRemPort=swNbRemPort, swCurrentDate=swCurrentDate, swFCPortRxTruncs=swFCPortRxTruncs, swStateChangeTrap=swStateChangeTrap, swSensorScn=swSensorScn, swNsLocalNumEntry=swNsLocalNumEntry, swEtherIPAddress=swEtherIPAddress, swFwDefaultAboveActs=swFwDefaultAboveActs, swEndDeviceProtoErr=swEndDeviceProtoErr, swEventTimeInfo=swEventTimeInfo, swConnUnitFTB6Miss=swConnUnitFTB6Miss, swPrincipalSwitch=swPrincipalSwitch, SwFwBehavior=SwFwBehavior, swFwLabel=swFwLabel, swFCPortName=swFCPortName, swEndDeviceLinkFailure=swEndDeviceLinkFailure, swFlashDLHost=swFlashDLHost, swFCPortTxType=swFCPortTxType, swTrunkGrpRx=swTrunkGrpRx, swFwDefaultTimebase=swFwDefaultTimebase, swNsFc4=swNsFc4, swBlmPerfFltRefkey=swBlmPerfFltRefkey, swFCPortRxMcasts=swFCPortRxMcasts, swBrcdGenericTrap=swBrcdGenericTrap, swTopTalkerMntIndex=swTopTalkerMntIndex, swNsNodeSymb=swNsNodeSymb, swBlmPerfFltPort=swBlmPerfFltPort, swFabricMemFCIP=swFabricMemFCIP, swFCPortPrevType=swFCPortPrevType, swMemUsageLimit3=swMemUsageLimit3, swConnUnitFECUnCorrectedCounter=swConnUnitFECUnCorrectedCounter, swPmgrEventTime=swPmgrEventTime, swConnUnitLunZoneMiss=swConnUnitLunZoneMiss, SwFwTimebase=SwFwTimebase, swNbRemPortName=swNbRemPortName, swEndDeviceInvalidCRC=swEndDeviceInvalidCRC, swConnUnitFLNumOfTenancy=swConnUnitFLNumOfTenancy, sw28k=sw28k, swBeaconOperStatus=swBeaconOperStatus, swFCPortScn=swFCPortScn, swFCPortDisableReason=swFCPortDisableReason, swGroupId=swGroupId, swFCPortSpecifier=swFCPortSpecifier, swFCPortRxBadOs=swFCPortRxBadOs, swSensorIndex=swSensorIndex, swFwCustChangedActs=swFwCustChangedActs, SwFwEvent=SwFwEvent, swConnUnitCRCWithBadEOF=swConnUnitCRCWithBadEOF, swEndDeviceRlsTable=swEndDeviceRlsTable, swFwLastEventVal=swFwLastEventVal)
