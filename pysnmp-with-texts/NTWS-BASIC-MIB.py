#
# PySNMP MIB module NTWS-BASIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTWS-BASIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NtwsLicenseFeature, = mibBuilder.importSymbols("NTWS-LICENSE-FEATURE-TC-MIB", "NtwsLicenseFeature")
ntwsMibs, = mibBuilder.importSymbols("NTWS-ROOT-MIB", "ntwsMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, ObjectIdentity, IpAddress, Gauge32, iso, Unsigned32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "ObjectIdentity", "IpAddress", "Gauge32", "iso", "Unsigned32", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ntwsBasic = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2))
ntwsBasic.setRevisions(('2009-11-16 00:10', '2007-08-16 00:09', '2006-07-10 00:08', '2006-04-14 00:07', '2005-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntwsBasic.setRevisionsDescriptions(('v3.0.0: Moved NtwsLicenseFeature into its own module for easier maintenance.', 'v2.0.7, MRT v3: Made changes in order to make MIB compile cleanly and comply with corporate MIB conventions.', 'v2.0.6: Fixed MAX-ACCESS of ntwsMobilityMemberEntryAddr, an index that was also the only column', 'v2.0.5: Revised for release', 'v1: initial version',))
if mibBuilder.loadTexts: ntwsBasic.setLastUpdated('200911160010Z')
if mibBuilder.loadTexts: ntwsBasic.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: ntwsBasic.setContactInfo('www.nortelnetworks.com')
if mibBuilder.loadTexts: ntwsBasic.setDescription("Basic objects for Nortel Networks wireless switches. Copyright 2009 Nortel Networks. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. This Specification is supplied 'AS IS' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
ntwsBasicSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 1))
ntwsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ntwsSerialNumber.setDescription('The serial number of the switch.')
ntwsSwMajorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsSwMajorVersionNumber.setStatus('current')
if mibBuilder.loadTexts: ntwsSwMajorVersionNumber.setDescription('The major release version of the running software.')
ntwsSwMinorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsSwMinorVersionNumber.setStatus('current')
if mibBuilder.loadTexts: ntwsSwMinorVersionNumber.setDescription('The minor release version of the running software.')
ntwsVersionString = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsVersionString.setStatus('current')
if mibBuilder.loadTexts: ntwsVersionString.setDescription('The version string of the running software, including the major, minor, patch and build numbers, such as 3.0.0.185')
ntwsMobilityDomainInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2))
ntwsMobilityDomainName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsMobilityDomainName.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainName.setDescription('The mobility domain containing the switch, or a zero-length string when the mobility domain is unknown.')
ntwsMobilitySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsMobilitySeedIp.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilitySeedIp.setDescription("The IPv4 address of the seed switch for this switch's mobility domain, or the IPv4 address 0.0.0.0 if unknown.")
ntwsMobilityMemberTableSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsMobilityMemberTableSize.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityMemberTableSize.setDescription('The number of entries in the mobility member table, ntwsMobilityMemberTable.')
ntwsMobilityMemberTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2, 4), )
if mibBuilder.loadTexts: ntwsMobilityMemberTable.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityMemberTable.setDescription('Table of members of the mobility domain, indexed by the member IPv4 address.')
ntwsMobilityMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2, 4, 1), ).setIndexNames((0, "NTWS-BASIC-MIB", "ntwsMobilityMemberEntryAddr"))
if mibBuilder.loadTexts: ntwsMobilityMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityMemberEntry.setDescription('An entry in the ntwsMobilityMemberTable table.')
ntwsMobilityMemberEntryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsMobilityMemberEntryAddr.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityMemberEntryAddr.setDescription('IPv4 address of a member of the mobility domain.')
ntwsLicenseInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3))
ntwsLicenseInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsLicenseInfoTableSize.setStatus('current')
if mibBuilder.loadTexts: ntwsLicenseInfoTableSize.setDescription('The number of entries in the license table, ntwsLicenseInfoTable.')
ntwsLicenseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3, 2), )
if mibBuilder.loadTexts: ntwsLicenseInfoTable.setStatus('current')
if mibBuilder.loadTexts: ntwsLicenseInfoTable.setDescription('Table of installed licenses on the switch. The licences provide additional capabilities over the default capabilities of the switch.')
ntwsLicenseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3, 2, 1), ).setIndexNames((0, "NTWS-BASIC-MIB", "ntwsLicenseInfoEntryFeature"))
if mibBuilder.loadTexts: ntwsLicenseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsLicenseInfoEntry.setDescription('A license table entry.')
ntwsLicenseInfoEntryFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3, 2, 1, 1), NtwsLicenseFeature())
if mibBuilder.loadTexts: ntwsLicenseInfoEntryFeature.setStatus('current')
if mibBuilder.loadTexts: ntwsLicenseInfoEntryFeature.setDescription('The feature being reported on')
ntwsLicenseInfoEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsLicenseInfoEntryValue.setStatus('current')
if mibBuilder.loadTexts: ntwsLicenseInfoEntryValue.setDescription('The value of the feature enabled, for example a feature may have multiple levels of licensing, so the value will very with the license level.')
ntwsLicenseInfoEntryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsLicenseInfoEntryDescr.setStatus('current')
if mibBuilder.loadTexts: ntwsLicenseInfoEntryDescr.setDescription("A human interpretable description of this license, for example, '120 APs or DAPs.'")
mibBuilder.exportSymbols("NTWS-BASIC-MIB", ntwsLicenseInfoEntry=ntwsLicenseInfoEntry, ntwsMobilityMemberEntry=ntwsMobilityMemberEntry, ntwsLicenseInfoTableSize=ntwsLicenseInfoTableSize, ntwsLicenseInfoEntryValue=ntwsLicenseInfoEntryValue, ntwsSwMinorVersionNumber=ntwsSwMinorVersionNumber, ntwsMobilitySeedIp=ntwsMobilitySeedIp, ntwsSwMajorVersionNumber=ntwsSwMajorVersionNumber, ntwsMobilityDomainName=ntwsMobilityDomainName, ntwsBasicSystemInfo=ntwsBasicSystemInfo, ntwsVersionString=ntwsVersionString, ntwsMobilityMemberTableSize=ntwsMobilityMemberTableSize, ntwsLicenseInfoEntryDescr=ntwsLicenseInfoEntryDescr, ntwsLicenseInfoGroup=ntwsLicenseInfoGroup, ntwsMobilityDomainInfo=ntwsMobilityDomainInfo, ntwsMobilityMemberTable=ntwsMobilityMemberTable, ntwsLicenseInfoTable=ntwsLicenseInfoTable, ntwsBasic=ntwsBasic, PYSNMP_MODULE_ID=ntwsBasic, ntwsLicenseInfoEntryFeature=ntwsLicenseInfoEntryFeature, ntwsSerialNumber=ntwsSerialNumber, ntwsMobilityMemberEntryAddr=ntwsMobilityMemberEntryAddr)
