#
# PySNMP MIB module HPN-ICF-IKE-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-IKE-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:39:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Counter32, IpAddress, ModuleIdentity, NotificationType, TimeTicks, ObjectIdentity, Integer32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Counter32", "IpAddress", "ModuleIdentity", "NotificationType", "TimeTicks", "ObjectIdentity", "Integer32", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpnicfIKEMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30))
if mibBuilder.loadTexts: hpnicfIKEMonitor.setLastUpdated('201206280000Z')
if mibBuilder.loadTexts: hpnicfIKEMonitor.setOrganization('')
if mibBuilder.loadTexts: hpnicfIKEMonitor.setContactInfo('')
if mibBuilder.loadTexts: hpnicfIKEMonitor.setDescription('The MIB is designed to get statistic information of IKE tunnels. With this MIB, we can get information of a certain IKE tunnel or all IKE tunnels')
class HpnicfIKENegoMode(TextualConvention, Integer32):
    description = 'The IKE negotiation mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4, 32))
    namedValues = NamedValues(("mainMode", 2), ("aggressiveMode", 4), ("quickMode", 32))

class HpnicfIKEAuthMethod(TextualConvention, Integer32):
    description = 'The authentication method used in IKE negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("preSharedKey", 1), ("dsaSignatures", 2), ("rsaSignatures", 3))

class HpnicfDiffHellmanGrp(TextualConvention, Integer32):
    description = 'The Diffie Hellman Group used in IKE and IPsec negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 14, 24, 2147483647))
    namedValues = NamedValues(("none", 0), ("dhGroup1", 1), ("dhGroup2", 2), ("dhGroup5", 5), ("dhGroup14", 14), ("dhGroup24", 24), ("invalidGroup", 2147483647))

class HpnicfEncryptAlgo(TextualConvention, Integer32):
    description = 'The encryption algorithm used in IKE and IPsec negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 2147483647))
    namedValues = NamedValues(("none", 0), ("desCbc", 1), ("ideaCbc", 2), ("blowfishCbc", 3), ("rc5R16B64Cbc", 4), ("tripleDesCbc", 5), ("castCbc", 6), ("aesCbc", 7), ("aesCbc128", 8), ("aesCbc192", 9), ("aesCbc256", 10), ("aesCtr", 11), ("aesCamelliaCbc", 12), ("rc4", 13), ("invalidAlg", 2147483647))

class HpnicfAuthAlgo(TextualConvention, Integer32):
    description = 'The authentication algorithm used in IKE negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 2147483647))
    namedValues = NamedValues(("none", 0), ("md5", 1), ("sha1", 2), ("sha256", 3), ("sha384", 4), ("sha512", 5), ("invalidAlg", 2147483647))

class HpnicfSaProtocol(TextualConvention, Integer32):
    description = 'The protocol of security association.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("reserved", 0), ("isakmp", 1), ("ah", 2), ("esp", 3), ("ipcomp", 4))

class HpnicfTrapStatus(TextualConvention, Integer32):
    description = 'The switch which determines whether send a trap or not.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class HpnicfIKEIDType(TextualConvention, Integer32):
    description = 'The type of IKE Identity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("reserved", 0), ("ipv4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8), ("derAsn1Dn", 9), ("derAsn1Gn", 10), ("keyId", 11))

class HpnicfTrafficType(TextualConvention, Integer32):
    description = 'The type of the data flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ipv4Addr", 1), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8))

class HpnicfIKETunnelState(TextualConvention, Integer32):
    description = 'The state of the IKE tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("timeout", 2))

hpnicfIKEObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1))
hpnicfIKETunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1), )
if mibBuilder.loadTexts: hpnicfIKETunnelTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelTable.setDescription('The IPsec Phase-1 Internet Key Exchange Tunnel Table. There is one entry in this table for each active IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"))
if mibBuilder.loadTexts: hpnicfIKETunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelEntry.setDescription('The entry contains the information about hpnicfIKETunnelTable, such as negotiate mode, encryption algorithm and authentication algorithm, etc.')
hpnicfIKETunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIKETunIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunIndex.setDescription('The index of the IPsec Phase-1 IKE Tunnel Table. The value of the index is a number which begins at one and is incremented with each tunnel that is created. The value of this object will wrap at 2147483647.')
hpnicfIKETunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 2), HpnicfIKEIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLocalType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunLocalType.setDescription('The type of local peer identity.')
hpnicfIKETunLocalValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLocalValue1.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunLocalValue1.setDescription('The value of the local peer identity. If the local peer type is ipv4Addr/ipv6Addr, this is the IP address used to identify the local peer. If the local peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet address. If the local peer type is ipv4AddrRange/ipv6AddrRange, this is the beginning IP address of the range. If the local peer type is fqdn/userFqdn, this is the host name used to identify the local peer. If the local peer type is derAsn1Dn, this is the binary DER encoding of an ASN.1 X.500 Distinguished Name [X.501] of the principal whose certificates are being exchanged to establish the SA. If the local peer type is derAsn1Gn, this is the binary DER encoding of an ASN.1 X.500 GeneralName [X.509] of the principal whose certificates are being exchanged to establish the SA. If the local peer type is keyId, this is an opaque byte stream which may be used to pass vendor-specific information necessary to identify which pre-shared key should be used to authenticate Aggressive mode negotiations.')
hpnicfIKETunLocalValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLocalValue2.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunLocalValue2.setDescription("The second specification of the local peer's IP address. If the local peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet mask. If the local peer type is ipv4AddrRange/ipv6AddrRange, this is the ending IP address of the range. If the local peer type are others, this is a zero-length string.")
hpnicfIKETunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLocalAddr.setStatus('deprecated')
if mibBuilder.loadTexts: hpnicfIKETunLocalAddr.setDescription('The IP address of the local endpoint for the IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 6), HpnicfIKEIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemoteType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunRemoteType.setDescription('The type of remote peer identity.')
hpnicfIKETunRemoteValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemoteValue1.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunRemoteValue1.setDescription('The value of the remote peer identity. If the remote peer type is ipv4Addr/ipv6Addr, this is the IP address used to identify the remote peer. If the remote peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet address. If the remote peer type is ipv4AddrRange/ipv6AddrRange, this is the beginning IP address of the range. If the remote peer type is fqdn/userFqdn, this is the host name used to identify the remote peer. If the remote peer type is derAsn1Dn, this is the binary DER encoding of an ASN.1 X.500 Distinguished Name [X.501] of the principal whose certificates are being exchanged to establish the SA. If the remote peer type is derAsn1Gn, this is the binary DER encoding of an ASN.1 X.500 GeneralName [X.509] of the principal whose certificates are being exchanged to establish the SA. If the remote peer type is keyId, this is an opaque byte stream which may be used to pass vendor-specific information necessary to identify which pre-shared key should be used to authenticate Aggressive mode negotiations.')
hpnicfIKETunRemoteValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemoteValue2.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunRemoteValue2.setDescription("The second specification of the remote peer's IP address. If the remote peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet mask. If the remote peer type is ipv4AddrRange/ipv6AddrRange, this is the ending IP address of the range. If the remote peer type are others, this is a zero-length string.")
hpnicfIKETunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemoteAddr.setStatus('deprecated')
if mibBuilder.loadTexts: hpnicfIKETunRemoteAddr.setDescription('The IP address of the remote peer for the IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInitiator.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInitiator.setDescription('The initiator of this tunnel.')
hpnicfIKETunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 11), HpnicfIKENegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunNegoMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunNegoMode.setDescription('The negotiation mode of the IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 12), HpnicfDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunDiffHellmanGrp.setDescription('The Diffie Hellman Group used in the IPsec Phase-1 IKE negotiations.')
hpnicfIKETunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 13), HpnicfEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunEncryptAlgo.setDescription('The encryption algorithm used in the IPsec Phase-1 IKE negotiations.')
hpnicfIKETunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 14), HpnicfAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunHashAlgo.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunHashAlgo.setDescription('The hash algorithm used in the IPsec Phase-1 IKE negotiations.')
hpnicfIKETunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 15), HpnicfIKEAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunAuthMethod.setDescription('The authentication method used in the IPsec Phase-1 IKE negotiations.')
hpnicfIKETunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLifeTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunLifeTime.setDescription('The negotiated LifeTime of the IPsec Phase-1 IKE Tunnel in seconds.')
hpnicfIKETunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunActiveTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunActiveTime.setDescription('The duration the IPsec Phase-1 IKE tunnel has been active in seconds.')
hpnicfIKETunRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemainTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunRemainTime.setDescription('The security association remaining time in seconds.')
hpnicfIKETunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunTotalRefreshes.setDescription('The total number of security association refreshing performed.')
hpnicfIKETunState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 20), HpnicfIKETunnelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunState.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunState.setDescription('The State of IKE Tunnel.')
hpnicfIKETunDpdIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 21), Integer32().clone(10)).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunDpdIntervalTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunDpdIntervalTime.setDescription("The time that trigger DPD request. If ipsec message is expected to be sent out and the interval time between current time and the last time receiving peer's IPsec message is bigger than this time, DPD request would be triggered.")
hpnicfIKETunDpdTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 22), Integer32().clone(5)).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunDpdTimeOut.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunDpdTimeOut.setDescription('The overtime of single DPD request. If DPD requests are refused three times, all security associations related would be deleted.')
hpnicfIKETunLocalInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 23), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLocalInetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunLocalInetAddrType.setDescription("The type of the local peer's IP address.")
hpnicfIKETunLocalInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunLocalInetAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunLocalInetAddr.setDescription('The IP address of the local peer for the IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunRemoteInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 25), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemoteInetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunRemoteInetAddrType.setDescription("The type of the remote peer's IP address.")
hpnicfIKETunRemoteInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 1, 1, 26), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunRemoteInetAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunRemoteInetAddr.setDescription('The IP address of the remote peer for the IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2), )
if mibBuilder.loadTexts: hpnicfIKETunnelStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStatTable.setDescription('The IPsec Phase-1 IKE Tunnel Statistic Table.')
hpnicfIKETunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"))
if mibBuilder.loadTexts: hpnicfIKETunnelStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStatEntry.setDescription('The entry contains the information of hpnicfIKETunnelStatTable, such as the number of packets sent and received by the IKE tunnel, etc.')
hpnicfIKETunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInOctets.setDescription('The total number of octets received by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInPkts.setDescription('The total number of packets received by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInDropPkts.setDescription('The total number of packets dropped by this IPsec Phase-1 IKE Tunnel during receiving process.')
hpnicfIKETunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges received by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunInP2ExchgRejets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInP2ExchgRejets.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInP2ExchgRejets.setDescription('The total number of IPsec Phase-2 exchanges received and rejected by this IPsec Phase-1 Tunnel.')
hpnicfIKETunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association deleting requests received by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunInP1SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInP1SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInP1SaDelRequests.setDescription('The total number of IPsec Phase-1 security association deleting requests.')
hpnicfIKETunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunInNotifys.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunInNotifys.setDescription('The total number of notifications received by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutOctets.setDescription('The total number of octets sent by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutPkts.setDescription('The total number of packets sent by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutDropPkts.setDescription('The total number of packets dropped by this IPsec Phase-1 IKE Tunnel during sending process.')
hpnicfIKETunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges sent by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges sent and rejected by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association deleting requests sent by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutP1SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutP1SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutP1SaDelRequests.setDescription('The total number of IPsec Phase-1 security association deleting requests sent by this IPsec Phase-1 IKE Tunnel.')
hpnicfIKETunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKETunOutNotifys.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunOutNotifys.setDescription('The total number of notifications sent by this IPsec Phase-1 Tunnel.')
hpnicfIKEGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3))
hpnicfIKEGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalActiveTunnels.setDescription('The number of currently active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInOctets.setDescription('The total number of octets received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInPkts.setDescription('The total number of packets received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInDropPkts.setDescription('The total number of packets which were dropped during receiving process by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges which were received and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association deleting requests received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInNotifys = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInNotifys.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInNotifys.setDescription('The total number of notifications received by all IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutOctets.setDescription('The total number of octets sent by all currently and previously active and IPsec Phase-1 IKE Tunnels. ')
hpnicfIKEGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutPkts.setDescription('The total number of packets sent by all currently and previously active and IPsec Phase-1 Tunnels.')
hpnicfIKEGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutDropPkts.setDescription('The total number of packets which were dropped during sending process by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalOutP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges which were sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalOutP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges which were sent and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalOutP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutP2SaDelRequests.setDescription('The total number of IPsec Phase-2 SA deleting requests sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalOutNotifys = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalOutNotifys.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalOutNotifys.setDescription('The total number of notifications sent by all active IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInitTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInitTunnels.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInitTunnels.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were locally initiated.')
hpnicfIKEGlobalInitTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInitTunnelFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInitTunnelFails.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were locally initiated and failed to activate.')
hpnicfIKEGlobalRespTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalRespTunnels.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalRespTunnels.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were remotely initiated.')
hpnicfIKEGlobalRespTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalRespTunnelFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalRespTunnelFails.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were remotely initiated and failed to activate.')
hpnicfIKEGlobalAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalAuthFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalAuthFails.setDescription('The total number of authentications which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalNoSaFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalNoSaFails.setDescription('The total number of non-existent Security Association in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInvalidCookieFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidCookieFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidCookieFails.setDescription('The total number of invalid cookie in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalAttrNotSuppFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalAttrNotSuppFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalAttrNotSuppFails.setDescription('The total number of attributes not supported in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalNoProposalChosenFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalNoProposalChosenFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalNoProposalChosenFails.setDescription('The total number of no proposal chosen in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalUnsportExchTypeFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalUnsportExchTypeFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalUnsportExchTypeFails.setDescription('The total number of unsupported exchange type in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInvalidIdFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidIdFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidIdFails.setDescription('The total number of invalid id Information in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInvalidProFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidProFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidProFails.setDescription('The total number of invalid protocol id in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalCertTypeUnsuppFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalCertTypeUnsuppFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalCertTypeUnsuppFails.setDescription('The total number of certificate type unsupported in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInvalidCertAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidCertAuthFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidCertAuthFails.setDescription('The total number of failures because of invalid certificate authority which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalInvalidSignFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidSignFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalInvalidSignFails.setDescription('The total number of failures because of the invalid signature which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKEGlobalCertUnavailableFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 3, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEGlobalCertUnavailableFails.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalCertUnavailableFails.setDescription('The total number of certificate unavailable in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
hpnicfIKETrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 4))
hpnicfIKEProposalNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIKEProposalNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProposalNumber.setDescription("The IKE proposal's number with a trap.")
hpnicfIKEProposalSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 4, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIKEProposalSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProposalSize.setDescription('The number of IKE proposals with a trap.')
hpnicfIKEIdInformation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 4, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIKEIdInformation.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEIdInformation.setDescription('The id information with a trap.')
hpnicfIKEProtocolNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 4, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIKEProtocolNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProtocolNum.setDescription('The protocol number with a trap')
hpnicfIKECertInformation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIKECertInformation.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKECertInformation.setDescription('The certificate information with a trap.')
hpnicfIKETrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5))
hpnicfIKETrapGlobalCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 1), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKETrapGlobalCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETrapGlobalCntl.setDescription('Indicates whether all IKE traps should be generated.')
hpnicfIKETunnelStartTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 2), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKETunnelStartTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStartTrapCntl.setDescription('Indicates whether hpnicfIKETunnelStart traps should be generated.')
hpnicfIKETunnelStopTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 3), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKETunnelStopTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStopTrapCntl.setDescription('Indicates whether hpnicfIKETunnelStop traps should be generated.')
hpnicfIKENoSaTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 4), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKENoSaTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKENoSaTrapCntl.setDescription('Indicates whether hpnicfIKENoSaFailure traps should be generated.')
hpnicfIKEEncryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 5), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEEncryFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEEncryFailureTrapCntl.setDescription('Indicates whether hpnicfIKEEncryFailFailure traps should be generated.')
hpnicfIKEDecryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 6), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEDecryFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEDecryFailureTrapCntl.setDescription('Indicates whether hpnicfIKEDecryFailFailure traps should be generated.')
hpnicfIKEInvalidProposalTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 7), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidProposalTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidProposalTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidProposalFailure traps should be generated.')
hpnicfIKEAuthFailTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 8), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEAuthFailTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEAuthFailTrapCntl.setDescription('Indicates whether hpnicfIKEAuthFailFailure traps should be generated.')
hpnicfIKEInvalidCookieTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 9), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidCookieTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidCookieTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidCookieFailure traps should be generated.')
hpnicfIKEInvalidSpiTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 10), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidSpiTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidSpiTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidSpiFailure traps should be generated.')
hpnicfIKEAttrNotSuppTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 11), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEAttrNotSuppTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEAttrNotSuppTrapCntl.setDescription('Indicates whether hpnicfIKEAttrNotSuppFailure traps should be generated.')
hpnicfIKEUnsportExchTypeTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 12), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEUnsportExchTypeTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEUnsportExchTypeTrapCntl.setDescription('Indicates whether hpnicfIKEUnsportExchTypeFailure traps should be generated.')
hpnicfIKEInvalidIdTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 13), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidIdTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidIdTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidIdFailure traps should be generated.')
hpnicfIKEInvalidProtocolTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 14), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidProtocolTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidProtocolTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidProtocolFailure traps should be generated.')
hpnicfIKECertTypeUnsuppTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 15), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKECertTypeUnsuppTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKECertTypeUnsuppTrapCntl.setDescription('Indicates whether hpnicfIKECertTypeUnsuppFailure traps should be generated.')
hpnicfIKEInvalidCertAuthTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 16), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidCertAuthTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidCertAuthTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidCertAuthFailure traps should be generated.')
hpnicfIKEInvalidSignTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 17), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEInvalidSignTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidSignTrapCntl.setDescription('Indicates whether hpnicfIKEInvalidSignFailure traps should be generated.')
hpnicfIKECertUnavailableTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 18), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKECertUnavailableTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKECertUnavailableTrapCntl.setDescription('Indicates whether hpnicfIKECertUnavailableFailure traps should be generated.')
hpnicfIKEProposalAddTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 19), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEProposalAddTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProposalAddTrapCntl.setDescription('Indicates whether hpnicfIKEProposalAdd traps should be generated.')
hpnicfIKEProposalDelTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 5, 20), HpnicfTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIKEProposalDelTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProposalDelTrapCntl.setDescription('Indicates whether hpnicfIKEProposalDel traps should be generated.')
hpnicfIKETrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6))
hpnicfIKENotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1))
hpnicfIKETunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 1)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLifeTime"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKETunnelStart.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStart.setDescription('This notification is generated when an IPsec Phase-1 IKE Tunnel is created.')
hpnicfIKETunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 2)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunActiveTime"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKETunnelStop.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStop.setDescription('This notification is generated when an IPsec Phase-1 IKE Tunnel is deleted.')
hpnicfIKENoSaFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 3)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKENoSaFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKENoSaFailure.setDescription('This notification is generated when the IKE tunnel has a non-existent SA error.')
hpnicfIKEEncryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 4)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEEncryFailFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEEncryFailFailure.setDescription('This notification is generated when the IKE tunnel has an encrypting failure.')
hpnicfIKEDecryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 5)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEDecryFailFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEDecryFailFailure.setDescription('This notification is generated when the IKE tunnel has a decrypting failure.')
hpnicfIKEInvalidProposalFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 6)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEInvalidProposalFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidProposalFailure.setDescription('This notification is generated when the IPsec phase-1 invalid proposal occurs.')
hpnicfIKEAuthFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 7)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEAuthFailFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEAuthFailFailure.setDescription('This notification is generated when the IPsec phase-1 authentication failure occurs.')
hpnicfIKEInvalidCookieFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 8)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEInvalidCookieFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidCookieFailure.setDescription('This notification is generated when the IPsec phase-1 invalid cookie failure occurs.')
hpnicfIKEAttrNotSuppFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 9)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEAttrNotSuppFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEAttrNotSuppFailure.setDescription('This notification is generated when the IPsec phase-1 unsupported attribute failure occurs.')
hpnicfIKEUnsportExchTypeFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 10)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEUnsportExchTypeFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEUnsportExchTypeFailure.setDescription('This notification is generated when the IPsec phase-1 unsupported exchange type failure occurs.')
hpnicfIKEInvalidIdFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 11)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEIdInformation"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEInvalidIdFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidIdFailure.setDescription('This notification is generated when the IPsec phase-1 invalid id failure occurs.')
hpnicfIKEInvalidProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 12)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProtocolNum"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEInvalidProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidProtocolFailure.setDescription('This notification is generated when the processing for an IPsec Phase-1 IKE Tunnel has a protocol related errors.')
hpnicfIKECertTypeUnsuppFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 13)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertInformation"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKECertTypeUnsuppFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKECertTypeUnsuppFailure.setDescription('This notification is generated when the IPsec phase-1 unsupported certificate type failure occurs.')
hpnicfIKEInvalidCertAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 14)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertInformation"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKEInvalidCertAuthFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEInvalidCertAuthFailure.setDescription('This notification is generated when the IPsec phase-1 invalid certificate authorization failure occurs.')
hpnicfIKElInvalidSignFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 15)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertInformation"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKElInvalidSignFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKElInvalidSignFailure.setDescription('This notification is generated when the IPsec phase-1 invalid signature failure occurs.')
hpnicfIKECertUnavailableFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 16)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertInformation"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunIndex"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if mibBuilder.loadTexts: hpnicfIKECertUnavailableFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKECertUnavailableFailure.setDescription('This notification is generated when the IPsec phase-1 certificate unavailable failure occurs.')
hpnicfIKEProposalAdd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 17)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalNumber"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalSize"))
if mibBuilder.loadTexts: hpnicfIKEProposalAdd.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProposalAdd.setDescription('This notification is generated when an IKE proposal is added.')
hpnicfIKEProposalDel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 6, 1, 18)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalNumber"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalSize"))
if mibBuilder.loadTexts: hpnicfIKEProposalDel.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEProposalDel.setDescription('This notification is generated when an IKE proposal is deleted.')
hpnicfIKEScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 7))
hpnicfIKEMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIKEMIBVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEMIBVersion.setDescription('Version string of this MIB.')
hpnicfIKEConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2))
hpnicfIKECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 1))
hpnicfIKEGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2))
hpnicfIKECompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 1, 1)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunnelTableGroup"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunnelStatTableGroup"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalStatsGroup"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETrapObjectGroup"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETrapCntlGroup"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETrapGroup"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEScalarObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKECompliance = hpnicfIKECompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKECompliance.setDescription(' ')
hpnicfIKETunnelTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 1)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalValue1"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalValue2"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteValue1"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteValue2"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInitiator"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunNegoMode"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunDiffHellmanGrp"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunEncryptAlgo"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunHashAlgo"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunAuthMethod"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLifeTime"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunActiveTime"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemainTime"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunTotalRefreshes"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunState"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunDpdIntervalTime"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunDpdTimeOut"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunLocalInetAddr"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddrType"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunRemoteInetAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKETunnelTableGroup = hpnicfIKETunnelTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelTableGroup.setDescription("The group contains the IKE tunnel's property information.")
hpnicfIKETunnelStatTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 2)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInOctets"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInDropPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInP2Exchgs"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInP2ExchgRejets"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInP2SaDelRequests"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInP1SaDelRequests"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunInNotifys"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutOctets"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutDropPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutP2Exchgs"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutP2ExchgRejects"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutP2SaDelRequests"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutP1SaDelRequests"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunOutNotifys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKETunnelStatTableGroup = hpnicfIKETunnelStatTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETunnelStatTableGroup.setDescription("The group contains the IKE tunnel's statistic information.")
hpnicfIKEGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 3)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalActiveTunnels"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInOctets"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInDropPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInP2Exchgs"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInP2ExchgRejects"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInP2SaDelRequests"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInNotifys"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutOctets"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutDropPkts"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutP2Exchgs"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutP2ExchgRejects"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutP2SaDelRequests"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalOutNotifys"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInitTunnels"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInitTunnelFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalRespTunnels"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalRespTunnelFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalAuthFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalNoSaFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInvalidCookieFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalAttrNotSuppFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalNoProposalChosenFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalUnsportExchTypeFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInvalidIdFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInvalidProFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalCertTypeUnsuppFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInvalidCertAuthFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalInvalidSignFails"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEGlobalCertUnavailableFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKEGlobalStatsGroup = hpnicfIKEGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEGlobalStatsGroup.setDescription("The group contains all of the IKE tunnel's statistic information.")
hpnicfIKETrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 4)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalNumber"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalSize"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEIdInformation"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProtocolNum"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertInformation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKETrapObjectGroup = hpnicfIKETrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETrapObjectGroup.setDescription('The group contains all of trap objects of IKE tunnels.')
hpnicfIKETrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 5)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETrapGlobalCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunnelStartTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunnelStopTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKENoSaTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEEncryFailureTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEDecryFailureTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidProposalTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEAuthFailTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidCookieTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidSpiTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEAttrNotSuppTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEUnsportExchTypeTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidIdTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidProtocolTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertTypeUnsuppTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidCertAuthTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidSignTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertUnavailableTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalAddTrapCntl"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalDelTrapCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKETrapCntlGroup = hpnicfIKETrapCntlGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETrapCntlGroup.setDescription('The group contains all of trap switches of IKE tunnels.')
hpnicfIKETrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 6)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunnelStart"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKETunnelStop"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKENoSaFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEEncryFailFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEDecryFailFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidProposalFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEAuthFailFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidCookieFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEAttrNotSuppFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEUnsportExchTypeFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidIdFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidProtocolFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertTypeUnsuppFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEInvalidCertAuthFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKElInvalidSignFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKECertUnavailableFailure"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalAdd"), ("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEProposalDel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKETrapGroup = hpnicfIKETrapGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKETrapGroup.setDescription('The group contains all of trap of IKE tunnels.')
hpnicfIKEScalarObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 30, 2, 2, 7)).setObjects(("HPN-ICF-IKE-MONITOR-MIB", "hpnicfIKEMIBVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfIKEScalarObjectsGroup = hpnicfIKEScalarObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfIKEScalarObjectsGroup.setDescription('The group contains all of scalar objects of the MIB.')
mibBuilder.exportSymbols("HPN-ICF-IKE-MONITOR-MIB", hpnicfIKETunEncryptAlgo=hpnicfIKETunEncryptAlgo, hpnicfIKETunOutP2ExchgRejects=hpnicfIKETunOutP2ExchgRejects, hpnicfIKETunOutDropPkts=hpnicfIKETunOutDropPkts, hpnicfIKETunLocalType=hpnicfIKETunLocalType, hpnicfIKETunOutP1SaDelRequests=hpnicfIKETunOutP1SaDelRequests, hpnicfIKETunnelStatTableGroup=hpnicfIKETunnelStatTableGroup, hpnicfIKETrapGlobalCntl=hpnicfIKETrapGlobalCntl, HpnicfTrafficType=HpnicfTrafficType, hpnicfIKETunDpdIntervalTime=hpnicfIKETunDpdIntervalTime, hpnicfIKETunInP2SaDelRequests=hpnicfIKETunInP2SaDelRequests, hpnicfIKETrapCntl=hpnicfIKETrapCntl, hpnicfIKETunnelStart=hpnicfIKETunnelStart, hpnicfIKEScalarObjectsGroup=hpnicfIKEScalarObjectsGroup, hpnicfIKETunRemoteInetAddrType=hpnicfIKETunRemoteInetAddrType, hpnicfIKEProposalDelTrapCntl=hpnicfIKEProposalDelTrapCntl, hpnicfIKETunDpdTimeOut=hpnicfIKETunDpdTimeOut, hpnicfIKETunState=hpnicfIKETunState, hpnicfIKETunTotalRefreshes=hpnicfIKETunTotalRefreshes, PYSNMP_MODULE_ID=hpnicfIKEMonitor, hpnicfIKETrapObjectGroup=hpnicfIKETrapObjectGroup, hpnicfIKEUnsportExchTypeTrapCntl=hpnicfIKEUnsportExchTypeTrapCntl, hpnicfIKETunOutOctets=hpnicfIKETunOutOctets, hpnicfIKETrapObject=hpnicfIKETrapObject, hpnicfIKEGroups=hpnicfIKEGroups, hpnicfIKECertTypeUnsuppFailure=hpnicfIKECertTypeUnsuppFailure, hpnicfIKEGlobalInvalidIdFails=hpnicfIKEGlobalInvalidIdFails, hpnicfIKEInvalidProtocolTrapCntl=hpnicfIKEInvalidProtocolTrapCntl, hpnicfIKEInvalidCertAuthTrapCntl=hpnicfIKEInvalidCertAuthTrapCntl, hpnicfIKEGlobalOutDropPkts=hpnicfIKEGlobalOutDropPkts, hpnicfIKETrapCntlGroup=hpnicfIKETrapCntlGroup, hpnicfIKEProposalDel=hpnicfIKEProposalDel, hpnicfIKEAttrNotSuppTrapCntl=hpnicfIKEAttrNotSuppTrapCntl, hpnicfIKETunIndex=hpnicfIKETunIndex, hpnicfIKEGlobalInitTunnels=hpnicfIKEGlobalInitTunnels, hpnicfIKEGlobalInvalidCertAuthFails=hpnicfIKEGlobalInvalidCertAuthFails, hpnicfIKEEncryFailFailure=hpnicfIKEEncryFailFailure, hpnicfIKEAuthFailFailure=hpnicfIKEAuthFailFailure, hpnicfIKECompliance=hpnicfIKECompliance, hpnicfIKETunRemainTime=hpnicfIKETunRemainTime, hpnicfIKETunInNotifys=hpnicfIKETunInNotifys, hpnicfIKETunRemoteType=hpnicfIKETunRemoteType, hpnicfIKEGlobalActiveTunnels=hpnicfIKEGlobalActiveTunnels, hpnicfIKEDecryFailFailure=hpnicfIKEDecryFailFailure, hpnicfIKETrapGroup=hpnicfIKETrapGroup, hpnicfIKEProposalAdd=hpnicfIKEProposalAdd, HpnicfIKETunnelState=HpnicfIKETunnelState, hpnicfIKETunNegoMode=hpnicfIKETunNegoMode, hpnicfIKEGlobalRespTunnels=hpnicfIKEGlobalRespTunnels, hpnicfIKEUnsportExchTypeFailure=hpnicfIKEUnsportExchTypeFailure, hpnicfIKEAuthFailTrapCntl=hpnicfIKEAuthFailTrapCntl, HpnicfTrapStatus=HpnicfTrapStatus, hpnicfIKECompliances=hpnicfIKECompliances, hpnicfIKETunnelTableGroup=hpnicfIKETunnelTableGroup, hpnicfIKETunInPkts=hpnicfIKETunInPkts, hpnicfIKEScalarObjects=hpnicfIKEScalarObjects, hpnicfIKETunnelStatTable=hpnicfIKETunnelStatTable, hpnicfIKETunLocalValue1=hpnicfIKETunLocalValue1, hpnicfIKEInvalidIdTrapCntl=hpnicfIKEInvalidIdTrapCntl, HpnicfIKEAuthMethod=HpnicfIKEAuthMethod, hpnicfIKECertUnavailableTrapCntl=hpnicfIKECertUnavailableTrapCntl, hpnicfIKEConformance=hpnicfIKEConformance, hpnicfIKEAttrNotSuppFailure=hpnicfIKEAttrNotSuppFailure, hpnicfIKEGlobalInvalidSignFails=hpnicfIKEGlobalInvalidSignFails, HpnicfIKENegoMode=HpnicfIKENegoMode, hpnicfIKECertUnavailableFailure=hpnicfIKECertUnavailableFailure, hpnicfIKEProposalNumber=hpnicfIKEProposalNumber, hpnicfIKETunHashAlgo=hpnicfIKETunHashAlgo, hpnicfIKETunOutNotifys=hpnicfIKETunOutNotifys, hpnicfIKEGlobalCertUnavailableFails=hpnicfIKEGlobalCertUnavailableFails, hpnicfIKETunInP1SaDelRequests=hpnicfIKETunInP1SaDelRequests, hpnicfIKEGlobalOutP2ExchgRejects=hpnicfIKEGlobalOutP2ExchgRejects, hpnicfIKETunOutP2Exchgs=hpnicfIKETunOutP2Exchgs, hpnicfIKETunLocalAddr=hpnicfIKETunLocalAddr, hpnicfIKEMonitor=hpnicfIKEMonitor, HpnicfSaProtocol=HpnicfSaProtocol, hpnicfIKEInvalidCookieFailure=hpnicfIKEInvalidCookieFailure, hpnicfIKETunRemoteValue2=hpnicfIKETunRemoteValue2, hpnicfIKETrap=hpnicfIKETrap, hpnicfIKETunInDropPkts=hpnicfIKETunInDropPkts, hpnicfIKETunDiffHellmanGrp=hpnicfIKETunDiffHellmanGrp, hpnicfIKETunnelTable=hpnicfIKETunnelTable, hpnicfIKEGlobalInP2SaDelRequests=hpnicfIKEGlobalInP2SaDelRequests, hpnicfIKEInvalidSpiTrapCntl=hpnicfIKEInvalidSpiTrapCntl, hpnicfIKEInvalidSignTrapCntl=hpnicfIKEInvalidSignTrapCntl, hpnicfIKETunnelStop=hpnicfIKETunnelStop, hpnicfIKEGlobalInvalidProFails=hpnicfIKEGlobalInvalidProFails, hpnicfIKEGlobalInDropPkts=hpnicfIKEGlobalInDropPkts, hpnicfIKETunLocalInetAddrType=hpnicfIKETunLocalInetAddrType, hpnicfIKEGlobalOutP2SaDelRequests=hpnicfIKEGlobalOutP2SaDelRequests, hpnicfIKEGlobalOutNotifys=hpnicfIKEGlobalOutNotifys, hpnicfIKEInvalidProposalFailure=hpnicfIKEInvalidProposalFailure, hpnicfIKEObjects=hpnicfIKEObjects, hpnicfIKEProposalAddTrapCntl=hpnicfIKEProposalAddTrapCntl, hpnicfIKETunRemoteAddr=hpnicfIKETunRemoteAddr, HpnicfAuthAlgo=HpnicfAuthAlgo, hpnicfIKEGlobalNoSaFails=hpnicfIKEGlobalNoSaFails, hpnicfIKETunAuthMethod=hpnicfIKETunAuthMethod, hpnicfIKETunOutPkts=hpnicfIKETunOutPkts, hpnicfIKEGlobalInP2ExchgRejects=hpnicfIKEGlobalInP2ExchgRejects, hpnicfIKEIdInformation=hpnicfIKEIdInformation, hpnicfIKEGlobalOutOctets=hpnicfIKEGlobalOutOctets, hpnicfIKEMIBVersion=hpnicfIKEMIBVersion, hpnicfIKENoSaTrapCntl=hpnicfIKENoSaTrapCntl, hpnicfIKEGlobalAuthFails=hpnicfIKEGlobalAuthFails, hpnicfIKEGlobalInNotifys=hpnicfIKEGlobalInNotifys, hpnicfIKEGlobalStatsGroup=hpnicfIKEGlobalStatsGroup, hpnicfIKEGlobalInitTunnelFails=hpnicfIKEGlobalInitTunnelFails, HpnicfIKEIDType=HpnicfIKEIDType, hpnicfIKETunnelStatEntry=hpnicfIKETunnelStatEntry, hpnicfIKElInvalidSignFailure=hpnicfIKElInvalidSignFailure, hpnicfIKEDecryFailureTrapCntl=hpnicfIKEDecryFailureTrapCntl, hpnicfIKETunActiveTime=hpnicfIKETunActiveTime, hpnicfIKECertTypeUnsuppTrapCntl=hpnicfIKECertTypeUnsuppTrapCntl, hpnicfIKETunnelStopTrapCntl=hpnicfIKETunnelStopTrapCntl, hpnicfIKEGlobalInPkts=hpnicfIKEGlobalInPkts, hpnicfIKEInvalidCookieTrapCntl=hpnicfIKEInvalidCookieTrapCntl, hpnicfIKEProposalSize=hpnicfIKEProposalSize, hpnicfIKETunRemoteInetAddr=hpnicfIKETunRemoteInetAddr, hpnicfIKEGlobalInP2Exchgs=hpnicfIKEGlobalInP2Exchgs, hpnicfIKETunInP2Exchgs=hpnicfIKETunInP2Exchgs, hpnicfIKEProtocolNum=hpnicfIKEProtocolNum, hpnicfIKEGlobalStats=hpnicfIKEGlobalStats, HpnicfDiffHellmanGrp=HpnicfDiffHellmanGrp, hpnicfIKETunOutP2SaDelRequests=hpnicfIKETunOutP2SaDelRequests, hpnicfIKEGlobalRespTunnelFails=hpnicfIKEGlobalRespTunnelFails, hpnicfIKEInvalidProtocolFailure=hpnicfIKEInvalidProtocolFailure, hpnicfIKEInvalidProposalTrapCntl=hpnicfIKEInvalidProposalTrapCntl, hpnicfIKETunnelEntry=hpnicfIKETunnelEntry, hpnicfIKECertInformation=hpnicfIKECertInformation, hpnicfIKEEncryFailureTrapCntl=hpnicfIKEEncryFailureTrapCntl, hpnicfIKEGlobalOutPkts=hpnicfIKEGlobalOutPkts, hpnicfIKEGlobalCertTypeUnsuppFails=hpnicfIKEGlobalCertTypeUnsuppFails, hpnicfIKETunnelStartTrapCntl=hpnicfIKETunnelStartTrapCntl, hpnicfIKETunInP2ExchgRejets=hpnicfIKETunInP2ExchgRejets, hpnicfIKETunLifeTime=hpnicfIKETunLifeTime, hpnicfIKETunLocalValue2=hpnicfIKETunLocalValue2, hpnicfIKEGlobalInOctets=hpnicfIKEGlobalInOctets, hpnicfIKEGlobalOutP2Exchgs=hpnicfIKEGlobalOutP2Exchgs, HpnicfEncryptAlgo=HpnicfEncryptAlgo, hpnicfIKETunRemoteValue1=hpnicfIKETunRemoteValue1, hpnicfIKEGlobalInvalidCookieFails=hpnicfIKEGlobalInvalidCookieFails, hpnicfIKENoSaFailure=hpnicfIKENoSaFailure, hpnicfIKEGlobalAttrNotSuppFails=hpnicfIKEGlobalAttrNotSuppFails, hpnicfIKENotifications=hpnicfIKENotifications, hpnicfIKETunInitiator=hpnicfIKETunInitiator, hpnicfIKEInvalidIdFailure=hpnicfIKEInvalidIdFailure, hpnicfIKEInvalidCertAuthFailure=hpnicfIKEInvalidCertAuthFailure, hpnicfIKETunInOctets=hpnicfIKETunInOctets, hpnicfIKEGlobalUnsportExchTypeFails=hpnicfIKEGlobalUnsportExchTypeFails, hpnicfIKETunLocalInetAddr=hpnicfIKETunLocalInetAddr, hpnicfIKEGlobalNoProposalChosenFails=hpnicfIKEGlobalNoProposalChosenFails)
