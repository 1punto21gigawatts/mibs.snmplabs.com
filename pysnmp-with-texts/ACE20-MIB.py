#
# PySNMP MIB module ACE20-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACE20-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-MIB", "AtmTrafficDescrParamIndex")
ifAlias, = mibBuilder.importSymbols("IF-MIB", "ifAlias")
agnLed, alarmSeverity, radAtm, agnIndication, alarmState, TimeSlots = mibBuilder.importSymbols("RAD-MIB", "agnLed", "alarmSeverity", "radAtm", "agnIndication", "alarmState", "TimeSlots")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, MibIdentifier, ModuleIdentity, Unsigned32, Integer32, IpAddress, Gauge32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32", "IpAddress", "Gauge32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "TimeTicks")
MacAddress, DisplayString, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TimeStamp", "TextualConvention")
atmSu = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4))
atmSuSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 1))
atmSuSystemSwOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemSwOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemSwOperStatus.setDescription('This value indicates if tftp-write operation (for downloading software from an external host) is allowed by the agent. ')
atmSuSystemSwSwitchVersionsCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemSwSwitchVersionsCmd.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemSwSwitchVersionsCmd.setDescription('This command is used to switch beetween software versions stored in the flash. setting this value to active will reset the agent and re-activate it with the new version ( only if new version is valid). on get-request this value will be always notActive. ')
atmSuSystemHistoryAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3), )
if mibBuilder.loadTexts: atmSuSystemHistoryAlrTable.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrTable.setDescription('buffer contain history buffer of agent alarms.')
atmSuSystemHistoryAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1), ).setIndexNames((0, "ACE20-MIB", "atmSuSystemHistoryAlrIndex"))
if mibBuilder.loadTexts: atmSuSystemHistoryAlrEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrEntry.setDescription(' Agent alarm history list entry.')
atmSuSystemHistoryAlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrIndex.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrIndex.setDescription('A unique number to identify an entry in the history alarm table.')
atmSuSystemHistoryAlrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrIfIndex.setDescription('This value indicates the port on which the alarms occured. configuration(system) alarms have port index equal to 0. ')
atmSuSystemHistoryAlrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrDescription.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrDescription.setDescription('This attribute is a text description of the alarm. The alarm descipion include alarm code and alarm text.')
atmSuSystemHistoryAlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("event", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrStatus.setDescription('This attribute indicates the status of the alarm.')
atmSuSystemHistoryAlrOccurrenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrOccurrenceTime.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrOccurrenceTime.setDescription('This value indicates the date and time of the occurrence of the event that caused this alarm. Date and time format: YYYY-MM-DD, HH:MM:SS ')
atmSuSystemHistoryAlrVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrVpi.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrVpi.setDescription('This value indicates the ATM VPI of the connection associated with the event that caused this alarm. When not applicable, value is 0')
atmSuSystemHistoryAlrVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrVci.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemHistoryAlrVci.setDescription('This value indicates the ATM VCI of the connection associated with with the event that caused this alarm. When not applicable, value is 0 ')
atmSuSystemClearHistoryAlrListCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemClearHistoryAlrListCmd.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemClearHistoryAlrListCmd.setDescription("Setting this attribute to ON, enforce a clear operation on the agent history event buffer . On reading, attribute will always get status 'off' .")
atmSuSystemCurrentAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5), )
if mibBuilder.loadTexts: atmSuSystemCurrentAlrTable.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemCurrentAlrTable.setDescription('table which contains all alarms Currently active ( status ON ) in the agent.')
atmSuSystemCurrentAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1), ).setIndexNames((0, "ACE20-MIB", "atmSuSystemCurrentAlrIndex"))
if mibBuilder.loadTexts: atmSuSystemCurrentAlrEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemCurrentAlrEntry.setDescription(' Agent alarm list entry.')
atmSuSystemCurrentAlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemCurrentAlrIndex.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemCurrentAlrIndex.setDescription('A unique number to identify an entry in the Current alarms table.')
atmSuSystemCurrentAlrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemCurrentAlrIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemCurrentAlrIfIndex.setDescription('This value indicates the port on which the alarms occured. configuration alarms have port index equal to 0. ')
atmSuSystemCurrentAlrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemCurrentAlrDescription.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemCurrentAlrDescription.setDescription('This attribute is a text description of the alarm. The alarm descipion include alarm code and alarm text.')
atmSuSystemILMICommunity = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemILMICommunity.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemILMICommunity.setDescription('Community string for ILMI requests. 10 chars.')
atmSuSystemTrapMaxManagers = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 7), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemTrapMaxManagers.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemTrapMaxManagers.setDescription('The maximum number of managers that can be registered for receiving traps and sending requests.')
atmSuSystemAalSelection = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("aal2", 2), ("aal1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemAalSelection.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemAalSelection.setDescription('Select ATM adaptation layers AAL1 or AAL2 Applicable for LA-140')
atmSuSystemCodingLaw = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("aLaw", 2), ("uLaw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemCodingLaw.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemCodingLaw.setDescription('This attribute indicates the Method/Law for decoding/encoding the voice information. aLaw (2) is the standard Law for E1 links. uLaw (3) is the standard Law for T1 links. Coding law is applicable for all the ports in the system')
atmSuSystemISDNDataLinkActivation = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("nonPermanent", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemISDNDataLinkActivation.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemISDNDataLinkActivation.setDescription('This attribute indicates data link aactivation for all ISDN ports in the system. nonPermanent (2) = non permanent data link activation permanent (3) = permanent data link activation')
atmSuSystemJitterBuffer = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemJitterBuffer.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemJitterBuffer.setDescription('The field is set in ms and sets the jitter buffer size. The jitter buffer adapts the size of the LA140 traffic to the cdv (cell delay variation) of the ATM network.')
atmSuSystemOperMode = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("ima", 2), ("miniDslam", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemOperMode.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemOperMode.setDescription('The field indicates device mode of operation: ima (2) = Inverse Multiplex ATM - ATM traffic is distributed between links in IMA group. miniDSLAM (3) => each link serves as separate ATM interface. ')
atmSuSystemDSPGain = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemDSPGain.setStatus('current')
if mibBuilder.loadTexts: atmSuSystemDSPGain.setDescription('This object indicates DSP Gain. Range of possible values is -12....12. For LA-110 suset of this range is supported. ')
atmSuPort = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2))
atmSuPortDataCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1), )
if mibBuilder.loadTexts: atmSuPortDataCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataCnfgTable.setDescription(' Data Port global configuration table. this table include parametes which are common to the physical port and not depend on whether the port interface is Frame-Relay or ATM-DXI.')
atmSuPortDataCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDataCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataCnfgEntry.setDescription('the entries at this table describes the configuration of the Data-Port.')
atmSuPortDataApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("frameRelay", 1), ("atmDxi", 2), ("bridgedEthernet", 3), ("smdsDxi", 4), ("aal1Stream", 5), ("routedEthernet", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataApplication.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataApplication.setDescription('This attribute indicates the protocol application which runs above the physical port.')
atmSuPortDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255))).clone(namedValues=NamedValues(("r64KBps", 1), ("r128KBps", 2), ("r192KBps", 3), ("r256KBps", 4), ("r320KBps", 5), ("r384KBps", 6), ("r448KBps", 7), ("r512KBps", 8), ("r576KBps", 9), ("r640KBps", 10), ("r704KBps", 11), ("r768KBps", 12), ("r832KBps", 13), ("r896KBps", 14), ("r960KBps", 15), ("r1024KBps", 16), ("r1088KBps", 17), ("r1152KBps", 18), ("r1216KBps", 19), ("r1280KBps", 20), ("r1344KBps", 21), ("r1408KBps", 22), ("r1472KBps", 23), ("r1536KBps", 24), ("r1544network", 25), ("r1600KBps", 26), ("r1664KBps", 27), ("r1728KBps", 28), ("r1792KBps", 29), ("r1856KBps", 30), ("r1920KBps", 31), ("r1984KBps", 32), ("r2048KBps", 33), ("r2048network", 34), ("r8192KBps", 35), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataRate.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataRate.setDescription('This attribute indicates the operation rate of the port. AmcdT1 / Ace-20T allowes rates up to 1536KBps ( options 1-12 ), while AmcdE1 / Ace-20E allowes all options. ')
atmSuPortDataDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("obeyRtsDcdOn", 3), ("obeyRtsDcdOff", 4), ("ignoreRtsDcdOn", 5), ("ignoreRtsDcdOff", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataDCD.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataDCD.setDescription("This attribute define behavior of control signals DCD and RTS These signals may obey or ignore signal from remote device. The terms 'I signal' and 'C signal' are used when physical data interface is X.21 ; RTS = C signal, DCD = I signal")
atmSuPortDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("nrzi", 1), ("nrz", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataMode.setStatus('deprecated')
if mibBuilder.loadTexts: atmSuPortDataMode.setDescription('This attribute indicates the port mode of sampling data physical. ')
atmSuPortDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("cRC16", 1), ("cRC32", 2), ("noCRC", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataCRC.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataCRC.setDescription('This attribute indicates the type of CRC checking on receiving/transmiting frames. ')
atmSuPortDataClock = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dce", 1), ("edce", 2), ("dte", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataClock.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataClock.setDescription('This attribute indicates the clock using for synchronization for the data port. ')
atmSuPortDataMaxNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataMaxNoOfConns.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataMaxNoOfConns.setDescription(' this object indicates the maximum number of cross-connect connections allowed beetween the ATM port and the Data Port identified by IfIndex. ')
atmSuPortDataConfNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataConfNoOfConns.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataConfNoOfConns.setDescription(' this object indicates the configured number of cross-connect connections exist beetween the ATM port and the Data Port identified by IfIndex. ')
atmSuPortDataIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataIdleCode.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataIdleCode.setDescription(' This attribute is applicable only for application aal1Stream. It indicates the value to be transmitted whenever the port is idle. ')
atmSuPortDataInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("x21", 2), ("v35", 3), ("v36", 4), ("rs530", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataInterfaceType.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataInterfaceType.setDescription('Configureable physical layer interface type')
atmSuPortDataClkPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("inverted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataClkPolarity.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataClkPolarity.setDescription('This object indicates the clock polarity. For LA-110/140 this object will be applicable only for X.21/V.35/data port ')
atmSuPortDataCtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataCtsStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataCtsStatus.setDescription('CTS status - the signal state received from ATM network (for the local DTE usage). LA110 receiving RTS down from remote DTE device via ATM network, will change CTS signal state to down (off) toward local DTE device')
atmSuPortDataRtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataRtsStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDataRtsStatus.setDescription("RTS status - the signal state received from local DTE (to be forwarded to ATM network). LA110 receiving RTS down from the local DTE device will transmit all '1' to ATM (in order to carry the signaling to remote LA110), and forward it (RTS-down) to far end through ATM cell (pointer field).")
atmSuPortDs1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2))
atmSuPortDs1CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1), )
if mibBuilder.loadTexts: atmSuPortDs1CnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgTable.setDescription(' This table include expansion configuration to the DS1 physical port.')
atmSuPortDs1CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDs1CnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgEntry.setDescription('the entries at this table describes the configuration of the agent physical.')
atmSuPortDs1CnfgRxSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("s12dB", 1), ("s30dB", 2), ("s36dB", 3), ("s15dB", 4), ("s43dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgRxSensitivity.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgRxSensitivity.setDescription('This attribute is the rx line sensetivity parameter used only for T1/CSU and E1/LTU interfaces.')
atmSuPortDs1CnfgLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("txGain0db", 1), ("txGain7dot5db", 2), ("txGain15db", 3), ("txGain22dot5db", 4), ("len0p133ft", 5), ("len133p266ft", 6), ("len266p399ft", 7), ("len399p533ft", 8), ("len533p655ft", 9), ("unbalanceE1", 10), ("balanceE1", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgLBO.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgLBO.setDescription('This attribute is the line-Build-Out indicates sensitivity of the DS1 interface. The user can define if the agent will be CSU or DSU (for T1 only) by choosing the right option. On E1 interface this is done by hardware, so this parameter cannot be written. ')
atmSuPortDs1CnfgRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ccittE1", 1), ("restoreT1secFast", 2), ("restoreT10sec62411", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgRestoreTime.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgRestoreTime.setDescription('Determines the time passing from the disappearance of the loss of synchronization condition (red alarm) to the restoration of normal service. The options 1secFast(2) and 10sec62411(3) for E1 interfaces are proprietary implementation of the T1 standard to the E1 interface.')
atmSuPortDs1CnfgInbandMng = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6))).clone(namedValues=NamedValues(("off", 2), ("dedicatedTs", 4), ("dedicatedFr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgInbandMng.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgInbandMng.setDescription('A unique number to identify type of inband management over the link. For LA-104 and IMXi4, only one port may be used for inband management ')
atmSuPortDs1CnfgDedicatedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgDedicatedTs.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CnfgDedicatedTs.setDescription('A unique number to identify Dedicated Time Slot for inband management of the T1/E1 port. It is applicable only when atmSuPortDs1CnfgInbandMng selected is not off. 1..24 - Dedicated TS of T1 1..31 - Dedicated TS of E1 255 - notApplicable (for agents that do not support this feature) Other values are invalid.')
atmSuPortDs1CbrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2), )
if mibBuilder.loadTexts: atmSuPortDs1CbrCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrCnfgTable.setDescription(' This table include expansion configuration to the DS1 physical port.')
atmSuPortDs1CbrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDs1CbrCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrCnfgEntry.setDescription('the entries at this table describes the configuration of the agent physical.')
atmSuPortDs1CbrIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CbrIdleCode.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrIdleCode.setDescription('An Idle code which sent on unused time-slots at CBR port .')
atmSuPortDs1CbrRxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 2), TimeSlots()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrRxTimeSlots.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrRxTimeSlots.setDescription("This value indicates the time-slots used by the port for receiving. It uses 32 bits ( in 4 bytes octet string ) for E1 and low 24 bits for T1. each bit represents a time slot for receiving : time-slot 0 = bit 0 (LSB - most right bit in last byte), ... ... time-slot 31 = bit 31 (MSB - most left bit in first byte ). value '0' indicate unused time-slot and value '1' indicates used time-slot. note : time-slots '0' and '16' are used for signalling in E1 interface. ")
atmSuPortDs1CbrTxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 3), TimeSlots()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrTxTimeSlots.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrTxTimeSlots.setDescription("This value indicates the time-slots used by the port for transmiting. It uses 32 bits for E1 and low 24 bits for T1. each bit represents a time slot for transmiting : time-slot 0 = bit 0 (LSB - most right bit in last byte), ... ... time-slot 31 = bit 31 (MSB - most left bit in first byte ). value '0' indicate unused time-slot and value '1' indicates used time-slot. note : time-slots '0' and '16' are used for signalling in E1 interface. ")
atmSuPortDs1CbrMaxNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrMaxNoOfConns.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrMaxNoOfConns.setDescription(' this object indicates the maximum number of cross-connect connections allowed beetween the ATM port and the CBR Port identified by IfIndex. ')
atmSuPortDs1CbrConfNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrConfNoOfConns.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrConfNoOfConns.setDescription(' this object indicates the configured number of cross-connect connections exist beetween the ATM port and the CBR Port identified by IfIndex. ')
atmSuPortDs1CbrSignallingSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("msec100", 1), ("msec200", 2), ("msec500", 3), ("msec1000", 4), ("msec1500", 5), ("msec2000", 6))).clone('msec500')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CbrSignallingSampleTime.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDs1CbrSignallingSampleTime.setDescription(' determines how often the signalling of the DBCES connections are sampled and thier activity determined. ')
atmSuPortAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3))
atmSuPortAtmCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1), )
if mibBuilder.loadTexts: atmSuPortAtmCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmCnfgTable.setDescription('This table contains global configuration to the ATM port.')
atmSuPortAtmCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortAtmCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmCnfgEntry.setDescription('This object contains information about agent ATM configuration.')
atmSuPortAtmCnfgIdleCellCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clp0", 1), ("clp1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgIdleCellCLP.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmCnfgIdleCellCLP.setDescription('Determines the clp bit value for transmition in empty time slots.')
atmSuPortAtmCnfgScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgScramble.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmCnfgScramble.setDescription('Determined by the standards if the cell will be scrambled or not.')
atmSuPortAtmSNMPVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPVpi.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmSNMPVpi.setDescription('The Vcc Vpi for SNMP requests.')
atmSuPortAtmSNMPVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPVci.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmSNMPVci.setDescription('The Vcc Vci for SNMP requests.')
atmSuPortAtmSNMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmSNMPStatus.setDescription('value indicates if the SNMP Vcc is available for management.')
atmSuPortAtmILMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmILMIStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmILMIStatus.setDescription('Value indicates if agent should respond to ILMI requests from the Atm switch or forward it. note: when using Atm to Frame-Relay configuration this value should be active to support ILMI. when using Atm-AtmDxi configuration the ILMI requests should be moved forward to the DTE or may be answered by the DCE. ')
atmSuPortAtmSNMPIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPIp.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmSNMPIp.setDescription('The interface IP address for SNMP requests.')
atmSuPortAtmCnfgCDVOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgCDVOptimization.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmCnfgCDVOptimization.setDescription('value indicates if optimization of CDV (Cell Delay Varation) is enbabled.')
atmSuPortAtmCnfgShapingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("sw", 2), ("hwNcits1", 3), ("hwNcits2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgShapingMode.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmCnfgShapingMode.setDescription('ATM Shaping mode. Three possible values: SW Shaping. HW Shaping - APC with NCITS = 1. HW Shaping - APC with NCITS = 2 The difference between the two hardware modes is in the connection cell granularity and maximum bandwidth (BW): * For NCITS=1, the granularity is of one cell and the max. BW is the uplink BW, * For NCITS=2, the granularity is of every two cells and the max. BW is half of the uplink BW.')
atmSuPortAtmSNMPTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmSNMPTrafficDescrIndex.setDescription('The value of this object identifies the row in the atmTrafficDescrParamTable which applies to the transmit direction of the VCL.')
atmSuPortAtmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2), )
if mibBuilder.loadTexts: atmSuPortAtmIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmIfStatsTable.setDescription('The table contains additional statistics information about the ATM interface.')
atmSuPortAtmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortAtmIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmIfStatsEntry.setDescription('An entry in the ATM Interface statistics table.')
atmSuPortAtmRxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxClp0Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmRxClp0Cells.setDescription('The number of cells received with correct HECs and CLP=0 and not misrouted')
atmSuPortAtmRxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxClp1Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmRxClp1Cells.setDescription("The number of cells received with correct HEC's and CLP=1 and not misrouted.")
atmSuPortAtmRxEfciSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxEfciSetCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmRxEfciSetCells.setDescription('The number of cells received with EFCI bit set by the Agent')
atmSuPortAtmRxOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxOamCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmRxOamCells.setDescription('The number of OAM cells received with correct HECs.')
atmSuPortAtmTxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxClp0Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmTxClp0Cells.setDescription('The number of cells transmitted with CLP=0.')
atmSuPortAtmTxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxClp1Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmTxClp1Cells.setDescription('The number of cells transmitted with CLP=1.')
atmSuPortAtmTxEfciSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxEfciSetCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmTxEfciSetCells.setDescription('The number of cells transmitted with EFCI bit set by the Agent')
atmSuPortAtmTxOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxOamCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmTxOamCells.setDescription('The number of transmitted OAM cells.')
atmSuPortAtmVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3), )
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTable.setDescription('The table contains additional information about the ATM Vcl end points.')
atmSuPortAtmVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"), (0, "ACE20-MIB", "atmVclVpi"), (0, "ACE20-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmSuPortAtmVclStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsEntry.setDescription('An entry in the ATM Vcl statistics table.')
atmSuPortAtmVclStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxCells.setDescription("The total number of cells received with correct HEC's.")
atmSuPortAtmVclStatsRxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxClp0Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxClp0Cells.setDescription("The number of cells received with correct HEC's and CLP=0.")
atmSuPortAtmVclStatsRxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxClp1Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxClp1Cells.setDescription("The number of cells received with correct HEC's and CLP=1.")
atmSuPortAtmVclStatsRxDiscardsCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxDiscardsCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxDiscardsCells.setDescription('The number of cells, in ingress direction, discarded due to policing violation.')
atmSuPortAtmVclStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxCells.setDescription('The total number of cells transmitted.')
atmSuPortAtmVclStatsTxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxClp0Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxClp0Cells.setDescription('The number of cells transmitted with CLP=0.')
atmSuPortAtmVclStatsTxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxClp1Cells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxClp1Cells.setDescription('The number of cells transmitted with CLP=1.')
atmSuPortAtmVclStatsRxTotalAISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalAISCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalAISCells.setDescription('Total number of AIS cells received on the VC.')
atmSuPortAtmVclStatsRxTotalCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalCCCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalCCCells.setDescription('Total number of Continuity Check cells that were received on the VC.')
atmSuPortAtmVclStatsTotalSuccLoopbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalSuccLoopbacks.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalSuccLoopbacks.setDescription('Total number of loopbacks that were requested by the ACE20 and for which there was a response (not supported).')
atmSuPortAtmVclStatsTotalFailLoopbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalFailLoopbacks.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalFailLoopbacks.setDescription('Total number of loopbacks that were requested by the ACE20 and for which there was no response (not supported).')
atmSuPortAtmVclStatsRxTotalRDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalRDICells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalRDICells.setDescription('Total number of RDI cells received on a VC.')
atmSuPortAtmVclStatsTotalLOCSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalLOCSeconds.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalLOCSeconds.setDescription("Total number of seconds during which there was loss of continuity on the VC - no data and no continuity check cells were received on the VC whilst it was in 'sink' continuity check mode.")
atmSuPortAtmVclStatsRxTotalLoopbackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalLoopbackRequests.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalLoopbackRequests.setDescription('Total number of loopback requests received by the ACE20 on a VC.')
atmSuPortAtmVclStatsTxTotalAISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalAISCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalAISCells.setDescription('Total number of AIS cells that were transmitted on a VC.')
atmSuPortAtmVclStatsTxTotalCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalCCCells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalCCCells.setDescription("Total number of continuity check cells that were transmitted on a VC (when there is no data cells and the connection is in 'source' continuity check mode).")
atmSuPortAtmVclStatsTxTotalRDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalRDICells.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalRDICells.setDescription('Total number of RDI cells transmitted on a VC.')
atmSuPortAtmVclStatsTxTotalLoopbackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalLoopbackResponses.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalLoopbackResponses.setDescription('Total number of loopback responses that were transmitted as a result of loopback requests received.')
atmSuPortAtmVclStatsTxTotalLoopbackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalLoopbackRequests.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalLoopbackRequests.setDescription('Total number of loopback requests that were transmitted by the ACE20 on a VC.')
atmSuPortAtmVclStatsRxTotalLoopbackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalLoopbackResponses.setStatus('current')
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalLoopbackResponses.setDescription('Total number of loopback responses that were received as a result of loopback transmitted by the ACE20.')
atmSuPortFr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4))
atmSuPortFrLportTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1), )
if mibBuilder.loadTexts: atmSuPortFrLportTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportTable.setDescription('The table Contains configuration parameters of the Frame-Relay port and has expansion to frLportTable in RFC1604 MIB.')
atmSuPortFrLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortFrLportEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportEntry.setDescription('An entry in the Frame Relay Logical Port Information table.')
atmSuPortFrLportSNMPDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportSNMPDlci.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportSNMPDlci.setDescription('The SNMP Dlci of this entry.')
atmSuPortFrLportSNMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportSNMPStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportSNMPStatus.setDescription('value indicates if SNMP over FR is available for management.')
atmSuPortFrLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ccittQ933A", 2), ("ansiT1617D", 3), ("lmi", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportVCSigProtocol.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportVCSigProtocol.setDescription('The value of this object identifies the Local In-Channel Signaling Protocol that is used for this frame relay UNI/NNI logical port.')
atmSuPortFrLportVCSigProcedure = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("u2nnet", 2), ("u2nuser", 3), ("bidirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportVCSigProcedure.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportVCSigProcedure.setDescription("The value of this object identifies the Local In-Channel Signaling Procedure that is used for this UNI/NNI logical port. The UNI/NNI logical port can be performing user-to-network network-side and user-to-network user-side procedures or bidirectional procedures. this parameter gets value 'notApplicable when the VCSigProtocol is none")
atmSuPortFrLportCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportCLLM.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportCLLM.setDescription(' indicate if the configuration is supporting CLLM ( Consolidated Link Layer Management ) .')
atmSuPortFrLportSNMPIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportSNMPIp.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrLportSNMPIp.setDescription('The interface IP address of this entry.')
atmSuPortFrPvcEndptTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2), )
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTable.setDescription('The table contains additional information about the Frame Relay end point.')
atmSuPortFrPvcEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"), (0, "ACE20-MIB", "frPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: atmSuPortFrPvcEndptEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptEntry.setDescription('An entry for FR end-point statistics ( expansion to RFC 1604 ).')
atmSuPortFrPvcEndptTxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxFECNs.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxFECNs.setDescription('number of frames transmited with FECN ( Forward Explicit Congestion Notification ).')
atmSuPortFrPvcEndptTxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxBECNs.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxBECNs.setDescription('number of frames transmited with BECN ( Backward Explicit Congestion Notification ).')
atmSuPortFrPvcEndptTxDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxDEs.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxDEs.setDescription('number of frames transmited with the DE ( Discarded Eligible ) bit set.')
atmSuPortFrPvcEndptRxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptRxFECNs.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptRxFECNs.setDescription('number of frames received with FECN ( Forward Explicit Congestion Notification ).')
atmSuPortFrPvcEndptRxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptRxBECNs.setStatus('current')
if mibBuilder.loadTexts: atmSuPortFrPvcEndptRxBECNs.setDescription('number of frames received with BECN ( Backward Explicit Congestion Notification ).')
atmSuPortDxi = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5))
atmSuPortDxiConfTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1), )
if mibBuilder.loadTexts: atmSuPortDxiConfTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDxiConfTable.setDescription('This table contains ATM-DXI managment address (DFA) ending at the local agent. only LMI managment supported for ATM-DXI.')
atmSuPortDxiConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDxiConfEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDxiConfEntry.setDescription('This object contains information about agent Dxi interface.')
atmSuPortDxiPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDxiPortMode.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDxiPortMode.setDescription('This object identifies the dxi mode being used by the atm dxi port.')
atmSuPortDxiSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDxiSigProtocol.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDxiSigProtocol.setDescription('This value indicates if we using LMI signalling protocol or not using any signalling .')
atmSuPortDxiSigDfa = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDxiSigDfa.setStatus('current')
if mibBuilder.loadTexts: atmSuPortDxiSigDfa.setDescription('The Signalling Dfa address . the default LMI Dfa defined for LMI by the AtmForum is 0.')
atmSuPortCmdTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6), )
if mibBuilder.loadTexts: atmSuPortCmdTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortCmdTable.setDescription("General commands to be done on agent's ports.")
atmSuPortCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortCmdEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortCmdEntry.setDescription('This object contains entry information.')
atmSuResetPortStatsCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuResetPortStatsCmd.setStatus('current')
if mibBuilder.loadTexts: atmSuResetPortStatsCmd.setDescription(' reset statistics of port.')
atmSuResetConnsStatsCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuResetConnsStatsCmd.setStatus('current')
if mibBuilder.loadTexts: atmSuResetConnsStatsCmd.setDescription(" reset statistics of all cross connections attached to this port. set-request is allowed only on the DATA Ports . for get-request value is always 'off' ")
atmSuPortEther = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7))
atmSuPortEtherTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1), )
if mibBuilder.loadTexts: atmSuPortEtherTable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherTable.setDescription('The table Contains configuration parameters of the Ethernet port.')
atmSuPortEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortEtherEntry.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherEntry.setDescription('An entry in the Ethernet Port Information table.')
atmSuPortEtherIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherIP.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherIP.setDescription('The interface IP address for SNMP requests.')
atmSuPortEtherMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherMask.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherMask.setDescription('The interface IP address mask for SNMP requests.')
atmSuPortEtherDefaultGateWayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherDefaultGateWayIp.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherDefaultGateWayIp.setDescription('The Ethernet bridge default gateway IP address.')
atmSuPortEtherDefaultCrossConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherDefaultCrossConnectId.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherDefaultCrossConnectId.setDescription('Default Cross Connect Id. ')
atmSuPortEtherDefaultGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherDefaultGatewayStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherDefaultGatewayStatus.setDescription('Default Gateway Status.')
atmSuPortEtherSNMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherSNMPStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherSNMPStatus.setDescription('The value indicates if the SNMP of Ethernet bridge interface is available for management.')
atmSuPortEtherFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherFragmentation.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherFragmentation.setDescription("Fragmentation. When application is not router value must be 'notApplicable'.")
atmSuPortEtherRIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1And2", 3), ("none", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherRIPMode.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherRIPMode.setDescription("RIP Mode. When application is not router value must be 'notApplicable'.")
atmSuPortEtherBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("accessOnly", 1), ("accessAndSwitching", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherBridgingMode.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherBridgingMode.setDescription("Bridging mode can be one of the following: ATM <> Ethernet - Bridging is between the Ethernet port and the ATM port (there is no bridging between VCs). ATM <> Ethernet + ATM - Bridging is done both between the Ethernet port and the ATM port and also between VCs. When application is router value must be 'notApplicable'.")
atmSuPortEtherARPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherARPTimeout.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherARPTimeout.setDescription('ARP Timeout. When application is not router or when this object is not applicable, value must be 0.')
atmSuPortEtherAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherAgingTime.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherAgingTime.setDescription('The timeout period in seconds for aging out stored information. valid values are 10...1000000. The value of (0) has the special meaning - not applicable. ')
atmSuPortEtherPppOEEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherPppOEEnable.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherPppOEEnable.setDescription('Enable or Disable transparent PPP over ethernet bridge. When PPP over Ethernet is enabled, non PPP traffic is blocked by the bridge.')
atmSuPortEtherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherStatus.setStatus('current')
if mibBuilder.loadTexts: atmSuPortEtherStatus.setDescription('This object allows user to add/remove entries to/from this table. It will be supported only by certain devices. destroy - may not be possible for certain interfaces.')
atmSuCrossConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3))
atmSuCrossConnectAtmFr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1))
atmSuCrossConnectAtmFrDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 1))
atmFrCrossConnectNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 1, 1))
atmFrCrossConnectService = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 1, 2))
atmFrDescrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2), )
if mibBuilder.loadTexts: atmFrDescrTable.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrTable.setDescription('This table contains information on ATM to FR Connection descriptor types, and their associated parameters.')
atmFrDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmFrDescrIndex"))
if mibBuilder.loadTexts: atmFrDescrEntry.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrEntry.setDescription('This list contains ATM to FR Connection descriptor type, and its associated parameters.')
atmFrDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrDescrIndex.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrIndex.setDescription('This object is used to identify the row index of the ATM to FR connection descriptor table.')
atmFrDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrType.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrType.setDescription('The value of this object identifies the type of the ATM to FR Connection descriptor. The type may indicate Network connection descriptor or a Service connection descriptor with one or more parameters. These parameters are specified as a parameter vector, in the corresponding instances of the objects: atmFrDescrClp2De atmFrDescrDe2Clp atmFrDescrFecn2Efci atmFrDescrMappingMode.')
atmFrDescrClp2De = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("convSscs", 1), ("conv", 2), ("always0", 3), ("always1", 4))).clone('conv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrClp2De.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrClp2De.setDescription('The first parameter of the ATM to FR Connection descriptor used according to the value of atmFrDescrType.')
atmFrDescrDe2Clp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("conv", 1), ("always0", 2), ("always1", 3))).clone('conv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrDe2Clp.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrDe2Clp.setDescription('The second parameter of the ATM to FR Connection descriptor used according to the value of atmFrDescrType.')
atmFrDescrFecn2Efci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conv", 1), ("always0", 2))).clone('conv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrFecn2Efci.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrFecn2Efci.setDescription('The third parameter of the ATM to FR Connection descriptor used according to the value of atmFrDescrType.')
atmFrDescrMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("translation", 2))).clone('translation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrMappingMode.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrMappingMode.setDescription('The fourth parameter of the ATM to FR Connection descriptor used according to the value of atmFrDescrType.')
atmFrDescrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 7), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmFrDescrRowStatus.setDescription('This object is used to create, modify or delete a row in this table.')
atmSuCrossConnectAtmFrIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuCrossConnectAtmFrIndexNext.setStatus('current')
if mibBuilder.loadTexts: atmSuCrossConnectAtmFrIndexNext.setDescription('This object contains an appropriate value to be used for atmFrCnfgCrossConnectIndex when creating entries in the atmFrCnfgTable. The value 0 indicates that no unassigned entries are available. To obtain the atmFrCnfgCrossConnectIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the mandatory value of this object. After each retrieval, the agent should modify the value to the next unassigned index.')
atmFrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4), )
if mibBuilder.loadTexts: atmFrCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgTable.setDescription('This table defines virtual connections between ATM and Frame Relay endpoints.')
atmFrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1), ).setIndexNames((0, "ACE20-MIB", "atmFrCnfgCrossConnectIndex"), (0, "ACE20-MIB", "atmFrCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmFrCnfgAtmVpi"), (0, "ACE20-MIB", "atmFrCnfgAtmVci"), (0, "ACE20-MIB", "atmFrCnfgFrIfIndex"), (0, "ACE20-MIB", "atmFrCnfgDlci"))
if mibBuilder.loadTexts: atmFrCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgEntry.setDescription('An entry defines virtual connection between ATM and Frame Relay endpoint.')
atmFrCnfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgCrossConnectIndex.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgCrossConnectIndex.setDescription('A unique value to identify this cross-connect.')
atmFrCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgAtmIfIndex.setDescription('The ifIndex associated to the ATM interface.')
atmFrCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgAtmVpi.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgAtmVpi.setDescription('The Vpi number of the ATM end point.')
atmFrCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgAtmVci.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgAtmVci.setDescription('The Vci number of the ATM end point.')
atmFrCnfgFrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgFrIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgFrIfIndex.setDescription('The ifIndex associated to the Frame Relay interface.')
atmFrCnfgDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgDlci.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgDlci.setDescription('The DLCI number of the FR end point.')
atmFrCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgAdminStatus.setDescription('This object indicates the connection status requested by the user.')
atmFrCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgOperStatus.setDescription('This object indicates the Operational status of the connection.')
atmFrCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgLastChange.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgLastChange.setDescription('The value of sysUpTime at the time the ATM to FR connection entered its mandatory operational state. If the mandatory state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
atmFrCnfgMappingDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgMappingDescrIndex.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgMappingDescrIndex.setDescription('The value of this object identifies the row in the atmFrDescrTable.')
atmFrCnfgSscsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgSscsDlci.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgSscsDlci.setDescription("The DLCI number given to the SSCS Sub-layer for network interworking only ( the default value is 'atmFrCnfgDlci' ). for Service Interworking do not implement this variable.")
atmFrCnfgTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 12), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgTrafficDescrIndex.setDescription('The value of this object identifies the row in the atmTrafficDescrParamTable which applies to the transmit direction of the VCL. note :setting this value is allowed only to point2point connections. for many2one connections is being set by the atmFrCrossConnectMany2OneRootsTable and this field is equal to this setting.')
atmFrCnfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgPriority.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgPriority.setDescription('This object define the priority of connection. The first parameter affects the transmition of cells in Conjested network is the bitRate( Cbr has the highest priority and then Vbr,Ubr ) In connections with the same bitRate this object will define the priority.')
atmFrCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
atmFrCnfgAllocatedBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 217)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgAllocatedBuffers.setStatus('current')
if mibBuilder.loadTexts: atmFrCnfgAllocatedBuffers.setDescription("This object enables user to limit the amount of buffers used by the connection. The limit set by this object will give the effect of a virtual buffer pool per connection. The user can allocate between 10 to 217 buffers to every connection. By default the limit is 50 buffers. Sum of limits allocated to all connections must not exceed the total amount of available buffers. Whenever a connection exceeds it's buffer limit due to congestion or burst - traffic is discarded")
atmFrMaxMany2OneConnsPerVcc = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrMaxMany2OneConnsPerVcc.setStatus('current')
if mibBuilder.loadTexts: atmFrMaxMany2OneConnsPerVcc.setDescription('The Maximum Number of many2one cross-connect connections allowed per Vcc .')
atmSuCrossConnectAtmDxi = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2))
atmSuCrossConnectAtmDxiIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuCrossConnectAtmDxiIndexNext.setStatus('current')
if mibBuilder.loadTexts: atmSuCrossConnectAtmDxiIndexNext.setDescription('This object contains an appropriate value to be used for atmDxiCnfgCrossConnectIndex when creating entries in the atmDxiCnfgTable. The value 0 indicates that no unassigned entries are available. To obtain the atmDxiCnfgCrossConnectIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the mandatory value of this object. After each retrieval, the agent should modify the value to the next unassigned index.')
atmDxiCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2), )
if mibBuilder.loadTexts: atmDxiCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgTable.setDescription('This table defines virtual connections between ATM and ATM-DXI endpoints.')
atmDxiCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmDxiCnfgCrossConnectIndex"), (0, "ACE20-MIB", "atmDxiCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmDxiCnfgAtmVpi"), (0, "ACE20-MIB", "atmDxiCnfgAtmVci"), (0, "ACE20-MIB", "atmDxiCnfgDxiIfIndex"), (0, "ACE20-MIB", "atmDxiCnfgDfa"))
if mibBuilder.loadTexts: atmDxiCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgEntry.setDescription('An entry defines virtual connection between ATM and ATM-DXI endpoint.')
atmDxiCnfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgCrossConnectIndex.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgCrossConnectIndex.setDescription('A unique value to identify this cross-connect.')
atmDxiCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgAtmIfIndex.setDescription('The ifIndex associated to the ATM interface.')
atmDxiCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgAtmVpi.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgAtmVpi.setDescription('The Vpi number of the ATM end point.')
atmDxiCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgAtmVci.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgAtmVci.setDescription('The Vci number of the ATM end point.')
atmDxiCnfgDxiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgDxiIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgDxiIfIndex.setDescription('The ifIndex associated to the atm-dxi interface.')
atmDxiCnfgDfa = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgDfa.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgDfa.setDescription('The DFA number of the DXI end point.')
atmDxiCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgAdminStatus.setDescription('The requested state of the ATM to DXI connection.')
atmDxiCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgOperStatus.setDescription('The real operational status of the ATM to DXI connection.')
atmDxiCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgLastChange.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgLastChange.setDescription('The value of sysUpTime at the time the ATM to DXI connection entered its mandatory operational state. If the mandatory state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value. Same value define both direction ( Atm2Dxi and Dxi2Atm ).')
atmDxiCnfgTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgTrafficDescrIndex.setDescription('The value of this object identifies the row in the atmTrafficDescrParamTable which applies to the transmit direction of the VCL.')
atmDxiCnfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgPriority.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgPriority.setDescription('This object define the priority of connection. The first parameter affects the transmition of cells in Conjested network is the bitRate( Cbr has the highest priority and then Vbr,Ubr ) In connections with the same bitRate this object will define the priority.')
atmDxiCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmDxiCnfgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
atmSuAtmCbr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3))
atmCbrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1), )
if mibBuilder.loadTexts: atmCbrCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgTable.setDescription('This table defines AAL1 virtual connections (not CES) between ATM port and DS1-CBR port.')
atmCbrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1), ).setIndexNames((0, "ACE20-MIB", "atmCbrCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmCbrCnfgAtmVpi"), (0, "ACE20-MIB", "atmCbrCnfgAtmVci"), (0, "ACE20-MIB", "atmCbrCnfgCbrIfIndex"))
if mibBuilder.loadTexts: atmCbrCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgEntry.setDescription('An entry defines virtual connection between ATM port and DS1-CBR port.')
atmCbrCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgAtmIfIndex.setDescription('The ifIndex associated to the ATM interface.')
atmCbrCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgAtmVpi.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgAtmVpi.setDescription('The Vpi number of the ATM end point.')
atmCbrCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgAtmVci.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgAtmVci.setDescription('The Vci number of the ATM end point.')
atmCbrCnfgCbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgCbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgCbrIfIndex.setDescription('The ifIndex associated to the logical interface of DS0s bundle or to ifIndex of one of the data ports.')
atmCbrCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgAdminStatus.setDescription('The requested status of the connection.')
atmCbrCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgOperStatus.setDescription('The real operational status of the connection.')
atmCbrCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgLastChange.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgLastChange.setDescription('The value of sysUpTime at the time the ATM to CBR connection entered its mandatory operational state. If the mandatory state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value. Same value define both direction ( Atm2Cbr and Cbr2Atm ).')
atmCbrCnfgAAL1Signalling = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgAAL1Signalling.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgAAL1Signalling.setDescription("Not in use. Must be always 'off'.")
atmCbrCnfgRxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 9), TimeSlots()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgRxTimeSlots.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgRxTimeSlots.setDescription("This value indicates the time-slots used by this connection for receiving. It uses 32 bits for E1 and low 24 bits for T1. each bit represents a time slot for receiving : time-slot 0 = bit 0 (LSB - most right bit in last byte), ... ... time-slot 31 = bit 31 (MSB - most left bit in first byte ). value '0' indicate unused time-slot and value '1' indicates used time-slot. On set-request the user indicates the time-slot he needs for requested ATM-Vcc by putting '1' to the right bits. note : time-slots '0' and '16' are used for signalling in E1 interface. Currently not in use. Must be '0'.")
atmCbrCnfgRxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 10), Integer32().clone(47)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgRxBytesPerCell.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgRxBytesPerCell.setDescription('number of bytes to be receive in order per cell to low the delay. ')
atmCbrCnfgTxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 11), TimeSlots()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgTxTimeSlots.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgTxTimeSlots.setDescription("This value indicates the time-slots used by this connection for receiving. It uses 32 bits for E1 and low 24 bits for T1. each bit represents a time slot for receiving : time-slot 0 = bit 0 (LSB - most right bit in last byte), ... ... time-slot 31 = bit 31 (MSB - most left bit in first byte ). value '0' indicate unused time-slot and value '1' indicates used time-slot. On set-request the user indicates the time-slot he needs for requested ATM-Vcc by putting '1' to the right bits. note : time-slots '0' and '16' are used for signalling in E1 interface. Currently not in use. Must be '0'.")
atmCbrCnfgTxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 12), Integer32().clone(47)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgTxBytesPerCell.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgTxBytesPerCell.setDescription('number of bytes to be transmit in order per cell to low the delay. ')
atmCbrCnfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("notApplicable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgParity.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgParity.setDescription(' Controls the use of pointer parity when using the STRUCTURED or STRUCTURED WITH POINTER connection type. as defined by atmCbrCnfgService. ON - Pointer parity bit generation at the transmit side, and checking of parity bit for error detection at the receiving side enabled. Supported only for STRUCTURED or STRUCTURED WITH POINTER service. OFF - Pointer parity generation and checking disabled. Supported only for STRUCTURED or STRUCTURED WITH POINTER service. N/A - Not applicable. This is the only option when selecting UNSTRUCTURED or STRUCTURED WITHOUT POINTER.')
atmCbrCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
atmCbrCnfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("unstructured", 2), ("structured", 3), ("structuredWithPointer", 4), ("structuredWithoutPointer", 5), ("structuredControlSignalsTransport", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgService.setStatus('current')
if mibBuilder.loadTexts: atmCbrCnfgService.setDescription('Define if DSx service is structured or unstructured. A structured(3) interface is some nx64Kbps. (n x DS0 = n Time Slots) An unstructured (2) interface is full DSx, x >0. (1.544Mbps, 2.048Mbps, 6.312Mbps, 44.736 Mbps, or 34.368 Mbps.) This objects selects the connection type also for AAL1 Stream for Data port. The available selections depend on the data rate selected. For the 64 kbps rate: STRUCTURED WITH POINTER = structure(4) Use of the structured service as defined in ATMF AF-VTOA-0078.000. STRUCTURED WITHOUT POINTER : same as above, but without using a pointer (the resulting cell structure is similar to that of the unstructured service cells). Default: STRUCTURED WITH POINTER structuredControlSignalsTransport -Pointer is used to transfer Data Control Signals through ATM network. For other rates: STRUCTURED : Use of structured service as defined in ATMF AF-VTOA-0078.000. UNSTRUCTURED : Use of unstructured service as defined in ATMF document AF-VTOA-0078.000.')
atmCESConfExtnsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2), )
if mibBuilder.loadTexts: atmCESConfExtnsTable.setStatus('current')
if mibBuilder.loadTexts: atmCESConfExtnsTable.setDescription('This table defines virtual connections between ATM port and DS1-CBR port.')
atmCESConfExtnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmCESConfExtnsEntry.setStatus('current')
if mibBuilder.loadTexts: atmCESConfExtnsEntry.setDescription('An entry defines virtual connection between ATM port and DS1-CBR port.')
atmCESLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCESLastChange.setStatus('current')
if mibBuilder.loadTexts: atmCESLastChange.setDescription('The value of sysUpTime at the time the ATM to CBR connection entered its mandatory operational state. If the mandatory state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
atmCESRxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESRxBytesPerCell.setStatus('current')
if mibBuilder.loadTexts: atmCESRxBytesPerCell.setDescription('Number of bytes to be received per cell, in order to decrease the delay. ')
atmCESTxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESTxBytesPerCell.setStatus('current')
if mibBuilder.loadTexts: atmCESTxBytesPerCell.setDescription('Number of bytes to be transmitted per cell, in order to decrease the delay. ')
atmCESAal1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ces", 1), ("dbces", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESAal1Type.setStatus('current')
if mibBuilder.loadTexts: atmCESAal1Type.setDescription('Type of CBR connection: CES , DBCES or transparent .')
atmCESParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESParity.setStatus('current')
if mibBuilder.loadTexts: atmCESParity.setDescription(" Indicate if we'll add even parity to the pointer of the structure of CES.")
atmCESSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("eAndmOrPlar", 1), ("fxoLoopStart", 2), ("fxsLoopStart", 3), ("fxoGroundStart", 4), ("fxsGroundStart", 5), ("r2", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESSigType.setStatus('current')
if mibBuilder.loadTexts: atmCESSigType.setDescription("type of signalling for a DBCES connection. Must be 'other' for CES connection.")
atmCESSigABBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESSigABBits.setStatus('current')
if mibBuilder.loadTexts: atmCESSigABBits.setDescription('This attribute is applicable only when value of atmCESSigType is other. Represents the AB bits for Rx/Tx and their masks in this way: bits 7..6: Tx AB bits value, bits 5..4: Tx AB bits mask, bits 3..2: Rx AB bits value, bits 1..0: Rx AB bits mask. All bits must be 0 for CES connection.')
atmSuCrossConnectAtmEther = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4))
atmSuCrossConnectAtmEtherIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuCrossConnectAtmEtherIndexNext.setStatus('current')
if mibBuilder.loadTexts: atmSuCrossConnectAtmEtherIndexNext.setDescription('This object contains an appropriate value to be used for atmEtherCnfgCrossConnectIndex when creating entries in the atmEtherCnfgTable. The value 0 indicates that no unassigned entries are available. To obtain the atmEtherCnfgCrossConnectIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index.')
atmEtherCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2), )
if mibBuilder.loadTexts: atmEtherCnfgTable.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgTable.setDescription('This table defines virtual connections between ATM and ATM-BridgedEthernet endpoints.')
atmEtherCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmEtherCnfgCrossConnectIndex"), (0, "ACE20-MIB", "atmEtherCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmEtherCnfgAtmVpi"), (0, "ACE20-MIB", "atmEtherCnfgAtmVci"), (0, "ACE20-MIB", "atmEtherCnfgEtherIfIndex"))
if mibBuilder.loadTexts: atmEtherCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgEntry.setDescription('An entry defines virtual connection between ATM and ATM-Ethernet endpoint.')
atmEtherCnfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgCrossConnectIndex.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgCrossConnectIndex.setDescription('A unique value to identify this cross-connect.')
atmEtherCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgAtmIfIndex.setDescription('The ifIndex associated to the ATM interface.')
atmEtherCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgAtmVpi.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgAtmVpi.setDescription('The Vpi number of the ATM end point.')
atmEtherCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgAtmVci.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgAtmVci.setDescription('The Vci number of the ATM end point.')
atmEtherCnfgEtherIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgEtherIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgEtherIfIndex.setDescription('The ifIndex associated to the atm-Ethernet interface.')
atmEtherCnfgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: atmEtherCnfgMacAddr.setDescription('The DFA number of the Ethernet end point.')
atmEtherCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgAdminStatus.setDescription('The requested state of the ATM to Ethernet connection.')
atmEtherCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgOperStatus.setDescription('The real operational status of the ATM to Ethernet connection.')
atmEtherCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgLastChange.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgLastChange.setDescription('The value of sysUpTime at the time the ATM to Ethernet connection entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value. Same value define both direction ( Atm2Ether and Ether2Atm ).')
atmEtherCnfgTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgTrafficDescrIndex.setDescription('The value of this object identifies the row in the atmTrafficDescrParamTable which applies to the transmit direction of the VCL.')
atmEtherCnfgEncapsulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmBridgedEther", 1), ("atmBridgedEtherCRC", 2))).clone('atmBridgedEther')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgEncapsulationMode.setStatus('deprecated')
if mibBuilder.loadTexts: atmEtherCnfgEncapsulationMode.setDescription('This object define the encapsulation type requested for the connection. it indicates if we transfer the Ethernet frame to the atm side without the Crc32- AtmBridgedEther, or with it - AtmBridgedEther-CRC. ')
atmEtherCnfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgPriority.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgPriority.setDescription('This object define the priority of connection. The first parameter affects the transmition of cells in Conjested network is the Service Category( Cbr has the highest priority and then Vbr,Ubr ) In connections with the same category this object will define the priority.')
atmEtherCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
atmEtherCnfgRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterIP.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgRouterIP.setDescription('The interface IP address for SNMP requests.')
atmEtherCnfgRouterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterMask.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgRouterMask.setDescription('The interface IP address mask for SNMP requests.')
atmEtherCnfgRouterFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterFragmentation.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgRouterFragmentation.setDescription("Fragmentation. When application is not router value must be 'notApplicable'.")
atmEtherCnfgRouterRIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1And2", 3), ("none", 4), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterRIPMode.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgRouterRIPMode.setDescription("RIP Mode. When application is not router value must be 'notApplicable'.")
atmEtherCnfgRouterMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterMTU.setStatus('deprecated')
if mibBuilder.loadTexts: atmEtherCnfgRouterMTU.setDescription(' .')
atmEtherCnfgPPPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("rfc1483", 3), ("pppVcMuxed", 4), ("pppLlcMuxed", 5))).clone('rfc1483')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgPPPEncapsulation.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgPPPEncapsulation.setDescription('This object define the encapsulation type requested for the connection. rfc1483 - Multiprotocol Encapsulation over ATM Adaptation Layer 5 (no PPP) PPP VC Muxed - For VC Based Multiplexing, the carried network interconnect protocol is identified implicitly by the VC connecting the two ATM stations, i.e. each protocol must be carried over a separate VC. There is therefore no need to include explicit multiplexing information in the Payload of the AAL5 CPCS-PDU. This results in minimal bandwidth and processing overhead. PPP LLC Muxed - LLC (Low layer compatibility) Encapsulation is needed when several protocols are carried over the same VC. In order to allow the receiver to properly process the incoming AAL5 CPCS-PDU, the Payload Field must contain information necessary to identify the protocol of the routed or bridged PDU. In LLC Encapsulation this informationis encoded in an LLC header placed in front of the carried PDU.')
atmEtherCnfgAllocatedBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 217)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgAllocatedBuffers.setStatus('current')
if mibBuilder.loadTexts: atmEtherCnfgAllocatedBuffers.setDescription("This object enables user to limit the amount of buffers used by the connection. The limit set by this object will give the effect of a virtual buffer pool per connection. The user can allocate between 10 to 217 buffers to every connection. By default the limit is 50 buffers. Sum of limits allocated to all connections must not exceed the total amount of available buffers. Whenever a connection exceeds it's buffer limit due to congestion or burst traffic is discarded")
atmSuCrossConnectTranslate = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5))
atmTranslateTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1), )
if mibBuilder.loadTexts: atmTranslateTable.setStatus('current')
if mibBuilder.loadTexts: atmTranslateTable.setDescription("This table translates the three of AtmIfIndex,AtmVpi,AtmVci to ifIndex of the interface on the user port's side.")
atmTranslateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1), ).setIndexNames((0, "ACE20-MIB", "atmTranslateAtmIfIndex"), (0, "ACE20-MIB", "atmTranslateAtmVpi"), (0, "ACE20-MIB", "atmTranslateAtmVci"))
if mibBuilder.loadTexts: atmTranslateEntry.setStatus('current')
if mibBuilder.loadTexts: atmTranslateEntry.setDescription("An entry includes the User side interface's ifIndex of any virtual connection along with the ATM connection indices.")
atmTranslateAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmTranslateAtmIfIndex.setDescription('The ifIndex associated to the ATM interface.')
atmTranslateAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateAtmVpi.setStatus('current')
if mibBuilder.loadTexts: atmTranslateAtmVpi.setDescription('The Vpi number of the ATM end point.')
atmTranslateAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateAtmVci.setStatus('current')
if mibBuilder.loadTexts: atmTranslateAtmVci.setDescription('The Vci number of the ATM end point.')
atmTranslateUserIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateUserIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmTranslateUserIfIndex.setDescription('The ifIndex associated to the user interface.')
radAtmEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 164, 12, 0))
if mibBuilder.loadTexts: radAtmEvents.setStatus('current')
if mibBuilder.loadTexts: radAtmEvents.setDescription('The events for RAD ATM.')
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 1))
if mibBuilder.loadTexts: alarmTrap.setStatus('current')
if mibBuilder.loadTexts: alarmTrap.setDescription('This trap is sent whenever an alarm occurs in the agent.')
statusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 2)).setObjects(("RAD-MIB", "agnLed"), ("RAD-MIB", "agnIndication"))
if mibBuilder.loadTexts: statusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: statusChangeTrap.setDescription("This trap is sent whenever a led in the agent change it's status.")
atmSuAgnNoBufferToNetwork = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 3)).setObjects(("RAD-MIB", "alarmSeverity"))
if mibBuilder.loadTexts: atmSuAgnNoBufferToNetwork.setStatus('current')
if mibBuilder.loadTexts: atmSuAgnNoBufferToNetwork.setDescription('This trap usualy indicates timing problem; incorrect selection of timing references between end users.')
atmSuJitterBufferOverrun = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 4)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuJitterBufferOverrun.setStatus('current')
if mibBuilder.loadTexts: atmSuJitterBufferOverrun.setDescription('This trap indicates that an overrun event occurred in the ATM jitter buffer serving the transmit to user direction of the user interface specified by ifAlias')
atmSuJitterBufferUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 5)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuJitterBufferUnderrun.setStatus('current')
if mibBuilder.loadTexts: atmSuJitterBufferUnderrun.setDescription('This trap indicates that an underrun event occurred in the atm jitter buffer serving the transmit to user direction of the user interface specified by ifAlias.')
atmSuDataLocalLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 6)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuDataLocalLoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: atmSuDataLocalLoopbackTrap.setDescription('This trap indicates that a local loopback has been activated on the local data port.')
atmSuDataRemoteLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 7)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuDataRemoteLoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: atmSuDataRemoteLoopbackTrap.setDescription('This trap indicates that a remote loopback has been activated on the local data port.')
mibBuilder.exportSymbols("ACE20-MIB", atmSuPortEtherDefaultGateWayIp=atmSuPortEtherDefaultGateWayIp, atmTranslateAtmVci=atmTranslateAtmVci, atmSuPortAtmSNMPVpi=atmSuPortAtmSNMPVpi, atmCESAal1Type=atmCESAal1Type, atmSuPortAtmVclStatsTxTotalLoopbackResponses=atmSuPortAtmVclStatsTxTotalLoopbackResponses, atmSuPortAtmVclStatsRxTotalRDICells=atmSuPortAtmVclStatsRxTotalRDICells, atmSuPortDataMaxNoOfConns=atmSuPortDataMaxNoOfConns, atmSuPortFrPvcEndptRxFECNs=atmSuPortFrPvcEndptRxFECNs, atmFrCnfgSscsDlci=atmFrCnfgSscsDlci, atmSuPortDxiConfTable=atmSuPortDxiConfTable, atmCbrCnfgTxTimeSlots=atmCbrCnfgTxTimeSlots, atmEtherCnfgTable=atmEtherCnfgTable, atmEtherCnfgEtherIfIndex=atmEtherCnfgEtherIfIndex, atmDxiCnfgAtmVci=atmDxiCnfgAtmVci, atmCbrCnfgEntry=atmCbrCnfgEntry, atmEtherCnfgTrafficDescrIndex=atmEtherCnfgTrafficDescrIndex, atmSuSystemCurrentAlrDescription=atmSuSystemCurrentAlrDescription, atmSuPortAtmVclStatsTxTotalCCCells=atmSuPortAtmVclStatsTxTotalCCCells, atmSuSystemDSPGain=atmSuSystemDSPGain, atmSuPortEtherStatus=atmSuPortEtherStatus, atmFrDescrIndex=atmFrDescrIndex, atmSuJitterBufferOverrun=atmSuJitterBufferOverrun, atmSuPortAtmVclStatsTxTotalAISCells=atmSuPortAtmVclStatsTxTotalAISCells, atmSuSystemHistoryAlrVpi=atmSuSystemHistoryAlrVpi, atmDxiCnfgAdminStatus=atmDxiCnfgAdminStatus, atmSuCrossConnectAtmFrIndexNext=atmSuCrossConnectAtmFrIndexNext, atmFrCnfgDlci=atmFrCnfgDlci, atmFrCnfgRowStatus=atmFrCnfgRowStatus, atmFrCnfgAtmVpi=atmFrCnfgAtmVpi, atmSuPortAtmVclStatsRxTotalLoopbackResponses=atmSuPortAtmVclStatsRxTotalLoopbackResponses, atmSuPortAtmTxClp0Cells=atmSuPortAtmTxClp0Cells, atmSuSystemHistoryAlrEntry=atmSuSystemHistoryAlrEntry, atmSuPortAtmVclStatsRxClp1Cells=atmSuPortAtmVclStatsRxClp1Cells, atmFrCnfgFrIfIndex=atmFrCnfgFrIfIndex, atmSuSystemHistoryAlrIndex=atmSuSystemHistoryAlrIndex, atmFrDescrDe2Clp=atmFrDescrDe2Clp, atmSuPortEtherFragmentation=atmSuPortEtherFragmentation, atmSuSystemHistoryAlrOccurrenceTime=atmSuSystemHistoryAlrOccurrenceTime, atmSuPortDataInterfaceType=atmSuPortDataInterfaceType, atmSuSystemSwOperStatus=atmSuSystemSwOperStatus, atmSuPortFrPvcEndptTxDEs=atmSuPortFrPvcEndptTxDEs, atmSuSystemCurrentAlrIndex=atmSuSystemCurrentAlrIndex, atmSuPortFrPvcEndptEntry=atmSuPortFrPvcEndptEntry, atmSuPortFrLportSNMPIp=atmSuPortFrLportSNMPIp, atmSuPortDs1CnfgInbandMng=atmSuPortDs1CnfgInbandMng, atmSuPortFrLportSNMPDlci=atmSuPortFrLportSNMPDlci, atmSuCrossConnectAtmFrDescriptor=atmSuCrossConnectAtmFrDescriptor, atmCESConfExtnsEntry=atmCESConfExtnsEntry, atmSuPortEtherEntry=atmSuPortEtherEntry, atmSuPortAtmCnfgEntry=atmSuPortAtmCnfgEntry, atmSuPortDataClock=atmSuPortDataClock, atmSuPortDxi=atmSuPortDxi, atmSuPortDs1CbrCnfgEntry=atmSuPortDs1CbrCnfgEntry, atmSuCrossConnectAtmDxiIndexNext=atmSuCrossConnectAtmDxiIndexNext, atmSuPortAtmTxEfciSetCells=atmSuPortAtmTxEfciSetCells, atmSuPortAtmVclStatsTotalLOCSeconds=atmSuPortAtmVclStatsTotalLOCSeconds, atmCbrCnfgAAL1Signalling=atmCbrCnfgAAL1Signalling, atmSuSystemISDNDataLinkActivation=atmSuSystemISDNDataLinkActivation, atmSuSystemCurrentAlrEntry=atmSuSystemCurrentAlrEntry, atmSuPortAtmVclStatsRxCells=atmSuPortAtmVclStatsRxCells, atmSuPortDataDCD=atmSuPortDataDCD, atmSuPortAtmVclStatsTotalFailLoopbacks=atmSuPortAtmVclStatsTotalFailLoopbacks, atmSuPortDataConfNoOfConns=atmSuPortDataConfNoOfConns, atmSuPortFrLportVCSigProcedure=atmSuPortFrLportVCSigProcedure, atmSuPortFrLportCLLM=atmSuPortFrLportCLLM, atmSuPortDxiPortMode=atmSuPortDxiPortMode, atmSuSystemHistoryAlrStatus=atmSuSystemHistoryAlrStatus, atmFrDescrEntry=atmFrDescrEntry, atmCESParity=atmCESParity, atmCbrCnfgRxTimeSlots=atmCbrCnfgRxTimeSlots, atmSuCrossConnectTranslate=atmSuCrossConnectTranslate, atmSuDataLocalLoopbackTrap=atmSuDataLocalLoopbackTrap, atmSuPortDataRtsStatus=atmSuPortDataRtsStatus, atmCbrCnfgRxBytesPerCell=atmCbrCnfgRxBytesPerCell, atmTranslateEntry=atmTranslateEntry, atmSuPortFrPvcEndptTxFECNs=atmSuPortFrPvcEndptTxFECNs, radAtmEvents=radAtmEvents, atmCbrCnfgService=atmCbrCnfgService, atmCESRxBytesPerCell=atmCESRxBytesPerCell, atmEtherCnfgRouterMask=atmEtherCnfgRouterMask, atmFrCnfgAtmIfIndex=atmFrCnfgAtmIfIndex, atmSuPortDs1CnfgDedicatedTs=atmSuPortDs1CnfgDedicatedTs, atmSuSystemHistoryAlrTable=atmSuSystemHistoryAlrTable, atmEtherCnfgOperStatus=atmEtherCnfgOperStatus, atmSuPortAtmSNMPIp=atmSuPortAtmSNMPIp, atmCbrCnfgAdminStatus=atmCbrCnfgAdminStatus, atmSuPortDs1CbrCnfgTable=atmSuPortDs1CbrCnfgTable, atmSuSystemHistoryAlrVci=atmSuSystemHistoryAlrVci, atmSuPortEtherAgingTime=atmSuPortEtherAgingTime, atmSuSystem=atmSuSystem, atmSuSystemJitterBuffer=atmSuSystemJitterBuffer, atmSuPortFrLportSNMPStatus=atmSuPortFrLportSNMPStatus, atmSuPortDs1=atmSuPortDs1, atmSuPortAtmRxClp0Cells=atmSuPortAtmRxClp0Cells, atmSuPortAtmVclStatsRxDiscardsCells=atmSuPortAtmVclStatsRxDiscardsCells, atmSuPortEther=atmSuPortEther, atmSuSystemSwSwitchVersionsCmd=atmSuSystemSwSwitchVersionsCmd, atmFrCnfgLastChange=atmFrCnfgLastChange, atmSuCrossConnectAtmFr=atmSuCrossConnectAtmFr, atmCbrCnfgParity=atmCbrCnfgParity, atmEtherCnfgRouterRIPMode=atmEtherCnfgRouterRIPMode, atmFrDescrMappingMode=atmFrDescrMappingMode, atmFrMaxMany2OneConnsPerVcc=atmFrMaxMany2OneConnsPerVcc, atmTranslateAtmVpi=atmTranslateAtmVpi, atmSuPortFrLportEntry=atmSuPortFrLportEntry, atmSuPortEtherDefaultGatewayStatus=atmSuPortEtherDefaultGatewayStatus, atmSuPortCmdTable=atmSuPortCmdTable, atmSuPortEtherPppOEEnable=atmSuPortEtherPppOEEnable, atmSuPortAtmVclStatsTxClp0Cells=atmSuPortAtmVclStatsTxClp0Cells, atmSuPortEtherDefaultCrossConnectId=atmSuPortEtherDefaultCrossConnectId, atmFrDescrClp2De=atmFrDescrClp2De, atmEtherCnfgAllocatedBuffers=atmEtherCnfgAllocatedBuffers, atmSuPortDs1CnfgEntry=atmSuPortDs1CnfgEntry, atmCESTxBytesPerCell=atmCESTxBytesPerCell, atmSuPortDataMode=atmSuPortDataMode, atmSuPortDataRate=atmSuPortDataRate, atmEtherCnfgEntry=atmEtherCnfgEntry, atmSuPortFr=atmSuPortFr, atmSuPortEtherMask=atmSuPortEtherMask, atmSuAgnNoBufferToNetwork=atmSuAgnNoBufferToNetwork, atmSuPortAtmCnfgShapingMode=atmSuPortAtmCnfgShapingMode, atmSuPortAtmTxOamCells=atmSuPortAtmTxOamCells, atmSuPortAtmTxClp1Cells=atmSuPortAtmTxClp1Cells, atmCbrCnfgRowStatus=atmCbrCnfgRowStatus, atmSuPortEtherIP=atmSuPortEtherIP, atmSuPortFrPvcEndptTable=atmSuPortFrPvcEndptTable, atmSuJitterBufferUnderrun=atmSuJitterBufferUnderrun, atmSuPortAtm=atmSuPortAtm, atmSuCrossConnectAtmEtherIndexNext=atmSuCrossConnectAtmEtherIndexNext, atmDxiCnfgAtmVpi=atmDxiCnfgAtmVpi, atmSuPortDataClkPolarity=atmSuPortDataClkPolarity, atmSuPortDataCRC=atmSuPortDataCRC, atmSuSystemILMICommunity=atmSuSystemILMICommunity, atmSuPortAtmSNMPTrafficDescrIndex=atmSuPortAtmSNMPTrafficDescrIndex, atmSuPortDs1CbrTxTimeSlots=atmSuPortDs1CbrTxTimeSlots, atmSuPortDxiConfEntry=atmSuPortDxiConfEntry, atmDxiCnfgLastChange=atmDxiCnfgLastChange, atmDxiCnfgDfa=atmDxiCnfgDfa, atmFrCnfgAdminStatus=atmFrCnfgAdminStatus, atmDxiCnfgCrossConnectIndex=atmDxiCnfgCrossConnectIndex, atmFrDescrTable=atmFrDescrTable, atmSuSystemCurrentAlrIfIndex=atmSuSystemCurrentAlrIfIndex, atmSuPortDs1CbrIdleCode=atmSuPortDs1CbrIdleCode, atmSuPortDs1CbrMaxNoOfConns=atmSuPortDs1CbrMaxNoOfConns, atmSuPortDs1CbrSignallingSampleTime=atmSuPortDs1CbrSignallingSampleTime, atmSuPortDataCtsStatus=atmSuPortDataCtsStatus, atmSuPortAtmSNMPVci=atmSuPortAtmSNMPVci, atmSuPortAtmVclStatsTable=atmSuPortAtmVclStatsTable, atmSuCrossConnect=atmSuCrossConnect, atmDxiCnfgEntry=atmDxiCnfgEntry, atmCbrCnfgAtmVpi=atmCbrCnfgAtmVpi, atmEtherCnfgAtmVci=atmEtherCnfgAtmVci, atmSuPortAtmCnfgCDVOptimization=atmSuPortAtmCnfgCDVOptimization, atmSuPortAtmILMIStatus=atmSuPortAtmILMIStatus, atmSuPortAtmRxEfciSetCells=atmSuPortAtmRxEfciSetCells, atmFrCnfgTrafficDescrIndex=atmFrCnfgTrafficDescrIndex, atmSuSystemTrapMaxManagers=atmSuSystemTrapMaxManagers, atmDxiCnfgTable=atmDxiCnfgTable, atmCESSigABBits=atmCESSigABBits, atmSuPortAtmVclStatsEntry=atmSuPortAtmVclStatsEntry, atmSuResetPortStatsCmd=atmSuResetPortStatsCmd, atmSuPortAtmVclStatsRxTotalCCCells=atmSuPortAtmVclStatsRxTotalCCCells, atmEtherCnfgAdminStatus=atmEtherCnfgAdminStatus, atmSuPortDxiSigProtocol=atmSuPortDxiSigProtocol, atmFrCnfgAtmVci=atmFrCnfgAtmVci, atmSuPortEtherSNMPStatus=atmSuPortEtherSNMPStatus, atmCbrCnfgCbrIfIndex=atmCbrCnfgCbrIfIndex, atmSuSystemAalSelection=atmSuSystemAalSelection, atmSuPortAtmIfStatsEntry=atmSuPortAtmIfStatsEntry, atmFrCnfgEntry=atmFrCnfgEntry, atmSuResetConnsStatsCmd=atmSuResetConnsStatsCmd, atmCbrCnfgOperStatus=atmCbrCnfgOperStatus, atmSuPortEtherTable=atmSuPortEtherTable, atmSuPortDataIdleCode=atmSuPortDataIdleCode, atmTranslateUserIfIndex=atmTranslateUserIfIndex, atmFrCnfgMappingDescrIndex=atmFrCnfgMappingDescrIndex, atmDxiCnfgOperStatus=atmDxiCnfgOperStatus, atmSuPortDataCnfgEntry=atmSuPortDataCnfgEntry, atmEtherCnfgRouterFragmentation=atmEtherCnfgRouterFragmentation, atmTranslateAtmIfIndex=atmTranslateAtmIfIndex, atmSuDataRemoteLoopbackTrap=atmSuDataRemoteLoopbackTrap, atmSuPortAtmCnfgTable=atmSuPortAtmCnfgTable, atmEtherCnfgCrossConnectIndex=atmEtherCnfgCrossConnectIndex, atmSuPortAtmVclStatsRxTotalAISCells=atmSuPortAtmVclStatsRxTotalAISCells, atmSuSystemHistoryAlrDescription=atmSuSystemHistoryAlrDescription, atmSuPortAtmVclStatsTxCells=atmSuPortAtmVclStatsTxCells, atmDxiCnfgTrafficDescrIndex=atmDxiCnfgTrafficDescrIndex, statusChangeTrap=statusChangeTrap, atmFrCnfgTable=atmFrCnfgTable, atmSuPortFrLportVCSigProtocol=atmSuPortFrLportVCSigProtocol, atmSuPortAtmVclStatsRxTotalLoopbackRequests=atmSuPortAtmVclStatsRxTotalLoopbackRequests, atmSuPortEtherRIPMode=atmSuPortEtherRIPMode, atmSuPortDataCnfgTable=atmSuPortDataCnfgTable, atmSu=atmSu, atmEtherCnfgAtmIfIndex=atmEtherCnfgAtmIfIndex, atmDxiCnfgDxiIfIndex=atmDxiCnfgDxiIfIndex, atmSuAtmCbr=atmSuAtmCbr, alarmTrap=alarmTrap, atmSuPortDs1CnfgRxSensitivity=atmSuPortDs1CnfgRxSensitivity, atmSuPortDs1CnfgLBO=atmSuPortDs1CnfgLBO, atmSuSystemHistoryAlrIfIndex=atmSuSystemHistoryAlrIfIndex, atmSuPortDataApplication=atmSuPortDataApplication, atmSuPortAtmVclStatsTxTotalLoopbackRequests=atmSuPortAtmVclStatsTxTotalLoopbackRequests, atmDxiCnfgRowStatus=atmDxiCnfgRowStatus, atmSuPortFrPvcEndptTxBECNs=atmSuPortFrPvcEndptTxBECNs, atmSuPortAtmCnfgIdleCellCLP=atmSuPortAtmCnfgIdleCellCLP, atmSuSystemClearHistoryAlrListCmd=atmSuSystemClearHistoryAlrListCmd, atmCbrCnfgTable=atmCbrCnfgTable, atmSuPortFrPvcEndptRxBECNs=atmSuPortFrPvcEndptRxBECNs, atmSuPortAtmVclStatsTxClp1Cells=atmSuPortAtmVclStatsTxClp1Cells, atmDxiCnfgPriority=atmDxiCnfgPriority, atmEtherCnfgRouterMTU=atmEtherCnfgRouterMTU, atmEtherCnfgPriority=atmEtherCnfgPriority, atmSuPortAtmRxOamCells=atmSuPortAtmRxOamCells, atmCESSigType=atmCESSigType, atmSuPortDs1CbrConfNoOfConns=atmSuPortDs1CbrConfNoOfConns, atmSuPortAtmCnfgScramble=atmSuPortAtmCnfgScramble, atmSuPortFrLportTable=atmSuPortFrLportTable, atmSuSystemCurrentAlrTable=atmSuSystemCurrentAlrTable, atmEtherCnfgRouterIP=atmEtherCnfgRouterIP, atmSuPort=atmSuPort, atmSuCrossConnectAtmEther=atmSuCrossConnectAtmEther, atmSuPortAtmSNMPStatus=atmSuPortAtmSNMPStatus, atmFrCnfgCrossConnectIndex=atmFrCnfgCrossConnectIndex, atmFrCnfgPriority=atmFrCnfgPriority, atmSuSystemCodingLaw=atmSuSystemCodingLaw, atmEtherCnfgLastChange=atmEtherCnfgLastChange, atmSuPortAtmIfStatsTable=atmSuPortAtmIfStatsTable, atmFrCnfgAllocatedBuffers=atmFrCnfgAllocatedBuffers, atmSuPortAtmVclStatsTxTotalRDICells=atmSuPortAtmVclStatsTxTotalRDICells, atmSuPortDs1CnfgTable=atmSuPortDs1CnfgTable, atmEtherCnfgMacAddr=atmEtherCnfgMacAddr, atmEtherCnfgEncapsulationMode=atmEtherCnfgEncapsulationMode, atmSuPortAtmVclStatsTotalSuccLoopbacks=atmSuPortAtmVclStatsTotalSuccLoopbacks, atmCbrCnfgLastChange=atmCbrCnfgLastChange, atmFrCrossConnectService=atmFrCrossConnectService, atmEtherCnfgPPPEncapsulation=atmEtherCnfgPPPEncapsulation, atmCbrCnfgTxBytesPerCell=atmCbrCnfgTxBytesPerCell, atmFrCnfgOperStatus=atmFrCnfgOperStatus, atmFrDescrFecn2Efci=atmFrDescrFecn2Efci, atmSuPortDs1CbrRxTimeSlots=atmSuPortDs1CbrRxTimeSlots, atmSuPortCmdEntry=atmSuPortCmdEntry, atmFrDescrRowStatus=atmFrDescrRowStatus, atmSuPortEtherBridgingMode=atmSuPortEtherBridgingMode, atmCESConfExtnsTable=atmCESConfExtnsTable, atmCESLastChange=atmCESLastChange, atmFrDescrType=atmFrDescrType, atmTranslateTable=atmTranslateTable, atmSuSystemOperMode=atmSuSystemOperMode, atmSuPortDs1CnfgRestoreTime=atmSuPortDs1CnfgRestoreTime, atmCbrCnfgAtmVci=atmCbrCnfgAtmVci, atmCbrCnfgAtmIfIndex=atmCbrCnfgAtmIfIndex, atmSuPortEtherARPTimeout=atmSuPortEtherARPTimeout, atmSuPortAtmVclStatsRxClp0Cells=atmSuPortAtmVclStatsRxClp0Cells)
mibBuilder.exportSymbols("ACE20-MIB", atmEtherCnfgRowStatus=atmEtherCnfgRowStatus, atmSuPortAtmRxClp1Cells=atmSuPortAtmRxClp1Cells, atmSuCrossConnectAtmDxi=atmSuCrossConnectAtmDxi, atmEtherCnfgAtmVpi=atmEtherCnfgAtmVpi, atmSuPortDxiSigDfa=atmSuPortDxiSigDfa, atmFrCrossConnectNetwork=atmFrCrossConnectNetwork, atmDxiCnfgAtmIfIndex=atmDxiCnfgAtmIfIndex)
