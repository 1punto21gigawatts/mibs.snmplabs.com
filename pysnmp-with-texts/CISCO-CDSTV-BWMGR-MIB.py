#
# PySNMP MIB module CISCO-CDSTV-BWMGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDSTV-BWMGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, iso, Counter32, ObjectIdentity, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Integer32, NotificationType, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "iso", "Counter32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Integer32", "NotificationType", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoCdstvBwmgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 749))
ciscoCdstvBwmgrMIB.setRevisions(('2010-06-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCdstvBwmgrMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCdstvBwmgrMIB.setLastUpdated('201006240000Z')
if mibBuilder.loadTexts: ciscoCdstvBwmgrMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCdstvBwmgrMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cds@cisco.com')
if mibBuilder.loadTexts: ciscoCdstvBwmgrMIB.setDescription("This MIB module defines Bandwidth Manager configuration objects that facilitate the management of the Cisco Content Delivery System for TV (CDS-TV) product family. CDS-TV is a suite of products and software applications providing ingest, storage, caching, streaming, playout and on-demand delivery of video to television or set-top-box clients. The Bandwidth Manager runs on the master streamer and keeps track of allocated streams and VOD network resources. Abbreviations: CCP Cache Control Protocol CDS Content Delivery System CORBA Common Object Request Broker Architecture ISA Interactive Services Architecture ISV Integrated Streamer-Vault FSI File Service Interface FTP File Transfer Protocol MPEG Motion Picture Experts Group MSA Managed Services Architecture RTSP Real-Time Streaming Protocol SOAP Simple Object Access Protocol STB Set-Top Box VOD Video On-Demand Common terms: Catcher: Device responsible for receiving content (typically via satellite dishes and antennae) from content providers or from a Headend-In-The-Sky. Content Ingest: Acquisition of content from a source such as a catcher or an FTP server for storing it locally and making it available to streamers as needed. Device Roles: Vault: Content delivery application responsible for ingesting and storing video content and making it available to streamers and/or caching nodes. Caching Nodes: Content delivery application responsible for caching content from vault (using CCP) and then streaming content out to streamers over HTTP or CCP. Streamer: Content delivery application responsible for streaming video out to STB's. ISV: Content delivery application capable of acting as both a vault and as a streamer in a single device.")
ciscoCdstvBWMgrMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 749, 0))
ciscoCdstvBWMgrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 749, 1))
ciscoCdstvBWMgrMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 749, 2))
ciscoCdstvBWMgrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 749, 2, 1))
cdstvBWMgrAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrAddressType.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrAddressType.setDescription('This object specifies the type of address used by the Bandwidth Manager. The address is specified by cdstvBWMgrAddress.')
cdstvBWMgrAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrAddress.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrAddress.setDescription('This object specifies the address used by the Bandwidth Manager. The type of the address is specified by cdstvBWMgrAddressType.')
cdstvBWMgrPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 3), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(7791)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrPort.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrPort.setDescription('This object specifies the port number to listen on for incoming connections from the RTSP server.')
cdstvBWMgrDatabaseThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrDatabaseThreadPool.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrDatabaseThreadPool.setDescription('This object specifies the maximum number of threads in the database connection pool.')
cdstvBWMgrServerThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrServerThreadPool.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrServerThreadPool.setDescription('This object specifies the maximum number of threads in the Bandwidth Manager server pool that are used to process RTSP requests for the duration of the connection.')
cdstvBWMgrSyncThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrSyncThreadPool.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrSyncThreadPool.setDescription('This object specifies the maximum number of threads available to synchronize sessions with the RTSP during a synchronization operation.')
cdstvBWMgrSyncAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 749, 1, 7), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(2400, 4294967295)).clone(864000)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvBWMgrSyncAlarm.setStatus('current')
if mibBuilder.loadTexts: cdstvBWMgrSyncAlarm.setDescription('This object specifies how often the synchronization alarm is triggered. The alarm is generated if the synchronization between RTSP client and server (typically, streamer and back-office, but varies by CDS deployment environment) fails. Note that this does not generate an SNMP notification.')
ciscoCdstvBWMgrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 749, 2, 2))
ciscoCdstvBWMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 749, 2, 1, 1)).setObjects(("CISCO-CDSTV-BWMGR-MIB", "ciscoCdstvBWMgrMIBMainObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvBWMgrMIBCompliance = ciscoCdstvBWMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvBWMgrMIBCompliance.setDescription('The compliance statement for the entities which implement the Cisco CDS TV Bandwidth Manager MIB.')
ciscoCdstvBWMgrMIBMainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 749, 2, 2, 1)).setObjects(("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrAddress"), ("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrPort"), ("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrDatabaseThreadPool"), ("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrServerThreadPool"), ("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrSyncThreadPool"), ("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrSyncAlarm"), ("CISCO-CDSTV-BWMGR-MIB", "cdstvBWMgrAddressType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvBWMgrMIBMainObjectGroup = ciscoCdstvBWMgrMIBMainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvBWMgrMIBMainObjectGroup.setDescription('A collection of objects that provide status of bandwidth manager configuration.')
mibBuilder.exportSymbols("CISCO-CDSTV-BWMGR-MIB", ciscoCdstvBWMgrMIBMainObjectGroup=ciscoCdstvBWMgrMIBMainObjectGroup, ciscoCdstvBWMgrMIBCompliance=ciscoCdstvBWMgrMIBCompliance, cdstvBWMgrAddress=cdstvBWMgrAddress, ciscoCdstvBWMgrMIBConform=ciscoCdstvBWMgrMIBConform, cdstvBWMgrSyncThreadPool=cdstvBWMgrSyncThreadPool, cdstvBWMgrAddressType=cdstvBWMgrAddressType, cdstvBWMgrSyncAlarm=cdstvBWMgrSyncAlarm, cdstvBWMgrPort=cdstvBWMgrPort, ciscoCdstvBwmgrMIB=ciscoCdstvBwmgrMIB, cdstvBWMgrDatabaseThreadPool=cdstvBWMgrDatabaseThreadPool, cdstvBWMgrServerThreadPool=cdstvBWMgrServerThreadPool, ciscoCdstvBWMgrMIBNotifs=ciscoCdstvBWMgrMIBNotifs, PYSNMP_MODULE_ID=ciscoCdstvBwmgrMIB, ciscoCdstvBWMgrMIBCompliances=ciscoCdstvBWMgrMIBCompliances, ciscoCdstvBWMgrMIBGroups=ciscoCdstvBWMgrMIBGroups, ciscoCdstvBWMgrMIBObjects=ciscoCdstvBWMgrMIBObjects)
