#
# PySNMP MIB module NETWORK-ALCHEMY-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETWORK-ALCHEMY-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
netalTraps, netalModules, cryptoCluster = mibBuilder.importSymbols("NETAL-SMI", "netalTraps", "netalModules", "cryptoCluster")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, IpAddress, Bits, MibIdentifier, ObjectIdentity, Unsigned32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "IpAddress", "Bits", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
networkAlchemyClusterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2972, 5, 2))
networkAlchemyClusterMIB.setRevisions(('2000-10-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: networkAlchemyClusterMIB.setRevisionsDescriptions(('Cleanup.',))
if mibBuilder.loadTexts: networkAlchemyClusterMIB.setLastUpdated('200010250000Z')
if mibBuilder.loadTexts: networkAlchemyClusterMIB.setOrganization('Network Alchemy, Inc.')
if mibBuilder.loadTexts: networkAlchemyClusterMIB.setContactInfo(' Network Alchemy Customer Support Postal: 1538 Pacific Av. Santa Cruz, CA 95060 USA E-Mail: snmp-contact@network-alchemy.com')
if mibBuilder.loadTexts: networkAlchemyClusterMIB.setDescription('Cluster MIB module.')
clusterInfoName = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInfoName.setStatus('current')
if mibBuilder.loadTexts: clusterInfoName.setDescription('Name of this cluster')
clusterMemberInfoNumMembers = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberInfoNumMembers.setStatus('current')
if mibBuilder.loadTexts: clusterMemberInfoNumMembers.setDescription('Number of members in this cluster')
clusterAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3), )
if mibBuilder.loadTexts: clusterAddrTable.setStatus('current')
if mibBuilder.loadTexts: clusterAddrTable.setDescription('List of IP addresses for this cluster.')
clusterAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterAddrIndex"))
if mibBuilder.loadTexts: clusterAddrEntry.setStatus('current')
if mibBuilder.loadTexts: clusterAddrEntry.setDescription('')
clusterAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAddrIndex.setStatus('current')
if mibBuilder.loadTexts: clusterAddrIndex.setDescription('The index of the member list for this cluster')
clusterInfoAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInfoAddrs.setStatus('current')
if mibBuilder.loadTexts: clusterInfoAddrs.setDescription("List of the cluster's IP addresses")
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4), )
if mibBuilder.loadTexts: clusterMemberTable.setStatus('current')
if mibBuilder.loadTexts: clusterMemberTable.setDescription('A list of information, one entry for each member of the cluster')
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterMemberIndex"))
if mibBuilder.loadTexts: clusterMemberEntry.setStatus('current')
if mibBuilder.loadTexts: clusterMemberEntry.setDescription('A table entry containing information about a member of the cluster.')
clusterMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberIndex.setStatus('current')
if mibBuilder.loadTexts: clusterMemberIndex.setDescription('A unique value for each member in the cluster. The value ranges between 1 and the value of clusterMemberInfoNumMembers.')
clusterMemberPrimaryIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberPrimaryIPAddr.setStatus('current')
if mibBuilder.loadTexts: clusterMemberPrimaryIPAddr.setDescription("The member's primary IP address")
clusterMemberWorkload = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberWorkload.setStatus('current')
if mibBuilder.loadTexts: clusterMemberWorkload.setDescription("The member's workload")
clusterMemberMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberMaster.setStatus('current')
if mibBuilder.loadTexts: clusterMemberMaster.setDescription('Is this member the master???')
clusterMemberSecondaryIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5), )
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrTable.setDescription('A table of secondary IP addresses for this cluster member')
clusterMemberSecondaryIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterMemberIndex"), (0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterMemberSecondaryIPAddrIndex"))
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrEntry.setDescription('List of the secondary (outside) addresses of the cluster members. This is only valid if this member is the master node of the cluster.')
clusterMemberSecondaryIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddr.setStatus('current')
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddr.setDescription("One member of the cluster's secondary IP address")
clusterMemberSecondaryIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrIndex.setStatus('current')
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrIndex.setDescription('Second index for clusterMemberSecondaryIPAddrTable. The first entry has index 1, the second 2, etc.')
netalTrap0 = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0))
if mibBuilder.loadTexts: netalTrap0.setStatus('current')
if mibBuilder.loadTexts: netalTrap0.setDescription('Trap.')
clusterMemberJoin = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0, 1))
if mibBuilder.loadTexts: clusterMemberJoin.setStatus('current')
if mibBuilder.loadTexts: clusterMemberJoin.setDescription('Signifies that a member node has joined the cluster.')
clusterMemberLeft = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0, 2))
if mibBuilder.loadTexts: clusterMemberLeft.setStatus('current')
if mibBuilder.loadTexts: clusterMemberLeft.setDescription('Signifies that a node has left the cluster.')
clusterMemberBecameMaster = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0, 3))
if mibBuilder.loadTexts: clusterMemberBecameMaster.setStatus('current')
if mibBuilder.loadTexts: clusterMemberBecameMaster.setDescription('Sent when a node has been made the master.')
mibBuilder.exportSymbols("NETWORK-ALCHEMY-CLUSTER-MIB", clusterMemberMaster=clusterMemberMaster, clusterMemberTable=clusterMemberTable, clusterAddrTable=clusterAddrTable, clusterInfoName=clusterInfoName, clusterAddrEntry=clusterAddrEntry, clusterMemberEntry=clusterMemberEntry, clusterMemberWorkload=clusterMemberWorkload, clusterMemberSecondaryIPAddrIndex=clusterMemberSecondaryIPAddrIndex, clusterMemberJoin=clusterMemberJoin, clusterMemberSecondaryIPAddrEntry=clusterMemberSecondaryIPAddrEntry, clusterInfoAddrs=clusterInfoAddrs, clusterMemberPrimaryIPAddr=clusterMemberPrimaryIPAddr, networkAlchemyClusterMIB=networkAlchemyClusterMIB, clusterAddrIndex=clusterAddrIndex, netalTrap0=netalTrap0, clusterMemberBecameMaster=clusterMemberBecameMaster, PYSNMP_MODULE_ID=networkAlchemyClusterMIB, clusterMemberIndex=clusterMemberIndex, clusterMemberLeft=clusterMemberLeft, clusterMemberSecondaryIPAddrTable=clusterMemberSecondaryIPAddrTable, clusterMemberSecondaryIPAddr=clusterMemberSecondaryIPAddr, clusterMemberInfoNumMembers=clusterMemberInfoNumMembers)
