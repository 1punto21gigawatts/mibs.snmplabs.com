#
# PySNMP MIB module ALTIGA-DHCP-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTIGA-DHCP-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alDhcpMibModule, = mibBuilder.importSymbols("ALTIGA-GLOBAL-REG", "alDhcpMibModule")
alStatsDhcp, alDhcpGroup = mibBuilder.importSymbols("ALTIGA-MIB", "alStatsDhcp", "alDhcpGroup")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, TimeTicks, ModuleIdentity, Gauge32, Counter64, Unsigned32, Counter32, NotificationType, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "TimeTicks", "ModuleIdentity", "Gauge32", "Counter64", "Unsigned32", "Counter32", "NotificationType", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
altigaDhcpStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3076, 1, 1, 25, 2))
altigaDhcpStatsMibModule.setRevisions(('2002-09-05 13:00', '2002-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: altigaDhcpStatsMibModule.setRevisionsDescriptions(('Added module compliance.', 'Updated with new header',))
if mibBuilder.loadTexts: altigaDhcpStatsMibModule.setLastUpdated('200209051300Z')
if mibBuilder.loadTexts: altigaDhcpStatsMibModule.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: altigaDhcpStatsMibModule.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cvpn3000@cisco.com')
if mibBuilder.loadTexts: altigaDhcpStatsMibModule.setDescription('The Altiga DHCP Statistics MIB models counters and objects that are of management interest for DHCP. Acronyms The following acronyms are used in this document: DHCP: Dynamic Host Configuration Protocol MIB: Management Information Base ')
alStatsDhcpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1))
alDhcpStatsActiveLeases = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsActiveLeases.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsActiveLeases.setDescription('The number of active DHCP leases.')
alDhcpStatsMaximumLeases = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsMaximumLeases.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsMaximumLeases.setDescription('The number of leases that were active at any one time.')
alDhcpStatsDiscoversSent = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsDiscoversSent.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsDiscoversSent.setDescription('The number of transmitted DHCPDISCOVER messages.')
alDhcpStatsOffersRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsOffersRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsOffersRcvd.setDescription('The number of received DHCPOFFER messages.')
alDhcpStatsInitRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsInitRequestsSent.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsInitRequestsSent.setDescription('The number of initially (i.e. in the SELECTING or REQUESTING state) transmitted DHCPREQUEST messages.')
alDhcpStatsT1RequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT1RequestsSent.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT1RequestsSent.setDescription('The number of transmitted DHCPDISCOVER messages after the T1 timer expired.')
alDhcpStatsT2RequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT2RequestsSent.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT2RequestsSent.setDescription('The number of transmitted DHCPDISCOVER messages after the T2 timer expired.')
alDhcpStatsInitAcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsInitAcksRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsInitAcksRcvd.setDescription('The number of received original (i.e. in the REQUESTING state) DHCPACK messages.')
alDhcpStatsInitNaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsInitNaksRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsInitNaksRcvd.setDescription('The number of received original (i.e. in the REQUESTING state) DHCPNAK messages.')
alDhcpStatsT1AcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT1AcksRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT1AcksRcvd.setDescription('The number of received DHCPACK messages after the T1 timer expired.')
alDhcpStatsT1NaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT1NaksRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT1NaksRcvd.setDescription('The number of received DHCPNAK messages after the T1 timer expired.')
alDhcpStatsT2AcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT2AcksRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT2AcksRcvd.setDescription('The number of received DHCPACK messages after the T2 timer expired.')
alDhcpStatsT2NaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT2NaksRcvd.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT2NaksRcvd.setDescription('The number of received DHCPNAK messages after the T2 timer expired.')
alDhcpStatsT1Timeouts = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT1Timeouts.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT1Timeouts.setDescription('The number of T1 timeouts that occurred.')
alDhcpStatsT2Timeouts = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsT2Timeouts.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsT2Timeouts.setDescription('The number of T2 timeouts that occurred.')
alDhcpStatsApiRequests = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsApiRequests.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsApiRequests.setDescription('The number of requests made to obtain an IP address from the DHCP module.')
alDhcpStatsLeaseTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsLeaseTimeouts.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsLeaseTimeouts.setDescription('The number of leases that expired.')
alDhcpStatsSessTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2), )
if mibBuilder.loadTexts: alDhcpStatsSessTable.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessTable.setDescription('List of active sessions.')
alDhcpStatsSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1), ).setIndexNames((0, "ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessIpAddr"))
if mibBuilder.loadTexts: alDhcpStatsSessEntry.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessEntry.setDescription('An entry in the alDhcpStatsSessTable.')
alDhcpStatsSessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alDhcpStatsSessRowStatus.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessRowStatus.setDescription('The status of this row. This can be used to delete the lease, but can not be used to create one.')
alDhcpStatsSessId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessId.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessId.setDescription('The unique DHCP session ID used as the index for this row.')
alDhcpStatsSessKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessKey.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessKey.setDescription('The DHCP hash key for this lease.')
alDhcpStatsSessIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessIpAddr.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessIpAddr.setDescription('The IP address of the remote client.')
alDhcpStatsSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessUpTime.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessUpTime.setDescription('The total length of time that this session has had active lease(s).')
alDhcpStatsSessLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessLeaseDuration.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessLeaseDuration.setDescription('The duration of the current lease.')
alDhcpStatsSessLeaseExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessLeaseExpire.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessLeaseExpire.setDescription('The remaining seconds until the current lease expires.')
alDhcpStatsSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessState.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessState.setDescription('The state of this session.')
alDhcpStatsSessClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessClientId.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessClientId.setDescription("The full 'client ID' value associated with this lease.")
alDhcpStatsSessSrvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 20, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alDhcpStatsSessSrvrIpAddr.setStatus('current')
if mibBuilder.loadTexts: alDhcpStatsSessSrvrIpAddr.setDescription('The IP address of the server from which this lease was obtained.')
altigaDhcpStatsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 25, 2, 1))
altigaDhcpStatsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 25, 2, 1, 1))
altigaDhcpStatsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 25, 2, 1, 1, 1)).setObjects(("ALTIGA-DHCP-STATS-MIB", "altigaDhcpStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaDhcpStatsMibCompliance = altigaDhcpStatsMibCompliance.setStatus('current')
if mibBuilder.loadTexts: altigaDhcpStatsMibCompliance.setDescription('The compliance statement for agents which implement the Altiga DHCP Statistics MIB.')
altigaDhcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 20, 2)).setObjects(("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsActiveLeases"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsMaximumLeases"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsDiscoversSent"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsOffersRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsInitRequestsSent"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT1RequestsSent"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT2RequestsSent"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsInitAcksRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsInitNaksRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT1AcksRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT1NaksRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT2AcksRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT2NaksRcvd"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT1Timeouts"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsT2Timeouts"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsApiRequests"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsLeaseTimeouts"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessRowStatus"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessId"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessKey"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessIpAddr"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessUpTime"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessLeaseDuration"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessLeaseExpire"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessState"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessClientId"), ("ALTIGA-DHCP-STATS-MIB", "alDhcpStatsSessSrvrIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaDhcpStatsGroup = altigaDhcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: altigaDhcpStatsGroup.setDescription('The objects for the DHCP Server statistics.')
mibBuilder.exportSymbols("ALTIGA-DHCP-STATS-MIB", alDhcpStatsDiscoversSent=alDhcpStatsDiscoversSent, alDhcpStatsInitAcksRcvd=alDhcpStatsInitAcksRcvd, alDhcpStatsSessKey=alDhcpStatsSessKey, alDhcpStatsSessRowStatus=alDhcpStatsSessRowStatus, PYSNMP_MODULE_ID=altigaDhcpStatsMibModule, alDhcpStatsSessId=alDhcpStatsSessId, altigaDhcpStatsMibCompliances=altigaDhcpStatsMibCompliances, altigaDhcpStatsGroup=altigaDhcpStatsGroup, alDhcpStatsActiveLeases=alDhcpStatsActiveLeases, alStatsDhcpGlobal=alStatsDhcpGlobal, alDhcpStatsApiRequests=alDhcpStatsApiRequests, alDhcpStatsT1Timeouts=alDhcpStatsT1Timeouts, alDhcpStatsT1AcksRcvd=alDhcpStatsT1AcksRcvd, alDhcpStatsSessState=alDhcpStatsSessState, alDhcpStatsSessLeaseDuration=alDhcpStatsSessLeaseDuration, alDhcpStatsMaximumLeases=alDhcpStatsMaximumLeases, alDhcpStatsSessIpAddr=alDhcpStatsSessIpAddr, alDhcpStatsT2RequestsSent=alDhcpStatsT2RequestsSent, alDhcpStatsOffersRcvd=alDhcpStatsOffersRcvd, alDhcpStatsSessUpTime=alDhcpStatsSessUpTime, alDhcpStatsT2Timeouts=alDhcpStatsT2Timeouts, alDhcpStatsSessClientId=alDhcpStatsSessClientId, altigaDhcpStatsMibCompliance=altigaDhcpStatsMibCompliance, alDhcpStatsInitRequestsSent=alDhcpStatsInitRequestsSent, alDhcpStatsSessEntry=alDhcpStatsSessEntry, alDhcpStatsInitNaksRcvd=alDhcpStatsInitNaksRcvd, alDhcpStatsLeaseTimeouts=alDhcpStatsLeaseTimeouts, alDhcpStatsSessTable=alDhcpStatsSessTable, alDhcpStatsSessSrvrIpAddr=alDhcpStatsSessSrvrIpAddr, alDhcpStatsT2NaksRcvd=alDhcpStatsT2NaksRcvd, alDhcpStatsT1NaksRcvd=alDhcpStatsT1NaksRcvd, altigaDhcpStatsMibModule=altigaDhcpStatsMibModule, alDhcpStatsT1RequestsSent=alDhcpStatsT1RequestsSent, altigaDhcpStatsMibConformance=altigaDhcpStatsMibConformance, alDhcpStatsT2AcksRcvd=alDhcpStatsT2AcksRcvd, alDhcpStatsSessLeaseExpire=alDhcpStatsSessLeaseExpire)
