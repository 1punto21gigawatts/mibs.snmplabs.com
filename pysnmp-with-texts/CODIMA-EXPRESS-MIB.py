#
# PySNMP MIB module CODIMA-EXPRESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CODIMA-EXPRESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
codimaProducts, = mibBuilder.importSymbols("CODIMA-GLOBAL-REG", "codimaProducts")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, IpAddress, Counter32, Counter64, TimeTicks, iso, Integer32, MibIdentifier, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Counter32", "Counter64", "TimeTicks", "iso", "Integer32", "MibIdentifier", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Bits")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
codimaExpressMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2))
codimaExpressMIB.setRevisions(('2003-05-30 09:59',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: codimaExpressMIB.setRevisionsDescriptions(('The initial version. This MIB defines: 1. The Express History Databases 2. Traps for sending monitored events.',))
if mibBuilder.loadTexts: codimaExpressMIB.setLastUpdated('200305300959Z')
if mibBuilder.loadTexts: codimaExpressMIB.setOrganization('CODIMA Technologies Ltd')
if mibBuilder.loadTexts: codimaExpressMIB.setContactInfo('mailto:support@codimaTech.com http://www.codimaTech.com')
if mibBuilder.loadTexts: codimaExpressMIB.setDescription('This module defines objects for the CODIMA Express product suite.')
codimaExpressObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1))
if mibBuilder.loadTexts: codimaExpressObjects.setStatus('current')
if mibBuilder.loadTexts: codimaExpressObjects.setDescription('Sub-tree for the CODIMA Express MIB objects.')
expHistoryDatabases = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1))
if mibBuilder.loadTexts: expHistoryDatabases.setStatus('current')
if mibBuilder.loadTexts: expHistoryDatabases.setDescription('Sub-tree for the CODIMA Express History Database objects.')
dbControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1))
if mibBuilder.loadTexts: dbControl.setStatus('current')
if mibBuilder.loadTexts: dbControl.setDescription('Sub-tree for the CODIMA Express History Database Control objects.')
ctrlTimeTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ctrlTimeTable.setStatus('current')
if mibBuilder.loadTexts: ctrlTimeTable.setDescription('The Express History Database Control Time Table. The table allows two types of control over time depending on the value of the ctLockMethod object. When ctLockMethod is lockUserTime, all ctTypeIndex databases will show ctTimeSlots worth of entries with a first timeslot value of the user specified ctUserTime. When ctLockMethod is lockRealTime, all ctTypeIndex databases will show ctTimeSlots worth of entries with a first timeslot value of the real-time specified ctRealTime. The number of rows in this table is two.')
ctrlTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ctSampleType"))
if mibBuilder.loadTexts: ctrlTimeEntry.setStatus('current')
if mibBuilder.loadTexts: ctrlTimeEntry.setDescription('A row in the Express History Database Control Time Table. The table allows two types of control over time depending on the value of the ctLockMethod object. When ctLockMethod is lockUserTime, all ctTypeIndex databases will show ctTimeSlots worth of entries with a first timeslot value of the user specified ctUserTime. When ctLockMethod is lockRealTime, all ctTypeIndex databases will show ctTimeSlots worth of entries with a first timeslot value of the real-time specified ctRealTime. The number of rows in this table is two. Entries cannot be created or deleted via SNMP operations.')
ctSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("longTerm", 1), ("shortTerm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctSampleType.setStatus('current')
if mibBuilder.loadTexts: ctSampleType.setDescription('The Database Control Sample Type identifies which database sample type this row controls. The two values are: longTerm = 1. All Long Term databases use sample intervals of 15 minutes. shortTerm = 2. All Short Term databases use sample intervals of 15 seconds.')
ctTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctTimeSlots.setStatus('current')
if mibBuilder.loadTexts: ctTimeSlots.setDescription('This object controls number of discrete sample intervals over which data shall be accessible in the CODIMA Express History Database Tables. When the ctSampleType = longTerm the value controls how many hours worth of statistics are accessible. When the ctSampleType = shortTerm the value controls how many minutes worth of statistics are accessible. Long Term databases use sample intervals of 15 minutes. Short Term databases use sample intervals of 15 seconds. For Long Term databases, setting this object to a value of 2 will allow 2 hours, i.e. 8 * 15 minutes, of data gathered by all the Long Term History Databases, to be collected via SNMP polling. Setting this object to the maximum value if 32 will give 32 hours worth of discrete 15 minute samples. For Short Term databases, setting this object to a value of 2 will allow 2 minutes, i.e. 8 * 15 seconds, of data gathered by all the Short Term History Databases, to be collected via SNMP polling. Setting this object to the maximum value if 32 will give 32 minutes worth of discrete 15 second samples.')
ctLockMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockUserTime", 1), ("lockRealTime", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctLockMethod.setStatus('current')
if mibBuilder.loadTexts: ctLockMethod.setDescription('The database lock method to use when polling the History databases. There are two possible values: lockUserTime = 1. In this case the user defined value for the dcUserTime object will be used. lockRealTime = 2. In this case the automatically generated value for the dcRealTime object will be used.')
ctLockUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctLockUserTime.setStatus('current')
if mibBuilder.loadTexts: ctLockUserTime.setDescription("The user defined lock time for the History Databases. The 'lock time' allows the user to specify a time period to be the first entry timeslot for each history object to be retrieved via SNMP polling. The recommended format is 'hh:mm:ss dd/mmm/yyyy', although other formats are accepted. The time 'hh:mm:ss', is expressed as a 24-hour clock. A valid example for the long term databases is, 14:00:00 29/Jun/2003, i.e. times which are whole hours are required. In contrast a valid example for the short term databases is, 14:57:00 02/Mar/2003, i.e. times which have a minute component are accepted. The value of this object is used only if the ctLockMethod object has a value of lockUserTime. Setting this object to a time after the associated ctLockRealTime object's value is not recommended.")
ctLockRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctLockRealTime.setStatus('current')
if mibBuilder.loadTexts: ctLockRealTime.setDescription("The lock real time represents the current last time slot available for the History Databases. The real time is the last entry timeslot that it is possible to retrieve via SNMP polling. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time 'hh:mm:ss', is expressed as a 24-hour clock. An example is 14:00:00 29/May/2003. The value of this object is used only if the ctLockMethod object has a value of lockRealTime.")
dbSegment = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2))
if mibBuilder.loadTexts: dbSegment.setStatus('current')
if mibBuilder.loadTexts: dbSegment.setDescription('Sub-tree for the CODIMA Express History Segment Database objects.')
segLongTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1))
if mibBuilder.loadTexts: segLongTerm.setStatus('current')
if mibBuilder.loadTexts: segLongTerm.setDescription('Sub-tree for the CODIMA Express History Long Term Segment Database objects.')
slBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: slBaseTable.setStatus('current')
if mibBuilder.loadTexts: slBaseTable.setDescription('A table of CODIMA Express History Long Term Segment Database Base Objects. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "slbTimeStampIndex"))
if mibBuilder.loadTexts: slBaseEntry.setStatus('current')
if mibBuilder.loadTexts: slBaseEntry.setDescription('A row in the CODIMA Express History Long Term Segment Database Base Objects table. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: slbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
slbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: slbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
slbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFrames.setStatus('current')
if mibBuilder.loadTexts: slbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
slbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbBytes.setStatus('current')
if mibBuilder.loadTexts: slbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
slbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFrameSize.setStatus('current')
if mibBuilder.loadTexts: slbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
slbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: slbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
slbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: slbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
slbActiveNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbActiveNodes.setStatus('current')
if mibBuilder.loadTexts: slbActiveNodes.setDescription('Number of Active Nodes. A value of 4294967294 indicates unknown.')
slBroadcastTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: slBroadcastTable.setStatus('current')
if mibBuilder.loadTexts: slBroadcastTable.setDescription('A table of CODIMA Express History Long Term Segment Database Broadcast Objects. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Broadcast object implements statistics that are associated with Broadcasts, e.g., Broadcast Bytes, Broadcast Frames, Broadcast % Bytes (% of Broadcast bytes in relation to the total number of bytes), Broadcast % Frames (% of Broadcast frames in relation to the total number of frames). The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slBroadcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "slbcTimeStampIndex"))
if mibBuilder.loadTexts: slBroadcastEntry.setStatus('current')
if mibBuilder.loadTexts: slBroadcastEntry.setDescription('A row in the CODIMA Express History Long Term Segment Database Broadcast Objects table. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Broadcast object implements statistics that are associated with Broadcasts, e.g., Broadcast Bytes, Broadcast Frames, Broadcast % Bytes (% of Broadcast bytes in relation to the total number of bytes), Broadcast % Frames (% of Broadcast frames in relation to the total number of frames). The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slbcTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbcTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: slbcTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
slbcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbcTimeStamp.setStatus('current')
if mibBuilder.loadTexts: slbcTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
slbcBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbcBytes.setStatus('current')
if mibBuilder.loadTexts: slbcBytes.setDescription('Number of Broadcast Bytes (Port 1 and 2 - Bytes in Broadcast frames). A value of 4294967294 indicates unknown.')
slbcPercentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbcPercentBytes.setStatus('current')
if mibBuilder.loadTexts: slbcPercentBytes.setDescription('Percentage of Broadcast Bytes (Port 1 and 2 - % is in relation to the total number Bytes) i.e., Percentage of the total byte count that are bytes associated with broadcast frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
slbcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbcFrames.setStatus('current')
if mibBuilder.loadTexts: slbcFrames.setDescription('Number of Broadcast Frames (Port 1 and 2). A value of 4294967294 indicates unknown.')
slbcPercentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbcPercentFrames.setStatus('current')
if mibBuilder.loadTexts: slbcPercentFrames.setDescription('Broadcast % Frames - % of Broadcast Frames (Port 1 and 2 - % is in relation to the total number of Frames) i.e., Percentage of the total frame count that are broadcast frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
slDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 3), )
if mibBuilder.loadTexts: slDerivedTable.setStatus('current')
if mibBuilder.loadTexts: slDerivedTable.setDescription('A table of CODIMA Express History Long Term Segment Database Derived Objects. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "sldTimeStampIndex"))
if mibBuilder.loadTexts: slDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: slDerivedEntry.setDescription('A row in the CODIMA Express History Long Term Segment Database Derived Objects table. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
sldTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sldTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: sldTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
sldTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sldTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sldTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
sldUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sldUtilization.setStatus('current')
if mibBuilder.loadTexts: sldUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
sldErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sldErrorFrames.setStatus('current')
if mibBuilder.loadTexts: sldErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
slEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4), )
if mibBuilder.loadTexts: slEthernetTable.setStatus('current')
if mibBuilder.loadTexts: slEthernetTable.setDescription('A table of CODIMA Express History Long Term Segment Database Ethernet Objects. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "sleTimeStampIndex"))
if mibBuilder.loadTexts: slEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: slEthernetEntry.setDescription('A row in the CODIMA Express History Long Term Segment Database Ethernet Objects table. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
sleTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: sleTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
sleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sleTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
sleRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleRunts.setStatus('current')
if mibBuilder.loadTexts: sleRunts.setDescription('Number of Runts. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
sleJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleJabbers.setStatus('current')
if mibBuilder.loadTexts: sleJabbers.setDescription('Number of Jabber Frames. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
sleCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleCrc.setStatus('current')
if mibBuilder.loadTexts: sleCrc.setDescription('Number of CRC/Alignment Errors. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
sleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleCollisions.setStatus('current')
if mibBuilder.loadTexts: sleCollisions.setDescription('Number of Collisions. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
sleLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleLateCollisions.setStatus('current')
if mibBuilder.loadTexts: sleLateCollisions.setDescription('Number of Late Collisions. The term late collisions applies to collisions which occur late enough for the first 12 bytes of the frame to be monitored. A value of 4294967294 indicates unknown.')
slIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5), )
if mibBuilder.loadTexts: slIcmpTable.setStatus('current')
if mibBuilder.loadTexts: slIcmpTable.setDescription('A table of CODIMA Express History Long Term Segment Database ICMP Objects. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "sliTimeStampIndex"))
if mibBuilder.loadTexts: slIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: slIcmpEntry.setDescription('A table of CODIMA Express History Long Term Segment Database ICMP Objects. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
sliTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: sliTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
sliTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sliTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
sliPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliPing.setStatus('current')
if mibBuilder.loadTexts: sliPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
sliSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliSrcQuench.setStatus('current')
if mibBuilder.loadTexts: sliSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
sliRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliRedirect.setStatus('current')
if mibBuilder.loadTexts: sliRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
sliTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: sliTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
sliParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliParamProblem.setStatus('current')
if mibBuilder.loadTexts: sliParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
sliTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliTimestamp.setStatus('current')
if mibBuilder.loadTexts: sliTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
sliFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliFragTimeout.setStatus('current')
if mibBuilder.loadTexts: sliFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
sliNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: sliNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
sliHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: sliHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
sliProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: sliProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
sliPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: sliPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
sliFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliFragRequired.setStatus('current')
if mibBuilder.loadTexts: sliFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
sliSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: sliSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
sliDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: sliDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
sliDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: sliDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
sliSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: sliSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
sliNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliNetProhibited.setStatus('current')
if mibBuilder.loadTexts: sliNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
sliHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliHostProhibited.setStatus('current')
if mibBuilder.loadTexts: sliHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
sliNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: sliNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
sliHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: sliHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
sliPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliPerformance.setStatus('current')
if mibBuilder.loadTexts: sliPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
sliNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: sliNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
sliHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: sliHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
sliAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: sliAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
sliRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliRouteChange.setStatus('current')
if mibBuilder.loadTexts: sliRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
sliGrpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliGrpErrors.setStatus('current')
if mibBuilder.loadTexts: sliGrpErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
sliMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliMaintenance.setStatus('current')
if mibBuilder.loadTexts: sliMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
slPortTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6), )
if mibBuilder.loadTexts: slPortTable.setStatus('current')
if mibBuilder.loadTexts: slPortTable.setDescription('A table of CODIMA Express History Long Term Segment Database Port Object. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The Port object implements statistics that are specific to the segment that are monitored on port 1 and port 2 of the Express hardware, e.g., Port 1 Frames, Port 1 Bytes, Port 2 Frames, Port 2 Bytes. This object is most relevant when you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "slp1TimeStampIndex"))
if mibBuilder.loadTexts: slPortEntry.setStatus('current')
if mibBuilder.loadTexts: slPortEntry.setDescription('A table of CODIMA Express History Long Term Segment Database Port Object. Based on 15 minute intervals Segment statistics are gathered on the network segment to which the Express is attached. The Port object implements statistics that are specific to the segment that are monitored on port 1 and port 2 of the Express hardware, e.g., Port 1 Frames, Port 1 Bytes, Port 2 Frames, Port 2 Bytes. This object is most relevant when you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object.')
slp1TimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: slp1TimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
slp1TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1TimeStamp.setStatus('current')
if mibBuilder.loadTexts: slp1TimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
slp1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Frames.setStatus('current')
if mibBuilder.loadTexts: slp1Frames.setDescription('Number of Frames monitored on Port 1. A value of 4294967294 indicates unknown.')
slp1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Bytes.setStatus('current')
if mibBuilder.loadTexts: slp1Bytes.setDescription('Number of Bytes monitored on Port 1. A value of 4294967294 indicates unknown.')
slp1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1FrameSize.setStatus('current')
if mibBuilder.loadTexts: slp1FrameSize.setDescription('Average Frame Size in bytes for frames monitored on Port 1. A value of 4294967294 indicates unknown.')
slp1Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Utilization.setStatus('current')
if mibBuilder.loadTexts: slp1Utilization.setDescription('Percent Wire Speed for Port 1. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
slp1LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 7), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1LineSpeed.setStatus('current')
if mibBuilder.loadTexts: slp1LineSpeed.setDescription('Line speed in bits per second for Port 1. A value of 4294967294 indicates unknown.')
slp1SoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1SoftErrors.setStatus('current')
if mibBuilder.loadTexts: slp1SoftErrors.setDescription('Number of software errors for Port 1. Protocol/Soft errors are valid frames designed to report anomalies. For example the Internet protocol suite uses the Internet Control Management Protocol (ICMP) frames to report anomalies. A value of 4294967294 indicates unknown.')
slp1Runts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Runts.setStatus('current')
if mibBuilder.loadTexts: slp1Runts.setDescription('Number of Runts on Port 1. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
slp1Jabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Jabbers.setStatus('current')
if mibBuilder.loadTexts: slp1Jabbers.setDescription('Number of Jabber Frames on Port 1. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
slp1Crc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Crc.setStatus('current')
if mibBuilder.loadTexts: slp1Crc.setDescription('Number of CRC/Alignment Errors on Port 1. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
slp1Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1Collisions.setStatus('current')
if mibBuilder.loadTexts: slp1Collisions.setDescription('Number of Collisions monitored on Port 1. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
slp1LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1LateCollisions.setStatus('current')
if mibBuilder.loadTexts: slp1LateCollisions.setDescription('Number of Late Collisions monitored on Port 1. A value of 4294967294 indicates unknown.')
slp1LineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp1LineNoise.setStatus('current')
if mibBuilder.loadTexts: slp1LineNoise.setDescription('Line noise level (number of bursts) on Port 1. A value of 4294967294 indicates unknown.')
slp2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Frames.setStatus('current')
if mibBuilder.loadTexts: slp2Frames.setDescription('Number of Frames monitored on Port 2. A value of 4294967294 indicates unknown.')
slp2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Bytes.setStatus('current')
if mibBuilder.loadTexts: slp2Bytes.setDescription('Number of Bytes monitored on Port 2. A value of 4294967294 indicates unknown.')
slp2FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 17), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2FrameSize.setStatus('current')
if mibBuilder.loadTexts: slp2FrameSize.setDescription('Average Frame Size, in bytes, for frames monitored on Port 2. A value of 4294967294 indicates unknown.')
slp2Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Utilization.setStatus('current')
if mibBuilder.loadTexts: slp2Utilization.setDescription('Percent Wire Speed for Port 2. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
slp2LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 19), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2LineSpeed.setStatus('current')
if mibBuilder.loadTexts: slp2LineSpeed.setDescription('Line speed in bits per second for Port 2. A value of 4294967294 indicates unknown.')
slp2SoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2SoftErrors.setStatus('current')
if mibBuilder.loadTexts: slp2SoftErrors.setDescription('Number of software errors for Port 2. Protocol/Soft errors are valid frames designed to report anomalies. For example the Internet protocol suite uses the Internet Control Management Protocol (ICMP) frames to report anomalies. A value of 4294967294 indicates unknown.')
slp2Runts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Runts.setStatus('current')
if mibBuilder.loadTexts: slp2Runts.setDescription('Number of Runts on Port 2. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
slp2Jabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Jabbers.setStatus('current')
if mibBuilder.loadTexts: slp2Jabbers.setDescription('Number of Jabber Frames on Port 2. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
slp2Crc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Crc.setStatus('current')
if mibBuilder.loadTexts: slp2Crc.setDescription('Number of CRC/Alignment Errors on Port 2. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
slp2Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2Collisions.setStatus('current')
if mibBuilder.loadTexts: slp2Collisions.setDescription('Number of Collisions monitored on Port 2. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
slp2LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2LateCollisions.setStatus('current')
if mibBuilder.loadTexts: slp2LateCollisions.setDescription('Number of Late Collisions monitored on Port 2. A value of 4294967294 indicates unknown.')
slp2LineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slp2LineNoise.setStatus('current')
if mibBuilder.loadTexts: slp2LineNoise.setDescription('Line noise level (number of bursts) on Port 2. A value of 4294967294 indicates unknown.')
segShortTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2))
if mibBuilder.loadTexts: segShortTerm.setStatus('current')
if mibBuilder.loadTexts: segShortTerm.setDescription('Sub-tree for the CODIMA Express History Short Term Segment Database objects.')
ssBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ssBaseTable.setStatus('current')
if mibBuilder.loadTexts: ssBaseTable.setDescription('A table of CODIMA Express History Short Term Segment Database Base Objects. Based on 15 second intervals, Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ssbTimeStampIndex"))
if mibBuilder.loadTexts: ssBaseEntry.setStatus('current')
if mibBuilder.loadTexts: ssBaseEntry.setDescription('A row in the CODIMA Express History Short Term Segment Database Base Objects table. Based on 15 second intervals, Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object. Entries cannot be created or deleted via SNMP operatio')
ssbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ssbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ssbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ssbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ssbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbFrames.setStatus('current')
if mibBuilder.loadTexts: ssbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
ssbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbBytes.setStatus('current')
if mibBuilder.loadTexts: ssbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
ssbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbFrameSize.setStatus('current')
if mibBuilder.loadTexts: ssbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
ssbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: ssbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
ssbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: ssbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
ssbActiveNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbActiveNodes.setStatus('current')
if mibBuilder.loadTexts: ssbActiveNodes.setDescription('Number of Active Nodes. A value of 4294967294 indicates unknown.')
ssBroadcastTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: ssBroadcastTable.setStatus('current')
if mibBuilder.loadTexts: ssBroadcastTable.setDescription('A table of CODIMA Express History Short Term Segment Database Broadcast Objects. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Broadcast object implements statistics that are associated with Broadcasts, e.g., Broadcast Bytes, Broadcast Frames, Broadcast % Bytes (% of Broadcast bytes in relation to the total number of bytes), Broadcast % Frames (% of Broadcast frames in relation to the total number of frames). The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssBroadcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ssbcTimeStampIndex"))
if mibBuilder.loadTexts: ssBroadcastEntry.setStatus('current')
if mibBuilder.loadTexts: ssBroadcastEntry.setDescription('A row in the CODIMA Express History Short Term Segment Database Broadcast Objects table. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Broadcast object implements statistics that are associated with Broadcasts, e.g., Broadcast Bytes, Broadcast Frames, Broadcast % Bytes (% of Broadcast bytes in relation to the total number of bytes), Broadcast % Frames (% of Broadcast frames in relation to the total number of frames). The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssbcTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbcTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ssbcTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ssbcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbcTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ssbcTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ssbcBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbcBytes.setStatus('current')
if mibBuilder.loadTexts: ssbcBytes.setDescription('Number of Broadcast Bytes (Port 1 and 2 - Bytes in Broadcast frames). A value of 4294967294 indicates unknown.')
ssbcBytesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbcBytesPercent.setStatus('current')
if mibBuilder.loadTexts: ssbcBytesPercent.setDescription('Percentage of Broadcast Bytes (Port 1 and 2 - % is in relation to the total number Bytes) i.e., Percentage of the total byte count that are bytes associated with broadcast frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ssbcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbcFrames.setStatus('current')
if mibBuilder.loadTexts: ssbcFrames.setDescription('Number of Broadcast Frames (Port 1 and 2). A value of 4294967294 indicates unknown.')
ssbcFramesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbcFramesPercent.setStatus('current')
if mibBuilder.loadTexts: ssbcFramesPercent.setDescription('Broadcast % Frames - % of Broadcast Frames (Port 1 and 2 - % is in relation to the total number of Frames) i.e., Percentage of the total frame count that are broadcast frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ssDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: ssDerivedTable.setStatus('current')
if mibBuilder.loadTexts: ssDerivedTable.setDescription('A table of CODIMA Express History Short Term Segment Database Derived Objects. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ssdTimeStampIndex"))
if mibBuilder.loadTexts: ssDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: ssDerivedEntry.setDescription('A row in the CODIMA Express History Short Term Segment Database Derived Objects table. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssdTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ssdTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ssdTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ssdTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ssdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdUtilization.setStatus('current')
if mibBuilder.loadTexts: ssdUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ssdErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdErrorFrames.setStatus('current')
if mibBuilder.loadTexts: ssdErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ssEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: ssEthernetTable.setStatus('current')
if mibBuilder.loadTexts: ssEthernetTable.setDescription('A table of CODIMA Express History Short Term Segment Database Ethernet Objects. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "sseTimeStampIndex"))
if mibBuilder.loadTexts: ssEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: ssEthernetEntry.setDescription('A row in the CODIMA Express History Short Term Segment Database Ethernet Objects table. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
sseTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: sseTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
sseTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sseTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
sseRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseRunts.setStatus('current')
if mibBuilder.loadTexts: sseRunts.setDescription('Number of Runts. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
sseJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseJabbers.setStatus('current')
if mibBuilder.loadTexts: sseJabbers.setDescription('Number of Jabber Frames. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
sseCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseCrc.setStatus('current')
if mibBuilder.loadTexts: sseCrc.setDescription('Number of CRC/Alignment Errors. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
sseCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseCollisions.setStatus('current')
if mibBuilder.loadTexts: sseCollisions.setDescription('Number of Collisions. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
sseLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseLateCollisions.setStatus('current')
if mibBuilder.loadTexts: sseLateCollisions.setDescription('Number of Late Collisions. The term late collisions applies to collisions which occur late enough for the first 12 bytes of the frame to be monitored. A value of 4294967294 indicates unknown.')
ssIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5), )
if mibBuilder.loadTexts: ssIcmpTable.setStatus('current')
if mibBuilder.loadTexts: ssIcmpTable.setDescription('A table of CODIMA Express History Short Term Segment Database ICMP Objects. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ssiTimeStampIndex"))
if mibBuilder.loadTexts: ssIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: ssIcmpEntry.setDescription('A table of CODIMA Express History Short Term Segment Database ICMP Objects. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The statistics in this databases are calculated by adding Port 1 statistics and Port 2 statistics together. Port 2 however will only be active if you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssiTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ssiTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ssiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ssiTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ssiPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiPing.setStatus('current')
if mibBuilder.loadTexts: ssiPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
ssiSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSrcQuench.setStatus('current')
if mibBuilder.loadTexts: ssiSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
ssiRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiRedirect.setStatus('current')
if mibBuilder.loadTexts: ssiRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
ssiTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: ssiTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
ssiParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiParamProblem.setStatus('current')
if mibBuilder.loadTexts: ssiParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
ssiTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiTimestamp.setStatus('current')
if mibBuilder.loadTexts: ssiTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
ssiFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiFragTimeout.setStatus('current')
if mibBuilder.loadTexts: ssiFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
ssiNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: ssiNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ssiHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: ssiHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ssiProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: ssiProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ssiPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: ssiPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ssiFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiFragRequired.setStatus('current')
if mibBuilder.loadTexts: ssiFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
ssiSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: ssiSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
ssiDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: ssiDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
ssiDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: ssiDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
ssiSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: ssiSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
ssiNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiNetProhibited.setStatus('current')
if mibBuilder.loadTexts: ssiNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
ssiHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiHostProhibited.setStatus('current')
if mibBuilder.loadTexts: ssiHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
ssiNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: ssiNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ssiHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: ssiHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ssiPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiPerformance.setStatus('current')
if mibBuilder.loadTexts: ssiPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
ssiNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ssiNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
ssiHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ssiHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
ssiAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ssiAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
ssiRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiRouteChange.setStatus('current')
if mibBuilder.loadTexts: ssiRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
ssiErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiErrors.setStatus('current')
if mibBuilder.loadTexts: ssiErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
ssiMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiMaintenance.setStatus('current')
if mibBuilder.loadTexts: ssiMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
ssPortTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: ssPortTable.setStatus('current')
if mibBuilder.loadTexts: ssPortTable.setDescription('A table of CODIMA Express History Short Term Segment Database Port Object. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The Port object implements statistics that are specific to the segment that are monitored on port 1 and port 2 of the Express hardware, e.g., Port 1 Frames, Port 1 Bytes, Port 2 Frames, Port 2 Bytes. This object is most relevant when you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
ssPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "sspTimeStampIndex"))
if mibBuilder.loadTexts: ssPortEntry.setStatus('current')
if mibBuilder.loadTexts: ssPortEntry.setDescription('A table of CODIMA Express History Short Term Segment Database Port Object. Based on 15 second intervals Segment statistics are gathered on the network segment to which the Express is attached. The Port object implements statistics that are specific to the segment that are monitored on port 1 and port 2 of the Express hardware, e.g., Port 1 Frames, Port 1 Bytes, Port 2 Frames, Port 2 Bytes. This object is most relevant when you are using the Express as a dual port analyzer, i.e., monitoring full duplex. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object.')
sspTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: sspTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
sspTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sspTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ssp1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Frames.setStatus('current')
if mibBuilder.loadTexts: ssp1Frames.setDescription('Number of Frames monitored on Port 1. A value of 4294967294 indicates unknown.')
ssp1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Bytes.setStatus('current')
if mibBuilder.loadTexts: ssp1Bytes.setDescription('Number of Bytes monitored on Port 1. A value of 4294967294 indicates unknown.')
ssp1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1FrameSize.setStatus('current')
if mibBuilder.loadTexts: ssp1FrameSize.setDescription('Average Frame Size, in bytes, for frames monitored on Port 1. A value of 4294967294 indicates unknown.')
ssp1Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Utilization.setStatus('current')
if mibBuilder.loadTexts: ssp1Utilization.setDescription('Percent Wire Speed for Port 1. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ssp1LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 7), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1LineSpeed.setStatus('current')
if mibBuilder.loadTexts: ssp1LineSpeed.setDescription('Line speed in bits per second for Port 1. A value of 4294967294 indicates unknown.')
ssp1SoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1SoftErrors.setStatus('current')
if mibBuilder.loadTexts: ssp1SoftErrors.setDescription('Number of software errors for Port 1. Protocol/Soft errors are valid frames designed to report anomalies. For example the Internet protocol suite uses the Internet Control Management Protocol (ICMP) frames to report anomalies. A value of 4294967294 indicates unknown.')
ssp1Runts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Runts.setStatus('current')
if mibBuilder.loadTexts: ssp1Runts.setDescription('Number of Runts on Port 1. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
ssp1Jabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Jabbers.setStatus('current')
if mibBuilder.loadTexts: ssp1Jabbers.setDescription('Number of Jabber Frames on Port 1. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
ssp1Crc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Crc.setStatus('current')
if mibBuilder.loadTexts: ssp1Crc.setDescription('Number of CRC/Alignment Errors on Port 1. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
ssp1Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1Collisions.setStatus('current')
if mibBuilder.loadTexts: ssp1Collisions.setDescription('Number of Collisions monitored on Port 1. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
ssp1LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1LateCollisions.setStatus('current')
if mibBuilder.loadTexts: ssp1LateCollisions.setDescription('Number of Late Collisions monitored on Port 1. A value of 4294967294 indicates unknown.')
ssp1LineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp1LineNoise.setStatus('current')
if mibBuilder.loadTexts: ssp1LineNoise.setDescription('Line noise level (number of bursts) on Port 1. A value of 4294967294 indicates unknown.')
ssp2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Frames.setStatus('current')
if mibBuilder.loadTexts: ssp2Frames.setDescription('Number of Frames monitored on Port 2. A value of 4294967294 indicates unknown.')
ssp2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Bytes.setStatus('current')
if mibBuilder.loadTexts: ssp2Bytes.setDescription('Number of Bytes monitored on Port 2. A value of 4294967294 indicates unknown.')
ssp2FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 17), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2FrameSize.setStatus('current')
if mibBuilder.loadTexts: ssp2FrameSize.setDescription('Average Frame Size, in bytes, for frames monitored on Port 2. A value of 4294967294 indicates unknown.')
ssp2Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Utilization.setStatus('current')
if mibBuilder.loadTexts: ssp2Utilization.setDescription('Percent Wire Speed for Port 2. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ssp2LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 19), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2LineSpeed.setStatus('current')
if mibBuilder.loadTexts: ssp2LineSpeed.setDescription('Line speed in bits per second for Port 2. A value of 4294967294 indicates unknown.')
ssp2SoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2SoftErrors.setStatus('current')
if mibBuilder.loadTexts: ssp2SoftErrors.setDescription('Number of software errors for Port 2. Protocol/Soft errors are valid frames designed to report anomalies. For example the Internet protocol suite uses the Internet Control Management Protocol (ICMP) frames to report anomalies. A value of 4294967294 indicates unknown.')
ssp2Runts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Runts.setStatus('current')
if mibBuilder.loadTexts: ssp2Runts.setDescription('Number of Runts on Port 2. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
ssp2Jabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Jabbers.setStatus('current')
if mibBuilder.loadTexts: ssp2Jabbers.setDescription('Number of Jabber Frames on Port 2. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
ssp2Crc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Crc.setStatus('current')
if mibBuilder.loadTexts: ssp2Crc.setDescription('Number of CRC/Alignment Errors on Port 2. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
ssp2Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2Collisions.setStatus('current')
if mibBuilder.loadTexts: ssp2Collisions.setDescription('Number of Collisions monitored on Port 2. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
ssp2LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2LateCollisions.setStatus('current')
if mibBuilder.loadTexts: ssp2LateCollisions.setDescription('Number of Late Collisions monitored on Port 2. A value of 4294967294 indicates unknown.')
ssp2LineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 2, 2, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssp2LineNoise.setStatus('current')
if mibBuilder.loadTexts: ssp2LineNoise.setDescription('Line noise level (number of bursts) on Port 2. A value of 4294967294 indicates unknown.')
dbMac = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3))
if mibBuilder.loadTexts: dbMac.setStatus('current')
if mibBuilder.loadTexts: dbMac.setDescription('Sub-tree for the CODIMA Express History MAC Database bjects.')
macLongTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1))
if mibBuilder.loadTexts: macLongTerm.setStatus('current')
if mibBuilder.loadTexts: macLongTerm.setDescription('Sub-tree for the CODIMA Express History Long Term MAC Database objects.')
mlBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: mlBaseTable.setStatus('current')
if mibBuilder.loadTexts: mlBaseTable.setDescription('A table of CODIMA Express History Long Term MAC Database Base Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mlBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mlbMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mlbTimeStampIndex"))
if mibBuilder.loadTexts: mlBaseEntry.setStatus('current')
if mibBuilder.loadTexts: mlBaseEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Base Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mlbMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbMacIndex.setStatus('current')
if mibBuilder.loadTexts: mlbMacIndex.setDescription('Identifies the MAC address of this row.')
mlbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mlbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mlbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mlbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mlbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbFrames.setStatus('current')
if mibBuilder.loadTexts: mlbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
mlbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbBytes.setStatus('current')
if mibBuilder.loadTexts: mlbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
mlbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbFrameSize.setStatus('current')
if mibBuilder.loadTexts: mlbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
mlbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: mlbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
mlbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: mlbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
mlDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: mlDerivedTable.setStatus('current')
if mibBuilder.loadTexts: mlDerivedTable.setDescription('A table of CODIMA Express History Long Term MAC Database Derived Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mlDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mldMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mldTimeStampIndex"))
if mibBuilder.loadTexts: mlDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: mlDerivedEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Derived Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mldMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldMacIndex.setStatus('current')
if mibBuilder.loadTexts: mldMacIndex.setDescription('Identifies the MAC address of this row.')
mldTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mldTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mldTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mldTimeStamp.setDescription('A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row, in the form Fri May 09 14:58:15 2003.')
mldUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldUtilization.setStatus('current')
if mibBuilder.loadTexts: mldUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mldErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldErrorFrames.setStatus('current')
if mibBuilder.loadTexts: mldErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mlDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3), )
if mibBuilder.loadTexts: mlDuplexTable.setStatus('current')
if mibBuilder.loadTexts: mlDuplexTable.setDescription('A table of CODIMA Express History Long Term MAC Database Duplex Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mlDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mlduMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mlduTimeStampIndex"))
if mibBuilder.loadTexts: mlDuplexEntry.setStatus('current')
if mibBuilder.loadTexts: mlDuplexEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Duplex Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mlduMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduMacIndex.setStatus('current')
if mibBuilder.loadTexts: mlduMacIndex.setDescription('Identifies the MAC address of this row.')
mlduTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mlduTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mlduTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mlduTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mlduTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduTxFrames.setStatus('current')
if mibBuilder.loadTexts: mlduTxFrames.setDescription('Number of Frames Transmitted. A value of 4294967294 indicates unknown.')
mlduTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduTxBytes.setStatus('current')
if mibBuilder.loadTexts: mlduTxBytes.setDescription('Number of Bytes Transmitted. A value of 4294967294 indicates unknown.')
mlduTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduTxFrameSize.setStatus('current')
if mibBuilder.loadTexts: mlduTxFrameSize.setDescription('Average Frame Size in bytes Transmitted. A value of 4294967294 indicates unknown.')
mlduTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduTxUtilization.setStatus('current')
if mibBuilder.loadTexts: mlduTxUtilization.setDescription('Percent Utilization Transmitted (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mlduRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduRxFrames.setStatus('current')
if mibBuilder.loadTexts: mlduRxFrames.setDescription('Number of Frames Received. A value of 4294967294 indicates unknown.')
mlduRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduRxBytes.setStatus('current')
if mibBuilder.loadTexts: mlduRxBytes.setDescription('Number of Bytes Received. A value of 4294967294 indicates unknown.')
mlduRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 10), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduRxFrameSize.setStatus('current')
if mibBuilder.loadTexts: mlduRxFrameSize.setDescription('Average Frame Size, in bytes, Received. A value of 4294967294 indicates unknown.')
mlduRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlduRxUtilization.setStatus('current')
if mibBuilder.loadTexts: mlduRxUtilization.setDescription('Percent Utilization Received (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mlEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4), )
if mibBuilder.loadTexts: mlEthernetTable.setStatus('current')
if mibBuilder.loadTexts: mlEthernetTable.setDescription('A table of CODIMA Express History Long Term MAC Database Ethernet Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mlEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mleMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mleTimeStampIndex"))
if mibBuilder.loadTexts: mlEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: mlEthernetEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Ethernet Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mleMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleMacIndex.setStatus('current')
if mibBuilder.loadTexts: mleMacIndex.setDescription('Identifies the MAC address of this row.')
mleTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mleTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mleTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mleRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleRunts.setStatus('current')
if mibBuilder.loadTexts: mleRunts.setDescription('Number of Runts. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
mleJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleJabbers.setStatus('current')
if mibBuilder.loadTexts: mleJabbers.setDescription('Number of Jabber Frames. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
mleCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleCrc.setStatus('current')
if mibBuilder.loadTexts: mleCrc.setDescription('Number of CRC/Alignment Errors. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
mleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleCollisions.setStatus('current')
if mibBuilder.loadTexts: mleCollisions.setDescription('Number of Collisions. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
mleLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mleLateCollisions.setStatus('current')
if mibBuilder.loadTexts: mleLateCollisions.setDescription('Number of Late Collisions. The term late collisions applies to collisions which occur late enough for the first 12 bytes of the frame to be monitored. A value of 4294967294 indicates unknown.')
mlIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5), )
if mibBuilder.loadTexts: mlIcmpTable.setStatus('current')
if mibBuilder.loadTexts: mlIcmpTable.setDescription('A table of CODIMA Express History Long Term MAC Database ICMP Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mlIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mliMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mliTimeStampIndex"))
if mibBuilder.loadTexts: mlIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: mlIcmpEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database ICMP Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mliMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliMacIndex.setStatus('current')
if mibBuilder.loadTexts: mliMacIndex.setDescription('Identifies the MAC address of this row.')
mliTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mliTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mliTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mliTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mliPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliPing.setStatus('current')
if mibBuilder.loadTexts: mliPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
mliSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliSrcQuench.setStatus('current')
if mibBuilder.loadTexts: mliSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
mliRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliRedirect.setStatus('current')
if mibBuilder.loadTexts: mliRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
mliTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: mliTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
mliParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliParamProblem.setStatus('current')
if mibBuilder.loadTexts: mliParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
mliTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliTimestamp.setStatus('current')
if mibBuilder.loadTexts: mliTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
mliFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliFragTimeout.setStatus('current')
if mibBuilder.loadTexts: mliFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
mliNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: mliNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
mliHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: mliHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
mliProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: mliProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
mliPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: mliPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
mliFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliFragRequired.setStatus('current')
if mibBuilder.loadTexts: mliFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
mliSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: mliSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
mliDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: mliDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
mliDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: mliDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
mliSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: mliSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
mliNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliNetProhibited.setStatus('current')
if mibBuilder.loadTexts: mliNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
mliHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliHostProhibited.setStatus('current')
if mibBuilder.loadTexts: mliHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
mliNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: mliNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
mliHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: mliHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
mliPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliPerformance.setStatus('current')
if mibBuilder.loadTexts: mliPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
mliNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: mliNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
mliHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: mliHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
mliAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: mliAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
mliRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliRouteChange.setStatus('current')
if mibBuilder.loadTexts: mliRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
mliErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliErrors.setStatus('current')
if mibBuilder.loadTexts: mliErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
mliMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mliMaintenance.setStatus('current')
if mibBuilder.loadTexts: mliMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
mlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6), )
if mibBuilder.loadTexts: mlProtocolTable.setStatus('current')
if mibBuilder.loadTexts: mlProtocolTable.setDescription('A table of CODIMA Express History Long Term MAC Database Protocol Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mlpMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mlpTimeStampIndex"))
if mibBuilder.loadTexts: mlProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: mlProtocolEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Base Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mlpMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpMacIndex.setStatus('current')
if mibBuilder.loadTexts: mlpMacIndex.setDescription('Identifies the MAC address of this row.')
mlpTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mlpTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mlpTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mlpTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mlpNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpNovell.setStatus('current')
if mibBuilder.loadTexts: mlpNovell.setDescription('The number of Novell Frames. A value of 4294967294 indicates unknown.')
mlpSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpSnmp.setStatus('current')
if mibBuilder.loadTexts: mlpSnmp.setDescription('The number of Simple Network Management Protocol (SNMP) Frames. A value of 4294967294 indicates unknown.')
mlpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpRouting.setStatus('current')
if mibBuilder.loadTexts: mlpRouting.setDescription('The number of Routing Frames. e.g. RIP, OSPF etc. A value of 4294967294 indicates unknown.')
mlpWww = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpWww.setStatus('current')
if mibBuilder.loadTexts: mlpWww.setDescription('The number of World Wide Web Frames. e.g. HyperText Transfer Protocol (HTTP). A value of 4294967294 indicates unknown.')
mlpIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpIcmp.setStatus('current')
if mibBuilder.loadTexts: mlpIcmp.setDescription('The number of Internet Control Message Protocol (ICMP) Frames. A value of 4294967294 indicates unknown.')
mlpIso = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpIso.setStatus('current')
if mibBuilder.loadTexts: mlpIso.setDescription('The number of International Standards Organization (ISO) Frames. A value of 4294967294 indicates unknown.')
mlpMail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpMail.setStatus('current')
if mibBuilder.loadTexts: mlpMail.setDescription('The number of Mail Frames. e.g. Simple Mail Transfer Protocol (SMTP). A value of 4294967294 indicates unknown.')
mlpNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpNetbios.setStatus('current')
if mibBuilder.loadTexts: mlpNetbios.setDescription('The number of NetBIOS Frames. e.g. WINS or SMB protocol. A value of 4294967294 indicates unknown.')
mlpDns = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpDns.setStatus('current')
if mibBuilder.loadTexts: mlpDns.setDescription('The number of Domain Name System (DNS) Frames. A value of 4294967294 indicates unknown.')
mlpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpIp.setStatus('current')
if mibBuilder.loadTexts: mlpIp.setDescription('The number of Internet Protocol (IP) Frames. A value of 4294967294 indicates unknown.')
mlpVoip = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpVoip.setStatus('current')
if mibBuilder.loadTexts: mlpVoip.setDescription('The number of Voice Over Internet Protocol (VoIP) Frames. A value of 4294967294 indicates unknown.')
mlpLayer3Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpLayer3Traffic.setStatus('current')
if mibBuilder.loadTexts: mlpLayer3Traffic.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mlpIpData = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpIpData.setStatus('current')
if mibBuilder.loadTexts: mlpIpData.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mlpApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpApplications.setStatus('current')
if mibBuilder.loadTexts: mlpApplications.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mlpIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpIpControl.setStatus('current')
if mibBuilder.loadTexts: mlpIpControl.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mlpManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpManagement.setStatus('current')
if mibBuilder.loadTexts: mlpManagement.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
macShortTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2))
if mibBuilder.loadTexts: macShortTerm.setStatus('current')
if mibBuilder.loadTexts: macShortTerm.setDescription('Sub-tree for the CODIMA Express History Short Term MAC Database objects.')
msBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: msBaseTable.setStatus('current')
if mibBuilder.loadTexts: msBaseTable.setDescription('A table of CODIMA Express History Short Term MAC Database Base Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "msbMacIndex"), (0, "CODIMA-EXPRESS-MIB", "msbTimeStampIndex"))
if mibBuilder.loadTexts: msBaseEntry.setStatus('current')
if mibBuilder.loadTexts: msBaseEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database Base Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
msbMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbMacIndex.setStatus('current')
if mibBuilder.loadTexts: msbMacIndex.setDescription('Identifies the MAC address of this row.')
msbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: msbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
msbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: msbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
msbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbFrames.setStatus('current')
if mibBuilder.loadTexts: msbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
msbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbBytes.setStatus('current')
if mibBuilder.loadTexts: msbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
msbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: msbFrameSize.setStatus('current')
if mibBuilder.loadTexts: msbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
msbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: msbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
msbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: msbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
msDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: msDerivedTable.setStatus('current')
if mibBuilder.loadTexts: msDerivedTable.setDescription('A table of CODIMA Express History Short Term MAC Database Derived Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "msdMacIndex"), (0, "CODIMA-EXPRESS-MIB", "msdTimeStampIndex"))
if mibBuilder.loadTexts: msDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: msDerivedEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database Derived Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
msdMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdMacIndex.setStatus('current')
if mibBuilder.loadTexts: msdMacIndex.setDescription('Identifies the MAC address of this row.')
msdTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: msdTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
msdTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdTimeStamp.setStatus('current')
if mibBuilder.loadTexts: msdTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
msdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdUtilization.setStatus('current')
if mibBuilder.loadTexts: msdUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
msdErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdErrorFrames.setStatus('current')
if mibBuilder.loadTexts: msdErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
msDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: msDuplexTable.setStatus('current')
if mibBuilder.loadTexts: msDuplexTable.setDescription('A table of CODIMA Express History Short Term MAC Database Duplex Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "msdpMacIndex"), (0, "CODIMA-EXPRESS-MIB", "msdpTimeStampIndex"))
if mibBuilder.loadTexts: msDuplexEntry.setStatus('current')
if mibBuilder.loadTexts: msDuplexEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database Duplex Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
msdpMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpMacIndex.setStatus('current')
if mibBuilder.loadTexts: msdpMacIndex.setDescription('Identifies the MAC address of this row.')
msdpTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: msdpTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
msdpTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpTimeStamp.setStatus('current')
if mibBuilder.loadTexts: msdpTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
msdpTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpTxFrames.setStatus('current')
if mibBuilder.loadTexts: msdpTxFrames.setDescription('Number of Frames Transmitted. A value of 4294967294 indicates unknown.')
msdpTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpTxBytes.setStatus('current')
if mibBuilder.loadTexts: msdpTxBytes.setDescription('Number of Bytes Transmitted. A value of 4294967294 indicates unknown.')
msdpTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpTxFrameSize.setStatus('current')
if mibBuilder.loadTexts: msdpTxFrameSize.setDescription('Average Frame Size, in bytes, Transmitted. A value of 4294967294 indicates unknown.')
msdpTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpTxUtilization.setStatus('current')
if mibBuilder.loadTexts: msdpTxUtilization.setDescription('Percent Utilization Transmitted (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
msdpRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpRxFrames.setStatus('current')
if mibBuilder.loadTexts: msdpRxFrames.setDescription('Number of Frames Received. A value of 4294967294 indicates unknown.')
msdpRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpRxBytes.setStatus('current')
if mibBuilder.loadTexts: msdpRxBytes.setDescription('Number of Bytes Received. A value of 4294967294 indicates unknown.')
msdpRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 10), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpRxFrameSize.setStatus('current')
if mibBuilder.loadTexts: msdpRxFrameSize.setDescription('Average Frame Size, in bytes, Received. A value of 4294967294 indicates unknown.')
msdpRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdpRxUtilization.setStatus('current')
if mibBuilder.loadTexts: msdpRxUtilization.setDescription('Percent Utilization Received (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
msEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: msEthernetTable.setStatus('current')
if mibBuilder.loadTexts: msEthernetTable.setDescription('A table of CODIMA Express History Short Term MAC Database Ethernet Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mseMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mseTimeStampIndex"))
if mibBuilder.loadTexts: msEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: msEthernetEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database Ethernet Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Ethernet object implements statistics that are specific to Ethernet Networks, e.g., Collisions, Jabbers, Runts, CRC errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mseMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseMacIndex.setStatus('current')
if mibBuilder.loadTexts: mseMacIndex.setDescription('Identifies the MAC address of this row.')
mseTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mseTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mseTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mseTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mseRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseRunts.setStatus('current')
if mibBuilder.loadTexts: mseRunts.setDescription('Number of Runts. Runts are frames which are smaller than the Ethernet minimum frames size of 64 bytes. A value of 4294967294 indicates unknown.')
mseJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseJabbers.setStatus('current')
if mibBuilder.loadTexts: mseJabbers.setDescription('Number of Jabber Frames. Jabbers are frames which exceed the Ethernet maximum packets size of 1518, they are most often caused by faulty transceivers which send spurious noise onto the network. A value of 4294967294 indicates unknown.')
mseCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseCrc.setStatus('current')
if mibBuilder.loadTexts: mseCrc.setDescription('Number of CRC/Alignment Errors. CRC errors are frames which have been damaged. The Cyclic Redundancy Checksum used to confirm the validity of the frames contents shows that the frame is not valid. Alignment Errors are frames which are misaligned, a frame which does not end on an 8-bit boundary is considered an Alignment Error. A value of 4294967294 indicates unknown.')
mseCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseCollisions.setStatus('current')
if mibBuilder.loadTexts: mseCollisions.setDescription('Number of Collisions. Collisions are the result of two workstations trying to use shared a transmission medium (cable) simultaneously, e.g., using Ethernet CSMA/CD. The electrical signals, which carry the information the workstations are sending, bump into each other, ruining both signals. This means both workstations will have to re-transmit their information. In most systems, a built-in delay will make sure the collision does not occur again. A value of 4294967294 indicates unknown.')
mseLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mseLateCollisions.setStatus('current')
if mibBuilder.loadTexts: mseLateCollisions.setDescription('Number of Late Collisions. The term late collisions applies to collisions which occur late enough for the first 12 bytes of the frame to be monitored. A value of 4294967294 indicates unknown.')
msIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5), )
if mibBuilder.loadTexts: msIcmpTable.setStatus('current')
if mibBuilder.loadTexts: msIcmpTable.setDescription('A table of CODIMA Express History Short Term MAC Database ICMP Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "msiMacIndex"), (0, "CODIMA-EXPRESS-MIB", "msiTimeStampIndex"))
if mibBuilder.loadTexts: msIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: msIcmpEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database ICMP Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiMacIndex.setStatus('current')
if mibBuilder.loadTexts: msiMacIndex.setDescription('Identifies the MAC address of this row.')
msiTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: msiTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
msiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiTimeStamp.setStatus('current')
if mibBuilder.loadTexts: msiTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
msiPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiPing.setStatus('current')
if mibBuilder.loadTexts: msiPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
msiSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiSrcQuench.setStatus('current')
if mibBuilder.loadTexts: msiSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
msiRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiRedirect.setStatus('current')
if mibBuilder.loadTexts: msiRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
msiTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: msiTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
msiParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiParamProblem.setStatus('current')
if mibBuilder.loadTexts: msiParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
msiTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiTimestamp.setStatus('current')
if mibBuilder.loadTexts: msiTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
msiFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiFragTimeout.setStatus('current')
if mibBuilder.loadTexts: msiFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
msiNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: msiNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
msiHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: msiHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
msiProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: msiProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
msiPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: msiPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
msiFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiFragRequired.setStatus('current')
if mibBuilder.loadTexts: msiFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
msiSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: msiSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
msiDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: msiDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
msiDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: msiDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
msiSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: msiSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
msiNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiNetProhibited.setStatus('current')
if mibBuilder.loadTexts: msiNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
msiHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiHostProhibited.setStatus('current')
if mibBuilder.loadTexts: msiHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
msiNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: msiNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
msiHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: msiHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
msiPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiPerformance.setStatus('current')
if mibBuilder.loadTexts: msiPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
msiNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: msiNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
msiHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: msiHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
msiAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: msiAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
msiRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiRouteChange.setStatus('current')
if mibBuilder.loadTexts: msiRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
msiErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiErrors.setStatus('current')
if mibBuilder.loadTexts: msiErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
msiMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msiMaintenance.setStatus('current')
if mibBuilder.loadTexts: msiMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
msProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: msProtocolTable.setStatus('current')
if mibBuilder.loadTexts: msProtocolTable.setDescription('A table of CODIMA Express History Short Term MAC Database Protocol Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
msProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mspMacIndex"), (0, "CODIMA-EXPRESS-MIB", "mspTimeStampIndex"))
if mibBuilder.loadTexts: msProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: msProtocolEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database Protocol Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mspMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspMacIndex.setStatus('current')
if mibBuilder.loadTexts: mspMacIndex.setDescription('Identifies the MAC address of this row.')
mspTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mspTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mspTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mspTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mspNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspNovell.setStatus('current')
if mibBuilder.loadTexts: mspNovell.setDescription('The number of Novell Frames. A value of 4294967294 indicates unknown.')
mspSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspSnmp.setStatus('current')
if mibBuilder.loadTexts: mspSnmp.setDescription('The number of Simple Network Management Protocol (SNMP) Frames. A value of 4294967294 indicates unknown.')
mspRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspRouting.setStatus('current')
if mibBuilder.loadTexts: mspRouting.setDescription('The number of Routing Frames. e.g. RIP, OSPF etc. A value of 4294967294 indicates unknown.')
mspWww = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspWww.setStatus('current')
if mibBuilder.loadTexts: mspWww.setDescription('The number of World Wide Web Frames. e.g. HyperText Transfer Protocol (HTTP). A value of 4294967294 indicates unknown.')
mspIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspIcmp.setStatus('current')
if mibBuilder.loadTexts: mspIcmp.setDescription('The number of Internet Control Message Protocol (ICMP) Frames. A value of 4294967294 indicates unknown.')
mspIso = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspIso.setStatus('current')
if mibBuilder.loadTexts: mspIso.setDescription('The number of International Standards Organization (ISO) Frames. A value of 4294967294 indicates unknown.')
mspMail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspMail.setStatus('current')
if mibBuilder.loadTexts: mspMail.setDescription('The number of Mail Frames. e.g. Simple Mail Transfer Protocol (SMTP). A value of 4294967294 indicates unknown.')
mspNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspNetbios.setStatus('current')
if mibBuilder.loadTexts: mspNetbios.setDescription('The number of NetBIOS Frames. e.g. WINS or SMB protocol. A value of 4294967294 indicates unknown.')
mspDns = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspDns.setStatus('current')
if mibBuilder.loadTexts: mspDns.setDescription('The number of Domain Name System (DNS) Frames. A value of 4294967294 indicates unknown.')
mspIp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspIp.setStatus('current')
if mibBuilder.loadTexts: mspIp.setDescription('The number of Internet Protocol (IP) Frames. A value of 4294967294 indicates unknown.')
mspVoip = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspVoip.setStatus('current')
if mibBuilder.loadTexts: mspVoip.setDescription('The number of Voice Over Internet Protocol (VoIP) Frames. A value of 4294967294 indicates unknown.')
mspLayer3Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspLayer3Traffic.setStatus('current')
if mibBuilder.loadTexts: mspLayer3Traffic.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mspIpData = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspIpData.setStatus('current')
if mibBuilder.loadTexts: mspIpData.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mspApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspApplications.setStatus('current')
if mibBuilder.loadTexts: mspApplications.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mspIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspIpControl.setStatus('current')
if mibBuilder.loadTexts: mspIpControl.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mspManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 3, 2, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspManagement.setStatus('current')
if mibBuilder.loadTexts: mspManagement.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
dbMacPeer = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4))
if mibBuilder.loadTexts: dbMacPeer.setStatus('current')
if mibBuilder.loadTexts: dbMacPeer.setDescription('Sub-tree for the CODIMA Express History MAC Peer Database objects.')
macPeerLongTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1))
if mibBuilder.loadTexts: macPeerLongTerm.setStatus('current')
if mibBuilder.loadTexts: macPeerLongTerm.setDescription('Sub-tree for the CODIMA Express History Long Term MAC Peer Database objects.')
mplBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: mplBaseTable.setStatus('current')
if mibBuilder.loadTexts: mplBaseTable.setDescription('A table of CODIMA Express History Long Term MAC Database Peer Base Objects. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mplBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mplbMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mplbMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mplbTimeStampIndex"))
if mibBuilder.loadTexts: mplBaseEntry.setStatus('current')
if mibBuilder.loadTexts: mplBaseEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Base Objects table. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data. Entries cannot be created or deleted via SNMP operations')
mplbMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbMac1Index.setStatus('current')
if mibBuilder.loadTexts: mplbMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mplbMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbMac2Index.setStatus('current')
if mibBuilder.loadTexts: mplbMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mplbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mplbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in minutes from Midnight January 1st 1970.')
mplbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mplbTimeStamp.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in minutes from Midnight January 1st 1970 in human readable form.')
mplbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbFrames.setStatus('current')
if mibBuilder.loadTexts: mplbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
mplbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbBytes.setStatus('current')
if mibBuilder.loadTexts: mplbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
mplbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbFrameSize.setStatus('current')
if mibBuilder.loadTexts: mplbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
mplbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: mplbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
mplbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: mplbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
mplDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2), )
if mibBuilder.loadTexts: mplDerivedTable.setStatus('current')
if mibBuilder.loadTexts: mplDerivedTable.setDescription('A table of CODIMA Express History Long Term MAC Database Peer Derived Objects. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mplDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mpldMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mpldMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mpldTimeStampIndex"))
if mibBuilder.loadTexts: mplDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: mplDerivedEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Peer Derived Objects table. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mpldMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpldMac1Index.setStatus('current')
if mibBuilder.loadTexts: mpldMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mpldMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpldMac2Index.setStatus('current')
if mibBuilder.loadTexts: mpldMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mpldTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpldTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mpldTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mpldTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpldTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mpldTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mpldUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpldUtilization.setStatus('current')
if mibBuilder.loadTexts: mpldUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mpldErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpldErrorFrames.setStatus('current')
if mibBuilder.loadTexts: mpldErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mplDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3), )
if mibBuilder.loadTexts: mplDuplexTable.setStatus('current')
if mibBuilder.loadTexts: mplDuplexTable.setDescription('A table of CODIMA Express History Long Term MAC Database Duplex Objects. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mplDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mplduMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mplduMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mplduTimeStampIndex"))
if mibBuilder.loadTexts: mplDuplexEntry.setStatus('current')
if mibBuilder.loadTexts: mplDuplexEntry.setDescription('A table of CODIMA Express History Long Term MAC Database Duplex Objects. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data. Entries cannot be created or deleted via SNMP operations')
mplduMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduMac1Index.setStatus('current')
if mibBuilder.loadTexts: mplduMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mplduMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduMac2Index.setStatus('current')
if mibBuilder.loadTexts: mplduMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mplduTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mplduTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mplduTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mplduTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mplduTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduTxFrames.setStatus('current')
if mibBuilder.loadTexts: mplduTxFrames.setDescription('Number of Frames Transmitted. A value of 4294967294 indicates unknown.')
mplduTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduTxBytes.setStatus('current')
if mibBuilder.loadTexts: mplduTxBytes.setDescription('Number of Bytes Transmitted. A value of 4294967294 indicates unknown.')
mplduTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduTxFrameSize.setStatus('current')
if mibBuilder.loadTexts: mplduTxFrameSize.setDescription('Average Frame Size, in bytes, Transmitted. A value of 4294967294 indicates unknown.')
mplduTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduTxUtilization.setStatus('current')
if mibBuilder.loadTexts: mplduTxUtilization.setDescription('Percent Utilization Transmitted (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mplduRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduRxFrames.setStatus('current')
if mibBuilder.loadTexts: mplduRxFrames.setDescription('Number of Frames Received. A value of 4294967294 indicates unknown.')
mplduRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduRxBytes.setStatus('current')
if mibBuilder.loadTexts: mplduRxBytes.setDescription('Number of Bytes Received. A value of 4294967294 indicates unknown.')
mplduRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 11), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduRxFrameSize.setStatus('current')
if mibBuilder.loadTexts: mplduRxFrameSize.setDescription('Average Frame Size, in bytes, Received. A value of 4294967294 indicates unknown.')
mplduRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplduRxUtilization.setStatus('current')
if mibBuilder.loadTexts: mplduRxUtilization.setDescription('Percent Utilization Received (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mplProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4), )
if mibBuilder.loadTexts: mplProtocolTable.setStatus('current')
if mibBuilder.loadTexts: mplProtocolTable.setDescription('A table of CODIMA Express History Long Term MAC Peer Database Protocol Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mplProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mplpMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mplpMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mplpTimeStampIndex"))
if mibBuilder.loadTexts: mplProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: mplProtocolEntry.setDescription('A row in the CODIMA Express History Long Term MAC Peer Database Base Objects table. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mplpMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpMac1Index.setStatus('current')
if mibBuilder.loadTexts: mplpMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mplpMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpMac2Index.setStatus('current')
if mibBuilder.loadTexts: mplpMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mplpTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mplpTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mplpTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mplpTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mplpNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpNovell.setStatus('current')
if mibBuilder.loadTexts: mplpNovell.setDescription('The number of Novell Frames. A value of 4294967294 indicates unknown.')
mplpSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpSnmp.setStatus('current')
if mibBuilder.loadTexts: mplpSnmp.setDescription('The number of Simple Network Management Protocol (SNMP) Frames. A value of 4294967294 indicates unknown.')
mplpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpRouting.setStatus('current')
if mibBuilder.loadTexts: mplpRouting.setDescription('The number of Routing Frames. e.g. RIP, OSPF etc. A value of 4294967294 indicates unknown.')
mplpWww = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpWww.setStatus('current')
if mibBuilder.loadTexts: mplpWww.setDescription('The number of World Wide Web Frames. e.g. HyperText Transfer Protocol (HTTP). A value of 4294967294 indicates unknown.')
mplpIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpIcmp.setStatus('current')
if mibBuilder.loadTexts: mplpIcmp.setDescription('The number of Internet Control Message Protocol (ICMP) Frames. A value of 4294967294 indicates unknown.')
mplpIso = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpIso.setStatus('current')
if mibBuilder.loadTexts: mplpIso.setDescription('The number of International Standards Organization (ISO) Frames. A value of 4294967294 indicates unknown.')
mplpMail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpMail.setStatus('current')
if mibBuilder.loadTexts: mplpMail.setDescription('The number of Mail Frames. e.g. Simple Mail Transfer Protocol (SMTP). A value of 4294967294 indicates unknown.')
mplpNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpNetbios.setStatus('current')
if mibBuilder.loadTexts: mplpNetbios.setDescription('The number of NetBIOS Frames. e.g. WINS or SMB protocol. A value of 4294967294 indicates unknown.')
mplpDns = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpDns.setStatus('current')
if mibBuilder.loadTexts: mplpDns.setDescription('The number of Domain Name System (DNS) Frames. A value of 4294967294 indicates unknown.')
mplpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpIp.setStatus('current')
if mibBuilder.loadTexts: mplpIp.setDescription('The number of Internet Protocol (IP) Frames. A value of 4294967294 indicates unknown.')
mplpVoip = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpVoip.setStatus('current')
if mibBuilder.loadTexts: mplpVoip.setDescription('The number of Voice Over Internet Protocol (VoIP) Frames. A value of 4294967294 indicates unknown.')
mplpLayer3Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpLayer3Traffic.setStatus('current')
if mibBuilder.loadTexts: mplpLayer3Traffic.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mplpIpData = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpIpData.setStatus('current')
if mibBuilder.loadTexts: mplpIpData.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mplpApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpApplications.setStatus('current')
if mibBuilder.loadTexts: mplpApplications.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mplpIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpIpControl.setStatus('current')
if mibBuilder.loadTexts: mplpIpControl.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mplpManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplpManagement.setStatus('current')
if mibBuilder.loadTexts: mplpManagement.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
macPeerShortTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2))
if mibBuilder.loadTexts: macPeerShortTerm.setStatus('current')
if mibBuilder.loadTexts: macPeerShortTerm.setDescription('Sub-tree for the CODIMA Express History Short Term MAC Peer Database objects.')
mpsBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: mpsBaseTable.setStatus('current')
if mibBuilder.loadTexts: mpsBaseTable.setDescription('A table of CODIMA Express History Short Term MAC Database Peer Base Objects. Based on 15 second intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mpsBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mpsbMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mpsbMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mpsbTimeStampIndex"))
if mibBuilder.loadTexts: mpsBaseEntry.setStatus('current')
if mibBuilder.loadTexts: mpsBaseEntry.setDescription('A row in the CODIMA Express History Short Term MAC Database Base Objects table. Based on 15 second intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data. Entries cannot be created or deleted via SNMP operations')
mpsbMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbMac1Index.setStatus('current')
if mibBuilder.loadTexts: mpsbMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mpsbMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbMac2Index.setStatus('current')
if mibBuilder.loadTexts: mpsbMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mpsbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mpsbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mpsbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mpsbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mpsbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbFrames.setStatus('current')
if mibBuilder.loadTexts: mpsbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
mpsbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbBytes.setStatus('current')
if mibBuilder.loadTexts: mpsbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
mpsbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbFrameSize.setStatus('current')
if mibBuilder.loadTexts: mpsbFrameSize.setDescription('Average Frame Size, in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
mpsbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: mpsbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
mpsbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: mpsbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
mpsDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: mpsDerivedTable.setStatus('current')
if mibBuilder.loadTexts: mpsDerivedTable.setDescription('A table of CODIMA Express History Long Term MAC Database Peer Derived Objects. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mpsDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mpsdMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mpsdMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mpsdTimeStampIndex"))
if mibBuilder.loadTexts: mpsDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: mpsDerivedEntry.setDescription('A row in the CODIMA Express History Long Term MAC Database Peer Derived Objects table. Based on 15 minute intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mpsdMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsdMac1Index.setStatus('current')
if mibBuilder.loadTexts: mpsdMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mpsdMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsdMac2Index.setStatus('current')
if mibBuilder.loadTexts: mpsdMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mpsdTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsdTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mpsdTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mpsdTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsdTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mpsdTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mpsdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsdUtilization.setStatus('current')
if mibBuilder.loadTexts: mpsdUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mpsdErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsdErrorFrames.setStatus('current')
if mibBuilder.loadTexts: mpsdErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mpsDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: mpsDuplexTable.setStatus('current')
if mibBuilder.loadTexts: mpsDuplexTable.setDescription('A table of CODIMA Express History Short Term MAC Database Duplex Objects. Based on 15 second intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data.')
mpsDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mpsduMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mpsduMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mpsduTimeStampIndex"))
if mibBuilder.loadTexts: mpsDuplexEntry.setStatus('current')
if mibBuilder.loadTexts: mpsDuplexEntry.setDescription('A table of CODIMA Express History Short Term MAC Database Duplex Objects. Based on 15 second intervals, statistics are collected for each MAC Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Duplex object implements statistics that are specific to a two way commnunication, e.g., Transmit Frames, Receive Frames, Transmit % Utilization, Receive % Utililization. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC nodes set to collect peer data. Entries cannot be created or deleted via SNMP operations')
mpsduMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduMac1Index.setStatus('current')
if mibBuilder.loadTexts: mpsduMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mpsduMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduMac2Index.setStatus('current')
if mibBuilder.loadTexts: mpsduMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mpsduTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mpsduTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mpsduTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mpsduTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mpsduTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduTxFrames.setStatus('current')
if mibBuilder.loadTexts: mpsduTxFrames.setDescription('Number of Frames Transmitted. A value of 4294967294 indicates unknown.')
mpsduTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduTxBytes.setStatus('current')
if mibBuilder.loadTexts: mpsduTxBytes.setDescription('Number of Bytes Transmitted. A value of 4294967294 indicates unknown.')
mpsduTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduTxFrameSize.setStatus('current')
if mibBuilder.loadTexts: mpsduTxFrameSize.setDescription('Average Frame Size, in bytes, Transmitted. A value of 4294967294 indicates unknown.')
mpsduTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduTxUtilization.setStatus('current')
if mibBuilder.loadTexts: mpsduTxUtilization.setDescription('Percent Utilization Transmitted (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mpsduRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduRxFrames.setStatus('current')
if mibBuilder.loadTexts: mpsduRxFrames.setDescription('Number of Frames Received. A value of 4294967294 indicates unknown.')
mpsduRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduRxBytes.setStatus('current')
if mibBuilder.loadTexts: mpsduRxBytes.setDescription('Number of Bytes Received. A value of 4294967294 indicates unknown.')
mpsduRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 11), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduRxFrameSize.setStatus('current')
if mibBuilder.loadTexts: mpsduRxFrameSize.setDescription('Average Frame Size, in bytes, Received. A value of 4294967294 indicates unknown.')
mpsduRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpsduRxUtilization.setStatus('current')
if mibBuilder.loadTexts: mpsduRxUtilization.setDescription('Percent Utilization Received (% Wire Speed). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
mpsProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: mpsProtocolTable.setStatus('current')
if mibBuilder.loadTexts: mpsProtocolTable.setDescription('A table of CODIMA Express History Short Term MAC Peer Database Protocol Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network.')
mpsProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "mpspMac1Index"), (0, "CODIMA-EXPRESS-MIB", "mpspMac2Index"), (0, "CODIMA-EXPRESS-MIB", "mpspTimeStampIndex"))
if mibBuilder.loadTexts: mpsProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: mpsProtocolEntry.setDescription('A row in the CODIMA Express History Short Term MAC Peer Database Protocol Objects table. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Protocol object implements values covering the number of Frames associated with different protocols. For example, SNMP, IP, DNS Frame counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of MAC addresses active on the network. Entries cannot be created or deleted via SNMP operations')
mpspMac1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspMac1Index.setStatus('current')
if mibBuilder.loadTexts: mpspMac1Index.setDescription('Identifies the first Peer MAC address of this row.')
mpspMac2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspMac2Index.setStatus('current')
if mibBuilder.loadTexts: mpspMac2Index.setDescription('Identifies the second Peer MAC address of this row.')
mpspTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: mpspTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
mpspTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mpspTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
mpspNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspNovell.setStatus('current')
if mibBuilder.loadTexts: mpspNovell.setDescription('The number of Novell Frames. A value of 4294967294 indicates unknown.')
mpspSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspSnmp.setStatus('current')
if mibBuilder.loadTexts: mpspSnmp.setDescription('The number of Simple Network Management Protocol (SNMP) Frames. A value of 4294967294 indicates unknown.')
mpspRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspRouting.setStatus('current')
if mibBuilder.loadTexts: mpspRouting.setDescription('The number of Routing Frames. e.g. RIP, OSPF etc. A value of 4294967294 indicates unknown.')
mpspWww = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspWww.setStatus('current')
if mibBuilder.loadTexts: mpspWww.setDescription('The number of World Wide Web Frames. e.g. HyperText Transfer Protocol (HTTP). A value of 4294967294 indicates unknown.')
mpspIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspIcmp.setStatus('current')
if mibBuilder.loadTexts: mpspIcmp.setDescription('The number of Internet Control Message Protocol (ICMP) Frames. A value of 4294967294 indicates unknown.')
mpspIso = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspIso.setStatus('current')
if mibBuilder.loadTexts: mpspIso.setDescription('The number of International Standards Organization (ISO) Frames. A value of 4294967294 indicates unknown.')
mpspMail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspMail.setStatus('current')
if mibBuilder.loadTexts: mpspMail.setDescription('The number of Mail Frames. e.g. Simple Mail Transfer Protocol (SMTP). A value of 4294967294 indicates unknown.')
mpspNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspNetbios.setStatus('current')
if mibBuilder.loadTexts: mpspNetbios.setDescription('The number of NetBIOS Frames. e.g. WINS or SMB protocol. A value of 4294967294 indicates unknown.')
mpspDns = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspDns.setStatus('current')
if mibBuilder.loadTexts: mpspDns.setDescription('The number of Domain Name System (DNS) Frames. A value of 4294967294 indicates unknown.')
mpspIp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspIp.setStatus('current')
if mibBuilder.loadTexts: mpspIp.setDescription('The number of Internet Protocol (IP) Frames. A value of 4294967294 indicates unknown.')
mpspVoip = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspVoip.setStatus('current')
if mibBuilder.loadTexts: mpspVoip.setDescription('The number of Voice Over Internet Protocol (VoIP) Frames. A value of 4294967294 indicates unknown.')
mpspLayer3Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspLayer3Traffic.setStatus('current')
if mibBuilder.loadTexts: mpspLayer3Traffic.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mpspIpData = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspIpData.setStatus('current')
if mibBuilder.loadTexts: mpspIpData.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mpspApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspApplications.setStatus('current')
if mibBuilder.loadTexts: mpspApplications.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mpspIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspIpControl.setStatus('current')
if mibBuilder.loadTexts: mpspIpControl.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
mpspManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 4, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpspManagement.setStatus('current')
if mibBuilder.loadTexts: mpspManagement.setDescription('The number of frames in the (name of group) Protocol Group. Important protocols are grouped together to enable you to view patterns/profiles at Node Level. The protocols which are included in each group are user definable. A value of 4294967294 indicates unknown')
dbIPv4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5))
if mibBuilder.loadTexts: dbIPv4.setStatus('current')
if mibBuilder.loadTexts: dbIPv4.setDescription('Sub-tree for the CODIMA Express History IPv4 Database objects.')
ipLongTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1))
if mibBuilder.loadTexts: ipLongTerm.setStatus('current')
if mibBuilder.loadTexts: ipLongTerm.setDescription('Sub-tree for the CODIMA Express History Long Term IPv4 Database objects.')
ilBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: ilBaseTable.setStatus('current')
if mibBuilder.loadTexts: ilBaseTable.setDescription('A table of CODIMA Express History Long Term IPv4 Database Base Objects. Statistics are collected every 15 minutes for each IPv4 address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
ilBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ilbIpIndex"), (0, "CODIMA-EXPRESS-MIB", "ilbTimeStampIndex"))
if mibBuilder.loadTexts: ilBaseEntry.setStatus('current')
if mibBuilder.loadTexts: ilBaseEntry.setDescription('A row in the CODIMA Express History Long Term IPv4 Database Base Objects table. Statistics are collected every 15 minutes for each IPv4 address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network. Entries cannot be created or deleted via SNMP operations')
ilbIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbIpIndex.setStatus('current')
if mibBuilder.loadTexts: ilbIpIndex.setDescription('Identifies the IPv4 address of this row.')
ilbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ilbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ilbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ilbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ilbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbFrames.setStatus('current')
if mibBuilder.loadTexts: ilbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
ilbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbBytes.setStatus('current')
if mibBuilder.loadTexts: ilbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
ilbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbFrameSize.setStatus('current')
if mibBuilder.loadTexts: ilbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
ilbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: ilbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
ilbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: ilbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
ilDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: ilDerivedTable.setStatus('current')
if mibBuilder.loadTexts: ilDerivedTable.setDescription('A table of CODIMA Express History Long Term IPv4 Database Derived Objects. Statistics are collected every 15 minutes for each IPv4 address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
ilDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ildIpIndex"), (0, "CODIMA-EXPRESS-MIB", "ildTimeStampIndex"))
if mibBuilder.loadTexts: ilDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: ilDerivedEntry.setDescription('A row in the CODIMA Express History Long Term IPv4 Database Derived Objects table. Statistics are collected every 15 minutes for each IPv4 address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network. Entries cannot be created or deleted via SNMP operations')
ildIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ildIpIndex.setStatus('current')
if mibBuilder.loadTexts: ildIpIndex.setDescription('Identifies the IPv4 address of this row.')
ildTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ildTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ildTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ildTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ildTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ildTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ildUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ildUtilization.setStatus('current')
if mibBuilder.loadTexts: ildUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ildErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ildErrorFrames.setStatus('current')
if mibBuilder.loadTexts: ildErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ilIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3), )
if mibBuilder.loadTexts: ilIcmpTable.setStatus('current')
if mibBuilder.loadTexts: ilIcmpTable.setDescription('A table of CODIMA Express History Long Term IPv4 Database ICMP Objects. Statistics are collected every 15 minutes for each IPv4 address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
ilIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "iliTimeStampIndex"))
if mibBuilder.loadTexts: ilIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: ilIcmpEntry.setDescription('A row in the CODIMA Express History Long Term IPv4 Database ICMP Objects table. Statistics are collected every 15 minutes for each IPv4 address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
iliIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliIpIndex.setStatus('current')
if mibBuilder.loadTexts: iliIpIndex.setDescription('Identifies the IPv4 address of this row.')
iliTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: iliTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
iliTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliTimeStamp.setStatus('current')
if mibBuilder.loadTexts: iliTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
iliPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliPing.setStatus('current')
if mibBuilder.loadTexts: iliPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
iliSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliSrcQuench.setStatus('current')
if mibBuilder.loadTexts: iliSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
iliRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliRedirect.setStatus('current')
if mibBuilder.loadTexts: iliRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
iliTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: iliTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
iliParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliParamProblem.setStatus('current')
if mibBuilder.loadTexts: iliParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
iliTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliTimestamp.setStatus('current')
if mibBuilder.loadTexts: iliTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
iliFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliFragTimeout.setStatus('current')
if mibBuilder.loadTexts: iliFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
iliNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: iliNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
iliHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: iliHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
iliProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: iliProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
iliPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: iliPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
iliFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliFragRequired.setStatus('current')
if mibBuilder.loadTexts: iliFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
iliSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: iliSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
iliDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: iliDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
iliDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: iliDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
iliSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: iliSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
iliNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliNetProhibited.setStatus('current')
if mibBuilder.loadTexts: iliNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
iliHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliHostProhibited.setStatus('current')
if mibBuilder.loadTexts: iliHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
iliNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: iliNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
iliHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: iliHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
iliPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliPerformance.setStatus('current')
if mibBuilder.loadTexts: iliPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
iliNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: iliNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
iliHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: iliHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
iliAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: iliAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
iliRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliRouteChange.setStatus('current')
if mibBuilder.loadTexts: iliRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
iliErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliErrors.setStatus('current')
if mibBuilder.loadTexts: iliErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
iliMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iliMaintenance.setStatus('current')
if mibBuilder.loadTexts: iliMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
ipShortTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2))
if mibBuilder.loadTexts: ipShortTerm.setStatus('current')
if mibBuilder.loadTexts: ipShortTerm.setDescription('Sub-tree for the CODIMA Express History Short Term IPv4 Database objects.')
isBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: isBaseTable.setStatus('current')
if mibBuilder.loadTexts: isBaseTable.setDescription('A table of CODIMA Express History Short Term IPv4 Database Base Objects. Statistics are collected every 15 seconds for each IPv4 address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
isBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "isbIpIndex"), (0, "CODIMA-EXPRESS-MIB", "isbTimeStampIndex"))
if mibBuilder.loadTexts: isBaseEntry.setStatus('current')
if mibBuilder.loadTexts: isBaseEntry.setDescription('A row in the CODIMA Express History Short Term IPv4 Database Base Objects table. Statistics are collected every 15 seconds for each IPv4 address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network. Entries cannot be created or deleted via SNMP operations')
isbIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbIpIndex.setStatus('current')
if mibBuilder.loadTexts: isbIpIndex.setDescription('Identifies the IPv4 address of this row.')
isbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: isbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
isbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: isbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
isbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbFrames.setStatus('current')
if mibBuilder.loadTexts: isbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
isbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbBytes.setStatus('current')
if mibBuilder.loadTexts: isbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
isbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: isbFrameSize.setStatus('current')
if mibBuilder.loadTexts: isbFrameSize.setDescription('Average Frame Size, in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
isbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: isbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
isbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: isbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
isDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: isDerivedTable.setStatus('current')
if mibBuilder.loadTexts: isDerivedTable.setDescription('A table of CODIMA Express History Short Term IPv4 Database Derived Objects. Statistics are collected every 15 seconds for each IPv4 address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
isDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "isdIpIndex"), (0, "CODIMA-EXPRESS-MIB", "isdTimeStampIndex"))
if mibBuilder.loadTexts: isDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: isDerivedEntry.setDescription('A row in the CODIMA Express History Short Term IPv4 Database Derived Objects table. Statistics are collected every 15 seconds for each IPv4 address monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network. Entries cannot be created or deleted via SNMP operations')
isdIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdIpIndex.setStatus('current')
if mibBuilder.loadTexts: isdIpIndex.setDescription('Identifies the IPv4 address of this row.')
isdTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: isdTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
isdTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdTimeStamp.setStatus('current')
if mibBuilder.loadTexts: isdTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
isdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdUtilization.setStatus('current')
if mibBuilder.loadTexts: isdUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
isdErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdErrorFrames.setStatus('current')
if mibBuilder.loadTexts: isdErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
isIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: isIcmpTable.setStatus('current')
if mibBuilder.loadTexts: isIcmpTable.setDescription('A table of CODIMA Express History Short Term IPv4 Database ICMP Objects. Statistics are collected every 15 seconds for each IPv4 address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
isIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "isiTimeStampIndex"))
if mibBuilder.loadTexts: isIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: isIcmpEntry.setDescription('A row in the CODIMA Express History Short Term IPv4 Database ICMP Objects table. Statistics are collected every 15 seconds for each IPv4 address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 addresses active on the network.')
isiIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiIpIndex.setStatus('current')
if mibBuilder.loadTexts: isiIpIndex.setDescription('Identifies the IPv4 address of this row.')
isiTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: isiTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
isiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiTimeStamp.setStatus('current')
if mibBuilder.loadTexts: isiTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
isiPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiPing.setStatus('current')
if mibBuilder.loadTexts: isiPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
isiSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiSrcQuench.setStatus('current')
if mibBuilder.loadTexts: isiSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
isiRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiRedirect.setStatus('current')
if mibBuilder.loadTexts: isiRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
isiTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: isiTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
isiParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiParamProblem.setStatus('current')
if mibBuilder.loadTexts: isiParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
isiTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiTimestamp.setStatus('current')
if mibBuilder.loadTexts: isiTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
isiFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiFragTimeout.setStatus('current')
if mibBuilder.loadTexts: isiFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
isiNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: isiNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
isiHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: isiHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
isiProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: isiProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
isiPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: isiPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
isiFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiFragRequired.setStatus('current')
if mibBuilder.loadTexts: isiFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
isiSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: isiSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
isiDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: isiDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
isiDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: isiDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
isiSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: isiSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
isiNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiNetProhibited.setStatus('current')
if mibBuilder.loadTexts: isiNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
isiHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiHostProhibited.setStatus('current')
if mibBuilder.loadTexts: isiHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
isiNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: isiNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
isiHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: isiHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
isiPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiPerformance.setStatus('current')
if mibBuilder.loadTexts: isiPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
isiNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: isiNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
isiHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: isiHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
isiAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: isiAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
isiRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiRouteChange.setStatus('current')
if mibBuilder.loadTexts: isiRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
isiErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiErrors.setStatus('current')
if mibBuilder.loadTexts: isiErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
isiMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 5, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isiMaintenance.setStatus('current')
if mibBuilder.loadTexts: isiMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
dbIPv4Peer = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6))
if mibBuilder.loadTexts: dbIPv4Peer.setStatus('current')
if mibBuilder.loadTexts: dbIPv4Peer.setDescription('Sub-tree for the CODIMA Express History IPv4 Peer Database objects.')
ipPeerLongTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1))
if mibBuilder.loadTexts: ipPeerLongTerm.setStatus('current')
if mibBuilder.loadTexts: ipPeerLongTerm.setDescription('Sub-tree for the CODIMA Express History Long Term IPv4 Peer Database objects.')
iplBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1), )
if mibBuilder.loadTexts: iplBaseTable.setStatus('current')
if mibBuilder.loadTexts: iplBaseTable.setDescription('A table of CODIMA Express History Long Term IPv4 Peer Database Base Objects. Based on 15 minute intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data.')
iplBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "iplbIp1Index"), (0, "CODIMA-EXPRESS-MIB", "iplbIp2Index"), (0, "CODIMA-EXPRESS-MIB", "iplbTimeStampIndex"))
if mibBuilder.loadTexts: iplBaseEntry.setStatus('current')
if mibBuilder.loadTexts: iplBaseEntry.setDescription('A row in the CODIMA Express History Long Term IPv4 Database Base Objects table. Based on 15 minute intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data. Entries cannot be created or deleted via SNMP operations')
iplbIp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbIp1Index.setStatus('current')
if mibBuilder.loadTexts: iplbIp1Index.setDescription('Identifies the first Peer IPv4 address of this row.')
iplbIp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbIp2Index.setStatus('current')
if mibBuilder.loadTexts: iplbIp2Index.setDescription('Identifies the second Peer IPv4 address of this row.')
iplbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: iplbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in minutes from Midnight January 1st 1970.')
iplbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: iplbTimeStamp.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in minutes from Midnight January 1st 1970 in human readable form.')
iplbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbFrames.setStatus('current')
if mibBuilder.loadTexts: iplbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
iplbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbBytes.setStatus('current')
if mibBuilder.loadTexts: iplbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
iplbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbFrameSize.setStatus('current')
if mibBuilder.loadTexts: iplbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
iplbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: iplbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
iplbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iplbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: iplbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
iplDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: iplDerivedTable.setStatus('current')
if mibBuilder.loadTexts: iplDerivedTable.setDescription('A table of CODIMA Express History Long Term IPv4 Peer Database Derived Objects. Based on 15 minute intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data.')
iplDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ipldIp1Index"), (0, "CODIMA-EXPRESS-MIB", "ipldIp2Index"), (0, "CODIMA-EXPRESS-MIB", "ipldTimeStampIndex"))
if mibBuilder.loadTexts: iplDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: iplDerivedEntry.setDescription('A row in the CODIMA Express History Long Term IPv4 Peer Database Derived Objects table. Based on 15 minute intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data.')
ipldIp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipldIp1Index.setStatus('current')
if mibBuilder.loadTexts: ipldIp1Index.setDescription('Identifies the first Peer MAC address of this row.')
ipldIp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipldIp2Index.setStatus('current')
if mibBuilder.loadTexts: ipldIp2Index.setDescription('Identifies the second Peer MAC address of this row.')
ipldTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipldTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ipldTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ipldTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipldTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipldTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ipldUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipldUtilization.setStatus('current')
if mibBuilder.loadTexts: ipldUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ipldErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipldErrorFrames.setStatus('current')
if mibBuilder.loadTexts: ipldErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
iplIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3), )
if mibBuilder.loadTexts: iplIcmpTable.setStatus('current')
if mibBuilder.loadTexts: iplIcmpTable.setDescription('A table of CODIMA Express History Long Term IPv4 Peer Database ICMP Objects. Statistics are collected every 15 minutes for each IPv4 Peer address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 Peer addresses active on the network.')
iplIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ipliIp1Index"), (0, "CODIMA-EXPRESS-MIB", "ipliIp2Index"), (0, "CODIMA-EXPRESS-MIB", "ipliTimeStampIndex"))
if mibBuilder.loadTexts: iplIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: iplIcmpEntry.setDescription('A row in the CODIMA Express History Long Term IPv4 Peer Database ICMP Objects table. Statistics are collected every 15 minutes for each IPv4 Peer address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of IPv4 Peer addresses active on the network.')
ipliIp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliIp1Index.setStatus('current')
if mibBuilder.loadTexts: ipliIp1Index.setDescription('Identifies the first Peer IPv4 address of this row.')
ipliIp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliIp2Index.setStatus('current')
if mibBuilder.loadTexts: ipliIp2Index.setDescription('Identifies the second Peer IPv4 address of this row.')
ipliTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ipliTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ipliTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipliTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ipliPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliPing.setStatus('current')
if mibBuilder.loadTexts: ipliPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
ipliSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliSrcQuench.setStatus('current')
if mibBuilder.loadTexts: ipliSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
ipliRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliRedirect.setStatus('current')
if mibBuilder.loadTexts: ipliRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
ipliTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: ipliTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
ipliParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliParamProblem.setStatus('current')
if mibBuilder.loadTexts: ipliParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
ipliTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliTimestamp.setStatus('current')
if mibBuilder.loadTexts: ipliTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
ipliFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliFragTimeout.setStatus('current')
if mibBuilder.loadTexts: ipliFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
ipliNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipliNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipliHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipliHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipliProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipliProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipliPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipliPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipliFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliFragRequired.setStatus('current')
if mibBuilder.loadTexts: ipliFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
ipliSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: ipliSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
ipliDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: ipliDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
ipliDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: ipliDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
ipliSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: ipliSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
ipliNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliNetProhibited.setStatus('current')
if mibBuilder.loadTexts: ipliNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
ipliHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliHostProhibited.setStatus('current')
if mibBuilder.loadTexts: ipliHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
ipliNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipliNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipliHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipliHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipliPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliPerformance.setStatus('current')
if mibBuilder.loadTexts: ipliPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
ipliNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ipliNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
ipliHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ipliHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
ipliAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ipliAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
ipliRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliRouteChange.setStatus('current')
if mibBuilder.loadTexts: ipliRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
ipliErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliErrors.setStatus('current')
if mibBuilder.loadTexts: ipliErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
ipliMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipliMaintenance.setStatus('current')
if mibBuilder.loadTexts: ipliMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
ipPeerShortTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2))
if mibBuilder.loadTexts: ipPeerShortTerm.setStatus('current')
if mibBuilder.loadTexts: ipPeerShortTerm.setDescription('Sub-tree for the CODIMA Express History Short Term IPv4 Peer Database objects.')
ipsBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1), )
if mibBuilder.loadTexts: ipsBaseTable.setStatus('current')
if mibBuilder.loadTexts: ipsBaseTable.setDescription('A table of CODIMA Express History Short Term IPv4 Peer Database Base Objects. Based on 15 second intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data.')
ipsBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ipsbIp1Index"), (0, "CODIMA-EXPRESS-MIB", "ipsbIp2Index"), (0, "CODIMA-EXPRESS-MIB", "ipsbTimeStampIndex"))
if mibBuilder.loadTexts: ipsBaseEntry.setStatus('current')
if mibBuilder.loadTexts: ipsBaseEntry.setDescription('A row in the CODIMA Express History Short Term IPv4 Database Base Objects table. Based on 15 second intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data. Entries cannot be created or deleted via SNMP operations')
ipsbIp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbIp1Index.setStatus('current')
if mibBuilder.loadTexts: ipsbIp1Index.setDescription('Identifies the first Peer IPv4 address of this row.')
ipsbIp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbIp2Index.setStatus('current')
if mibBuilder.loadTexts: ipsbIp2Index.setDescription('Identifies the second Peer IPv4 address of this row.')
ipsbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ipsbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ipsbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ipsbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbFrames.setStatus('current')
if mibBuilder.loadTexts: ipsbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
ipsbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbBytes.setStatus('current')
if mibBuilder.loadTexts: ipsbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
ipsbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbFrameSize.setStatus('current')
if mibBuilder.loadTexts: ipsbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
ipsbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: ipsbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
ipsbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: ipsbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
ipsDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: ipsDerivedTable.setStatus('current')
if mibBuilder.loadTexts: ipsDerivedTable.setDescription('A table of CODIMA Express History Short Term IPv4 Peer Database Derived Objects. Based on 15 second intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data.')
ipsDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ipsdIp1Index"), (0, "CODIMA-EXPRESS-MIB", "ipsdIp2Index"), (0, "CODIMA-EXPRESS-MIB", "ipsdTimeStampIndex"))
if mibBuilder.loadTexts: ipsDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: ipsDerivedEntry.setDescription('A row in the CODIMA Express History Short Term IPv4 Peer Database Derived Objects table. Based on 15 second intervals, statistics are collected for each IPv4 Peer pair monitored by the Express. Some Unit Types such as File Servers and Routers are automatically set to provide Node Peers Statistics, others such as Unknown Unit Type or Work Station will need to have the Node peer statistics activated. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 nodes set to collect peer data.')
ipsdIp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdIp1Index.setStatus('current')
if mibBuilder.loadTexts: ipsdIp1Index.setDescription('Identifies the first Peer MAC address of this row.')
ipsdIp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdIp2Index.setStatus('current')
if mibBuilder.loadTexts: ipsdIp2Index.setDescription('Identifies the second Peer MAC address of this row.')
ipsdTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ipsdTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ipsdTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsdTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ipsdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdUtilization.setStatus('current')
if mibBuilder.loadTexts: ipsdUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ipsdErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsdErrorFrames.setStatus('current')
if mibBuilder.loadTexts: ipsdErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
ipsIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3), )
if mibBuilder.loadTexts: ipsIcmpTable.setStatus('current')
if mibBuilder.loadTexts: ipsIcmpTable.setDescription('A table of CODIMA Express History Short Term IPv4 Peer Database ICMP Objects. Statistics are collected every 15 seconds for each IPv4 Peer address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 Peer addresses active on the network.')
ipsIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "ipsiIp1Index"), (0, "CODIMA-EXPRESS-MIB", "ipsiIp2Index"), (0, "CODIMA-EXPRESS-MIB", "ipsiTimeStampIndex"))
if mibBuilder.loadTexts: ipsIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: ipsIcmpEntry.setDescription('A row in the CODIMA Express History Short Term IPv4 Peer Database ICMP Objects table. Statistics are collected every 15 seconds for each IPv4 Peer address monitored by the Express. The ICMP object implements statistics that are associated with ICMP reports. The ICMP object also adds together report counts from the ICMP table object into catagories. For example, the Group Applications Routing Problems include Port Unreachable and Protocol Unreachable report counts. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of IPv4 Peer addresses active on the network.')
ipsiIp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiIp1Index.setStatus('current')
if mibBuilder.loadTexts: ipsiIp1Index.setDescription('Identifies the first Peer IPv4 address of this row.')
ipsiIp2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiIp2Index.setStatus('current')
if mibBuilder.loadTexts: ipsiIp2Index.setDescription('Identifies the second Peer IPv4 address of this row.')
ipsiTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: ipsiTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
ipsiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipsiTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
ipsiPing = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiPing.setStatus('current')
if mibBuilder.loadTexts: ipsiPing.setDescription('Number of IP Pings (Echo Request or Echo Reply Frames). A value of 4294967294 indicates unknown.')
ipsiSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiSrcQuench.setStatus('current')
if mibBuilder.loadTexts: ipsiSrcQuench.setDescription('Number of Source Quench Report Frames. A value of 4294967294 indicates unknown.')
ipsiRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiRedirect.setStatus('current')
if mibBuilder.loadTexts: ipsiRedirect.setDescription('Number of Re-Direct Report Frames. A value of 4294967294 indicates unknown.')
ipsiTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiTtlExceeded.setStatus('current')
if mibBuilder.loadTexts: ipsiTtlExceeded.setDescription('Number of Time to Live Count Exceeded Report Frames. A value of 4294967294 indicates unknown.')
ipsiParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiParamProblem.setStatus('current')
if mibBuilder.loadTexts: ipsiParamProblem.setDescription('Number of Parameter Problem Report Frames. A value of 4294967294 indicates unknown.')
ipsiTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiTimestamp.setStatus('current')
if mibBuilder.loadTexts: ipsiTimestamp.setDescription('Number of TimeStamp/Address Mask Report Frames. A value of 4294967294 indicates unknown.')
ipsiFragTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiFragTimeout.setStatus('current')
if mibBuilder.loadTexts: ipsiFragTimeout.setDescription('Number of Fragment Reassembly Timeout Report Frames. A value of 4294967294 indicates unknown.')
ipsiNetUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiNetUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipsiNetUnreachable.setDescription('Number of Network Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipsiHostUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiHostUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipsiHostUnreachable.setDescription('Number of Host Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipsiProtocolUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiProtocolUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipsiProtocolUnreachable.setDescription('Number of Protocol Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipsiPortUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiPortUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipsiPortUnreachable.setDescription('Number of Port Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipsiFragRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiFragRequired.setStatus('current')
if mibBuilder.loadTexts: ipsiFragRequired.setDescription("Number of Fragmentation Needed Report Frames with Don't fragment bit set. A value of 4294967294 indicates unknown.")
ipsiSrcRouteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiSrcRouteFail.setStatus('current')
if mibBuilder.loadTexts: ipsiSrcRouteFail.setDescription('Number of Source Route Failure Report Frames. A value of 4294967294 indicates unknown.')
ipsiDestNetUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiDestNetUnknown.setStatus('current')
if mibBuilder.loadTexts: ipsiDestNetUnknown.setDescription('Number of Destination Network Unknown Report Frames. A value of 4294967294 indicates unknown.')
ipsiDestHostUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiDestHostUnknown.setStatus('current')
if mibBuilder.loadTexts: ipsiDestHostUnknown.setDescription('Number of Destination Host Unknown Report Frames. A value of 4294967294 indicates unknown.')
ipsiSrcHostIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiSrcHostIsolated.setStatus('current')
if mibBuilder.loadTexts: ipsiSrcHostIsolated.setDescription('Number of Source Host Isolated Report Frames. A value of 4294967294 indicates unknown.')
ipsiNetProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiNetProhibited.setStatus('current')
if mibBuilder.loadTexts: ipsiNetProhibited.setDescription('Number of Network Prohibited Report Frames. A value of 4294967294 indicates unknown.')
ipsiHostProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiHostProhibited.setStatus('current')
if mibBuilder.loadTexts: ipsiHostProhibited.setDescription('Number of Host Prohibited Report Frames. A value of 4294967294 indicates unknown.')
ipsiNetTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiNetTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipsiNetTosUnreachable.setDescription('Number of Network Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipsiHostTosUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiHostTosUnreachable.setStatus('current')
if mibBuilder.loadTexts: ipsiHostTosUnreachable.setDescription('Number of Host Type of Service Unreachable Report Frames. A value of 4294967294 indicates unknown.')
ipsiPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiPerformance.setStatus('current')
if mibBuilder.loadTexts: ipsiPerformance.setDescription("Number of reports in the Performance Indicator Group. The reports that are Performance Indicators are Fragment Reassembly Timeout (Number of Fragment Reassembly Timeout Report Frames), Source Quench (Number of Source Quench Report Frames) and TTL Count Exceeded (Number of Time to Live Count Exceeded Report Frames). A value of 4294967294 indicates unknown.'")
ipsiNetRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiNetRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ipsiNetRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Network Group. The reports apply to Network Routing problems and include Destination Net Unknown (Number of Destination Network Unknown Report Frames), Network Prohibited (Number of Network Prohibited Report Frames), Network TOS Unreachable (Number of Network Type of Service Unreachable Report Frames), Network Unreachable (Number of Network Unreachable Report Frames) and Source Route Fail (Number of Source Route Failure Report Frames). A value of 4294967294 indicates unknown.')
ipsiHostRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiHostRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ipsiHostRouteProblem.setDescription('Number of reports in the ICMP Routing Problems - Host Group. The reports apply to Host Routing problems and include Destination Host Unknown (Number of Destination Host Unknown Report Frames), Host TOS Unreachable (Number of Host Type of Service Unreachable Report Frames), Host Prohibited (Number of Host Prohibited Report Frames), Host Unreachable (Number of Host Unreachable Report Frames) and Source Host Isolated (Number of Source Host Isolated Report Frames). A value of 4294967294 indicates unknown.')
ipsiAppRouteProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiAppRouteProblem.setStatus('current')
if mibBuilder.loadTexts: ipsiAppRouteProblem.setDescription('Number of reports in the ICMP Routing Problems -Applications Group. The reports apply to Application Routing problems and include Port Unreachable (Number of Port Unreachable Report Frames) and Protocol Unreachable (Number of Protocol Unreachable Report Frames) A value of 4294967294 indicates unknown.')
ipsiRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiRouteChange.setStatus('current')
if mibBuilder.loadTexts: ipsiRouteChange.setDescription('Number of reports in the ICMP Route Group that relate to Route Changes. The reports include Redirect Datagrames for Host, Redirect Datagrams for Net, Redirect Datagrams for TOS and HOST and Redirect datagrams for TOS and NET. A value of 4294967294 indicates unknown.')
ipsiErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiErrors.setStatus('current')
if mibBuilder.loadTexts: ipsiErrors.setDescription('Number of reports in the ICMP Errors Group that relate to ICMP operation errors. The reports include Unknown Error, Checksum Error, Fragmentation Required and Parameter Problems. A value of 4294967294 indicates unknown.')
ipsiMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 6, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsiMaintenance.setStatus('current')
if mibBuilder.loadTexts: ipsiMaintenance.setDescription('Number of reports in the ICMP Maintenance Group that relate to maintenance problems. The reports include Echo Request, Echo Reply, Time Stamp Request, Time Stamp reply, Info Request, Info Reply, Address Mask Request, Address Mask Reply and Checksum Disable. A value of 4294967294 indicates unknown.')
dbProtocol = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7))
if mibBuilder.loadTexts: dbProtocol.setStatus('current')
if mibBuilder.loadTexts: dbProtocol.setDescription('Sub-tree for the CODIMA Express History Protocol Database objects.')
protocolLongTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1))
if mibBuilder.loadTexts: protocolLongTerm.setStatus('current')
if mibBuilder.loadTexts: protocolLongTerm.setDescription('Sub-tree for the CODIMA Express History Long Term Protocol Database objects.')
plBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1), )
if mibBuilder.loadTexts: plBaseTable.setStatus('current')
if mibBuilder.loadTexts: plBaseTable.setDescription('A table of CODIMA Express History Long Term Protocol Database Base Objects. Statistics are collected every 15 minutes for each MAC address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of Protocols active on the network.')
plBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "plbLayerIndex"), (0, "CODIMA-EXPRESS-MIB", "plbIdIndex"), (0, "CODIMA-EXPRESS-MIB", "plbTimeStampIndex"))
if mibBuilder.loadTexts: plBaseEntry.setStatus('current')
if mibBuilder.loadTexts: plBaseEntry.setDescription('A row in the CODIMA Express History Long Term Protocol Database Base Objects table. Statistics are collected every 15 minutes for each Protocol monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of Protocols active on the network. Entries cannot be created or deleted via SNMP operations')
plbLayerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("physical", 1), ("dataLink", 2), ("network", 3), ("transport", 4), ("session", 5), ("presentation", 6), ("application", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbLayerIndex.setStatus('current')
if mibBuilder.loadTexts: plbLayerIndex.setDescription('Identifes the OSI data communications layer of the protocol for this row. In the OSI model, a collection of network processing functions that together compose one layer of a hierarchy of computing functions. Each layer performs a number of functions essential for data communication.')
plbIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbIdIndex.setStatus('current')
if mibBuilder.loadTexts: plbIdIndex.setDescription('Identifies the Protocol ID of this row.')
plbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: plbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
plbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: plbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
plbProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbProtocolName.setStatus('current')
if mibBuilder.loadTexts: plbProtocolName.setDescription("Identifies the Protocol Name for this row. This object's value is generated from this rows Protocol Id Index value.")
plbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbFrames.setStatus('current')
if mibBuilder.loadTexts: plbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
plbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbBytes.setStatus('current')
if mibBuilder.loadTexts: plbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
plbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 8), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: plbFrameSize.setStatus('current')
if mibBuilder.loadTexts: plbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
plbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: plbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
plbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: plbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
plDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2), )
if mibBuilder.loadTexts: plDerivedTable.setStatus('current')
if mibBuilder.loadTexts: plDerivedTable.setDescription('A table of CODIMA Express History Long Term Protocol Database Derived Objects. Statistics are collected every 15 minutes for each Protocol monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of Protocols active on the network.')
plDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "pldLayerIndex"), (0, "CODIMA-EXPRESS-MIB", "pldIdIndex"), (0, "CODIMA-EXPRESS-MIB", "pldTimeStampIndex"))
if mibBuilder.loadTexts: plDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: plDerivedEntry.setDescription('A row in the CODIMA Express History Long Term Protocol Database Derived Objects table. Statistics are collected every 15 minutes for each Protocol monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of Protocols active on the network. Entries cannot be created or deleted via SNMP operations')
pldLayerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("physical", 1), ("dataLink", 2), ("network", 3), ("transport", 4), ("session", 5), ("presentation", 6), ("application", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldLayerIndex.setStatus('current')
if mibBuilder.loadTexts: pldLayerIndex.setDescription('Identifes the OSI data communications layer of the protocol for this row. In the OSI model, a collection of network processing functions that together compose one layer of a hierarchy of computing functions. Each layer performs a number of functions essential for data communication.')
pldIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldIdIndex.setStatus('current')
if mibBuilder.loadTexts: pldIdIndex.setDescription('Identifies the Protocol ID of this row in hexadecimal.')
pldTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: pldTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
pldTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pldTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
pldProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldProtocolName.setStatus('current')
if mibBuilder.loadTexts: pldProtocolName.setDescription("Identifies the Protocol Name for this row. This object's value is generated from this rows Protocol Id Index value.")
pldUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldUtilization.setStatus('current')
if mibBuilder.loadTexts: pldUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
pldErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldErrorFrames.setStatus('current')
if mibBuilder.loadTexts: pldErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
protocolShortTerm = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2))
if mibBuilder.loadTexts: protocolShortTerm.setStatus('current')
if mibBuilder.loadTexts: protocolShortTerm.setDescription('Sub-tree for the CODIMA Express History Short Term Protocol Database objects.')
psBaseTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1), )
if mibBuilder.loadTexts: psBaseTable.setStatus('current')
if mibBuilder.loadTexts: psBaseTable.setDescription('A table of CODIMA Express History Short Term Protocol Database Base Objects. Statistics are collected every 15 seconds for each MAC address monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of Protocols active on the network.')
psBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "psbLayerIndex"), (0, "CODIMA-EXPRESS-MIB", "psbIdIndex"), (0, "CODIMA-EXPRESS-MIB", "psbTimeStampIndex"))
if mibBuilder.loadTexts: psBaseEntry.setStatus('current')
if mibBuilder.loadTexts: psBaseEntry.setDescription('A row in the CODIMA Express History Short Term Protocol Database Base Objects table. Statistics are collected every 15 seconds for each Protocol monitored by the Express. The Base object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of Protocols active on the network. Entries cannot be created or deleted via SNMP operations')
psbLayerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("physical", 1), ("dataLink", 2), ("network", 3), ("transport", 4), ("session", 5), ("presentation", 6), ("application", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbLayerIndex.setStatus('current')
if mibBuilder.loadTexts: psbLayerIndex.setDescription('Identifes the OSI data communications layer of the protocol for this row. In the OSI model, a collection of network processing functions that together compose one layer of a hierarchy of computing functions. Each layer performs a number of functions essential for data communication.')
psbIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbIdIndex.setStatus('current')
if mibBuilder.loadTexts: psbIdIndex.setDescription('Identifies the Protocol ID of this row in hexadecimal.')
psbTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: psbTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
psbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbTimeStamp.setStatus('current')
if mibBuilder.loadTexts: psbTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
psbProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbProtocolName.setStatus('current')
if mibBuilder.loadTexts: psbProtocolName.setDescription("Identifies the Protocol Name for this row. This object's value is generated from this rows Protocol Id Index value.")
psbFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbFrames.setStatus('current')
if mibBuilder.loadTexts: psbFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
psbBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbBytes.setStatus('current')
if mibBuilder.loadTexts: psbBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
psbFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 8), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: psbFrameSize.setStatus('current')
if mibBuilder.loadTexts: psbFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
psbHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbHardwareErrors.setStatus('current')
if mibBuilder.loadTexts: psbHardwareErrors.setDescription('Number of hardware errors. A value of 4294967294 indicates unknown.')
psbSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbSoftwareErrors.setStatus('current')
if mibBuilder.loadTexts: psbSoftwareErrors.setDescription('Number of software errors (Protocol Errors). A value of 4294967294 indicates unknown.')
psDerivedTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2), )
if mibBuilder.loadTexts: psDerivedTable.setStatus('current')
if mibBuilder.loadTexts: psDerivedTable.setDescription('A table of CODIMA Express History Short Term Protocol Database Derived Objects. Statistics are collected every 15 seconds for each Protocol monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of Protocols active on the network.')
psDerivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "psdLayerIndex"), (0, "CODIMA-EXPRESS-MIB", "psdIdIndex"), (0, "CODIMA-EXPRESS-MIB", "psdTimeStampIndex"))
if mibBuilder.loadTexts: psDerivedEntry.setStatus('current')
if mibBuilder.loadTexts: psDerivedEntry.setDescription('A row in the CODIMA Express History Short Term Protocol Database Derived Objects table. Statistics are collected every 15 seconds for each Protocol monitored by the Express. The Derived object implements statistics that are derived from other values, e.g., % Utilization, % Error frames. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of Protocols active on the network. Entries cannot be created or deleted via SNMP operations')
psdLayerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("physical", 1), ("dataLink", 2), ("network", 3), ("transport", 4), ("session", 5), ("presentation", 6), ("application", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdLayerIndex.setStatus('current')
if mibBuilder.loadTexts: psdLayerIndex.setDescription('Identifes the OSI data communications layer of the protocol for this row. In the OSI model, a collection of network processing functions that together compose one layer of a hierarchy of computing functions. Each layer performs a number of functions essential for data communication.')
psdIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdIdIndex.setStatus('current')
if mibBuilder.loadTexts: psdIdIndex.setDescription('Identifies the Protocol ID of this row in hexadecimal.')
psdTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: psdTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
psdTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdTimeStamp.setStatus('current')
if mibBuilder.loadTexts: psdTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
psdProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdProtocolName.setStatus('current')
if mibBuilder.loadTexts: psdProtocolName.setDescription("Identifies the Protocol Name for this row. This object's value is generated from this rows Protocol Id Index value.")
psdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdUtilization.setStatus('current')
if mibBuilder.loadTexts: psdUtilization.setDescription('The percentage utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
psdErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 7, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdErrorFrames.setStatus('current')
if mibBuilder.loadTexts: psdErrorFrames.setDescription('Percentage in relation to total number of Frames i.e., Percentage of the total frame count that have hardware or software errors. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
dbNetChannel = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8))
if mibBuilder.loadTexts: dbNetChannel.setStatus('current')
if mibBuilder.loadTexts: dbNetChannel.setDescription('Sub-tree for the CODIMA Express History NetChannel Database objects.')
netChanLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1), )
if mibBuilder.loadTexts: netChanLongTermTable.setStatus('current')
if mibBuilder.loadTexts: netChanLongTermTable.setDescription('A table of CODIMA Express History Long Term NetChannel Database NetChannel Objects. Statistics are collected every 15 minutes for each NetChannel and pre-capture Filter setup on the Express. A NetChannel is a facility which enables the Express to segregate and concurrently analyse a series of user defined sectors of the Network Traffic using pre-capture filters. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of NetChannels active on the Express.')
netChanLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "nlNameIndex"), (0, "CODIMA-EXPRESS-MIB", "nlTimeStampIndex"), (0, "CODIMA-EXPRESS-MIB", "nlTypeIndex"))
if mibBuilder.loadTexts: netChanLongTermEntry.setStatus('current')
if mibBuilder.loadTexts: netChanLongTermEntry.setDescription('A row in the CODIMA Express History Long Term NetChannel Database NetChannel Objects table. Statistics are collected every 15 minutes for each NetChannel and pre-capture Filter setup on the Express. A NetChannel is a facility which enables the Express to segregate and concurrently analyse a series of user defined sectors of the Network Traffic using pre-capture filters. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of NetChannels active on the Express.')
nlTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netChannel", 1), ("filter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlTypeIndex.setStatus('current')
if mibBuilder.loadTexts: nlTypeIndex.setDescription('Identifes if this row is a NetChannel or a pre-capture Filter.')
nlNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlNameIndex.setStatus('current')
if mibBuilder.loadTexts: nlNameIndex.setDescription('Identifies the NetChannel or pre-capture Filter name for this row.')
nlTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: nlTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
nlTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nlTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
nlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlFrames.setStatus('current')
if mibBuilder.loadTexts: nlFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
nlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlBytes.setStatus('current')
if mibBuilder.loadTexts: nlBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
nlFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nlFrameSize.setStatus('current')
if mibBuilder.loadTexts: nlFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
nlHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHardErrors.setStatus('current')
if mibBuilder.loadTexts: nlHardErrors.setDescription('Number of Hardware Errors. A value of 4294967294 indicates unknown.')
nlSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlSoftErrors.setStatus('current')
if mibBuilder.loadTexts: nlSoftErrors.setDescription('Number of Software Errors (Protocol Errors). A value of 4294967294 indicates unknown.')
nlUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlUtilization.setStatus('current')
if mibBuilder.loadTexts: nlUtilization.setDescription('The Percentage Utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nlHardErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHardErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: nlHardErrorsPercent.setDescription('The Percentage Hardware Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nlSoftErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlSoftErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: nlSoftErrorsPercent.setDescription('The Percentage Software Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nlFramesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlFramesPercent.setStatus('current')
if mibBuilder.loadTexts: nlFramesPercent.setDescription('The Percentage number of Frames (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nlBytesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlBytesPercent.setStatus('current')
if mibBuilder.loadTexts: nlBytesPercent.setDescription('The Percentage number of Bytes (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
netChanShortTermTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2), )
if mibBuilder.loadTexts: netChanShortTermTable.setStatus('current')
if mibBuilder.loadTexts: netChanShortTermTable.setDescription('A table of CODIMA Express History Short Term NetChannel Database NetChannel Objects. Statistics are collected every 15 seconds for each NetChannel and pre-capture Filter setup on the Express. A NetChannel is a facility which enables the Express to segregate and concurrently analyse a series of user defined sectors of the Network Traffic using pre-capture filters. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of NetChannels active on the Express.')
netChanShortTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "nsTypeIndex"), (0, "CODIMA-EXPRESS-MIB", "nsNameIndex"), (0, "CODIMA-EXPRESS-MIB", "nsTimeStampIndex"))
if mibBuilder.loadTexts: netChanShortTermEntry.setStatus('current')
if mibBuilder.loadTexts: netChanShortTermEntry.setDescription('A row in the CODIMA Express History Short Term NetChannel Database NetChannel Objects table. Statistics are collected every 15 seconds for each NetChannel and pre-capture Filter setup on the Express. A NetChannel is a facility which enables the Express to segregate and concurrently analyse a series of user defined sectors of the Network Traffic using pre-capture filters. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Short Term dcTimeSlots object multiplied by the number of NetChannels active on the Express.')
nsTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netChannel", 1), ("filter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTypeIndex.setStatus('current')
if mibBuilder.loadTexts: nsTypeIndex.setDescription('Identifes if this row is a NetChannel or a pre-capture Filter.')
nsNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNameIndex.setStatus('current')
if mibBuilder.loadTexts: nsNameIndex.setDescription('Identifies the NetChannel or pre-capture Filter name for this row.')
nsTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: nsTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
nsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nsTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
nsFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFrames.setStatus('current')
if mibBuilder.loadTexts: nsFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
nsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBytes.setStatus('current')
if mibBuilder.loadTexts: nsBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
nsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFrameSize.setStatus('current')
if mibBuilder.loadTexts: nsFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
nsHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHardErrors.setStatus('current')
if mibBuilder.loadTexts: nsHardErrors.setDescription('Number of Hardware Errors. A value of 4294967294 indicates unknown.')
nsSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSoftErrors.setStatus('current')
if mibBuilder.loadTexts: nsSoftErrors.setDescription('Number of Software Errors (Protocol Errors). A value of 4294967294 indicates unknown.')
nsUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUtilization.setStatus('current')
if mibBuilder.loadTexts: nsUtilization.setDescription('The Percentage Utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nsHardErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHardErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: nsHardErrorsPercent.setDescription('The Percentage Hardware Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nsSoftErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSoftErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: nsSoftErrorsPercent.setDescription('The Percentage Software Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nsFramesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFramesPercent.setStatus('current')
if mibBuilder.loadTexts: nsFramesPercent.setDescription('The Percentage number of Frames (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
nsBytesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 8, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsBytesPercent.setStatus('current')
if mibBuilder.loadTexts: nsBytesPercent.setDescription('The Percentage number of Bytes (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
dbVlan = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9))
if mibBuilder.loadTexts: dbVlan.setStatus('current')
if mibBuilder.loadTexts: dbVlan.setDescription('Sub-tree for the CODIMA Express History VLAN Database objects.')
vlanLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1), )
if mibBuilder.loadTexts: vlanLongTermTable.setStatus('current')
if mibBuilder.loadTexts: vlanLongTermTable.setDescription('A table of CODIMA Express History Long Term VLAN Database NetChannel Objects. Statistics are collected every 15 minutes for each VLAN setup on the Express. The VLAN Database stores statistics for specific VLANs. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of VLANs active on the Express.')
vlanLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "vlIdIndex"), (0, "CODIMA-EXPRESS-MIB", "vlTimeStampIndex"))
if mibBuilder.loadTexts: vlanLongTermEntry.setStatus('current')
if mibBuilder.loadTexts: vlanLongTermEntry.setDescription('A row in the CODIMA Express History Long Term VLAN Database NetChannel Objects table. Statistics are collected every 15 minutes for each VLAN setup on the Express. The VLAN Database stores statistics for specific VLANs. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of VLANS active on the Express.')
vlIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlIdIndex.setStatus('current')
if mibBuilder.loadTexts: vlIdIndex.setDescription('Identifies the VLAN Id for this row.')
vlTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: vlTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
vlTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vlTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
vlName = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlName.setStatus('current')
if mibBuilder.loadTexts: vlName.setDescription('The name associated with this rows VLAN Id')
vlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlFrames.setStatus('current')
if mibBuilder.loadTexts: vlFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
vlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlBytes.setStatus('current')
if mibBuilder.loadTexts: vlBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
vlFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vlFrameSize.setStatus('current')
if mibBuilder.loadTexts: vlFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
vlHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlHardErrors.setStatus('current')
if mibBuilder.loadTexts: vlHardErrors.setDescription('Number of Hardware Errors. A value of 4294967294 indicates unknown.')
vlSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlSoftErrors.setStatus('current')
if mibBuilder.loadTexts: vlSoftErrors.setDescription('Number of Software Errors (Protocol Errors). A value of 4294967294 indicates unknown.')
vlUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlUtilization.setStatus('current')
if mibBuilder.loadTexts: vlUtilization.setDescription('The Percentage Utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vlHardErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlHardErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: vlHardErrorsPercent.setDescription('The Percentage Hardware Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vlSoftErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlSoftErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: vlSoftErrorsPercent.setDescription('The Percentage Software Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vlFramesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlFramesPercent.setStatus('current')
if mibBuilder.loadTexts: vlFramesPercent.setDescription('The Percentage number of Frames (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vlBytesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlBytesPercent.setStatus('current')
if mibBuilder.loadTexts: vlBytesPercent.setDescription('The Percentage number of Bytes (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vlanShortTermTable = MibTable((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2), )
if mibBuilder.loadTexts: vlanShortTermTable.setStatus('current')
if mibBuilder.loadTexts: vlanShortTermTable.setDescription('A table of CODIMA Express History Short Term VLAN Database NetChannel Objects. Statistics are collected every 15 minutes for each VLAN setup on the Express. The VLAN Database stores statistics for specific VLANs. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of VLANs active on the Express.')
vlanShortTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1), ).setIndexNames((0, "CODIMA-EXPRESS-MIB", "vsIdIndex"), (0, "CODIMA-EXPRESS-MIB", "vsTimeStampIndex"))
if mibBuilder.loadTexts: vlanShortTermEntry.setStatus('current')
if mibBuilder.loadTexts: vlanShortTermEntry.setDescription('A row in the CODIMA Express History Short Term VLAN Database NetChannel Objects table. Statistics are collected every 15 minutes for each VLAN setup on the Express. The VLAN Database stores statistics for specific VLANs. The NetChannel object implements general statistics e.g. number of frames, bytes, hardware errors, software errors etc. The number of rows in this table is dependant on the value chosen for the Long Term dcTimeSlots object multiplied by the number of VLANS active on the Express.')
vsIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIdIndex.setStatus('current')
if mibBuilder.loadTexts: vsIdIndex.setDescription('Identifies the VLAN Id for this row.')
vsTimeStampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsTimeStampIndex.setStatus('current')
if mibBuilder.loadTexts: vsTimeStampIndex.setDescription('Identifies the History Time-stamp for this row. This is UTC time, measured in seconds from Midnight January 1st 1970.')
vsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vsTimeStamp.setDescription("A textual representation of the associated TimeStampIndex object which shows the History time-stamp for this row. The value is in the format 'hh:mm:ss dd/mmm/yyyy'. The time (hh:mm:ss) is expressed as a 24-hour clock. An example is 14:58:15 05/Jun/2003.")
vsName = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsName.setStatus('current')
if mibBuilder.loadTexts: vsName.setDescription('The name associated with this rows VLAN Id')
vsFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFrames.setStatus('current')
if mibBuilder.loadTexts: vsFrames.setDescription('Number of Frames (Transmitted and Received). A value of 4294967294 indicates unknown.')
vsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsBytes.setStatus('current')
if mibBuilder.loadTexts: vsBytes.setDescription('Number of Bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
vsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFrameSize.setStatus('current')
if mibBuilder.loadTexts: vsFrameSize.setDescription('Average Frame Size in bytes (Transmitted and Received). A value of 4294967294 indicates unknown.')
vsHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHardErrors.setStatus('current')
if mibBuilder.loadTexts: vsHardErrors.setDescription('Number of Hardware Errors. A value of 4294967294 indicates unknown.')
vsSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsSoftErrors.setStatus('current')
if mibBuilder.loadTexts: vsSoftErrors.setDescription('Number of Software Errors (Protocol Errors). A value of 4294967294 indicates unknown.')
vsUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsUtilization.setStatus('current')
if mibBuilder.loadTexts: vsUtilization.setDescription('The Percentage Utilization or percentage wire speed. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vsHardErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHardErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: vsHardErrorsPercent.setDescription('The Percentage Hardware Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vsSoftErrorsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsSoftErrorsPercent.setStatus('current')
if mibBuilder.loadTexts: vsSoftErrorsPercent.setDescription('The Percentage Software Error Frames. Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vsFramesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramesPercent.setStatus('current')
if mibBuilder.loadTexts: vsFramesPercent.setDescription('The Percentage number of Frames (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
vsBytesPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 1, 9, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsBytesPercent.setStatus('current')
if mibBuilder.loadTexts: vsBytesPercent.setDescription('The Percentage number of Bytes (Transmitted and Received). Divide this objects value by 1000 to get the real floating point percentage value, e.g. 132 = 0.132 % wire speed. A value of 4294967294 indicates unknown.')
expAlarms = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2))
if mibBuilder.loadTexts: expAlarms.setStatus('current')
if mibBuilder.loadTexts: expAlarms.setDescription('Sub-tree for the CODIMA Express Alarm objects.')
alarmMessage = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMessage.setStatus('current')
if mibBuilder.loadTexts: alarmMessage.setDescription('A textural description of an event detected by the CODIMA Express. The Express can cover a wide range of events including:- Activity Failures, i.e. Reports when a Node Stops Transmitting, event Threshold Breaches, and Expert System Reports, e.g. Discovery of new Servers and Routers, changes to Routes, Routing Failures etc. The range of events reported is configurable by the User.')
alarmLayer = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmLayer.setStatus('current')
if mibBuilder.loadTexts: alarmLayer.setDescription('The OSI Network Layer associated with this event.')
alarmTopProtocol = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmTopProtocol.setStatus('current')
if mibBuilder.loadTexts: alarmTopProtocol.setDescription('The upper OSI Network layer protocol associated with this event For example: SNMP, FTP.')
alarmBaseProtocol = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmBaseProtocol.setStatus('current')
if mibBuilder.loadTexts: alarmBaseProtocol.setDescription('The lower OSI Network layer protocol associated with this event. For example: IP, IPX.')
alarmCode = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmCode.setStatus('current')
if mibBuilder.loadTexts: alarmCode.setDescription('The Code number associated with this event')
alarmFunction = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmFunction.setStatus('current')
if mibBuilder.loadTexts: alarmFunction.setDescription('A range of Functions that apply to a particular Alarm Group. For example: The Discovered Group covers the application of discovering the MAC addresses, IP addresses and Unit Type information logged.')
alarmGroup = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmGroup.setStatus('current')
if mibBuilder.loadTexts: alarmGroup.setDescription('Alarm Groups are used to group a specific range of event reports, each group has a range of functions. The grouping is generally based on either a protocol component, a network type or the application associated with the event report. For example:- The Discovered Group covers the application of discovering the MAC addresses, IP addresses and Unit Type information logged.')
alarmUnitType = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmUnitType.setStatus('current')
if mibBuilder.loadTexts: alarmUnitType.setDescription('The unit type is the type of the device that generated this event, e.g. Bridge, Workstation, File Server.')
alarmClass = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmClass.setStatus('current')
if mibBuilder.loadTexts: alarmClass.setDescription('The severity of this alarm. One of the four following levels are included: Critical: The highest priority level alarm log report classification (usually applied to SNMP reports which are to be converted into Traps). Alarm: The second highest priority level alarm log report classification (usually applied to potentially dangerous situations such a breaches in statistical thresholds or Echo and Activity Test Failures). Warning: The second lowest priority level alarm log report classification (usually applied to most of the reports associated with the Expert System). Event: The lowest priority level alarm log report classification (usually applied to the logging of useful information, such as the discovery of an IP address or a new Node on the Network).')
alarmTime = MibScalar((1, 3, 6, 1, 4, 1, 226, 3, 2, 1, 2, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmTime.setStatus('current')
if mibBuilder.loadTexts: alarmTime.setDescription("The UTC time of when this event was issued. The value is in the format 'dd/mmm/yyyy hh:mm:ss'. The time (hh:mm:ss) is expressed as a 24-hour clock. The date (dd/mmm/yyyy) format uses 3 letter abbreviations for the month. An example is 05/Jun/2003 14:58:15.")
codimaExpressNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 2))
if mibBuilder.loadTexts: codimaExpressNotifications.setStatus('current')
if mibBuilder.loadTexts: codimaExpressNotifications.setDescription('Sub-tree for the CODIMA Express Notification objects.')
expressTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 2, 1))
if mibBuilder.loadTexts: expressTraps.setStatus('current')
if mibBuilder.loadTexts: expressTraps.setDescription('Sub-tree for the CODIMA Express Trap objects.')
expressAlarm = NotificationType((1, 3, 6, 1, 4, 1, 226, 3, 2, 2, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "alarmMessage"), ("CODIMA-EXPRESS-MIB", "alarmLayer"), ("CODIMA-EXPRESS-MIB", "alarmTopProtocol"), ("CODIMA-EXPRESS-MIB", "alarmBaseProtocol"), ("CODIMA-EXPRESS-MIB", "alarmCode"), ("CODIMA-EXPRESS-MIB", "alarmFunction"), ("CODIMA-EXPRESS-MIB", "alarmGroup"), ("CODIMA-EXPRESS-MIB", "alarmUnitType"), ("CODIMA-EXPRESS-MIB", "alarmClass"), ("CODIMA-EXPRESS-MIB", "alarmTime"))
if mibBuilder.loadTexts: expressAlarm.setStatus('current')
if mibBuilder.loadTexts: expressAlarm.setDescription("This Trap notification defines an network event detected by the CODIMA Express monitor alarm system. The payload is as follows. alarmMessage: A textural description of an event. alarmLayer: The OSI Network Layer associated with this event. alarmTopProtocol: The upper OSI Network layer protocol associated with this event For example: SNMP, FTP. alarmBaseProtocol: The lower OSI Network layer protocol associated with this event. For example: IP, IPX. alarmCode: The Code number associated with this event. alarmFunction: A range of Functions that apply to a particular Alarm Group. For example: The Discovered Group covers the application of discovering the MAC addresses, IP addresses and Unit Type information logged. alarmGroup: Alarm Groups are used to group a specific range of event reports, each group has a range of functions. The grouping is generally based on either a protocol component, a network type or the application associated with the event report. For example:- The Discovered Group covers the application of discovering the MAC addresses, IP addresses and Unit Type information logged. alarmUnitType: The unit type is the type of the device that generated this event, e.g. Bridge, Workstation, File Server. alarmClass: The severity of this alarm. One of the four following levels are included: Critical: The highest priority level alarm log report classification (usually applied to SNMP reports which are to be converted into Traps). Alarm: The second highest priority level alarm log report classification (usually applied to potentially dangerous situations such a breaches in statistical thresholds or Echo and Activity Test Failures). Warning: The second lowest priority level alarm log report classification (usually applied to most of the reports associated with the Expert System). Event: The lowest priority level alarm log report classification (usually applied to the logging of useful information, such as the discovery of an IP address or a new Node on the Network). alarmTime: The UTC time of when this event was issued. The value is in the format 'dd/mmm/yyyy hh:mm:ss'. The time (hh:mm:ss) is expressed as a 24-hour clock. The date (dd/mmm/yyyy) format uses 3 letter abbreviations for the month. An example is 05/Jun/2003 14:58:15.")
codimaExpressConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3, 2, 3))
if mibBuilder.loadTexts: codimaExpressConformance.setStatus('current')
if mibBuilder.loadTexts: codimaExpressConformance.setDescription('Sub-tree for the CODIMA Express Conformance objects.')
expressObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1))
historyDatabaseGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1))
dbControlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 1))
ctrlTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "ctSampleType"), ("CODIMA-EXPRESS-MIB", "ctTimeSlots"), ("CODIMA-EXPRESS-MIB", "ctLockMethod"), ("CODIMA-EXPRESS-MIB", "ctLockUserTime"), ("CODIMA-EXPRESS-MIB", "ctLockRealTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctrlTimeGroup = ctrlTimeGroup.setStatus('current')
if mibBuilder.loadTexts: ctrlTimeGroup.setDescription('CODIMA Express History Database Control Object Group.')
dbSegmentGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2))
segLongTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1))
slBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "slbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "slbTimeStamp"), ("CODIMA-EXPRESS-MIB", "slbFrames"), ("CODIMA-EXPRESS-MIB", "slbBytes"), ("CODIMA-EXPRESS-MIB", "slbFrameSize"), ("CODIMA-EXPRESS-MIB", "slbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "slbSoftwareErrors"), ("CODIMA-EXPRESS-MIB", "slbActiveNodes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slBaseGroup = slBaseGroup.setStatus('current')
if mibBuilder.loadTexts: slBaseGroup.setDescription('CODIMA Express History Long Term Segment Database Base Object Group.')
slBroadcastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "slbcTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "slbcTimeStamp"), ("CODIMA-EXPRESS-MIB", "slbcBytes"), ("CODIMA-EXPRESS-MIB", "slbcPercentBytes"), ("CODIMA-EXPRESS-MIB", "slbcFrames"), ("CODIMA-EXPRESS-MIB", "slbcPercentFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slBroadcastGroup = slBroadcastGroup.setStatus('current')
if mibBuilder.loadTexts: slBroadcastGroup.setDescription('CODIMA Express History Long Term Segment Database Broadcast Object Group.')
slDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1, 3)).setObjects(("CODIMA-EXPRESS-MIB", "sldTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "sldTimeStamp"), ("CODIMA-EXPRESS-MIB", "sldUtilization"), ("CODIMA-EXPRESS-MIB", "sldErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slDerivedGroup = slDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: slDerivedGroup.setDescription('CODIMA Express History Long Term Segment Database Derived Object Group.')
slEthernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1, 4)).setObjects(("CODIMA-EXPRESS-MIB", "sleTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "sleTimeStamp"), ("CODIMA-EXPRESS-MIB", "sleRunts"), ("CODIMA-EXPRESS-MIB", "sleJabbers"), ("CODIMA-EXPRESS-MIB", "sleCrc"), ("CODIMA-EXPRESS-MIB", "sleCollisions"), ("CODIMA-EXPRESS-MIB", "sleLateCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slEthernetGroup = slEthernetGroup.setStatus('current')
if mibBuilder.loadTexts: slEthernetGroup.setDescription('CODIMA Express History Long Term Segment Database Ethernet Object Group.')
slIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1, 5)).setObjects(("CODIMA-EXPRESS-MIB", "sliTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "sliTimeStamp"), ("CODIMA-EXPRESS-MIB", "sliPing"), ("CODIMA-EXPRESS-MIB", "sliSrcQuench"), ("CODIMA-EXPRESS-MIB", "sliRedirect"), ("CODIMA-EXPRESS-MIB", "sliTtlExceeded"), ("CODIMA-EXPRESS-MIB", "sliParamProblem"), ("CODIMA-EXPRESS-MIB", "sliTimestamp"), ("CODIMA-EXPRESS-MIB", "sliFragTimeout"), ("CODIMA-EXPRESS-MIB", "sliNetUnreachable"), ("CODIMA-EXPRESS-MIB", "sliHostUnreachable"), ("CODIMA-EXPRESS-MIB", "sliProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "sliPortUnreachable"), ("CODIMA-EXPRESS-MIB", "sliFragRequired"), ("CODIMA-EXPRESS-MIB", "sliSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "sliDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "sliDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "sliSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "sliNetProhibited"), ("CODIMA-EXPRESS-MIB", "sliHostProhibited"), ("CODIMA-EXPRESS-MIB", "sliNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "sliHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "sliPerformance"), ("CODIMA-EXPRESS-MIB", "sliNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "sliHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "sliAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "sliRouteChange"), ("CODIMA-EXPRESS-MIB", "sliGrpErrors"), ("CODIMA-EXPRESS-MIB", "sliMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slIcmpGroup = slIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: slIcmpGroup.setDescription('CODIMA Express History Long Term Segment Database ICMP Object Group.')
slPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 1, 6)).setObjects(("CODIMA-EXPRESS-MIB", "slp1TimeStampIndex"), ("CODIMA-EXPRESS-MIB", "slp1TimeStamp"), ("CODIMA-EXPRESS-MIB", "slp1Frames"), ("CODIMA-EXPRESS-MIB", "slp1Bytes"), ("CODIMA-EXPRESS-MIB", "slp1FrameSize"), ("CODIMA-EXPRESS-MIB", "slp1Utilization"), ("CODIMA-EXPRESS-MIB", "slp1LineSpeed"), ("CODIMA-EXPRESS-MIB", "slp1SoftErrors"), ("CODIMA-EXPRESS-MIB", "slp1Runts"), ("CODIMA-EXPRESS-MIB", "slp1Jabbers"), ("CODIMA-EXPRESS-MIB", "slp1Crc"), ("CODIMA-EXPRESS-MIB", "slp1Collisions"), ("CODIMA-EXPRESS-MIB", "slp1LateCollisions"), ("CODIMA-EXPRESS-MIB", "slp1LineNoise"), ("CODIMA-EXPRESS-MIB", "slp2Frames"), ("CODIMA-EXPRESS-MIB", "slp2Bytes"), ("CODIMA-EXPRESS-MIB", "slp2FrameSize"), ("CODIMA-EXPRESS-MIB", "slp2Utilization"), ("CODIMA-EXPRESS-MIB", "slp2LineSpeed"), ("CODIMA-EXPRESS-MIB", "slp2SoftErrors"), ("CODIMA-EXPRESS-MIB", "slp2Runts"), ("CODIMA-EXPRESS-MIB", "slp2Jabbers"), ("CODIMA-EXPRESS-MIB", "slp2Crc"), ("CODIMA-EXPRESS-MIB", "slp2Collisions"), ("CODIMA-EXPRESS-MIB", "slp2LateCollisions"), ("CODIMA-EXPRESS-MIB", "slp2LineNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slPortGroup = slPortGroup.setStatus('current')
if mibBuilder.loadTexts: slPortGroup.setDescription('CODIMA Express History Long Term Segment Database Port Object Group.')
segShortTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2))
ssBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "ssbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ssbTimeStamp"), ("CODIMA-EXPRESS-MIB", "ssbFrames"), ("CODIMA-EXPRESS-MIB", "ssbBytes"), ("CODIMA-EXPRESS-MIB", "ssbFrameSize"), ("CODIMA-EXPRESS-MIB", "ssbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "ssbSoftwareErrors"), ("CODIMA-EXPRESS-MIB", "ssbActiveNodes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssBaseGroup = ssBaseGroup.setStatus('current')
if mibBuilder.loadTexts: ssBaseGroup.setDescription('CODIMA Express History Short Term Segment Database Base Object Group.')
ssBroadcastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2, 2)).setObjects(("CODIMA-EXPRESS-MIB", "ssbcTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ssbcTimeStamp"), ("CODIMA-EXPRESS-MIB", "ssbcBytes"), ("CODIMA-EXPRESS-MIB", "ssbcBytesPercent"), ("CODIMA-EXPRESS-MIB", "ssbcFrames"), ("CODIMA-EXPRESS-MIB", "ssbcFramesPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssBroadcastGroup = ssBroadcastGroup.setStatus('current')
if mibBuilder.loadTexts: ssBroadcastGroup.setDescription('CODIMA Express History Short Term Segment Database Broadcast Object Group.')
ssDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2, 3)).setObjects(("CODIMA-EXPRESS-MIB", "ssdTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ssdTimeStamp"), ("CODIMA-EXPRESS-MIB", "ssdUtilization"), ("CODIMA-EXPRESS-MIB", "ssdErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssDerivedGroup = ssDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: ssDerivedGroup.setDescription('CODIMA Express History Short Term Segment Database Derived Object Group.')
ssEthernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2, 4)).setObjects(("CODIMA-EXPRESS-MIB", "sseTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "sseTimeStamp"), ("CODIMA-EXPRESS-MIB", "sseRunts"), ("CODIMA-EXPRESS-MIB", "sseJabbers"), ("CODIMA-EXPRESS-MIB", "sseCrc"), ("CODIMA-EXPRESS-MIB", "sseCollisions"), ("CODIMA-EXPRESS-MIB", "sseLateCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssEthernetGroup = ssEthernetGroup.setStatus('current')
if mibBuilder.loadTexts: ssEthernetGroup.setDescription('CODIMA Express History Short Term Segment Database Ethernet Object Group.')
ssIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2, 5)).setObjects(("CODIMA-EXPRESS-MIB", "ssiTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ssiTimeStamp"), ("CODIMA-EXPRESS-MIB", "ssiPing"), ("CODIMA-EXPRESS-MIB", "ssiSrcQuench"), ("CODIMA-EXPRESS-MIB", "ssiRedirect"), ("CODIMA-EXPRESS-MIB", "ssiTtlExceeded"), ("CODIMA-EXPRESS-MIB", "ssiParamProblem"), ("CODIMA-EXPRESS-MIB", "ssiTimestamp"), ("CODIMA-EXPRESS-MIB", "ssiFragTimeout"), ("CODIMA-EXPRESS-MIB", "ssiNetUnreachable"), ("CODIMA-EXPRESS-MIB", "ssiHostUnreachable"), ("CODIMA-EXPRESS-MIB", "ssiProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "ssiPortUnreachable"), ("CODIMA-EXPRESS-MIB", "ssiFragRequired"), ("CODIMA-EXPRESS-MIB", "ssiSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "ssiDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "ssiDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "ssiSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "ssiNetProhibited"), ("CODIMA-EXPRESS-MIB", "ssiHostProhibited"), ("CODIMA-EXPRESS-MIB", "ssiNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "ssiHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "ssiPerformance"), ("CODIMA-EXPRESS-MIB", "ssiNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "ssiHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "ssiAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "ssiRouteChange"), ("CODIMA-EXPRESS-MIB", "ssiErrors"), ("CODIMA-EXPRESS-MIB", "ssiMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssIcmpGroup = ssIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: ssIcmpGroup.setDescription('CODIMA Express History Short Term Segment Database Ethernet Object Group.')
ssPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 2, 2, 6)).setObjects(("CODIMA-EXPRESS-MIB", "sspTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "sspTimeStamp"), ("CODIMA-EXPRESS-MIB", "ssp1Frames"), ("CODIMA-EXPRESS-MIB", "ssp1Bytes"), ("CODIMA-EXPRESS-MIB", "ssp1FrameSize"), ("CODIMA-EXPRESS-MIB", "ssp1Utilization"), ("CODIMA-EXPRESS-MIB", "ssp1LineSpeed"), ("CODIMA-EXPRESS-MIB", "ssp1SoftErrors"), ("CODIMA-EXPRESS-MIB", "ssp1Runts"), ("CODIMA-EXPRESS-MIB", "ssp1Jabbers"), ("CODIMA-EXPRESS-MIB", "ssp1Crc"), ("CODIMA-EXPRESS-MIB", "ssp1Collisions"), ("CODIMA-EXPRESS-MIB", "ssp1LateCollisions"), ("CODIMA-EXPRESS-MIB", "ssp1LineNoise"), ("CODIMA-EXPRESS-MIB", "ssp2Frames"), ("CODIMA-EXPRESS-MIB", "ssp2Bytes"), ("CODIMA-EXPRESS-MIB", "ssp2FrameSize"), ("CODIMA-EXPRESS-MIB", "ssp2Utilization"), ("CODIMA-EXPRESS-MIB", "ssp2LineSpeed"), ("CODIMA-EXPRESS-MIB", "ssp2SoftErrors"), ("CODIMA-EXPRESS-MIB", "ssp2Runts"), ("CODIMA-EXPRESS-MIB", "ssp2Jabbers"), ("CODIMA-EXPRESS-MIB", "ssp2Crc"), ("CODIMA-EXPRESS-MIB", "ssp2Collisions"), ("CODIMA-EXPRESS-MIB", "ssp2LateCollisions"), ("CODIMA-EXPRESS-MIB", "ssp2LineNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssPortGroup = ssPortGroup.setStatus('current')
if mibBuilder.loadTexts: ssPortGroup.setDescription('CODIMA Express History Short Term Segment Database Port Object Group.')
dbMacGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3))
macLongTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1))
mlBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "mlbMacIndex"), ("CODIMA-EXPRESS-MIB", "mlbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mlbTimeStamp"), ("CODIMA-EXPRESS-MIB", "mlbFrames"), ("CODIMA-EXPRESS-MIB", "mlbBytes"), ("CODIMA-EXPRESS-MIB", "mlbFrameSize"), ("CODIMA-EXPRESS-MIB", "mlbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "mlbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mlBaseGroup = mlBaseGroup.setStatus('current')
if mibBuilder.loadTexts: mlBaseGroup.setDescription('CODIMA Express History Long Term MAC Database Base Object Group.')
mlDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "mldMacIndex"), ("CODIMA-EXPRESS-MIB", "mldTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mldTimeStamp"), ("CODIMA-EXPRESS-MIB", "mldUtilization"), ("CODIMA-EXPRESS-MIB", "mldErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mlDerivedGroup = mlDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: mlDerivedGroup.setDescription('CODIMA Express History Long Term MAC Database Derived Object Group.')
mlDuplexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1, 3)).setObjects(("CODIMA-EXPRESS-MIB", "mlduMacIndex"), ("CODIMA-EXPRESS-MIB", "mlduTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mlduTimeStamp"), ("CODIMA-EXPRESS-MIB", "mlduTxFrames"), ("CODIMA-EXPRESS-MIB", "mlduTxBytes"), ("CODIMA-EXPRESS-MIB", "mlduTxFrameSize"), ("CODIMA-EXPRESS-MIB", "mlduTxUtilization"), ("CODIMA-EXPRESS-MIB", "mlduRxFrames"), ("CODIMA-EXPRESS-MIB", "mlduRxBytes"), ("CODIMA-EXPRESS-MIB", "mlduRxFrameSize"), ("CODIMA-EXPRESS-MIB", "mlduRxUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mlDuplexGroup = mlDuplexGroup.setStatus('current')
if mibBuilder.loadTexts: mlDuplexGroup.setDescription('CODIMA Express History Long Term MAC Database Duplex Object Group.')
mlEthernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1, 4)).setObjects(("CODIMA-EXPRESS-MIB", "mleMacIndex"), ("CODIMA-EXPRESS-MIB", "mleTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mleTimeStamp"), ("CODIMA-EXPRESS-MIB", "mleRunts"), ("CODIMA-EXPRESS-MIB", "mleJabbers"), ("CODIMA-EXPRESS-MIB", "mleCrc"), ("CODIMA-EXPRESS-MIB", "mleCollisions"), ("CODIMA-EXPRESS-MIB", "mleLateCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mlEthernetGroup = mlEthernetGroup.setStatus('current')
if mibBuilder.loadTexts: mlEthernetGroup.setDescription('CODIMA Express History Long Term MAC Database Ethernet Object Group.')
mlIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1, 5)).setObjects(("CODIMA-EXPRESS-MIB", "mliMacIndex"), ("CODIMA-EXPRESS-MIB", "mliTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mliTimeStamp"), ("CODIMA-EXPRESS-MIB", "mliPing"), ("CODIMA-EXPRESS-MIB", "mliSrcQuench"), ("CODIMA-EXPRESS-MIB", "mliRedirect"), ("CODIMA-EXPRESS-MIB", "mliTtlExceeded"), ("CODIMA-EXPRESS-MIB", "mliParamProblem"), ("CODIMA-EXPRESS-MIB", "mliTimestamp"), ("CODIMA-EXPRESS-MIB", "mliFragTimeout"), ("CODIMA-EXPRESS-MIB", "mliNetUnreachable"), ("CODIMA-EXPRESS-MIB", "mliHostUnreachable"), ("CODIMA-EXPRESS-MIB", "mliProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "mliPortUnreachable"), ("CODIMA-EXPRESS-MIB", "mliFragRequired"), ("CODIMA-EXPRESS-MIB", "mliSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "mliDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "mliDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "mliSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "mliNetProhibited"), ("CODIMA-EXPRESS-MIB", "mliHostProhibited"), ("CODIMA-EXPRESS-MIB", "mliNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "mliHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "mliPerformance"), ("CODIMA-EXPRESS-MIB", "mliNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "mliHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "mliAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "mliRouteChange"), ("CODIMA-EXPRESS-MIB", "mliErrors"), ("CODIMA-EXPRESS-MIB", "mliMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mlIcmpGroup = mlIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: mlIcmpGroup.setDescription('CODIMA Express History Long Term MAC Database ICMP Object Group.')
mlProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 1, 6)).setObjects(("CODIMA-EXPRESS-MIB", "mlpMacIndex"), ("CODIMA-EXPRESS-MIB", "mlpTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mlpTimeStamp"), ("CODIMA-EXPRESS-MIB", "mlpNovell"), ("CODIMA-EXPRESS-MIB", "mlpSnmp"), ("CODIMA-EXPRESS-MIB", "mlpRouting"), ("CODIMA-EXPRESS-MIB", "mlpWww"), ("CODIMA-EXPRESS-MIB", "mlpIcmp"), ("CODIMA-EXPRESS-MIB", "mlpIso"), ("CODIMA-EXPRESS-MIB", "mlpMail"), ("CODIMA-EXPRESS-MIB", "mlpNetbios"), ("CODIMA-EXPRESS-MIB", "mlpDns"), ("CODIMA-EXPRESS-MIB", "mlpIp"), ("CODIMA-EXPRESS-MIB", "mlpVoip"), ("CODIMA-EXPRESS-MIB", "mlpLayer3Traffic"), ("CODIMA-EXPRESS-MIB", "mlpIpData"), ("CODIMA-EXPRESS-MIB", "mlpApplications"), ("CODIMA-EXPRESS-MIB", "mlpIpControl"), ("CODIMA-EXPRESS-MIB", "mlpManagement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mlProtocolGroup = mlProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: mlProtocolGroup.setDescription('CODIMA Express History Long Term MAC Database Protocol Object Group.')
macShortTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2))
msBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "msbMacIndex"), ("CODIMA-EXPRESS-MIB", "msbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "msbTimeStamp"), ("CODIMA-EXPRESS-MIB", "msbFrames"), ("CODIMA-EXPRESS-MIB", "msbBytes"), ("CODIMA-EXPRESS-MIB", "msbFrameSize"), ("CODIMA-EXPRESS-MIB", "msbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "msbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msBaseGroup = msBaseGroup.setStatus('current')
if mibBuilder.loadTexts: msBaseGroup.setDescription('CODIMA Express History Short Term MAC Database Base Object Group.')
msDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2, 2)).setObjects(("CODIMA-EXPRESS-MIB", "msdMacIndex"), ("CODIMA-EXPRESS-MIB", "msdTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "msdTimeStamp"), ("CODIMA-EXPRESS-MIB", "msdUtilization"), ("CODIMA-EXPRESS-MIB", "msdErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msDerivedGroup = msDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: msDerivedGroup.setDescription('CODIMA Express History Short Term MAC Database Derived Object Group.')
msDuplexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2, 3)).setObjects(("CODIMA-EXPRESS-MIB", "msdpMacIndex"), ("CODIMA-EXPRESS-MIB", "msdpTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "msdpTimeStamp"), ("CODIMA-EXPRESS-MIB", "msdpTxFrames"), ("CODIMA-EXPRESS-MIB", "msdpTxBytes"), ("CODIMA-EXPRESS-MIB", "msdpTxFrameSize"), ("CODIMA-EXPRESS-MIB", "msdpTxUtilization"), ("CODIMA-EXPRESS-MIB", "msdpRxFrames"), ("CODIMA-EXPRESS-MIB", "msdpRxBytes"), ("CODIMA-EXPRESS-MIB", "msdpRxFrameSize"), ("CODIMA-EXPRESS-MIB", "msdpRxUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msDuplexGroup = msDuplexGroup.setStatus('current')
if mibBuilder.loadTexts: msDuplexGroup.setDescription('CODIMA Express History Short Term MAC Database Duplex Object Group.')
msEthernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2, 4)).setObjects(("CODIMA-EXPRESS-MIB", "mseMacIndex"), ("CODIMA-EXPRESS-MIB", "mseTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mseTimeStamp"), ("CODIMA-EXPRESS-MIB", "mseRunts"), ("CODIMA-EXPRESS-MIB", "mseJabbers"), ("CODIMA-EXPRESS-MIB", "mseCrc"), ("CODIMA-EXPRESS-MIB", "mseCollisions"), ("CODIMA-EXPRESS-MIB", "mseLateCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msEthernetGroup = msEthernetGroup.setStatus('current')
if mibBuilder.loadTexts: msEthernetGroup.setDescription('CODIMA Express History Short Term MAC Database Ethernet Object Group.')
msIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2, 5)).setObjects(("CODIMA-EXPRESS-MIB", "msiMacIndex"), ("CODIMA-EXPRESS-MIB", "msiTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "msiTimeStamp"), ("CODIMA-EXPRESS-MIB", "msiPing"), ("CODIMA-EXPRESS-MIB", "msiSrcQuench"), ("CODIMA-EXPRESS-MIB", "msiRedirect"), ("CODIMA-EXPRESS-MIB", "msiTtlExceeded"), ("CODIMA-EXPRESS-MIB", "msiParamProblem"), ("CODIMA-EXPRESS-MIB", "msiTimestamp"), ("CODIMA-EXPRESS-MIB", "msiFragTimeout"), ("CODIMA-EXPRESS-MIB", "msiNetUnreachable"), ("CODIMA-EXPRESS-MIB", "msiHostUnreachable"), ("CODIMA-EXPRESS-MIB", "msiProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "msiPortUnreachable"), ("CODIMA-EXPRESS-MIB", "msiFragRequired"), ("CODIMA-EXPRESS-MIB", "msiSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "msiDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "msiDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "msiSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "msiNetProhibited"), ("CODIMA-EXPRESS-MIB", "msiHostProhibited"), ("CODIMA-EXPRESS-MIB", "msiNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "msiHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "msiPerformance"), ("CODIMA-EXPRESS-MIB", "msiNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "msiHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "msiAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "msiRouteChange"), ("CODIMA-EXPRESS-MIB", "msiErrors"), ("CODIMA-EXPRESS-MIB", "msiMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msIcmpGroup = msIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: msIcmpGroup.setDescription('CODIMA Express History Short Term MAC Database ICMP Object Group.')
msProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 3, 2, 6)).setObjects(("CODIMA-EXPRESS-MIB", "mspMacIndex"), ("CODIMA-EXPRESS-MIB", "mspTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mspTimeStamp"), ("CODIMA-EXPRESS-MIB", "mspNovell"), ("CODIMA-EXPRESS-MIB", "mspSnmp"), ("CODIMA-EXPRESS-MIB", "mspRouting"), ("CODIMA-EXPRESS-MIB", "mspWww"), ("CODIMA-EXPRESS-MIB", "mspIcmp"), ("CODIMA-EXPRESS-MIB", "mspIso"), ("CODIMA-EXPRESS-MIB", "mspMail"), ("CODIMA-EXPRESS-MIB", "mspNetbios"), ("CODIMA-EXPRESS-MIB", "mspDns"), ("CODIMA-EXPRESS-MIB", "mspIp"), ("CODIMA-EXPRESS-MIB", "mspVoip"), ("CODIMA-EXPRESS-MIB", "mspLayer3Traffic"), ("CODIMA-EXPRESS-MIB", "mspIpData"), ("CODIMA-EXPRESS-MIB", "mspApplications"), ("CODIMA-EXPRESS-MIB", "mspIpControl"), ("CODIMA-EXPRESS-MIB", "mspManagement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msProtocolGroup = msProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: msProtocolGroup.setDescription('CODIMA Express History Short Term MAC Database Protocol Object Group.')
dbMacPeerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4))
macPeerLongTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 1))
mplBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "mplbMac1Index"), ("CODIMA-EXPRESS-MIB", "mplbMac2Index"), ("CODIMA-EXPRESS-MIB", "mplbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mplbTimeStamp"), ("CODIMA-EXPRESS-MIB", "mplbFrames"), ("CODIMA-EXPRESS-MIB", "mplbBytes"), ("CODIMA-EXPRESS-MIB", "mplbFrameSize"), ("CODIMA-EXPRESS-MIB", "mplbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "mplbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplBaseGroup = mplBaseGroup.setStatus('current')
if mibBuilder.loadTexts: mplBaseGroup.setDescription('CODIMA Express History Long Term MAC Peer Database Base Object Group.')
mplDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "mpldMac1Index"), ("CODIMA-EXPRESS-MIB", "mpldMac2Index"), ("CODIMA-EXPRESS-MIB", "mpldTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mpldTimeStamp"), ("CODIMA-EXPRESS-MIB", "mpldUtilization"), ("CODIMA-EXPRESS-MIB", "mpldErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplDerivedGroup = mplDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: mplDerivedGroup.setDescription('CODIMA Express History Long Term MAC Peer Database Derived Object Group.')
mplDuplexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 1, 3)).setObjects(("CODIMA-EXPRESS-MIB", "mplduMac1Index"), ("CODIMA-EXPRESS-MIB", "mplduMac2Index"), ("CODIMA-EXPRESS-MIB", "mplduTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mplduTimeStamp"), ("CODIMA-EXPRESS-MIB", "mplduTxFrames"), ("CODIMA-EXPRESS-MIB", "mplduTxBytes"), ("CODIMA-EXPRESS-MIB", "mplduTxFrameSize"), ("CODIMA-EXPRESS-MIB", "mplduTxUtilization"), ("CODIMA-EXPRESS-MIB", "mplduRxFrames"), ("CODIMA-EXPRESS-MIB", "mplduRxBytes"), ("CODIMA-EXPRESS-MIB", "mplduRxFrameSize"), ("CODIMA-EXPRESS-MIB", "mplduRxUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplDuplexGroup = mplDuplexGroup.setStatus('current')
if mibBuilder.loadTexts: mplDuplexGroup.setDescription('CODIMA Express History Long Term MAC Peer Database Duplex Object Group.')
mplProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 1, 4)).setObjects(("CODIMA-EXPRESS-MIB", "mplpMac1Index"), ("CODIMA-EXPRESS-MIB", "mplpMac2Index"), ("CODIMA-EXPRESS-MIB", "mplpTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mplpTimeStamp"), ("CODIMA-EXPRESS-MIB", "mplpNovell"), ("CODIMA-EXPRESS-MIB", "mplpSnmp"), ("CODIMA-EXPRESS-MIB", "mplpRouting"), ("CODIMA-EXPRESS-MIB", "mplpWww"), ("CODIMA-EXPRESS-MIB", "mplpIcmp"), ("CODIMA-EXPRESS-MIB", "mplpIso"), ("CODIMA-EXPRESS-MIB", "mplpMail"), ("CODIMA-EXPRESS-MIB", "mplpNetbios"), ("CODIMA-EXPRESS-MIB", "mplpDns"), ("CODIMA-EXPRESS-MIB", "mplpIp"), ("CODIMA-EXPRESS-MIB", "mplpVoip"), ("CODIMA-EXPRESS-MIB", "mplpLayer3Traffic"), ("CODIMA-EXPRESS-MIB", "mplpIpData"), ("CODIMA-EXPRESS-MIB", "mplpApplications"), ("CODIMA-EXPRESS-MIB", "mplpIpControl"), ("CODIMA-EXPRESS-MIB", "mplpManagement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplProtocolGroup = mplProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: mplProtocolGroup.setDescription('CODIMA Express History Long Term MAC Peer Database Protocol Object Group.')
macPeerShortTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 2))
mpsBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "mpsbMac1Index"), ("CODIMA-EXPRESS-MIB", "mpsbMac2Index"), ("CODIMA-EXPRESS-MIB", "mpsbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mpsbTimeStamp"), ("CODIMA-EXPRESS-MIB", "mpsbFrames"), ("CODIMA-EXPRESS-MIB", "mpsbBytes"), ("CODIMA-EXPRESS-MIB", "mpsbFrameSize"), ("CODIMA-EXPRESS-MIB", "mpsbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "mpsbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsBaseGroup = mpsBaseGroup.setStatus('current')
if mibBuilder.loadTexts: mpsBaseGroup.setDescription('CODIMA Express History Short Term MAC Peer Database Base Object Group.')
mpsDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 2, 2)).setObjects(("CODIMA-EXPRESS-MIB", "mpsdMac1Index"), ("CODIMA-EXPRESS-MIB", "mpsdMac2Index"), ("CODIMA-EXPRESS-MIB", "mpsdTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mpsdTimeStamp"), ("CODIMA-EXPRESS-MIB", "mpsdUtilization"), ("CODIMA-EXPRESS-MIB", "mpsdErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsDerivedGroup = mpsDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: mpsDerivedGroup.setDescription('CODIMA Express History Short Term MAC Peer Database Derived Object Group.')
mpsDuplexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 2, 3)).setObjects(("CODIMA-EXPRESS-MIB", "mpsduMac1Index"), ("CODIMA-EXPRESS-MIB", "mpsduMac2Index"), ("CODIMA-EXPRESS-MIB", "mpsduTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mpsduTimeStamp"), ("CODIMA-EXPRESS-MIB", "mpsduTxFrames"), ("CODIMA-EXPRESS-MIB", "mpsduTxBytes"), ("CODIMA-EXPRESS-MIB", "mpsduTxFrameSize"), ("CODIMA-EXPRESS-MIB", "mpsduTxUtilization"), ("CODIMA-EXPRESS-MIB", "mpsduRxFrames"), ("CODIMA-EXPRESS-MIB", "mpsduRxBytes"), ("CODIMA-EXPRESS-MIB", "mpsduRxFrameSize"), ("CODIMA-EXPRESS-MIB", "mpsduRxUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsDuplexGroup = mpsDuplexGroup.setStatus('current')
if mibBuilder.loadTexts: mpsDuplexGroup.setDescription('CODIMA Express History Short Term MAC Peer Database Duplex Object Group.')
mpsProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 4, 2, 4)).setObjects(("CODIMA-EXPRESS-MIB", "mpspMac1Index"), ("CODIMA-EXPRESS-MIB", "mpspMac2Index"), ("CODIMA-EXPRESS-MIB", "mpspTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "mpspTimeStamp"), ("CODIMA-EXPRESS-MIB", "mpspNovell"), ("CODIMA-EXPRESS-MIB", "mpspSnmp"), ("CODIMA-EXPRESS-MIB", "mpspRouting"), ("CODIMA-EXPRESS-MIB", "mpspWww"), ("CODIMA-EXPRESS-MIB", "mpspIcmp"), ("CODIMA-EXPRESS-MIB", "mpspIso"), ("CODIMA-EXPRESS-MIB", "mpspMail"), ("CODIMA-EXPRESS-MIB", "mpspNetbios"), ("CODIMA-EXPRESS-MIB", "mpspDns"), ("CODIMA-EXPRESS-MIB", "mpspIp"), ("CODIMA-EXPRESS-MIB", "mpspVoip"), ("CODIMA-EXPRESS-MIB", "mpspLayer3Traffic"), ("CODIMA-EXPRESS-MIB", "mpspIpData"), ("CODIMA-EXPRESS-MIB", "mpspApplications"), ("CODIMA-EXPRESS-MIB", "mpspIpControl"), ("CODIMA-EXPRESS-MIB", "mpspManagement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsProtocolGroup = mpsProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: mpsProtocolGroup.setDescription('CODIMA Express History Short Term MAC Peer Database Protocol Object Group.')
dbIPv4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5))
ipLongTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 1))
ilBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "ilbIpIndex"), ("CODIMA-EXPRESS-MIB", "ilbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ilbTimeStamp"), ("CODIMA-EXPRESS-MIB", "ilbFrames"), ("CODIMA-EXPRESS-MIB", "ilbBytes"), ("CODIMA-EXPRESS-MIB", "ilbFrameSize"), ("CODIMA-EXPRESS-MIB", "ilbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "ilbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ilBaseGroup = ilBaseGroup.setStatus('current')
if mibBuilder.loadTexts: ilBaseGroup.setDescription('CODIMA Express History Long Term IPv4 Database Base Object Group.')
ilDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "ildIpIndex"), ("CODIMA-EXPRESS-MIB", "ildTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ildTimeStamp"), ("CODIMA-EXPRESS-MIB", "ildUtilization"), ("CODIMA-EXPRESS-MIB", "ildErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ilDerivedGroup = ilDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: ilDerivedGroup.setDescription('CODIMA Express History Long Term IPv4 Database Derived Object Group.')
ilIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 1, 3)).setObjects(("CODIMA-EXPRESS-MIB", "iliIpIndex"), ("CODIMA-EXPRESS-MIB", "iliTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "iliTimeStamp"), ("CODIMA-EXPRESS-MIB", "iliPing"), ("CODIMA-EXPRESS-MIB", "iliSrcQuench"), ("CODIMA-EXPRESS-MIB", "iliRedirect"), ("CODIMA-EXPRESS-MIB", "iliTtlExceeded"), ("CODIMA-EXPRESS-MIB", "iliParamProblem"), ("CODIMA-EXPRESS-MIB", "iliTimestamp"), ("CODIMA-EXPRESS-MIB", "iliFragTimeout"), ("CODIMA-EXPRESS-MIB", "iliNetUnreachable"), ("CODIMA-EXPRESS-MIB", "iliHostUnreachable"), ("CODIMA-EXPRESS-MIB", "iliProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "iliPortUnreachable"), ("CODIMA-EXPRESS-MIB", "iliFragRequired"), ("CODIMA-EXPRESS-MIB", "iliSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "iliDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "iliDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "iliSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "iliNetProhibited"), ("CODIMA-EXPRESS-MIB", "iliHostProhibited"), ("CODIMA-EXPRESS-MIB", "iliNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "iliHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "iliPerformance"), ("CODIMA-EXPRESS-MIB", "iliNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "iliHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "iliAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "iliRouteChange"), ("CODIMA-EXPRESS-MIB", "iliErrors"), ("CODIMA-EXPRESS-MIB", "iliMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ilIcmpGroup = ilIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: ilIcmpGroup.setDescription('CODIMA Express History Long Term IPv4 Database ICMP Object Group.')
ipShortTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 2))
isBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "isbIpIndex"), ("CODIMA-EXPRESS-MIB", "isbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "isbTimeStamp"), ("CODIMA-EXPRESS-MIB", "isbFrames"), ("CODIMA-EXPRESS-MIB", "isbBytes"), ("CODIMA-EXPRESS-MIB", "isbFrameSize"), ("CODIMA-EXPRESS-MIB", "isbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "isbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isBaseGroup = isBaseGroup.setStatus('current')
if mibBuilder.loadTexts: isBaseGroup.setDescription('CODIMA Express History Short Term IPv4 Database Base Object Group.')
isDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 2, 2)).setObjects(("CODIMA-EXPRESS-MIB", "isdIpIndex"), ("CODIMA-EXPRESS-MIB", "isdTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "isdTimeStamp"), ("CODIMA-EXPRESS-MIB", "isdUtilization"), ("CODIMA-EXPRESS-MIB", "isdErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isDerivedGroup = isDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: isDerivedGroup.setDescription('CODIMA Express History Short Term IPv4 Database Derived Object Group.')
isIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 5, 2, 3)).setObjects(("CODIMA-EXPRESS-MIB", "isiIpIndex"), ("CODIMA-EXPRESS-MIB", "isiTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "isiTimeStamp"), ("CODIMA-EXPRESS-MIB", "isiPing"), ("CODIMA-EXPRESS-MIB", "isiSrcQuench"), ("CODIMA-EXPRESS-MIB", "isiRedirect"), ("CODIMA-EXPRESS-MIB", "isiTtlExceeded"), ("CODIMA-EXPRESS-MIB", "isiParamProblem"), ("CODIMA-EXPRESS-MIB", "isiTimestamp"), ("CODIMA-EXPRESS-MIB", "isiFragTimeout"), ("CODIMA-EXPRESS-MIB", "isiNetUnreachable"), ("CODIMA-EXPRESS-MIB", "isiHostUnreachable"), ("CODIMA-EXPRESS-MIB", "isiProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "isiPortUnreachable"), ("CODIMA-EXPRESS-MIB", "isiFragRequired"), ("CODIMA-EXPRESS-MIB", "isiSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "isiDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "isiDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "isiSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "isiNetProhibited"), ("CODIMA-EXPRESS-MIB", "isiHostProhibited"), ("CODIMA-EXPRESS-MIB", "isiNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "isiHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "isiPerformance"), ("CODIMA-EXPRESS-MIB", "isiNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "isiHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "isiAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "isiRouteChange"), ("CODIMA-EXPRESS-MIB", "isiErrors"), ("CODIMA-EXPRESS-MIB", "isiMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isIcmpGroup = isIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: isIcmpGroup.setDescription('CODIMA Express History Short Term IPv4 Database ICMP Object Group.')
dpIPv4PeerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6))
ipPeerLongTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 1))
iplBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "iplbIp1Index"), ("CODIMA-EXPRESS-MIB", "iplbIp2Index"), ("CODIMA-EXPRESS-MIB", "iplbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "iplbTimeStamp"), ("CODIMA-EXPRESS-MIB", "iplbFrames"), ("CODIMA-EXPRESS-MIB", "iplbBytes"), ("CODIMA-EXPRESS-MIB", "iplbFrameSize"), ("CODIMA-EXPRESS-MIB", "iplbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "iplbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iplBaseGroup = iplBaseGroup.setStatus('current')
if mibBuilder.loadTexts: iplBaseGroup.setDescription('CODIMA Express History Long Term IPv4 Peer Database Base Object Group.')
iplDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "ipldIp1Index"), ("CODIMA-EXPRESS-MIB", "ipldIp2Index"), ("CODIMA-EXPRESS-MIB", "ipldTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ipldTimeStamp"), ("CODIMA-EXPRESS-MIB", "ipldUtilization"), ("CODIMA-EXPRESS-MIB", "ipldErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iplDerivedGroup = iplDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: iplDerivedGroup.setDescription('CODIMA Express History Long Term IPv4 Peer Database Derived Object Group.')
iplIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 1, 3)).setObjects(("CODIMA-EXPRESS-MIB", "ipliIp1Index"), ("CODIMA-EXPRESS-MIB", "ipliIp2Index"), ("CODIMA-EXPRESS-MIB", "ipliTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ipliTimeStamp"), ("CODIMA-EXPRESS-MIB", "ipliPing"), ("CODIMA-EXPRESS-MIB", "ipliSrcQuench"), ("CODIMA-EXPRESS-MIB", "ipliRedirect"), ("CODIMA-EXPRESS-MIB", "ipliTtlExceeded"), ("CODIMA-EXPRESS-MIB", "ipliParamProblem"), ("CODIMA-EXPRESS-MIB", "ipliTimestamp"), ("CODIMA-EXPRESS-MIB", "ipliFragTimeout"), ("CODIMA-EXPRESS-MIB", "ipliNetUnreachable"), ("CODIMA-EXPRESS-MIB", "ipliHostUnreachable"), ("CODIMA-EXPRESS-MIB", "ipliProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "ipliPortUnreachable"), ("CODIMA-EXPRESS-MIB", "ipliFragRequired"), ("CODIMA-EXPRESS-MIB", "ipliSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "ipliDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "ipliDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "ipliSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "ipliNetProhibited"), ("CODIMA-EXPRESS-MIB", "ipliHostProhibited"), ("CODIMA-EXPRESS-MIB", "ipliNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "ipliHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "ipliPerformance"), ("CODIMA-EXPRESS-MIB", "ipliNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "ipliHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "ipliAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "ipliRouteChange"), ("CODIMA-EXPRESS-MIB", "ipliErrors"), ("CODIMA-EXPRESS-MIB", "ipliMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iplIcmpGroup = iplIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: iplIcmpGroup.setDescription('CODIMA Express History Long Term IPv4 Peer Database ICMP Object Group.')
ipPeerShortTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 2))
ipsBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "ipsbIp1Index"), ("CODIMA-EXPRESS-MIB", "ipsbIp2Index"), ("CODIMA-EXPRESS-MIB", "ipsbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ipsbTimeStamp"), ("CODIMA-EXPRESS-MIB", "ipsbFrames"), ("CODIMA-EXPRESS-MIB", "ipsbBytes"), ("CODIMA-EXPRESS-MIB", "ipsbFrameSize"), ("CODIMA-EXPRESS-MIB", "ipsbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "ipsbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsBaseGroup = ipsBaseGroup.setStatus('current')
if mibBuilder.loadTexts: ipsBaseGroup.setDescription('CODIMA Express History Short Term IPv4 Peer Database Base Object Group.')
ipsDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 2, 2)).setObjects(("CODIMA-EXPRESS-MIB", "ipsdIp1Index"), ("CODIMA-EXPRESS-MIB", "ipsdIp2Index"), ("CODIMA-EXPRESS-MIB", "ipsdTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ipsdTimeStamp"), ("CODIMA-EXPRESS-MIB", "ipsdUtilization"), ("CODIMA-EXPRESS-MIB", "ipsdErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsDerivedGroup = ipsDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: ipsDerivedGroup.setDescription('CODIMA Express History Short Term IPv4 Peer Database Derived Object Group.')
ipsIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 6, 2, 3)).setObjects(("CODIMA-EXPRESS-MIB", "ipsiIp1Index"), ("CODIMA-EXPRESS-MIB", "ipsiIp2Index"), ("CODIMA-EXPRESS-MIB", "ipsiTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "ipsiTimeStamp"), ("CODIMA-EXPRESS-MIB", "ipsiPing"), ("CODIMA-EXPRESS-MIB", "ipsiSrcQuench"), ("CODIMA-EXPRESS-MIB", "ipsiRedirect"), ("CODIMA-EXPRESS-MIB", "ipsiTtlExceeded"), ("CODIMA-EXPRESS-MIB", "ipsiParamProblem"), ("CODIMA-EXPRESS-MIB", "ipsiTimestamp"), ("CODIMA-EXPRESS-MIB", "ipsiFragTimeout"), ("CODIMA-EXPRESS-MIB", "ipsiNetUnreachable"), ("CODIMA-EXPRESS-MIB", "ipsiHostUnreachable"), ("CODIMA-EXPRESS-MIB", "ipsiProtocolUnreachable"), ("CODIMA-EXPRESS-MIB", "ipsiPortUnreachable"), ("CODIMA-EXPRESS-MIB", "ipsiFragRequired"), ("CODIMA-EXPRESS-MIB", "ipsiSrcRouteFail"), ("CODIMA-EXPRESS-MIB", "ipsiDestNetUnknown"), ("CODIMA-EXPRESS-MIB", "ipsiDestHostUnknown"), ("CODIMA-EXPRESS-MIB", "ipsiSrcHostIsolated"), ("CODIMA-EXPRESS-MIB", "ipsiNetProhibited"), ("CODIMA-EXPRESS-MIB", "ipsiHostProhibited"), ("CODIMA-EXPRESS-MIB", "ipsiNetTosUnreachable"), ("CODIMA-EXPRESS-MIB", "ipsiHostTosUnreachable"), ("CODIMA-EXPRESS-MIB", "ipsiPerformance"), ("CODIMA-EXPRESS-MIB", "ipsiNetRouteProblem"), ("CODIMA-EXPRESS-MIB", "ipsiHostRouteProblem"), ("CODIMA-EXPRESS-MIB", "ipsiAppRouteProblem"), ("CODIMA-EXPRESS-MIB", "ipsiRouteChange"), ("CODIMA-EXPRESS-MIB", "ipsiErrors"), ("CODIMA-EXPRESS-MIB", "ipsiMaintenance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsIcmpGroup = ipsIcmpGroup.setStatus('current')
if mibBuilder.loadTexts: ipsIcmpGroup.setDescription('CODIMA Express History Short Term IPv4 Peer Database ICMP Object Group.')
dbProtocolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7))
protocolLongTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7, 1))
plBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7, 1, 1)).setObjects(("CODIMA-EXPRESS-MIB", "plbLayerIndex"), ("CODIMA-EXPRESS-MIB", "plbIdIndex"), ("CODIMA-EXPRESS-MIB", "plbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "plbTimeStamp"), ("CODIMA-EXPRESS-MIB", "plbProtocolName"), ("CODIMA-EXPRESS-MIB", "plbFrames"), ("CODIMA-EXPRESS-MIB", "plbBytes"), ("CODIMA-EXPRESS-MIB", "plbFrameSize"), ("CODIMA-EXPRESS-MIB", "plbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "plbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    plBaseGroup = plBaseGroup.setStatus('current')
if mibBuilder.loadTexts: plBaseGroup.setDescription('CODIMA Express History Long Term Protocol Database Base Object Group.')
plDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "pldLayerIndex"), ("CODIMA-EXPRESS-MIB", "pldIdIndex"), ("CODIMA-EXPRESS-MIB", "pldTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "pldTimeStamp"), ("CODIMA-EXPRESS-MIB", "pldProtocolName"), ("CODIMA-EXPRESS-MIB", "pldUtilization"), ("CODIMA-EXPRESS-MIB", "pldErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    plDerivedGroup = plDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: plDerivedGroup.setDescription('CODIMA Express History Long Term Protocol Database Derived Object Group.')
protocolShortTermGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7, 2))
psBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "psbLayerIndex"), ("CODIMA-EXPRESS-MIB", "psbIdIndex"), ("CODIMA-EXPRESS-MIB", "psbTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "psbTimeStamp"), ("CODIMA-EXPRESS-MIB", "psbProtocolName"), ("CODIMA-EXPRESS-MIB", "psbFrames"), ("CODIMA-EXPRESS-MIB", "psbBytes"), ("CODIMA-EXPRESS-MIB", "psbFrameSize"), ("CODIMA-EXPRESS-MIB", "psbHardwareErrors"), ("CODIMA-EXPRESS-MIB", "psbSoftwareErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    psBaseGroup = psBaseGroup.setStatus('current')
if mibBuilder.loadTexts: psBaseGroup.setDescription('CODIMA Express History Short Term Protocol Database Base Object Group.')
psDerivedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 7, 2, 2)).setObjects(("CODIMA-EXPRESS-MIB", "psdLayerIndex"), ("CODIMA-EXPRESS-MIB", "psdIdIndex"), ("CODIMA-EXPRESS-MIB", "psdTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "psdTimeStamp"), ("CODIMA-EXPRESS-MIB", "psdProtocolName"), ("CODIMA-EXPRESS-MIB", "psdUtilization"), ("CODIMA-EXPRESS-MIB", "psdErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    psDerivedGroup = psDerivedGroup.setStatus('current')
if mibBuilder.loadTexts: psDerivedGroup.setDescription('CODIMA Express History Short Term Protocol Database Derived Object Group.')
dbNetChannelGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 8))
netChannelLongTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 8, 1)).setObjects(("CODIMA-EXPRESS-MIB", "nlTypeIndex"), ("CODIMA-EXPRESS-MIB", "nlNameIndex"), ("CODIMA-EXPRESS-MIB", "nlTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "nlTimeStamp"), ("CODIMA-EXPRESS-MIB", "nlFrames"), ("CODIMA-EXPRESS-MIB", "nlBytes"), ("CODIMA-EXPRESS-MIB", "nlFrameSize"), ("CODIMA-EXPRESS-MIB", "nlHardErrors"), ("CODIMA-EXPRESS-MIB", "nlSoftErrors"), ("CODIMA-EXPRESS-MIB", "nlUtilization"), ("CODIMA-EXPRESS-MIB", "nlHardErrorsPercent"), ("CODIMA-EXPRESS-MIB", "nlSoftErrorsPercent"), ("CODIMA-EXPRESS-MIB", "nlFramesPercent"), ("CODIMA-EXPRESS-MIB", "nlBytesPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    netChannelLongTermGroup = netChannelLongTermGroup.setStatus('current')
if mibBuilder.loadTexts: netChannelLongTermGroup.setDescription('CODIMA Express History Long Term NetChannel Database NetChannel Object Group.')
netChannelShortTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 8, 2)).setObjects(("CODIMA-EXPRESS-MIB", "nsTypeIndex"), ("CODIMA-EXPRESS-MIB", "nsNameIndex"), ("CODIMA-EXPRESS-MIB", "nsTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "nsTimeStamp"), ("CODIMA-EXPRESS-MIB", "nsFrames"), ("CODIMA-EXPRESS-MIB", "nsBytes"), ("CODIMA-EXPRESS-MIB", "nsFrameSize"), ("CODIMA-EXPRESS-MIB", "nsHardErrors"), ("CODIMA-EXPRESS-MIB", "nsSoftErrors"), ("CODIMA-EXPRESS-MIB", "nsUtilization"), ("CODIMA-EXPRESS-MIB", "nsHardErrorsPercent"), ("CODIMA-EXPRESS-MIB", "nsSoftErrorsPercent"), ("CODIMA-EXPRESS-MIB", "nsFramesPercent"), ("CODIMA-EXPRESS-MIB", "nsBytesPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    netChannelShortTermGroup = netChannelShortTermGroup.setStatus('current')
if mibBuilder.loadTexts: netChannelShortTermGroup.setDescription('CODIMA Express History Short Term NetChannel Database NetChannel Object Group.')
dbVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 9))
vlanLongTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 9, 1)).setObjects(("CODIMA-EXPRESS-MIB", "vlIdIndex"), ("CODIMA-EXPRESS-MIB", "vlTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "vlTimeStamp"), ("CODIMA-EXPRESS-MIB", "vlName"), ("CODIMA-EXPRESS-MIB", "vlFrames"), ("CODIMA-EXPRESS-MIB", "vlBytes"), ("CODIMA-EXPRESS-MIB", "vlFrameSize"), ("CODIMA-EXPRESS-MIB", "vlHardErrors"), ("CODIMA-EXPRESS-MIB", "vlSoftErrors"), ("CODIMA-EXPRESS-MIB", "vlUtilization"), ("CODIMA-EXPRESS-MIB", "vlHardErrorsPercent"), ("CODIMA-EXPRESS-MIB", "vlSoftErrorsPercent"), ("CODIMA-EXPRESS-MIB", "vlFramesPercent"), ("CODIMA-EXPRESS-MIB", "vlBytesPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanLongTermGroup = vlanLongTermGroup.setStatus('current')
if mibBuilder.loadTexts: vlanLongTermGroup.setDescription('CODIMA Express History Long Term VLAN Database VLAN Object Group.')
vlanShortTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 1, 9, 2)).setObjects(("CODIMA-EXPRESS-MIB", "vsIdIndex"), ("CODIMA-EXPRESS-MIB", "vsTimeStampIndex"), ("CODIMA-EXPRESS-MIB", "vsTimeStamp"), ("CODIMA-EXPRESS-MIB", "vsName"), ("CODIMA-EXPRESS-MIB", "vsFrames"), ("CODIMA-EXPRESS-MIB", "vsBytes"), ("CODIMA-EXPRESS-MIB", "vsFrameSize"), ("CODIMA-EXPRESS-MIB", "vsHardErrors"), ("CODIMA-EXPRESS-MIB", "vsSoftErrors"), ("CODIMA-EXPRESS-MIB", "vsUtilization"), ("CODIMA-EXPRESS-MIB", "vsHardErrorsPercent"), ("CODIMA-EXPRESS-MIB", "vsSoftErrorsPercent"), ("CODIMA-EXPRESS-MIB", "vsFramesPercent"), ("CODIMA-EXPRESS-MIB", "vsBytesPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanShortTermGroup = vlanShortTermGroup.setStatus('current')
if mibBuilder.loadTexts: vlanShortTermGroup.setDescription('CODIMA Express History Short Term VLAN Database Object Group.')
alarmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 1, 2)).setObjects(("CODIMA-EXPRESS-MIB", "alarmMessage"), ("CODIMA-EXPRESS-MIB", "alarmTime"), ("CODIMA-EXPRESS-MIB", "alarmClass"), ("CODIMA-EXPRESS-MIB", "alarmUnitType"), ("CODIMA-EXPRESS-MIB", "alarmGroup"), ("CODIMA-EXPRESS-MIB", "alarmFunction"), ("CODIMA-EXPRESS-MIB", "alarmCode"), ("CODIMA-EXPRESS-MIB", "alarmLayer"), ("CODIMA-EXPRESS-MIB", "alarmBaseProtocol"), ("CODIMA-EXPRESS-MIB", "alarmTopProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmObjectGroup = alarmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alarmObjectGroup.setDescription('CODIMA Express Alarm Object Group.')
expressNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 2))
alarmNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 226, 3, 2, 3, 2, 1)).setObjects(("CODIMA-EXPRESS-MIB", "expressAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmNotifyGroup = alarmNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: alarmNotifyGroup.setDescription('This notification group includes all notifications defined for alarm generation.')
mibBuilder.exportSymbols("CODIMA-EXPRESS-MIB", isIcmpGroup=isIcmpGroup, mspVoip=mspVoip, mpspIso=mpspIso, vlanLongTermEntry=vlanLongTermEntry, mlIcmpTable=mlIcmpTable, msdTimeStamp=msdTimeStamp, slEthernetGroup=slEthernetGroup, nlTypeIndex=nlTypeIndex, mplpSnmp=mplpSnmp, ssPortEntry=ssPortEntry, sleJabbers=sleJabbers, ipliFragRequired=ipliFragRequired, ipsdTimeStamp=ipsdTimeStamp, ssp1Bytes=ssp1Bytes, mplbFrameSize=mplbFrameSize, ilDerivedTable=ilDerivedTable, isiAppRouteProblem=isiAppRouteProblem, msDerivedTable=msDerivedTable, mplpManagement=mplpManagement, mliMacIndex=mliMacIndex, ssp1Frames=ssp1Frames, msiParamProblem=msiParamProblem, nsFramesPercent=nsFramesPercent, mpspTimeStampIndex=mpspTimeStampIndex, ipldIp1Index=ipldIp1Index, ildErrorFrames=ildErrorFrames, sliTimeStamp=sliTimeStamp, slp1TimeStampIndex=slp1TimeStampIndex, mlpManagement=mlpManagement, mpsBaseGroup=mpsBaseGroup, protocolLongTerm=protocolLongTerm, mspManagement=mspManagement, iliSrcHostIsolated=iliSrcHostIsolated, ctrlTimeGroup=ctrlTimeGroup, mplpTimeStampIndex=mplpTimeStampIndex, dbIPv4=dbIPv4, ilBaseTable=ilBaseTable, sliTtlExceeded=sliTtlExceeded, slp2Collisions=slp2Collisions, ipsbTimeStampIndex=ipsbTimeStampIndex, psbProtocolName=psbProtocolName, iliPortUnreachable=iliPortUnreachable, mpspNovell=mpspNovell, isiRouteChange=isiRouteChange, mliFragRequired=mliFragRequired, msiDestHostUnknown=msiDestHostUnknown, mlbSoftwareErrors=mlbSoftwareErrors, ipliTimestamp=ipliTimestamp, psdUtilization=psdUtilization, ssPortTable=ssPortTable, psbBytes=psbBytes, sleTimeStamp=sleTimeStamp, plbSoftwareErrors=plbSoftwareErrors, ildTimeStampIndex=ildTimeStampIndex, ipliHostProhibited=ipliHostProhibited, alarmCode=alarmCode, slp2Utilization=slp2Utilization, mliSrcHostIsolated=mliSrcHostIsolated, pldLayerIndex=pldLayerIndex, msiPortUnreachable=msiPortUnreachable, sliNetProhibited=sliNetProhibited, ssDerivedGroup=ssDerivedGroup, mliNetUnreachable=mliNetUnreachable, ssiTtlExceeded=ssiTtlExceeded, ssiTimeStamp=ssiTimeStamp, slbTimeStamp=slbTimeStamp, iliIpIndex=iliIpIndex, ssiRouteChange=ssiRouteChange, slp2Bytes=slp2Bytes, mliFragTimeout=mliFragTimeout, mlpDns=mlpDns, msbMacIndex=msbMacIndex, ssiParamProblem=ssiParamProblem, msiHostProhibited=msiHostProhibited, codimaExpressNotifications=codimaExpressNotifications, mlEthernetEntry=mlEthernetEntry, iplIcmpTable=iplIcmpTable, pldTimeStamp=pldTimeStamp, pldTimeStampIndex=pldTimeStampIndex, mplduMac2Index=mplduMac2Index, ipShortTerm=ipShortTerm, iplBaseTable=iplBaseTable, sliDestHostUnknown=sliDestHostUnknown, ipPeerLongTermGroups=ipPeerLongTermGroups, sldUtilization=sldUtilization, iliErrors=iliErrors, dbProtocolGroups=dbProtocolGroups, iplbIp1Index=iplbIp1Index, mpsduTxFrameSize=mpsduTxFrameSize, mpsduTxFrames=mpsduTxFrames, msdpTimeStamp=msdpTimeStamp, mpsdErrorFrames=mpsdErrorFrames, alarmBaseProtocol=alarmBaseProtocol, mlIcmpGroup=mlIcmpGroup, ctTimeSlots=ctTimeSlots, ilbSoftwareErrors=ilbSoftwareErrors, dbSegmentGroups=dbSegmentGroups, vsSoftErrorsPercent=vsSoftErrorsPercent, plbBytes=plbBytes, ilDerivedGroup=ilDerivedGroup, expressTraps=expressTraps, mpsDuplexTable=mpsDuplexTable, ssiRedirect=ssiRedirect, slbHardwareErrors=slbHardwareErrors, mldUtilization=mldUtilization, mplduRxUtilization=mplduRxUtilization, msEthernetEntry=msEthernetEntry, mlbFrames=mlbFrames, isiMaintenance=isiMaintenance, ipsiParamProblem=ipsiParamProblem, vlSoftErrorsPercent=vlSoftErrorsPercent, ipsbIp2Index=ipsbIp2Index, mlDerivedTable=mlDerivedTable, ssDerivedTable=ssDerivedTable, mlduRxFrameSize=mlduRxFrameSize, dbMacGroups=dbMacGroups, isdIpIndex=isdIpIndex, ssp1FrameSize=ssp1FrameSize, slp1Utilization=slp1Utilization, mleCollisions=mleCollisions, ctLockUserTime=ctLockUserTime, msdMacIndex=msdMacIndex, slp2LineNoise=slp2LineNoise, slp2LineSpeed=slp2LineSpeed, iliNetTosUnreachable=iliNetTosUnreachable, isiHostProhibited=isiHostProhibited, mliProtocolUnreachable=mliProtocolUnreachable, mplpTimeStamp=mplpTimeStamp, mspNetbios=mspNetbios, isiErrors=isiErrors, sspTimeStampIndex=sspTimeStampIndex, isdErrorFrames=isdErrorFrames, ssp2FrameSize=ssp2FrameSize, ipldUtilization=ipldUtilization, slbcPercentBytes=slbcPercentBytes, ssp2Jabbers=ssp2Jabbers, ipsbBytes=ipsbBytes, sseCrc=sseCrc, mlduRxBytes=mlduRxBytes, mpspManagement=mpspManagement, ipsiTimestamp=ipsiTimestamp, sliPerformance=sliPerformance, mpsdTimeStamp=mpsdTimeStamp, ssBroadcastEntry=ssBroadcastEntry, netChanShortTermTable=netChanShortTermTable, ilbTimeStamp=ilbTimeStamp, iplDerivedGroup=iplDerivedGroup, mliHostUnreachable=mliHostUnreachable, iliParamProblem=iliParamProblem, nsTypeIndex=nsTypeIndex, slp2Crc=slp2Crc, mplpWww=mplpWww, ildIpIndex=ildIpIndex, psdLayerIndex=psdLayerIndex, msiAppRouteProblem=msiAppRouteProblem, codimaExpressObjects=codimaExpressObjects, iplbHardwareErrors=iplbHardwareErrors, ipsBaseTable=ipsBaseTable, ipsbFrameSize=ipsbFrameSize, mpspIcmp=mpspIcmp, mplProtocolGroup=mplProtocolGroup, expressNotificationGroups=expressNotificationGroups, vsName=vsName, mleMacIndex=mleMacIndex, isiHostUnreachable=isiHostUnreachable, ssPortGroup=ssPortGroup, msiHostRouteProblem=msiHostRouteProblem, msbFrames=msbFrames, slbFrameSize=slbFrameSize, expressObjectGroups=expressObjectGroups, msdErrorFrames=msdErrorFrames, ipsiNetProhibited=ipsiNetProhibited, sliTimeStampIndex=sliTimeStampIndex, ilbFrameSize=ilbFrameSize, plDerivedTable=plDerivedTable, slIcmpTable=slIcmpTable, mpsbTimeStamp=mpsbTimeStamp, msbFrameSize=msbFrameSize, vlTimeStampIndex=vlTimeStampIndex, vlHardErrors=vlHardErrors, mlDerivedGroup=mlDerivedGroup, mpsProtocolEntry=mpsProtocolEntry, macPeerShortTermGroups=macPeerShortTermGroups, ssBroadcastTable=ssBroadcastTable, mlpMail=mlpMail, mpsdMac2Index=mpsdMac2Index, mplpMail=mplpMail, mpspMac1Index=mpspMac1Index, mlbTimeStampIndex=mlbTimeStampIndex, mliPerformance=mliPerformance, ssiNetTosUnreachable=ssiNetTosUnreachable, msiFragRequired=msiFragRequired, mpldMac2Index=mpldMac2Index, nlHardErrorsPercent=nlHardErrorsPercent, mpspVoip=mpspVoip, sldTimeStampIndex=sldTimeStampIndex, isdTimeStamp=isdTimeStamp, mspRouting=mspRouting, mliNetRouteProblem=mliNetRouteProblem, iliDestNetUnknown=iliDestNetUnknown, msiNetUnreachable=msiNetUnreachable, mspSnmp=mspSnmp, ipsBaseGroup=ipsBaseGroup, sliHostUnreachable=sliHostUnreachable, dbProtocol=dbProtocol, mspDns=mspDns, mseTimeStamp=mseTimeStamp, isbTimeStampIndex=isbTimeStampIndex, mplProtocolEntry=mplProtocolEntry, ctrlTimeTable=ctrlTimeTable, vsFrameSize=vsFrameSize, sleLateCollisions=sleLateCollisions, mlbHardwareErrors=mlbHardwareErrors, sliAppRouteProblem=sliAppRouteProblem, sliHostTosUnreachable=sliHostTosUnreachable, slp2Runts=slp2Runts, ssbcFrames=ssbcFrames, dbVlan=dbVlan, vlBytes=vlBytes, plDerivedGroup=plDerivedGroup, mpspIpData=mpspIpData, msdpRxUtilization=msdpRxUtilization, dbMac=dbMac, ipsiProtocolUnreachable=ipsiProtocolUnreachable, ssiDestNetUnknown=ssiDestNetUnknown, mplBaseEntry=mplBaseEntry, psbTimeStamp=psbTimeStamp, netChanLongTermTable=netChanLongTermTable, ssbSoftwareErrors=ssbSoftwareErrors, msDuplexGroup=msDuplexGroup, ilbFrames=ilbFrames, ssp1Runts=ssp1Runts, mliHostRouteProblem=mliHostRouteProblem, ipsbSoftwareErrors=ipsbSoftwareErrors, ssp1LineNoise=ssp1LineNoise, ipsiSrcRouteFail=ipsiSrcRouteFail, ipsiTimeStampIndex=ipsiTimeStampIndex, ipsDerivedGroup=ipsDerivedGroup, nlBytes=nlBytes, ipsiHostUnreachable=ipsiHostUnreachable, iliAppRouteProblem=iliAppRouteProblem, slIcmpEntry=slIcmpEntry, mspMacIndex=mspMacIndex, mliMaintenance=mliMaintenance, netChanLongTermEntry=netChanLongTermEntry, mlBaseGroup=mlBaseGroup, psbFrames=psbFrames, mpsBaseTable=mpsBaseTable, vsHardErrorsPercent=vsHardErrorsPercent, mspIp=mspIp, dbControl=dbControl, msiRouteChange=msiRouteChange, slp1Collisions=slp1Collisions, isiDestHostUnknown=isiDestHostUnknown)
mibBuilder.exportSymbols("CODIMA-EXPRESS-MIB", ssp2Crc=ssp2Crc, slBaseGroup=slBaseGroup, mlEthernetTable=mlEthernetTable, nlTimeStamp=nlTimeStamp, sliNetTosUnreachable=sliNetTosUnreachable, isiNetTosUnreachable=isiNetTosUnreachable, nlUtilization=nlUtilization, mplBaseGroup=mplBaseGroup, slp2FrameSize=slp2FrameSize, vlBytesPercent=vlBytesPercent, mlpWww=mlpWww, ipliPortUnreachable=ipliPortUnreachable, ipsiSrcHostIsolated=ipsiSrcHostIsolated, ssiMaintenance=ssiMaintenance, ssp1Utilization=ssp1Utilization, ipliHostUnreachable=ipliHostUnreachable, historyDatabaseGroups=historyDatabaseGroups, mpspNetbios=mpspNetbios, mplduRxBytes=mplduRxBytes, mpsduRxFrameSize=mpsduRxFrameSize, isbBytes=isbBytes, iplBaseEntry=iplBaseEntry, ipliParamProblem=ipliParamProblem, mseCrc=mseCrc, mpldMac1Index=mpldMac1Index, mpsDuplexEntry=mpsDuplexEntry, psDerivedTable=psDerivedTable, mldMacIndex=mldMacIndex, mplpIso=mplpIso, mplbFrames=mplbFrames, ipsiAppRouteProblem=ipsiAppRouteProblem, psBaseTable=psBaseTable, psdProtocolName=psdProtocolName, slp1Crc=slp1Crc, pldIdIndex=pldIdIndex, mseJabbers=mseJabbers, isbTimeStamp=isbTimeStamp, alarmMessage=alarmMessage, ipsIcmpTable=ipsIcmpTable, nlFramesPercent=nlFramesPercent, sliRouteChange=sliRouteChange, slp2SoftErrors=slp2SoftErrors, slBaseTable=slBaseTable, ipldIp2Index=ipldIp2Index, msProtocolEntry=msProtocolEntry, iplbIp2Index=iplbIp2Index, mlDuplexGroup=mlDuplexGroup, slDerivedGroup=slDerivedGroup, mleJabbers=mleJabbers, msdpTxFrames=msdpTxFrames, ipsiPerformance=ipsiPerformance, sliSrcRouteFail=sliSrcRouteFail, segShortTerm=segShortTerm, ssp1Jabbers=ssp1Jabbers, ipLongTermGroups=ipLongTermGroups, ipsiDestNetUnknown=ipsiDestNetUnknown, ipsdUtilization=ipsdUtilization, mliPing=mliPing, ipliAppRouteProblem=ipliAppRouteProblem, sleRunts=sleRunts, msdUtilization=msdUtilization, sliHostRouteProblem=sliHostRouteProblem, sldTimeStamp=sldTimeStamp, macLongTerm=macLongTerm, psdErrorFrames=psdErrorFrames, mpsbTimeStampIndex=mpsbTimeStampIndex, iliPing=iliPing, iplbSoftwareErrors=iplbSoftwareErrors, plbFrames=plbFrames, mlpApplications=mlpApplications, dbMacPeer=dbMacPeer, iplbTimeStampIndex=iplbTimeStampIndex, mlProtocolGroup=mlProtocolGroup, mliHostTosUnreachable=mliHostTosUnreachable, isiHostTosUnreachable=isiHostTosUnreachable, ssbcFramesPercent=ssbcFramesPercent, mplduTimeStamp=mplduTimeStamp, ssiHostUnreachable=ssiHostUnreachable, ssp1SoftErrors=ssp1SoftErrors, msiSrcRouteFail=msiSrcRouteFail, mplDuplexEntry=mplDuplexEntry, mpspDns=mpspDns, alarmTime=alarmTime, mliParamProblem=mliParamProblem, ipldTimeStamp=ipldTimeStamp, msEthernetTable=msEthernetTable, msEthernetGroup=msEthernetGroup, slbBytes=slbBytes, codimaExpressMIB=codimaExpressMIB, mplDuplexTable=mplDuplexTable, slp2LateCollisions=slp2LateCollisions, psdTimeStamp=psdTimeStamp, mplpNetbios=mplpNetbios, iplDerivedEntry=iplDerivedEntry, psBaseEntry=psBaseEntry, alarmObjectGroup=alarmObjectGroup, mplbMac2Index=mplbMac2Index, nlFrames=nlFrames, slIcmpGroup=slIcmpGroup, msProtocolTable=msProtocolTable, ipliRedirect=ipliRedirect, mplDerivedEntry=mplDerivedEntry, isiTimestamp=isiTimestamp, msbTimeStamp=msbTimeStamp, ipliTimeStampIndex=ipliTimeStampIndex, slbcTimeStamp=slbcTimeStamp, msBaseGroup=msBaseGroup, vlanLongTermGroup=vlanLongTermGroup, msiFragTimeout=msiFragTimeout, ilBaseGroup=ilBaseGroup, ilIcmpTable=ilIcmpTable, mplpMac2Index=mplpMac2Index, psbHardwareErrors=psbHardwareErrors, isiHostRouteProblem=isiHostRouteProblem, ipliSrcHostIsolated=ipliSrcHostIsolated, ipsIcmpEntry=ipsIcmpEntry, mlduTimeStamp=mlduTimeStamp, iplIcmpGroup=iplIcmpGroup, ipShortTermGroups=ipShortTermGroups, segLongTerm=segLongTerm, dbMacPeerGroups=dbMacPeerGroups, ipsiFragRequired=ipsiFragRequired, ssiHostTosUnreachable=ssiHostTosUnreachable, msiRedirect=msiRedirect, mliAppRouteProblem=mliAppRouteProblem, ipsDerivedEntry=ipsDerivedEntry, msiPing=msiPing, mplProtocolTable=mplProtocolTable, vsBytesPercent=vsBytesPercent, mliDestNetUnknown=mliDestNetUnknown, isIcmpTable=isIcmpTable, nsHardErrors=nsHardErrors, netChannelLongTermGroup=netChannelLongTermGroup, msdpMacIndex=msdpMacIndex, msiTimeStampIndex=msiTimeStampIndex, ssiNetProhibited=ssiNetProhibited, slp2Jabbers=slp2Jabbers, vlUtilization=vlUtilization, mlbTimeStamp=mlbTimeStamp, slDerivedTable=slDerivedTable, plBaseTable=plBaseTable, slp1Runts=slp1Runts, ssp2LineNoise=ssp2LineNoise, ipliTtlExceeded=ipliTtlExceeded, msIcmpEntry=msIcmpEntry, ipliMaintenance=ipliMaintenance, nlSoftErrors=nlSoftErrors, mplduTxFrameSize=mplduTxFrameSize, mleTimeStamp=mleTimeStamp, vsFramesPercent=vsFramesPercent, slp2Frames=slp2Frames, sseCollisions=sseCollisions, sliTimestamp=sliTimestamp, ipsBaseEntry=ipsBaseEntry, mpsduRxFrames=mpsduRxFrames, ssp2LineSpeed=ssp2LineSpeed, isDerivedEntry=isDerivedEntry, isDerivedGroup=isDerivedGroup, mpldTimeStampIndex=mpldTimeStampIndex, mlEthernetGroup=mlEthernetGroup, ssbcBytes=ssbcBytes, mlpTimeStamp=mlpTimeStamp, msDuplexEntry=msDuplexEntry, isdUtilization=isdUtilization, mpsbFrameSize=mpsbFrameSize, iplDerivedTable=iplDerivedTable, ipliNetUnreachable=ipliNetUnreachable, dbControlGroups=dbControlGroups, mpspIpControl=mpspIpControl, ssp2Bytes=ssp2Bytes, protocolLongTermGroups=protocolLongTermGroups, slbFrames=slbFrames, mliTimeStamp=mliTimeStamp, iliDestHostUnknown=iliDestHostUnknown, plDerivedEntry=plDerivedEntry, msdpTxFrameSize=msdpTxFrameSize, isiNetRouteProblem=isiNetRouteProblem, iliTimeStampIndex=iliTimeStampIndex, ssp1LateCollisions=ssp1LateCollisions, ssBaseEntry=ssBaseEntry, ssiSrcQuench=ssiSrcQuench, sliDestNetUnknown=sliDestNetUnknown, ipliDestNetUnknown=ipliDestNetUnknown, mlpRouting=mlpRouting, ssdTimeStampIndex=ssdTimeStampIndex, msiHostTosUnreachable=msiHostTosUnreachable, ctLockMethod=ctLockMethod, ipliRouteChange=ipliRouteChange, ssbFrameSize=ssbFrameSize, ssIcmpTable=ssIcmpTable, mlBaseTable=mlBaseTable, ssDerivedEntry=ssDerivedEntry, mpsduRxUtilization=mpsduRxUtilization, plbHardwareErrors=plbHardwareErrors, mpsDerivedTable=mpsDerivedTable, mlbBytes=mlbBytes, ssbBytes=ssbBytes, isBaseTable=isBaseTable, mpspTimeStamp=mpspTimeStamp, macPeerLongTerm=macPeerLongTerm, sliProtocolUnreachable=sliProtocolUnreachable, msiTtlExceeded=msiTtlExceeded, ipsiNetRouteProblem=ipsiNetRouteProblem, ipsiMaintenance=ipsiMaintenance, ipliSrcQuench=ipliSrcQuench, ipliNetTosUnreachable=ipliNetTosUnreachable, nsUtilization=nsUtilization, vlanShortTermEntry=vlanShortTermEntry, mliTimestamp=mliTimestamp, codimaExpressConformance=codimaExpressConformance, vlanShortTermGroup=vlanShortTermGroup, netChanShortTermEntry=netChanShortTermEntry, ildTimeStamp=ildTimeStamp, mlDerivedEntry=mlDerivedEntry, mlbMacIndex=mlbMacIndex, msdpRxFrames=msdpRxFrames, ipLongTerm=ipLongTerm, mlDuplexTable=mlDuplexTable, msDerivedGroup=msDerivedGroup, mspIpControl=mspIpControl, mliRedirect=mliRedirect, dbNetChannelGroups=dbNetChannelGroups, mlpTimeStampIndex=mlpTimeStampIndex, iplbFrameSize=iplbFrameSize, mplpApplications=mplpApplications, mseCollisions=mseCollisions, mseLateCollisions=mseLateCollisions, mspMail=mspMail, ipliTimeStamp=ipliTimeStamp, ipliNetProhibited=ipliNetProhibited, dbNetChannel=dbNetChannel, ilbHardwareErrors=ilbHardwareErrors, sliHostProhibited=sliHostProhibited, mlpNovell=mlpNovell, slBroadcastEntry=slBroadcastEntry, ipsiRouteChange=ipsiRouteChange, mpsdUtilization=mpsdUtilization, ssbTimeStamp=ssbTimeStamp, ssBaseGroup=ssBaseGroup, mldTimeStamp=mldTimeStamp, mlduTimeStampIndex=mlduTimeStampIndex, isiIpIndex=isiIpIndex, ssdUtilization=ssdUtilization, isbFrameSize=isbFrameSize, ipsiRedirect=ipsiRedirect, ssiHostProhibited=ssiHostProhibited, msdpTxUtilization=msdpTxUtilization, ipsiHostTosUnreachable=ipsiHostTosUnreachable, msiTimestamp=msiTimestamp, mplDuplexGroup=mplDuplexGroup, protocolShortTermGroups=protocolShortTermGroups, mplDerivedGroup=mplDerivedGroup, msbHardwareErrors=msbHardwareErrors, mspApplications=mspApplications)
mibBuilder.exportSymbols("CODIMA-EXPRESS-MIB", mplbSoftwareErrors=mplbSoftwareErrors, mspTimeStamp=mspTimeStamp, plbTimeStamp=plbTimeStamp, mldTimeStampIndex=mldTimeStampIndex, macPeerLongTermGroups=macPeerLongTermGroups, sseRunts=sseRunts, slbcBytes=slbcBytes, isdTimeStampIndex=isdTimeStampIndex, ssiNetRouteProblem=ssiNetRouteProblem, dbVlanGroups=dbVlanGroups, mlbFrameSize=mlbFrameSize, mpspIp=mpspIp, mlBaseEntry=mlBaseEntry, ssp2SoftErrors=ssp2SoftErrors, mleRunts=mleRunts, msBaseEntry=msBaseEntry, ipliIp1Index=ipliIp1Index, ildUtilization=ildUtilization, ipsiHostRouteProblem=ipsiHostRouteProblem, msiTimeStamp=msiTimeStamp, isbIpIndex=isbIpIndex, msiSrcQuench=msiSrcQuench, iliSrcRouteFail=iliSrcRouteFail, nsFrames=nsFrames, isBaseEntry=isBaseEntry, mlIcmpEntry=mlIcmpEntry, ipsbIp1Index=ipsbIp1Index, ipliHostRouteProblem=ipliHostRouteProblem, mspLayer3Traffic=mspLayer3Traffic, iliHostUnreachable=iliHostUnreachable, psbTimeStampIndex=psbTimeStampIndex, ssp2Collisions=ssp2Collisions, vlanLongTermTable=vlanLongTermTable, msbSoftwareErrors=msbSoftwareErrors, isiPerformance=isiPerformance, msiDestNetUnknown=msiDestNetUnknown, isiTimeStampIndex=isiTimeStampIndex, vlFrameSize=vlFrameSize, mlProtocolTable=mlProtocolTable, mplbHardwareErrors=mplbHardwareErrors, isiSrcRouteFail=isiSrcRouteFail, slbActiveNodes=slbActiveNodes, vsFrames=vsFrames, mseRunts=mseRunts, slEthernetEntry=slEthernetEntry, isbSoftwareErrors=isbSoftwareErrors, sliFragTimeout=sliFragTimeout, mplbMac1Index=mplbMac1Index, ipsdTimeStampIndex=ipsdTimeStampIndex, ssIcmpGroup=ssIcmpGroup, ilBaseEntry=ilBaseEntry, ssiPing=ssiPing, mpsbSoftwareErrors=mpsbSoftwareErrors, iliFragRequired=iliFragRequired, ssiProtocolUnreachable=ssiProtocolUnreachable, vsSoftErrors=vsSoftErrors, isbFrames=isbFrames, ssbActiveNodes=ssbActiveNodes, ipliSrcRouteFail=ipliSrcRouteFail, msiSrcHostIsolated=msiSrcHostIsolated, ssBroadcastGroup=ssBroadcastGroup, ssiPerformance=ssiPerformance, ssiHostRouteProblem=ssiHostRouteProblem, mspNovell=mspNovell, mpldErrorFrames=mpldErrorFrames, iplbTimeStamp=iplbTimeStamp, mspIcmp=mspIcmp, mlpSnmp=mlpSnmp, slp1Jabbers=slp1Jabbers, segShortTermGroups=segShortTermGroups, msdpTimeStampIndex=msdpTimeStampIndex, mpldTimeStamp=mpldTimeStamp, vsUtilization=vsUtilization, iplbBytes=iplbBytes, sliRedirect=sliRedirect, alarmFunction=alarmFunction, ipsiTtlExceeded=ipsiTtlExceeded, mplbTimeStamp=mplbTimeStamp, mplduRxFrames=mplduRxFrames, mpsduTxBytes=mpsduTxBytes, isBaseGroup=isBaseGroup, slp1LineSpeed=slp1LineSpeed, msdTimeStampIndex=msdTimeStampIndex, iliTimestamp=iliTimestamp, ipliIp2Index=ipliIp2Index, sldErrorFrames=sldErrorFrames, mpspLayer3Traffic=mpspLayer3Traffic, mlduMacIndex=mlduMacIndex, nlHardErrors=nlHardErrors, alarmTopProtocol=alarmTopProtocol, plBaseGroup=plBaseGroup, mliTimeStampIndex=mliTimeStampIndex, ipliPerformance=ipliPerformance, ssiFragRequired=ssiFragRequired, ipliDestHostUnknown=ipliDestHostUnknown, psBaseGroup=psBaseGroup, slBroadcastGroup=slBroadcastGroup, dbSegment=dbSegment, mplpIpControl=mplpIpControl, msDuplexTable=msDuplexTable, vsTimeStamp=vsTimeStamp, macShortTermGroups=macShortTermGroups, sleTimeStampIndex=sleTimeStampIndex, ssiTimeStampIndex=ssiTimeStampIndex, mpsbFrames=mpsbFrames, slbcFrames=slbcFrames, ipsiHostProhibited=ipsiHostProhibited, mplduTimeStampIndex=mplduTimeStampIndex, mplbTimeStampIndex=mplbTimeStampIndex, mspIso=mspIso, ilIcmpGroup=ilIcmpGroup, iliHostTosUnreachable=iliHostTosUnreachable, nlNameIndex=nlNameIndex, ssiSrcHostIsolated=ssiSrcHostIsolated, sliNetUnreachable=sliNetUnreachable, ipsiTimeStamp=ipsiTimeStamp, isiFragTimeout=isiFragTimeout, iliMaintenance=iliMaintenance, mplduTxUtilization=mplduTxUtilization, ipldErrorFrames=ipldErrorFrames, iplBaseGroup=iplBaseGroup, mpspWww=mpspWww, ilbBytes=ilbBytes, ssbFrames=ssbFrames, msiHostUnreachable=msiHostUnreachable, nsFrameSize=nsFrameSize, vsIdIndex=vsIdIndex, vsTimeStampIndex=vsTimeStampIndex, mplduRxFrameSize=mplduRxFrameSize, expressAlarm=expressAlarm, ipsiPing=ipsiPing, ipsiNetUnreachable=ipsiNetUnreachable, isiNetUnreachable=isiNetUnreachable, mliNetTosUnreachable=mliNetTosUnreachable, vlHardErrorsPercent=vlHardErrorsPercent, mpspMac2Index=mpspMac2Index, vlIdIndex=vlIdIndex, mplpIpData=mplpIpData, slEthernetTable=slEthernetTable, ssEthernetGroup=ssEthernetGroup, slp1Bytes=slp1Bytes, msbTimeStampIndex=msbTimeStampIndex, nsTimeStamp=nsTimeStamp, mpsbMac2Index=mpsbMac2Index, isiDestNetUnknown=isiDestNetUnknown, nsHardErrorsPercent=nsHardErrorsPercent, isiTimeStamp=isiTimeStamp, alarmUnitType=alarmUnitType, ssEthernetEntry=ssEthernetEntry, msiMaintenance=msiMaintenance, iliRouteChange=iliRouteChange, isiRedirect=isiRedirect, nlTimeStampIndex=nlTimeStampIndex, plbLayerIndex=plbLayerIndex, msiMacIndex=msiMacIndex, ssbHardwareErrors=ssbHardwareErrors, ssp1Collisions=ssp1Collisions, ipsiFragTimeout=ipsiFragTimeout, mlduRxUtilization=mlduRxUtilization, isiSrcQuench=isiSrcQuench, slp1Frames=slp1Frames, mleTimeStampIndex=mleTimeStampIndex, psbSoftwareErrors=psbSoftwareErrors, msdpRxFrameSize=msdpRxFrameSize, mspTimeStampIndex=mspTimeStampIndex, ssEthernetTable=ssEthernetTable, PYSNMP_MODULE_ID=codimaExpressMIB, mlduRxFrames=mlduRxFrames, iliFragTimeout=iliFragTimeout, isIcmpEntry=isIcmpEntry, ipsiIp2Index=ipsiIp2Index, protocolShortTerm=protocolShortTerm, sspTimeStamp=sspTimeStamp, mpsProtocolGroup=mpsProtocolGroup, mpsduMac2Index=mpsduMac2Index, ssbcTimeStampIndex=ssbcTimeStampIndex, msDerivedEntry=msDerivedEntry, slBaseEntry=slBaseEntry, sliSrcQuench=sliSrcQuench, mliTtlExceeded=mliTtlExceeded, mspWww=mspWww, mlpLayer3Traffic=mlpLayer3Traffic, iliNetProhibited=iliNetProhibited, psbLayerIndex=psbLayerIndex, ipsbHardwareErrors=ipsbHardwareErrors, psbFrameSize=psbFrameSize, msiProtocolUnreachable=msiProtocolUnreachable, msiErrors=msiErrors, isbHardwareErrors=isbHardwareErrors, mpsduRxBytes=mpsduRxBytes, mliSrcRouteFail=mliSrcRouteFail, ssiFragTimeout=ssiFragTimeout, ipsIcmpGroup=ipsIcmpGroup, mplpIcmp=mplpIcmp, ilbTimeStampIndex=ilbTimeStampIndex, sliNetRouteProblem=sliNetRouteProblem, vlSoftErrors=vlSoftErrors, isiFragRequired=isiFragRequired, ipliFragTimeout=ipliFragTimeout, slbcTimeStampIndex=slbcTimeStampIndex, ssiDestHostUnknown=ssiDestHostUnknown, mplduMac1Index=mplduMac1Index, ssdErrorFrames=ssdErrorFrames, mlProtocolEntry=mlProtocolEntry, iliPerformance=iliPerformance, isiParamProblem=isiParamProblem, sliPing=sliPing, mpsDerivedEntry=mpsDerivedEntry, dbIPv4Peer=dbIPv4Peer, sliParamProblem=sliParamProblem, mplpRouting=mplpRouting, mplpLayer3Traffic=mplpLayer3Traffic, ssBaseTable=ssBaseTable, nlSoftErrorsPercent=nlSoftErrorsPercent, mlpIcmp=mlpIcmp, mpsbMac1Index=mpsbMac1Index, iliSrcQuench=iliSrcQuench, iliNetRouteProblem=iliNetRouteProblem, iliHostRouteProblem=iliHostRouteProblem, mplDerivedTable=mplDerivedTable, mpsduTxUtilization=mpsduTxUtilization, ipsiDestHostUnknown=ipsiDestHostUnknown, dbIPv4Groups=dbIPv4Groups, plbFrameSize=plbFrameSize, iplIcmpEntry=iplIcmpEntry, mpsduMac1Index=mpsduMac1Index, vlName=vlName, mpsdMac1Index=mpsdMac1Index, macPeerShortTerm=macPeerShortTerm, mpsDerivedGroup=mpsDerivedGroup, vlFrames=vlFrames, mliErrors=mliErrors, psDerivedEntry=psDerivedEntry, slp1FrameSize=slp1FrameSize, iliTtlExceeded=iliTtlExceeded, msbBytes=msbBytes, mliHostProhibited=mliHostProhibited, mlpNetbios=mlpNetbios, ilIcmpEntry=ilIcmpEntry, slBroadcastTable=slBroadcastTable, ssiTimestamp=ssiTimestamp, isiProtocolUnreachable=isiProtocolUnreachable, plbIdIndex=plbIdIndex, ssp2Utilization=ssp2Utilization, nsSoftErrorsPercent=nsSoftErrorsPercent, slbSoftwareErrors=slbSoftwareErrors, ipsiIp1Index=ipsiIp1Index, isiPing=isiPing, mlpIpData=mlpIpData, ipPeerShortTermGroups=ipPeerShortTermGroups, expAlarms=expAlarms, vlTimeStamp=vlTimeStamp, ipsiNetTosUnreachable=ipsiNetTosUnreachable, isiNetProhibited=isiNetProhibited)
mibBuilder.exportSymbols("CODIMA-EXPRESS-MIB", mplpDns=mplpDns, macLongTermGroups=macLongTermGroups, ssp2Frames=ssp2Frames, sliFragRequired=sliFragRequired, slp1TimeStamp=slp1TimeStamp, slbTimeStampIndex=slbTimeStampIndex, mpsduTimeStampIndex=mpsduTimeStampIndex, ssiAppRouteProblem=ssiAppRouteProblem, ssbcTimeStamp=ssbcTimeStamp, mliSrcQuench=mliSrcQuench, sseTimeStampIndex=sseTimeStampIndex, nlFrameSize=nlFrameSize, msIcmpTable=msIcmpTable, ipldTimeStampIndex=ipldTimeStampIndex, ipsiPortUnreachable=ipsiPortUnreachable, mpsbBytes=mpsbBytes, mlpIp=mlpIp, mplpVoip=mplpVoip, ipsdIp2Index=ipsdIp2Index, vlFramesPercent=vlFramesPercent, iliRedirect=iliRedirect, mpsbHardwareErrors=mpsbHardwareErrors, slp1LateCollisions=slp1LateCollisions, mspIpData=mspIpData, ipsDerivedTable=ipsDerivedTable, alarmNotifyGroup=alarmNotifyGroup, ssbcBytesPercent=ssbcBytesPercent, ssdTimeStamp=ssdTimeStamp, sliGrpErrors=sliGrpErrors, mliNetProhibited=mliNetProhibited, ctrlTimeEntry=ctrlTimeEntry, nsBytes=nsBytes, dpIPv4PeerGroups=dpIPv4PeerGroups, msdpRxBytes=msdpRxBytes, msiNetRouteProblem=msiNetRouteProblem, slPortGroup=slPortGroup, plBaseEntry=plBaseEntry, slbcPercentFrames=slbcPercentFrames, msBaseTable=msBaseTable, ipliNetRouteProblem=ipliNetRouteProblem, mlduTxFrameSize=mlduTxFrameSize, iliNetUnreachable=iliNetUnreachable, netChannelShortTermGroup=netChannelShortTermGroup, mpsProtocolTable=mpsProtocolTable, ssiPortUnreachable=ssiPortUnreachable, ipPeerLongTerm=ipPeerLongTerm, isiTtlExceeded=isiTtlExceeded, plbTimeStampIndex=plbTimeStampIndex, iliProtocolUnreachable=iliProtocolUnreachable, sliPortUnreachable=sliPortUnreachable, mpspMail=mpspMail, iplbFrames=iplbFrames, ipliHostTosUnreachable=ipliHostTosUnreachable, sleCrc=sleCrc, msiPerformance=msiPerformance, sliMaintenance=sliMaintenance, sseJabbers=sseJabbers, ipliProtocolUnreachable=ipliProtocolUnreachable, ssiErrors=ssiErrors, slp1SoftErrors=slp1SoftErrors, vlanShortTermTable=vlanShortTermTable, nsNameIndex=nsNameIndex, ssp2Runts=ssp2Runts, vsBytes=vsBytes, mleLateCollisions=mleLateCollisions, nlBytesPercent=nlBytesPercent, sleCollisions=sleCollisions, psdIdIndex=psdIdIndex, mleCrc=mleCrc, pldProtocolName=pldProtocolName, ipsdErrorFrames=ipsdErrorFrames, pldUtilization=pldUtilization, ssp1LineSpeed=ssp1LineSpeed, msdpTxBytes=msdpTxBytes, mpsduTimeStamp=mpsduTimeStamp, psbIdIndex=psbIdIndex, alarmClass=alarmClass, ipPeerShortTerm=ipPeerShortTerm, slPortTable=slPortTable, mldErrorFrames=mldErrorFrames, vsHardErrors=vsHardErrors, alarmGroup=alarmGroup, isiPortUnreachable=isiPortUnreachable, mseTimeStampIndex=mseTimeStampIndex, nsTimeStampIndex=nsTimeStampIndex, nsSoftErrors=nsSoftErrors, slDerivedEntry=slDerivedEntry, ssp2LateCollisions=ssp2LateCollisions, slp1LineNoise=slp1LineNoise, mliDestHostUnknown=mliDestHostUnknown, ilbIpIndex=ilbIpIndex, mlpIpControl=mlpIpControl, iliTimeStamp=iliTimeStamp, mseMacIndex=mseMacIndex, mplpIp=mplpIp, msiNetTosUnreachable=msiNetTosUnreachable, ssp1Crc=ssp1Crc, sseLateCollisions=sseLateCollisions, mlpMacIndex=mlpMacIndex, mlpIso=mlpIso, alarmLayer=alarmLayer, mplpNovell=mplpNovell, mpsDuplexGroup=mpsDuplexGroup, mplbBytes=mplbBytes, ipliErrors=ipliErrors, psDerivedGroup=psDerivedGroup, ilDerivedEntry=ilDerivedEntry, mplpMac1Index=mplpMac1Index, msiNetProhibited=msiNetProhibited, mplBaseTable=mplBaseTable, isDerivedTable=isDerivedTable, mliRouteChange=mliRouteChange, ctLockRealTime=ctLockRealTime, macShortTerm=macShortTerm, psdTimeStampIndex=psdTimeStampIndex, mpspRouting=mpspRouting, pldErrorFrames=pldErrorFrames, nsBytesPercent=nsBytesPercent, ipsbFrames=ipsbFrames, ctSampleType=ctSampleType, iliHostProhibited=iliHostProhibited, ipliPing=ipliPing, ipsdIp1Index=ipsdIp1Index, mpsdTimeStampIndex=mpsdTimeStampIndex, slPortEntry=slPortEntry, mplduTxBytes=mplduTxBytes, mlDuplexEntry=mlDuplexEntry, ssiNetUnreachable=ssiNetUnreachable, mlduTxFrames=mlduTxFrames, mliPortUnreachable=mliPortUnreachable, plbProtocolName=plbProtocolName, isiSrcHostIsolated=isiSrcHostIsolated, ssiSrcRouteFail=ssiSrcRouteFail, mlduTxBytes=mlduTxBytes, ipsiErrors=ipsiErrors, mpsBaseEntry=mpsBaseEntry, ssIcmpEntry=ssIcmpEntry, mpspApplications=mpspApplications, mpspSnmp=mpspSnmp, mlduTxUtilization=mlduTxUtilization, ipsbTimeStamp=ipsbTimeStamp, mlpVoip=mlpVoip, expHistoryDatabases=expHistoryDatabases, mpldUtilization=mpldUtilization, msIcmpGroup=msIcmpGroup, ssbTimeStampIndex=ssbTimeStampIndex, mplduTxFrames=mplduTxFrames, sseTimeStamp=sseTimeStamp, msProtocolGroup=msProtocolGroup, ipsiSrcQuench=ipsiSrcQuench, segLongTermGroups=segLongTermGroups, sliSrcHostIsolated=sliSrcHostIsolated)
