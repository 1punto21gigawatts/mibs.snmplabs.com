#
# PySNMP MIB module SIEMENS-PN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SIEMENS-PN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32, Bits, Integer32, enterprises, Counter64, NotificationType, Counter32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32", "Bits", "Integer32", "enterprises", "Counter64", "NotificationType", "Counter32", "IpAddress", "TimeTicks")
TestAndIncr, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "DisplayString", "RowStatus", "TextualConvention")
hicomMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 231, 7, 2, 1))
if mibBuilder.loadTexts: hicomMib.setLastUpdated('0101031300+0100')
if mibBuilder.loadTexts: hicomMib.setOrganization('Siemens AG, Dept. PN')
if mibBuilder.loadTexts: hicomMib.setContactInfo('Georg Geberthammer')
if mibBuilder.loadTexts: hicomMib.setDescription('This is the MIB for Siemens 300 Hicom PBX and UNITY systems. It includes topology and system management, alarm management and hard/software management.')
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
siemensUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7))
pn = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2))
hicomControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 0))
hicomSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1))
hicomAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2))
hicomErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3))
hicomAlConf = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4))
hicomSoft = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5))
hicomHard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6))
hicomTopo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7))
hicomSQL = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8))
hicomDiscov = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9))
hicomMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20))
hicomTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21))
hicomTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1))
hicomTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2))
hicomSystemTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 1))
hicomAlarmTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 2))
hicomErrorTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 3))
hicomSWTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 4))
hicomAlConfTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 5))
hicomHWTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 6))
hicomTopoTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 7))
hicomSQLTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 8))
hicomDiscTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 9))
hicomSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1))
hicomAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2))
hicomErrorTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3))
hicomAlConfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 4))
hicomSWTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5))
hicomHWTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6))
hicomTopoTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7))
hicomSQLTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 8))
hicomDiscTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9))
hicomMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1))
hicomCntrlTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 0))
hicomSysTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 1))
hicomAlarmTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 2))
hicomErrorTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 3))
hicomAlConfTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 4))
hicomSoftTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 5))
hicomHardTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 6))
hicomTopoTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 7))
hicomSQLtree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 8))
hicomDiscovTree = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 9))
class DiscoveryStates(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("done", 1), ("error", 2), ("busy", 3), ("finok", 4), ("finerr", 5), ("kill", 6), ("masterDone", 11), ("masterError", 12), ("masterBusy", 13), ("masterFinok", 14), ("masterFinerr", 15), ("errdelDone", 21), ("errdelError", 22), ("errdelBusy", 23), ("errdelFinok", 24), ("errdelFinerr", 25))

class DiscoveryModes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 9))
    namedValues = NamedValues(("man", 1), ("auto", 2), ("undef", 9))

class AlarmFilterStates(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("filterOn", 1), ("filterOff", 2))

class AlarmPriorities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("minor", 1), ("major", 2), ("device", 3))

hicomProxyName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 0, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomProxyName.setStatus('current')
if mibBuilder.loadTexts: hicomProxyName.setDescription('Name of the Hicom proxy agent.')
hicomAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 0, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAgentVersion.setStatus('current')
if mibBuilder.loadTexts: hicomAgentVersion.setDescription('Version of the Hicom proxy agent. ')
hicomMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 0, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomMIBVersion.setStatus('current')
if mibBuilder.loadTexts: hicomMIBVersion.setDescription('MIB Version of the Hicom proxy agent. ')
hicomControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 0, 1)).setObjects(("SIEMENS-PN-MIB", "hicomProxyName"), ("SIEMENS-PN-MIB", "hicomAgentVersion"), ("SIEMENS-PN-MIB", "hicomMIBVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomControlGroup = hicomControlGroup.setStatus('current')
if mibBuilder.loadTexts: hicomControlGroup.setDescription('Conformance statement of the hicomControlGroup.')
hicomNumHicoms = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomNumHicoms.setStatus('current')
if mibBuilder.loadTexts: hicomNumHicoms.setDescription('The number of Hicom systems managed by this agent.')
hicomSystemChanges = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSystemChanges.setStatus('current')
if mibBuilder.loadTexts: hicomSystemChanges.setDescription('When a change (SET) is made on hicomSysTable or hicomForeignSysTable, the variable is incremented by one.')
hicomSysTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3), )
if mibBuilder.loadTexts: hicomSysTable.setStatus('current')
if mibBuilder.loadTexts: hicomSysTable.setDescription('The table of Hicom systems.')
hicomSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomSysPabxId"))
if mibBuilder.loadTexts: hicomSysEntry.setStatus('current')
if mibBuilder.loadTexts: hicomSysEntry.setDescription('Each entry describes a Hicom system.')
hicomSysPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomSysPabxId.setDescription('Unique identifier of a Hicom system.')
hicomSysConNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysConNo.setStatus('current')
if mibBuilder.loadTexts: hicomSysConNo.setDescription('Customer contract number.')
hicomSysEstabl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysEstabl.setStatus('current')
if mibBuilder.loadTexts: hicomSysEstabl.setDescription('Contract (2.-3.)')
hicomSysPosNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysPosNo.setStatus('current')
if mibBuilder.loadTexts: hicomSysPosNo.setDescription('Contract (10.-14)')
hicomSysMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomSysMnemonic.setDescription('Mnemonic name of the Hicom system.')
hicomSysCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCustName.setStatus('current')
if mibBuilder.loadTexts: hicomSysCustName.setDescription('Name of the service technician.')
hicomSysCbCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCbCode.setStatus('current')
if mibBuilder.loadTexts: hicomSysCbCode.setDescription('Call back')
hicomSysTelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysTelNo.setStatus('current')
if mibBuilder.loadTexts: hicomSysTelNo.setDescription('Call number of the customer.')
hicomSysCutOver = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCutOver.setStatus('current')
if mibBuilder.loadTexts: hicomSysCutOver.setDescription('CutOver date for Hicom.')
hicomSysClnr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysClnr.setStatus('current')
if mibBuilder.loadTexts: hicomSysClnr.setDescription('Call number of the Hicom service. ')
hicomSysPabxNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysPabxNo.setStatus('current')
if mibBuilder.loadTexts: hicomSysPabxNo.setDescription('Chdmain pabx-no field.')
hicomSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysLocation.setStatus('current')
if mibBuilder.loadTexts: hicomSysLocation.setDescription('Location of the Hicom system. ')
hicomSysRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysRemark.setStatus('current')
if mibBuilder.loadTexts: hicomSysRemark.setDescription('Optional remarks. ')
hicomSysSwLic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysSwLic.setStatus('current')
if mibBuilder.loadTexts: hicomSysSwLic.setDescription('Software licence number.')
hicomSysSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysSysType.setStatus('current')
if mibBuilder.loadTexts: hicomSysSysType.setDescription('Type of equipment.')
hicomSysApsPa = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysApsPa.setStatus('current')
if mibBuilder.loadTexts: hicomSysApsPa.setDescription('Chdmain aps-pa field.')
hicomSysTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hicomSysTimeStamp.setDescription('Chdmain timstamp field.')
hicomSysDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysDescription.setStatus('current')
if mibBuilder.loadTexts: hicomSysDescription.setDescription('Chdmain longname field.')
hicomSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysVersion.setStatus('current')
if mibBuilder.loadTexts: hicomSysVersion.setDescription('Installed version of the Hicom system.')
hicomSysCustomerSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCustomerSpecific.setStatus('current')
if mibBuilder.loadTexts: hicomSysCustomerSpecific.setDescription('Chdmain customer-specific field.')
hicomSysStreetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysStreetAddress.setStatus('current')
if mibBuilder.loadTexts: hicomSysStreetAddress.setDescription('Chdmain street-address field.')
hicomSysLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysLineType.setStatus('current')
if mibBuilder.loadTexts: hicomSysLineType.setDescription('Chdmain line-type field.')
hicomSysProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysProduct.setStatus('current')
if mibBuilder.loadTexts: hicomSysProduct.setDescription('Chdmain product field.')
hicomSysCustomerContact = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCustomerContact.setStatus('current')
if mibBuilder.loadTexts: hicomSysCustomerContact.setDescription('Chdmain customer-contact field.')
hicomSysServiceDistrict = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysServiceDistrict.setStatus('current')
if mibBuilder.loadTexts: hicomSysServiceDistrict.setDescription('Chdmain service-district field.')
hicomSysCustomerContract = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCustomerContract.setStatus('current')
if mibBuilder.loadTexts: hicomSysCustomerContract.setDescription('Chdmain customer-contract field.')
hicomSysTimeOfLastFm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysTimeOfLastFm.setStatus('current')
if mibBuilder.loadTexts: hicomSysTimeOfLastFm.setDescription('Chdmain time-of-last-fm field.')
hicomSysHicomSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysHicomSwVersion.setStatus('current')
if mibBuilder.loadTexts: hicomSysHicomSwVersion.setDescription('Chdmain hicom-sw-version field.')
hicomSysEndWarranty = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 58), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysEndWarranty.setStatus('current')
if mibBuilder.loadTexts: hicomSysEndWarranty.setDescription('Chdmain end-warranty field.')
hicomSysBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysBatteryType.setStatus('current')
if mibBuilder.loadTexts: hicomSysBatteryType.setDescription('Chdmain battery-type field.')
hicomSysBatteryCapac = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysBatteryCapac.setStatus('current')
if mibBuilder.loadTexts: hicomSysBatteryCapac.setDescription('Chdmain battery-capacity field.')
hicomSysInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysInterface.setStatus('current')
if mibBuilder.loadTexts: hicomSysInterface.setDescription('Chdmain interface field.')
hicomSysSystemRoomTel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 64), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysSystemRoomTel.setStatus('current')
if mibBuilder.loadTexts: hicomSysSystemRoomTel.setDescription('Chdmain system-room-tel field.')
hicomSysNoType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysNoType.setStatus('current')
if mibBuilder.loadTexts: hicomSysNoType.setDescription('Network Object icon default display name.')
hicomSysCustServer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCustServer.setStatus('current')
if mibBuilder.loadTexts: hicomSysCustServer.setDescription('Network Object ID (mnemonic) of the Network Manager Unity A&S server.')
hicomSysCustNoid = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysCustNoid.setStatus('current')
if mibBuilder.loadTexts: hicomSysCustNoid.setDescription('NOId (mnemonic) of the uploaded NO (H300) in customer server.')
hicomSysNoName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 74), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysNoName.setStatus('current')
if mibBuilder.loadTexts: hicomSysNoName.setDescription('Network Object icon default display name.')
hicomSysRemarkCd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysRemarkCd.setStatus('current')
if mibBuilder.loadTexts: hicomSysRemarkCd.setDescription('remarks to customer data.')
hicomSysHSystemRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysHSystemRelease.setStatus('current')
if mibBuilder.loadTexts: hicomSysHSystemRelease.setDescription('Sachnummer of resident SWU (switching unit) APS (Anlagen Programm System).')
hicomSysHcmAmolang = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysHcmAmolang.setStatus('current')
if mibBuilder.loadTexts: hicomSysHcmAmolang.setDescription('AMO language 1=de 2=en .')
hicomSysRemarkCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysRemarkCon.setStatus('current')
if mibBuilder.loadTexts: hicomSysRemarkCon.setDescription('Remarks to contract data.')
hicomSysIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysIpAddress.setStatus('current')
if mibBuilder.loadTexts: hicomSysIpAddress.setDescription('IP address or DNS entry of Hicom/Network Object.')
hicomSysRemarkCom = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysRemarkCom.setStatus('current')
if mibBuilder.loadTexts: hicomSysRemarkCom.setDescription('Remarks to communication.')
hicomSysMsvProgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysMsvProgNum.setStatus('current')
if mibBuilder.loadTexts: hicomSysMsvProgNum.setDescription('This Hicom number is needed for MSVx connectivity over dial up or leased lines, generated.')
hicomSysMsvRegNum = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysMsvRegNum.setStatus('current')
if mibBuilder.loadTexts: hicomSysMsvRegNum.setDescription('This region number is needed for MSVx connectivity over dial up or leased lines, generated (Teilnetz Id).')
hicomSysHcEquipNr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysHcEquipNr1.setStatus('current')
if mibBuilder.loadTexts: hicomSysHcEquipNr1.setDescription('First part of the hicom equipment number, SP(Systemprogramm) Sachnummer 1.')
hicomSysHcEquipNr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysHcEquipNr2.setStatus('current')
if mibBuilder.loadTexts: hicomSysHcEquipNr2.setDescription('Secon part of the hicom equipment number, SP(Systemprogramm) Sachnummmer 2.')
hicomSysDaUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 85), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysDaUrl.setStatus('current')
if mibBuilder.loadTexts: hicomSysDaUrl.setDescription('URL for Web based DA application.')
hicomSysHcmCorrState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysHcmCorrState.setStatus('current')
if mibBuilder.loadTexts: hicomSysHcmCorrState.setDescription('Correction State of the Hicom (Patches/APS).')
hicomSysNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysNodeNo.setStatus('current')
if mibBuilder.loadTexts: hicomSysNodeNo.setDescription('Node number of the Hicom system.')
hicomSysLang = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undef", 1), ("german", 2), ("english", 3))).clone('undef')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysLang.setStatus('current')
if mibBuilder.loadTexts: hicomSysLang.setDescription('Configured system language.')
hicomSysMgrNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 102), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysMgrNetId.setStatus('current')
if mibBuilder.loadTexts: hicomSysMgrNetId.setDescription('Identifier of the customer network. The field is set and maintained by the manager application.')
hicomSysMgrSubNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 103), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysMgrSubNetId.setStatus('current')
if mibBuilder.loadTexts: hicomSysMgrSubNetId.setDescription("Identifier of the customer's sub-network. The field is set and maintained by the manager application.")
hicomSysMgrPhysNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 104), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysMgrPhysNetId.setStatus('current')
if mibBuilder.loadTexts: hicomSysMgrPhysNetId.setDescription("Identifier of a customer's physical network. The field is set and maintained by the manager application.")
hicomSysMgrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 105), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysMgrFlags.setStatus('current')
if mibBuilder.loadTexts: hicomSysMgrFlags.setDescription('Private flags of manager application. The field is set and maintained by the manager application.')
hicomSysDiscTimeOutEvnt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysDiscTimeOutEvnt.setStatus('current')
if mibBuilder.loadTexts: hicomSysDiscTimeOutEvnt.setDescription('Acceptable maximum time interval (unit is hours) not getting an event from the hicom system. E1: (DiscTimeOutEvnt < t1 - t2) t1 = current Time t2 = Time of last Event If the expression E1 becomes true a discovery operation will started for the hicom. DiscTimeOutEvnt shall be set greater or equal to 24 hours. The field is set and maintained by the manager application.')
hicomSysDiscAgedData = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(168, 65535)).clone(168)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysDiscAgedData.setStatus('current')
if mibBuilder.loadTexts: hicomSysDiscAgedData.setDescription('Acceptable maximum time interval (unit is hours) since last discovery date and current event date. E2: (DiscAgedData < t1 - t2) t1 = current Event Time t2 = time last discovery succeeded If the expression E2 becomes true a discovery operation will started for the hicom. DiscAgedData shall be set greater or equal to 168 hours (7 days). The field is set and maintained by the manager application.')
hicomSysDiscComType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("addBatchJob", 1), ("online", 2))).clone('addBatchJob')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysDiscComType.setStatus('current')
if mibBuilder.loadTexts: hicomSysDiscComType.setDescription('Identifies the communication interface between DMS and Hicom.')
hicomSysAgentFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 3, 1, 109), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSysAgentFlags.setStatus('current')
if mibBuilder.loadTexts: hicomSysAgentFlags.setDescription('Private flags of the Agent. The field is set and maintained by the manager/agent application.')
hicomSysSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomSysSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Alarm subagent.')
hicomSysSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSysSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomSysSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Alarm subagent.')
hicomForeignSysTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6), )
if mibBuilder.loadTexts: hicomForeignSysTable.setStatus('current')
if mibBuilder.loadTexts: hicomForeignSysTable.setDescription('The table describes foreign systems connected to the Hicom network. The content of the table is created and maintained by the manager application.')
hicomForeignSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomForSysPhysNetId"), (0, "SIEMENS-PN-MIB", "hicomForSysNodeNo"))
if mibBuilder.loadTexts: hicomForeignSysEntry.setStatus('current')
if mibBuilder.loadTexts: hicomForeignSysEntry.setDescription('Each entry describes a foreing system connected to the Hicom network.')
hicomForSysPhysNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hicomForSysPhysNetId.setStatus('current')
if mibBuilder.loadTexts: hicomForSysPhysNetId.setDescription('Physical net identification of the foreign system.')
hicomForSysNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: hicomForSysNodeNo.setStatus('current')
if mibBuilder.loadTexts: hicomForSysNodeNo.setDescription('Node number (physical net) of the foreign system.')
hicomForSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomForSysName.setStatus('current')
if mibBuilder.loadTexts: hicomForSysName.setDescription('Name of the foreign system.')
hicomForSysNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomForSysNetId.setStatus('current')
if mibBuilder.loadTexts: hicomForSysNetId.setDescription('Identifier of the network to which the foreign system belongs.')
hicomForSysSubNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomForSysSubNetId.setStatus('current')
if mibBuilder.loadTexts: hicomForSysSubNetId.setDescription('Identifier of the sub network to which the foreign system belongs.')
hicomForSysProvNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomForSysProvNetId.setStatus('current')
if mibBuilder.loadTexts: hicomForSysProvNetId.setDescription('Net identifier of the provider network the foreign system belongs to.')
hicomForSysProvSubNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomForSysProvSubNetId.setStatus('current')
if mibBuilder.loadTexts: hicomForSysProvSubNetId.setDescription('Subnet identifier of the provider network the foreign system belongs to.')
hicomForSysRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 1, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomForSysRowStat.setStatus('current')
if mibBuilder.loadTexts: hicomForSysRowStat.setDescription("Setting a non-existing RowStat variable to 'createAndGo', creates a new row. If creation was successful, the row gets the status 'active'. Variables of an 'active' row can be read and modified. Setting RowStat to 'destroy' effects the deletion of the row.")
hicomSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 1, 1)).setObjects(("SIEMENS-PN-MIB", "hicomNumHicoms"), ("SIEMENS-PN-MIB", "hicomSysPabxId"), ("SIEMENS-PN-MIB", "hicomSysConNo"), ("SIEMENS-PN-MIB", "hicomSysEstabl"), ("SIEMENS-PN-MIB", "hicomSysPosNo"), ("SIEMENS-PN-MIB", "hicomSysMnemonic"), ("SIEMENS-PN-MIB", "hicomSysCustName"), ("SIEMENS-PN-MIB", "hicomSysCbCode"), ("SIEMENS-PN-MIB", "hicomSysTelNo"), ("SIEMENS-PN-MIB", "hicomSysCutOver"), ("SIEMENS-PN-MIB", "hicomSysClnr"), ("SIEMENS-PN-MIB", "hicomSysPabxNo"), ("SIEMENS-PN-MIB", "hicomSysLocation"), ("SIEMENS-PN-MIB", "hicomSysRemark"), ("SIEMENS-PN-MIB", "hicomSysSwLic"), ("SIEMENS-PN-MIB", "hicomSysSysType"), ("SIEMENS-PN-MIB", "hicomSysApsPa"), ("SIEMENS-PN-MIB", "hicomSysTimeStamp"), ("SIEMENS-PN-MIB", "hicomSysDescription"), ("SIEMENS-PN-MIB", "hicomSysVersion"), ("SIEMENS-PN-MIB", "hicomSysCustomerSpecific"), ("SIEMENS-PN-MIB", "hicomSysStreetAddress"), ("SIEMENS-PN-MIB", "hicomSysLineType"), ("SIEMENS-PN-MIB", "hicomSysProduct"), ("SIEMENS-PN-MIB", "hicomSysCustomerContact"), ("SIEMENS-PN-MIB", "hicomSysServiceDistrict"), ("SIEMENS-PN-MIB", "hicomSysCustomerContract"), ("SIEMENS-PN-MIB", "hicomSysTimeOfLastFm"), ("SIEMENS-PN-MIB", "hicomSysHicomSwVersion"), ("SIEMENS-PN-MIB", "hicomSysEndWarranty"), ("SIEMENS-PN-MIB", "hicomSysBatteryType"), ("SIEMENS-PN-MIB", "hicomSysBatteryCapac"), ("SIEMENS-PN-MIB", "hicomSysInterface"), ("SIEMENS-PN-MIB", "hicomSysSystemRoomTel"), ("SIEMENS-PN-MIB", "hicomSysNoType"), ("SIEMENS-PN-MIB", "hicomSysCustServer"), ("SIEMENS-PN-MIB", "hicomSysCustNoid"), ("SIEMENS-PN-MIB", "hicomSysNoName"), ("SIEMENS-PN-MIB", "hicomSysRemarkCd"), ("SIEMENS-PN-MIB", "hicomSysHSystemRelease"), ("SIEMENS-PN-MIB", "hicomSysHcmAmolang"), ("SIEMENS-PN-MIB", "hicomSysRemarkCon"), ("SIEMENS-PN-MIB", "hicomSysIpAddress"), ("SIEMENS-PN-MIB", "hicomSysRemarkCom"), ("SIEMENS-PN-MIB", "hicomSysMsvProgNum"), ("SIEMENS-PN-MIB", "hicomSysMsvRegNum"), ("SIEMENS-PN-MIB", "hicomSysHcEquipNr1"), ("SIEMENS-PN-MIB", "hicomSysHcEquipNr2"), ("SIEMENS-PN-MIB", "hicomSysDaUrl"), ("SIEMENS-PN-MIB", "hicomSysHcmCorrState"), ("SIEMENS-PN-MIB", "hicomSysNodeNo"), ("SIEMENS-PN-MIB", "hicomSysLang"), ("SIEMENS-PN-MIB", "hicomSysMgrNetId"), ("SIEMENS-PN-MIB", "hicomSysMgrSubNetId"), ("SIEMENS-PN-MIB", "hicomSysMgrPhysNetId"), ("SIEMENS-PN-MIB", "hicomSysMgrFlags"), ("SIEMENS-PN-MIB", "hicomSysDiscTimeOutEvnt"), ("SIEMENS-PN-MIB", "hicomSysDiscAgedData"), ("SIEMENS-PN-MIB", "hicomSysDiscComType"), ("SIEMENS-PN-MIB", "hicomSysAgentFlags"), ("SIEMENS-PN-MIB", "hicomSystemChanges"), ("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgText"), ("SIEMENS-PN-MIB", "hicomForSysName"), ("SIEMENS-PN-MIB", "hicomForSysNetId"), ("SIEMENS-PN-MIB", "hicomForSysSubNetId"), ("SIEMENS-PN-MIB", "hicomForSysProvNetId"), ("SIEMENS-PN-MIB", "hicomForSysProvSubNetId"), ("SIEMENS-PN-MIB", "hicomForSysRowStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSystemGroup = hicomSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSystemGroup.setDescription('Conformance statement of the hicomSystemGroup.')
internalMessageSystemSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1, 0)).setObjects(("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageSystemSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageSystemSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningSystemSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1, 1)).setObjects(("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningSystemSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningSystemSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorSystemSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1, 2)).setObjects(("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSysSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorSystemSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorSystemSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
addHicom = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1, 10)).setObjects(("SIEMENS-PN-MIB", "hicomSysPabxId"), ("SIEMENS-PN-MIB", "hicomSysMnemonic"))
if mibBuilder.loadTexts: addHicom.setStatus('current')
if mibBuilder.loadTexts: addHicom.setDescription('An addHicom trap signifies that a new hicom has been added to network.')
deleteHicom = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1, 11)).setObjects(("SIEMENS-PN-MIB", "hicomSysPabxId"), ("SIEMENS-PN-MIB", "hicomSysMnemonic"))
if mibBuilder.loadTexts: deleteHicom.setStatus('current')
if mibBuilder.loadTexts: deleteHicom.setDescription('A deleteHicom trap signifies that a hicom has been removed from the network.')
changeConfig = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 1, 12)).setObjects(("SIEMENS-PN-MIB", "hicomSysPabxId"), ("SIEMENS-PN-MIB", "hicomSysMnemonic"))
if mibBuilder.loadTexts: changeConfig.setStatus('deprecated')
if mibBuilder.loadTexts: changeConfig.setDescription('A changeConfig trap indicates that some change other than adding or removing a Hicom has been made to the network.')
hicomAlarmsChanges = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlarmsChanges.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmsChanges.setDescription('Is incremented when an alarm SET or RESET trap has been sent by the agent.')
hicomAlTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hicomAlTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlTable.setDescription('The table of all Hicom alarms.')
hicomAlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlFilter"), (0, "SIEMENS-PN-MIB", "hicomAlStatus"), (0, "SIEMENS-PN-MIB", "hicomAlPabxId"), (0, "SIEMENS-PN-MIB", "hicomAlGroup"), (0, "SIEMENS-PN-MIB", "hicomAlSubId"), (0, "SIEMENS-PN-MIB", "hicomAlPriority"), (0, "SIEMENS-PN-MIB", "hicomAlAbsMod"))
if mibBuilder.loadTexts: hicomAlEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlEntry.setDescription('Each entry describes a Hicom alarm in detail.')
hicomAlFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 1), AlarmFilterStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlFilter.setStatus('current')
if mibBuilder.loadTexts: hicomAlFilter.setDescription('Alarm filter status.')
hicomAlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("set", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlStatus.setStatus('current')
if mibBuilder.loadTexts: hicomAlStatus.setDescription('Status of an alarm.')
hicomAlPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlPabxId.setDescription('Unique identifier of a Hicom system.')
hicomAlGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlGroup.setDescription('Group identifier of a Hicom alarm.')
hicomAlSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlSubId.setStatus('current')
if mibBuilder.loadTexts: hicomAlSubId.setDescription('Sub-identifier of a Hicom alarm within its group.')
hicomAlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 6), AlarmPriorities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlPriority.setStatus('current')
if mibBuilder.loadTexts: hicomAlPriority.setDescription('Priority of a Hicom alarm.')
hicomAlAbsMod = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlAbsMod.setStatus('current')
if mibBuilder.loadTexts: hicomAlAbsMod.setDescription('Hicom module detecting the Hicom alarm.')
hicomAlTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlTimDat.setDescription('Date and time of the Hicom alarm. ')
hicomAlName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlName.setStatus('current')
if mibBuilder.loadTexts: hicomAlName.setDescription('Name of the Hicom alarm.')
hicomAlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("error", 2), ("busy", 3), ("finok", 4), ("finerr", 5))).clone('init')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomAlReset.setStatus('current')
if mibBuilder.loadTexts: hicomAlReset.setDescription('This variable can be set to reset a Hicom alarm.')
hicomAlTimOldDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlTimOldDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlTimOldDat.setDescription('Date and time of the previous set of this Hicom alarm. ')
hicomAlArrivalTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlArrivalTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlArrivalTimDat.setDescription('Unity A&S Date and time of the arrival of this Hicom alarm. ')
hicomAlFiltConfTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3), )
if mibBuilder.loadTexts: hicomAlFiltConfTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfTable.setDescription('The table of configured Hicom alarm filters.')
hicomAlFiltConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlFiltConfPabxId"), (0, "SIEMENS-PN-MIB", "hicomAlFiltConfGroup"), (0, "SIEMENS-PN-MIB", "hicomAlFiltConfSubId"), (0, "SIEMENS-PN-MIB", "hicomAlFiltConfPriority"))
if mibBuilder.loadTexts: hicomAlFiltConfEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfEntry.setDescription('Each entry specifies a filter for a certain type of Hicom alarm.')
hicomAlFiltConfPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hicomAlFiltConfPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfPabxId.setDescription('Unique identifier of a Hicom system.')
hicomAlFiltConfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hicomAlFiltConfGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfGroup.setDescription('Group identifier of a Hicom alarm.')
hicomAlFiltConfSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: hicomAlFiltConfSubId.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfSubId.setDescription('Sub-identifier of a Hicom alarm within its group.')
hicomAlFiltConfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1, 4), AlarmPriorities())
if mibBuilder.loadTexts: hicomAlFiltConfPriority.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfPriority.setDescription('Priority of a Hicom alarm.')
hicomAlFiltConfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1, 5), AlarmFilterStates()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomAlFiltConfSwitch.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfSwitch.setDescription('Specifies whether filtering for this alarm is switched ON or OFF. If set to ON, no trap will be generated in case the alarm is being SET or RESET.')
hicomAlFiltConfRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hicomAlFiltConfRowStat.setStatus('current')
if mibBuilder.loadTexts: hicomAlFiltConfRowStat.setDescription("Setting a non-existing RowStat variable to 'createAndGo', creates a new row. If creation was successful, the row gets the status 'active'. Variables of an 'active' row can be read and modified. Setting RowStat to 'destroy' effects the deletion of the row.")
hicomAlarmSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlarmSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Alarm subagent.')
hicomAlarmSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlarmSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Alarm subagent.')
hicomAlMirrorUploadTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6), )
if mibBuilder.loadTexts: hicomAlMirrorUploadTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadTable.setDescription('The table to start an Alarm Upload ')
hicomAlMirrorUploadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlMirrorUploadPabxId"))
if mibBuilder.loadTexts: hicomAlMirrorUploadEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadEntry.setDescription('Each entry describes a Hicom alarm in detail.')
hicomAlMirrorUploadPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlMirrorUploadPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadPabxId.setDescription('Unique identifier of a Hicom system.')
hicomAlMirrorUploadMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlMirrorUploadMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadMnemonic.setDescription('Mnemonic name of the Hicom system.')
hicomAlMirrorUploadState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("done", 1), ("error", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomAlMirrorUploadState.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadState.setDescription('Status of the AlarmMirror upload done (1), error (2), busy (3)')
hicomAlMirrorUploadStartTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlMirrorUploadStartTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadStartTimDat.setDescription('Last successful initiation of an AlarmMirror upload.')
hicomAlMirrorUploadErrorTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlMirrorUploadErrorTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadErrorTimDat.setDescription('Last unsuccessful initiation of an AlarmMirror upload.')
hicomAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 2, 1)).setObjects(("SIEMENS-PN-MIB", "hicomAlPabxId"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"), ("SIEMENS-PN-MIB", "hicomAlReset"), ("SIEMENS-PN-MIB", "hicomAlTimOldDat"), ("SIEMENS-PN-MIB", "hicomAlArrivalTimDat"), ("SIEMENS-PN-MIB", "hicomAlFilter"), ("SIEMENS-PN-MIB", "hicomAlarmsChanges"), ("SIEMENS-PN-MIB", "hicomAlFiltConfSwitch"), ("SIEMENS-PN-MIB", "hicomAlFiltConfRowStat"), ("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomAlarmsGroup = hicomAlarmsGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmsGroup.setDescription('Conformance statement of the hicomAlarmsGroup.')
hicomAlMirrorUploadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 2, 2)).setObjects(("SIEMENS-PN-MIB", "hicomAlMirrorUploadPabxId"), ("SIEMENS-PN-MIB", "hicomAlMirrorUploadMnemonic"), ("SIEMENS-PN-MIB", "hicomAlMirrorUploadState"), ("SIEMENS-PN-MIB", "hicomAlMirrorUploadStartTimDat"), ("SIEMENS-PN-MIB", "hicomAlMirrorUploadErrorTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomAlMirrorUploadGroup = hicomAlMirrorUploadGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlMirrorUploadGroup.setDescription('Conformance statement of the hicomAlMirrorUploadGroup.')
hicomAlTrpSysPabxId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 2, 1), Integer32())
if mibBuilder.loadTexts: hicomAlTrpSysPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlTrpSysPabxId.setDescription('Unique identifier of a Hicom system.')
hicomAlTrpSysMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 2, 2), DisplayString())
if mibBuilder.loadTexts: hicomAlTrpSysMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomAlTrpSysMnemonic.setDescription('Mnemonic name of the Hicom system.')
internalMessageAlarmSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 0)).setObjects(("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageAlarmSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageAlarmSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningAlarmSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 1)).setObjects(("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningAlarmSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningAlarmSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorAlarmSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 2)).setObjects(("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomAlarmSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorAlarmSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorAlarmSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomAlResetInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 20)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlReset"))
if mibBuilder.loadTexts: hicomAlResetInitFailed.setStatus('current')
if mibBuilder.loadTexts: hicomAlResetInitFailed.setDescription('A hicomAlResetInitFailed trap signifies that the initialization of an alarm reset has failed.')
hicomAlUploadMirrorFailed = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 22)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlMirrorUploadErrorTimDat"))
if mibBuilder.loadTexts: hicomAlUploadMirrorFailed.setStatus('current')
if mibBuilder.loadTexts: hicomAlUploadMirrorFailed.setDescription('A hicomAlUploadMirrorFailed trap signifies that the initialization of an alarm reset has failed.')
hicomAlarmOnMajor = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 30)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"))
if mibBuilder.loadTexts: hicomAlarmOnMajor.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmOnMajor.setDescription('A hicomAlarmOnMajor trap is sent when a major alarm is set.')
hicomAlarmOffMajor = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 31)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"))
if mibBuilder.loadTexts: hicomAlarmOffMajor.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmOffMajor.setDescription('A hicomAlarmOffMajor trap is sent when a major alarm is reset.')
hicomAlarmOnMinor = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 32)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"))
if mibBuilder.loadTexts: hicomAlarmOnMinor.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmOnMinor.setDescription('A hicomAlarmOnMinor trap is sent when a minor alarm is set.')
hicomAlarmOffMinor = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 33)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"))
if mibBuilder.loadTexts: hicomAlarmOffMinor.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmOffMinor.setDescription('A hicomAlarmOffMinor trap is sent when a major alarm is reset.')
hicomAlarmOnDevice = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 34)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"))
if mibBuilder.loadTexts: hicomAlarmOnDevice.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmOnDevice.setDescription('A hicomAlarmOnDevice trap is sent when a device alarm is set.')
hicomAlarmOffDevice = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 2, 35)).setObjects(("SIEMENS-PN-MIB", "hicomAlTrpSysPabxId"), ("SIEMENS-PN-MIB", "hicomAlTrpSysMnemonic"), ("SIEMENS-PN-MIB", "hicomAlGroup"), ("SIEMENS-PN-MIB", "hicomAlSubId"), ("SIEMENS-PN-MIB", "hicomAlPriority"), ("SIEMENS-PN-MIB", "hicomAlAbsMod"), ("SIEMENS-PN-MIB", "hicomAlStatus"), ("SIEMENS-PN-MIB", "hicomAlTimDat"), ("SIEMENS-PN-MIB", "hicomAlName"))
if mibBuilder.loadTexts: hicomAlarmOffDevice.setStatus('current')
if mibBuilder.loadTexts: hicomAlarmOffDevice.setDescription('A hicomAlarmOffDevice trap is sent when a device alarm is reset.')
hicomAlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1))
hicomErrAlConfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 2))
hicomAlConfDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3))
hicomErrorTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1), )
if mibBuilder.loadTexts: hicomErrorTable.setStatus('current')
if mibBuilder.loadTexts: hicomErrorTable.setDescription('The table of Hicom errors.')
hicomErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomErrorPabxId"), (0, "SIEMENS-PN-MIB", "hicomErrorAlGroup"), (0, "SIEMENS-PN-MIB", "hicomErrorAlSubId"), (0, "SIEMENS-PN-MIB", "hicomErrorSerialNo"))
if mibBuilder.loadTexts: hicomErrorEntry.setStatus('current')
if mibBuilder.loadTexts: hicomErrorEntry.setDescription('Each entry describes a Hicom error.')
hicomErrorPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomErrorPabxId.setDescription('Internal identifier of a Hicom system.')
hicomErrorAlGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorAlGroup.setStatus('current')
if mibBuilder.loadTexts: hicomErrorAlGroup.setDescription('Hicom alarm group this error belongs to.')
hicomErrorAlSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorAlSubId.setStatus('current')
if mibBuilder.loadTexts: hicomErrorAlSubId.setDescription('Hicom alarm number within the hicomErrorAlGroup this error belongs to.')
hicomErrorSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorSerialNo.setStatus('current')
if mibBuilder.loadTexts: hicomErrorSerialNo.setDescription('Internal serial number of a Hicom error.')
hicomErrorMsgId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorMsgId.setStatus('current')
if mibBuilder.loadTexts: hicomErrorMsgId.setDescription('Identifier of the Hicom error.')
hicomErrorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorPriority.setStatus('current')
if mibBuilder.loadTexts: hicomErrorPriority.setDescription('Priority of the Hicom error.')
hicomErrorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorAction.setStatus('current')
if mibBuilder.loadTexts: hicomErrorAction.setDescription('Required Hicom system action.')
hicomErrorAbsMod = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorAbsMod.setStatus('current')
if mibBuilder.loadTexts: hicomErrorAbsMod.setDescription('Hicom module detecting the error.')
hicomErrorEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorEvent.setStatus('current')
if mibBuilder.loadTexts: hicomErrorEvent.setDescription('Description of the Hicom error.')
hicomErrorSubevent = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorSubevent.setStatus('current')
if mibBuilder.loadTexts: hicomErrorSubevent.setDescription('Subdescription of the Hicom error.')
hicomErrorCardRef = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorCardRef.setStatus('current')
if mibBuilder.loadTexts: hicomErrorCardRef.setDescription('Reference to a Hicom board.')
hicomErrorBoardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorBoardVersion.setStatus('current')
if mibBuilder.loadTexts: hicomErrorBoardVersion.setDescription('Version of that board. ')
hicomErrorFwType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorFwType.setStatus('current')
if mibBuilder.loadTexts: hicomErrorFwType.setDescription('Firmware of that board.')
hicomErrorTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomErrorTimDat.setDescription('Date and time of the Hicom error.')
hicomErrorOrigText = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrorOrigText.setStatus('current')
if mibBuilder.loadTexts: hicomErrorOrigText.setDescription('Original message text of the Hicom error.')
hicomAlConfTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: hicomAlConfTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTable.setDescription('The table of the Hicom alarm configuration.')
hicomAlConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlConfPabxId"), (0, "SIEMENS-PN-MIB", "hicomAlConfAlGroup"), (0, "SIEMENS-PN-MIB", "hicomAlConfAlSubId"))
if mibBuilder.loadTexts: hicomAlConfEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfEntry.setDescription('Each entry describes the configuration of a Hicom alarm.')
hicomAlConfPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPabxId.setDescription('Unique identifier of the Hicom system.')
hicomAlConfAlGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfAlGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfAlGroup.setDescription('Group identifier of a Hicom alarm.')
hicomAlConfAlSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfAlSubId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfAlSubId.setDescription('Internal group identifier of a Hicom alarm.')
hicomAlConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfName.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfName.setDescription('Name of the Hicom alarm.')
hicomAlConfThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfThreshold1.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfThreshold1.setDescription("Threshold 'minor' related Hicom errors.")
hicomAlConfThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfThreshold2.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfThreshold2.setDescription("Threshold 'major' for related Hicom errors.")
hicomAlConfTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTime1.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTime1.setDescription('Interval for the minor threshold.')
hicomAlConfTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTime2.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTime2.setDescription('Interval for the major threshold.')
hicomAlConfTimeH = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTimeH.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTimeH.setDescription('Threshold interval for device alarms. Unit of Threshold is hours.')
hicomAlConfBase = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfBase.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfBase.setDescription('Base value for thresholds in percent.')
hicomAlConfPersonTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 2), )
if mibBuilder.loadTexts: hicomAlConfPersonTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPersonTable.setDescription('The table for the alarm configuration of personal (VIP) Hicom alarms.')
hicomAlConfPersonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlConfPersonPabxId"), (0, "SIEMENS-PN-MIB", "hicomAlConfPersonAlGroup"), (0, "SIEMENS-PN-MIB", "hicomAlConfPersonAlSubId"), (0, "SIEMENS-PN-MIB", "hicomAlConfPersonExtNo"))
if mibBuilder.loadTexts: hicomAlConfPersonEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPersonEntry.setDescription('Each entry contains an extension number for which a VIP alarm is configured.')
hicomAlConfPersonPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfPersonPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPersonPabxId.setDescription('Unique identifier of the Hicom system.')
hicomAlConfPersonAlGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfPersonAlGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPersonAlGroup.setDescription('Group identifier of the Hicom alarm.')
hicomAlConfPersonAlSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfPersonAlSubId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPersonAlSubId.setDescription('Internal group identifier of the Hicom alarm.')
hicomAlConfPersonExtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfPersonExtNo.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfPersonExtNo.setDescription('Extension number.')
hicomAlConfTargetTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: hicomAlConfTargetTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetTable.setDescription('The table of the alarm configuration of Hicom target alarms.')
hicomAlConfTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlConfTargetPabxId"), (0, "SIEMENS-PN-MIB", "hicomAlConfTargetAlGroup"), (0, "SIEMENS-PN-MIB", "hicomAlConfTargetAlSubId"), (0, "SIEMENS-PN-MIB", "hicomAlConfTargetLtg"), (0, "SIEMENS-PN-MIB", "hicomAlConfTargetLtu"), (0, "SIEMENS-PN-MIB", "hicomAlConfTargetSlot"), (0, "SIEMENS-PN-MIB", "hicomAlConfTargetTrunkNo"))
if mibBuilder.loadTexts: hicomAlConfTargetEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetEntry.setDescription('Each entry describes a trunk for which a target alarm is configured.')
hicomAlConfTargetPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetPabxId.setDescription('Unique identifier of the Hicom system.')
hicomAlConfTargetAlGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetAlGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetAlGroup.setDescription('Group identifier of the Hicom alarm.')
hicomAlConfTargetAlSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetAlSubId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetAlSubId.setDescription('Internal group identifier of the Hicom alarm.')
hicomAlConfTargetLtg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetLtg.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetLtg.setDescription('Line Trunk Group of the trunk.')
hicomAlConfTargetLtu = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetLtu.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetLtu.setDescription('Line Trunk Unit of the trunk.')
hicomAlConfTargetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetSlot.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetSlot.setDescription('Slot of the trunk.')
hicomAlConfTargetTrunkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfTargetTrunkNo.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfTargetTrunkNo.setDescription('Trunk number.')
hicomErrAlConfSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrAlConfSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomErrAlConfSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Error/Alarm config subagent.')
hicomErrAlConfSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomErrAlConfSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomErrAlConfSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Error/Alarm config subagent.')
hicomErrAlConfResultData = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomErrAlConfResultData.setStatus('current')
if mibBuilder.loadTexts: hicomErrAlConfResultData.setDescription("Is used for agent internal communication. Contains the PabxId of a Hicom for which the last discovery process was conveyed. Is SET by the discovery agent and indicates the availability of new discovered data. The new data is to be incorporated by the subagent into the subagent's data base.")
hicomAlConfChanges = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfChanges.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfChanges.setDescription('Indicates changes in the hicomAlConfig group.')
hicomAlConfDiscovTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2), )
if mibBuilder.loadTexts: hicomAlConfDiscovTable.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovTable.setDescription('This table contains information about the alarm configuration discoveries for each managed Hicom.')
hicomAlConfDiscovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomAlConfDiscovPabxId"))
if mibBuilder.loadTexts: hicomAlConfDiscovEntry.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovEntry.setDescription('Each entry describes the alarm configuration discovery for a specific hicom.')
hicomAlConfDiscovPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfDiscovPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovPabxId.setDescription('Unique identifier of the Hicom being discovered.')
hicomAlConfDiscovPabxMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfDiscovPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovPabxMnemonic.setDescription('Name of the Hicom.')
hicomAlConfDiscovStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1, 3), DiscoveryStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomAlConfDiscovStatus.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovStatus.setDescription('Status of the alarm configuration discovery process.')
hicomAlConfDiscovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1, 4), DiscoveryModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomAlConfDiscovMode.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovMode.setDescription('Mode of the alarm configuration discovery process.')
hicomAlConfDiscovTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfDiscovTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovTimDat.setDescription('Date and time of the last successful discovery.')
hicomAlConfDiscovErrTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 4, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomAlConfDiscovErrTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovErrTimDat.setDescription('Date and time of the last failed discovery.')
hicomErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 3, 1)).setObjects(("SIEMENS-PN-MIB", "hicomErrorPabxId"), ("SIEMENS-PN-MIB", "hicomErrorSerialNo"), ("SIEMENS-PN-MIB", "hicomErrorMsgId"), ("SIEMENS-PN-MIB", "hicomErrorPriority"), ("SIEMENS-PN-MIB", "hicomErrorAction"), ("SIEMENS-PN-MIB", "hicomErrorAbsMod"), ("SIEMENS-PN-MIB", "hicomErrorEvent"), ("SIEMENS-PN-MIB", "hicomErrorSubevent"), ("SIEMENS-PN-MIB", "hicomErrorCardRef"), ("SIEMENS-PN-MIB", "hicomErrorBoardVersion"), ("SIEMENS-PN-MIB", "hicomErrorFwType"), ("SIEMENS-PN-MIB", "hicomErrorTimDat"), ("SIEMENS-PN-MIB", "hicomErrorAlGroup"), ("SIEMENS-PN-MIB", "hicomErrorAlSubId"), ("SIEMENS-PN-MIB", "hicomErrorOrigText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomErrorGroup = hicomErrorGroup.setStatus('current')
if mibBuilder.loadTexts: hicomErrorGroup.setDescription('Conformance statement for hicomErrorGroup.')
hicomAlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 4, 1)).setObjects(("SIEMENS-PN-MIB", "hicomAlConfPabxId"), ("SIEMENS-PN-MIB", "hicomAlConfAlGroup"), ("SIEMENS-PN-MIB", "hicomAlConfAlSubId"), ("SIEMENS-PN-MIB", "hicomAlConfName"), ("SIEMENS-PN-MIB", "hicomAlConfThreshold1"), ("SIEMENS-PN-MIB", "hicomAlConfThreshold2"), ("SIEMENS-PN-MIB", "hicomAlConfTime1"), ("SIEMENS-PN-MIB", "hicomAlConfTime2"), ("SIEMENS-PN-MIB", "hicomAlConfTimeH"), ("SIEMENS-PN-MIB", "hicomAlConfBase"), ("SIEMENS-PN-MIB", "hicomAlConfTargetPabxId"), ("SIEMENS-PN-MIB", "hicomAlConfTargetAlGroup"), ("SIEMENS-PN-MIB", "hicomAlConfTargetAlSubId"), ("SIEMENS-PN-MIB", "hicomAlConfTargetLtg"), ("SIEMENS-PN-MIB", "hicomAlConfTargetLtu"), ("SIEMENS-PN-MIB", "hicomAlConfTargetSlot"), ("SIEMENS-PN-MIB", "hicomAlConfTargetTrunkNo"), ("SIEMENS-PN-MIB", "hicomAlConfPersonPabxId"), ("SIEMENS-PN-MIB", "hicomAlConfPersonAlGroup"), ("SIEMENS-PN-MIB", "hicomAlConfPersonAlSubId"), ("SIEMENS-PN-MIB", "hicomAlConfPersonExtNo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomAlConfigGroup = hicomAlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfigGroup.setDescription('Conformance statement for hicomAlConfigGroup.')
hicomErrAlConfInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 4, 2)).setObjects(("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgText"), ("SIEMENS-PN-MIB", "hicomErrAlConfResultData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomErrAlConfInfoGroup = hicomErrAlConfInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hicomErrAlConfInfoGroup.setDescription('Conformance statement for hicomErrAlConfInfoGroup.')
hicomAlConfDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 4, 3)).setObjects(("SIEMENS-PN-MIB", "hicomAlConfChanges"), ("SIEMENS-PN-MIB", "hicomAlConfDiscovPabxId"), ("SIEMENS-PN-MIB", "hicomAlConfDiscovPabxMnemonic"), ("SIEMENS-PN-MIB", "hicomAlConfDiscovStatus"), ("SIEMENS-PN-MIB", "hicomAlConfDiscovMode"), ("SIEMENS-PN-MIB", "hicomAlConfDiscovTimDat"), ("SIEMENS-PN-MIB", "hicomAlConfDiscovErrTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomAlConfDiscoveryGroup = hicomAlConfDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscoveryGroup.setDescription('Conformance statement for hicomAlConfDiscoveryGroup. ')
hicomErrTrpPabxId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 3, 1), Integer32())
if mibBuilder.loadTexts: hicomErrTrpPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomErrTrpPabxId.setDescription('Unique identifier of a Hicom system.')
hicomErrTrpMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 3, 2), DisplayString())
if mibBuilder.loadTexts: hicomErrTrpMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomErrTrpMnemonic.setDescription('Mnemonic name of the Hicom system.')
internalMessageErrAlConfSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 0)).setObjects(("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageErrAlConfSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageErrAlConfSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningErrAlConfSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 1)).setObjects(("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningErrAlConfSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningErrAlConfSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorErrAlConfSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 2)).setObjects(("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomErrAlConfSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorErrAlConfSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorErrAlConfSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomErrorMsg = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 20)).setObjects(("SIEMENS-PN-MIB", "hicomErrorPabxId"), ("SIEMENS-PN-MIB", "hicomErrorAlGroup"), ("SIEMENS-PN-MIB", "hicomErrorAlSubId"), ("SIEMENS-PN-MIB", "hicomErrorSerialNo"), ("SIEMENS-PN-MIB", "hicomErrorMsgId"), ("SIEMENS-PN-MIB", "hicomErrorPriority"), ("SIEMENS-PN-MIB", "hicomErrorAction"), ("SIEMENS-PN-MIB", "hicomErrorAbsMod"), ("SIEMENS-PN-MIB", "hicomErrorEvent"), ("SIEMENS-PN-MIB", "hicomErrorSubevent"), ("SIEMENS-PN-MIB", "hicomErrorCardRef"), ("SIEMENS-PN-MIB", "hicomErrorBoardVersion"), ("SIEMENS-PN-MIB", "hicomErrorFwType"), ("SIEMENS-PN-MIB", "hicomErrorTimDat"), ("SIEMENS-PN-MIB", "hicomErrTrpMnemonic"))
if mibBuilder.loadTexts: hicomErrorMsg.setStatus('current')
if mibBuilder.loadTexts: hicomErrorMsg.setDescription('A Hicom error message trap contains information extracted from a Hicom error message')
hicomAlConfDiscovSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 10)).setObjects(("SIEMENS-PN-MIB", "hicomErrTrpPabxId"), ("SIEMENS-PN-MIB", "hicomErrTrpMnemonic"))
if mibBuilder.loadTexts: hicomAlConfDiscovSucc.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovSucc.setDescription('A hicomAlConfDiscovSucc trap indicates the successful termination of a discovery process. hicomAlConfDiscovPabxId indicates the Pbx involved.')
hicomAlConfDiscovErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 11)).setObjects(("SIEMENS-PN-MIB", "hicomErrTrpPabxId"), ("SIEMENS-PN-MIB", "hicomErrTrpMnemonic"))
if mibBuilder.loadTexts: hicomAlConfDiscovErr.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovErr.setDescription('A hicomAlConfDiscovErr trap signifies the unsuccessful termination of a discovery process. hicomAlConfDiscovPabxId indicates the Pbx involved.')
hicomAlConfDiscovBusy = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 3, 19)).setObjects(("SIEMENS-PN-MIB", "hicomErrTrpPabxId"), ("SIEMENS-PN-MIB", "hicomErrTrpMnemonic"))
if mibBuilder.loadTexts: hicomAlConfDiscovBusy.setStatus('current')
if mibBuilder.loadTexts: hicomAlConfDiscovBusy.setDescription('A hicomAlConfDiscovBusy trap signifies that a alarm conf discovery process is running. hicomAlConfDiscovPabxId indicates the Pbx involved.')
hicomSoftAps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1))
hicomSoftInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 2))
hicomSoftDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3))
hicomSoftApsTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: hicomSoftApsTable.setStatus('current')
if mibBuilder.loadTexts: hicomSoftApsTable.setDescription('The table of installed Hicom software systems.')
hicomSoftApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomSoftApsPabxId"), (0, "SIEMENS-PN-MIB", "hicomSoftApsID"))
if mibBuilder.loadTexts: hicomSoftApsEntry.setStatus('current')
if mibBuilder.loadTexts: hicomSoftApsEntry.setDescription('Each entry describes a Hicom software system.')
hicomSoftApsPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftApsPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomSoftApsPabxId.setDescription('Unique identifier of the Hicom system.')
hicomSoftApsID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftApsID.setStatus('current')
if mibBuilder.loadTexts: hicomSoftApsID.setDescription('Identifier of the software package.')
hicomSoftApsPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftApsPartNo.setStatus('current')
if mibBuilder.loadTexts: hicomSoftApsPartNo.setDescription('Siemens part number of the software package.')
hicomSoftPatchTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: hicomSoftPatchTable.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchTable.setDescription('The table of installed Hicom software patches.')
hicomSoftPatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomSoftPatchPabxId"), (0, "SIEMENS-PN-MIB", "hicomSoftPatchNo"))
if mibBuilder.loadTexts: hicomSoftPatchEntry.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchEntry.setDescription('Each entry describes a software patch.')
hicomSoftPatchPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftPatchPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchPabxId.setDescription('Unique identifier of the Hicom system.')
hicomSoftPatchNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftPatchNo.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchNo.setDescription('Identifier of the software patch.')
hicomSoftPatchHWMod = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftPatchHWMod.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchHWMod.setDescription('Identification of a hardware module the patch is for.')
hicomSoftPatchActType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftPatchActType.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchActType.setDescription('Activation state of patch.')
hicomSoftPatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftPatchGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSoftPatchGroup.setDescription('Group identifier of a patch.')
hicomSoftSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomSoftSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Software subagent.')
hicomSoftSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomSoftSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Software subagent.')
hicomSoftResultData = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSoftResultData.setStatus('current')
if mibBuilder.loadTexts: hicomSoftResultData.setDescription("Is used for agent internal communication. Contains the PabxId of a Hicom for which the last discovery process was conveyed. Is SET by the discovery agent and indicates the availability of new discovered data. The new data is to be incorporated by the subagent into the subagent's data base.")
hicomSoftChanges = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftChanges.setStatus('current')
if mibBuilder.loadTexts: hicomSoftChanges.setDescription('Indicates changes in the hicomSoft group.')
hicomSoftDiscovTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2), )
if mibBuilder.loadTexts: hicomSoftDiscovTable.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovTable.setDescription('This table contains information about the software discoveries for each managed Hicom.')
hicomSoftDiscovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomSoftDiscovPabxId"))
if mibBuilder.loadTexts: hicomSoftDiscovEntry.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovEntry.setDescription('Each entry describes the software discovery for a specific hicom.')
hicomSoftDiscovPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftDiscovPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovPabxId.setDescription('Unique identifier of the Hicom being discovered.')
hicomSoftDiscovPabxMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftDiscovPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovPabxMnemonic.setDescription('Name of the Hicom.')
hicomSoftDiscovStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1, 3), DiscoveryStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSoftDiscovStatus.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovStatus.setDescription('Status of the software discovery process.')
hicomSoftDiscovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1, 4), DiscoveryModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSoftDiscovMode.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovMode.setDescription('Mode of the software discovery process.')
hicomSoftDiscovTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftDiscovTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovTimDat.setDescription('Date and time of the last successful software discovery.')
hicomSoftDiscovErrTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 5, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSoftDiscovErrTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovErrTimDat.setDescription('Date and time of the last failed software discovery.')
hicomSoftGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 5, 1)).setObjects(("SIEMENS-PN-MIB", "hicomSoftApsPabxId"), ("SIEMENS-PN-MIB", "hicomSoftApsID"), ("SIEMENS-PN-MIB", "hicomSoftPatchNo"), ("SIEMENS-PN-MIB", "hicomSoftApsPartNo"), ("SIEMENS-PN-MIB", "hicomSoftPatchHWMod"), ("SIEMENS-PN-MIB", "hicomSoftPatchActType"), ("SIEMENS-PN-MIB", "hicomSoftPatchGroup"), ("SIEMENS-PN-MIB", "hicomSoftPatchPabxId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSoftGroup = hicomSoftGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSoftGroup.setDescription('Conformance statement for hicomSoftGroup.')
hicomSoftInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 5, 2)).setObjects(("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgText"), ("SIEMENS-PN-MIB", "hicomSoftResultData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSoftInfoGroup = hicomSoftInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSoftInfoGroup.setDescription('Conformance statement for hicomSoftInfoGroup.')
hicomSoftDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 5, 3)).setObjects(("SIEMENS-PN-MIB", "hicomSoftChanges"), ("SIEMENS-PN-MIB", "hicomSoftDiscovPabxId"), ("SIEMENS-PN-MIB", "hicomSoftDiscovPabxMnemonic"), ("SIEMENS-PN-MIB", "hicomSoftDiscovStatus"), ("SIEMENS-PN-MIB", "hicomSoftDiscovMode"), ("SIEMENS-PN-MIB", "hicomSoftDiscovTimDat"), ("SIEMENS-PN-MIB", "hicomSoftDiscovErrTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSoftDiscoveryGroup = hicomSoftDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscoveryGroup.setDescription('Conformance statement for hicomSoftDiscoveryGroup.')
hicomSWTrpPabxId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 4, 1), Integer32())
if mibBuilder.loadTexts: hicomSWTrpPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomSWTrpPabxId.setDescription('Unique identifier of a Hicom system.')
hicomSWTrpPabxMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 4, 2), DisplayString())
if mibBuilder.loadTexts: hicomSWTrpPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomSWTrpPabxMnemonic.setDescription('Mnemonic name of the Hicom system.')
internalMessageSWSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5, 0)).setObjects(("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageSWSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageSWSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningSWSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5, 1)).setObjects(("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningSWSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningSWSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorSWSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5, 2)).setObjects(("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSoftSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorSWSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorSWSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomSoftDiscovSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5, 10)).setObjects(("SIEMENS-PN-MIB", "hicomSWTrpPabxId"), ("SIEMENS-PN-MIB", "hicomSWTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomSoftDiscovSucc.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovSucc.setDescription('A hicomSoftDiscovSucc trap indicates the successful termination of a discovery process. hicomSoftDiscovPabxId indicates the Pbx involved.')
hicomSoftDiscovErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5, 11)).setObjects(("SIEMENS-PN-MIB", "hicomSWTrpPabxId"), ("SIEMENS-PN-MIB", "hicomSWTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomSoftDiscovErr.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovErr.setDescription('A hicomSoftDiscovErr trap signifies the unsuccessful termination of a discovery process. hicomSoftDiscovPabxId indicates the Pbx involved.')
hicomSoftDiscovBusy = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 5, 19)).setObjects(("SIEMENS-PN-MIB", "hicomSWTrpPabxId"), ("SIEMENS-PN-MIB", "hicomSWTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomSoftDiscovBusy.setStatus('current')
if mibBuilder.loadTexts: hicomSoftDiscovBusy.setDescription('A hicomSoftDiscovBusy trap signifies that a sw discovery process is running. hicomSoftDiscovPabxId indicates the Pbx involved.')
hicomCabinets = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1))
hicomPeripherals = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2))
hicomBoards = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3))
hicomHWInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 4))
hicomHWDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5))
hicomCabTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1), )
if mibBuilder.loadTexts: hicomCabTable.setStatus('current')
if mibBuilder.loadTexts: hicomCabTable.setDescription('The table of installed hicom cabinets.')
hicomCabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomCabPabxId"), (0, "SIEMENS-PN-MIB", "hicomCabAddr"))
if mibBuilder.loadTexts: hicomCabEntry.setStatus('current')
if mibBuilder.loadTexts: hicomCabEntry.setDescription('Each entry describes a hicom cabinet. ')
hicomCabPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCabPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomCabPabxId.setDescription('Unique identifier of the Hicom to which the cabinet belongs.')
hicomCabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCabAddr.setStatus('current')
if mibBuilder.loadTexts: hicomCabAddr.setDescription('Unique identifier of the cabinet within the Hicom.')
hicomCabType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCabType.setStatus('current')
if mibBuilder.loadTexts: hicomCabType.setDescription('Short name of cabinet type.')
hicomCabPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCabPartNo.setStatus('current')
if mibBuilder.loadTexts: hicomCabPartNo.setDescription('Siemens part number of the cabinet.')
hicomCabNumShelves = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCabNumShelves.setStatus('current')
if mibBuilder.loadTexts: hicomCabNumShelves.setDescription('The number of shelves in a cabinet.')
hicomFrameTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2), )
if mibBuilder.loadTexts: hicomFrameTable.setStatus('current')
if mibBuilder.loadTexts: hicomFrameTable.setDescription('The table of installed Hicom frames.')
hicomFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomFramePabxId"), (0, "SIEMENS-PN-MIB", "hicomFrameCabAddr"), (0, "SIEMENS-PN-MIB", "hicomFrameMntLevel"))
if mibBuilder.loadTexts: hicomFrameEntry.setStatus('current')
if mibBuilder.loadTexts: hicomFrameEntry.setDescription('Each entry describes one Hicom frame. ')
hicomFramePabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFramePabxId.setStatus('current')
if mibBuilder.loadTexts: hicomFramePabxId.setDescription('Unique identifier of the Hicom to which a frame belongs.')
hicomFrameCabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFrameCabAddr.setStatus('current')
if mibBuilder.loadTexts: hicomFrameCabAddr.setDescription('Identifier of the cabinet to which a frame belongs.')
hicomFrameMntLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFrameMntLevel.setStatus('current')
if mibBuilder.loadTexts: hicomFrameMntLevel.setDescription('Mounting level of the frame in a cabinet. ')
hicomFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFrameType.setStatus('current')
if mibBuilder.loadTexts: hicomFrameType.setDescription('Short name of frame type.')
hicomFramePartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFramePartNo.setStatus('current')
if mibBuilder.loadTexts: hicomFramePartNo.setDescription('Siemens part number for this frame type.')
hicomFramePID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFramePID1.setStatus('current')
if mibBuilder.loadTexts: hicomFramePID1.setDescription('Processor identification - control part A.')
hicomFramePID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFramePID2.setStatus('current')
if mibBuilder.loadTexts: hicomFramePID2.setDescription('Processor identification - control part B.')
hicomFramePID3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFramePID3.setStatus('current')
if mibBuilder.loadTexts: hicomFramePID3.setDescription('Processor identification. ')
hicomFrameLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFrameLTU.setStatus('current')
if mibBuilder.loadTexts: hicomFrameLTU.setDescription("If the shelf houses a LTU, this is the LTU's number.")
hicomFrameIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomFrameIpAddr.setStatus('current')
if mibBuilder.loadTexts: hicomFrameIpAddr.setDescription('IP-Adress related to a Local Sysytem (LS). ')
hicomPeriphTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1), )
if mibBuilder.loadTexts: hicomPeriphTable.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphTable.setDescription('The table of installed devices: disks, tapes etc.')
hicomPeriphEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomPeriphPabxId"), (0, "SIEMENS-PN-MIB", "hicomPeriphContrID"), (0, "SIEMENS-PN-MIB", "hicomPeriphModule"))
if mibBuilder.loadTexts: hicomPeriphEntry.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphEntry.setDescription('Each entry describes a device.')
hicomPeriphPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphPabxId.setDescription('Unique identifier of the Hicom to which the peripheral device belongs.')
hicomPeriphContrID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphContrID.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphContrID.setDescription('Identifier of the controller the device is connected to.')
hicomPeriphModule = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphModule.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphModule.setDescription('Identifier of the related sever module: A1, C1, V1-V3 or T1-T3. ')
hicomPeriphType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphType.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphType.setDescription('Abbreviation of the device type: HD, FT, CT ...')
hicomPeriphSSNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphSSNo.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphSSNo.setDescription('Product identification.')
hicomPeriphSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphSize.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphSize.setDescription('Capacity (MB) of the storage medium.')
hicomPeriphGran = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomPeriphGran.setStatus('current')
if mibBuilder.loadTexts: hicomPeriphGran.setDescription('Sector size of the medium.')
hicomCDSMTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1), )
if mibBuilder.loadTexts: hicomCDSMTable.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMTable.setDescription('The table of hicom CDSM boards.')
hicomCDSMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomCDSMPabxId"), (0, "SIEMENS-PN-MIB", "hicomCDSMCabAddr"), (0, "SIEMENS-PN-MIB", "hicomCDSMMntLevel"), (0, "SIEMENS-PN-MIB", "hicomCDSMSlotAddr"))
if mibBuilder.loadTexts: hicomCDSMEntry.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMEntry.setDescription('Each entry describes one hardware board.')
hicomCDSMPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMPabxId.setDescription('Identifier of the Hicom to which the Board belongs.')
hicomCDSMCabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMCabAddr.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMCabAddr.setDescription('Identifier of the cabinet to which the board belongs.')
hicomCDSMMntLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMMntLevel.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMMntLevel.setDescription('Mounting level of the frame containing the board. ')
hicomCDSMSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMSlotAddr.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMSlotAddr.setDescription('Slot address for the board within its frame.')
hicomCDSMPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMPartNo.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMPartNo.setDescription('Siemens part number of the installed board.')
hicomCDSMCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMCode.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMCode.setDescription('Short name of the board.')
hicomCDSMVers = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMVers.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMVers.setDescription('Version number of the board.')
hicomCDSMFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSMFirmware.setStatus('current')
if mibBuilder.loadTexts: hicomCDSMFirmware.setDescription('Firmware version installed on the board.')
hicomCDSUTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2), )
if mibBuilder.loadTexts: hicomCDSUTable.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUTable.setDescription('The table of hicom CDSU boards.')
hicomCDSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomCDSUPabxId"), (0, "SIEMENS-PN-MIB", "hicomCDSUCabAddr"), (0, "SIEMENS-PN-MIB", "hicomCDSUMntLevel"), (0, "SIEMENS-PN-MIB", "hicomCDSUSlotAddr"))
if mibBuilder.loadTexts: hicomCDSUEntry.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUEntry.setDescription('Each entry describes one CDSU Board.')
hicomCDSUPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUPabxId.setDescription('The identifier of the Hicom to which the board belongs.')
hicomCDSUCabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUCabAddr.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUCabAddr.setDescription('Identifier of the cabinet to which the board belongs.')
hicomCDSUMntLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUMntLevel.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUMntLevel.setDescription('Mounting level of the frame containing the board. ')
hicomCDSUSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUSlotAddr.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUSlotAddr.setDescription('Slot address for the board within its frame.')
hicomCDSUPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUPartNo.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUPartNo.setDescription('Siemens part number of the installed board.')
hicomCDSUCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUCode.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUCode.setDescription('Short name of the board.')
hicomCDSUVers = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUVers.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUVers.setDescription('Version number of the board.')
hicomCDSUFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomCDSUFirmware.setStatus('current')
if mibBuilder.loadTexts: hicomCDSUFirmware.setDescription('Firmware version installed on the board.')
hicomBCSMTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3), )
if mibBuilder.loadTexts: hicomBCSMTable.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMTable.setDescription('The table of hicom BCSM boards.')
hicomBCSMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomBCSMPabxId"), (0, "SIEMENS-PN-MIB", "hicomBCSMMod"), (0, "SIEMENS-PN-MIB", "hicomBCSMSlotAddr"))
if mibBuilder.loadTexts: hicomBCSMEntry.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMEntry.setDescription('Each entry describes one HW board.')
hicomBCSMPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMPabxId.setDescription('The identifier of the Hicom to which the board belongs.')
hicomBCSMMod = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMMod.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMMod.setDescription('Identifier of the module to which the board belongs.')
hicomBCSMSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMSlotAddr.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMSlotAddr.setDescription('Address of slot containing the board. ')
hicomBCSMConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMConfBoard.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMConfBoard.setDescription('Siemens part number of the configured board.')
hicomBCSMCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMCode.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMCode.setDescription('Short name of the board.')
hicomBCSMInstBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMInstBoard.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMInstBoard.setDescription('Siemens part number of the installed board. This information may in fact differ from that in hicomBCSMConfBoard.')
hicomBCSMVers = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMVers.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMVers.setDescription('Version number of the board.')
hicomBCSMFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMFirmware.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMFirmware.setDescription('Firmware version installed on the board.')
hicomBCSMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSMStatus.setStatus('current')
if mibBuilder.loadTexts: hicomBCSMStatus.setDescription('State of the board: INS, READY ...')
hicomBCSUTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4), )
if mibBuilder.loadTexts: hicomBCSUTable.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUTable.setDescription('The table of hicom BCSU boards.')
hicomBCSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomBCSUPabxId"), (0, "SIEMENS-PN-MIB", "hicomBCSULTG"), (0, "SIEMENS-PN-MIB", "hicomBCSULTU"), (0, "SIEMENS-PN-MIB", "hicomBCSUSlotAddr"))
if mibBuilder.loadTexts: hicomBCSUEntry.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUEntry.setDescription('Each entry describes one HW board.')
hicomBCSUPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUPabxId.setDescription('The identifier of the Hicom to which the board belongs.')
hicomBCSULTG = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSULTG.setStatus('current')
if mibBuilder.loadTexts: hicomBCSULTG.setDescription('Identifier of the LTG to which the LTU belongs.')
hicomBCSULTU = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSULTU.setStatus('current')
if mibBuilder.loadTexts: hicomBCSULTU.setDescription('Identifier of the LTU to which the board belongs. ')
hicomBCSUSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUSlotAddr.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUSlotAddr.setDescription('Address of slot containing the board.')
hicomBCSUConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUConfBoard.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUConfBoard.setDescription('Siemens part number of the configured board.')
hicomBCSUCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUCode.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUCode.setDescription('Short name of the board.')
hicomBCSUInstBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUInstBoard.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUInstBoard.setDescription('Siemens part number of the installed board. This information may in fact differ from that in hicomBCSMConfBoard.')
hicomBCSUVers = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUVers.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUVers.setDescription('Version number of the board.')
hicomBCSUFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUFirmware.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUFirmware.setDescription('Firmware version installed on the board.')
hicomBCSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 3, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomBCSUStatus.setStatus('current')
if mibBuilder.loadTexts: hicomBCSUStatus.setDescription('State of the board: INS, READY ...')
hicomHWChanges = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHWChanges.setStatus('current')
if mibBuilder.loadTexts: hicomHWChanges.setDescription('Indicates the number of finished hardware discoveries - corresponds to the number of hicomHWDiscovXXX traps sent out.')
hicomHWDiscovTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2), )
if mibBuilder.loadTexts: hicomHWDiscovTable.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovTable.setDescription('The table describing the status concerning discovery of HW information.')
hicomHWDiscovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomHWDiscovPabxId"))
if mibBuilder.loadTexts: hicomHWDiscovEntry.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovEntry.setDescription('Each entry describes the status of the discovery process for a specific hicom.')
hicomHWDiscovPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHWDiscovPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovPabxId.setDescription('Unique identifier of the Hicom being discovered.')
hicomHWDiscovPabxMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHWDiscovPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovPabxMnemonic.setDescription('Name of the Hicom system. ')
hicomHWDiscovStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1, 3), DiscoveryStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomHWDiscovStatus.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovStatus.setDescription('Status of HW discovery process. A Manager may initiate a discovery by setting this variable to value busy. The other values are set by the agent. ')
hicomHWDiscovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1, 4), DiscoveryModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomHWDiscovMode.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovMode.setDescription('Mode of discovery process.')
hicomHWDiscovTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHWDiscovTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovTimDat.setDescription('Date and time (year, month, day, hour, minute, second) the last successful discovery action was performed for the Hicom.')
hicomHWDiscovErrTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHWDiscovErrTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovErrTimDat.setDescription('Date and time (year, month, day, hour, minute, second) the last failed discovery action was performed for the Hicom.')
hicomHardSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHardSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomHardSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Hardware subagent.')
hicomHardSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomHardSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomHardSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Hardware subagent.')
hicomHardSubagentResultData = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 6, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomHardSubagentResultData.setStatus('current')
if mibBuilder.loadTexts: hicomHardSubagentResultData.setDescription("Is used for agent internal communication. Contains the PabxId of a Hicom for which the last discovery process was conveyed. Is SET by the discovery agent and indicates the availability of new discovered data. The new data is to be incorporated by the subagent into the subagent's data base.")
hicomCabinetsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 6, 1)).setObjects(("SIEMENS-PN-MIB", "hicomCabPabxId"), ("SIEMENS-PN-MIB", "hicomCabAddr"), ("SIEMENS-PN-MIB", "hicomCabType"), ("SIEMENS-PN-MIB", "hicomCabPartNo"), ("SIEMENS-PN-MIB", "hicomCabNumShelves"), ("SIEMENS-PN-MIB", "hicomFramePabxId"), ("SIEMENS-PN-MIB", "hicomFrameCabAddr"), ("SIEMENS-PN-MIB", "hicomFrameMntLevel"), ("SIEMENS-PN-MIB", "hicomFrameType"), ("SIEMENS-PN-MIB", "hicomFramePartNo"), ("SIEMENS-PN-MIB", "hicomFramePID1"), ("SIEMENS-PN-MIB", "hicomFramePID2"), ("SIEMENS-PN-MIB", "hicomFramePID3"), ("SIEMENS-PN-MIB", "hicomFrameLTU"), ("SIEMENS-PN-MIB", "hicomFrameIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomCabinetsGroup = hicomCabinetsGroup.setStatus('current')
if mibBuilder.loadTexts: hicomCabinetsGroup.setDescription('Conformance statement for hicomCabinetsGroup.')
hicomPeriperalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 6, 2)).setObjects(("SIEMENS-PN-MIB", "hicomPeriphPabxId"), ("SIEMENS-PN-MIB", "hicomPeriphContrID"), ("SIEMENS-PN-MIB", "hicomPeriphModule"), ("SIEMENS-PN-MIB", "hicomPeriphType"), ("SIEMENS-PN-MIB", "hicomPeriphSSNo"), ("SIEMENS-PN-MIB", "hicomPeriphSize"), ("SIEMENS-PN-MIB", "hicomPeriphGran"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomPeriperalsGroup = hicomPeriperalsGroup.setStatus('current')
if mibBuilder.loadTexts: hicomPeriperalsGroup.setDescription('Conformance statement for hicomPeriperalsGroup.')
hicomBoardsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 6, 3)).setObjects(("SIEMENS-PN-MIB", "hicomCDSMPabxId"), ("SIEMENS-PN-MIB", "hicomCDSMCabAddr"), ("SIEMENS-PN-MIB", "hicomCDSMMntLevel"), ("SIEMENS-PN-MIB", "hicomCDSMSlotAddr"), ("SIEMENS-PN-MIB", "hicomCDSMPartNo"), ("SIEMENS-PN-MIB", "hicomCDSMCode"), ("SIEMENS-PN-MIB", "hicomCDSMVers"), ("SIEMENS-PN-MIB", "hicomCDSMFirmware"), ("SIEMENS-PN-MIB", "hicomCDSUPabxId"), ("SIEMENS-PN-MIB", "hicomCDSUCabAddr"), ("SIEMENS-PN-MIB", "hicomCDSUMntLevel"), ("SIEMENS-PN-MIB", "hicomCDSUSlotAddr"), ("SIEMENS-PN-MIB", "hicomCDSUPartNo"), ("SIEMENS-PN-MIB", "hicomCDSUCode"), ("SIEMENS-PN-MIB", "hicomCDSUVers"), ("SIEMENS-PN-MIB", "hicomCDSUFirmware"), ("SIEMENS-PN-MIB", "hicomBCSMPabxId"), ("SIEMENS-PN-MIB", "hicomBCSMMod"), ("SIEMENS-PN-MIB", "hicomBCSMSlotAddr"), ("SIEMENS-PN-MIB", "hicomBCSMConfBoard"), ("SIEMENS-PN-MIB", "hicomBCSMCode"), ("SIEMENS-PN-MIB", "hicomBCSMInstBoard"), ("SIEMENS-PN-MIB", "hicomBCSMVers"), ("SIEMENS-PN-MIB", "hicomBCSMFirmware"), ("SIEMENS-PN-MIB", "hicomBCSMStatus"), ("SIEMENS-PN-MIB", "hicomBCSUPabxId"), ("SIEMENS-PN-MIB", "hicomBCSULTG"), ("SIEMENS-PN-MIB", "hicomBCSULTU"), ("SIEMENS-PN-MIB", "hicomBCSUSlotAddr"), ("SIEMENS-PN-MIB", "hicomBCSUConfBoard"), ("SIEMENS-PN-MIB", "hicomBCSUCode"), ("SIEMENS-PN-MIB", "hicomBCSUInstBoard"), ("SIEMENS-PN-MIB", "hicomBCSUVers"), ("SIEMENS-PN-MIB", "hicomBCSUFirmware"), ("SIEMENS-PN-MIB", "hicomBCSUStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomBoardsGroup = hicomBoardsGroup.setStatus('current')
if mibBuilder.loadTexts: hicomBoardsGroup.setDescription('Conformance statement for hicomBoardsGroup.')
hicomHWInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 6, 4)).setObjects(("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgText"), ("SIEMENS-PN-MIB", "hicomHardSubagentResultData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomHWInfoGroup = hicomHWInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hicomHWInfoGroup.setDescription('Conformance statement for hicomHWInfoGroup.')
hicomHWDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 6, 5)).setObjects(("SIEMENS-PN-MIB", "hicomHWChanges"), ("SIEMENS-PN-MIB", "hicomHWDiscovPabxId"), ("SIEMENS-PN-MIB", "hicomHWDiscovPabxMnemonic"), ("SIEMENS-PN-MIB", "hicomHWDiscovStatus"), ("SIEMENS-PN-MIB", "hicomHWDiscovMode"), ("SIEMENS-PN-MIB", "hicomHWDiscovTimDat"), ("SIEMENS-PN-MIB", "hicomHWDiscovErrTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomHWDiscoveryGroup = hicomHWDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscoveryGroup.setDescription('Conformance statement for hicomHWDiscoveryGroup. ')
hicomHWTrpPabxId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 6, 1), Integer32())
if mibBuilder.loadTexts: hicomHWTrpPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomHWTrpPabxId.setDescription('Unique identifier of a Hicom system.')
hicomHWTrpPabxMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 6, 2), DisplayString())
if mibBuilder.loadTexts: hicomHWTrpPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomHWTrpPabxMnemonic.setDescription('Mnemonic name of the Hicom system.')
internalMessageHWSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6, 0)).setObjects(("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageHWSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageHWSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningHWSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6, 1)).setObjects(("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningHWSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningHWSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorHWSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6, 2)).setObjects(("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomHardSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorHWSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorHWSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomHWDiscovSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6, 10)).setObjects(("SIEMENS-PN-MIB", "hicomHWTrpPabxId"), ("SIEMENS-PN-MIB", "hicomHWTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomHWDiscovSucc.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovSucc.setDescription('A hicomHWDiscovSucc trap signifies the successful termination of a discovery request / process. hicomHWDiscovPabxId: indicates the Pbx involved.')
hicomHWDiscovErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6, 11)).setObjects(("SIEMENS-PN-MIB", "hicomHWTrpPabxId"), ("SIEMENS-PN-MIB", "hicomHWTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomHWDiscovErr.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovErr.setDescription('A hicomHWDiscovErr trap signifies the unsuccessful termination of a discovery request / process. hicomHWDiscovPabxId: indicates the Pbx involved.')
hicomHWDiscovBusy = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 6, 19)).setObjects(("SIEMENS-PN-MIB", "hicomHWTrpPabxId"), ("SIEMENS-PN-MIB", "hicomHWTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomHWDiscovBusy.setStatus('current')
if mibBuilder.loadTexts: hicomHWDiscovBusy.setDescription('A hicomHWDiscovBusy trap signifies that a hw discovery process is running. hicomHWDiscovPabxId: indicates the Pbx involved.')
hicomTrunkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1))
hicomTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2))
hicomTopoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 3))
hicomTopoDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4))
hicomKntop = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5))
class TrunkTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("undef", 1), ("analog", 2), ("digital", 3), ("special", 4))

hicomTrunkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1), )
if mibBuilder.loadTexts: hicomTrunkGrpTable.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpTable.setDescription('The table of trunk groups.')
hicomTrunkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomTrunkGrpPabxId"), (0, "SIEMENS-PN-MIB", "hicomTrunkGrpNo"))
if mibBuilder.loadTexts: hicomTrunkGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpEntry.setDescription('Each entry describes a Hicom trunk group. ')
hicomTrunkGrpPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpPabxId.setDescription('Unique identifier of the Hicom system.')
hicomTrunkGrpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpNo.setDescription('Identifier Trunk Group.')
hicomTrunkGrpNNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomTrunkGrpNNodeNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpNNodeNo.setDescription('Number of neighbour node. Value to be delivered by manager.')
hicomTrunkGrpVNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpVNodeNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpVNodeNo.setDescription('Derived from source SNodeNo of trunk table.')
hicomTrunkGrpTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 5), TrunkTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpTrunkType.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpTrunkType.setDescription('Type of the trunk group.')
hicomTrunkGrpMaxNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpMaxNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpMaxNo.setDescription('The maximum number of trunks a trunk groupp may contain.')
hicomTrunkGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpName.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpName.setDescription('Name of the trunk group. ')
hicomTrunkGrpDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpDevice.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpDevice.setDescription('Type of device.')
hicomTrunkGrpAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkGrpAlarms.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpAlarms.setDescription("Octet string contains configured AlSubIds (0 up to 519) of related Pabx und trunkgroup. The hicomTrunkGrpAlarms string is 65 octets long. AlSubId '0' is set, if (hicomTrunkGrpAlarms[0] AND 0x01) evaluates to true. AlSubId '7' is set, if (hicomTrunkGrpAlarms[0] AND 0x80) evaluates to true. AlSubId '8' is set, if (hicomTrunkGrpAlarms[1] AND 0x01) evaluates to true etc.")
hicomTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1), )
if mibBuilder.loadTexts: hicomTrunkTable.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkTable.setDescription('The table of trunks.')
hicomTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomTrunkPabxId"), (0, "SIEMENS-PN-MIB", "hicomTrunkType"), (0, "SIEMENS-PN-MIB", "hicomTrunkTrunkGrpNo"), (0, "SIEMENS-PN-MIB", "hicomTrunkLtg"), (0, "SIEMENS-PN-MIB", "hicomTrunkLtu"), (0, "SIEMENS-PN-MIB", "hicomTrunkSlot"), (0, "SIEMENS-PN-MIB", "hicomTrunkNo"), (0, "SIEMENS-PN-MIB", "hicomTrunkChannelGrp"))
if mibBuilder.loadTexts: hicomTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkEntry.setDescription('Each entry describes a Hicom trunk.')
hicomTrunkPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkPabxId.setDescription('Identifier of the Hicom.')
hicomTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 2), TrunkTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkType.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkType.setDescription('Type of trunk.')
hicomTrunkTrunkGrpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkTrunkGrpNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkTrunkGrpNo.setDescription('Identifier of the related Trunk Group.')
hicomTrunkLtg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkLtg.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkLtg.setDescription('Identifier of the related line trunk group.')
hicomTrunkLtu = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkLtu.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkLtu.setDescription('Identifier of the related line trunk unit.')
hicomTrunkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkSlot.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkSlot.setDescription('Identification of slot within a frame.')
hicomTrunkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkNo.setDescription('Number of trunk within a trunk group. ')
hicomTrunkChannelGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkChannelGrp.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkChannelGrp.setDescription('Identification of an aggregate of B-channels. ')
hicomTrunkSNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkSNodeNo.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkSNodeNo.setDescription('Virtual number of the source node of a connection.')
hicomTrunkStatOp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkStatOp.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkStatOp.setDescription('The operational state of a trunk.')
hicomTrunkAlSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkAlSubId.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkAlSubId.setDescription('Assigned alarm referring to a specific target.')
hicomTrunkChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkChannels.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkChannels.setDescription('List of chanels in a trunk group. Base64 coded.')
hicomTrunkDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkDevice.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkDevice.setDescription('Type of device / connection.')
hicomTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTrunkName.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkName.setDescription('Name of the trunk.')
hicomKntopTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1), )
if mibBuilder.loadTexts: hicomKntopTable.setStatus('current')
if mibBuilder.loadTexts: hicomKntopTable.setDescription('The table of kntop.')
hicomKntopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomKntopPabxId"), (0, "SIEMENS-PN-MIB", "hicomKntopLtg"), (0, "SIEMENS-PN-MIB", "hicomKntopLtu"), (0, "SIEMENS-PN-MIB", "hicomKntopSlot"), (0, "SIEMENS-PN-MIB", "hicomKntopSatznr"), (0, "SIEMENS-PN-MIB", "hicomKntopBKanalGrp"), (0, "SIEMENS-PN-MIB", "hicomKntopPNodeIndex"))
if mibBuilder.loadTexts: hicomKntopEntry.setStatus('current')
if mibBuilder.loadTexts: hicomKntopEntry.setDescription('Each entry describes a connection between two Hicoms.')
hicomKntopPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPabxId.setDescription('Identifier of the Hicom.')
hicomKntopLtg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopLtg.setStatus('current')
if mibBuilder.loadTexts: hicomKntopLtg.setDescription('Identifier of the related line trunk group.')
hicomKntopLtu = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopLtu.setStatus('current')
if mibBuilder.loadTexts: hicomKntopLtu.setDescription('Identifier of the related line trunk unit.')
hicomKntopSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopSlot.setStatus('current')
if mibBuilder.loadTexts: hicomKntopSlot.setDescription('Identification of slot within a frame.')
hicomKntopSatznr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopSatznr.setStatus('current')
if mibBuilder.loadTexts: hicomKntopSatznr.setDescription('Number of trunk within a trunk group. ')
hicomKntopBKanalGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopBKanalGrp.setStatus('current')
if mibBuilder.loadTexts: hicomKntopBKanalGrp.setDescription('Identification of an aggregate of B-channels. ')
hicomKntopPNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPNodeIndex.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPNodeIndex.setDescription('Entry Index of the Partner Node.')
hicomKntopPLtg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPLtg.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPLtg.setDescription('Target Identifier of the related line trunk group.')
hicomKntopPLtu = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPLtu.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPLtu.setDescription('Target Identifier of the related line trunk unit.')
hicomKntopPSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPSlot.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPSlot.setDescription('Target Identification of slot within a frame.')
hicomKntopPSatznr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPSatznr.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPSatznr.setDescription('Target Number of trunk within a trunk group. ')
hicomKntopPBKanalGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPBKanalGrp.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPBKanalGrp.setDescription('Target Identification of an aggregate of B-channels. ')
hicomKntopPNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopPNodeNo.setStatus('current')
if mibBuilder.loadTexts: hicomKntopPNodeNo.setDescription('Node number of the target node of the connection.')
hicomKntopBunr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomKntopBunr.setStatus('current')
if mibBuilder.loadTexts: hicomKntopBunr.setDescription('Buendelnumber of the PEN')
hicomTopoChanges = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoChanges.setStatus('current')
if mibBuilder.loadTexts: hicomTopoChanges.setDescription('Indicates number of hardware discoveries - corresponds to TopoDiscovery traps sent out.')
hicomTopoDiscovTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2), )
if mibBuilder.loadTexts: hicomTopoDiscovTable.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovTable.setDescription('The table describing the status concerning discovery of topology information.')
hicomTopoDiscovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomTopoDiscovPabxId"))
if mibBuilder.loadTexts: hicomTopoDiscovEntry.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovEntry.setDescription('An entry in the hicomTopoDiscovTable. Each entry describes the status of the discovery process for a specific hicom.')
hicomTopoDiscovPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoDiscovPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovPabxId.setDescription('Unique identifier of the Hicom being discovered.')
hicomTopoDiscovPabxMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoDiscovPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovPabxMnemonic.setDescription('Name of the Hicom system. ')
hicomTopoDiscovStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1, 3), DiscoveryStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomTopoDiscovStatus.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovStatus.setDescription("Status of Topo discovery process. A manager initiates discovery by setting the variable to 'busy'. The agent will set the other values.")
hicomTopoDiscovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1, 4), DiscoveryModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomTopoDiscovMode.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovMode.setDescription('Mode of discovery process.')
hicomTopoDiscovTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoDiscovTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovTimDat.setDescription('Date and time (year, month, day, hour, minute, second) the last successful discovery action was performed for the Hicom.')
hicomTopoDiscovErrTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoDiscovErrTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovErrTimDat.setDescription('Date and time (year, month, day, hour, minute, second) the last failed discovery action was performed for the Hicom.')
hicomTopoSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomTopoSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Topology subagent.')
hicomTopoSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomTopoSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomTopoSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Topology subagent.')
hicomTopoSubagentResultData = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 7, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomTopoSubagentResultData.setStatus('current')
if mibBuilder.loadTexts: hicomTopoSubagentResultData.setDescription("Is used for agent internal communication. Contains the PabxId of a Hicom for which the last discovery process was conveyed. Is SET by the discovery agent and indicates the availability of new discovered data. The new data is to be incorporated by the subagent into the subagent's data base.")
hicomTrunkGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 7, 1)).setObjects(("SIEMENS-PN-MIB", "hicomTrunkGrpPabxId"), ("SIEMENS-PN-MIB", "hicomTrunkGrpTrunkType"), ("SIEMENS-PN-MIB", "hicomTrunkGrpNo"), ("SIEMENS-PN-MIB", "hicomTrunkGrpName"), ("SIEMENS-PN-MIB", "hicomTrunkGrpMaxNo"), ("SIEMENS-PN-MIB", "hicomTrunkGrpDevice"), ("SIEMENS-PN-MIB", "hicomTrunkGrpNNodeNo"), ("SIEMENS-PN-MIB", "hicomTrunkGrpVNodeNo"), ("SIEMENS-PN-MIB", "hicomTrunkGrpAlarms"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomTrunkGrpGroup = hicomTrunkGrpGroup.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGrpGroup.setDescription('Conformance statement for hicomTrunkGrpGroup.')
hicomTrunkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 7, 2)).setObjects(("SIEMENS-PN-MIB", "hicomTrunkPabxId"), ("SIEMENS-PN-MIB", "hicomTrunkType"), ("SIEMENS-PN-MIB", "hicomTrunkTrunkGrpNo"), ("SIEMENS-PN-MIB", "hicomTrunkLtg"), ("SIEMENS-PN-MIB", "hicomTrunkLtu"), ("SIEMENS-PN-MIB", "hicomTrunkSlot"), ("SIEMENS-PN-MIB", "hicomTrunkNo"), ("SIEMENS-PN-MIB", "hicomTrunkChannelGrp"), ("SIEMENS-PN-MIB", "hicomTrunkChannels"), ("SIEMENS-PN-MIB", "hicomTrunkDevice"), ("SIEMENS-PN-MIB", "hicomTrunkName"), ("SIEMENS-PN-MIB", "hicomTrunkStatOp"), ("SIEMENS-PN-MIB", "hicomTrunkSNodeNo"), ("SIEMENS-PN-MIB", "hicomTrunkAlSubId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomTrunkGroup = hicomTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: hicomTrunkGroup.setDescription('Conformance statement for hicomTrunkGroup.')
hicomTopoInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 7, 3)).setObjects(("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgText"), ("SIEMENS-PN-MIB", "hicomTopoSubagentResultData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomTopoInfoGroup = hicomTopoInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hicomTopoInfoGroup.setDescription('Conformance statement for hicomTopoInfoGroup.')
hicomTopoDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 7, 4)).setObjects(("SIEMENS-PN-MIB", "hicomTopoChanges"), ("SIEMENS-PN-MIB", "hicomTopoDiscovPabxId"), ("SIEMENS-PN-MIB", "hicomTopoDiscovPabxMnemonic"), ("SIEMENS-PN-MIB", "hicomTopoDiscovStatus"), ("SIEMENS-PN-MIB", "hicomTopoDiscovMode"), ("SIEMENS-PN-MIB", "hicomTopoDiscovTimDat"), ("SIEMENS-PN-MIB", "hicomTopoDiscovErrTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomTopoDiscoveryGroup = hicomTopoDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscoveryGroup.setDescription('Conformance statement for hicomTopoDiscoveryGroup.')
hicomKntopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 7, 5)).setObjects(("SIEMENS-PN-MIB", "hicomKntopPabxId"), ("SIEMENS-PN-MIB", "hicomKntopLtg"), ("SIEMENS-PN-MIB", "hicomKntopLtu"), ("SIEMENS-PN-MIB", "hicomKntopSlot"), ("SIEMENS-PN-MIB", "hicomKntopSatznr"), ("SIEMENS-PN-MIB", "hicomKntopBKanalGrp"), ("SIEMENS-PN-MIB", "hicomKntopPNodeIndex"), ("SIEMENS-PN-MIB", "hicomKntopPLtg"), ("SIEMENS-PN-MIB", "hicomKntopPLtu"), ("SIEMENS-PN-MIB", "hicomKntopPSlot"), ("SIEMENS-PN-MIB", "hicomKntopPSatznr"), ("SIEMENS-PN-MIB", "hicomKntopPBKanalGrp"), ("SIEMENS-PN-MIB", "hicomKntopPNodeNo"), ("SIEMENS-PN-MIB", "hicomKntopBunr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomKntopGroup = hicomKntopGroup.setStatus('current')
if mibBuilder.loadTexts: hicomKntopGroup.setDescription('Conformance statement for hicomKntopTable.')
hicomTopoTrpPabxId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 7, 1), Integer32())
if mibBuilder.loadTexts: hicomTopoTrpPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomTopoTrpPabxId.setDescription('Unique identifier of a Hicom system.')
hicomTopoTrpPabxMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 7, 2), DisplayString())
if mibBuilder.loadTexts: hicomTopoTrpPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomTopoTrpPabxMnemonic.setDescription('Mnemonic name of the Hicom system.')
internalMessageTopoSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7, 0)).setObjects(("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageTopoSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageTopoSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningTopoSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7, 1)).setObjects(("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningTopoSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningTopoSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorTopoSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7, 2)).setObjects(("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomTopoSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorTopoSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorTopoSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomTopoDiscovSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7, 10)).setObjects(("SIEMENS-PN-MIB", "hicomTopoTrpPabxId"), ("SIEMENS-PN-MIB", "hicomTopoTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomTopoDiscovSucc.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovSucc.setDescription('A hicomTopoDiscovSucc trap signifies the successful termination of a discovery process. hicomTopoDiscovPabxId: indicates the Pbx involved.')
hicomTopoDiscovErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7, 11)).setObjects(("SIEMENS-PN-MIB", "hicomTopoTrpPabxId"), ("SIEMENS-PN-MIB", "hicomTopoTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomTopoDiscovErr.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovErr.setDescription('A hicomTopoDiscovErr trap signifies the unsuccessful termination of a discovery process. hicomTopoDiscovPabxId: indicates the Pbx involved.')
hicomTopoDiscovBusy = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 7, 19)).setObjects(("SIEMENS-PN-MIB", "hicomTopoTrpPabxId"), ("SIEMENS-PN-MIB", "hicomTopoTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomTopoDiscovBusy.setStatus('current')
if mibBuilder.loadTexts: hicomTopoDiscovBusy.setDescription('A hicomTopoDiscovBusy trap signifies that a topo discovery process is running. hicomTopoDiscovPabxId: indicates the Pbx involved.')
hicomSQLsessionIdGenerator = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSQLsessionIdGenerator.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionIdGenerator.setDescription("hicomSQLsessionIdGenerator is used to create and assign unique SQL session identifiers to concurrent manager applications. hicomSQLsessionIdGenerator shall be used in accordance to the semantics of TestAndIncr specified in Textual Conventions (RFC1903). A GET on hicomSQLsessionIdGenerator returns a new SQL session ID. This value shall be confirmed/claimed by a manager application by setting the hicomSQLsessionIdGenerator variable to the value which was returned by the previous GET. If the SET on hicomSQLsessionIdGenerator succeeds (error status 'noError' is returned), the SQL session ID value is uniquely assigned to the requesting manager application. Further, the agent did create a corresponding entry in the hicomSQLsessionTable having hicomSQLsessionId set to the SQL session ID value used with the SET. If the SET on hicomSQLsessionIdGenerator fails (error status 'inconsistenValue' is returned) the same value was read by another manager and this one just claimed his SQL session ID by performing successfully a SET. In this case no entry is created in the hicomSQLsessionTable. To get and claim a unique SQL session ID, the manager application has to redo the GET and SET operation cycle on hicomSQLsessionIdGenerator. NOTE: using this and other hicomSQL objects is reserved for Siemens internal use ONLY. No documentation on this interface is available for customers.")
hicomSQLsessionTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2), )
if mibBuilder.loadTexts: hicomSQLsessionTable.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionTable.setDescription('This table describes all currently active SQL sessions. An entry is generated after a new session ID is read and claimed by a manager application (see hicomSQLsessionIdGenerator). An entry is deleted from the table when its timeout (see hicomSQLsessionTimeout) - which is restarted with each access on hicomSQLresultData - expires. The state of a new created entry initially is idle(1). The manager must then SET hicomSQLsessionStatement and hicomSQLsessionWhereClause, optionally may set hicomSQLsessionTimeout, and then SET hicomSQLsessionState to run(2). The completion of a session will be indicated to the manager via a hicomSQLsessionFinished trap.')
hicomSQLsessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomSQLsessionId"))
if mibBuilder.loadTexts: hicomSQLsessionEntry.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionEntry.setDescription('An entry in the hicomSQLsessionTable.')
hicomSQLsessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLsessionId.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionId.setDescription('Unique identifier of the SQL session.')
hicomSQLsessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("run", 2), ("error", 4), ("valid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSQLsessionState.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionState.setDescription('Indicates current state of the SQL session: idle: entry/session has been created by the agent and has to be initialized by the manager. run: to be set by the manager to initiate the execution of the SQL query. error: execution of the SQL query resulted in an error valid: execution of the SQL query was successful. Transitions: idle -> run -> {valid, error} ')
hicomSQLsessionStatement = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSQLsessionStatement.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionStatement.setDescription('Selects the predefined SQL statement for this session.')
hicomSQLsessionWhereClause = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSQLsessionWhereClause.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionWhereClause.setDescription('The WHERE clause to be used for this SQL statement.')
hicomSQLsessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 86400)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomSQLsessionTimeout.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionTimeout.setDescription('Maximum time interval between any two succeeding retrievals to the result data of the session. If no access is made to the to the result data of the session within SQLsessionTimeout, the session and the related result data will be erased. SQLSessionTimeout is messured in seconds.')
hicomSQLsessionResultSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLsessionResultSize.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionResultSize.setDescription('The result of a SQL query is stored in result file. hicomSQLsessionResultSize specifies the size in number of octets of the result file.')
hicomSQLsessionResultNoLines = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLsessionResultNoLines.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionResultNoLines.setDescription('The result of a SQL query is stored in result file. hicomSQLsessionResultNoLines specifies the number of lines in the result file.')
hicomSQLresultTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 3), )
if mibBuilder.loadTexts: hicomSQLresultTable.setStatus('current')
if mibBuilder.loadTexts: hicomSQLresultTable.setDescription('This table contains the results of finished SQL sessions.')
hicomSQLresultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 3, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomSQLresultId"), (0, "SIEMENS-PN-MIB", "hicomSQLresultBlockNo"))
if mibBuilder.loadTexts: hicomSQLresultEntry.setStatus('current')
if mibBuilder.loadTexts: hicomSQLresultEntry.setDescription('An entry in the hicomSQLresultTable.')
hicomSQLresultId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLresultId.setStatus('current')
if mibBuilder.loadTexts: hicomSQLresultId.setDescription('Session ID to which these results belong.')
hicomSQLresultBlockNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLresultBlockNo.setStatus('current')
if mibBuilder.loadTexts: hicomSQLresultBlockNo.setDescription("Identifier of the data block to be returned from the result file. The result file is logically segmented in blocks of 256 octets. Data from the result file is read by GET in block units. Each GET will return one block specified by BlockNo. A GET on BlockNo '0' will return octet 0 to 255 of the result file and a GET on BlockNo '1' octet 256 to 511 etc. If the first or last block is smaller then 256 octets, then a corresponding smaller hicomSQLresultData block will be returned.")
hicomSQLresultData = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLresultData.setStatus('current')
if mibBuilder.loadTexts: hicomSQLresultData.setDescription('Requested block of result data.')
hicomSQLinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 4))
hicomSQLSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomSQLSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the SQL subagent.')
hicomSQLSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 8, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomSQLSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomSQLSubagentLastMsgText.setDescription('The last message, warning or error text issued by the SQL subagent.')
hicomSQLsessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 8, 1)).setObjects(("SIEMENS-PN-MIB", "hicomSQLsessionIdGenerator"), ("SIEMENS-PN-MIB", "hicomSQLsessionId"), ("SIEMENS-PN-MIB", "hicomSQLsessionState"), ("SIEMENS-PN-MIB", "hicomSQLsessionResultSize"), ("SIEMENS-PN-MIB", "hicomSQLsessionResultNoLines"), ("SIEMENS-PN-MIB", "hicomSQLsessionTimeout"), ("SIEMENS-PN-MIB", "hicomSQLsessionStatement"), ("SIEMENS-PN-MIB", "hicomSQLsessionWhereClause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSQLsessionGroup = hicomSQLsessionGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionGroup.setDescription('Conformance statement for hicomSQLsessionGroup.')
hicomSQLresultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 8, 2)).setObjects(("SIEMENS-PN-MIB", "hicomSQLresultId"), ("SIEMENS-PN-MIB", "hicomSQLresultBlockNo"), ("SIEMENS-PN-MIB", "hicomSQLresultData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSQLresultGroup = hicomSQLresultGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSQLresultGroup.setDescription('Conformance statement for hicomSQLresultGroup.')
hicomSQLinfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 8, 3)).setObjects(("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomSQLinfoGroup = hicomSQLinfoGroup.setStatus('current')
if mibBuilder.loadTexts: hicomSQLinfoGroup.setDescription('Conformance statement for hicomSQLinfoGroup.')
internalMessageSQLSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 8, 0)).setObjects(("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageSQLSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageSQLSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningSQLSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 8, 1)).setObjects(("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningSQLSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningSQLSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorSQLSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 8, 2)).setObjects(("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomSQLSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorSQLSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorSQLSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomSQLsessionFinished = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 8, 20)).setObjects(("SIEMENS-PN-MIB", "hicomSQLsessionId"), ("SIEMENS-PN-MIB", "hicomSQLsessionState"), ("SIEMENS-PN-MIB", "hicomSQLsessionResultSize"), ("SIEMENS-PN-MIB", "hicomSQLsessionResultNoLines"))
if mibBuilder.loadTexts: hicomSQLsessionFinished.setStatus('current')
if mibBuilder.loadTexts: hicomSQLsessionFinished.setDescription('A hicomSQLsessionFinished trap indicates the completion of an SQL query. If hicomSQLsessionState indicates an error in the query, hicomSQLsessionResultLines will contain the SQL error code instead of the number of resulting lines. In this case, no entry in the hicomSQLresultTable will be created.')
hicomDiscovTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1), )
if mibBuilder.loadTexts: hicomDiscovTable.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovTable.setDescription('This table contains information about the master discoveries for each managed Hicom. Starting a master discoveries will lead to the individual discoveries being started. The termination of these discoveries will be signalled through their respective traps.')
hicomDiscovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1), ).setIndexNames((0, "SIEMENS-PN-MIB", "hicomDiscovPabxId"))
if mibBuilder.loadTexts: hicomDiscovEntry.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovEntry.setDescription('Each entry describes the master discovery for a specific hicom.')
hicomDiscovPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomDiscovPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovPabxId.setDescription('Unique identifier of the Hicom being discovered.')
hicomDiscovPabxMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomDiscovPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovPabxMnemonic.setDescription('Name of the Hicom.')
hicomDiscovStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1, 3), DiscoveryStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomDiscovStatus.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovStatus.setDescription('Status of master discovery process.')
hicomDiscovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1, 4), DiscoveryModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hicomDiscovMode.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovMode.setDescription('Mode of master discovery process.')
hicomDiscovTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomDiscovTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovTimDat.setDescription('Date and time of the last successful discovery.')
hicomDiscovErrTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomDiscovErrTimDat.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovErrTimDat.setDescription('Date and time of the last failed discovery.')
hicomDiscInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 2))
hicomDiscSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomDiscSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: hicomDiscSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the discovery subagent.')
hicomDiscSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 9, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hicomDiscSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: hicomDiscSubagentLastMsgText.setDescription('The last message, warning or error text issued by the discovery subagent.')
hicomDiscovGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 9, 1)).setObjects(("SIEMENS-PN-MIB", "hicomDiscovPabxId"), ("SIEMENS-PN-MIB", "hicomDiscovPabxMnemonic"), ("SIEMENS-PN-MIB", "hicomDiscovStatus"), ("SIEMENS-PN-MIB", "hicomDiscovMode"), ("SIEMENS-PN-MIB", "hicomDiscovTimDat"), ("SIEMENS-PN-MIB", "hicomDiscovErrTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomDiscovGroup = hicomDiscovGroup.setStatus('current')
if mibBuilder.loadTexts: hicomDiscovGroup.setDescription('Conformance statement for hicomDiscovGroup.')
hicomDiscInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 20, 1, 9, 2)).setObjects(("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hicomDiscInfoGroup = hicomDiscInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hicomDiscInfoGroup.setDescription('Conformance statement for hicomDiscinfoGroup.')
hicomEDTrpPabxId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 9, 1), Integer32())
if mibBuilder.loadTexts: hicomEDTrpPabxId.setStatus('current')
if mibBuilder.loadTexts: hicomEDTrpPabxId.setDescription('Unique identifier of a Hicom system.')
hicomEDTrpPabxMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 1, 9, 2), DisplayString())
if mibBuilder.loadTexts: hicomEDTrpPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: hicomEDTrpPabxMnemonic.setDescription('Mnemonic name of the Hicom system.')
internalMessageDiscSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9, 0)).setObjects(("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageDiscSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageDiscSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningDiscSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9, 1)).setObjects(("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningDiscSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningDiscSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorDiscSubagent = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9, 2)).setObjects(("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgNo"), ("SIEMENS-PN-MIB", "hicomDiscSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorDiscSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorDiscSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
hicomErrDeleteSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9, 10)).setObjects(("SIEMENS-PN-MIB", "hicomEDTrpPabxId"), ("SIEMENS-PN-MIB", "hicomEDTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomErrDeleteSucc.setStatus('current')
if mibBuilder.loadTexts: hicomErrDeleteSucc.setDescription('A hicomErrDeleteSucc trap indicates the successful termination of an Error Message Delete process. hicomErrDeletePabxId indicates the Pbx involved.')
hicomErrDeleteErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9, 11)).setObjects(("SIEMENS-PN-MIB", "hicomEDTrpPabxId"), ("SIEMENS-PN-MIB", "hicomEDTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomErrDeleteErr.setStatus('current')
if mibBuilder.loadTexts: hicomErrDeleteErr.setDescription('A hicomErrDeleteErr trap signifies the unsuccessful termination of an Error Message Delete process. hicomErrDeletePabxId indicates the Pbx involved.')
hicomErrDeleteBusy = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 2, 1, 21, 2, 9, 19)).setObjects(("SIEMENS-PN-MIB", "hicomEDTrpPabxId"), ("SIEMENS-PN-MIB", "hicomEDTrpPabxMnemonic"))
if mibBuilder.loadTexts: hicomErrDeleteBusy.setStatus('current')
if mibBuilder.loadTexts: hicomErrDeleteBusy.setDescription('A hicomErrDeleteBusy trap signifies that an Error Message Delete process is running. hicomErrDeletePabxId indicates the Pbx involved.')
mibBuilder.exportSymbols("SIEMENS-PN-MIB", hicomErrorMsg=hicomErrorMsg, hicomHard=hicomHard, hicomAlConfPersonExtNo=hicomAlConfPersonExtNo, hicomErrAlConfInfoGroup=hicomErrAlConfInfoGroup, hicomCabAddr=hicomCabAddr, TrunkTypes=TrunkTypes, hicomErrTrpMnemonic=hicomErrTrpMnemonic, hicomAlResetInitFailed=hicomAlResetInitFailed, hicomSysCutOver=hicomSysCutOver, hicomCDSUCode=hicomCDSUCode, hicomAlConfDiscovery=hicomAlConfDiscovery, hicomSQLSubagentLastMsgNo=hicomSQLSubagentLastMsgNo, hicomAlMirrorUploadErrorTimDat=hicomAlMirrorUploadErrorTimDat, hicomAlTrpSysMnemonic=hicomAlTrpSysMnemonic, hicomSoftTree=hicomSoftTree, hicomSystemGroup=hicomSystemGroup, hicomErrorAlGroup=hicomErrorAlGroup, hicomAlConfTargetPabxId=hicomAlConfTargetPabxId, hicomDiscovTimDat=hicomDiscovTimDat, hicomCabType=hicomCabType, hicomForSysSubNetId=hicomForSysSubNetId, hicomSoftDiscovPabxId=hicomSoftDiscovPabxId, internalErrorAlarmSubagent=internalErrorAlarmSubagent, hicomAlarmsGroup=hicomAlarmsGroup, hicomAlConfTargetLtu=hicomAlConfTargetLtu, hicomSoftDiscovTable=hicomSoftDiscovTable, hicomSoftDiscovEntry=hicomSoftDiscovEntry, hicomForSysProvNetId=hicomForSysProvNetId, hicomTopoDiscoveryGroup=hicomTopoDiscoveryGroup, hicomDiscInfo=hicomDiscInfo, hicomSQLsessionResultSize=hicomSQLsessionResultSize, hicomSysTelNo=hicomSysTelNo, hicomAlFiltConfRowStat=hicomAlFiltConfRowStat, hicomSQLsessionResultNoLines=hicomSQLsessionResultNoLines, DiscoveryStates=DiscoveryStates, hicomSoftDiscovSucc=hicomSoftDiscovSucc, hicomAlConfTargetTable=hicomAlConfTargetTable, DiscoveryModes=DiscoveryModes, hicomAlFiltConfEntry=hicomAlFiltConfEntry, hicomErrorTable=hicomErrorTable, hicomCDSUVers=hicomCDSUVers, hicomHWDiscovBusy=hicomHWDiscovBusy, hicomHardSubagentLastMsgNo=hicomHardSubagentLastMsgNo, hicomAlTimDat=hicomAlTimDat, hicomPeriphPabxId=hicomPeriphPabxId, hicomBCSMConfBoard=hicomBCSMConfBoard, hicomKntopPNodeNo=hicomKntopPNodeNo, hicomAlarmOffMinor=hicomAlarmOffMinor, hicomSQLsessionStatement=hicomSQLsessionStatement, hicomAlMirrorUploadTable=hicomAlMirrorUploadTable, hicomMIBVersion=hicomMIBVersion, hicomSysSubagentLastMsgNo=hicomSysSubagentLastMsgNo, hicomTrunkName=hicomTrunkName, hicomAlFiltConfSubId=hicomAlFiltConfSubId, hicomCabNumShelves=hicomCabNumShelves, hicomKntopPSatznr=hicomKntopPSatznr, hicomMibGroups=hicomMibGroups, hicomPeriphSize=hicomPeriphSize, hicomTrunkGrpEntry=hicomTrunkGrpEntry, hicomErrorAbsMod=hicomErrorAbsMod, hicomBCSUStatus=hicomBCSUStatus, internalErrorSystemSubagent=internalErrorSystemSubagent, hicomPeriphSSNo=hicomPeriphSSNo, hicomSysServiceDistrict=hicomSysServiceDistrict, hicomSQLinfoGroup=hicomSQLinfoGroup, hicomAlConfDiscovTimDat=hicomAlConfDiscovTimDat, internalWarningSQLSubagent=internalWarningSQLSubagent, hicomTrunkGrp=hicomTrunkGrp, hicomTrunkNo=hicomTrunkNo, hicomForeignSysTable=hicomForeignSysTable, hicomSQLTrapVariables=hicomSQLTrapVariables, hicomSQLsessionGroup=hicomSQLsessionGroup, hicomSoftDiscovTimDat=hicomSoftDiscovTimDat, hicomSQLresultTable=hicomSQLresultTable, hicomSysLang=hicomSysLang, hicomTrunkEntry=hicomTrunkEntry, hicomTopoDiscovery=hicomTopoDiscovery, hicomSQLsessionState=hicomSQLsessionState, hicomHWDiscovMode=hicomHWDiscovMode, deleteHicom=deleteHicom, hicomHWDiscovEntry=hicomHWDiscovEntry, hicomTrunkGrpNNodeNo=hicomTrunkGrpNNodeNo, hicomSysDescription=hicomSysDescription, hicomHWInfo=hicomHWInfo, hicomAlConfTargetLtg=hicomAlConfTargetLtg, hicomAlConfThreshold1=hicomAlConfThreshold1, hicomErrDeleteErr=hicomErrDeleteErr, hicomSQLresultId=hicomSQLresultId, hicomFrameMntLevel=hicomFrameMntLevel, hicomSysMgrFlags=hicomSysMgrFlags, hicomAlConfTime1=hicomAlConfTime1, hicomKntopEntry=hicomKntopEntry, hicomForSysPhysNetId=hicomForSysPhysNetId, hicomAlConfAlGroup=hicomAlConfAlGroup, hicomAlConfTimeH=hicomAlConfTimeH, hicomFrameCabAddr=hicomFrameCabAddr, hicomBCSULTU=hicomBCSULTU, hicomAgentVersion=hicomAgentVersion, hicomBCSUCode=hicomBCSUCode, hicomAlConfTargetSlot=hicomAlConfTargetSlot, hicomHWDiscovPabxId=hicomHWDiscovPabxId, hicomSysInterface=hicomSysInterface, hicomKntopSlot=hicomKntopSlot, hicomErrorEvent=hicomErrorEvent, hicomSoftPatchHWMod=hicomSoftPatchHWMod, hicomCabTable=hicomCabTable, hicomAlConfPersonTable=hicomAlConfPersonTable, hicomBCSMPabxId=hicomBCSMPabxId, hicomSoftSubagentLastMsgNo=hicomSoftSubagentLastMsgNo, hicomCDSMEntry=hicomCDSMEntry, hicomCDSUPartNo=hicomCDSUPartNo, hicomAlConfTargetTrunkNo=hicomAlConfTargetTrunkNo, hicomSQLsessionId=hicomSQLsessionId, hicomTrunkTrunkGrpNo=hicomTrunkTrunkGrpNo, hicomSysPabxId=hicomSysPabxId, AlarmPriorities=AlarmPriorities, hicomSQLsessionTimeout=hicomSQLsessionTimeout, hicomAlarmsChanges=hicomAlarmsChanges, hicomAlConfAlSubId=hicomAlConfAlSubId, hicomSoftDiscoveryGroup=hicomSoftDiscoveryGroup, internalMessageErrAlConfSubagent=internalMessageErrAlConfSubagent, internalMessageDiscSubagent=internalMessageDiscSubagent, hicomSQLsessionWhereClause=hicomSQLsessionWhereClause, hicomSoftAps=hicomSoftAps, hicomSoftApsID=hicomSoftApsID, hicomAlMirrorUploadEntry=hicomAlMirrorUploadEntry, hicomFrameEntry=hicomFrameEntry, hicomTrunkChannelGrp=hicomTrunkChannelGrp, hicomKntopSatznr=hicomKntopSatznr, hicomAlUploadMirrorFailed=hicomAlUploadMirrorFailed, hicomKntopTable=hicomKntopTable, hicomSoftPatchActType=hicomSoftPatchActType, hicomSoftSubagentLastMsgText=hicomSoftSubagentLastMsgText, hicomTopoSubagentResultData=hicomTopoSubagentResultData, hicomSysMnemonic=hicomSysMnemonic, hicomKntopPabxId=hicomKntopPabxId, hicomErrorOrigText=hicomErrorOrigText, hicomTrunkGrpTrunkType=hicomTrunkGrpTrunkType, hicomSQLsessionIdGenerator=hicomSQLsessionIdGenerator, hicomTrunkSNodeNo=hicomTrunkSNodeNo, hicomAlConfDiscovEntry=hicomAlConfDiscovEntry, hicomHWDiscovery=hicomHWDiscovery, hicomSysBatteryCapac=hicomSysBatteryCapac, hicomAlarmTree=hicomAlarmTree, hicomErrDeleteSucc=hicomErrDeleteSucc, hicomAlPabxId=hicomAlPabxId, hicomFramePID3=hicomFramePID3, hicomSysTree=hicomSysTree, hicomSysEndWarranty=hicomSysEndWarranty, hicomBCSMMod=hicomBCSMMod, hicomSQL=hicomSQL, hicomAlConfPersonEntry=hicomAlConfPersonEntry, hicomFramePID2=hicomFramePID2, hicomForeignSysEntry=hicomForeignSysEntry, hicomSysNoName=hicomSysNoName, hicomAlTable=hicomAlTable, hicomCDSMPabxId=hicomCDSMPabxId, hicomSoftPatchGroup=hicomSoftPatchGroup, hicomAlArrivalTimDat=hicomAlArrivalTimDat, hicomSysSubagentLastMsgText=hicomSysSubagentLastMsgText, hicomSysDaUrl=hicomSysDaUrl, hicomAlFiltConfPriority=hicomAlFiltConfPriority, hicomErrorCardRef=hicomErrorCardRef, hicomSysStreetAddress=hicomSysStreetAddress, hicomSoftApsTable=hicomSoftApsTable, hicomBCSUInstBoard=hicomBCSUInstBoard, hicomTrunk=hicomTrunk, hicomAlarms=hicomAlarms, hicomKntopBKanalGrp=hicomKntopBKanalGrp, hicomKntopBunr=hicomKntopBunr, hicomSQLsessionTable=hicomSQLsessionTable, hicomDiscTrapVariables=hicomDiscTrapVariables, hicomTopoDiscovErr=hicomTopoDiscovErr, hicomForSysProvSubNetId=hicomForSysProvSubNetId, hicomFrameLTU=hicomFrameLTU, hicomTopoInfo=hicomTopoInfo, hicomAlConfDiscovSucc=hicomAlConfDiscovSucc, hicomSysEntry=hicomSysEntry, hicomDiscovTable=hicomDiscovTable, hicomSWTrpPabxMnemonic=hicomSWTrpPabxMnemonic, hicomPeriphType=hicomPeriphType, hicomAlMirrorUploadGroup=hicomAlMirrorUploadGroup, hicomTrunkGrpNo=hicomTrunkGrpNo, hicomAlConfDiscovStatus=hicomAlConfDiscovStatus, hicomErrorTimDat=hicomErrorTimDat, hicomBCSUSlotAddr=hicomBCSUSlotAddr, hicomBCSMSlotAddr=hicomBCSMSlotAddr, hicomCDSUFirmware=hicomCDSUFirmware, hicomTopoDiscovBusy=hicomTopoDiscovBusy, hicomMibConformance=hicomMibConformance, hicomAlarmOffDevice=hicomAlarmOffDevice, hicomFrameIpAddr=hicomFrameIpAddr, addHicom=addHicom, hicomSQLtree=hicomSQLtree, hicomKntopPLtu=hicomKntopPLtu, hicomSysDiscTimeOutEvnt=hicomSysDiscTimeOutEvnt, hicomErrorAction=hicomErrorAction, hicomCabEntry=hicomCabEntry, hicomErrorTree=hicomErrorTree, hicomCabPabxId=hicomCabPabxId, hicomSystemTraps=hicomSystemTraps, hicomFramePabxId=hicomFramePabxId, hicomSysMsvRegNum=hicomSysMsvRegNum, hicomErrAlConfSubagentLastMsgNo=hicomErrAlConfSubagentLastMsgNo, hicomPeriphGran=hicomPeriphGran, hicomSysBatteryType=hicomSysBatteryType, hicomTrunkGrpAlarms=hicomTrunkGrpAlarms, hicomDiscovEntry=hicomDiscovEntry, hicomAlConfTree=hicomAlConfTree, hicomErrorSubevent=hicomErrorSubevent, hicomSoftApsPabxId=hicomSoftApsPabxId, hicomTopoDiscovStatus=hicomTopoDiscovStatus, hicomSoftInfoGroup=hicomSoftInfoGroup, hicomCDSMFirmware=hicomCDSMFirmware, hicomSQLSubagentLastMsgText=hicomSQLSubagentLastMsgText, hicomBCSUVers=hicomBCSUVers, hicomSysClnr=hicomSysClnr, hicomForSysNetId=hicomForSysNetId, hicomCDSUTable=hicomCDSUTable, hicomAlConfDiscovTable=hicomAlConfDiscovTable, hicomNumHicoms=hicomNumHicoms, hicomAlReset=hicomAlReset, hicomKntopPNodeIndex=hicomKntopPNodeIndex, hicomHWDiscoveryGroup=hicomHWDiscoveryGroup, internalWarningSWSubagent=internalWarningSWSubagent, hicomErrorGroup=hicomErrorGroup, hicomTrunkGrpName=hicomTrunkGrpName, internalMessageSWSubagent=internalMessageSWSubagent, hicomSQLresultEntry=hicomSQLresultEntry, hicomTrunkGrpPabxId=hicomTrunkGrpPabxId, hicomHWTraps=hicomHWTraps, hicomDiscSubagentLastMsgNo=hicomDiscSubagentLastMsgNo, hicomSoftDiscovMode=hicomSoftDiscovMode, hicomSQLresultGroup=hicomSQLresultGroup, hicomAlConfTraps=hicomAlConfTraps, internalWarningDiscSubagent=internalWarningDiscSubagent, hicomBCSUFirmware=hicomBCSUFirmware, hicomSysCustomerContact=hicomSysCustomerContact, internalMessageHWSubagent=internalMessageHWSubagent, hicomKntop=hicomKntop, hicomSysSwLic=hicomSysSwLic, internalErrorTopoSubagent=internalErrorTopoSubagent, hicomSysDiscAgedData=hicomSysDiscAgedData, hicomHWTrpPabxMnemonic=hicomHWTrpPabxMnemonic, hicomAlConfChanges=hicomAlConfChanges, hicomCDSMSlotAddr=hicomCDSMSlotAddr, hicomHWDiscovErrTimDat=hicomHWDiscovErrTimDat, hicomAlFiltConfPabxId=hicomAlFiltConfPabxId, hicomErrorPabxId=hicomErrorPabxId, hicomPeriphTable=hicomPeriphTable, hicomSysProduct=hicomSysProduct, hicomTrunkStatOp=hicomTrunkStatOp, hicomPeriphContrID=hicomPeriphContrID, hicomSoftResultData=hicomSoftResultData)
mibBuilder.exportSymbols("SIEMENS-PN-MIB", hicomCabPartNo=hicomCabPartNo, hicomSysLocation=hicomSysLocation, hicomSysCustName=hicomSysCustName, hicomAlMirrorUploadStartTimDat=hicomAlMirrorUploadStartTimDat, hicomErrorTrapVariables=hicomErrorTrapVariables, hicomSoftPatchNo=hicomSoftPatchNo, hicomErrAlConfInfo=hicomErrAlConfInfo, internalErrorDiscSubagent=internalErrorDiscSubagent, hicomSysIpAddress=hicomSysIpAddress, hicomCDSMVers=hicomCDSMVers, hicomAlConfDiscovPabxId=hicomAlConfDiscovPabxId, hicomSysTimeOfLastFm=hicomSysTimeOfLastFm, hicomSysMgrSubNetId=hicomSysMgrSubNetId, hicomAlAbsMod=hicomAlAbsMod, hicomAlConfTime2=hicomAlConfTime2, hicomSQLsessionFinished=hicomSQLsessionFinished, hicomAlConfDiscovErrTimDat=hicomAlConfDiscovErrTimDat, hicomAlMirrorUploadPabxId=hicomAlMirrorUploadPabxId, hicomAlConfBase=hicomAlConfBase, hicomHardTree=hicomHardTree, hicomCDSUCabAddr=hicomCDSUCabAddr, hicomTrunkLtg=hicomTrunkLtg, hicomSysAgentFlags=hicomSysAgentFlags, hicomSQLresultBlockNo=hicomSQLresultBlockNo, hicomBCSMCode=hicomBCSMCode, hicomDiscovTree=hicomDiscovTree, hicomTopoDiscovTimDat=hicomTopoDiscovTimDat, hicomSoftDiscovStatus=hicomSoftDiscovStatus, hicomCDSMMntLevel=hicomCDSMMntLevel, internalWarningErrAlConfSubagent=internalWarningErrAlConfSubagent, internalWarningTopoSubagent=internalWarningTopoSubagent, hicomSysApsPa=hicomSysApsPa, hicomTrunkGrpVNodeNo=hicomTrunkGrpVNodeNo, hicomSWTraps=hicomSWTraps, hicomHWDiscovPabxMnemonic=hicomHWDiscovPabxMnemonic, hicomSysEstabl=hicomSysEstabl, hicomFramePartNo=hicomFramePartNo, hicomCDSMCode=hicomCDSMCode, hicomHWTrapVariables=hicomHWTrapVariables, hicomSystemChanges=hicomSystemChanges, hicomHardSubagentResultData=hicomHardSubagentResultData, hicomSWTrapVariables=hicomSWTrapVariables, hicomTrunkGrpGroup=hicomTrunkGrpGroup, hicomAlPriority=hicomAlPriority, hicomCDSUEntry=hicomCDSUEntry, hicomBCSUConfBoard=hicomBCSUConfBoard, hicomDiscovPabxMnemonic=hicomDiscovPabxMnemonic, hicomPeripherals=hicomPeripherals, hicomKntopLtg=hicomKntopLtg, hicomAlTimOldDat=hicomAlTimOldDat, hicomBCSMFirmware=hicomBCSMFirmware, hicomBoardsGroup=hicomBoardsGroup, internalErrorSWSubagent=internalErrorSWSubagent, internalWarningHWSubagent=internalWarningHWSubagent, hicomForSysNodeNo=hicomForSysNodeNo, internalMessageTopoSubagent=internalMessageTopoSubagent, hicomAlConfPersonAlGroup=hicomAlConfPersonAlGroup, hicomAlStatus=hicomAlStatus, hicomSysTable=hicomSysTable, hicomSysHcEquipNr1=hicomSysHcEquipNr1, hicomTrunkPabxId=hicomTrunkPabxId, hicomAlConfDiscovMode=hicomAlConfDiscovMode, pn=pn, hicomHWDiscovStatus=hicomHWDiscovStatus, hicomSysHcmAmolang=hicomSysHcmAmolang, hicomSoftPatchTable=hicomSoftPatchTable, hicomAlFilter=hicomAlFilter, hicomBCSMVers=hicomBCSMVers, hicomSysHSystemRelease=hicomSysHSystemRelease, hicomTopoDiscovTable=hicomTopoDiscovTable, hicomPeriphEntry=hicomPeriphEntry, hicomAlConfPabxId=hicomAlConfPabxId, hicomCDSUSlotAddr=hicomCDSUSlotAddr, hicomDiscovStatus=hicomDiscovStatus, hicomTopoDiscovPabxMnemonic=hicomTopoDiscovPabxMnemonic, hicomAlConfTargetAlGroup=hicomAlConfTargetAlGroup, hicomHWTrpPabxId=hicomHWTrpPabxId, hicomAlConfTrapVariables=hicomAlConfTrapVariables, internalWarningAlarmSubagent=internalWarningAlarmSubagent, hicomAlConfEntry=hicomAlConfEntry, hicomFrameTable=hicomFrameTable, hicomSoft=hicomSoft, internalMessageSystemSubagent=internalMessageSystemSubagent, hicomTopoDiscovMode=hicomTopoDiscovMode, hicomErrAlConfSubagentLastMsgText=hicomErrAlConfSubagentLastMsgText, hicomBCSMEntry=hicomBCSMEntry, hicomSysCbCode=hicomSysCbCode, hicomDiscovMode=hicomDiscovMode, hicomTrunkSlot=hicomTrunkSlot, hicomSystemTrapVariables=hicomSystemTrapVariables, hicomSoftPatchEntry=hicomSoftPatchEntry, hicomAlarmSubagentLastMsgText=hicomAlarmSubagentLastMsgText, hicomMib=hicomMib, hicomBCSMInstBoard=hicomBCSMInstBoard, hicomBCSMStatus=hicomBCSMStatus, hicomDiscSubagentLastMsgText=hicomDiscSubagentLastMsgText, hicomBCSUTable=hicomBCSUTable, hicomAlarmOffMajor=hicomAlarmOffMajor, hicomErrAlConfResultData=hicomErrAlConfResultData, hicomEDTrpPabxId=hicomEDTrpPabxId, hicomAlConfPersonAlSubId=hicomAlConfPersonAlSubId, hicomCDSMCabAddr=hicomCDSMCabAddr, hicomSQLinfo=hicomSQLinfo, hicomSysTimeStamp=hicomSysTimeStamp, hicomKntopPBKanalGrp=hicomKntopPBKanalGrp, hicomSysSystemRoomTel=hicomSysSystemRoomTel, hicomAlConfName=hicomAlConfName, internalWarningSystemSubagent=internalWarningSystemSubagent, hicomTopoTrapVariables=hicomTopoTrapVariables, hicomAlConfDiscovErr=hicomAlConfDiscovErr, hicomTrapVariables=hicomTrapVariables, hicomTopo=hicomTopo, hicomSysMgrPhysNetId=hicomSysMgrPhysNetId, hicomSysCustNoid=hicomSysCustNoid, hicomErrorPriority=hicomErrorPriority, hicomSoftApsPartNo=hicomSoftApsPartNo, hicomTrunkAlSubId=hicomTrunkAlSubId, hicomForSysName=hicomForSysName, hicomAlarmOnMajor=hicomAlarmOnMajor, hicomTopoTraps=hicomTopoTraps, hicomAlConfDiscovBusy=hicomAlConfDiscovBusy, hicomSQLresultData=hicomSQLresultData, hicomDiscovPabxId=hicomDiscovPabxId, hicomCDSUMntLevel=hicomCDSUMntLevel, hicomErrDeleteBusy=hicomErrDeleteBusy, hicomForSysRowStat=hicomForSysRowStat, hicomTopoDiscovEntry=hicomTopoDiscovEntry, hicomAlConfDiscovPabxMnemonic=hicomAlConfDiscovPabxMnemonic, hicomTopoChanges=hicomTopoChanges, hicomTrunkType=hicomTrunkType, hicomDiscov=hicomDiscov, hicomTopoDiscovPabxId=hicomTopoDiscovPabxId, hicomSoftDiscovery=hicomSoftDiscovery, hicomTopoDiscovErrTimDat=hicomTopoDiscovErrTimDat, hicomSysRemark=hicomSysRemark, hicomCabinets=hicomCabinets, hicomErrorEntry=hicomErrorEntry, hicomErrors=hicomErrors, hicomControl=hicomControl, hicomBCSUEntry=hicomBCSUEntry, hicomTrunkGrpMaxNo=hicomTrunkGrpMaxNo, internalErrorSQLSubagent=internalErrorSQLSubagent, hicomBoards=hicomBoards, hicomAlarmOnMinor=hicomAlarmOnMinor, hicomKntopPSlot=hicomKntopPSlot, hicomTrunkGroup=hicomTrunkGroup, hicomSoftApsEntry=hicomSoftApsEntry, hicomSysMsvProgNum=hicomSysMsvProgNum, hicomSysPabxNo=hicomSysPabxNo, hicomSoftGroup=hicomSoftGroup, hicomSysRemarkCd=hicomSysRemarkCd, hicomAlConfDiscoveryGroup=hicomAlConfDiscoveryGroup, hicomTopoTrpPabxMnemonic=hicomTopoTrpPabxMnemonic, hicomAlFiltConfTable=hicomAlFiltConfTable, hicomErrorMsgId=hicomErrorMsgId, hicomErrorBoardVersion=hicomErrorBoardVersion, hicomTopoInfoGroup=hicomTopoInfoGroup, hicomControlGroup=hicomControlGroup, internalErrorHWSubagent=internalErrorHWSubagent, hicomSoftDiscovErr=hicomSoftDiscovErr, hicomAlTrpSysPabxId=hicomAlTrpSysPabxId, hicomErrorAlSubId=hicomErrorAlSubId, hicomKntopGroup=hicomKntopGroup, hicomHardSubagentLastMsgText=hicomHardSubagentLastMsgText, hicomTrunkChannels=hicomTrunkChannels, hicomSysConNo=hicomSysConNo, hicomAlFiltConfGroup=hicomAlFiltConfGroup, hicomSystem=hicomSystem, hicomSysHicomSwVersion=hicomSysHicomSwVersion, hicomHWDiscovErr=hicomHWDiscovErr, hicomCabinetsGroup=hicomCabinetsGroup, hicomSoftInfo=hicomSoftInfo, hicomTrunkGrpTable=hicomTrunkGrpTable, siemensUnits=siemensUnits, hicomFramePID1=hicomFramePID1, sni=sni, hicomSysSysType=hicomSysSysType, hicomAlConfTargetAlSubId=hicomAlConfTargetAlSubId, hicomBCSMTable=hicomBCSMTable, hicomSysPosNo=hicomSysPosNo, hicomAlarmOnDevice=hicomAlarmOnDevice, hicomAlFiltConfSwitch=hicomAlFiltConfSwitch, hicomSysLineType=hicomSysLineType, hicomTrunkDevice=hicomTrunkDevice, hicomEDTrpPabxMnemonic=hicomEDTrpPabxMnemonic, hicomErrorSerialNo=hicomErrorSerialNo, hicomBCSUPabxId=hicomBCSUPabxId, hicomDiscInfoGroup=hicomDiscInfoGroup, hicomTopoDiscovSucc=hicomTopoDiscovSucc, hicomFrameType=hicomFrameType, hicomTopoSubagentLastMsgNo=hicomTopoSubagentLastMsgNo, hicomSysHcmCorrState=hicomSysHcmCorrState, hicomAlMirrorUploadMnemonic=hicomAlMirrorUploadMnemonic, hicomSysVersion=hicomSysVersion, hicomAlMirrorUploadState=hicomAlMirrorUploadState, hicomSysNodeNo=hicomSysNodeNo, hicomPeriperalsGroup=hicomPeriperalsGroup, hicomCDSMTable=hicomCDSMTable, hicomTrunkGrpDevice=hicomTrunkGrpDevice, hicomTrunkLtu=hicomTrunkLtu, hicomSysRemarkCon=hicomSysRemarkCon, internalMessageAlarmSubagent=internalMessageAlarmSubagent, hicomAlConfTargetEntry=hicomAlConfTargetEntry, hicomAlarmTrapVariables=hicomAlarmTrapVariables, hicomAlConfigGroup=hicomAlConfigGroup, hicomErrorFwType=hicomErrorFwType, hicomDiscTraps=hicomDiscTraps, hicomHWChanges=hicomHWChanges, hicomKntopLtu=hicomKntopLtu, hicomSQLsessionEntry=hicomSQLsessionEntry, hicomSysNoType=hicomSysNoType, hicomSoftChanges=hicomSoftChanges, hicomErrorTraps=hicomErrorTraps, hicomSysMgrNetId=hicomSysMgrNetId, hicomTrunkTable=hicomTrunkTable, hicomAlName=hicomAlName, hicomErrTrpPabxId=hicomErrTrpPabxId, hicomCDSMPartNo=hicomCDSMPartNo, hicomProxyName=hicomProxyName, hicomHWDiscovSucc=hicomHWDiscovSucc, hicomSoftDiscovBusy=hicomSoftDiscovBusy, hicomCntrlTree=hicomCntrlTree, hicomDiscovGroup=hicomDiscovGroup, hicomCDSUPabxId=hicomCDSUPabxId, hicomSWTrpPabxId=hicomSWTrpPabxId, hicomAlEntry=hicomAlEntry, hicomAlConfPersonPabxId=hicomAlConfPersonPabxId, hicomAlConfig=hicomAlConfig, hicomHWInfoGroup=hicomHWInfoGroup, AlarmFilterStates=AlarmFilterStates, hicomAlConf=hicomAlConf, hicomSoftDiscovPabxMnemonic=hicomSoftDiscovPabxMnemonic, hicomBCSULTG=hicomBCSULTG, hicomTrapGroup=hicomTrapGroup, hicomSQLTraps=hicomSQLTraps, changeConfig=changeConfig, hicomTraps=hicomTraps, hicomSoftDiscovErrTimDat=hicomSoftDiscovErrTimDat, internalErrorErrAlConfSubagent=internalErrorErrAlConfSubagent, hicomSysDiscComType=hicomSysDiscComType, hicomSysCustomerSpecific=hicomSysCustomerSpecific, hicomHWDiscovTable=hicomHWDiscovTable, hicomSysRemarkCom=hicomSysRemarkCom, hicomSysCustServer=hicomSysCustServer, hicomAlSubId=hicomAlSubId, hicomSysHcEquipNr2=hicomSysHcEquipNr2, hicomSysCustomerContract=hicomSysCustomerContract, hicomSoftPatchPabxId=hicomSoftPatchPabxId, hicomAlConfThreshold2=hicomAlConfThreshold2, hicomAlarmTraps=hicomAlarmTraps, hicomAlConfTable=hicomAlConfTable, hicomKntopPLtg=hicomKntopPLtg, hicomTopoSubagentLastMsgText=hicomTopoSubagentLastMsgText, hicomDiscovErrTimDat=hicomDiscovErrTimDat)
mibBuilder.exportSymbols("SIEMENS-PN-MIB", hicomPeriphModule=hicomPeriphModule, hicomTopoTree=hicomTopoTree, hicomHWDiscovTimDat=hicomHWDiscovTimDat, hicomTopoTrpPabxId=hicomTopoTrpPabxId, internalMessageSQLSubagent=internalMessageSQLSubagent, PYSNMP_MODULE_ID=hicomMib, hicomAlarmSubagentLastMsgNo=hicomAlarmSubagentLastMsgNo, hicomAlGroup=hicomAlGroup)
