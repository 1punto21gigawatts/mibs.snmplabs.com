#
# PySNMP MIB module DLMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, NotificationType, Unsigned32, Counter32, ObjectIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Bits, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "NotificationType", "Unsigned32", "Counter32", "ObjectIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Bits", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
swDlmsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 101))
if mibBuilder.loadTexts: swDlmsMIB.setLastUpdated('201108100000Z')
if mibBuilder.loadTexts: swDlmsMIB.setOrganization('D-Link Corporation')
if mibBuilder.loadTexts: swDlmsMIB.setContactInfo(' D-Link Corporation Postal: No. 289, Sinhu 3rd Rd., Neihu District, Taipei City 114, Taiwan, R.O.C Tel : +886-2-66000123 E-mail: tsd@dlink.com.tw ')
if mibBuilder.loadTexts: swDlmsMIB.setDescription('The D-Link License Management System module')
swDlmsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 101, 0))
swDlmsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 101, 1))
swDlmsGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 1))
swDlmsLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2))
swDlmsStackLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3))
swDlmsInstallAc = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDlmsInstallAc.setStatus('current')
if mibBuilder.loadTexts: swDlmsInstallAc.setDescription('This object is used to install an activation code. swDlmsInstallStackUnitId, to be used to specify the unit ID when performing an AC installation.')
swDlmsInstallStackUnitId = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDlmsInstallStackUnitId.setStatus('current')
if mibBuilder.loadTexts: swDlmsInstallStackUnitId.setDescription('Specifies which unit of the switch stack the activation code will be installed. If the ID equals zero, it means the current device.')
swDlmsLicenseModelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 1), )
if mibBuilder.loadTexts: swDlmsLicenseModelTable.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseModelTable.setDescription('This table indicates license model. The table is for non-stackable device.')
swDlmsLicenseModelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 1, 1), ).setIndexNames((0, "DLMS-MIB", "swDlmsLicenseModelName"))
if mibBuilder.loadTexts: swDlmsLicenseModelEntry.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseModelEntry.setDescription('Information about a license model.')
swDlmsLicenseModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsLicenseModelName.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseModelName.setDescription('This object indicates the license model name.')
swDlmsLicenseModelRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsLicenseModelRemaining.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseModelRemaining.setDescription('This object indicates the license remaining time.')
swDlmsLicenseAcTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 2), )
if mibBuilder.loadTexts: swDlmsLicenseAcTable.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseAcTable.setDescription('This table lists activation codes. The table is for non-stackable device.')
swDlmsLicenseAcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 2, 1), ).setIndexNames((0, "DLMS-MIB", "swDlmsLicenseModelName"), (0, "DLMS-MIB", "swDlmsLicenseAc"))
if mibBuilder.loadTexts: swDlmsLicenseAcEntry.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseAcEntry.setDescription('A list of information indicates a activation code.')
swDlmsLicenseAc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsLicenseAc.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseAc.setDescription('This object indicates the activation code.')
swDlmsLicenseAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsLicenseAcStatus.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseAcStatus.setDescription('This object indicates the AC status.')
swDlmsStackLicenseModelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 1), )
if mibBuilder.loadTexts: swDlmsStackLicenseModelTable.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseModelTable.setDescription('This table indicates information about license models of devices stacked with the current device. The table is for stackable device.')
swDlmsStackLicenseModelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 1, 1), ).setIndexNames((0, "DLMS-MIB", "swDlmsStackLicenseModelUnitId"), (0, "DLMS-MIB", "swDlmsStackLicenseModelName"))
if mibBuilder.loadTexts: swDlmsStackLicenseModelEntry.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseModelEntry.setDescription('A list of information about each license model of devices stacked with this device.')
swDlmsStackLicenseModelUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsStackLicenseModelUnitId.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseModelUnitId.setDescription('Specifies which unit of the switch stack. If the ID equals zero, it means the current device.')
swDlmsStackLicenseModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsStackLicenseModelName.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseModelName.setDescription('This object indicates the license model name.')
swDlmsStackLicenseModelRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsStackLicenseModelRemaining.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseModelRemaining.setDescription('This object indicates the license remaining time.')
swDlmsStackLicenseAcTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 2), )
if mibBuilder.loadTexts: swDlmsStackLicenseAcTable.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseAcTable.setDescription('This table indicates information about activation codes of devices stacked with the current device. The table is for stackable device.')
swDlmsStackLicenseAcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 2, 1), ).setIndexNames((0, "DLMS-MIB", "swDlmsStackLicenseModelUnitId"), (0, "DLMS-MIB", "swDlmsStackLicenseModelName"), (0, "DLMS-MIB", "swDlmsStackLicenseAc"))
if mibBuilder.loadTexts: swDlmsStackLicenseAcEntry.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseAcEntry.setDescription('A list of information about each activation code of devices stacked with this device.')
swDlmsStackLicenseAc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsStackLicenseAc.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseAc.setDescription('This object indicates the activation code.')
swDlmsStackLicenseAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 101, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlmsStackLicenseAcStatus.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseAcStatus.setDescription('This object indicates the AC status.')
swDlmsIllegalAc = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 1)).setObjects(("DLMS-MIB", "swDlmsInstallAc"))
if mibBuilder.loadTexts: swDlmsIllegalAc.setStatus('current')
if mibBuilder.loadTexts: swDlmsIllegalAc.setDescription('Generated when the user inputs an illegal activation code.')
swDlmsLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 2)).setObjects(("DLMS-MIB", "swDlmsLicenseModelName"), ("DLMS-MIB", "swDlmsLicenseAc"))
if mibBuilder.loadTexts: swDlmsLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseExpired.setDescription('The notification is sent when a license of non-stackable device is expired.')
swDlmsLicenseInstallationSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 3)).setObjects(("DLMS-MIB", "swDlmsLicenseModelName"), ("DLMS-MIB", "swDlmsInstallAc"))
if mibBuilder.loadTexts: swDlmsLicenseInstallationSuccess.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseInstallationSuccess.setDescription('The notification is sent when a license of non-stackable device was installed successfully.')
swDlmsLicenseExpiresIn30Days = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 4)).setObjects(("DLMS-MIB", "swDlmsLicenseModelName"), ("DLMS-MIB", "swDlmsInstallAc"))
if mibBuilder.loadTexts: swDlmsLicenseExpiresIn30Days.setStatus('current')
if mibBuilder.loadTexts: swDlmsLicenseExpiresIn30Days.setDescription('When a license of non-stackable device is going to expire, the notification is sent before 30 days.')
swDlmsStackLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 21)).setObjects(("DLMS-MIB", "swDlmsStackLicenseModelUnitId"), ("DLMS-MIB", "swDlmsStackLicenseModelName"), ("DLMS-MIB", "swDlmsStackLicenseAc"))
if mibBuilder.loadTexts: swDlmsStackLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseExpired.setDescription('The notification is sent when a license of devices stacked is expired.')
swDlmsStackLicenseInstallationSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 22)).setObjects(("DLMS-MIB", "swDlmsStackLicenseModelUnitId"), ("DLMS-MIB", "swDlmsStackLicenseModelName"), ("DLMS-MIB", "swDlmsInstallAc"))
if mibBuilder.loadTexts: swDlmsStackLicenseInstallationSuccess.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseInstallationSuccess.setDescription('The notification is sent when a license of devices stacked was installed successfully.')
swDlmsStackLicenseExpiresIn30Days = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 101, 0, 23)).setObjects(("DLMS-MIB", "swDlmsStackLicenseModelUnitId"), ("DLMS-MIB", "swDlmsStackLicenseModelName"), ("DLMS-MIB", "swDlmsInstallAc"))
if mibBuilder.loadTexts: swDlmsStackLicenseExpiresIn30Days.setStatus('current')
if mibBuilder.loadTexts: swDlmsStackLicenseExpiresIn30Days.setDescription('When a license of devices stacked is going to expire, the notification is sent before 30 days.')
mibBuilder.exportSymbols("DLMS-MIB", swDlmsStackLicenseAc=swDlmsStackLicenseAc, swDlmsStackLicenseInstallationSuccess=swDlmsStackLicenseInstallationSuccess, swDlmsGeneralGroup=swDlmsGeneralGroup, swDlmsLicenseExpired=swDlmsLicenseExpired, swDlmsInstallStackUnitId=swDlmsInstallStackUnitId, swDlmsStackLicenseModelEntry=swDlmsStackLicenseModelEntry, swDlmsStackLicenseModelUnitId=swDlmsStackLicenseModelUnitId, swDlmsObjects=swDlmsObjects, swDlmsLicenseAcEntry=swDlmsLicenseAcEntry, swDlmsStackLicenseExpired=swDlmsStackLicenseExpired, swDlmsStackLicenseModelRemaining=swDlmsStackLicenseModelRemaining, swDlmsStackLicenseAcEntry=swDlmsStackLicenseAcEntry, swDlmsLicenseAc=swDlmsLicenseAc, swDlmsMIB=swDlmsMIB, swDlmsStackLicenseAcTable=swDlmsStackLicenseAcTable, swDlmsLicenseInstallationSuccess=swDlmsLicenseInstallationSuccess, swDlmsStackLicenseExpiresIn30Days=swDlmsStackLicenseExpiresIn30Days, swDlmsNotifications=swDlmsNotifications, swDlmsLicense=swDlmsLicense, swDlmsLicenseModelTable=swDlmsLicenseModelTable, swDlmsStackLicenseAcStatus=swDlmsStackLicenseAcStatus, swDlmsLicenseModelName=swDlmsLicenseModelName, swDlmsLicenseAcTable=swDlmsLicenseAcTable, swDlmsLicenseAcStatus=swDlmsLicenseAcStatus, swDlmsInstallAc=swDlmsInstallAc, swDlmsStackLicenseModelTable=swDlmsStackLicenseModelTable, swDlmsStackLicense=swDlmsStackLicense, PYSNMP_MODULE_ID=swDlmsMIB, swDlmsLicenseExpiresIn30Days=swDlmsLicenseExpiresIn30Days, swDlmsLicenseModelEntry=swDlmsLicenseModelEntry, swDlmsLicenseModelRemaining=swDlmsLicenseModelRemaining, swDlmsIllegalAc=swDlmsIllegalAc, swDlmsStackLicenseModelName=swDlmsStackLicenseModelName)
