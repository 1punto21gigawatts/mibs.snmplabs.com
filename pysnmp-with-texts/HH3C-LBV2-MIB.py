#
# PySNMP MIB module HH3C-LBV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LBV2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, ObjectIdentity, TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Unsigned32, Integer32, Counter64, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Unsigned32", "Integer32", "Counter64", "iso", "Counter32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hh3cLBv2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 148))
hh3cLBv2.setRevisions(('2013-11-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cLBv2.setRevisionsDescriptions(('Initial revision of this MIB module.',))
if mibBuilder.loadTexts: hh3cLBv2.setLastUpdated('201311010000Z')
if mibBuilder.loadTexts: hh3cLBv2.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cLBv2.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cLBv2.setDescription('The private MIB file includes the LB information of the device.')
hh3cLBv2GlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 1))
hh3cLBv2TrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 148, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLBv2TrapEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2TrapEnable.setDescription("Indicates whether the module of LB will generate traps for events defined in this MIB. 'enabled' results in SNMP traps; 'disabled', no traps are sent.")
hh3cLBv2ActionTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2))
hh3cLBv2ActionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1), )
if mibBuilder.loadTexts: hh3cLBv2ActionTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionTable.setDescription('Action table for LB.')
hh3cLBv2ActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2ActionName"))
if mibBuilder.loadTexts: hh3cLBv2ActionEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionEntry.setDescription('An entry contains the information of the action.')
hh3cLBv2ActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2ActionName.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionName.setDescription('Name of the action.')
hh3cLBv2ActionDefaultSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2ActionDefaultSF.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionDefaultSF.setDescription('Default server farm quoted by the action. A zero length string indicates no default server farm has been assigned.')
hh3cLBv2ActionBackupSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2ActionBackupSF.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionBackupSF.setDescription('Backup server farm quoted by the action. A zero length string indicates no backup server farm has been assigned.')
hh3cLBv2ActionInUseSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2ActionInUseSF.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionInUseSF.setDescription('Server farm in use quoted by the action.')
hh3cLBv2ActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2ActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionRowStatus.setDescription('Status of this conceptual row. When create an action, default server farm and backup server farm are optional.')
hh3cLBv2VSTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3))
hh3cLBv2VSTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1), )
if mibBuilder.loadTexts: hh3cLBv2VSTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSTable.setDescription('Virtual server table for LB.')
hh3cLBv2VSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2VSName"))
if mibBuilder.loadTexts: hh3cLBv2VSEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSEntry.setDescription('An entry contains the information of the virtual server.')
hh3cLBv2VSName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2VSName.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSName.setDescription('Name of the virtual server.')
hh3cLBv2VSConnectionsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2VSConnectionsLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSConnectionsLimit.setDescription('Max connections limit of the virtual server. 0 means there is no limit.')
hh3cLBv2VSConnectionsRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2VSConnectionsRateLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSConnectionsRateLimit.setDescription('Max connections rate limit of the virtual server. 0 means there is no limit.')
hh3cLBv2VSDefaultSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2VSDefaultSF.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSDefaultSF.setDescription('Default server farm quoted by the virtual server. A zero length string indicates no default server farm has been assigned.')
hh3cLBv2VSBackupSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2VSBackupSF.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSBackupSF.setDescription('Backup server farm quoted by the virtual server. A zero length string indicates no backup server farm has been assigned.')
hh3cLBv2VSInUseSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSInUseSF.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSInUseSF.setDescription('Server farm in use quoted by the virtual server.')
hh3cLBv2VSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2VSRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSRowStatus.setDescription('Status of this conceptual row. When create an virtual server, default server farm and backup server farm are optional.')
hh3cLBv2VSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2), )
if mibBuilder.loadTexts: hh3cLBv2VSStatsTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatsTable.setDescription('Virtual server statistic table for LB.')
hh3cLBv2VSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2VSName"), (0, "HH3C-LBV2-MIB", "hh3cLBv2VSStatChassis"), (0, "HH3C-LBV2-MIB", "hh3cLBv2VSStatSlot"), (0, "HH3C-LBV2-MIB", "hh3cLBv2VSStatCpuid"))
if mibBuilder.loadTexts: hh3cLBv2VSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatsEntry.setDescription('An entry contains the statistic information of the virtual server.')
hh3cLBv2VSStatChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2VSStatChassis.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatChassis.setDescription('ID of the device that holds the card.')
hh3cLBv2VSStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2VSStatSlot.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatSlot.setDescription('Member ID of the card on device.')
hh3cLBv2VSStatCpuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2VSStatCpuid.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatCpuid.setDescription('ID of the CPU on the card.')
hh3cLBv2VSStatTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatTotalConnections.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatTotalConnections.setDescription('Total number of connections that the virtual server received.')
hh3cLBv2VSStatActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatActiveConnections.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatActiveConnections.setDescription('Active connections that the virtual server received.')
hh3cLBv2VSStatClientSidePKTsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSidePKTsIn.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSidePKTsIn.setDescription('Number of packets that the virtual server received from client.')
hh3cLBv2VSStatClientSidePKTsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSidePKTsOut.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSidePKTsOut.setDescription('Number of packets that the virtual server sent to client.')
hh3cLBv2VSStatDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatDroppedPackets.setDescription('Number of packets that the virtual server dropped.')
hh3cLBv2VSStatClientSideBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 9), Counter64()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSideBytesIn.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSideBytesIn.setDescription('Number of bytes that the virtual server received from client.')
hh3cLBv2VSStatClientSideBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 10), Counter64()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSideBytesOut.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatClientSideBytesOut.setDescription('Number of bytes that the virtual server sent to client.')
hh3cLBv2VSStatReceivedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatReceivedRequests.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatReceivedRequests.setDescription('Number of requests that the virtual server received from client.')
hh3cLBv2VSStatSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatSentResponses.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatSentResponses.setDescription('Number of responses that the virtual server sent to client.')
hh3cLBv2VSStatConnectionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 3, 2, 1, 13), Unsigned32()).setUnits('cps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2VSStatConnectionsRate.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSStatConnectionsRate.setDescription('Connections rate of the virtual server.')
hh3cLBv2RSTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4))
hh3cLBv2RSTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 1), )
if mibBuilder.loadTexts: hh3cLBv2RSTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSTable.setDescription('Real server table for LB.')
hh3cLBv2RSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 1, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2RSName"))
if mibBuilder.loadTexts: hh3cLBv2RSEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSEntry.setDescription('An entry contains the information of the real server.')
hh3cLBv2RSName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2RSName.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSName.setDescription('Name of the real server.')
hh3cLBv2RSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2RSRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSRowStatus.setDescription('Status of this conceptual row.')
hh3cLBv2RSConnectionsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2RSConnectionsLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSConnectionsLimit.setDescription('Max connections limit of the real server. 0 means there is no limit.')
hh3cLBv2RSConnectionsRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2RSConnectionsRateLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSConnectionsRateLimit.setDescription('Max connections rate limit of the real server. 0 means there is no limit.')
hh3cLBv2RSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2), )
if mibBuilder.loadTexts: hh3cLBv2RSStatsTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatsTable.setDescription('Real server statistic table for LB.')
hh3cLBv2RSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2RSName"), (0, "HH3C-LBV2-MIB", "hh3cLBv2RSStatChassis"), (0, "HH3C-LBV2-MIB", "hh3cLBv2RSStatSlot"), (0, "HH3C-LBV2-MIB", "hh3cLBv2RSStatCpuid"))
if mibBuilder.loadTexts: hh3cLBv2RSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatsEntry.setDescription('An entry contains the statistic information of the real server.')
hh3cLBv2RSStatChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2RSStatChassis.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatChassis.setDescription('ID of the device that holds the card.')
hh3cLBv2RSStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2RSStatSlot.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatSlot.setDescription('Member ID of the card on device.')
hh3cLBv2RSStatCpuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2RSStatCpuid.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatCpuid.setDescription('ID of the CPU on the card.')
hh3cLBv2RSStatTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatTotalConnections.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatTotalConnections.setDescription('Total number of connections that the real server received.')
hh3cLBv2RSStatActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatActiveConnections.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatActiveConnections.setDescription('Active connections that the real server received.')
hh3cLBv2RSStatServerSidePKTsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSidePKTsIn.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSidePKTsIn.setDescription('Number of packets that the real server received from device.')
hh3cLBv2RSStatServerSidePKTsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSidePKTsOut.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSidePKTsOut.setDescription('Number of packets that the real server sent.')
hh3cLBv2RSStatDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatDroppedPackets.setDescription('Number of packets that the real server dropped.')
hh3cLBv2RSStatServerSideBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 9), Counter64()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSideBytesIn.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSideBytesIn.setDescription('Number of bytes that the real server received from device.')
hh3cLBv2RSStatServerSideBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 10), Counter64()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSideBytesOut.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatServerSideBytesOut.setDescription('Number of bytes that the real server sent.')
hh3cLBv2RSStatReceivedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatReceivedRequests.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatReceivedRequests.setDescription('Number of requests that the real server received from device.')
hh3cLBv2RSStatSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatSentResponses.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatSentResponses.setDescription('Number of responses that the real server sent to device.')
hh3cLBv2RSStatConnectionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 4, 2, 1, 13), Unsigned32()).setUnits('cps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2RSStatConnectionsRate.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSStatConnectionsRate.setDescription('Connections rate of the real server.')
hh3cLBv2SFTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5))
hh3cLBv2SFTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 1), )
if mibBuilder.loadTexts: hh3cLBv2SFTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFTable.setDescription('Server farm table for LB.')
hh3cLBv2SFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 1, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2SFName"))
if mibBuilder.loadTexts: hh3cLBv2SFEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFEntry.setDescription('An entry contains the information of the server farm.')
hh3cLBv2SFName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLBv2SFName.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFName.setDescription('Name of the server farm.')
hh3cLBv2SFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLBv2SFRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFRowStatus.setDescription('Status of this conceptual row.')
hh3cLBv2SFStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2), )
if mibBuilder.loadTexts: hh3cLBv2SFStatsTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatsTable.setDescription('Server farm statistic for LB.')
hh3cLBv2SFStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1), ).setIndexNames((0, "HH3C-LBV2-MIB", "hh3cLBv2SFName"), (0, "HH3C-LBV2-MIB", "hh3cLBv2SFStatChassis"), (0, "HH3C-LBV2-MIB", "hh3cLBv2SFStatSlot"), (0, "HH3C-LBV2-MIB", "hh3cLBv2SFStatCpuid"))
if mibBuilder.loadTexts: hh3cLBv2SFStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatsEntry.setDescription('An entry contains the statistic information of the server farm.')
hh3cLBv2SFStatChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hh3cLBv2SFStatChassis.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatChassis.setDescription('ID of the device that holds the card.')
hh3cLBv2SFStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hh3cLBv2SFStatSlot.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatSlot.setDescription('Member ID of the card on device.')
hh3cLBv2SFStatCpuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hh3cLBv2SFStatCpuid.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatCpuid.setDescription('ID of the CPU on the card.')
hh3cLBv2SFStatTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatTotalConnections.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatTotalConnections.setDescription('Total number of connections that the server farm received.')
hh3cLBv2SFStatActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatActiveConnections.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatActiveConnections.setDescription('Active connections that the server farm received.')
hh3cLBv2SFStatServerSidePKTsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSidePKTsIn.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSidePKTsIn.setDescription('Number of packets that the server farm received from device.')
hh3cLBv2SFStatServerSidePKTsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSidePKTsOut.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSidePKTsOut.setDescription('Number of packets that the server farm sent.')
hh3cLBv2SFStatDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatDroppedPackets.setDescription('Number of packets that the server farm dropped.')
hh3cLBv2SFStatServerSideBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 9), Counter64()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSideBytesIn.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSideBytesIn.setDescription('Number of bytes that the server farm received.')
hh3cLBv2SFStatServerSideBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 10), Counter64()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSideBytesOut.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatServerSideBytesOut.setDescription('Number of bytes that the server farm sent.')
hh3cLBv2SFStatReceivedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatReceivedRequests.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatReceivedRequests.setDescription('Number of requests that all real servers in the server farm received from device.')
hh3cLBv2SFStatSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 148, 5, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLBv2SFStatSentResponses.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFStatSentResponses.setDescription('Number of responses that the server farm sent to device.')
hh3cLBv2Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6))
hh3cLBv2TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0))
hh3cLBv2VSConnOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 1)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"), ("HH3C-LBV2-MIB", "hh3cLBv2VSConnectionsLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatActiveConnections"))
if mibBuilder.loadTexts: hh3cLBv2VSConnOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSConnOverloadTrap.setDescription('A hh3cLBv2VSConnOverloadTrap notification is sent when the number of active connections of the virtual server has reached the upper limit. ')
hh3cLBv2VSConnRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 2)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"), ("HH3C-LBV2-MIB", "hh3cLBv2VSConnectionsLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatActiveConnections"))
if mibBuilder.loadTexts: hh3cLBv2VSConnRecoveryTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSConnRecoveryTrap.setDescription('A hh3cLBv2VSConnRecoveryTrap notification is sent when the number of active connections of the virtual server is less than the upper limit.')
hh3cLBv2VSConnsRateOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 3)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"), ("HH3C-LBV2-MIB", "hh3cLBv2VSConnectionsRateLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatConnectionsRate"))
if mibBuilder.loadTexts: hh3cLBv2VSConnsRateOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSConnsRateOverloadTrap.setDescription('A hh3cLBv2VSConnsRateOverloadTrap notification is sent when the connection rate of the virtual server has reached the upper limit.')
hh3cLBv2VSConnsRateRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 4)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"), ("HH3C-LBV2-MIB", "hh3cLBv2VSConnectionsRateLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2VSStatConnectionsRate"))
if mibBuilder.loadTexts: hh3cLBv2VSConnsRateRecoveryTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSConnsRateRecoveryTrap.setDescription('A hh3cLBv2VSConnsRateRecoveryTrap notification is sent when the connection rate of the virtual server is smaller than the upper limit.')
hh3cLBv2VSActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 5)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"))
if mibBuilder.loadTexts: hh3cLBv2VSActiveTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSActiveTrap.setDescription('A hh3cLBv2VSStatusTrap notification is sent when virtual server status changes to active.')
hh3cLBv2VSInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 6)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"))
if mibBuilder.loadTexts: hh3cLBv2VSInactiveTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSInactiveTrap.setDescription('A hh3cLBv2VSStatusTrap notification is sent when virtual server status changes to inactive.')
hh3cLBv2RSAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 7)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2RSName"))
if mibBuilder.loadTexts: hh3cLBv2RSAvailableTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSAvailableTrap.setDescription('A hh3cLBv2RSStatusTrap notification is sent when the status of the real server changes to available.')
hh3cLBv2RSUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 8)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2RSName"))
if mibBuilder.loadTexts: hh3cLBv2RSUnavailableTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSUnavailableTrap.setDescription('A hh3cLBv2RSStatusTrap notification is sent when the status of the real server changes to unavailable.')
hh3cLBv2SFActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 9)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2SFName"))
if mibBuilder.loadTexts: hh3cLBv2SFActiveTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFActiveTrap.setDescription('A hh3cLBv2SFStatusTrap notification is sent when the status of the server farm changes to active.')
hh3cLBv2SFInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 10)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2SFName"))
if mibBuilder.loadTexts: hh3cLBv2SFInactiveTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2SFInactiveTrap.setDescription('A hh3cLBv2SFStatusTrap notification is sent when the status of the server farm changes to inactive.')
hh3cLBv2ActionInUseSFChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 11)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2ActionName"), ("HH3C-LBV2-MIB", "hh3cLBv2ActionDefaultSF"), ("HH3C-LBV2-MIB", "hh3cLBv2ActionBackupSF"), ("HH3C-LBV2-MIB", "hh3cLBv2ActionInUseSF"))
if mibBuilder.loadTexts: hh3cLBv2ActionInUseSFChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2ActionInUseSFChangeTrap.setDescription('A hh3cLBv2VSInUseSFChangeTrap notification is sent when the server farm which is in use quoted by action changes.')
hh3cLBv2VSInUseSFChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 12)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2VSName"), ("HH3C-LBV2-MIB", "hh3cLBv2VSDefaultSF"), ("HH3C-LBV2-MIB", "hh3cLBv2VSBackupSF"), ("HH3C-LBV2-MIB", "hh3cLBv2VSInUseSF"))
if mibBuilder.loadTexts: hh3cLBv2VSInUseSFChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2VSInUseSFChangeTrap.setDescription('A hh3cLBv2ActionInUseSFChangeTrap notification is sent when the server farm which is in use quoted by virtual server changes.')
hh3cLBv2RSConnOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 13)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2RSName"), ("HH3C-LBV2-MIB", "hh3cLBv2RSConnectionsLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatActiveConnections"))
if mibBuilder.loadTexts: hh3cLBv2RSConnOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSConnOverloadTrap.setDescription('A hh3cLBv2RSConnOverloadTrap notification is sent when the number of active connections of the real server has reached the upper limit. ')
hh3cLBv2RSConnRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 14)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2RSName"), ("HH3C-LBV2-MIB", "hh3cLBv2RSConnectionsLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatActiveConnections"))
if mibBuilder.loadTexts: hh3cLBv2RSConnRecoveryTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSConnRecoveryTrap.setDescription('A hh3cLBv2RSConnRecoveryTrap notification is sent when the number of active connections of the real server is less than the upper limit.')
hh3cLBv2RSConnsRateOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 15)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2RSName"), ("HH3C-LBV2-MIB", "hh3cLBv2RSConnectionsRateLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatConnectionsRate"))
if mibBuilder.loadTexts: hh3cLBv2RSConnsRateOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSConnsRateOverloadTrap.setDescription('A hh3cLBv2RSConnsRateOverloadTrap notification is sent when the connection rate of the real server has reached the upper limit.')
hh3cLBv2RSConnsRateRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 148, 6, 0, 16)).setObjects(("HH3C-LBV2-MIB", "hh3cLBv2RSName"), ("HH3C-LBV2-MIB", "hh3cLBv2RSConnectionsRateLimit"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatChassis"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatSlot"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatCpuid"), ("HH3C-LBV2-MIB", "hh3cLBv2RSStatConnectionsRate"))
if mibBuilder.loadTexts: hh3cLBv2RSConnsRateRecoveryTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cLBv2RSConnsRateRecoveryTrap.setDescription('A hh3cLBv2RSConnsRateRecoveryTrap notification is sent when the connection rate of the real server is smaller than the upper limit.')
mibBuilder.exportSymbols("HH3C-LBV2-MIB", hh3cLBv2VSStatsEntry=hh3cLBv2VSStatsEntry, hh3cLBv2VSStatTotalConnections=hh3cLBv2VSStatTotalConnections, hh3cLBv2RSName=hh3cLBv2RSName, hh3cLBv2RSStatServerSideBytesIn=hh3cLBv2RSStatServerSideBytesIn, hh3cLBv2VSConnsRateRecoveryTrap=hh3cLBv2VSConnsRateRecoveryTrap, hh3cLBv2RSStatSlot=hh3cLBv2RSStatSlot, hh3cLBv2SFRowStatus=hh3cLBv2SFRowStatus, hh3cLBv2VSStatActiveConnections=hh3cLBv2VSStatActiveConnections, hh3cLBv2SFStatCpuid=hh3cLBv2SFStatCpuid, hh3cLBv2ActionInUseSF=hh3cLBv2ActionInUseSF, hh3cLBv2RSUnavailableTrap=hh3cLBv2RSUnavailableTrap, PYSNMP_MODULE_ID=hh3cLBv2, hh3cLBv2VSStatSlot=hh3cLBv2VSStatSlot, hh3cLBv2RSConnsRateRecoveryTrap=hh3cLBv2RSConnsRateRecoveryTrap, hh3cLBv2RSConnRecoveryTrap=hh3cLBv2RSConnRecoveryTrap, hh3cLBv2TrapPrefix=hh3cLBv2TrapPrefix, hh3cLBv2SFStatSentResponses=hh3cLBv2SFStatSentResponses, hh3cLBv2RSAvailableTrap=hh3cLBv2RSAvailableTrap, hh3cLBv2SFStatsTable=hh3cLBv2SFStatsTable, hh3cLBv2VSActiveTrap=hh3cLBv2VSActiveTrap, hh3cLBv2SFStatsEntry=hh3cLBv2SFStatsEntry, hh3cLBv2VSStatDroppedPackets=hh3cLBv2VSStatDroppedPackets, hh3cLBv2VSRowStatus=hh3cLBv2VSRowStatus, hh3cLBv2RSStatChassis=hh3cLBv2RSStatChassis, hh3cLBv2RSStatCpuid=hh3cLBv2RSStatCpuid, hh3cLBv2SFStatServerSidePKTsOut=hh3cLBv2SFStatServerSidePKTsOut, hh3cLBv2VSStatCpuid=hh3cLBv2VSStatCpuid, hh3cLBv2RSStatTotalConnections=hh3cLBv2RSStatTotalConnections, hh3cLBv2VSStatClientSidePKTsOut=hh3cLBv2VSStatClientSidePKTsOut, hh3cLBv2VSStatClientSideBytesIn=hh3cLBv2VSStatClientSideBytesIn, hh3cLBv2VSTable=hh3cLBv2VSTable, hh3cLBv2ActionDefaultSF=hh3cLBv2ActionDefaultSF, hh3cLBv2RSTables=hh3cLBv2RSTables, hh3cLBv2ActionTables=hh3cLBv2ActionTables, hh3cLBv2=hh3cLBv2, hh3cLBv2SFStatServerSideBytesOut=hh3cLBv2SFStatServerSideBytesOut, hh3cLBv2VSConnectionsRateLimit=hh3cLBv2VSConnectionsRateLimit, hh3cLBv2RSStatServerSidePKTsOut=hh3cLBv2RSStatServerSidePKTsOut, hh3cLBv2SFInactiveTrap=hh3cLBv2SFInactiveTrap, hh3cLBv2ActionBackupSF=hh3cLBv2ActionBackupSF, hh3cLBv2SFTables=hh3cLBv2SFTables, hh3cLBv2RSConnectionsRateLimit=hh3cLBv2RSConnectionsRateLimit, hh3cLBv2VSInactiveTrap=hh3cLBv2VSInactiveTrap, hh3cLBv2RSStatDroppedPackets=hh3cLBv2RSStatDroppedPackets, hh3cLBv2RSConnectionsLimit=hh3cLBv2RSConnectionsLimit, hh3cLBv2VSConnRecoveryTrap=hh3cLBv2VSConnRecoveryTrap, hh3cLBv2VSStatClientSidePKTsIn=hh3cLBv2VSStatClientSidePKTsIn, hh3cLBv2ActionRowStatus=hh3cLBv2ActionRowStatus, hh3cLBv2VSEntry=hh3cLBv2VSEntry, hh3cLBv2RSStatsEntry=hh3cLBv2RSStatsEntry, hh3cLBv2VSConnOverloadTrap=hh3cLBv2VSConnOverloadTrap, hh3cLBv2VSConnsRateOverloadTrap=hh3cLBv2VSConnsRateOverloadTrap, hh3cLBv2VSStatSentResponses=hh3cLBv2VSStatSentResponses, hh3cLBv2SFName=hh3cLBv2SFName, hh3cLBv2SFStatServerSideBytesIn=hh3cLBv2SFStatServerSideBytesIn, hh3cLBv2ActionName=hh3cLBv2ActionName, hh3cLBv2SFStatReceivedRequests=hh3cLBv2SFStatReceivedRequests, hh3cLBv2RSStatsTable=hh3cLBv2RSStatsTable, hh3cLBv2VSStatClientSideBytesOut=hh3cLBv2VSStatClientSideBytesOut, hh3cLBv2RSStatSentResponses=hh3cLBv2RSStatSentResponses, hh3cLBv2VSConnectionsLimit=hh3cLBv2VSConnectionsLimit, hh3cLBv2SFStatDroppedPackets=hh3cLBv2SFStatDroppedPackets, hh3cLBv2GlobalObjects=hh3cLBv2GlobalObjects, hh3cLBv2ActionTable=hh3cLBv2ActionTable, hh3cLBv2VSName=hh3cLBv2VSName, hh3cLBv2VSBackupSF=hh3cLBv2VSBackupSF, hh3cLBv2VSTables=hh3cLBv2VSTables, hh3cLBv2TrapEnable=hh3cLBv2TrapEnable, hh3cLBv2RSConnsRateOverloadTrap=hh3cLBv2RSConnsRateOverloadTrap, hh3cLBv2VSDefaultSF=hh3cLBv2VSDefaultSF, hh3cLBv2RSStatConnectionsRate=hh3cLBv2RSStatConnectionsRate, hh3cLBv2RSConnOverloadTrap=hh3cLBv2RSConnOverloadTrap, hh3cLBv2RSTable=hh3cLBv2RSTable, hh3cLBv2SFStatTotalConnections=hh3cLBv2SFStatTotalConnections, hh3cLBv2ActionInUseSFChangeTrap=hh3cLBv2ActionInUseSFChangeTrap, hh3cLBv2VSStatConnectionsRate=hh3cLBv2VSStatConnectionsRate, hh3cLBv2VSStatChassis=hh3cLBv2VSStatChassis, hh3cLBv2RSRowStatus=hh3cLBv2RSRowStatus, hh3cLBv2RSStatActiveConnections=hh3cLBv2RSStatActiveConnections, hh3cLBv2VSInUseSF=hh3cLBv2VSInUseSF, hh3cLBv2SFStatServerSidePKTsIn=hh3cLBv2SFStatServerSidePKTsIn, hh3cLBv2Trap=hh3cLBv2Trap, hh3cLBv2SFActiveTrap=hh3cLBv2SFActiveTrap, hh3cLBv2VSStatReceivedRequests=hh3cLBv2VSStatReceivedRequests, hh3cLBv2SFStatChassis=hh3cLBv2SFStatChassis, hh3cLBv2SFStatSlot=hh3cLBv2SFStatSlot, hh3cLBv2SFStatActiveConnections=hh3cLBv2SFStatActiveConnections, hh3cLBv2RSStatServerSideBytesOut=hh3cLBv2RSStatServerSideBytesOut, hh3cLBv2VSStatsTable=hh3cLBv2VSStatsTable, hh3cLBv2VSInUseSFChangeTrap=hh3cLBv2VSInUseSFChangeTrap, hh3cLBv2RSEntry=hh3cLBv2RSEntry, hh3cLBv2ActionEntry=hh3cLBv2ActionEntry, hh3cLBv2RSStatReceivedRequests=hh3cLBv2RSStatReceivedRequests, hh3cLBv2SFTable=hh3cLBv2SFTable, hh3cLBv2SFEntry=hh3cLBv2SFEntry, hh3cLBv2RSStatServerSidePKTsIn=hh3cLBv2RSStatServerSidePKTsIn)
