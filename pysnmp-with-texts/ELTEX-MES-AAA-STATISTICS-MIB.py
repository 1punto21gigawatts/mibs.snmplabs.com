#
# PySNMP MIB module ELTEX-MES-AAA-STATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-AAA-STATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:00:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
eltMesAAAStatMIB, = mibBuilder.importSymbols("ELTEX-MES-MNG-MIB", "eltMesAAAStatMIB")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Counter32, TimeTicks, NotificationType, MibIdentifier, Bits, ObjectIdentity, IpAddress, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Counter32", "TimeTicks", "NotificationType", "MibIdentifier", "Bits", "ObjectIdentity", "IpAddress", "Unsigned32", "iso")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
eltRadiusAuthServTotalAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServTotalAccessRequests.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServTotalAccessRequests.setDescription('The number of packets received on the authentication port.')
eltRadiusAuthServTotalAccessAccepts = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServTotalAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServTotalAccessAccepts.setDescription('The number of RADIUS Access-Accept packets sent.')
eltRadiusAuthServAccessRejects = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServAccessRejects.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServAccessRejects.setDescription('The number of RADIUS Access-Reject packets sent.')
eltRadiusAuthServAccessChallenges = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets sent.')
eltRadiusAuthServAverageResponseDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServAverageResponseDelay.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServAverageResponseDelay.setDescription('Average response delay(ms) Average time from when the packet was first transmitted to when it received a response. If the response timed out and the packet was sent again, this value includes the timeout. If the packet never received a response, this is not included in the average. ')
eltRadiusAuthServMaximumResponseDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServMaximumResponseDelay.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServMaximumResponseDelay.setDescription('Maximum response delay(ms) Maximum delay observed while gathering average response delay information.')
eltRadiusAuthServTotalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServTotalTimeouts.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServTotalTimeouts.setDescription('Number of times a server did not respond, and the RADIUS server re-sent the packet.')
eltRadiusAuthServTotalMalformedAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServTotalMalformedAccessRequests.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServTotalMalformedAccessRequests.setDescription('The number of malformed RADIUS Access-Request packets received. Bad authenticators and unknown types are not included as malformed Access-Requests.')
eltRadiusAuthServMaximumBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServMaximumBufferSize.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServMaximumBufferSize.setDescription('The maximum buffer size in bytes.')
eltRadiusAuthServTotalPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAuthServTotalPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAuthServTotalPacketsDropped.setDescription('The number of incoming packets silently discarded for some reason other than malformed, bad authenticators or unknown types.')
eltRadiusAccServTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServTotalRequests.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServTotalRequests.setDescription('The number of packets received on the accounting port.')
eltRadiusAccServTotalDupRequests = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServTotalDupRequests.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServTotalDupRequests.setDescription('The number of duplicate RADIUS Accounting-Request packets received.')
eltRadiusAccServTotalResponses = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServTotalResponses.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServTotalResponses.setDescription('The number of RADIUS Accounting-Response packets sent.')
eltRadiusAccServAverageResponseDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServAverageResponseDelay.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServAverageResponseDelay.setDescription('Average response delay(ms) Average time from when the packet was first transmitted to when it received a response. If the response timed out and the packet was sent again, this value includes the timeout. If the packet never received a response, this is not included in the average. ')
eltRadiusAccServMaximumResponseDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServMaximumResponseDelay.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServMaximumResponseDelay.setDescription('Maximum response delay(ms) Maximum delay observed while gathering average response delay information.')
eltRadiusAccServTotalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServTotalTimeouts.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServTotalTimeouts.setDescription('Number of times a server did not respond, and the RADIUS server re-sent the packet.')
eltRadiusAccServTotalMalformedAccessRequests = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServTotalMalformedAccessRequests.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServTotalMalformedAccessRequests.setDescription('The number of malformed RADIUS Accounting-Request packets received. Bad authenticators or unknown types are not included as malformed Access-Requests.')
eltRadiusAccServMaximumBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServMaximumBufferSize.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServMaximumBufferSize.setDescription('The maximum buffer size in bytes.')
eltRadiusAccServTotalPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusAccServTotalPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: eltRadiusAccServTotalPacketsDropped.setDescription('The number of incoming packets silently discarded for a reason other than malformed, bad authenticators, or unknown types.')
eltTacacsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20), )
if mibBuilder.loadTexts: eltTacacsStatsTable.setStatus('current')
if mibBuilder.loadTexts: eltTacacsStatsTable.setDescription('This table contains the statistics for the TACACS+ servers.')
eltTacacsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1), ).setIndexNames((0, "ELTEX-MES-AAA-STATISTICS-MIB", "eltTacacsServerAddress"))
if mibBuilder.loadTexts: eltTacacsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eltTacacsStatsEntry.setDescription('AEntry is TACACS + server, containing its statistics.')
eltTacacsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsServerAddress.setStatus('current')
if mibBuilder.loadTexts: eltTacacsServerAddress.setDescription('The IP address of the TACACS+ server referred to in this table entry.')
eltTacacsSocketOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsSocketOpens.setStatus('current')
if mibBuilder.loadTexts: eltTacacsSocketOpens.setDescription('Number of successful TCP socket connections to the TACACS+ server.')
eltTacacsSocketCloses = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsSocketCloses.setStatus('current')
if mibBuilder.loadTexts: eltTacacsSocketCloses.setDescription('Number of successfully closed TCP socket attempts.')
eltTacacsSocketAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsSocketAborts.setStatus('current')
if mibBuilder.loadTexts: eltTacacsSocketAborts.setDescription('Number of premature TCP socket closures to the TACACS+ server; that is, the peer did not wait for a reply from the server after a the peer sent its request.')
eltTacacsSocketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsSocketErrors.setStatus('current')
if mibBuilder.loadTexts: eltTacacsSocketErrors.setDescription('Any other socket read or write errors, such as incorrect packet format and length.')
eltTacacsSocketTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsSocketTimeouts.setStatus('current')
if mibBuilder.loadTexts: eltTacacsSocketTimeouts.setDescription('Number of times a server did not respond.')
eltTacacsFailesConnAttemps = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsFailesConnAttemps.setStatus('current')
if mibBuilder.loadTexts: eltTacacsFailesConnAttemps.setDescription('Number of failed TCP socket connections to the TACACS+ server.')
eltTacacsTotalPackageSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsTotalPackageSent.setStatus('current')
if mibBuilder.loadTexts: eltTacacsTotalPackageSent.setDescription('Number of packets sent to the TACACS+ server.')
eltTacacsTotalPackageRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 20, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltTacacsTotalPackageRecv.setStatus('current')
if mibBuilder.loadTexts: eltTacacsTotalPackageRecv.setDescription('Number of packets received from the TACACS+ server.')
eltRadiusServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21), )
if mibBuilder.loadTexts: eltRadiusServerStatusTable.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerStatusTable.setDescription('The (conceptual) table listing the RADIUS servers with which the cliient shares a secret.')
eltRadiusServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1), ).setIndexNames((0, "ELTEX-MES-AAA-STATISTICS-MIB", "eltRadiusServerAddressType"), (0, "ELTEX-MES-AAA-STATISTICS-MIB", "eltRadiusServerAddress"), (0, "ELTEX-MES-AAA-STATISTICS-MIB", "eltRadiusServerAuthPortNumber"), (0, "ELTEX-MES-AAA-STATISTICS-MIB", "eltRadiusServerAcctPortNumber"))
if mibBuilder.loadTexts: eltRadiusServerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerStatusEntry.setDescription('An entry (conceptual row) representing a RADIUS server with which the client shares a secret.')
eltRadiusServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltRadiusServerAddressType.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerAddressType.setDescription('The Inet address type of RADIUS server reffered to in this table entry .IPv6Z type is not supported.')
eltRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerAddress.setDescription('The IP address of the RADIUS server referred to in this table entry.')
eltRadiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltRadiusServerAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerAuthPortNumber.setDescription('The UDP port the client is using to send authentication requests to this server.')
eltRadiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltRadiusServerAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerAcctPortNumber.setDescription('The UDP port the client is using to send accounting requests to this server.')
eltRadiusServerAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusServerAuthClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerAuthClientTimeouts.setDescription('The timeouts this RADIUS server to reply.')
eltRadiusServerDeadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusServerDeadStatus.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerDeadStatus.setDescription('The dead status for this RADIUS server.')
eltRadiusServerRemainDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 21, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltRadiusServerRemainDeadTime.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerRemainDeadTime.setDescription('The remain dead time for this RADIUS server.')
eltRadiusServerStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltRadiusServerStatusReset.setStatus('current')
if mibBuilder.loadTexts: eltRadiusServerStatusReset.setDescription('Reset dead status for all RADIUS servers.')
mibBuilder.exportSymbols("ELTEX-MES-AAA-STATISTICS-MIB", eltRadiusServerStatusTable=eltRadiusServerStatusTable, eltRadiusServerRemainDeadTime=eltRadiusServerRemainDeadTime, eltRadiusAuthServTotalPacketsDropped=eltRadiusAuthServTotalPacketsDropped, eltRadiusAccServMaximumBufferSize=eltRadiusAccServMaximumBufferSize, eltRadiusAccServTotalResponses=eltRadiusAccServTotalResponses, eltRadiusAuthServTotalMalformedAccessRequests=eltRadiusAuthServTotalMalformedAccessRequests, eltRadiusServerStatusReset=eltRadiusServerStatusReset, eltRadiusAccServAverageResponseDelay=eltRadiusAccServAverageResponseDelay, eltRadiusAccServMaximumResponseDelay=eltRadiusAccServMaximumResponseDelay, eltTacacsServerAddress=eltTacacsServerAddress, eltRadiusServerStatusEntry=eltRadiusServerStatusEntry, eltRadiusAuthServTotalTimeouts=eltRadiusAuthServTotalTimeouts, eltTacacsSocketCloses=eltTacacsSocketCloses, eltTacacsSocketErrors=eltTacacsSocketErrors, eltTacacsSocketTimeouts=eltTacacsSocketTimeouts, eltRadiusAuthServAccessRejects=eltRadiusAuthServAccessRejects, eltTacacsFailesConnAttemps=eltTacacsFailesConnAttemps, eltRadiusServerAuthClientTimeouts=eltRadiusServerAuthClientTimeouts, eltTacacsSocketAborts=eltTacacsSocketAborts, eltRadiusAccServTotalPacketsDropped=eltRadiusAccServTotalPacketsDropped, eltRadiusAccServTotalTimeouts=eltRadiusAccServTotalTimeouts, eltRadiusAuthServMaximumResponseDelay=eltRadiusAuthServMaximumResponseDelay, eltTacacsTotalPackageRecv=eltTacacsTotalPackageRecv, eltRadiusServerDeadStatus=eltRadiusServerDeadStatus, eltRadiusServerAuthPortNumber=eltRadiusServerAuthPortNumber, eltTacacsSocketOpens=eltTacacsSocketOpens, eltRadiusAccServTotalRequests=eltRadiusAccServTotalRequests, eltRadiusAuthServAccessChallenges=eltRadiusAuthServAccessChallenges, eltRadiusAccServTotalDupRequests=eltRadiusAccServTotalDupRequests, eltRadiusAuthServTotalAccessRequests=eltRadiusAuthServTotalAccessRequests, eltRadiusAuthServMaximumBufferSize=eltRadiusAuthServMaximumBufferSize, eltRadiusServerAcctPortNumber=eltRadiusServerAcctPortNumber, eltRadiusServerAddress=eltRadiusServerAddress, eltRadiusAuthServAverageResponseDelay=eltRadiusAuthServAverageResponseDelay, eltRadiusServerAddressType=eltRadiusServerAddressType, eltRadiusAuthServTotalAccessAccepts=eltRadiusAuthServTotalAccessAccepts, eltTacacsStatsTable=eltTacacsStatsTable, eltTacacsTotalPackageSent=eltTacacsTotalPackageSent, eltRadiusAccServTotalMalformedAccessRequests=eltRadiusAccServTotalMalformedAccessRequests, eltTacacsStatsEntry=eltTacacsStatsEntry)
