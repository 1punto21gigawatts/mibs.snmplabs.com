#
# PySNMP MIB module VINA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VINA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Integer32, NotificationType, transmission, ModuleIdentity, MibIdentifier, IpAddress, TimeTicks, Bits, enterprises, Unsigned32, NotificationType, ObjectIdentity, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "NotificationType", "transmission", "ModuleIdentity", "MibIdentifier", "IpAddress", "TimeTicks", "Bits", "enterprises", "Unsigned32", "NotificationType", "ObjectIdentity", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vina = MibIdentifier((1, 3, 6, 1, 4, 1, 2186))
vinaSys = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1))
operatingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1))
vxworks = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1))
snmpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 2))
vinaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 2))
agentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVersion.setStatus('mandatory')
portVersion = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVersion.setStatus('mandatory')
taskPriority = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskPriority.setStatus('mandatory')
idle = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 3))
currentIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentIdle.setStatus('mandatory')
tenSecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tenSecondIdle.setStatus('mandatory')
sixtySecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sixtySecondIdle.setStatus('mandatory')
userIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIdle.setStatus('mandatory')
userInterval = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInterval.setStatus('mandatory')
calibration = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibration.setStatus('mandatory')
historySize = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historySize.setStatus('mandatory')
historyValid = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyValid.setStatus('mandatory')
vina_system = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 4)).setLabel("vina-system")
reboot = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('mandatory')
rebootVME = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootVME.setStatus('mandatory')
abortReboot = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abortReboot.setStatus('mandatory')
silent = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: silent.setStatus('mandatory')
spuriousInts = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spuriousInts.setStatus('mandatory')
vinaSla = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 5))
vinaSlaConfigVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 5, 1))
vinaSlaNumValidIntervals = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaNumValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaNumValidIntervals.setDescription('The number of currently valid intervals.')
vinaSlaCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2), )
if mibBuilder.loadTexts: vinaSlaCurrentTable.setStatus('mandatory')
vinaSlaCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1), ).setIndexNames((0, "VINA-MIB", "vinaSlaCurrentPvcNumber"))
if mibBuilder.loadTexts: vinaSlaCurrentEntry.setStatus('mandatory')
vinaSlaCurrentPvcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentPvcNumber.setDescription('The number of the PVC which the entry is associated with.')
vinaSlaCurrentEndToEndAveLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentEndToEndAveLatency.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentEndToEndAveLatency.setDescription('The average end to end latency, sampled at once a minute during the current 15 minute interval. This is a running average that changes once a minute. The units are in milliseconds.')
vinaSlaCurrentEndToEndPeakLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentEndToEndPeakLatency.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentEndToEndPeakLatency.setDescription('The peak end to end latency so far during the current 15 minute interval. The units are in milliseconds.')
vinaSlaCurrentDdrAboveCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentDdrAboveCir.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentDdrAboveCir.setDescription('The ratio of number of bytes received to the number of bytes sent above the CIR. This is a percent value with units of 1/100 of a percent.')
vinaSlaCurrentDdrBelowCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentDdrBelowCir.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentDdrBelowCir.setDescription('The ratio of number of bytes received to the number of bytes sent below the CIR. This is a percent value with units of 1/100 of a percent.')
vinaSlaCurrentPvcDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcDowntime.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentPvcDowntime.setDescription('The amount of time in milliseconds during the current 15 minute interval where the PVC was reported down or inactive through LMI.')
vinaSlaCurrentPvcUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcUptime.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentPvcUptime.setDescription('The amount of time in milliseconds during the current 15 minute interval where the PVC was up.')
vinaSlaCurrentPvcNumTimesDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcNumTimesDown.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaCurrentPvcNumTimesDown.setDescription('The number of times during the current 15 minute where the PVC was reported down or inactive.')
vinaSlaIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3), )
if mibBuilder.loadTexts: vinaSlaIntervalTable.setStatus('mandatory')
vinaSlaIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1), ).setIndexNames((0, "VINA-MIB", "vinaSlaIntervalPvcNumber"), (0, "VINA-MIB", "vinaSlaIntervalNumber"))
if mibBuilder.loadTexts: vinaSlaIntervalEntry.setStatus('mandatory')
vinaSlaIntervalPvcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalPvcNumber.setDescription('The number of the PVC which the entry is associated with.')
vinaSlaIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalNumber.setStatus('mandatory')
vinaSlaIntervalEndToEndAveLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalEndToEndAveLatency.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalEndToEndAveLatency.setDescription('The average end to end latency, sampled at once a minute during this 15 minute interval. This is a running average that changes once a minute. The units are in milliseconds.')
vinaSlaIntervalEndToEndPeakLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalEndToEndPeakLatency.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalEndToEndPeakLatency.setDescription('The peak end to end latency during this 15 minute interval. The units are in milliseconds.')
vinaSlaIntervalDdrAboveCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalDdrAboveCir.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalDdrAboveCir.setDescription('The ratio of number of bytes received to the number of bytes sent above the CIR. This is a percent value with units of 1/100 of a percent.')
vinaSlaIntervalDdrBelowCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalDdrBelowCir.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalDdrBelowCir.setDescription('The ratio of number of bytes received to the number of bytes sent below the CIR. This is a percent value with units of 1/100 of a percent.')
vinaSlaIntervalPvcDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcDowntime.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalPvcDowntime.setDescription('The amount of time in milliseconds during this 15 minute interval where the PVC was reported down or inactive through LMI.')
vinaSlaIntervalPvcUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcUptime.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalPvcUptime.setDescription('The amount of time in milliseconds during this 15 minute interval where the PVC was up.')
vinaSlaIntervalPvcNumTimesDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcNumTimesDown.setStatus('mandatory')
if mibBuilder.loadTexts: vinaSlaIntervalPvcNumTimesDown.setDescription('The number of times during this 15 minute interval where the PVC was reported down or inactive.')
vxMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1))
currentMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2))
currentMemorybytes = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemorybytes.setStatus('mandatory')
currentMemoryblocks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemoryblocks.setStatus('mandatory')
currentMemoryavgerage = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemoryavgerage.setStatus('mandatory')
currentMemorymaximum = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemorymaximum.setStatus('mandatory')
freeMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3))
freeMemorybytes = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemorybytes.setStatus('mandatory')
freeMemoryblocks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemoryblocks.setStatus('mandatory')
freeMemoryaverage = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemoryaverage.setStatus('mandatory')
cumulativeMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4))
cumulativebytes = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativebytes.setStatus('mandatory')
cumulativeblocks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeblocks.setStatus('mandatory')
cumulativeaverage = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeaverage.setStatus('mandatory')
vxNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 2))
vxTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 2, 1))
vxTask = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3))
vxNumTasks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxNumTasks.setStatus('mandatory')
vxTaskTable = MibTable((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: vxTaskTable.setStatus('deprecated')
vxTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "VINA-MIB", "taskID"))
if mibBuilder.loadTexts: vxTaskEntry.setStatus('deprecated')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('deprecated')
entryPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryPoint.setStatus('deprecated')
taskID = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskID.setStatus('deprecated')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority.setStatus('deprecated')
status = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: status.setStatus('deprecated')
programCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: programCounter.setStatus('deprecated')
stackPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackPointer.setStatus('deprecated')
errno = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errno.setStatus('deprecated')
delay = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delay.setStatus('deprecated')
vxBootParams = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4))
bootDev = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootDev.setStatus('mandatory')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
targetName = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetName.setStatus('mandatory')
ethernetAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetAddr.setStatus('mandatory')
backplaneAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backplaneAddr.setStatus('mandatory')
hostAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostAddr.setStatus('mandatory')
gatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayAddr.setStatus('mandatory')
bootFile = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFile.setStatus('mandatory')
startupScript = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startupScript.setStatus('mandatory')
userName = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
password = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('mandatory')
other = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: other.setStatus('mandatory')
processorNumber = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processorNumber.setStatus('mandatory')
flags = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flags.setStatus('mandatory')
vxKernel = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5))
vxClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5, 1))
sysClkRate = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClkRate.setStatus('mandatory')
ticks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ticks.setStatus('mandatory')
frame_relay = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32)).setLabel("frame-relay")
class Index(Integer32):
    pass

class DLCI(Integer32):
    pass

frDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 1), )
if mibBuilder.loadTexts: frDlcmiTable.setReference('Draft American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: frDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface for the frame relay service on this interface.')
frDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 1, 1), ).setIndexNames((0, "VINA-MIB", "frDlcmiIfIndex"))
if mibBuilder.loadTexts: frDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiEntry.setDescription('The Parameters for a particular Data Link Con- nection Management Interface.')
frDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiIfIndex.setDescription('The ifIndex value of the corresponding ifEn- try.')
frDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ansiT1-617-B", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiState.setReference('Draft American National Standard T1.617-1991')
if mibBuilder.loadTexts: frDlcmiState.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiState.setDescription('This variable states which Data Link Connec- tion Management scheme is active (and by impli- cation, what DLCI it uses) on the Frame Relay interface.')
frDlcmiAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiAddress.setDescription('This variable states which address format is in use on the Frame Relay interface.')
frDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddressLen.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiAddressLen.setDescription('This variable states which address length in octets. In the case of Q922 format, the length indicates the entire length of the address in- cluding the control portion.')
frDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiPollingInterval.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer T391.')
if mibBuilder.loadTexts: frDlcmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiPollingInterval.setDescription('This is the number of seconds between succes- sive status enquiry messages.')
frDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setReference('Draft American National Standard T1.617-1991, Section D.7 Counter N391.')
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setDescription('Number of status enquiry intervals that pass before issuance of a full status enquiry mes- sage.')
frDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setReference('Draft American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setDescription('This is the maximum number of unanswered Status Enquiries the equipment shall accept be- fore declaring the interface down.')
frDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setReference('Draft American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals over which the error threshold is counted. For example, if within 'MonitoredEvents' number of events the station receives 'ErrorThreshold' number of errors, the interface is marked as down.")
frDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setDescription("The maximum number of Virtual Circuits allowed for this interface. Usually dictated by the Frame Relay network. In response to a SET, if a value less than zero or higher than the agent's maximal capability is configured, the agent should respond bad- Value")
frDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiMulticast.setDescription('This indicates whether the Frame Relay inter- face is using a multicast service.')
frCircuitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 2), )
if mibBuilder.loadTexts: frCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitTable.setDescription('A table containing information about specific Data Link Connection Identifiers and corresponding virtual circuits.')
frCircuitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 2, 1), ).setIndexNames((0, "VINA-MIB", "frCircuitIfIndex"), (0, "VINA-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitEntry.setDescription('The information regarding a single Data Link Connection Identifier.')
frCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
frCircuitDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDlci.setReference('Draft American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: frCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
frCircuitState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitState.setDescription("Indicates whether the particular virtual cir- cuit is operational. In the absence of a Data Link Connection Management Interface, virtual circuit entries (rows) may be created by set- ting virtual circuit state to 'active', or deleted by changing Circuit state to 'invalid'. Whether or not the row actually disappears is left to the implementation, so this object may actually read as 'invalid' for some arbitrary length of time. It is also legal to set the state of a virtual circuit to 'inactive' to temporarily disable a given circuit.")
frCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setDescription('Number of frames received from the network in- dicating forward congestion since the virtual circuit was created.')
frCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setDescription('Number of frames received from the network in- dicating backward congestion since the virtual circuit was created.')
frCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitSentFrames.setDescription('The number of frames sent from this virtual circuit since it was created.')
frCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created.')
frCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedFrames.setDescription('Number of frames received over this virtual circuit since it was created.')
frCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedOctets.setDescription('Number of octets received over this virtual circuit since it was created.')
frCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitCreationTime.setDescription('The value of sysUpTime when the virtual cir- cuit was created, whether by the Data Link Con- nection Management Interface or by a SetRe- quest.')
frCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitLastTimeChange.setDescription('The value of sysUpTime when last there was a change in the virtual circuit state')
frCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitCommittedBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frCircuitCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval.')
frCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitExcessBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frCircuitExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will at- tempt to deliver over the measurement interval. By default, if not configured when creating the entry, the Excess Information Burst Size is set to the value of ifSpeed.')
frCircuitThroughput = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitThroughput.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frCircuitThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitThroughput.setDescription("Throughput is the average number of 'Frame Re- lay Information Field' bits transferred per second across a user network interface in one direction, measured over the measurement inter- val. If the configured committed burst rate and throughput are both non-zero, the measurement interval T=frCircuitCommittedBurst/frCircuitThroughput. If the configured committed burst rate and throughput are both zero, the measurement in- terval T=frCircuitExcessBurst/ifSpeed.")
frErrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 3), )
if mibBuilder.loadTexts: frErrTable.setStatus('mandatory')
if mibBuilder.loadTexts: frErrTable.setDescription('A table containing information about Errors on the Frame Relay interface.')
frErrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 3, 1), ).setIndexNames((0, "VINA-MIB", "frErrIfIndex"))
if mibBuilder.loadTexts: frErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frErrEntry.setDescription('The error information for a single frame relay interface.')
frErrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frErrIfIndex.setDescription('The ifIndex Value of the corresponding ifEn- try.')
frErrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalDLCI", 4), ("unknownDLCI", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrType.setStatus('mandatory')
if mibBuilder.loadTexts: frErrType.setDescription('The type of error that was last seen on this interface.')
frErrData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrData.setStatus('mandatory')
if mibBuilder.loadTexts: frErrData.setDescription('An octet string containing as much of the er- ror packet as possible. As a minimum, it must contain the Q.922 Address or as much as was delivered. It is desirable to include all in- formation up to the PDU.')
frErrTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: frErrTime.setDescription('The value of sysUpTime at which the error was detected.')
frame_relay_globals = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 4)).setLabel("frame-relay-globals")
frTrapState = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: frTrapState.setDescription('This variable indicates whether the system produces the frDLCIStatusChange trap.')
frDLCIStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 32) + (0,1)).setObjects(("VINA-MIB", "frCircuitIfIndex"), ("VINA-MIB", "frCircuitDlci"), ("VINA-MIB", "frCircuitState"))
if mibBuilder.loadTexts: frDLCIStatusChange.setDescription('This trap indicates that the indicated Virtual Circuit has changed state. It has either been created or invalidated, or has toggled between the active and inactive states.')
mibBuilder.exportSymbols("VINA-MIB", frDLCIStatusChange=frDLCIStatusChange, vinaSlaIntervalDdrAboveCir=vinaSlaIntervalDdrAboveCir, vinaSlaIntervalNumber=vinaSlaIntervalNumber, calibration=calibration, vinaSlaIntervalDdrBelowCir=vinaSlaIntervalDdrBelowCir, vinaSlaIntervalPvcDowntime=vinaSlaIntervalPvcDowntime, freeMemorybytes=freeMemorybytes, frCircuitState=frCircuitState, currentMemorybytes=currentMemorybytes, frCircuitCommittedBurst=frCircuitCommittedBurst, currentMemory=currentMemory, vinaSlaIntervalPvcUptime=vinaSlaIntervalPvcUptime, frErrData=frErrData, frDlcmiMonitoredEvents=frDlcmiMonitoredEvents, vinaSlaIntervalEndToEndAveLatency=vinaSlaIntervalEndToEndAveLatency, cumulativeMemory=cumulativeMemory, frErrType=frErrType, tenSecondIdle=tenSecondIdle, frDlcmiMaxSupportedVCs=frDlcmiMaxSupportedVCs, vinaSlaCurrentPvcNumber=vinaSlaCurrentPvcNumber, frDlcmiAddress=frDlcmiAddress, frDlcmiEntry=frDlcmiEntry, flags=flags, Index=Index, vxTask=vxTask, historyValid=historyValid, currentMemoryblocks=currentMemoryblocks, frErrEntry=frErrEntry, frTrapState=frTrapState, vinaSlaCurrentPvcUptime=vinaSlaCurrentPvcUptime, hostName=hostName, frCircuitSentFrames=frCircuitSentFrames, errno=errno, frDlcmiPollingInterval=frDlcmiPollingInterval, userInterval=userInterval, vinaSlaIntervalEntry=vinaSlaIntervalEntry, taskPriority=taskPriority, frDlcmiState=frDlcmiState, taskID=taskID, bootFile=bootFile, frCircuitDlci=frCircuitDlci, frErrTime=frErrTime, vinaTraps=vinaTraps, frCircuitTable=frCircuitTable, vinaSys=vinaSys, vinaSlaCurrentEndToEndAveLatency=vinaSlaCurrentEndToEndAveLatency, programCounter=programCounter, freeMemoryblocks=freeMemoryblocks, frame_relay=frame_relay, gatewayAddr=gatewayAddr, abortReboot=abortReboot, currentIdle=currentIdle, sixtySecondIdle=sixtySecondIdle, processorNumber=processorNumber, frCircuitReceivedOctets=frCircuitReceivedOctets, frDlcmiAddressLen=frDlcmiAddressLen, currentMemoryavgerage=currentMemoryavgerage, vina_system=vina_system, frCircuitReceivedFECNs=frCircuitReceivedFECNs, frDlcmiErrorThreshold=frDlcmiErrorThreshold, vinaSlaCurrentTable=vinaSlaCurrentTable, vxNetwork=vxNetwork, rebootVME=rebootVME, priority=priority, silent=silent, vxKernel=vxKernel, backplaneAddr=backplaneAddr, snmpd=snmpd, vinaSlaCurrentEndToEndPeakLatency=vinaSlaCurrentEndToEndPeakLatency, vxworks=vxworks, currentMemorymaximum=currentMemorymaximum, freeMemory=freeMemory, vinaSlaConfigVars=vinaSlaConfigVars, vina=vina, vinaSla=vinaSla, frDlcmiFullEnquiryInterval=frDlcmiFullEnquiryInterval, frCircuitReceivedBECNs=frCircuitReceivedBECNs, userName=userName, vxClock=vxClock, delay=delay, cumulativeaverage=cumulativeaverage, vxTcp=vxTcp, entryPoint=entryPoint, vinaSlaIntervalPvcNumber=vinaSlaIntervalPvcNumber, spuriousInts=spuriousInts, frDlcmiMulticast=frDlcmiMulticast, ethernetAddr=ethernetAddr, bootDev=bootDev, cumulativeblocks=cumulativeblocks, other=other, vinaSlaNumValidIntervals=vinaSlaNumValidIntervals, hostAddr=hostAddr, frCircuitIfIndex=frCircuitIfIndex, historySize=historySize, vinaSlaCurrentPvcNumTimesDown=vinaSlaCurrentPvcNumTimesDown, vinaSlaCurrentPvcDowntime=vinaSlaCurrentPvcDowntime, vxNumTasks=vxNumTasks, userIdle=userIdle, stackPointer=stackPointer, agentVersion=agentVersion, frCircuitReceivedFrames=frCircuitReceivedFrames, freeMemoryaverage=freeMemoryaverage, vinaSlaIntervalEndToEndPeakLatency=vinaSlaIntervalEndToEndPeakLatency, frErrIfIndex=frErrIfIndex, vinaSlaCurrentDdrAboveCir=vinaSlaCurrentDdrAboveCir, ticks=ticks, vxBootParams=vxBootParams, frDlcmiTable=frDlcmiTable, idle=idle, password=password, frCircuitSentOctets=frCircuitSentOctets, name=name, frCircuitEntry=frCircuitEntry, frCircuitExcessBurst=frCircuitExcessBurst, vxMemory=vxMemory, vinaSlaCurrentEntry=vinaSlaCurrentEntry, cumulativebytes=cumulativebytes, targetName=targetName, status=status, vinaSlaIntervalTable=vinaSlaIntervalTable, frCircuitCreationTime=frCircuitCreationTime, vinaSlaCurrentDdrBelowCir=vinaSlaCurrentDdrBelowCir, vinaSlaIntervalPvcNumTimesDown=vinaSlaIntervalPvcNumTimesDown, frCircuitThroughput=frCircuitThroughput, frame_relay_globals=frame_relay_globals, startupScript=startupScript, frErrTable=frErrTable, operatingSystem=operatingSystem, vxTaskTable=vxTaskTable, frDlcmiIfIndex=frDlcmiIfIndex, frCircuitLastTimeChange=frCircuitLastTimeChange, sysClkRate=sysClkRate, portVersion=portVersion, reboot=reboot, DLCI=DLCI, vxTaskEntry=vxTaskEntry)
