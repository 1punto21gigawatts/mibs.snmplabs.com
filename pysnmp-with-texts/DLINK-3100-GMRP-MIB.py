#
# PySNMP MIB module DLINK-3100-GMRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-GMRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:48:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Unsigned32, MibIdentifier, ObjectIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, TimeTicks, iso, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "TimeTicks", "iso", "Gauge32", "NotificationType")
TextualConvention, TruthValue, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "TimeInterval")
rlGmrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75))
rlGmrp.setRevisions(('2007-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlGmrp.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlGmrp.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rlGmrp.setOrganization('Dlink, Inc. Dlink Semiconductor, Inc.')
if mibBuilder.loadTexts: rlGmrp.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rlGmrp.setDescription('This private MIB module defines GMRP private MIBs.')
rlGmrpSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGmrpSupported.setStatus('current')
if mibBuilder.loadTexts: rlGmrpSupported.setDescription('Is Gmrp supported in the device or not.')
rlGmrpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGmrpMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlGmrpMibVersion.setDescription("MIB's version, the current version is 1.")
rlPortGmrpTimersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 3), )
if mibBuilder.loadTexts: rlPortGmrpTimersTable.setStatus('current')
if mibBuilder.loadTexts: rlPortGmrpTimersTable.setDescription('A table of Gmrp timer values for every bridge port. This is indexed by dot1dBasePort.')
rlPortGmrpTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: rlPortGmrpTimersEntry.setStatus('current')
if mibBuilder.loadTexts: rlPortGmrpTimersEntry.setDescription('Gmrp timer values for a bridge port.')
rlPortGmrpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 3, 1, 1), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGmrpJoinTime.setStatus('current')
if mibBuilder.loadTexts: rlPortGmrpJoinTime.setDescription('The Gmrp Join time, in centiseconds.')
rlPortGmrpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 3, 1, 2), TimeInterval().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGmrpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: rlPortGmrpLeaveTime.setDescription('The Gmrp Leave time, in centiseconds.')
rlPortGmrpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 3, 1, 3), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGmrpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: rlPortGmrpLeaveAllTime.setDescription('The Gmrp LeaveAll time, in centiseconds.')
rlPortGmrpOverrideGarp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 3, 1, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGmrpOverrideGarp.setStatus('current')
if mibBuilder.loadTexts: rlPortGmrpOverrideGarp.setDescription('If enabled{1}, Gmrp timer values for this port are determined by the values in this entry. Otherwise, they are determined by the values in dot1dPortGarpTable.')
rlGmrpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 4), )
if mibBuilder.loadTexts: rlGmrpVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlGmrpVlanTable.setDescription('This table is to Enable/Disable Gmrp in the vlan.')
rlGmrpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 4, 1), ).setIndexNames((0, "DLINK-3100-GMRP-MIB", "rlGmrpVlanTag"))
if mibBuilder.loadTexts: rlGmrpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlGmrpVlanEntry.setDescription('An entry in the rlGmrpVlanTable.')
rlGmrpVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGmrpVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlGmrpVlanTag.setDescription('The tag of the VLAN for which this entry contains information.')
rlGmrpVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 75, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGmrpVlanEnable.setStatus('current')
if mibBuilder.loadTexts: rlGmrpVlanEnable.setDescription('Enable/Disable Gmrp in the vlan.')
mibBuilder.exportSymbols("DLINK-3100-GMRP-MIB", rlGmrpMibVersion=rlGmrpMibVersion, PYSNMP_MODULE_ID=rlGmrp, rlGmrpVlanTable=rlGmrpVlanTable, rlGmrpVlanTag=rlGmrpVlanTag, rlPortGmrpLeaveTime=rlPortGmrpLeaveTime, rlPortGmrpLeaveAllTime=rlPortGmrpLeaveAllTime, rlGmrp=rlGmrp, rlPortGmrpTimersTable=rlPortGmrpTimersTable, rlPortGmrpTimersEntry=rlPortGmrpTimersEntry, rlPortGmrpOverrideGarp=rlPortGmrpOverrideGarp, rlGmrpSupported=rlGmrpSupported, rlGmrpVlanEnable=rlGmrpVlanEnable, rlGmrpVlanEntry=rlGmrpVlanEntry, rlPortGmrpJoinTime=rlPortGmrpJoinTime)
