#
# PySNMP MIB module Wellfleet-CCT-NAME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-CCT-NAME-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, ObjectIdentity, Bits, Integer32, Counter32, Unsigned32, Counter64, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Integer32", "Counter32", "Unsigned32", "Counter64", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfServices, wfCircuitNameExtension = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfServices", "wfCircuitNameExtension")
wfCircuitNameTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3), )
if mibBuilder.loadTexts: wfCircuitNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitNameTable.setDescription('The table of circuit names')
wfCircuitNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1), ).setIndexNames((0, "Wellfleet-CCT-NAME-MIB", "wfCircuitNumber"))
if mibBuilder.loadTexts: wfCircuitNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitNameEntry.setDescription('Entry format for the table of circuit names')
wfCircuitNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitNameDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitNameDelete.setDescription('Creation and deletion flag for this record')
wfCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitNumber.setDescription('circuit number')
wfCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitName.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitName.setDescription('circuit name')
wfCircuitIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170))).clone(namedValues=NamedValues(("csmacd", 10), ("sync", 20), ("t1", 30), ("e1", 40), ("token", 50), ("fddi", 60), ("hssi", 70), ("mct1", 80), ("ds1e1", 90), ("none", 100), ("atm", 110), ("async", 120), ("isdn", 130), ("atmz", 140), ("bisync", 150), ("gre", 160), ("ds3e3", 170)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitIfType.setDescription('circuit interface type')
wfCircuitProtoMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitProtoMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitProtoMap.setDescription('CIRCUIT_PROTO_BRIDGE 1 CIRCUIT_PROTO_SPANTREE 2 CIRCUIT_PROTO_IP 3 CIRCUIT_PROTO_RIP 4 CIRCUIT_PROTO_EGP 5 CIRCUIT_PROTO_OSPF 6 CIRCUIT_PROTO_SNMP 7 CIRCUIT_PROTO_TFTP 8 CIRCUIT_PROTO_TCP 9 CIRCUIT_PROTO_DECNET4 10 CIRCUIT_PROTO_VINES 11 CIRCUIT_PROTO_SMDS 12 CIRCUIT_PROTO_FR 13 CIRCUIT_PROTO_IPX 14 CIRCUIT_PROTO_IPX_RIP 15 CIRCUIT_PROTO_XNS 16 CIRCUIT_PROTO_XNS_RIP 17 CIRCUIT_PROTO_AT 18 CIRCUIT_PROTO_SR 19 CIRCUIT_PROTO_FR_VC 20 CIRCUIT_PROTO_PRI_Q 21 CIRCUIT_PROTO_PPP 22 CIRCUIT_PROTO_OSI 23 CIRCUIT_PROTO_LLC2 24 CIRCUIT_PROTO_LNM 25 CIRCUIT_PROTO_X25 26 CIRCUIT_PROTO_ATM 27 CIRCUIT_PROTO_ATM_VC 28 CIRCUIT_PROTO_TELNET 29 CIRCUIT_PROTO_STA 30 CIRCUIT_PROTO_BGP 31 CIRCUIT_PROTO_DLS 32 CIRCUIT_PROTO_RARP 33 CIRCUIT_PROTO_BOOTP 34 CIRCUIT_PROTO_LLC2_VC 35 CIRCUIT_PROTO_AURP 36 CIRCUIT_PROTO_X25_VC 37 CIRCUIT_PROTO_DEMAND 38 CIRCUIT_PROTO_CL_IP 39 CIRCUIT_PROTO_PROXY 40 CIRCUIT_PROTO_TELNET_CLIENT 41 CIRCUIT_PROTO_SW_LAPB 42 CIRCUIT_PROTO_SR_SPANTREE 43 CIRCUIT_PROTO_NML 44 CIRCUIT_PROTO_RDISC 45 CIRCUIT_PROTO_SDLC 46 CIRCUIT_PROTO_NBASE 47 CIRCUIT_PROTO_SWSMDS 48 CIRCUIT_PROTO_FRSW_CONG 49 CIRCUIT_PROTO_SW_PROXY 50 CIRCUIT_PROTO_FRSW 51 CIRCUIT_PROTO_APPN 52 CIRCUIT_PROTO_APPN_CP 53 CIRCUIT_PROTO_ISDN 54 CIRCUIT_PROTO_LINEMANAGER 55 CIRCUIT_PROTO_ATM_UNI 56 CIRCUIT_PROTO_ATM_UNI_VCL 57 CIRCUIT_PROTO_IGMP 58 CIRCUIT_PROTO_DVMRP 59 CIRCUIT_PROTO_NBIP 60 CIRCUIT_PROTO_FTP 61 CIRCUIT_PROTO_WCP 62 CIRCUIT_PROTO_ARP 63 CIRCUIT_PROTO_ST2 64 CIRCUIT_PROTO_ATMZ 65 CIRCUIT_PROTO_ATM_LE 66 CIRCUIT_PROTO_IPEX 67 CIRCUIT_PROTO_NLSP 68 CIRCUIT_PROTO_BGPRS 69 CIRCUIT_PROTO_CRM 70 CIRCUIT_PROTO_RR 71 CIRCUIT_PROTO_NPT 72 CIRCUIT_PROTO_ATM_SIG 73 CIRCUIT_PROTO_BOT 74 CIRCUIT_PROTO_PIM 75 CIRCUIT_PROTO_NTP 76 CIRCUIT_PROTO_MIP 77 CIRCUIT_PROTO_BNX_RSVD_78 78 CIRCUIT_PROTO_BNX_RSVD_79 79 CIRCUIT_PROTO_ISDB 80 CIRCUIT_PROTO_FWALL 81 CIRCUIT_PROTO_WEP 82 CIRCUIT_PROTO_BACP 83 CIRCUIT_PROTO_RADIUS 84 CIRCUIT_PROTO_IPV6 85 CIRCUIT_PROTO_RIP6 86 CIRCUIT_PROTO_AOT 87 CIRCUIT_PROTO_RSVP 88 CIRCUIT_PROTO_MOSPF 89 CIRCUIT_PROTO_PORTMTX 90 CIRCUIT_PROTO_CONVSTR 91 CIRCUIT_PROTO_RCMDS 92 CIRCUIT_PROTO_DNS 93 CIRCUIT_PROTO_COLUMBO 94 CIRCUIT_PROTO_NAT 95 CIRCUIT_PROTO_ASR 96 CIRCUIT_PROTO_NHRP 97 CIRCUIT_PROTO_AHB 98 CIRCUIT_PROTO_HTTP 99 CIRCUIT_PROTO_FRPT 100 CIRCUIT_PROTO_FRSVC 101 CIRCUIT_PROTO_STACLZS 102 CIRCUIT_PROTO_L2TP 103 CIRCUIT_PROTO_BNX_RSVD_104 104 CIRCUIT_PROTO_VCCT 105 CIRCUIT_PROTO_TAG1Q 106 CIRCUIT_PROTO_TARP 107 CIRCUIT_PROTO_MPS 108 CIRCUIT_PROTO_DHCP 109 CIRCUIT_PROTO_CAPI 110 CIRCUIT_PROTO_IPSEC 111 CIRCUIT_PROTO_MPLS_LDP 112 CIRCUIT_PROTO_MPLS_MLM 113 CIRCUIT_PROTO_IISIS 114 CIRCUIT_PROTO_COPS 115 CIRCUIT_PROTO_DIFFSERV 116 CIRCUIT_PROTO_IKE 117 CIRCUIT_PROTO_VRRP 118 CIRCUIT_PROTO_WIREDUND 119 CIRCUIT_PROTO_MLT 120 CIRCUIT_PROTO_L2TP_CLIENT 121 CIRCUIT_PROTO_DSQMS 122 NUMBER_OF_PROTOCOLS 122')
wfCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("virtual", 2), ("master", 3), ("clip", 4), ("internal", 5), ("gre", 6), ("notrouted", 7))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitType.setDescription('The circuit type')
wfCircuitRelCctList = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitRelCctList.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitRelCctList.setDescription('The related circuit list for this circuit: only valid if wfCircuitType is either CIRCUIT_REL_VIRTUAL or CIRCUIT_REL_MASTER')
wfCircuitLineList = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitLineList.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitLineList.setDescription('The line info list for this circuit')
wfCircuitMultilineName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitMultilineName.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitMultilineName.setDescription('Name of the multiline that this circuit is. Use the circuit name if this is nil.')
wfCircuitTdmRes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notdmresources", 1), ("switchedh110", 2), ("routedh110", 3), ("cesh110", 4))).clone('notdmresources')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitTdmRes.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitTdmRes.setDescription('Specifies if, and how, the circuit utilizes TDM resources. Normal GAME circuits should have this set to noTdmResources.')
wfCircuitTdmCctInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notinuse", 1), ("inuse", 2))).clone('notinuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCircuitTdmCctInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfCircuitTdmCctInUse.setDescription('This field is for TDM Circuit Management use, and it indicates whether this TDM circuit is currently in use. It is only valid if wfCircuitTdmRes is not set to (notdmresources).')
wfLineMappingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1), )
if mibBuilder.loadTexts: wfLineMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLineMappingTable.setDescription('The table of line mappings')
wfLineMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1), ).setIndexNames((0, "Wellfleet-CCT-NAME-MIB", "wfLineMappingNumber"))
if mibBuilder.loadTexts: wfLineMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLineMappingEntry.setDescription('Entry format for the table of lines')
wfLineMappingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLineMappingDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLineMappingDelete.setDescription('Creation and deletion flag for this record')
wfLineMappingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLineMappingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLineMappingNumber.setDescription('Unique line number. This number is stored in the physical line entries.')
wfLineMappingCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLineMappingCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfLineMappingCct.setDescription('Circuit number stored in the physical line entry.')
wfLineMappingDef = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLineMappingDef.setStatus('mandatory')
if mibBuilder.loadTexts: wfLineMappingDef.setDescription('Identifies which physical line this line maps to.')
wfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 2))
wfNodeDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNodeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNodeDelete.setDescription('Create/Delete parameter. Default is created. SM performs a set operation on this object in order to create/delete Node base record.')
wfNodeProtoMap = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 9, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNodeProtoMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfNodeProtoMap.setDescription('The Node-Protocol mask, indicates what protocols are configured on the router , for bit numbers see wfCircuitProtomap')
mibBuilder.exportSymbols("Wellfleet-CCT-NAME-MIB", wfCircuitMultilineName=wfCircuitMultilineName, wfCircuitName=wfCircuitName, wfCircuitNameDelete=wfCircuitNameDelete, wfCircuitProtoMap=wfCircuitProtoMap, wfCircuitLineList=wfCircuitLineList, wfCircuitNameTable=wfCircuitNameTable, wfLineMappingDelete=wfLineMappingDelete, wfNodeProtoMap=wfNodeProtoMap, wfLineMappingNumber=wfLineMappingNumber, wfNode=wfNode, wfLineMappingCct=wfLineMappingCct, wfNodeDelete=wfNodeDelete, wfCircuitType=wfCircuitType, wfCircuitTdmRes=wfCircuitTdmRes, wfLineMappingDef=wfLineMappingDef, wfCircuitNumber=wfCircuitNumber, wfCircuitTdmCctInUse=wfCircuitTdmCctInUse, wfCircuitIfType=wfCircuitIfType, wfCircuitRelCctList=wfCircuitRelCctList, wfLineMappingTable=wfLineMappingTable, wfLineMappingEntry=wfLineMappingEntry, wfCircuitNameEntry=wfCircuitNameEntry)
