#
# PySNMP MIB module SONUS-DIRECTORY-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-DIRECTORY-SERVICES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, ObjectIdentity, Bits, iso, Integer32, IpAddress, Counter64, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "ObjectIdentity", "Bits", "iso", "Integer32", "IpAddress", "Counter64", "Counter32", "MibIdentifier")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
sonusServicesMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusServicesMIBs")
SonusName, = mibBuilder.importSymbols("SONUS-TC", "SonusName")
sonusDirectoryServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1))
if mibBuilder.loadTexts: sonusDirectoryServicesMIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusDirectoryServicesMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusDirectoryServicesMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusDirectoryServicesMIB.setDescription('The MIB Module for Directory Services Management.')
sonusDirectoryServicesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1))
sonusRouteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1))
sonusRouteNameObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1))
sonusDsRouteNameNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsRouteNameNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteNameNextIndex.setDescription('The next valid index to use when creating a new sonusDsRouteNameEntry')
sonusDsRouteNameTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: sonusDsRouteNameTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteNameTable.setDescription("Each route name can be associated with up to 4 routes. Each route is comprised of 3 elements, namely the gateway name, gateway's trunk group name and the trunk group's attributes. The routes are ordered in terms of preferences.")
sonusDsRouteNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsNameRouteTableIndex"), (0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsRouteNameIndex"))
if mibBuilder.loadTexts: sonusDsRouteNameEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteNameEntry.setDescription('A route name entry containing the following configuration objects. ')
sonusDsNameRouteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsNameRouteTableIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsNameRouteTableIndex.setDescription('A unique value for a route table entry.')
sonusDsRouteNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsRouteNameIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteNameIndex.setDescription('A unique value for each Route Name entry.')
sonusDsRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteName.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteName.setDescription('Destination Route name for the following routes.')
sonusDsRoute1TgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRoute1TgName.setStatus('current')
if mibBuilder.loadTexts: sonusDsRoute1TgName.setDescription("Route1's trunk group name")
sonusDsRoute2TgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRoute2TgName.setStatus('current')
if mibBuilder.loadTexts: sonusDsRoute2TgName.setDescription("Route2's trunk group name")
sonusDsRoute3TgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRoute3TgName.setStatus('current')
if mibBuilder.loadTexts: sonusDsRoute3TgName.setDescription("Route3's trunk group name")
sonusDsRoute4TgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRoute4TgName.setStatus('current')
if mibBuilder.loadTexts: sonusDsRoute4TgName.setDescription("Route4's trunk group name")
sonusDsRouteNameAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteNameAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteNameAdminState.setDescription('The requested state of the given route name.')
sonusDsRouteNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteNameRowStatus.setDescription('This is for SNMP use.')
sonusRouteTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2))
sonusDsRouteTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsRouteTableNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableNextIndex.setDescription('The next valid index to use when creating a new sonusDsRouteTableEntry')
sonusDsRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: sonusDsRouteTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTable.setDescription('Characteristicss of a route table.')
sonusDsRouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsRouteTableIndex"))
if mibBuilder.loadTexts: sonusDsRouteTableEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableEntry.setDescription('A route table entry containing the following configuration objects. ')
sonusDsRouteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsRouteTableIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableIndex.setDescription('A unique value for each route table entry. ')
sonusDsRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteTableName.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableName.setDescription('The name of this route table')
sonusDsRouteTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteTableType.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableType.setDescription('Route table type specifies the format of the route table.')
sonusDsMaxDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxDigits.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxDigits.setDescription('A maximum of digits that is used for the look-up.')
sonusDsMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxRoutes.setDescription('A maximum of 4 routes are allowed per route name entry in the route table.')
sonusDsTableCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsTableCountryCode.setStatus('current')
if mibBuilder.loadTexts: sonusDsTableCountryCode.setDescription('Country code portion of phone number address entry ')
sonusDsRouteTableAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteTableAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableAdminState.setDescription('The requested state of the given route table.')
sonusDsRouteTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsRouteTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsRouteTableRowStatus.setDescription('This is for SNMP use.')
sonusRouteAddressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3))
sonusDsAddressRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: sonusDsAddressRouteTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteTable.setDescription('Each phone number has a corresponding route name in a specific route table.')
sonusDsAddressRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsAddressRouteTableIndex"), (0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsAddressRouteIndex"))
if mibBuilder.loadTexts: sonusDsAddressRouteEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteEntry.setDescription('A Route address entry containing the following configuration objects. ')
sonusDsAddressRouteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsAddressRouteTableIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteTableIndex.setDescription('A unique route table entry. ')
sonusDsAddressRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsAddressRouteIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteIndex.setDescription('A unique value for each phone number address entry. ')
sonusDsAddressCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsAddressCountryCode.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressCountryCode.setDescription('Country code portion of phone number address entry ')
sonusDsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsAddress.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddress.setDescription('Phone number address entry ')
sonusDsAddressRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsAddressRouteName.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteName.setDescription('Route Name for this phone number. ')
sonusDsAddressRouteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsAddressRouteAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteAdminState.setDescription('The requested state of the given route table.')
sonusDsAddressRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsAddressRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsAddressRouteRowStatus.setDescription('This is for SNMP use.')
sonusDestinationTrunkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4))
sonusDsDestTgNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsDestTgNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgNextIndex.setDescription('The next valid index to use when creating a new sonusDsDestTgEntry')
sonusDsDestTgTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: sonusDsDestTgTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgTable.setDescription('Each Destination Trunk group has both a set of trunk group attributes and a corresponding gateway name')
sonusDsDestTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsDestTgIndex"))
if mibBuilder.loadTexts: sonusDsDestTgEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgEntry.setDescription('A destination trunk group entry containing the following configuration objects. ')
sonusDsDestTgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsDestTgIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgIndex.setDescription('A unique value for each destination trunk group entry. ')
sonusDsDestTgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestTgName.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgName.setDescription('The name of this destination trunk group')
sonusDsDestTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unres", 1), ("res", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestTrunk.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTrunk.setDescription('Bearer transfer rate attribute of this trunk group. Unrestricted is 64KB and restricted is 56KB. ')
sonusDsDestTgSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isup", 1), ("isdn", 2), ("cas", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestTgSignaling.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgSignaling.setDescription('Signaling protocol attribute of this trunk group. ')
sonusDsDestGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestGwName.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestGwName.setDescription('The name of the gateway that is assigned to this destination trunk group. ')
sonusDsDestCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestCarrier.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestCarrier.setDescription('The name of the carrier that is assigned to this destination trunk group. ')
sonusDsDestTgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestTgAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgAdminState.setDescription('The requested state of the given route table.')
sonusDsDestTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 4, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsDestTgRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsDestTgRowStatus.setDescription('This is for SNMP use.')
sonusRouteStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 5))
sonusUnknownRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUnknownRoutes.setStatus('current')
if mibBuilder.loadTexts: sonusUnknownRoutes.setDescription('Number of unresolved directory service route look up since the last reset.')
sonusDirectoryConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2))
sonusDsCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsCountryCode.setStatus('current')
if mibBuilder.loadTexts: sonusDsCountryCode.setDescription('Country code for this gateway.')
sonusDsMaxRemoteTg = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxRemoteTg.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxRemoteTg.setDescription('Maximum allowable destination or remote trunk groups per gateway.')
sonusDsMaxRouteNames = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxRouteNames.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxRouteNames.setDescription('Maximum allowable routenames per route table.')
sonusDsAccess = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsAccess.setStatus('current')
if mibBuilder.loadTexts: sonusDsAccess.setDescription('Directory services access for look ups.')
sonusDsMaxTables = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxTables.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxTables.setDescription('Maximum route table for this gateway.')
sonusDsMaxAddresses = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxAddresses.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxAddresses.setDescription('Maximum address routes per route table for this gateway.')
sonusDsMaxTollFreePrefixes = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsMaxTollFreePrefixes.setStatus('current')
if mibBuilder.loadTexts: sonusDsMaxTollFreePrefixes.setDescription('Maximum toll free prefixes for this gateway.')
sonusTollFreeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3))
sonusDsTollFreeNpaTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3, 1), )
if mibBuilder.loadTexts: sonusDsTollFreeNpaTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsTollFreeNpaTable.setDescription('This is a table containing a list of toll free NPAs for look up in the SCP.')
sonusDsTollFreeNpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3, 1, 1), ).setIndexNames((0, "SONUS-DIRECTORY-SERVICES-MIB", "sonusDsTollFreeNpaIndex"))
if mibBuilder.loadTexts: sonusDsTollFreeNpaEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsTollFreeNpaEntry.setDescription('Each entry lists a toll free NPA')
sonusDsTollFreeNpaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsTollFreeNpaIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsTollFreeNpaIndex.setDescription('A unique value for each route server between 1 and maximum allowed. ')
sonusDsTollFreeNpaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsTollFreeNpaNumber.setStatus('current')
if mibBuilder.loadTexts: sonusDsTollFreeNpaNumber.setDescription('This is NPA or toll free prefix.')
sonusDsTollFreeNpaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsTollFreeNpaAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusDsTollFreeNpaAdminState.setDescription('Allow administrator to disable or enable the use of this NPA for a look up.')
sonusDsTollFreeNpaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 1, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsTollFreeNpaRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsTollFreeNpaRowStatus.setDescription('This is for SNMP use.')
mibBuilder.exportSymbols("SONUS-DIRECTORY-SERVICES-MIB", sonusDsDestGwName=sonusDsDestGwName, sonusDsTollFreeNpaRowStatus=sonusDsTollFreeNpaRowStatus, sonusDsAddress=sonusDsAddress, sonusDsRouteNameTable=sonusDsRouteNameTable, sonusDsTollFreeNpaIndex=sonusDsTollFreeNpaIndex, sonusDsRouteNameRowStatus=sonusDsRouteNameRowStatus, sonusDsRoute1TgName=sonusDsRoute1TgName, sonusDsMaxRouteNames=sonusDsMaxRouteNames, sonusRouteObjects=sonusRouteObjects, sonusDsAddressRouteName=sonusDsAddressRouteName, sonusDsAddressRouteTable=sonusDsAddressRouteTable, sonusDsDestTgIndex=sonusDsDestTgIndex, sonusDsRouteName=sonusDsRouteName, sonusDsRouteTableRowStatus=sonusDsRouteTableRowStatus, sonusDsRouteTable=sonusDsRouteTable, sonusDsCountryCode=sonusDsCountryCode, sonusDsDestTgNextIndex=sonusDsDestTgNextIndex, sonusDsRouteNameIndex=sonusDsRouteNameIndex, sonusDsRouteTableName=sonusDsRouteTableName, sonusDsRouteTableNextIndex=sonusDsRouteTableNextIndex, sonusDsRoute2TgName=sonusDsRoute2TgName, sonusDsMaxTables=sonusDsMaxTables, sonusDirectoryConfigObjects=sonusDirectoryConfigObjects, sonusDsMaxDigits=sonusDsMaxDigits, sonusDsTableCountryCode=sonusDsTableCountryCode, sonusDsDestTgName=sonusDsDestTgName, sonusDsDestTgSignaling=sonusDsDestTgSignaling, sonusDsAddressRouteRowStatus=sonusDsAddressRouteRowStatus, sonusDsDestTgRowStatus=sonusDsDestTgRowStatus, sonusTollFreeObjects=sonusTollFreeObjects, sonusRouteAddressObjects=sonusRouteAddressObjects, sonusDsAddressRouteAdminState=sonusDsAddressRouteAdminState, sonusDsDestTgTable=sonusDsDestTgTable, sonusDsRouteTableType=sonusDsRouteTableType, sonusRouteNameObjects=sonusRouteNameObjects, sonusDirectoryServicesMIBObjects=sonusDirectoryServicesMIBObjects, sonusDsRouteTableIndex=sonusDsRouteTableIndex, sonusDsAccess=sonusDsAccess, sonusDsRouteTableAdminState=sonusDsRouteTableAdminState, sonusDsDestTrunk=sonusDsDestTrunk, sonusDsTollFreeNpaEntry=sonusDsTollFreeNpaEntry, sonusDsMaxRoutes=sonusDsMaxRoutes, sonusDsAddressRouteIndex=sonusDsAddressRouteIndex, sonusRouteStatusObjects=sonusRouteStatusObjects, sonusDsAddressRouteTableIndex=sonusDsAddressRouteTableIndex, PYSNMP_MODULE_ID=sonusDirectoryServicesMIB, sonusDestinationTrunkObjects=sonusDestinationTrunkObjects, sonusDsDestCarrier=sonusDsDestCarrier, sonusDsTollFreeNpaNumber=sonusDsTollFreeNpaNumber, sonusDsAddressRouteEntry=sonusDsAddressRouteEntry, sonusDirectoryServicesMIB=sonusDirectoryServicesMIB, sonusUnknownRoutes=sonusUnknownRoutes, sonusDsDestTgEntry=sonusDsDestTgEntry, sonusDsTollFreeNpaAdminState=sonusDsTollFreeNpaAdminState, sonusDsNameRouteTableIndex=sonusDsNameRouteTableIndex, sonusDsRouteNameNextIndex=sonusDsRouteNameNextIndex, sonusRouteTableObjects=sonusRouteTableObjects, sonusDsMaxRemoteTg=sonusDsMaxRemoteTg, sonusDsDestTgAdminState=sonusDsDestTgAdminState, sonusDsMaxTollFreePrefixes=sonusDsMaxTollFreePrefixes, sonusDsMaxAddresses=sonusDsMaxAddresses, sonusDsRoute3TgName=sonusDsRoute3TgName, sonusDsRouteTableEntry=sonusDsRouteTableEntry, sonusDsTollFreeNpaTable=sonusDsTollFreeNpaTable, sonusDsRouteNameEntry=sonusDsRouteNameEntry, sonusDsRouteNameAdminState=sonusDsRouteNameAdminState, sonusDsRoute4TgName=sonusDsRoute4TgName, sonusDsAddressCountryCode=sonusDsAddressCountryCode)
