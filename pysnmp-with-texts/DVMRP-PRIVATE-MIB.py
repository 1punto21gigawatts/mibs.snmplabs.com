#
# PySNMP MIB module DVMRP-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DVMRP-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:55:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, Counter32, iso, Integer32, TimeTicks, Counter64, IpAddress, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Counter32", "iso", "Integer32", "TimeTicks", "Counter64", "IpAddress", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Gauge32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
cjnDvmrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13))
if mibBuilder.loadTexts: cjnDvmrp.setLastUpdated('9902230000Z')
if mibBuilder.loadTexts: cjnDvmrp.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnDvmrp.setContactInfo('Erick Crowell -- ecrowell@lucent.com Raj Duggal (Group Leader) -- rduggal@lucent.com Marie Pacini -- mfpacini@lucent.com Ira Steckler -- isteckler@lucent.com')
if mibBuilder.loadTexts: cjnDvmrp.setDescription('Cajun DVMRP PRIVATE MIB')
cjnDvmrpGblGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1))
cjnDvmrpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpIsEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIsEnabled.setDescription('Enables DVMRP services on this device.')
cjnDvmrpNbrProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 2), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpNbrProbeInterval.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpNbrProbeInterval.setDescription('The DVMRP Neighbor probe interval - default to 10 seconds.')
cjnDvmrpNbrTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 3), Integer32().clone(35)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpNbrTimeout.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpNbrTimeout.setDescription('The DVMRP Neighbor timeout - default to 35 seconds.')
cjnDvmrpMinFlashUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 4), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpMinFlashUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpMinFlashUpdateInterval.setDescription('Minimum route flash update period - default to 5 seconds.')
cjnDvmrpMaxRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 5), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpMaxRoutes.setDescription('Maximum number of routes allowed - default 5000.')
cjnDvmrpRteReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 6), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRteReportInterval.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRteReportInterval.setDescription('The DVMRP Route report interval - default to 60.')
cjnDvmrpRteExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 7), Integer32().clone(140)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRteExpireTime.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRteExpireTime.setDescription('The DVMRP Route expirartion time - default to 140 seconds.')
cjnDvmrpRteHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 8), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRteHoldTime.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRteHoldTime.setDescription('The DVMRP Route holddown period - default to 120 seconds.')
cjnDvmrpPruneLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7200)).clone(7200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpPruneLifeTime.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpPruneLifeTime.setDescription('The DVMRP Upstream prune message lifetime - default to 7200 seconds (1-7200).')
cjnDvmrpPruneRxmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 10), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpPruneRxmitTime.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpPruneRxmitTime.setDescription('The DVMRP Prune message retransmit interval - default ot 3 seconds.')
cjnDvmrpGraftRxmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 11), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpGraftRxmitTime.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpGraftRxmitTime.setDescription('The DVMRP Graft message retransmit interval - default to 5 seconds.')
cjnDvmrpGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpGlobalStatsReset.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpGlobalStatsReset.setDescription('When set to the value enable (1) all DVMRP statistics are reset to zero after which the value of this MIB object returns to disable(2)')
cjnDvmrpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2))
cjnDvmrpRxProbe = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRxProbe.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRxProbe.setDescription('Number of Probe packets received.')
cjnDvmrpTxProbe = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpTxProbe.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpTxProbe.setDescription('Number of Probe packets transmitted.')
cjnDvmrpRxReport = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRxReport.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRxReport.setDescription('Number of Route Report packets received.')
cjnDvmrpTxReport = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpTxReport.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpTxReport.setDescription('Number of Route Report packets transmitted.')
cjnDvmrpRxPrune = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRxPrune.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRxPrune.setDescription('Number of Prune packets received.')
cjnDvmrpTxPrune = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpTxPrune.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpTxPrune.setDescription('Number of Prune packets transmitted.')
cjnDvmrpRxGraft = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRxGraft.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRxGraft.setDescription('Number of Graft packets received.')
cjnDvmrpTxGraft = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpTxGraft.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpTxGraft.setDescription('Number of Graft packets transmitted.')
cjnDvmrpRxGraftAck = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRxGraftAck.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRxGraftAck.setDescription('Number of Graft Acknowledgment packets received.')
cjnDvmrpTxGraftAck = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpTxGraftAck.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpTxGraftAck.setDescription('Number of Graft Acknowledgment packets transmitted.')
cjnDvmrpRxUnknownCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpRxUnknownCode.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpRxUnknownCode.setDescription('Number of received DVMRP packets with unknown codes.')
cjnDvmrpNumValidRts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpNumValidRts.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpNumValidRts.setDescription('Number of currently valid (met<32) local and received routes on this node.')
cjnDvmrpNumRts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpNumRts.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpNumRts.setDescription('Total number of local and received routes on this node.')
cjnDvmrpNumTrigdRts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpNumTrigdRts.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpNumTrigdRts.setDescription('Number of triggered routes received on this node.')
cjnDvmrpLastRep = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 2, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpLastRep.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpLastRep.setDescription('Time of last route report transmitted on this node.')
cjnDvmrpIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3))
cjnDvmrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1), )
if mibBuilder.loadTexts: cjnDvmrpIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfTable.setDescription('A list of Cajun DVMRP interface entries. The number of entries is given by the value of cjnDvmrpIfNumber.')
cjnDvmrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1), ).setIndexNames((0, "DVMRP-PRIVATE-MIB", "cjnDvmrpIfIndex"))
if mibBuilder.loadTexts: cjnDvmrpIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfEntry.setDescription('An cajun DVMRP Interface instance ')
cjnDvmrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: cjnDvmrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfIndex.setDescription('The globally unique INDEX that identifes this interface. This number MUST corrolate with the cjnIpIfIndex.')
cjnDvmrpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnDvmrpIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnDvmrpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("broadcast", 0), ("nonEncapsulatedTunnel", 1), ("ipIpTunnel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnDvmrpIfType.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfType.setDescription('The Interface type. 0=broadcast,1=nonEncapsulatedTunnel,2=IPIPTunnel. default is 0.')
cjnDvmrpIfTnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnDvmrpIfTnAddress.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfTnAddress.setDescription('The Tunnel Address associated with this DVMRP interface.')
cjnDvmrpIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnDvmrpIfMetric.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfMetric.setDescription('Interface Metric (hop count) - 1-31. default is 1.')
cjnDvmrpIfScope = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("scope0", 0), ("scope127", 1), ("scope255", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnDvmrpIfScope.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfScope.setDescription('Interface scope 0=0, 1=127, 2=255. default is 0.')
cjnDvmrpPruneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("hostAddr", 1), ("networkAddr", 0))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnDvmrpPruneSource.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpPruneSource.setDescription('By default Full Src Host addr is in Prune pkt (not just Net portion) default True.')
cjnDvmrpIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2), )
if mibBuilder.loadTexts: cjnDvmrpIfStatTable.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfStatTable.setDescription('A list of Cajun DVMRP interface Statistic entries. The number of entries is given by the value of cjnDvmrpIfNumber.')
cjnDvmrpIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1), ).setIndexNames((0, "DVMRP-PRIVATE-MIB", "cjnDvmrpIfStatIndex"))
if mibBuilder.loadTexts: cjnDvmrpIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfStatEntry.setDescription('An cajun DVMRP Interface Statistics instance ')
cjnDvmrpIfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: cjnDvmrpIfStatIndex.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfStatIndex.setDescription('The globally unique INDEX that identifes this interface. This number MUST corrolate with the cjnIpIfIndex.')
cjnDvmrpIfBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpIfBadPackets.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfBadPackets.setDescription('Number of empty (no routes in pkt) Route Report packets received on this interface.')
cjnDvmrpIfBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpIfBadRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfBadRoutes.setDescription('Number of routes with an invalid metric received on this interface.')
cjnDvmrpIfNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpIfNbrCount.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfNbrCount.setDescription('Number of neighbor DVMRP Router(s) on this interface.')
cjnDvmrpIfSentRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDvmrpIfSentRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfSentRoutes.setDescription('Number of Route Report packets sent on this interface.')
cjnDvmrpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 13, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnDvmrpIfState.setStatus('current')
if mibBuilder.loadTexts: cjnDvmrpIfState.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3) -- Interface entry NOT FULLY configured.')
mibBuilder.exportSymbols("DVMRP-PRIVATE-MIB", cjnDvmrpNbrTimeout=cjnDvmrpNbrTimeout, cjnDvmrpRteExpireTime=cjnDvmrpRteExpireTime, cjnDvmrpIfMetric=cjnDvmrpIfMetric, cjnDvmrpIfNbrCount=cjnDvmrpIfNbrCount, cjnDvmrpRxGraftAck=cjnDvmrpRxGraftAck, cjnDvmrpPruneRxmitTime=cjnDvmrpPruneRxmitTime, cjnDvmrpIfState=cjnDvmrpIfState, PYSNMP_MODULE_ID=cjnDvmrp, cjnDvmrpRteReportInterval=cjnDvmrpRteReportInterval, cjnDvmrpRxGraft=cjnDvmrpRxGraft, cjnDvmrpIfEntry=cjnDvmrpIfEntry, cjnDvmrpPruneLifeTime=cjnDvmrpPruneLifeTime, cjnDvmrpNumRts=cjnDvmrpNumRts, cjnDvmrpTxGraft=cjnDvmrpTxGraft, cjnDvmrpTxGraftAck=cjnDvmrpTxGraftAck, cjnDvmrpIfScope=cjnDvmrpIfScope, cjnDvmrpTxProbe=cjnDvmrpTxProbe, cjnDvmrpLastRep=cjnDvmrpLastRep, cjnDvmrpIfRowStatus=cjnDvmrpIfRowStatus, cjnDvmrpNbrProbeInterval=cjnDvmrpNbrProbeInterval, cjnDvmrpMinFlashUpdateInterval=cjnDvmrpMinFlashUpdateInterval, cjnDvmrpTxPrune=cjnDvmrpTxPrune, cjnDvmrpIsEnabled=cjnDvmrpIsEnabled, cjnDvmrpGraftRxmitTime=cjnDvmrpGraftRxmitTime, cjnDvmrpRxProbe=cjnDvmrpRxProbe, cjnDvmrpMaxRoutes=cjnDvmrpMaxRoutes, cjnDvmrpRxReport=cjnDvmrpRxReport, cjnDvmrpRxPrune=cjnDvmrpRxPrune, cjnDvmrpIfBadRoutes=cjnDvmrpIfBadRoutes, cjnDvmrpIfBadPackets=cjnDvmrpIfBadPackets, cjnDvmrpRxUnknownCode=cjnDvmrpRxUnknownCode, cjnDvmrpIfTable=cjnDvmrpIfTable, cjnDvmrpIfSentRoutes=cjnDvmrpIfSentRoutes, cjnDvmrpIfIndex=cjnDvmrpIfIndex, cjnDvmrpNumValidRts=cjnDvmrpNumValidRts, cjnDvmrpGlobalStatsReset=cjnDvmrpGlobalStatsReset, cjnDvmrpRteHoldTime=cjnDvmrpRteHoldTime, cjnDvmrpIfType=cjnDvmrpIfType, cjnDvmrpIfStatTable=cjnDvmrpIfStatTable, cjnDvmrpNumTrigdRts=cjnDvmrpNumTrigdRts, cjnDvmrpTxReport=cjnDvmrpTxReport, cjnDvmrpPruneSource=cjnDvmrpPruneSource, cjnDvmrpIfTnAddress=cjnDvmrpIfTnAddress, cjnDvmrpGblGroup=cjnDvmrpGblGroup, cjnDvmrpIfStatIndex=cjnDvmrpIfStatIndex, cjnDvmrpStatsGroup=cjnDvmrpStatsGroup, cjnDvmrpIfGroup=cjnDvmrpIfGroup, cjnDvmrpIfStatEntry=cjnDvmrpIfStatEntry, cjnDvmrp=cjnDvmrp)
