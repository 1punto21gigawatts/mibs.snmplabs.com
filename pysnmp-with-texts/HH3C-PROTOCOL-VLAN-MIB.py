#
# PySNMP MIB module HH3C-PROTOCOL-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-PROTOCOL-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, Integer32, ObjectIdentity, Counter64, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, MibIdentifier, NotificationType, ModuleIdentity, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ObjectIdentity", "Counter64", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "MibIdentifier", "NotificationType", "ModuleIdentity", "Unsigned32", "Gauge32")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
hh3cProtocolVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 16))
hh3cProtocolVlan.setRevisions(('2004-08-31 19:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cProtocolVlan.setRevisionsDescriptions(('The initial revision of this MIB module .',))
if mibBuilder.loadTexts: hh3cProtocolVlan.setLastUpdated('200408311800Z')
if mibBuilder.loadTexts: hh3cProtocolVlan.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cProtocolVlan.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cProtocolVlan.setDescription('This MIB contains the objects for managing the protocol-based vlan configurations.')
class Hh3cvProtocolVlanProtocolType(TextualConvention, Integer32):
    description = ' Contains protocols both for layer3 and layer2. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101, 102, 103))
    namedValues = NamedValues(("ip", 1), ("ipx", 2), ("at", 3), ("ipv6", 4), ("mode-llc", 101), ("mode-snap", 102), ("mode-ethernetii", 103))

class Hh3cvProtocolVlanProtocolSubType(TextualConvention, Integer32):
    description = ' combine with Hh3cvProtocolVlanProtocolType. ethernetii(2), llc(3), raw(4), snap(5) are used when the value of Hh3cvProtocolVlanProtocolType is for layer 3 protocols. etype(6) is used when the value of Hh3cvProtocolVlanProtocolType is for layer 2 protocols. Detail information refers to DESCRIPTION part of hh3cProtocolVlanProtocolTypeValue. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notused", 1), ("ethernetii", 2), ("llc", 3), ("raw", 4), ("snap", 5), ("etype", 6))

hh3cProtocolVlanOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1))
hh3cProtocolNumAllVlan = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolNumAllVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolNumAllVlan.setDescription('The maximum number of protocols that can be configured on all vlans. This number may vary with products.')
hh3cProtocolNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolNumPerVlan.setDescription('The maximum number of protocols that can be configured per vlan. This number may vary with products.')
hh3cProtocolNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolNumAllPort.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolNumAllPort.setDescription('The maximum number of protocols that can be applied on all ports. This number may vary with products.')
hh3cProtocolNumPerPort = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolNumPerPort.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolNumPerPort.setDescription('The maximum number of protocols that can be applied to each port. This number may vary with products.')
hh3cProtocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5), )
if mibBuilder.loadTexts: hh3cProtocolVlanTable.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanTable.setDescription('Protocol-based VLAN configuration table.')
hh3cProtocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1), ).setIndexNames((0, "HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanVlanId"), (0, "HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanProtocolIndex"))
if mibBuilder.loadTexts: hh3cProtocolVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanEntry.setDescription('Protocol-based VLAN configuration entry.')
hh3cProtocolVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cProtocolVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanVlanId.setDescription('Vlan ID.')
hh3cProtocolVlanProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolIndex.setDescription('The protocol index value of a row in this table in the range of [0..hh3cProtocolNumPerVlan-1]. This object may not be provided during creation. In this case, a number is assigned by system automatically.')
hh3cProtocolVlanProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1, 3), Hh3cvProtocolVlanProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolType.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolType.setDescription(' Specify protocol types supported by a protocol-based VLAN. Now protocols supported on layer 3 are ip, ipx, at, ipv6, etc. Now protocols supported on layer 2 are llc, snap, ethernetii, etc. For details, see description of hh3cProtocolVlanProtocolTypeValue. ')
hh3cProtocolVlanProtocolSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1, 4), Hh3cvProtocolVlanProtocolSubType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolSubType.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolSubType.setDescription(' See description of hh3cProtocolVlanProtocolTypeValue. ')
hh3cProtocolVlanProtocolTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolTypeValue.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolTypeValue.setDescription(" The value of the configured protocol type. By default, semicolon(;) is used as a seperator between different parts in the content of the object. The relationship among hh3cProtocolVlanProtocolType, hh3cProtocolVlanProtocolSubType and hh3cProtocolVlanProtocolTypeValue is as follows. |--------------------------------------------------------------------------------------------| | hh3cProtocolVlan- | hh3cProtocolVlan- | hh3cProtocolVlanProtocolTypeValue | | ProtocolType | ProtocolSubType | | |------------------|------------------|------------------------------------------------------| | ip | notused | IP address with subnet mask in dotted decimal format.| | | | such as 10.10.11.12;255.255.0.0. By default,subnet | | | | mask is 255.255.255.0 . | |------------------|------------------|------------------------------------------------------| | ipv6 | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | at | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | ipx | ethernetii | Zero length string | | | llc | | | | raw | | | | snap | | |------------------|------------------|------------------------------------------------------| | mode-snap | notused | zero length string | | |------------------|------------------------------------------------------| | | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |------------------|------------------|------------------------------------------------------| | mode-ethernetii | notused | zero length string | | |------------------|------------------------------------------------------| | | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |------------------|------------------|------------------------------------------------------| | mode-llc | notused | the sequence of different parts is as follows. | | | | [dsap value][;ssap value][dsap value;ssap value] | | | | Both range is [0x00..0xff] | | | | | | | | For example. Suppose value of dsap and ssap are 0x09 | | | | and 0x0a. | | | | If neither dsap or ssap, the string length is zero. | | | | If dsap provided, the string is '09;' or '09' | | | | If ssap provided, the value is ';0a' | | | | If dsap and ssap provided, the value is '09;0a' | |------------------|------------------|------------------------------------------------------| ")
hh3cProtocolVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cProtocolVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanRowStatus.setDescription('The row status of this table.')
hh3cProtocolVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6), )
if mibBuilder.loadTexts: hh3cProtocolVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortTable.setDescription(' Protocol-based VLAN port information table. hh3cProtocolVlanPortVlanId refers to hh3cProtocolVlanVlanId in hh3cProtocolVlanTable. hh3cProtocolVlanPortProtocolId refers to hh3cProtocolVlanProtocolIndex in hh3cProtocolVlanTable. So if the value of hh3cProtocolVlanPortVlanId and hh3cProtocolVlanPortProtocolId have no corresponding entry in hh3cProtocolVlanTable, set operation for this table will fail. Only hybrid ports are supported by this table. Only untagged packets are supported by this table. ')
hh3cProtocolVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1), ).setIndexNames((0, "HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortIndex"), (0, "HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortVlanId"), (0, "HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortProtocolId"))
if mibBuilder.loadTexts: hh3cProtocolVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortEntry.setDescription(' Protocol-based VLAN port information entry. ')
hh3cProtocolVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cProtocolVlanPortIndex.setReference('hh3cLswPortIndex in HH3C-LSW-DEV-ADM-MIB')
if mibBuilder.loadTexts: hh3cProtocolVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortIndex.setDescription(' The maximum number is the total number of the ports supported by device. ')
hh3cProtocolVlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cProtocolVlanPortVlanId.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortVlanId.setDescription('The protocol-based VLAN ID.')
hh3cProtocolVlanPortProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cProtocolVlanPortProtocolId.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortProtocolId.setDescription('The protocol index.')
hh3cProtocolVlanPortProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 4), Hh3cvProtocolVlanProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolVlanPortProtocolType.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortProtocolType.setDescription('Refer to the description of hh3cProtocolVlanProtocolType.')
hh3cProtocolVlanPortProtocolSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 5), Hh3cvProtocolVlanProtocolSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolVlanPortProtocolSubType.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortProtocolSubType.setDescription('Refer to the description of hh3cProtocolVlanProtocolSubType.')
hh3cProtocolVlanPortTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cProtocolVlanPortTypeValue.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortTypeValue.setDescription('Refer to the description of hh3cProtocolVlanProtocolTypeValue.')
hh3cProtocolVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cProtocolVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortRowStatus.setDescription('The row status of this table.')
hh3cDifferentProtocolNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDifferentProtocolNumAllPort.setStatus('current')
if mibBuilder.loadTexts: hh3cDifferentProtocolNumAllPort.setDescription('The maximum number of different protocols that can be applied to all ports.')
hh3cProtocolVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2))
hh3cProtocolVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2, 1))
hh3cProtocolVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2, 1, 1)).setObjects(("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanOperateGroup"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanProtocolGroup"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cProtocolVlanCompliance = hh3cProtocolVlanCompliance.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanCompliance.setDescription('The compliance statement for protocol vlan MIB.')
hh3cProtocolVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2, 2))
hh3cProtocolVlanOperateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2, 2, 1)).setObjects(("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolNumAllVlan"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolNumPerVlan"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolNumAllPort"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolNumPerPort"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cDifferentProtocolNumAllPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cProtocolVlanOperateGroup = hh3cProtocolVlanOperateGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanOperateGroup.setDescription('A group of scalar objects describing the maximum number.')
hh3cProtocolVlanProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2, 2, 2)).setObjects(("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanProtocolType"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanProtocolSubType"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanProtocolTypeValue"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cProtocolVlanProtocolGroup = hh3cProtocolVlanProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanProtocolGroup.setDescription('A group of protocol vlan protocol.')
hh3cProtocolVlanPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 16, 2, 2, 3)).setObjects(("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortProtocolType"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortProtocolSubType"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortTypeValue"), ("HH3C-PROTOCOL-VLAN-MIB", "hh3cProtocolVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cProtocolVlanPortGroup = hh3cProtocolVlanPortGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cProtocolVlanPortGroup.setDescription('A group of protocol vlan port.')
mibBuilder.exportSymbols("HH3C-PROTOCOL-VLAN-MIB", hh3cDifferentProtocolNumAllPort=hh3cDifferentProtocolNumAllPort, hh3cProtocolVlanCompliances=hh3cProtocolVlanCompliances, hh3cProtocolNumPerPort=hh3cProtocolNumPerPort, hh3cProtocolVlanProtocolGroup=hh3cProtocolVlanProtocolGroup, hh3cProtocolVlanTable=hh3cProtocolVlanTable, hh3cProtocolVlan=hh3cProtocolVlan, hh3cProtocolVlanPortEntry=hh3cProtocolVlanPortEntry, hh3cProtocolVlanRowStatus=hh3cProtocolVlanRowStatus, hh3cProtocolVlanPortRowStatus=hh3cProtocolVlanPortRowStatus, hh3cProtocolVlanOperateGroup=hh3cProtocolVlanOperateGroup, PYSNMP_MODULE_ID=hh3cProtocolVlan, hh3cProtocolVlanEntry=hh3cProtocolVlanEntry, hh3cProtocolVlanPortIndex=hh3cProtocolVlanPortIndex, hh3cProtocolVlanPortGroup=hh3cProtocolVlanPortGroup, hh3cProtocolVlanVlanId=hh3cProtocolVlanVlanId, hh3cProtocolNumAllVlan=hh3cProtocolNumAllVlan, hh3cProtocolVlanConformance=hh3cProtocolVlanConformance, hh3cProtocolVlanPortVlanId=hh3cProtocolVlanPortVlanId, hh3cProtocolVlanPortTypeValue=hh3cProtocolVlanPortTypeValue, hh3cProtocolNumPerVlan=hh3cProtocolNumPerVlan, hh3cProtocolVlanProtocolType=hh3cProtocolVlanProtocolType, hh3cProtocolNumAllPort=hh3cProtocolNumAllPort, hh3cProtocolVlanProtocolIndex=hh3cProtocolVlanProtocolIndex, hh3cProtocolVlanPortProtocolId=hh3cProtocolVlanPortProtocolId, hh3cProtocolVlanCompliance=hh3cProtocolVlanCompliance, hh3cProtocolVlanOperate=hh3cProtocolVlanOperate, hh3cProtocolVlanPortProtocolType=hh3cProtocolVlanPortProtocolType, Hh3cvProtocolVlanProtocolSubType=Hh3cvProtocolVlanProtocolSubType, hh3cProtocolVlanPortTable=hh3cProtocolVlanPortTable, Hh3cvProtocolVlanProtocolType=Hh3cvProtocolVlanProtocolType, hh3cProtocolVlanPortProtocolSubType=hh3cProtocolVlanPortProtocolSubType, hh3cProtocolVlanGroups=hh3cProtocolVlanGroups, hh3cProtocolVlanProtocolTypeValue=hh3cProtocolVlanProtocolTypeValue, hh3cProtocolVlanProtocolSubType=hh3cProtocolVlanProtocolSubType)
