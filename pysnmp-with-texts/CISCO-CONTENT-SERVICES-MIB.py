#
# PySNMP MIB module CISCO-CONTENT-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CONTENT-SERVICES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
MplsVpnId, = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, Bits, NotificationType, IpAddress, ObjectIdentity, Integer32, Counter32, MibIdentifier, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Bits", "NotificationType", "IpAddress", "ObjectIdentity", "Integer32", "Counter32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64")
TimeStamp, RowStatus, TimeInterval, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "TimeInterval", "DisplayString", "TruthValue", "TextualConvention")
ciscoContentServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 597))
ciscoContentServicesMIB.setRevisions(('2012-11-09 00:00', '2012-04-27 00:00', '2012-02-13 00:00', '2011-02-05 00:00', '2010-01-28 00:00', '2009-08-12 00:00', '2009-01-28 00:00', '2008-09-26 00:00', '2008-04-21 00:00', '2007-03-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoContentServicesMIB.setRevisionsDescriptions(('Added following objects in ccsGlobal CfgTable: ccsgsUserEntriesThreshold, ccsgsSessionThreshold. Added following object in ciscoContentServicesNotifInfoGroup: ccsgUserSessionSeverityNotifInfo. Added following objects in ccsNotifCfgTable: ccsUserEntriesThresholdNotifEnabled, ccsSessionThresholdNotifEnabled. Added following object groups to ciscoContentServicesMIBGroups. ciscoContentServicesGlobalCfgGroupSup3, ciscoContentServicesNotifEnableGroupSup3, ciscoContentServicesNotifGroupSup3, ciscoContentServicesNotifInfoGroupSup1. Added following new compliance statement to ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev9. Deprecated the following old compliance statement from ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev8.', 'Added following objects in ccsGlobalStatsTable: ccsgsHTTPHdrObscure, ccsgsHTTPHdrBlock. Added following object groups to ciscoContentServicesMIBGroups. ciscoContentServicesGlobalHTTPGroup. Added following new compliance statement to ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev8. Deprecated the following old compliance statement from ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev7.', 'Added following objects in ccsGlobalStatsTable: ccsgsGxRuleActivationFail, ccsgsGxRuleDeactivationFail, ccsgsGxRevalidationSuccess, ccsgsGxRevalidationFail. Added following object groups to ciscoContentServicesMIBGroups. ciscoContentServicesGlobalStatsGroupSup2. Added following new compliance statement to ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev7. Deprecated the following old compliance statement from ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev6.', 'Added ccsLoadStatRadiusTable with following objects: ccsLoadStatHCRadiusStartAllowedRate, ccsLoadStatHCRadiusStartDenialRate. Added ccsLoadStatUserDBTable with following objects: ccsLoadStatHCUserDBReqAllowedRate, ccsLoadStatHCUserDBReqDenialRate. Added ccsLoadStatSessionTable with following objects: ccsLoadStatHCSessionCreateAllowedRate, ccsLoadStatHCSessionCreateDenialRate Added ccsLoadStatBMATable with following objects: ccsLoadStatHCBMAMsgsAllowedRate, ccsLoadStatHCBMAMsgsDenialRate Added ccsLoadStatQuotaMgrTable with following objects: ccsLoadStatHCQuotaMgrMsgsAllowedRate, ccsLoadStatHCQuotaMgrMsgsDenialRate Added ccsLoadStatGxEventTable with following objects: ccsLoadStatHCGxEventsAllowedRate, ccsLoadStatHCGxEventsDenialRate. Added following object groups to ciscoContentServicesMIBGroups: ciscoContentServicesLoadStatRadiusGroupSup1, ciscoContentServicesLoadStatUserDBGroupSup1, ciscoContentServicesLoadStatSessionGroupSup1, ciscoContentServicesLoadStatBMAGroupSup1, ciscoContentServicesLoadStatQuotaMgrGroupSup1, ciscoContentServicesLoadStatGxEventGroupSup1. Deprecated the following old object groups from ciscoContentServicesMIBGroups: ciscoContentServicesLoadStatRadiusGroup, ciscoContentServicesLoadStatUserDBGroup, ciscoContentServicesLoadStatSessionGroup, ciscoContentServicesLoadStatBMAGroup, ciscoContentServicesLoadStatQuotaMgrGroup, ciscoContentServicesLoadStatGxEventGroup. Added following new compliance statement to ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev6. Deprecated the following old compliance statement from ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev5.', 'Added ccsBillingPlanStatsTable Added OBJECT-GROUP ciscoContentServicesBillingPlanStatsGroup Added MODULE-COMPLIANCE ciscoContentServicesMIBComplianceRev5', 'Added ccsProtocolStatsTable with following objects: ccspsTransaction ccspsHCTransaction ccspsTransactionRate ccspsTransactionRateHighWater ccspsTransactionRateHighWaterResetTime ccspsTransactionRateHighWaterTime ccspsSubOutPackets ccspsHCSubOutPackets ccspsSubOutPacketRate ccspsSubOutPacketRateHighWater ccspsSubOutPacketRateHighWaterResetTime ccspsSubOutPacketRateHighWaterTime ccspsNetOutPackets ccspsHCNetOutPackets ccspsNetOutPacketRate ccspsNetOutPacketRateHighWater ccspsNetOutPacketRateHighWaterResetTime ccspsNetOutPacketRateHighWaterTime ccspsSubOutBytes ccspsHCSubOutBytes ccspsSubOutBitRate ccspsSubOutBitRateHighWater ccspsSubOutBitRateHighWaterResetTime ccspsSubOutBitRateHighWaterTime ccspsNetOutBytes ccspsHCNetOutBytes ccspsNetOutBitRate ccspsNetOutBitRateHighWater ccspsNetOutBitRateHighWaterResetTime ccspsNetOutBitRateHighWaterTime Added ccsLoadStatGxEventTable with following objects: ccsLoadStatGxEventsAllowed ccsLoadStatHCGxEventsAllowed ccsLoadStatGxEventsAllowedRate ccsLoadStatGxEventsAllowedRateHighWater ccsLoadStatHCGxEventsAllowedRateHighWater ccsLoadStatGxEventsIPCQueueDepthTolerance ccsLoadStatGxEventsDenied ccsLoadStatHCGxEventsDenied ccsLoadStatGxEventsDenialRate ccsLoadStatGxEventsDenialRateHighWater ccsLoadStatHCGxEventsDenialRateHighWater. Added following object groups to ciscoContentServicesMIBGroups: ciscoContentServiceProtocolStatsGroup ciscoContentServicesLoadStatGxEventGroup Added following new compliance statement to ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev4.', 'Added following objects to ccsGlobalCfgTable: ccsNetServerAlarmUpdateTimer ccsNetServerResponseFailAlarmThreshold ccsNetServerResponseFailClearThreshold ccsNetServerFirstPayloadResponseTime ccsNetServerResponseTimeFailAlarmThreshold ccsNetServerResponseTimeFailClearThreshold ccsProtocolParseFailAlarmThreshold ccsProtocolParseFailClearThreshold. Added following object to ccsNotifCfgTable: ccsAdControlNotifEnabled. Added following object to ciscoContentServicesMIBObjects: ccsNotifInfo. Added following objects to ciscoContentServicesNotifGroup: ciscoContentServicesNetServerResponseFailExceeded, ciscoContentServicesNetServerResponseTimeExceeded ciscoContentServicesProtocolParseFailExceeded ciscoContentServicesNetServerResponseFailAlarmCleared ciscoContentServicesNetServerResponseTimeAlarmCleared ciscoContentServicesProtocolParseFailAlarmCleared Added ciscoContentServicesNotifInfoGroup with following objects: ccsTPIndexNotifInfo ccsServiceNameNotifInfo ccsContentNameNotifInfo ccsPolicyNameNotifInfo ccsNetServerIpAddrTypeNotifInfo ccsNetServerIpAddrNotifInfo ccsNetServerPortNotifInfo ccsSubscriberIpAddrTypeNotifInfo ccsSubscriberIpAddrNotifInfo ccsSubscriberPortNotifInfo ccsNetServerResponseFailCountNotifInfo ccsNetServerResponseTimeFailCountNotifInfo ccsProtocolParseFailCountNotifInfo Added following object groups to ciscoContentServicesMIBGroups: ciscoContentServicesGlobalCfgGroupSup2 ciscoContentServicesNotifEnableGroupSup2 ciscoContentServicesNotifGroupSup2 ciscoContentServicesNotifInfoGroup Added following new compliance statement to ciscoContentServicesMIBCompliances: ciscoContentServicesMIBComplianceRev3', 'Added following object to ccsGlobalCfgTable. ccsgsUserThreshold. Added following object to ccsNotifCfgTable. ccsUserThresholdExceededNotifEnabled Added following object to ciscoContentServicesNotifGroup. ciscoContentServicesUserThresholdExceeded. Added following object groups to ciscoContentServicesMIBGroups. ciscoContentServicesGlobalCfgGroupSup1, ciscoContentServicesNotifEnableGroupSup1, ciscoContentServicesNotifGroupSup1 Added following new compliance statement to ciscoContentServicesMIBCompliances. ciscoContentServicesMIBComplianceRev2', 'Added following object to ccsGlobalStatsTable. ccsgsGTPBMARejected, ccsgsHCGTPBMARejected, ccsgsGTPBMADropped, ccsgsHCGTPBMADropped, ccsgsGTPBMARetransmit, ccsgsHCGTPBMARetransmit, ccsgsGTPQuotaMgrRejected, ccsgsHCGTPQuotaMgrRejected, ccsgsGTPQuotaMgrDropped, ccsgsHCGTPQuotaMgrDropped, ccsgsGTPQuotaMgrRetransmit, ccsgsHCGTPQuotaMgrRetransmit, ccsgsGTPBMARateInterval, ccsgsGTPQuotaMgrRateInterval Added following object to ccsBMATable. ccsBMAPacketRate, ccsBMAAckRate Added following object to ccsQuotaMgrTable. ccsQuotaMgrPacketRate, ccsQuotaMgrAckRate Added following OID subtree in ccsStats to support load statistics. ccsLoadStatistics Added following object groups to ciscoContentServicesMIBGroups. ciscoContentServicesGlobalStatsGroupSup1, ciscoContentServicesBMAGroupSup1, ciscoContentServicesQuotaMgrGroupSup1 Added following new compliance statement to ciscoContentServicesMIBCompliances. ciscoContentServicesMIBComplianceRev1', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoContentServicesMIB.setLastUpdated('201211090000Z')
if mibBuilder.loadTexts: ciscoContentServicesMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoContentServicesMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA tel: +1 800 553-NETS E-Mail: cs-csg@cisco.com')
if mibBuilder.loadTexts: ciscoContentServicesMIB.setDescription('Content Service is a capability to examine IP/TCP/UDP headers, payload and enable billing based on the content being provided. Abbreviations: BMA Billing Mediation Agent. A BMA is the server that receives accounting records. QuotaMgr Quota Manager. This is a server that receives requests and returns a billing quota for prepaid billing charges. VRF Virtual Routing and Forwarding UDB User Database. The user database is a service that translates a client IP address into a user identifier. GPRS General Packet Radio Service. GTP GPRS Tunneling Protocol. Transfer Protocol for Charging Detail Records to BMAs and billing quota from quota managers. IPC Inter Processor Communicaiton. Network Server The service provider who provides the online service. AdControl The Cisco product to enable service providers to share subscriber data with advertising providers in a controlled and secure manner. Gx Gx is a reference point located between the Policy and Charging Rules Function (PCRF) and the Policy and Charging Enforcement Function (PCEF). Three types of networks namely, 3G UMTS, 4G LTE and 4G WiMax use the 3GPP Gx interface as the standard policy control interface. NBAR Network Based Application Recognition.')
ciscoContentServicesMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 0))
ciscoContentServicesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1))
ciscoContentServicesMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 2))
ccsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1))
ccsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2))
ccsNotifConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3))
ccsNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4))
class CcsServerPriority(TextualConvention, Integer32):
    description = 'This convention applies to billing mediation agents and quota managers. When multiple servers of the same type are defined, the priority defines the order of activation of the servers. The lowest priority value designates the highest priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1000)

ccsGlobalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1), )
if mibBuilder.loadTexts: ccsGlobalCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccsGlobalCfgTable.setDescription('This table contains configuration information for content billing feature.')
ccsGlobalCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsGlobalCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: ccsGlobalCfgTableEntry.setDescription('Each row in this table contains configuration information on content billing feature. entPhysicalIndex identifies the entity that that provides the content services.')
ccsgcBMALostRecordTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 2), TimeInterval().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgcBMALostRecordTimer.setStatus('current')
if mibBuilder.loadTexts: ccsgcBMALostRecordTimer.setDescription('The time interval for monitoring the lost-record event (ccsBMALostRecordEvent) of a billing mediation agent (BMA). A notification is issued when the BMA record is lost. An interval timer is started with this value. When the timer expires the lost record count (ccsBMALostRecords) is checked. If the lost record count has increased since the previous the detection, the timer is restarted to monitor another period. If the lost record count has not increased since the previous detection, a final notification is sent to indicate that the condition has cleared. The interval value ranges from 1 to 2147483647.')
ccsgcQuotaMgrLostRecordTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 3), TimeInterval().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgcQuotaMgrLostRecordTimer.setStatus('current')
if mibBuilder.loadTexts: ccsgcQuotaMgrLostRecordTimer.setDescription('The time interval for monitoring the lost-record event (ccsQuotaMgrLostRecordEvent) of a quota manager. A notification is issued when quota manager record is lost. An interval timer is started with this value. When the timer expires the lost record count (ccsQuotaMgrLostRecords) is checked. If the lost record count has increased since the previous the detection, the timer is restarted to monitor another period. If the lost record count has not increased since the previous detection, a final notification is sent to indicate that the condition has cleared. The interval value ranges from 1 to 2147483647.')
ccsgsUserThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 4), Unsigned32()).setUnits('users').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsUserThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsgsUserThreshold.setDescription('The maximum number of users that is contractually allowed. When the actual number of user exceeds the contractually established limit, a notification (ciscoContentServicesUserThresholdExceeded) is issued.')
ccsAdControlAlarmUpdateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 5), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsAdControlAlarmUpdateTimer.setStatus('current')
if mibBuilder.loadTexts: ccsAdControlAlarmUpdateTimer.setDescription("The time interval to monitor the AdControl related errors. The alarm and clear notifications are enabled when ccsAdControlNotifEnabled is set to 'true'. The alarm notifications are specified by ciscoContentServicesNetServerResponseFailExceeded, ciscoContentServicesNetServerResponseTimeExceeded, ciscoContentServicesProtocolParseFailExceeded. The clear notifications are specified ciscoContentServicesNetServerResponseFailAlarmCleared, ciscoContentServicesNetServerResponseTimeAlarmCleared, ciscoContentServicesProtocolParseFailAlarmCleared The AdControl will start a timer for each type of errors. Each error has a counter. The counters for the errors are ccsNetServerResponseFailCountNotifInfo, ccsNetServerResponseTimeFailCountNotifInfo, ccsProtocolParseFailCountNotifInfo. An alarm notification will be generated if the error exceeds the alarm threshold within the time interval and no such alarm has been raised yet. The timer will be restarted after an alarm notification is generated. When the timer expires, a clear notification will be generated if the error is equal to or less than the clear threshold and the alarm exists. The alarm thresholds are specified by ccsNetServerResponseFailAlarmThreshold, ccsNetServerResponseTimeFailAlarmThreshold, ccsProtocolParseFailAlarmThreshold. The clear thresholds are specified by ccsNetServerResponseFailClearThreshold, ccsNetServerResponseTimeFailClearThreshold, ccsProtocolParseFailClearThreshold. When the timer is changed, the alarm counters will be reset and the related alarms will be cleared if exist.")
ccsNetServerResponseFailAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(5)).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseFailAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerResponseFailAlarmThreshold.setDescription("This object specifies the alarm threshold of the number of the failed responses specified by ccsNetServerResponseFailCountNotifInfo from the network server in the time interval (ccsAdControlAlarmUpdateTimer). When ccsAdControlNotifEnabled is set to 'true', the count is greater than the threshold, and no alarm notification specified by ciscoContentServicesNetServerResponseFailExceeded has been issued within the timer interval, the alarm notification will be generated and the timer will be re-started. The threshold should be greater than the clear threshold ccsNetServerResponseFailClearThreshold. When the threshold is changed, the counter will be reset, the alarm will be cleared, and the timer will be re-started.")
ccsNetServerResponseFailClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967293))).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseFailClearThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerResponseFailClearThreshold.setDescription("This object specifies the clear threshold associated with ccsNetServerResponseFailAlarmThreshold. If ccsAdControlNotifEnabled is set to 'true', the count (ccsNetServerResponseFailCountNotifInfo) is equal to or lower than the threshold when the timer (ccsAlarmUpdateTimer) expires and the alarm specified by ciscoContentServicesNetServerResponseFailExceeded exists, the clear notification specified by ciscoContentServicesNetServerResponseFailAlarmCleared is generated. The threshold should be less than the alarm threshold specified by ccsNetServerResponseFailAlarmThreshold. When the threshold is changed, the counter will be reset, the alarm will be cleared if exists, and the timer will be re-started.")
ccsNetServerFirstPayloadResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 8), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerFirstPayloadResponseTime.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerFirstPayloadResponseTime.setDescription('The amount of time to wait for the first payload packet from the network server. The ciscoContentServicesNetServerResponseTimeExceeded notification is generated when the first payload response is exceeded by the network server. When the time interval is changed, the counter specified by ccsNetServerResponseTimeFailCountNotifInfo will be reset and the alarm specified by ciscoContentServicesNetServerResponseTimeExceeded will be cleared if exists.')
ccsNetServerResponseTimeFailAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(5)).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailAlarmThreshold.setDescription("This object specifies the alarm threshold of the number of the responses specified by ccsNetServerResponseTimeFailCountNotifInfo for the first payload packet from the network server exceeds the response time ccsNetServerFirstPayloadResponseTime within the time interval (ccsAdControlAlarmUpdateTimer). When ccsAdControlNotifEnabled is set to 'true', the count is greater than the threshold and no alarm notification specified by ciscoContentServicesNetServerResponseTimeExceeded has been issued, the alarm notification will be generated and the timer will be re-started. The threshold should be greater than the clear threshold ccsNetServerResponseTimeFailClearThreshold. When the threshold is changed, the counter will be reset, the alarm will be cleared if exists, and the timer will be re-started.")
ccsNetServerResponseTimeFailClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967293))).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailClearThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailClearThreshold.setDescription("This object specifies the clear threshold associated with ccsNetServerResponseTimeFailAlarmThreshold. If ccsAdControlNotifEnabled is set to 'true', the count (ccsNetServerResponseTimeFailCountNotifInfo) is equal to or lower than the threshold when the timer (ccsAdControlAlarmUpdateTimer) expires and the alarm specified by ciscoContentServicesNetServerResponseTimeExceeded exists, the clear notification specified by ciscoContentServicesNetServerResponseTimeAlarmCleared is generated. The threshold should be less than the alarm threshold specified by ccsNetServerResponseTimeFailAlarmThreshold. When the threshold is changed, the counter will be reset, the alarm will be cleared, and the timer will be re-started.")
ccsProtocolParseFailAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(5)).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsProtocolParseFailAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsProtocolParseFailAlarmThreshold.setDescription("This object specifies the alarm threshold of the number of errors specified by ccsProtocolParseFailCountNotifInfo fail the protocol parsing in the time interval (ccsAdControlAlarmUpdateTimer). When ccsAdControlNotifEnabled is set to 'true', the count (ccsProtocolParseFailCountNotifInfo) is greater than the thresholdand and no alarm notification specified by ciscoContentServicesProtocolParseFailExceeded has been issued within the time interval, the alarm notification will be generated and the timer will be re-started. The threshold should be greater than the clear threshold ccsProtocolParseFailClearThreshold. When the threshold is changed, the counter will be reset, the alarm will be cleared, and the timer will be re-started.")
ccsProtocolParseFailClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967293))).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsProtocolParseFailClearThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsProtocolParseFailClearThreshold.setDescription("This object specifies the clear threshold associated with ccsProtocolParseFailAlarmThreshold. If ccsAdControlNotifEnabled is set to 'true', the count (ccsProtocolParseFailCountNotifInfo) is equal to or lower than the threshold when the timer (ccsAdControlAlarmUpdateTimer) expires and the alarm specified by ciscoContentServicesProtocolParseFailExceeded exists, the clear notification specified by ciscoContentServicesProtocolParseFailAlarmCleared is generated. The threshold should be less than the alarm threshold specified by ccsProtocolParseFailAlarmThreshold. When the threshold is changed, the counter will be reset, the alarm will be cleared, and the timer will be re-started.")
ccsgsUserEntriesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(300000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsUserEntriesThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsgsUserEntriesThreshold.setDescription('This object specifies alarm threshold for the maximum number of user entries that are allowed.')
ccsgsSessionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsSessionThreshold.setStatus('current')
if mibBuilder.loadTexts: ccsgsSessionThreshold.setDescription('This object specifies alarm threshold for the maximum number of sessions that are allowed.')
ccsGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1), )
if mibBuilder.loadTexts: ccsGlobalStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccsGlobalStatsTable.setDescription('This table contains the global statistical information in content billing feature.')
ccsGlobalStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsGlobalStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: ccsGlobalStatsTableEntry.setDescription('Each row in this table contains statistical information for content billing feature. entPhysicalIndex identifies the entity that that provides the content services.')
ccsgsUserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 1), Gauge32()).setUnits('users').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsUserCurrent.setStatus('current')
if mibBuilder.loadTexts: ccsgsUserCurrent.setDescription('The total number of users with one or more active sessions on the system.')
ccsgsUserHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 2), Gauge32()).setUnits('users').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsUserHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsgsUserHighWater.setDescription('The highest number of active users as reported by ccsgsUserCurrent object since the object was reset as indicated by ccsgsUserHighWaterResetTime. The only write operation allowed is to reset the value to 0.')
ccsgsUserHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsUserHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccsgsUserHighWaterResetTime.setDescription('The time stamp at which the ccsgsUserHighWater object was last reset to 0.')
ccsgsSessionCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 4), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsSessionCurrent.setStatus('current')
if mibBuilder.loadTexts: ccsgsSessionCurrent.setDescription('The total number of sessions on the system. A session corresponds to a TCP/UDP flow.')
ccsgsSessionHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsSessionHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsgsSessionHighWater.setDescription('The highest number of active sessions as reported by the ccsgsSessionCurrent object since object was reset as indicated by ccsgsSessionHighWaterResetTime. The only write operation allowed is to reset the value to zero.')
ccsgsSessionHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsSessionHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccsgsSessionHighWaterResetTime.setDescription('The time stamp at which the ccsgsSessionHighWater object was last reset to 0.')
ccsgsGTPBMARejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPBMARejected.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPBMARejected.setDescription('Number of messages received from all the BMAs with reject cause code.')
ccsgsHCGTPBMARejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPBMARejected.setStatus('current')
if mibBuilder.loadTexts: ccsgsHCGTPBMARejected.setDescription('This object is a 64-bit version of ccsgsGTPBMARejected.')
ccsgsGTPBMADropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPBMADropped.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPBMADropped.setDescription('Total Number of messages dropped destined for any of the BMAs.')
ccsgsHCGTPBMADropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 10), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPBMADropped.setStatus('current')
if mibBuilder.loadTexts: ccsgsHCGTPBMADropped.setDescription('This object is a 64-bit version of ccsgsGTPBMADropped.')
ccsgsGTPBMARetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPBMARetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPBMARetransmit.setDescription('The number of messages retransmitted to all BMAs.')
ccsgsHCGTPBMARetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 12), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPBMARetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsgsHCGTPBMARetransmit.setDescription('This object is a 64-bit version of ccsgsGTPBMARetransmit.')
ccsgsGTPQuotaMgrRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRejected.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRejected.setDescription('Number of messages received from all the Quota Managers with reject cause code.')
ccsgsHCGTPQuotaMgrRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 14), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrRejected.setStatus('current')
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrRejected.setDescription('This object is a 64-bit version of ccsgsGTPQuotaMgrRejected.')
ccsgsGTPQuotaMgrDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 15), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrDropped.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrDropped.setDescription('Total Number of messages dropped destined for any of the Quota Managers.')
ccsgsHCGTPQuotaMgrDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 16), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrDropped.setStatus('current')
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrDropped.setDescription('This object is a 64-bit version of ccsgsGTPQuotaMgrDropped.')
ccsgsGTPQuotaMgrRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 17), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRetransmit.setDescription('The number of messages retransmitted to all the Quota Managers.')
ccsgsHCGTPQuotaMgrRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 18), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrRetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrRetransmit.setDescription('This object is a 64-bit version of ccsgsGTPQuotaMgrRetransmit.')
ccsgsGTPBMARateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 19), TimeInterval().clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsGTPBMARateInterval.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPBMARateInterval.setDescription('The duration of the time interval in ccsBMAPacketRate and ccsBMAAckRate.')
ccsgsGTPQuotaMgrRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 20), TimeInterval().clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRateInterval.setStatus('current')
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRateInterval.setDescription('The duration of the time interval in ccsQuotaMgrPacketRate and ccsQuotaMgrAckRate.')
ccsgsGxRuleActivationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 21), Counter32()).setUnits('Gx Rule').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRuleActivationFail.setStatus('current')
if mibBuilder.loadTexts: ccsgsGxRuleActivationFail.setDescription('The number of rules that PCEF failed to activate. PCRF sends rule activation time after which PCEF is supposed to activate the 3GPP charging rule. If PCEF fails to activate the rule this counter is increased.')
ccsgsGxRuleDeactivationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 22), Counter32()).setUnits('Gx Rule').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRuleDeactivationFail.setStatus('current')
if mibBuilder.loadTexts: ccsgsGxRuleDeactivationFail.setDescription('The number of rules that PCEF failed to deactivate. PCRF sends rule deactivation time after which PCEF is supposed to deactivate the 3GPP charging rule. If PCEF fails to deactivate the rule this counter is increased.')
ccsgsGxRevalidationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 23), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRevalidationSuccess.setStatus('current')
if mibBuilder.loadTexts: ccsgsGxRevalidationSuccess.setDescription('The number of CCR messages sent by PCEF during revalidation. PCRF sends rule revalidation time after which PCEF is supposed to send the CCR message requesting for charging rules. If PCEF sends CCR message after revalidation time this counter is increased.')
ccsgsGxRevalidationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 24), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRevalidationFail.setStatus('current')
if mibBuilder.loadTexts: ccsgsGxRevalidationFail.setDescription('The number of CCR messages which were not sent by PCEF during revalidation. PCRF sends rule revalidation time after which PCEF is supposed to send the CCR message requesting for charging rules. If PCEF fails to send CCR message after revalidation time this counter is increased.')
ccsgsHTTPHdrObscure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 25), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHTTPHdrObscure.setStatus('current')
if mibBuilder.loadTexts: ccsgsHTTPHdrObscure.setDescription('This object indicates the number of HTTP requests obscured by the PCEF. PCEF receives a HTTP request which includes a header, if received header is matched with configured list for obscure action headers, obscure the header in outgoing HTTP request such that server does not recognize this header and this counter is increased.')
ccsgsHTTPHdrBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 26), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHTTPHdrBlock.setStatus('current')
if mibBuilder.loadTexts: ccsgsHTTPHdrBlock.setDescription('This object indicates the number of HTTP requests blocked by the PCEF. PCEF receives a HTTP request which includes a header, if received header is matched with configured list for block action headers, block the HTTP request and this counter is increased.')
ccsUserDbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2), )
if mibBuilder.loadTexts: ccsUserDbTable.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbTable.setDescription('Table of User Database Server. Entries are added to this table via ccsUserDbRowStatus in accordance with the RowStatus convention.')
ccsUserDbTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbVrfName"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbIpAddrType"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbIpAddr"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbPort"))
if mibBuilder.loadTexts: ccsUserDbTableEntry.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbTableEntry.setDescription('Entry that defines parameters for a User Database. The User Database is a server that returns a userid given an IP address received in request. entPhysicalIndex identifies the entity that that provides the content services.')
ccsUserDbVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: ccsUserDbVrfName.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbVrfName.setDescription('Name of the VRF over which communication with User Data Server occurs. If no VRF is specified, the global routing table is used.')
ccsUserDbIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccsUserDbIpAddrType.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbIpAddrType.setDescription('This object specifies the type of the address specified by ccsUserDbIpAddr.')
ccsUserDbIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccsUserDbIpAddr.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbIpAddr.setDescription('The IP address of the user database.')
ccsUserDbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: ccsUserDbPort.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbPort.setDescription('The listening UDP port of the user database.')
ccsUserDbState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("active", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbState.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbState.setDescription("State of the user database. 'reset' - State before the database is determined to be active. 'active' - The database is available and processing requests. 'failed' - The database has failed and is not processing requests.")
ccsUserDbRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 6), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbRequests.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbRequests.setDescription('Number of user database requests.')
ccsUserDbHCRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 7), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCRequests.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbHCRequests.setDescription('Number of user database requests. This object is a 64-bit version of ccsUserDbRequests.')
ccsUserDbUidsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 8), Counter32()).setUnits('returned identifiers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbUidsReturned.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbUidsReturned.setDescription('Number of user identifiers returned.')
ccsUserDbHCUidsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 9), Counter64()).setUnits('returned identifiers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCUidsReturned.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbHCUidsReturned.setDescription('Number of user identifiers returned. This object is a 64-bit version of ccsUserDbHCUidsReturned.')
ccsUserDbReqResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 10), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbReqResent.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbReqResent.setDescription('Number of database requests resent.')
ccsUserDbHCReqResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCReqResent.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbHCReqResent.setDescription('Number of database requests resent. This object is a 64-bit version of ccsUserDbReqResent.')
ccsUserDbReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 12), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbReqTimeouts.setDescription('Number of user database requests that have timed out.')
ccsUserDbHCReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 13), Counter64()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbHCReqTimeouts.setDescription('Number of user database requests that have timed out. This object is a 64-bit version of ccsUserDbReqTimeouts.')
ccsUserDbReqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 14), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbReqErrors.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbReqErrors.setDescription('Number of errors returned on user database requests.')
ccsUserDbHCReqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 15), Counter64()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCReqErrors.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbHCReqErrors.setDescription('Number of errors returned on user database requests. This object is a 64-bit version of ccsUserDbReqErrors.')
ccsUserDbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsUserDbRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbRowStatus.setDescription('This object is used by the manager to create or delete the row entry in the ccsUserDbTable following the RowStatus textual convention. This row can be deleted regardless of the value of ccsUserDbState. If all ccsUserDbTable rows have been deleted, then other mechanisms, such as intercepting RADIUS flows, may be used to associate a user name with an IP address. If this is not possible, then the user name will be absent from generated accounting records.')
ccsBMATable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3), )
if mibBuilder.loadTexts: ccsBMATable.setStatus('current')
if mibBuilder.loadTexts: ccsBMATable.setDescription("A table of billing mediation agents (BMAs). Columnar objects can be modified when the row is 'active'. Rows can be created and destroyed. Entries are added to this table via ccsBMARowStatus in accordance with the RowStatus convention. Multiple BMAs can be configured for the purposes of load sharing and redundancy in the event of failure.")
ccsBMATableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAVrfName"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAIpAddrType"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAIpAddr"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAPort"))
if mibBuilder.loadTexts: ccsBMATableEntry.setStatus('current')
if mibBuilder.loadTexts: ccsBMATableEntry.setDescription('Entry that defines parameters for a mediation agent. entPhysicalIndex identifies the entity that that provides the content services.')
ccsBMAVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: ccsBMAVrfName.setStatus('current')
if mibBuilder.loadTexts: ccsBMAVrfName.setDescription('Name of the VRF over which communication with Agent occurs. If no VRF is specified, the global routing table is used.')
ccsBMAIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccsBMAIpAddrType.setStatus('current')
if mibBuilder.loadTexts: ccsBMAIpAddrType.setDescription('This object specifies the type of the address specified by ccsBMAIpAddr.')
ccsBMAIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccsBMAIpAddr.setStatus('current')
if mibBuilder.loadTexts: ccsBMAIpAddr.setDescription('The IP address of a BMA.')
ccsBMAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: ccsBMAPort.setStatus('current')
if mibBuilder.loadTexts: ccsBMAPort.setDescription('The UDP port of a BMA.')
ccsBMAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 5), CcsServerPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsBMAPriority.setStatus('current')
if mibBuilder.loadTexts: ccsBMAPriority.setDescription("The activation priority of a BMA. BMAs are activated in highest priority order. If multiple BMAs are active for load sharing, the highest priority BMAs available are activated. If an active BMA fails, the next highest priority BMA (in 'standby' state) is activated.")
ccsBMAState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standby", 1), ("failed", 2), ("active", 3), ("echowait", 4), ("nawait", 5), ("suspended", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAState.setStatus('current')
if mibBuilder.loadTexts: ccsBMAState.setDescription("States of a billing mediation agent. 'standby' - The server is prepared to become active. 'failed' - The server has failed to respond to requests. 'active' - The server has been activated to receive requests. 'echowait' - An echo request to this billing mediation agent and is waiting for a response. 'nawait' - A node-alive request to this billing mediation agent and is waiting for a response. 'suspended' - The server has receive a stop request from the operator.")
ccsBMALostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 7), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMALostRecords.setStatus('current')
if mibBuilder.loadTexts: ccsBMALostRecords.setDescription('Total number of lost records since system initialization or the last time the counter wrapped.')
ccsBMAHCLostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 8), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCLostRecords.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHCLostRecords.setDescription('Total number of lost records since system initialization or the last time the counter wrapped. This object is a 64-bit version of ccsBMALostRecords.')
ccsBMATotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 9), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMATotalSent.setStatus('current')
if mibBuilder.loadTexts: ccsBMATotalSent.setDescription('Total number of records sent to the billing mediation agent.')
ccsBMAHCTotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 10), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCTotalSent.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHCTotalSent.setDescription('Total number of records sent to the billing mediation agent. This object is a 64-bit version of ccsBMATotalSent.')
ccsBMAFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 11), Counter32()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAFailAck.setStatus('current')
if mibBuilder.loadTexts: ccsBMAFailAck.setDescription('Number of acknowledgments received from the billing mediation agent for which there are no outstanding requests.')
ccsBMAHCFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 12), Counter64()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCFailAck.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHCFailAck.setDescription('Number of acknowledgments received from the billing mediation agent for which there are no outstanding requests. This object is a 64-bit version of ccsBMAFailAck.')
ccsBMAOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 13), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAOutstanding.setStatus('current')
if mibBuilder.loadTexts: ccsBMAOutstanding.setDescription('Current number of messages waiting to be ACKed.')
ccsBMAHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 14), Gauge32()).setUnits('messages').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsBMAHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHighWater.setDescription('The highest number of messages waiting for ACKs as reported by ccsBMAOutstanding object since object was reset as indicated by ccsBMAHighWaterResetTime. The only write operation allowed is to reset the value to 0.')
ccsBMAHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHighWaterResetTime.setDescription('The time stamp at which the ccsBMAHighWater object was last reset to 0.')
ccsBMABadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 16), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMABadRecord.setStatus('current')
if mibBuilder.loadTexts: ccsBMABadRecord.setDescription('The number of bad records received. These are records in which an error was detected while attempting to decode the contents.')
ccsBMAHCBadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 17), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCBadRecord.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHCBadRecord.setDescription('The number of bad records received. These are records in which an error was detected while attempting to decode the contents. This object is a 64-bit version of ccsBMABadRecord.')
ccsBMARetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 18), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMARetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsBMARetransmit.setDescription('The number of messages retransmitted to the billing mediation agent.')
ccsBMAHCRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 19), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCRetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsBMAHCRetransmit.setDescription('The number of messages retransmitted to the billing mediation agent. This object is a 64-bit version of ccsBMARetransmit.')
ccsBMARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsBMARowStatus.setStatus('current')
if mibBuilder.loadTexts: ccsBMARowStatus.setDescription('This object is used by the manager to create or delete the row entry in the ccsBMATable following the RowStatus textual convention. This row can be deleted regardless of the value of ccsBMAState. Requests queued for the deleted BMA are requeued to another BMA.')
ccsBMAPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 21), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAPacketRate.setStatus('current')
if mibBuilder.loadTexts: ccsBMAPacketRate.setDescription('Number of packets sent to the BMA per second calculated over the interval indicated by ccsgsGTPBMARateInterval object.')
ccsBMAAckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 22), Gauge32()).setUnits('acknowledgments').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAAckRate.setStatus('current')
if mibBuilder.loadTexts: ccsBMAAckRate.setDescription('Number of acknowledgments received from the BMA per second calculated over the interval indicated by ccsgsGTPBMARateInterval object.')
ccsQuotaMgrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4), )
if mibBuilder.loadTexts: ccsQuotaMgrTable.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrTable.setDescription("Table of quota managers. Columnar objects can be modified when the row is 'active'. Rows can be created and destroyed. Entries are added to this table via ccsQuotaMgrRowStatus in accordance with the RowStatus convention.")
ccsQuotaMgrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrVrfName"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrIpAddrType"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrIpAddr"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrPort"))
if mibBuilder.loadTexts: ccsQuotaMgrTableEntry.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrTableEntry.setDescription('Entry that defines parameters for a quota manager. entPhysicalIndex identifies the entity that that provides the content services.')
ccsQuotaMgrVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: ccsQuotaMgrVrfName.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrVrfName.setDescription('Name of the VRF over which communication with Quota Server occurs. If no VRF is specified, the global routing table is used.')
ccsQuotaMgrIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccsQuotaMgrIpAddrType.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrIpAddrType.setDescription('This object specifies the type of the address specified by ccsQuotaMgrIpAddr.')
ccsQuotaMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccsQuotaMgrIpAddr.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrIpAddr.setDescription('The IP address of a quota manager.')
ccsQuotaMgrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: ccsQuotaMgrPort.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrPort.setDescription('The UDP port of a quota manager.')
ccsQuotaMgrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 5), CcsServerPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsQuotaMgrPriority.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrPriority.setDescription('The priority of a quota manager.')
ccsQuotaMgrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standby", 1), ("failed", 2), ("active", 3), ("echowait", 4), ("nawait", 5), ("suspended", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrState.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrState.setDescription("States of a quota manager: 'standby' - The QuotaMgr is prepared to become active. 'failed' - The QuotaMgr has failed to respond to requests. 'active' - The QuotaMgr has been activated to receive requests. 'echowait' - An echo request to this QuotaMgr and is waiting for a response. 'nawait' - A node-alive request to this QuotaMgr and is waiting for a response. 'suspended' - The QuotaMgr has receive a stop request from the operator.")
ccsQuotaMgrLostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 7), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrLostRecords.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrLostRecords.setDescription('Total number of lost records since system initialization or the last time the counter wrapped.')
ccsQuotaMgrHCLostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 8), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCLostRecords.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHCLostRecords.setDescription('Total number of lost records since system initialization or the last time the counter wrapped. This object is a 64-bit version of ccsQuotaMgrLostRecords.')
ccsQuotaMgrTotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 9), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrTotalSent.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrTotalSent.setDescription('Total number of records sent to the quota manager.')
ccsQuotaMgrHCTotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 10), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCTotalSent.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHCTotalSent.setDescription('Total number of records sent to the quota manager. This object is a 64-bit version of ccsQuotaMgrTotalSent.')
ccsQuotaMgrFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 11), Counter32()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrFailAck.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrFailAck.setDescription('Number of acknowledgments received from the quota manager for which there are no requests.')
ccsQuotaMgrHCFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 12), Counter64()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCFailAck.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHCFailAck.setDescription('Number of acknowledgments received from the quota manager for which there are no requests. This object is a 64-bit version of ccsQuotaMgrFailAck.')
ccsQuotaMgrOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 13), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrOutstanding.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrOutstanding.setDescription('Current number of messages waiting to be ACKed.')
ccsQuotaMgrHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 14), Gauge32()).setUnits('messages').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsQuotaMgrHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHighWater.setDescription('The highest number of messages waiting for ACKs as reported by ccsQuotaMgrOutstanding object since object was reset as indicated by ccsQuotaMgrHighWaterResetTime. The only write operation allowed is to reset the value to 0.')
ccsQuotaMgrHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHighWaterResetTime.setDescription('The time stamp at which the ccsgsUserHighWater object was last reset to 0.')
ccsQuotaMgrBadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 16), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrBadRecord.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrBadRecord.setDescription('The number of bad records received. These are records in which the an error detected while attempting to decode the contents.')
ccsQuotaMgrHCBadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 17), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCBadRecord.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHCBadRecord.setDescription('The number of bad records received. These are records in which the an error detected while attempting to decode the contents. This object is a 64-bit version of ccsQuotaMgrBadRecord.')
ccsQuotaMgrRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 18), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrRetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrRetransmit.setDescription('The number of messages retransmitted to the billing mediation agent.')
ccsQuotaMgrHCRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 19), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCRetransmit.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrHCRetransmit.setDescription('The number of messages retransmitted to the billing mediation agent. This object is a 64-bit version of ccsQuotaMgrRetransmit.')
ccsQuotaMgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsQuotaMgrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrRowStatus.setDescription('This object is used by the manager to create or delete the row entry in the ccsQuotaMgrTable following the RowStatus textual convention. For the prepaid billing function, at least one QuotaMgr must be available. Therefore, deletion of the last QuotaMgr causes all accounting processing to switch to post-paid billing. This row can be deleted regardless of the value of ccsQuotaMgrState. Requests queued for the deleted QuotaMgr are requeued to another QuotaMgr if one is available. If no QuotaMgr is available, processing reverts to post-paid billing.')
ccsQuotaMgrPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 21), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrPacketRate.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrPacketRate.setDescription('Number of packets sent to the Quota Manager per second calculated over the interval indicated by ccsgsGTPQuotaMgrRateInterval object.')
ccsQuotaMgrAckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 22), Gauge32()).setUnits('acknowledgments').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrAckRate.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrAckRate.setDescription('Number of acknowledgments received from the Quota Manager per second calculated over the interval indicated by ccsgsGTPQuotaMgrRateInterval object.')
ccsLoadStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5))
ccsProtocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6), )
if mibBuilder.loadTexts: ccsProtocolStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccsProtocolStatsTable.setDescription('This table contains the traffic related statistics for two categories of protocols. The first category of protocols are identified using the protocol handlers of the entity which provides the content services. These typically includes protocols like http, ftp, rtsp, sip, pop3, imap, smtp, wap and dns which use well-known ports and for which deep packet inspection upto the application layer has been performed. The second category contains those protocols which have been identified using the NBAR classification engine and are known as NBAR protocols. These typically consist of the various peer-to-peer (P2P) protocols which do not use a standard port range. This table is indexed on entPhysicalIndex which identifies the entity that provides the content services, ccspsInspectionMethod which denotes the type of inspection method used to identify the protocol, and ccspsProtocolName which is the name of the protocol.')
ccsProtocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccspsInspectionMethod"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccspsProtocolName"))
if mibBuilder.loadTexts: ccsProtocolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ccsProtocolStatsEntry.setDescription('Each row in this table contains the traffic related statistics for a supported application layer protocol. An entry is added in this table when the traffic for a given protocol passes for the first time through the entity which provides the content services. An entry is deleted from this table when the corresponding entity denoted by the entPhysicalIndex is removed from the entityMIB.')
ccspsInspectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("nbar", 2))))
if mibBuilder.loadTexts: ccspsInspectionMethod.setStatus('current')
if mibBuilder.loadTexts: ccspsInspectionMethod.setDescription("This object denotes the type of inspection method used to identify the protocol: 'system' - Inspection method used for protocols which have been identified using the protocol handler of the entity which provides the content services. 'nbar' - Inspection method used for NBAR protocols which have been identified using the NBAR classification engine.")
ccspsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ccspsProtocolName.setStatus('current')
if mibBuilder.loadTexts: ccspsProtocolName.setDescription('The value of the protocol name is the case sensitive protocol name used in the configuration of the entity which provides the content services. This protocol name should be consistent between other management interfaces that use a string identifier for the protocol. For example, this protocol name should match the protocol name options available through the CLI.')
ccspsTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 3), Counter32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransaction.setStatus('current')
if mibBuilder.loadTexts: ccspsTransaction.setDescription('Total number of transactions for a given protocol. The definition of a transaction varies according to the type of protocol.')
ccspsHCTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 4), Counter64()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCTransaction.setStatus('current')
if mibBuilder.loadTexts: ccspsHCTransaction.setDescription('Total number of transactions for a given protocol. This object is a 64-bit version of ccspsTransaction.')
ccspsTransactionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 5), Gauge32()).setUnits('transactions per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransactionRate.setStatus('current')
if mibBuilder.loadTexts: ccspsTransactionRate.setDescription('Number of transactions per second for the given protocol.')
ccspsTransactionRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 6), Gauge32()).setUnits('transactions per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsTransactionRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccspsTransactionRateHighWater.setDescription('The highest number of transactions per second as reported by ccspsTransactionRate. The only write operation allowed is to reset the value to 0.')
ccspsTransactionRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransactionRateHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccspsTransactionRateHighWaterResetTime.setDescription('The time stamp at which the transactions per second as indicated by ccspsTransactionRate was last reset to 0.')
ccspsTransactionRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransactionRateHighWaterTime.setStatus('current')
if mibBuilder.loadTexts: ccspsTransactionRateHighWaterTime.setDescription('The time stamp at which the transactions per second as indicated by ccspsTransactionRate was maximum.')
ccspsSubOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPackets.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutPackets.setDescription('Total number of outgoing subscriber packets. Outgoing subscriber packets are the packets going from the subscriber to the network through the entity which provides the content services.')
ccspsHCSubOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCSubOutPackets.setStatus('current')
if mibBuilder.loadTexts: ccspsHCSubOutPackets.setDescription('Total number of outgoing subscriber packets. This object is a 64-bit version of ccspsSubOutPackets.')
ccspsSubOutPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 11), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPacketRate.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutPacketRate.setDescription('Number of outgoing subscriber packets per second.')
ccspsSubOutPacketRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 12), Gauge32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWater.setDescription('The highest number of outgoing subscriber packets per second as reported by ccspsSubOutPacketRate. The only write operation allowed is to reset the value to 0.')
ccspsSubOutPacketRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWaterResetTime.setDescription('The time stamp at which the outgoing subscriber packets per second as indicated by ccspsSubOutPacketRate was last reset to 0.')
ccspsSubOutPacketRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWaterTime.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWaterTime.setDescription('The time stamp at which the packets per second as indicated by ccspsSubOutPacketRate was maximum.')
ccspsNetOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPackets.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutPackets.setDescription('Total number of outgoing network packets. Outgoing network packet are the packets going from the network to the subscriber through the entity which provides the content services.')
ccspsHCNetOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCNetOutPackets.setStatus('current')
if mibBuilder.loadTexts: ccspsHCNetOutPackets.setDescription('Total number of outgoing network packets. This object is a 64-bit version of ccspsNetOutPackets.')
ccspsNetOutPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 17), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPacketRate.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutPacketRate.setDescription('Number of outgoing network packets per second.')
ccspsNetOutPacketRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 18), Gauge32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWater.setDescription('The highest number of outgoing network packets per second as reported by ccspsNetOutPacketRate. The only write operation allowed is to reset the value to 0.')
ccspsNetOutPacketRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWaterResetTime.setDescription('The time stamp at which the outgoing network packets per second as indicated by ccspsNetOutPacketRate was last reset to 0.')
ccspsNetOutPacketRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWaterTime.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWaterTime.setDescription('The time stamp at which the outgoing network packets per second as indicated by ccspsNetOutPacketRate was maximum.')
ccspsSubOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 21), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBytes.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutBytes.setDescription('Total number of outgoing subscriber bytes. Outgoing subscriber bytes are the bytes going from the subscriber to the network through the entity which provides the content services.')
ccspsHCSubOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 22), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCSubOutBytes.setStatus('current')
if mibBuilder.loadTexts: ccspsHCSubOutBytes.setDescription('Total number of outgoing subscriber bytes. This object is a 64-bit version of ccspsSubOutBytes.')
ccspsSubOutBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 23), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBitRate.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutBitRate.setDescription('Number of outgoing subscriber bits per second.')
ccspsSubOutBitRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 24), Gauge32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWater.setDescription('The highest number of outgoing subscriber bits per second as reported by ccspsSubOutBitRate. The only write operation allowed is to reset the value to 0.')
ccspsSubOutBitRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWaterResetTime.setDescription('The time stamp at which the outgoing subscriber bits per second as indicated by ccspsSubOutBitRate was last reset to 0.')
ccspsSubOutBitRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWaterTime.setStatus('current')
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWaterTime.setDescription('The time stamp at which the outgoing subscriber bits per second as indicated by ccspsSubOutBitRate was maximum.')
ccspsNetOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 27), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBytes.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutBytes.setDescription('Total number of outgoing network bytes. Outgoing network bytes are the bytes going from the network to the subscriber through the entity which provides the content services.')
ccspsHCNetOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 28), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCNetOutBytes.setStatus('current')
if mibBuilder.loadTexts: ccspsHCNetOutBytes.setDescription('Total number of outgoing network bytes. This object is a 64-bit version of ccspsNetOutBytes.')
ccspsNetOutBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 29), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBitRate.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutBitRate.setDescription('Number of outgoing network bits per second.')
ccspsNetOutBitRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 30), Gauge32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWater.setDescription('The highest number of outgoing network bits per second as reported by ccspsNetOutBitRate. The only write operation allowed is to reset the value to 0.')
ccspsNetOutBitRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWaterResetTime.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWaterResetTime.setDescription('The time stamp at which the outgoing network bits per second as indicated by ccspsNetOutBitRate was last reset to 0.')
ccspsNetOutBitRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWaterTime.setStatus('current')
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWaterTime.setDescription('The time stamp at which the outgoing network bits per second as indicated by ccspsNetOutBitRate was maximum.')
ccsBillingPlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7), )
if mibBuilder.loadTexts: ccsBillingPlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccsBillingPlanStatsTable.setDescription('This table contains the statistics of subscribers for all configured Billing Plans.')
ccsBillingPlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsbpsBillingPlanName"))
if mibBuilder.loadTexts: ccsBillingPlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ccsBillingPlanStatsEntry.setDescription('Each entry in this table contains subscriber statistics related to Billing Plan. A billing plan is a set of services. An entry is created in the table, whenever a billing plan is configured. An entry will be deleted from the table, whenever a billing plan is unconfigured. The entPhysicalIndex identifies the entity that provides the content services.')
ccsbpsBillingPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ccsbpsBillingPlanName.setStatus('current')
if mibBuilder.loadTexts: ccsbpsBillingPlanName.setDescription('The name of Billing Plan. Billing plan is set of services. Each service represents a group of content that is billed the same way, such as billing per-click (or per-request) or billing per-IP byte, and that shares part of a subscriber quota. A content configuration contains the following information: Layer 3 information that specifies the IP-level details of the content. Layer 4 information that specifies transport layer parameters, such as TCP and User Datagram Protocol (UDP) port numbers.')
ccsbpsSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 2), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsSubscribers.setStatus('current')
if mibBuilder.loadTexts: ccsbpsSubscribers.setDescription('Number of subscribers associated with a given Billing Plan.')
ccsbpsHCSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 3), CounterBasedGauge64()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsHCSubscribers.setStatus('current')
if mibBuilder.loadTexts: ccsbpsHCSubscribers.setDescription('Number of subscribers associated with a given Billing Plan. This object is 64-bit version of ccsbpsSubscribers.')
ccsbpsSubscribersHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 4), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsSubscribersHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsbpsSubscribersHighWater.setDescription('The highest number of subscribers associated with a given Billing Plan so far, as reported by ccsbpsSubscribers.')
ccsbpsHCSubscribersHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 5), CounterBasedGauge64()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsHCSubscribersHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsbpsHCSubscribersHighWater.setDescription('The highest number of subscribers associated with a given Billing Plan so far, as reported by ccsbpsHCSubscribers. This object is 64-bit version of ccsbpsSubscribersHighWater.')
ccsLoadStatRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1), )
if mibBuilder.loadTexts: ccsLoadStatRadiusTable.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusTable.setDescription('This table contains the load statistical information related to Radius Protocol. All the counters in this table are related to outgoing traffic.')
ccsLoadStatRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatRadiusEntry.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusEntry.setDescription('Each row in this table contains load statistics related to Radius. entPhysicalIndex identifies the entity that provides the content services.')
ccsLoadStatRadiusStartAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowed.setDescription('Number of outgoing Radius start requests allowed.')
ccsLoadStatHCRadiusStartAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowed.setDescription('This object is a 64-bit version of ccsLoadStatRadiusStartAllowed.')
ccsLoadStatRadiusStartAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 3), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowedRate.setDescription('Number of outgoing Radius start requests allowed per second.')
ccsLoadStatRadiusStartAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 4), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowedRateHighWater.setDescription('The highest number of outgoing Radius start requests allowed per second as reported by ccsLoadStatRadiusStartAllowedRate.')
ccsLoadStatHCRadiusStartAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowedRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatRadiusStartAllowedRateHighWater.')
ccsLoadStatRadiusStartIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartIPCQueueDepthTolerance.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartIPCQueueDepthTolerance.setDescription('Maximum queue depth for Radius start in the IPC queue.')
ccsLoadStatRadiusStartDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenied.setDescription('Number of outgoing Radius start requests denied.')
ccsLoadStatHCRadiusStartDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenied.setDescription('This object is a 64-bit version of ccsLoadStatRadiusStartDenied.')
ccsLoadStatRadiusStartDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenialRate.setDescription('Number of outgoing Radius start requests denied per second.')
ccsLoadStatRadiusStartDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenialRateHighWater.setDescription('The highest number of outgoing Radius start requests denied per second as reported by ccsLoadStatRadiusStartDenialRate.')
ccsLoadStatHCRadiusStartDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenialRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatRadiusStartDenialRateHighWater.')
ccsLoadStatHCRadiusStartAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 12), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowedRate.setDescription('This object is a 64-bit version of ccsLoadStatRadiusStartAllowedRate.')
ccsLoadStatHCRadiusStartDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 13), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenialRate.setDescription('This object is a 64-bit version of ccsLoadStatRadiusStartDenialRate.')
ccsLoadStatUserDBTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2), )
if mibBuilder.loadTexts: ccsLoadStatUserDBTable.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBTable.setDescription('This table contains the load statistical information related to user database. All the counters in this table are related to outgoing traffic.')
ccsLoadStatUserDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatUserDBEntry.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBEntry.setDescription('Each row in this table contains load statistics related to user database. entPhysicalIndex identifies the entity that provides the content services.')
ccsLoadStatUserDBReqAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowed.setDescription('Number of outgoing UDB requests allowed.')
ccsLoadStatHCUserDBReqAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowed.setDescription('This object is a 64-bit version of ccsLoadStatUserDBReqAllowed.')
ccsLoadStatUserDBReqAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 3), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowedRate.setDescription('Number of outgoing UDB requests allowed per second.')
ccsLoadStatUserDBReqAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 4), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowedRateHighWater.setDescription('The highest number of outgoing UDB requests allowed per second as reported by ccsLoadStatUserDBReqAllowedRate.')
ccsLoadStatHCUserDBReqAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowedRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatUserDBReqAllowedRateHighWater.')
ccsLoadStatUserDBReqIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqIPCQueueDepthTolerance.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqIPCQueueDepthTolerance.setDescription('Maximum queue depth for UDB requests in the IPC queue.')
ccsLoadStatUserDBReqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenied.setDescription('Number of outgoing UDB requests denied.')
ccsLoadStatHCUserDBReqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenied.setDescription('This object is a 64-bit version of ccsLoadStatUserDBReqDenied.')
ccsLoadStatUserDBReqDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenialRate.setDescription('Number of outgoing UDB requests denied per second.')
ccsLoadStatUserDBReqDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenialRateHighWater.setDescription('The highest number of outgoing UDB requests denied per second as reported by ccsLoadStatUserDBReqDenialRate.')
ccsLoadStatHCUserDBReqDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenialRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatUserDBReqDenialRateHighWater.')
ccsLoadStatHCUserDBReqAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 12), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowedRate.setDescription('This object is a 64-bit version of ccsLoadStatUserDBReqAllowedRate.')
ccsLoadStatHCUserDBReqDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 13), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenialRate.setDescription('This object is a 64-bit version of ccsLoadStatUserDBReqDenialRate.')
ccsLoadStatSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3), )
if mibBuilder.loadTexts: ccsLoadStatSessionTable.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionTable.setDescription('This table contains the load statistical information related to sessions on the system. A session corresponds to a TCP/UDP flow on the system.')
ccsLoadStatSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatSessionEntry.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionEntry.setDescription('Each row in this table contains load statistics related to sessions on the system. entPhysicalIndex identifies the entity that provides the content services.')
ccsLoadStatSessionCreateAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowed.setDescription('Number of session creation requests allowed on the system.')
ccsLoadStatHCSessionCreateAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowed.setDescription('This object is a 64-bit version of ccsLoadStatSessionCreateAllowed.')
ccsLoadStatSessionCreateAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 3), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowedRate.setDescription('Number of session creation requests allowed per second on the system.')
ccsLoadStatSessionCreateAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 4), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowedRateHighWater.setDescription('The highest number of session creation requests allowed per second as reported by ccsLoadStatSessionCreateAllowedRate.')
ccsLoadStatHCSessionCreateAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowedRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatSessionCreateAllowedRateHighWater.')
ccsLoadStatSessionCreateIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateIPCQueueDepthTolerance.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateIPCQueueDepthTolerance.setDescription('Maximum queue depth for session creation in the IPC queue.')
ccsLoadStatSessionCreateDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenied.setDescription('Number of session creation requests denied on the system.')
ccsLoadStatHCSessionCreateDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenied.setDescription('This object is a 64-bit version of ccsLoadStatSessionCreateDenied.')
ccsLoadStatSessionCreateDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenialRate.setDescription('Number of session creation requests denied per second on the system.')
ccsLoadStatSessionCreateDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenialRateHighWater.setDescription('The highest number of session creation requests denied per second as reported by ccsLoadStatSessionCreateDenialRate.')
ccsLoadStatHCSessionCreateDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenialRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatSessionCreateDenialRateHighWater.')
ccsLoadStatHCSessionCreateAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 12), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowedRate.setDescription('This object is a 64-bit version of ccsLoadStatSessionCreateAllowedRate.')
ccsLoadStatHCSessionCreateDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 13), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenialRate.setDescription('This object is a 64-bit version of ccsLoadStatSessionCreateDenialRate.')
ccsLoadStatBMATable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4), )
if mibBuilder.loadTexts: ccsLoadStatBMATable.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMATable.setDescription('This table contains the load statistical information related to BMA. All the counters in this table are related to outgoing traffic.')
ccsLoadStatBMAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatBMAEntry.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAEntry.setDescription('Each row in this table contains load statistics related to BMAs. entPhysicalIndex identifies the entity that provides the content services.')
ccsLoadStatBMAMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowed.setDescription('Number of outgoing BMA messages allowed.')
ccsLoadStatHCBMAMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 2), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowed.setDescription('This object is a 64-bit version of ccsLoadStatBMAMsgsAllowed.')
ccsLoadStatBMAMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 3), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowedRate.setDescription('Number of outgoing BMA messages allowed per per second.')
ccsLoadStatBMAMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 4), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowedRateHighWater.setDescription('The highest number of outgoing BMA messages allowed per second as reported by ccsLoadStatBMAMsgsAllowedRate.')
ccsLoadStatHCBMAMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 5), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowedRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatBMAMsgsAllowedRateHighWater.')
ccsLoadStatBMAMsgsIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsIPCQueueDepthTolerance.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsIPCQueueDepthTolerance.setDescription('Maximum queue depth for BMA messages in the IPC queue.')
ccsLoadStatBMAMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenied.setDescription('Number of outgoing BMA messages denied.')
ccsLoadStatHCBMAMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenied.setDescription('This object is a 64-bit version of ccsLoadStatBMAMsgsDenied.')
ccsLoadStatBMAMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 9), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenialRate.setDescription('Number of outgoing BMA messages denied per second.')
ccsLoadStatBMAMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 10), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenialRateHighWater.setDescription('The highest number of outgoing BMA messages denied per second as reported by ccsLoadStatBMAMsgsDenialRate.')
ccsLoadStatHCBMAMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenialRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatBMAMsgsDenialRateHighWater.')
ccsLoadStatHCBMAMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 12), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowedRate.setDescription('This object is a 64-bit version of ccsLoadStatBMAMsgsAllowedRate.')
ccsLoadStatHCBMAMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 13), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenialRate.setDescription('This object is a 64-bit version of ccsLoadStatBMAMsgsDenialRate.')
ccsLoadStatQuotaMgrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5), )
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrTable.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrTable.setDescription('This table contains the load statistical information related to QuotaMgr. All the counters in this table are related to outgoing traffic.')
ccsLoadStatQuotaMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrEntry.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrEntry.setDescription('Each row in this table contains load statistics related to QuotaMgr. entPhysicalIndex identifies the entity that provides the content services.')
ccsLoadStatQuotaMgrMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowed.setDescription('Number of outgoing messages to QuotaMgr allowed.')
ccsLoadStatHCQuotaMgrMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 2), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowed.setDescription('This object is a 64-bit version of ccsLoadStatQuotaMgrMsgsAllowed.')
ccsLoadStatQuotaMgrMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 3), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowedRate.setDescription('Number of outgoing messages to QuotaMgr allowed per second.')
ccsLoadStatQuotaMgrMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 4), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowedRateHighWater.setDescription('The highest number of outgoing messages to QuotaMgr allowed per second as reported by ccsLoadStatQuotaMgrMsgsAllowedRate.')
ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 5), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatQuotaMgrMsgsAllowedRateHighWater.')
ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance.setDescription('Maximum queue depth for messages to QuotaMgr in the IPC queue.')
ccsLoadStatQuotaMgrMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenied.setDescription('Number of outgoing messages to QuotaMgr denied.')
ccsLoadStatHCQuotaMgrMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenied.setDescription('This object is a 64-bit version of ccsLoadStatQuotaMgrMsgsDenied.')
ccsLoadStatQuotaMgrMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 9), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenialRate.setDescription('Number of outgoing messages to QuotaMgr denied per second.')
ccsLoadStatQuotaMgrMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 10), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenialRateHighWater.setDescription('The highest number of outgoing messages to QuotaMgr denied per second as reported by ccsLoadStatQuotaMgrMsgsDenialRate.')
ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatQuotaMgrMsgsDenialRateHighWater.')
ccsLoadStatHCQuotaMgrMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 12), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowedRate.setDescription('This object is a 64-bit version of ccsLoadStatQuotaMgrMsgsAllowedRate.')
ccsLoadStatHCQuotaMgrMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 13), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenialRate.setDescription('This object is a 64-bit version of ccsLoadStatQuotaMgrMsgsDenialRate.')
ccsLoadStatGxEventTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6), )
if mibBuilder.loadTexts: ccsLoadStatGxEventTable.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventTable.setDescription('This table contains the load statistical information related to Gx Events. A Gx Event is a notification which is generated from the PCEF to the PCRF. Examples of these events include exceeding of time threshold, volume threshold etc. This table is indexed at entPhysicalIndex which identifies the entity that provides the content services.')
ccsLoadStatGxEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatGxEventEntry.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventEntry.setDescription('Each row in this table contains load statistics related to Gx Events. An entry will be added to this table, when the entity that provides the content services is identified and modelled in entityMIB, and removed when the corresponding entity will be deleted from entityMIB.')
ccsLoadStatGxEventsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 1), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowed.setDescription('Number of Gx Events allowed.')
ccsLoadStatHCGxEventsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 2), Counter64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowed.setDescription('This object is a 64-bit version of ccsLoadStatGxEventsAllowed.')
ccsLoadStatGxEventsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 3), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowedRate.setDescription('Number of Gx Events allowed per second.')
ccsLoadStatGxEventsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 4), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowedRateHighWater.setDescription('The highest number of Gx Events allowed per second as reported by ccsLoadStatGxEventsAllowedRate.')
ccsLoadStatHCGxEventsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 5), Counter64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowedRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowedRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatGxEventsAllowedRateHighWater.')
ccsLoadStatGxEventsIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsIPCQueueDepthTolerance.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsIPCQueueDepthTolerance.setDescription('Maximum queue depth for Gx Events in the IPC queue.')
ccsLoadStatGxEventsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 7), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenied.setDescription('Number of Gx Events denied.')
ccsLoadStatHCGxEventsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 8), Counter64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenied.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenied.setDescription('This object is a 64-bit version of ccsLoadStatGxEventsDenied.')
ccsLoadStatGxEventsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 9), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenialRate.setDescription('Number of Gx Events denied per second.')
ccsLoadStatGxEventsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 10), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenialRateHighWater.setDescription('The highest number of Gx Events denied per second as reported by ccsLoadStatQuotaMgrMsgsDenialRate.')
ccsLoadStatHCGxEventsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 11), Counter64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenialRateHighWater.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenialRateHighWater.setDescription('This object is a 64-bit version of ccsLoadStatGxEventsDenialRateHighWater.')
ccsLoadStatHCGxEventsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 12), CounterBasedGauge64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowedRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowedRate.setDescription('This object is a 64-bit version of ccsLoadStatGxEventsAllowedRate.')
ccsLoadStatHCGxEventsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 13), CounterBasedGauge64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenialRate.setStatus('current')
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenialRate.setDescription('This object is a 64-bit version of ccsLoadStatGxEventsDenialRate.')
ccsNotifCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1), )
if mibBuilder.loadTexts: ccsNotifCfgTable.setStatus('current')
if mibBuilder.loadTexts: ccsNotifCfgTable.setDescription('Notification config table.')
ccsNotifCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsNotifCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: ccsNotifCfgTableEntry.setDescription('Entry that defines the notification objects. entPhysicalIndex identifies the entity that that provides the content services.')
ccsBMAStateChangeNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsBMAStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsBMAStateChangeNotifEnabled.setDescription("This object controls the generation of the Billing Mediation Agent state change notification (ciscoContentServicesBMAStateChange) 'true' Indicates that all BMA state change notification is enabled. 'false' Indicates that notification is disabled.")
ccsQuotaMgrStateChangeNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsQuotaMgrStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrStateChangeNotifEnabled.setDescription("This object controls the generation of the Quota Manager state change notification (ciscoContentServicesQuotaMgrStateChange) 'true' Indicates that all Quota Manager state change notification is enabled. 'false' Indicates that notification is disabled.")
ccsUserDbStateChangeNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUserDbStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsUserDbStateChangeNotifEnabled.setDescription("This object controls the generation of the User Database Server state change notification (ciscoContentServicesUserDbStateChange) 'true' Indicates that all User DB state change notification is enabled. 'false' Indicates that notification is disabled.")
ccsBMALostRecordEventNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsBMALostRecordEventNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsBMALostRecordEventNotifEnabled.setDescription("This object controls the generation of the Billing Mediation Agent Lost Reocrd notification (ciscoContentServicesBMALostRecordEvent) 'true' Indicates that all BMA record lost event notification is enabled. 'false' Indicates that notification is disabled.")
ccsQuotaMgrLostRecordEventNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsQuotaMgrLostRecordEventNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsQuotaMgrLostRecordEventNotifEnabled.setDescription("This object controls the generation of the Quota Manager Lost Record notification (ciscoContentServicesQuotaMgrLostRecordEvent) 'true' Indicates that all Quota Manager record lost event notification is enabled. 'false' Indicates that notification is disabled.")
ccsUserThresholdExceededNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUserThresholdExceededNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsUserThresholdExceededNotifEnabled.setDescription("This object controls the generation of the Users threshold exceeded notification (ciscoContentServicesUserThresholdExceeded) 'true' Indicates that Users threshold exceeded notification is enabled. 'false' Indicates that notification is disabled.")
ccsAdControlNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsAdControlNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsAdControlNotifEnabled.setDescription("This object controls the generation of the notifications for the AdControl. The alarm and clear notifications are enabled when ccsAdControlNotifEnabled is set to 'true'. The AdControl will start a timer with the interval controlled by ccsAdControlAlarmUpdateTimer for each event. An alarm notification will be generated if the error exceeds the alarm threshold within the interval and no such alarm has been raised yet. The timer will be restarted after an alarm notification is generated. When the timer expires, a clear notification will be generated if the error is equal to or less than the clear threshold and the alarm exists. 'true' Indicates that the notifications are enabled. 'false' Indicates that notifications are disabled.")
ccsUserEntriesThresholdNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUserEntriesThresholdNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsUserEntriesThresholdNotifEnabled.setDescription("This object controls the generation of the user entries threshold notification ciscoContentServicesUserEntriesThreshold. 'true' indicates that user entries threshold exceeded notification is enabled. 'false' indicates that notification is disabled.")
ccsSessionThresholdNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsSessionThresholdNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccsSessionThresholdNotifEnabled.setDescription("This object controls the generation of the session threshold notification ciscoContentServicesSessionThreshold. 'true' indicates that session threshold exceeded notification is enabled. 'false' indicates that notification is disabled.")
ccsTPIndexNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsTPIndexNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsTPIndexNotifInfo.setDescription('This object specifies the Traffic Processor (TP) index.')
ccsServiceNameNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsServiceNameNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsServiceNameNotifInfo.setDescription('This object specifies the Service Name that the notification is generated for.')
ccsContentNameNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsContentNameNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsContentNameNotifInfo.setDescription('This object specifies the content name.')
ccsPolicyNameNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsPolicyNameNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsPolicyNameNotifInfo.setDescription('This object specifies the policy name.')
ccsNetServerIpAddrTypeNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 5), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerIpAddrTypeNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerIpAddrTypeNotifInfo.setDescription('This object specifies the type of the address specified by ccsNetServerIpAddrNotifInfo.')
ccsNetServerIpAddrNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 6), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerIpAddrNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerIpAddrNotifInfo.setDescription('This object specifies the IP address of the network server.')
ccsNetServerPortNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 7), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerPortNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerPortNotifInfo.setDescription('This object specifies the port number of the network server.')
ccsSubscriberIpAddrTypeNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 8), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsSubscriberIpAddrTypeNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsSubscriberIpAddrTypeNotifInfo.setDescription('This object specifies the type of the address specified by ccsSubscriberIpAddrNotifInfo.')
ccsSubscriberIpAddrNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 9), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsSubscriberIpAddrNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsSubscriberIpAddrNotifInfo.setDescription('This object specifies the IP address of the subscriber.')
ccsSubscriberPortNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 10), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsSubscriberPortNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsSubscriberPortNotifInfo.setDescription('This object specifies the port number of the subscriber.')
ccsNetServerResponseFailCountNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerResponseFailCountNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerResponseFailCountNotifInfo.setDescription('This object specifies the number of the failed response from the network server.')
ccsNetServerResponseTimeFailCountNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 12), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailCountNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailCountNotifInfo.setDescription('This object specifies the number of the response for the first payload packet from the network server exceeds the response time specified by ccsNetServerFirstPayloadResponseTime.')
ccsProtocolParseFailCountNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsProtocolParseFailCountNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsProtocolParseFailCountNotifInfo.setDescription('This object specifies the number of the errors fail the protocol parsing.')
ccsgUserSessionSeverityNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsgUserSessionSeverityNotifInfo.setStatus('current')
if mibBuilder.loadTexts: ccsgUserSessionSeverityNotifInfo.setDescription('The severity of the notifications ciscoContentServicesUserEntriesThreshold and ciscoContentServicesSessionThreshold.')
ciscoContentServicesBMAStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 1)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMATotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMABadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesBMAStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesBMAStateChange.setDescription("This notification is issued when ccsBMAStateChangeNotifEnabled is set to 'true', and the billing mediation agent changes state. There is one exception: No notification is issued for state changes involving 'echowait' because this would cause an excessive number of notifications.")
ciscoContentServicesQuotaMgrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 2)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrStateChange.setDescription("This notification is issued when ccsQuotaMgrStateChangeNotifEnabled is set to 'true', and the quota manager changes state. There is one exception: No notification is issued for state changes involving 'echowait' because this would cause an excessive number of notifications.")
ciscoContentServicesUserDbStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 3)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbRequests"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbUidsReturned"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqResent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqTimeouts"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqErrors"))
if mibBuilder.loadTexts: ciscoContentServicesUserDbStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesUserDbStateChange.setDescription("This notification is issued when ccsUserDbStateChangeNotifEnabled is set to 'true', and the user database changes state.")
ciscoContentServicesBMALostRecordEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 4)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMATotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMABadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesBMALostRecordEvent.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesBMALostRecordEvent.setDescription("This notification is issued when ccsBMAStateChangeNotifEnabled is set to 'true', and accounting records, should be sent to the billing mediation agent, must be discarded. Initially, ccsBMALostRecords is set to 0. When a record is discarded, ccsBMALostRecords is incremented, a period timer is started, and this notification is issued. The NMS and the agent save this value. The agent continues to increment ccsBMALostRecords each time a record is lost. When the period timer expires, the agent compares the current value of ccsBMALostRecords with the previous (saved) value. If the values are equal this notification is issued again, signalling to the NMS that the condition has been cleared. Otherwise, the timer is restarted to monitor the next period. When a record is lost and no period timer is active, this notification is issued and the above procedure is repeated.")
ciscoContentServicesQuotaMgrLostRecordEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 5)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrLostRecordEvent.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrLostRecordEvent.setDescription("This notification is issued when ccsQuotaMgrStateChangeNotifEnabled is set to 'true', and request records to be sent to the quota manager must be discarded. The processing is the same as described in the description for ccsBMALostRecordEvent.")
ciscoContentServicesUserThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 6)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesUserThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesUserThresholdExceeded.setDescription("This notification is issued when ccsUserThresholdExceededNotifEnabled is set to 'true', and when actual users limit exceeds threshold which is set by ccsgsUserThreshold.")
ciscoContentServicesNetServerResponseFailExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 7)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseFailExceeded.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseFailExceeded.setDescription("A notification of this type is generated for the service specified by ccsServiceNameNotifInfo when the number of failed responses received on the Traffic Processor specified by ccsTPIndexNotifInfo from the network server exceeds the alarm threshold ccsNetServerResponseFailAlarmThreshold within the interval ccsAdControlAlarmUpdateTimer. The alarm is not generated repeatly on the same alarm state. The ccsAdControlNotifEnabled has to set to 'true' to generate the notification. The timer will be restarted after the notification is generated.")
ciscoContentServicesNetServerResponseTimeExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 8)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseTimeExceeded.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseTimeExceeded.setDescription("A notification of this type is generated for the service specified by ccsServiceNameNotifInfo when the number of the responses that are received on the Traffic Processor from the network server and exceed the response time (ccsNetServerFirstPayloadResponseTime) for the first payload packet exceeds the alarm theshold ccsNetServerResponseTimeFailAlarmThreshold, within the interval ccsAdControlAlarmUpdateTimer. The alarm is not generated repeatly on the same alarm state. The ccsAdControlNotifEnabled has to set to 'true' to generate the notification. The timer will be restarted after the notification is generated.")
ciscoContentServicesProtocolParseFailExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 9)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesProtocolParseFailExceeded.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesProtocolParseFailExceeded.setDescription("A notification of this type is generated for the service specified by ccsServiceNameNotifInfo when the number of errors that are received on the Traffic Processor and fail the protocol parsing exceeds the alarm threshold ccsProcolParseFailedAlarmThreshold within the interval ccsAdControlAlarmUpdateTimer. The alarm is not generated repeatly on the same alarm state. The ccsAdControlNotifEnabled has to set to 'true' to generate the notification. The timer will be restarted after the notification is generated.")
ciscoContentServicesNetServerResponseFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 10)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseFailAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseFailAlarmCleared.setDescription("A notification of this type is generated for the service specified by ccsServiceNameNotifInfo if the number of failed responses received on the Traffic Processor from the network server is equal to or lower than ccsNetServerResponseFailClearThreshold when the timer ccsAdControlAlarmUpdateTimer expires. The notification is also generated when the update timer, the alarm threshold, or the clear threshold is changed. The notification is generated only when the alarm (ciscoContentServicesNetServerResponseFailExceeded) exists. The ccsAdControlNotifEnabled has to set to 'true' to generate the notification. The timer will be restarted after the notification is generated.")
ciscoContentServicesNetServerResponseTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 11)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseTimeAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseTimeAlarmCleared.setDescription("A notification of this type is generated for the service specified by ccsServiceNameNotifInfo if the number of the responses that are received on the Traffic Processor from the network server and exceed the response time (ccsNetServerFirstPayloadResponseTime) for the first payload packet is equal to or lower than ccsNetServerResponseTimeFailClearThreshold when the timer ccsAdControlAlarmUpdateTimer expires. The notification is also generated when the update timer, the response time, the alarm threshold, or the clear threshold is changed. The notification is generated only when the alarm (ciscoContentServicesNetServerResponseTimeExceeded) exists, The ccsAdControlNotifEnabled has to set to 'true' to generate the notification. The update timer will be restarted after the notification is generated.")
ciscoContentServicesProtocolParseFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 12)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesProtocolParseFailAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesProtocolParseFailAlarmCleared.setDescription("A notification of this type is generated for the service specified by ccsServiceNameNotifInfo if the number of errors that are received on the Traffic Processor and fail the protocol parsing is equal to or lower than ccsProcolParseFailedAlarmThreshold when the timer ccsAdControlAlarmUpdateTimer expires. The notification is also generated when the update timer, the alarm threshold, or the clear threshold is changed. The notification is generated only when the alarm (ciscoContentServicesProtocolParseFailExceeded) exists. The ccsAdControlNotifEnabled has to set to 'true' to generate the notification. The update timer will be restarted after the notification is generated.")
ciscoContentServicesUserEntriesThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 13)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserEntriesThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgUserSessionSeverityNotifInfo"))
if mibBuilder.loadTexts: ciscoContentServicesUserEntriesThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesUserEntriesThreshold.setDescription("This notification is issued when ccsUserEntriesThresholdNotifEnabled is set to 'true', and when the number of users exceeds warning threshold or critical threshold or drops below the normal threshold. The critical threshold limit is 100% of ccsgsUserEntriesThreshold. The warning threshold limit takes a default value of 85% of ccsgsUserEntriesThreshold, which can be reconfigured in the application code via a CLI. The normal threshold limit is 5% less than the warning threshold. When the number of users in the system increases and reaches the warning threshold, a warning notification is sent. When the number of users again increases to reach the critical threshold, a critical notification is sent. When it drops below normal threshold, a normal notification is sent. ccsgsUserCurrent indicates the total number of users with one or more active sessions on the system. ccsgsUserEntriesThreshold indicates the maximum number of users allowed on the system. ccsgUserSessionSeverityNotifInfo indicates the severity of the notifications ciscoContentServicesUserEntriesThreshold and ciscoContentServicesSessionThreshold.")
ciscoContentServicesSessionThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 14)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgUserSessionSeverityNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"))
if mibBuilder.loadTexts: ciscoContentServicesSessionThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesSessionThreshold.setDescription("This notification is issued when ccsSessionThresholdNotifEnabled is set to 'true', and when the number of sessions exceeds warning threshold or critical threshold or drops below the normal threshold. The critical threshold limit is 100% of ccsgsSessionThreshold. The warning threshold limit takes a default value of 85% of ccsgsSessionThreshold, which can be reconfigured in the application code via a CLI. The normal threshold limit is 5% less than the warning threshold. When the number of sessions in the system increases and reaches the warning threshold, a warning notification is sent. When the number of sessions again increases to reach the critical threshold, a critical notification is sent. When it drops below normal threshold, a normal notification is sent. ccsgsSessionCurrent indicates the total number of sessions on the system. A session corresponds to a TCP/UDP flow. ccsgsSessionThreshold indicates the maximum number of sessions allowed on the system. ccsgUserSessionSeverityNotifInfo indicates the severity of the notifications ciscoContentServicesUserEntriesThreshold and ciscoContentServicesSessionThreshold. The TP index responsible for the threshold crossing is specified by the ccsTPIndexNotifInfo varbind")
ciscoContentServicesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1))
ciscoContentServicesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2))
ciscoContentServicesMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 1)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBCompliance = ciscoContentServicesMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 2)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev1 = ciscoContentServicesMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 3)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev2 = ciscoContentServicesMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 4)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev3 = ciscoContentServicesMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 5)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev4 = ciscoContentServicesMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB. This compliance statement deprecates the ciscoContentServicesMIBComplianceRev3.')
ciscoContentServicesMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 6)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev5 = ciscoContentServicesMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 7)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev6 = ciscoContentServicesMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev6.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 8)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev7 = ciscoContentServicesMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev7.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 9)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalHTTPGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev8 = ciscoContentServicesMIBComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev8.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 10)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalHTTPGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup3"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup3"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev9 = ciscoContentServicesMIBComplianceRev9.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesMIBComplianceRev9.setDescription('The compliance statement for entities which implement the Cisco Content Services MIB.')
ciscoContentServicesGlobalCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 1)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgcBMALostRecordTimer"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgcQuotaMgrLostRecordTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroup = ciscoContentServicesGlobalCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalCfgGroup.setDescription('Global Config objects.')
ciscoContentServicesGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 2)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionHighWaterResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalStatsGroup = ciscoContentServicesGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalStatsGroup.setDescription('Global Statistic objects.')
ciscoContentServicesUserDbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 3)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbRequests"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCRequests"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbUidsReturned"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCUidsReturned"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqResent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCReqResent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqTimeouts"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCReqTimeouts"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqErrors"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCReqErrors"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesUserDbGroup = ciscoContentServicesUserDbGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesUserDbGroup.setDescription('User Database Statistics.')
ciscoContentServicesBMAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 4)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAPriority"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMATotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMABadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesBMAGroup = ciscoContentServicesBMAGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesBMAGroup.setDescription('BMA Statistics.')
ciscoContentServicesQuotaMgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 5)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrPriority"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesQuotaMgrGroup = ciscoContentServicesQuotaMgrGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrGroup.setDescription('Quota Manager Statistics.')
ciscoContentServicesNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 7)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAStateChangeNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrStateChangeNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbStateChangeNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecordEventNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecordEventNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroup = ciscoContentServicesNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifEnableGroup.setDescription('Notifications enable/disable flags.')
ciscoContentServicesNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 8)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAStateChange"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrStateChange"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbStateChange"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMALostRecordEvent"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrLostRecordEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroup = ciscoContentServicesNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifGroup.setDescription('A collection of objects providing notifications.')
ciscoContentServicesLoadStatRadiusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 9)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatRadiusGroup = ciscoContentServicesLoadStatRadiusGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatRadiusGroup.setDescription('Load Statistics for Radius.')
ciscoContentServicesLoadStatUserDBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 10)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatUserDBGroup = ciscoContentServicesLoadStatUserDBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatUserDBGroup.setDescription('Load Statistics for Database.')
ciscoContentServicesLoadStatSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 11)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatSessionGroup = ciscoContentServicesLoadStatSessionGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatSessionGroup.setDescription('Load Statistics for Session.')
ciscoContentServicesLoadStatBMAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 12)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatBMAGroup = ciscoContentServicesLoadStatBMAGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatBMAGroup.setDescription('Load Statistics for BMA.')
ciscoContentServicesLoadStatQuotaMgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 13)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatQuotaMgrGroup = ciscoContentServicesLoadStatQuotaMgrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatQuotaMgrGroup.setDescription('Load Statistics for Quota Manager.')
ciscoContentServicesGlobalStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 14)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMARejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPBMARejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMADropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPBMADropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMARetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPBMARetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrRejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPQuotaMgrRejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrDropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPQuotaMgrDropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPQuotaMgrRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMARateInterval"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrRateInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalStatsGroupSup1 = ciscoContentServicesGlobalStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalStatsGroupSup1.setDescription('Collection of objects providing aggregate statistics for all the BMAs and Quota Managers. This group augments the objects contained in the ciscoContentServicesGlobalStatsGroup.')
ciscoContentServicesBMAGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 15)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAAckRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesBMAGroupSup1 = ciscoContentServicesBMAGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesBMAGroupSup1.setDescription('Collection of objects providing BMA statistics. This group augments the objects contained in the ciscoContentServicesBMAGroup.')
ciscoContentServicesQuotaMgrGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 16)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrAckRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesQuotaMgrGroupSup1 = ciscoContentServicesQuotaMgrGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrGroupSup1.setDescription('Collection of objects providing Quota Manager statistics. This group augments the objects contained in the ciscoContentServicesQuotaMgrGroup.')
ciscoContentServicesGlobalCfgGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 17)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroupSup1 = ciscoContentServicesGlobalCfgGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalCfgGroupSup1.setDescription('Global Config objects. This group augments the objects contained in the ciscoContentServicesGlobalCfgGroup.')
ciscoContentServicesNotifEnableGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 18)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserThresholdExceededNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroupSup1 = ciscoContentServicesNotifEnableGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifEnableGroupSup1.setDescription('Notifications enable/disable flags. This group augments the objects contained in the ciscoContentServicesNotifEnableGroup')
ciscoContentServicesNotifGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 19)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserThresholdExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroupSup1 = ciscoContentServicesNotifGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifGroupSup1.setDescription('A collection of objects providing notifications. This group augments the objects contained in the ciscoContentServicesNotifGroup.')
ciscoContentServicesGlobalCfgGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 20)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsAdControlAlarmUpdateTimer"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailClearThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerFirstPayloadResponseTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailClearThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailClearThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroupSup2 = ciscoContentServicesGlobalCfgGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalCfgGroupSup2.setDescription('Global Config objects. This group augments the objects contained in the ciscoContentServicesGlobalCfgGroup.')
ciscoContentServicesNotifEnableGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 21)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsAdControlNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroupSup2 = ciscoContentServicesNotifEnableGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifEnableGroupSup2.setDescription('Notifications enable/disable flags. This group augments the objects contained in the ciscoContentServicesNotifEnableGroup')
ciscoContentServicesNotifGroupSup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 22)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseFailExceeded"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseTimeExceeded"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesProtocolParseFailExceeded"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseFailAlarmCleared"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseTimeAlarmCleared"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesProtocolParseFailAlarmCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroupSup2 = ciscoContentServicesNotifGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifGroupSup2.setDescription('A collection of objects providing notifications. This group augments the objects contained in the ciscoContentServicesNotifGroup.')
ciscoContentServicesNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 23)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailCountNotifInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifInfoGroup = ciscoContentServicesNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifInfoGroup.setDescription('Collection of objects providing info for notifications.')
ciscoContentServiceProtocolStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 24)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccspsTransaction"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCTransaction"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCSubOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCNetOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCSubOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCNetOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRateHighWaterTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServiceProtocolStatsGroup = ciscoContentServiceProtocolStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServiceProtocolStatsGroup.setDescription('A collection of objects providing the traffic related protocol statistics.')
ciscoContentServicesLoadStatGxEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 25)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatGxEventGroup = ciscoContentServicesLoadStatGxEventGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatGxEventGroup.setDescription('A collection of objects providing load statistics for Gx Events.')
ciscoContentServicesBillingPlanStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 26)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsbpsSubscribers"), ("CISCO-CONTENT-SERVICES-MIB", "ccsbpsHCSubscribers"), ("CISCO-CONTENT-SERVICES-MIB", "ccsbpsSubscribersHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsbpsHCSubscribersHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesBillingPlanStatsGroup = ciscoContentServicesBillingPlanStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesBillingPlanStatsGroup.setDescription('Collection of objects providing Billing Plan Stats. This group augments the objects contained in the ciscoContentServicesBillingPlanStatsGroup.')
ciscoContentServicesLoadStatRadiusGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 27)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatRadiusGroupSup1 = ciscoContentServicesLoadStatRadiusGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatRadiusGroupSup1.setDescription('Load Statistics for Radius.')
ciscoContentServicesLoadStatUserDBGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 28)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatUserDBGroupSup1 = ciscoContentServicesLoadStatUserDBGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatUserDBGroupSup1.setDescription('Load Statistics for Database.')
ciscoContentServicesLoadStatSessionGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 29)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatSessionGroupSup1 = ciscoContentServicesLoadStatSessionGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatSessionGroupSup1.setDescription('Load Statistics for Session.')
ciscoContentServicesLoadStatBMAGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 30)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatBMAGroupSup1 = ciscoContentServicesLoadStatBMAGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatBMAGroupSup1.setDescription('Load Statistics for BMA.')
ciscoContentServicesLoadStatQuotaMgrGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 31)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatQuotaMgrGroupSup1 = ciscoContentServicesLoadStatQuotaMgrGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatQuotaMgrGroupSup1.setDescription('Load Statistics for Quota Manager.')
ciscoContentServicesLoadStatGxEventGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 32)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatGxEventGroupSup1 = ciscoContentServicesLoadStatGxEventGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesLoadStatGxEventGroupSup1.setDescription('A collection of objects providing load statistics for Gx Events.')
ciscoContentServicesGlobalStatsGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 33)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRuleActivationFail"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRuleDeactivationFail"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRevalidationSuccess"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRevalidationFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalStatsGroupSup2 = ciscoContentServicesGlobalStatsGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalStatsGroupSup2.setDescription('A collection of objects providing rule activation/deactivation and revalidation statistics.')
ciscoContentServicesGlobalHTTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 34)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsHTTPHdrObscure"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHTTPHdrBlock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalHTTPGroup = ciscoContentServicesGlobalHTTPGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalHTTPGroup.setDescription('A collection of objects providing HTTP header obscure/block action statistics.')
ciscoContentServicesGlobalCfgGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 35)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserEntriesThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroupSup3 = ciscoContentServicesGlobalCfgGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesGlobalCfgGroupSup3.setDescription('A collection of objects including the threshold of user entries and sessions. This group augments the objects contained in the ciscoContentServicesGlobalCfgGroup.')
ciscoContentServicesNotifEnableGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 36)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserEntriesThresholdNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSessionThresholdNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroupSup3 = ciscoContentServicesNotifEnableGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifEnableGroupSup3.setDescription('A collection of objects pertaining to enable/disable of the notification for user entries and session threshold. This group augments the objects contained in the ciscoContentServicesNotifEnableGroup')
ciscoContentServicesNotifGroupSup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 37)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserEntriesThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesSessionThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroupSup3 = ciscoContentServicesNotifGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifGroupSup3.setDescription('A collection of objects providing notifications. This includes providing notifications for user entries and sessions exceeding warning or critical threshold. This group augments the objects contained in the ciscoContentServicesNotifGroup.')
ciscoContentServicesNotifInfoGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 38)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgUserSessionSeverityNotifInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifInfoGroupSup1 = ciscoContentServicesNotifInfoGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoContentServicesNotifInfoGroupSup1.setDescription('Collection of objects providing info for notifications. This group augments the objects contained in the ciscoContentServicesNotifInfoGroup')
mibBuilder.exportSymbols("CISCO-CONTENT-SERVICES-MIB", ccspsSubOutBitRate=ccspsSubOutBitRate, ciscoContentServicesMIBComplianceRev7=ciscoContentServicesMIBComplianceRev7, ccsSubscriberPortNotifInfo=ccsSubscriberPortNotifInfo, ccsContentNameNotifInfo=ccsContentNameNotifInfo, ciscoContentServicesNotifEnableGroup=ciscoContentServicesNotifEnableGroup, ciscoContentServicesLoadStatGxEventGroupSup1=ciscoContentServicesLoadStatGxEventGroupSup1, ccsLoadStatQuotaMgrMsgsDenialRateHighWater=ccsLoadStatQuotaMgrMsgsDenialRateHighWater, ccsConfig=ccsConfig, ccsQuotaMgrIpAddrType=ccsQuotaMgrIpAddrType, ccsNetServerResponseFailCountNotifInfo=ccsNetServerResponseFailCountNotifInfo, ccsLoadStatGxEventsDenialRateHighWater=ccsLoadStatGxEventsDenialRateHighWater, ccsBMAHighWaterResetTime=ccsBMAHighWaterResetTime, ciscoContentServicesUserEntriesThreshold=ciscoContentServicesUserEntriesThreshold, ccsLoadStatUserDBReqDenialRate=ccsLoadStatUserDBReqDenialRate, ccsgsGxRevalidationFail=ccsgsGxRevalidationFail, ccsbpsSubscribers=ccsbpsSubscribers, ccsServiceNameNotifInfo=ccsServiceNameNotifInfo, ccspsTransactionRateHighWaterResetTime=ccspsTransactionRateHighWaterResetTime, ccsNotifInfo=ccsNotifInfo, ccsBMAAckRate=ccsBMAAckRate, ciscoContentServicesNetServerResponseTimeAlarmCleared=ciscoContentServicesNetServerResponseTimeAlarmCleared, ciscoContentServicesMIBComplianceRev2=ciscoContentServicesMIBComplianceRev2, ccspsNetOutBytes=ccspsNetOutBytes, ccsUserEntriesThresholdNotifEnabled=ccsUserEntriesThresholdNotifEnabled, ccsLoadStatHCGxEventsAllowed=ccsLoadStatHCGxEventsAllowed, ccsgsGTPQuotaMgrRetransmit=ccsgsGTPQuotaMgrRetransmit, ccsQuotaMgrRowStatus=ccsQuotaMgrRowStatus, ciscoContentServicesMIB=ciscoContentServicesMIB, ccspsSubOutPacketRateHighWaterResetTime=ccspsSubOutPacketRateHighWaterResetTime, ccsBMABadRecord=ccsBMABadRecord, ccsLoadStatistics=ccsLoadStatistics, ccsgsSessionHighWater=ccsgsSessionHighWater, ccsLoadStatHCGxEventsAllowedRate=ccsLoadStatHCGxEventsAllowedRate, ccsLoadStatUserDBEntry=ccsLoadStatUserDBEntry, ccspsHCSubOutPackets=ccspsHCSubOutPackets, ccsLoadStatRadiusStartAllowed=ccsLoadStatRadiusStartAllowed, ciscoContentServicesNotifEnableGroupSup1=ciscoContentServicesNotifEnableGroupSup1, ccsLoadStatRadiusStartAllowedRateHighWater=ccsLoadStatRadiusStartAllowedRateHighWater, ccsLoadStatUserDBReqAllowedRateHighWater=ccsLoadStatUserDBReqAllowedRateHighWater, ciscoContentServicesLoadStatUserDBGroup=ciscoContentServicesLoadStatUserDBGroup, ccsLoadStatGxEventsAllowedRateHighWater=ccsLoadStatGxEventsAllowedRateHighWater, ccsBMAPacketRate=ccsBMAPacketRate, ccsBMATable=ccsBMATable, ccspsNetOutPacketRateHighWaterTime=ccspsNetOutPacketRateHighWaterTime, ccsLoadStatRadiusStartAllowedRate=ccsLoadStatRadiusStartAllowedRate, ccspsSubOutPacketRateHighWaterTime=ccspsSubOutPacketRateHighWaterTime, ccsQuotaMgrBadRecord=ccsQuotaMgrBadRecord, ciscoContentServicesGlobalStatsGroup=ciscoContentServicesGlobalStatsGroup, ciscoContentServicesLoadStatSessionGroup=ciscoContentServicesLoadStatSessionGroup, ciscoContentServicesQuotaMgrGroupSup1=ciscoContentServicesQuotaMgrGroupSup1, ciscoContentServicesMIBComplianceRev4=ciscoContentServicesMIBComplianceRev4, ccsbpsHCSubscribersHighWater=ccsbpsHCSubscribersHighWater, ccsBMAIpAddrType=ccsBMAIpAddrType, ccsLoadStatHCRadiusStartDenialRateHighWater=ccsLoadStatHCRadiusStartDenialRateHighWater, ccsLoadStatHCRadiusStartAllowedRateHighWater=ccsLoadStatHCRadiusStartAllowedRateHighWater, ccsLoadStatHCQuotaMgrMsgsDenied=ccsLoadStatHCQuotaMgrMsgsDenied, ccsLoadStatRadiusTable=ccsLoadStatRadiusTable, ccsLoadStatBMAMsgsDenied=ccsLoadStatBMAMsgsDenied, ccsGlobalCfgTable=ccsGlobalCfgTable, ccsLoadStatGxEventsAllowed=ccsLoadStatGxEventsAllowed, ccsLoadStatQuotaMgrEntry=ccsLoadStatQuotaMgrEntry, ccsQuotaMgrStateChangeNotifEnabled=ccsQuotaMgrStateChangeNotifEnabled, ccsgsHCGTPBMARetransmit=ccsgsHCGTPBMARetransmit, ccsBMAPriority=ccsBMAPriority, ccsGlobalCfgTableEntry=ccsGlobalCfgTableEntry, ccsBMAHCLostRecords=ccsBMAHCLostRecords, ccsgcQuotaMgrLostRecordTimer=ccsgcQuotaMgrLostRecordTimer, ciscoContentServicesUserThresholdExceeded=ciscoContentServicesUserThresholdExceeded, ccsLoadStatRadiusStartDenialRateHighWater=ccsLoadStatRadiusStartDenialRateHighWater, ciscoContentServicesQuotaMgrGroup=ciscoContentServicesQuotaMgrGroup, ccsUserDbTableEntry=ccsUserDbTableEntry, ccsLoadStatBMAMsgsAllowedRate=ccsLoadStatBMAMsgsAllowedRate, ccsLoadStatUserDBReqAllowed=ccsLoadStatUserDBReqAllowed, ciscoContentServicesBMAGroup=ciscoContentServicesBMAGroup, ccsQuotaMgrState=ccsQuotaMgrState, ciscoContentServicesMIBConform=ciscoContentServicesMIBConform, ccsbpsBillingPlanName=ccsbpsBillingPlanName, ccsLoadStatHCSessionCreateAllowedRate=ccsLoadStatHCSessionCreateAllowedRate, ccsBMAIpAddr=ccsBMAIpAddr, ccsLoadStatSessionCreateDenialRateHighWater=ccsLoadStatSessionCreateDenialRateHighWater, ccsNetServerIpAddrNotifInfo=ccsNetServerIpAddrNotifInfo, ccsBMALostRecords=ccsBMALostRecords, ccsgsGxRuleActivationFail=ccsgsGxRuleActivationFail, ccsBMARowStatus=ccsBMARowStatus, ccsBMATableEntry=ccsBMATableEntry, ccsgsGTPQuotaMgrRateInterval=ccsgsGTPQuotaMgrRateInterval, ccsLoadStatBMAMsgsDenialRate=ccsLoadStatBMAMsgsDenialRate, ccsLoadStatBMAEntry=ccsLoadStatBMAEntry, ccspsSubOutPacketRate=ccspsSubOutPacketRate, ciscoContentServicesGlobalCfgGroupSup2=ciscoContentServicesGlobalCfgGroupSup2, ciscoContentServicesQuotaMgrLostRecordEvent=ciscoContentServicesQuotaMgrLostRecordEvent, ciscoContentServicesLoadStatRadiusGroupSup1=ciscoContentServicesLoadStatRadiusGroupSup1, ccspsNetOutPacketRateHighWaterResetTime=ccspsNetOutPacketRateHighWaterResetTime, ccsQuotaMgrLostRecordEventNotifEnabled=ccsQuotaMgrLostRecordEventNotifEnabled, ccsLoadStatUserDBReqIPCQueueDepthTolerance=ccsLoadStatUserDBReqIPCQueueDepthTolerance, ccsLoadStatGxEventsIPCQueueDepthTolerance=ccsLoadStatGxEventsIPCQueueDepthTolerance, ccsLoadStatRadiusStartIPCQueueDepthTolerance=ccsLoadStatRadiusStartIPCQueueDepthTolerance, ciscoContentServicesNotifEnableGroupSup2=ciscoContentServicesNotifEnableGroupSup2, ccsgsUserEntriesThreshold=ccsgsUserEntriesThreshold, ciscoContentServicesGlobalStatsGroupSup2=ciscoContentServicesGlobalStatsGroupSup2, ccsLoadStatHCSessionCreateDenialRate=ccsLoadStatHCSessionCreateDenialRate, ccsLoadStatSessionCreateIPCQueueDepthTolerance=ccsLoadStatSessionCreateIPCQueueDepthTolerance, ccsUserDbHCReqResent=ccsUserDbHCReqResent, ccsLoadStatHCBMAMsgsDenialRate=ccsLoadStatHCBMAMsgsDenialRate, ciscoContentServicesBillingPlanStatsGroup=ciscoContentServicesBillingPlanStatsGroup, ccsQuotaMgrHCTotalSent=ccsQuotaMgrHCTotalSent, ccsLoadStatGxEventEntry=ccsLoadStatGxEventEntry, ciscoContentServicesLoadStatSessionGroupSup1=ciscoContentServicesLoadStatSessionGroupSup1, ccsLoadStatBMATable=ccsLoadStatBMATable, ciscoContentServicesMIBComplianceRev1=ciscoContentServicesMIBComplianceRev1, ccsBMAOutstanding=ccsBMAOutstanding, ccsQuotaMgrLostRecords=ccsQuotaMgrLostRecords, ccsgsHCGTPBMADropped=ccsgsHCGTPBMADropped, ccsgUserSessionSeverityNotifInfo=ccsgUserSessionSeverityNotifInfo, ccspsSubOutBitRateHighWaterResetTime=ccspsSubOutBitRateHighWaterResetTime, ciscoContentServicesMIBCompliance=ciscoContentServicesMIBCompliance, ciscoContentServicesMIBComplianceRev9=ciscoContentServicesMIBComplianceRev9, ccspsProtocolName=ccspsProtocolName, ccsLoadStatHCGxEventsDenialRateHighWater=ccsLoadStatHCGxEventsDenialRateHighWater, ccsNetServerPortNotifInfo=ccsNetServerPortNotifInfo, ciscoContentServicesNotifInfoGroup=ciscoContentServicesNotifInfoGroup, ccsLoadStatHCBMAMsgsDenialRateHighWater=ccsLoadStatHCBMAMsgsDenialRateHighWater, ccsLoadStatHCUserDBReqDenied=ccsLoadStatHCUserDBReqDenied, ccsUserDbIpAddrType=ccsUserDbIpAddrType, ccsUserDbState=ccsUserDbState, ccspsSubOutBitRateHighWaterTime=ccspsSubOutBitRateHighWaterTime, ccsLoadStatHCUserDBReqAllowedRateHighWater=ccsLoadStatHCUserDBReqAllowedRateHighWater, ccsUserDbPort=ccsUserDbPort, ciscoContentServicesNetServerResponseFailExceeded=ciscoContentServicesNetServerResponseFailExceeded, ciscoContentServicesNotifInfoGroupSup1=ciscoContentServicesNotifInfoGroupSup1, ccspsNetOutBitRateHighWaterTime=ccspsNetOutBitRateHighWaterTime, ccsNetServerResponseTimeFailCountNotifInfo=ccsNetServerResponseTimeFailCountNotifInfo, ccsBMAHCTotalSent=ccsBMAHCTotalSent, ccsNetServerResponseFailClearThreshold=ccsNetServerResponseFailClearThreshold, ccsBillingPlanStatsEntry=ccsBillingPlanStatsEntry, ccsQuotaMgrHCRetransmit=ccsQuotaMgrHCRetransmit, ccsUserDbReqErrors=ccsUserDbReqErrors, ccsgsUserHighWaterResetTime=ccsgsUserHighWaterResetTime, ccsLoadStatHCBMAMsgsAllowedRate=ccsLoadStatHCBMAMsgsAllowedRate, ciscoContentServicesNotifGroupSup3=ciscoContentServicesNotifGroupSup3, ccsQuotaMgrPacketRate=ccsQuotaMgrPacketRate, ccspsHCNetOutPackets=ccspsHCNetOutPackets, ccsLoadStatHCGxEventsDenied=ccsLoadStatHCGxEventsDenied, ccspsNetOutBitRateHighWater=ccspsNetOutBitRateHighWater, ccsBMAHighWater=ccsBMAHighWater, ccsLoadStatQuotaMgrMsgsDenied=ccsLoadStatQuotaMgrMsgsDenied, ciscoContentServicesUserDbGroup=ciscoContentServicesUserDbGroup, ccsQuotaMgrHCFailAck=ccsQuotaMgrHCFailAck, ccsLoadStatQuotaMgrMsgsAllowedRate=ccsLoadStatQuotaMgrMsgsAllowedRate, ciscoContentServicesLoadStatGxEventGroup=ciscoContentServicesLoadStatGxEventGroup, ccspsTransactionRateHighWater=ccspsTransactionRateHighWater, ciscoContentServicesNetServerResponseFailAlarmCleared=ciscoContentServicesNetServerResponseFailAlarmCleared, ciscoContentServicesGlobalCfgGroupSup3=ciscoContentServicesGlobalCfgGroupSup3, ccsLoadStatHCGxEventsAllowedRateHighWater=ccsLoadStatHCGxEventsAllowedRateHighWater, ccsLoadStatHCQuotaMgrMsgsAllowed=ccsLoadStatHCQuotaMgrMsgsAllowed, ccsLoadStatRadiusStartDenied=ccsLoadStatRadiusStartDenied, ccsLoadStatHCBMAMsgsAllowedRateHighWater=ccsLoadStatHCBMAMsgsAllowedRateHighWater, ciscoContentServicesMIBNotifs=ciscoContentServicesMIBNotifs, ccsUserDbRowStatus=ccsUserDbRowStatus, ccsLoadStatRadiusStartDenialRate=ccsLoadStatRadiusStartDenialRate, ccsLoadStatGxEventsDenialRate=ccsLoadStatGxEventsDenialRate, ccsLoadStatSessionCreateDenied=ccsLoadStatSessionCreateDenied, ccsQuotaMgrPort=ccsQuotaMgrPort, ccsBMAHCRetransmit=ccsBMAHCRetransmit, ciscoContentServicesGlobalCfgGroup=ciscoContentServicesGlobalCfgGroup, ccsgsSessionCurrent=ccsgsSessionCurrent, ccsUserDbIpAddr=ccsUserDbIpAddr, ciscoContentServicesNetServerResponseTimeExceeded=ciscoContentServicesNetServerResponseTimeExceeded, ciscoContentServicesLoadStatQuotaMgrGroup=ciscoContentServicesLoadStatQuotaMgrGroup, ccsSessionThresholdNotifEnabled=ccsSessionThresholdNotifEnabled, ccsBMAStateChangeNotifEnabled=ccsBMAStateChangeNotifEnabled, ccspsNetOutPackets=ccspsNetOutPackets, ccsProtocolStatsTable=ccsProtocolStatsTable, ccsBillingPlanStatsTable=ccsBillingPlanStatsTable, ccsgsHCGTPBMARejected=ccsgsHCGTPBMARejected, ciscoContentServicesNotifGroupSup2=ciscoContentServicesNotifGroupSup2, ccsQuotaMgrHCBadRecord=ccsQuotaMgrHCBadRecord, ccsbpsHCSubscribers=ccsbpsHCSubscribers, ccsLoadStatHCBMAMsgsAllowed=ccsLoadStatHCBMAMsgsAllowed, ccspsSubOutPacketRateHighWater=ccspsSubOutPacketRateHighWater, PYSNMP_MODULE_ID=ciscoContentServicesMIB, ccsLoadStatHCQuotaMgrMsgsAllowedRate=ccsLoadStatHCQuotaMgrMsgsAllowedRate, ccsUserDbHCReqTimeouts=ccsUserDbHCReqTimeouts, ccsLoadStatSessionCreateAllowedRate=ccsLoadStatSessionCreateAllowedRate, ccsSubscriberIpAddrNotifInfo=ccsSubscriberIpAddrNotifInfo, ciscoContentServicesLoadStatUserDBGroupSup1=ciscoContentServicesLoadStatUserDBGroupSup1, ccsUserDbReqTimeouts=ccsUserDbReqTimeouts, ciscoContentServicesLoadStatBMAGroup=ciscoContentServicesLoadStatBMAGroup, ccsgsSessionHighWaterResetTime=ccsgsSessionHighWaterResetTime, ccsLoadStatQuotaMgrMsgsAllowed=ccsLoadStatQuotaMgrMsgsAllowed, ccsNetServerResponseFailAlarmThreshold=ccsNetServerResponseFailAlarmThreshold, ccsLoadStatHCUserDBReqAllowed=ccsLoadStatHCUserDBReqAllowed, ccsLoadStatHCRadiusStartDenialRate=ccsLoadStatHCRadiusStartDenialRate, ccsPolicyNameNotifInfo=ccsPolicyNameNotifInfo, ccspsInspectionMethod=ccspsInspectionMethod, ccsLoadStatHCRadiusStartAllowedRate=ccsLoadStatHCRadiusStartAllowedRate, ccsbpsSubscribersHighWater=ccsbpsSubscribersHighWater, ccsLoadStatRadiusEntry=ccsLoadStatRadiusEntry, ccsBMAFailAck=ccsBMAFailAck, ccspsTransactionRate=ccspsTransactionRate, ciscoContentServicesNotifEnableGroupSup3=ciscoContentServicesNotifEnableGroupSup3, ccsQuotaMgrFailAck=ccsQuotaMgrFailAck, ccsQuotaMgrOutstanding=ccsQuotaMgrOutstanding, ccsSubscriberIpAddrTypeNotifInfo=ccsSubscriberIpAddrTypeNotifInfo, ccsLoadStatGxEventTable=ccsLoadStatGxEventTable, ccsStats=ccsStats, ccsgsGTPQuotaMgrDropped=ccsgsGTPQuotaMgrDropped, ccspsHCTransaction=ccspsHCTransaction, ccsUserDbUidsReturned=ccsUserDbUidsReturned, ccsgcBMALostRecordTimer=ccsgcBMALostRecordTimer, ccsLoadStatSessionCreateAllowedRateHighWater=ccsLoadStatSessionCreateAllowedRateHighWater, ccspsNetOutPacketRateHighWater=ccspsNetOutPacketRateHighWater, ciscoContentServicesBMALostRecordEvent=ciscoContentServicesBMALostRecordEvent, ccsQuotaMgrHighWaterResetTime=ccsQuotaMgrHighWaterResetTime, ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance=ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance, ccsNotifCfgTableEntry=ccsNotifCfgTableEntry, ciscoContentServicesLoadStatRadiusGroup=ciscoContentServicesLoadStatRadiusGroup, ccsAdControlNotifEnabled=ccsAdControlNotifEnabled, ccsUserDbHCUidsReturned=ccsUserDbHCUidsReturned, ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater=ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater, ccsLoadStatQuotaMgrTable=ccsLoadStatQuotaMgrTable, ccsLoadStatGxEventsAllowedRate=ccsLoadStatGxEventsAllowedRate, ccsGlobalStatsTable=ccsGlobalStatsTable, ccsGlobalStatsTableEntry=ccsGlobalStatsTableEntry, ccsUserDbHCReqErrors=ccsUserDbHCReqErrors, ciscoContentServicesGlobalCfgGroupSup1=ciscoContentServicesGlobalCfgGroupSup1, ccsLoadStatHCUserDBReqDenialRateHighWater=ccsLoadStatHCUserDBReqDenialRateHighWater, ccsProtocolParseFailClearThreshold=ccsProtocolParseFailClearThreshold, ccsLoadStatBMAMsgsAllowed=ccsLoadStatBMAMsgsAllowed, ccspsSubOutBytes=ccspsSubOutBytes, ciscoContentServicesLoadStatBMAGroupSup1=ciscoContentServicesLoadStatBMAGroupSup1, ccsLoadStatHCUserDBReqDenialRate=ccsLoadStatHCUserDBReqDenialRate, ccsQuotaMgrIpAddr=ccsQuotaMgrIpAddr, ccsgsGTPBMARateInterval=ccsgsGTPBMARateInterval, ccsQuotaMgrHCLostRecords=ccsQuotaMgrHCLostRecords, ccsTPIndexNotifInfo=ccsTPIndexNotifInfo, ciscoContentServicesMIBObjects=ciscoContentServicesMIBObjects, ccsNotifConfig=ccsNotifConfig, ccsgsUserHighWater=ccsgsUserHighWater, ccsLoadStatSessionCreateDenialRate=ccsLoadStatSessionCreateDenialRate, ccspsTransactionRateHighWaterTime=ccspsTransactionRateHighWaterTime, ccsLoadStatBMAMsgsAllowedRateHighWater=ccsLoadStatBMAMsgsAllowedRateHighWater, ciscoContentServicesProtocolParseFailAlarmCleared=ciscoContentServicesProtocolParseFailAlarmCleared, ccsBMAState=ccsBMAState, ccsLoadStatQuotaMgrMsgsAllowedRateHighWater=ccsLoadStatQuotaMgrMsgsAllowedRateHighWater, ciscoContentServiceProtocolStatsGroup=ciscoContentServiceProtocolStatsGroup, ccsgsGTPQuotaMgrRejected=ccsgsGTPQuotaMgrRejected, ccsQuotaMgrHighWater=ccsQuotaMgrHighWater, ciscoContentServicesBMAGroupSup1=ciscoContentServicesBMAGroupSup1, ccspsSubOutPackets=ccspsSubOutPackets, ccspsNetOutBitRate=ccspsNetOutBitRate, ccspsNetOutPacketRate=ccspsNetOutPacketRate, ccsBMAHCFailAck=ccsBMAHCFailAck, ccsLoadStatUserDBReqAllowedRate=ccsLoadStatUserDBReqAllowedRate)
mibBuilder.exportSymbols("CISCO-CONTENT-SERVICES-MIB", ccsgsGxRevalidationSuccess=ccsgsGxRevalidationSuccess, ccsLoadStatQuotaMgrMsgsDenialRate=ccsLoadStatQuotaMgrMsgsDenialRate, ccsLoadStatHCSessionCreateDenied=ccsLoadStatHCSessionCreateDenied, ccsBMAHCBadRecord=ccsBMAHCBadRecord, ccsLoadStatUserDBReqDenialRateHighWater=ccsLoadStatUserDBReqDenialRateHighWater, ciscoContentServicesMIBComplianceRev3=ciscoContentServicesMIBComplianceRev3, ccsgsHTTPHdrBlock=ccsgsHTTPHdrBlock, ccspsTransaction=ccspsTransaction, ccsNetServerFirstPayloadResponseTime=ccsNetServerFirstPayloadResponseTime, ccsUserDbRequests=ccsUserDbRequests, ccsBMATotalSent=ccsBMATotalSent, ciscoContentServicesNotifGroupSup1=ciscoContentServicesNotifGroupSup1, ccsUserDbTable=ccsUserDbTable, ccsProtocolStatsEntry=ccsProtocolStatsEntry, ccsLoadStatHCUserDBReqAllowedRate=ccsLoadStatHCUserDBReqAllowedRate, ccsLoadStatHCSessionCreateAllowed=ccsLoadStatHCSessionCreateAllowed, ccsgsHTTPHdrObscure=ccsgsHTTPHdrObscure, ccsBMARetransmit=ccsBMARetransmit, ccsUserDbHCRequests=ccsUserDbHCRequests, ccsLoadStatHCQuotaMgrMsgsDenialRate=ccsLoadStatHCQuotaMgrMsgsDenialRate, ciscoContentServicesMIBComplianceRev5=ciscoContentServicesMIBComplianceRev5, ccsLoadStatSessionEntry=ccsLoadStatSessionEntry, ccsLoadStatGxEventsDenied=ccsLoadStatGxEventsDenied, ccsAdControlAlarmUpdateTimer=ccsAdControlAlarmUpdateTimer, ccsgsSessionThreshold=ccsgsSessionThreshold, ciscoContentServicesBMAStateChange=ciscoContentServicesBMAStateChange, ccsBMALostRecordEventNotifEnabled=ccsBMALostRecordEventNotifEnabled, ccsLoadStatHCBMAMsgsDenied=ccsLoadStatHCBMAMsgsDenied, ccsNetServerResponseTimeFailAlarmThreshold=ccsNetServerResponseTimeFailAlarmThreshold, ccspsHCNetOutBytes=ccspsHCNetOutBytes, ccsNetServerIpAddrTypeNotifInfo=ccsNetServerIpAddrTypeNotifInfo, ccsLoadStatHCSessionCreateAllowedRateHighWater=ccsLoadStatHCSessionCreateAllowedRateHighWater, ccsLoadStatHCGxEventsDenialRate=ccsLoadStatHCGxEventsDenialRate, ccsgsGTPBMADropped=ccsgsGTPBMADropped, ccsgsHCGTPQuotaMgrRetransmit=ccsgsHCGTPQuotaMgrRetransmit, ciscoContentServicesNotifGroup=ciscoContentServicesNotifGroup, ciscoContentServicesSessionThreshold=ciscoContentServicesSessionThreshold, ccsUserDbReqResent=ccsUserDbReqResent, ccsProtocolParseFailAlarmThreshold=ccsProtocolParseFailAlarmThreshold, ccsLoadStatUserDBTable=ccsLoadStatUserDBTable, ccsLoadStatUserDBReqDenied=ccsLoadStatUserDBReqDenied, ccsNotifCfgTable=ccsNotifCfgTable, ccsNetServerResponseTimeFailClearThreshold=ccsNetServerResponseTimeFailClearThreshold, ccsQuotaMgrTable=ccsQuotaMgrTable, ccsQuotaMgrTotalSent=ccsQuotaMgrTotalSent, ccsgsUserThreshold=ccsgsUserThreshold, ccsUserDbVrfName=ccsUserDbVrfName, ccsProtocolParseFailCountNotifInfo=ccsProtocolParseFailCountNotifInfo, ccsQuotaMgrPriority=ccsQuotaMgrPriority, ciscoContentServicesMIBComplianceRev8=ciscoContentServicesMIBComplianceRev8, ciscoContentServicesGlobalStatsGroupSup1=ciscoContentServicesGlobalStatsGroupSup1, ccsgsHCGTPQuotaMgrRejected=ccsgsHCGTPQuotaMgrRejected, ccsUserDbStateChangeNotifEnabled=ccsUserDbStateChangeNotifEnabled, ciscoContentServicesProtocolParseFailExceeded=ciscoContentServicesProtocolParseFailExceeded, ccsUserThresholdExceededNotifEnabled=ccsUserThresholdExceededNotifEnabled, ccsLoadStatBMAMsgsIPCQueueDepthTolerance=ccsLoadStatBMAMsgsIPCQueueDepthTolerance, ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater=ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater, ciscoContentServicesQuotaMgrStateChange=ciscoContentServicesQuotaMgrStateChange, ccspsHCSubOutBytes=ccspsHCSubOutBytes, ciscoContentServicesMIBComplianceRev6=ciscoContentServicesMIBComplianceRev6, ccsQuotaMgrAckRate=ccsQuotaMgrAckRate, ciscoContentServicesLoadStatQuotaMgrGroupSup1=ciscoContentServicesLoadStatQuotaMgrGroupSup1, ccsgsUserCurrent=ccsgsUserCurrent, ccspsSubOutBitRateHighWater=ccspsSubOutBitRateHighWater, ccsBMAVrfName=ccsBMAVrfName, CcsServerPriority=CcsServerPriority, ccsgsHCGTPQuotaMgrDropped=ccsgsHCGTPQuotaMgrDropped, ccsgsGxRuleDeactivationFail=ccsgsGxRuleDeactivationFail, ccsQuotaMgrRetransmit=ccsQuotaMgrRetransmit, ciscoContentServicesMIBGroups=ciscoContentServicesMIBGroups, ccsgsGTPBMARetransmit=ccsgsGTPBMARetransmit, ccspsNetOutBitRateHighWaterResetTime=ccspsNetOutBitRateHighWaterResetTime, ccsBMAPort=ccsBMAPort, ccsgsGTPBMARejected=ccsgsGTPBMARejected, ciscoContentServicesMIBCompliances=ciscoContentServicesMIBCompliances, ccsLoadStatHCSessionCreateDenialRateHighWater=ccsLoadStatHCSessionCreateDenialRateHighWater, ccsLoadStatBMAMsgsDenialRateHighWater=ccsLoadStatBMAMsgsDenialRateHighWater, ciscoContentServicesGlobalHTTPGroup=ciscoContentServicesGlobalHTTPGroup, ccsLoadStatSessionCreateAllowed=ccsLoadStatSessionCreateAllowed, ccsLoadStatHCRadiusStartAllowed=ccsLoadStatHCRadiusStartAllowed, ccsLoadStatSessionTable=ccsLoadStatSessionTable, ccsLoadStatHCRadiusStartDenied=ccsLoadStatHCRadiusStartDenied, ccsQuotaMgrTableEntry=ccsQuotaMgrTableEntry, ciscoContentServicesUserDbStateChange=ciscoContentServicesUserDbStateChange, ccsQuotaMgrVrfName=ccsQuotaMgrVrfName)
