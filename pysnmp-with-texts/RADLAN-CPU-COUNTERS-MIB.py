#
# PySNMP MIB module RADLAN-CPU-COUNTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-CPU-COUNTERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:45:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Gauge32, ModuleIdentity, Counter32, Counter64, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, TimeTicks, Integer32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ModuleIdentity", "Counter32", "Counter64", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "TimeTicks", "Integer32", "MibIdentifier", "NotificationType")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
rlCpuCounters = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 124))
rlCpuCounters.setRevisions(('2007-05-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlCpuCounters.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlCpuCounters.setLastUpdated('2007010600Z')
if mibBuilder.loadTexts: rlCpuCounters.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlCpuCounters.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlCpuCounters.setDescription('CPU Counter MIBs')
rlCpuCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 124, 1), )
if mibBuilder.loadTexts: rlCpuCountersTable.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersTable.setDescription('Table of rx&tx counter, the key is cpuCounters')
rlCpuCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 124, 1, 1), ).setIndexNames((0, "RADLAN-CPU-COUNTERS-MIB", "rlCpuCountersTarget"))
if mibBuilder.loadTexts: rlCpuCountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersEntry.setDescription('Table of rx&tx counters, the key is cpuCounters')
rlCpuCountersTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("cpuCounters", 0))))
if mibBuilder.loadTexts: rlCpuCountersTarget.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersTarget.setDescription('Packet type can be Multicast (MC), Broadcast (BC) or Unicast(UC)')
rlCpuCountersTxBC = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersTxBC.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersTxBC.setDescription('Number of received broadcast packets.')
rlCpuCountersTxMC = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersTxMC.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersTxMC.setDescription('Number of transmitted multicast packets.')
rlCpuCountersTxUC = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersTxUC.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersTxUC.setDescription('Number of transmitted unicast packets.')
rlCpuCountersTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersTxOctets.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersTxOctets.setDescription('Number of transmitted octets.')
rlCpuCountersRxBC = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersRxBC.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersRxBC.setDescription('Number of received broadcast packets.')
rlCpuCountersRxMC = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersRxMC.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersRxMC.setDescription('Number of received mutlicast packets.')
rlCpuCountersRxUC = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersRxUC.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersRxUC.setDescription('Number of received unicast packets.')
rlCpuCountersRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 124, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuCountersRxOctets.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersRxOctets.setDescription('Number of received octets')
rlCpuCountersReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 124, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCpuCountersReset.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersReset.setDescription('Setting true to this MIB object will reset the CPU counters.')
rlCpuCountersEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 124, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCpuCountersEnabled.setStatus('current')
if mibBuilder.loadTexts: rlCpuCountersEnabled.setDescription('True - feature is enabled, false - feature is disabled ')
mibBuilder.exportSymbols("RADLAN-CPU-COUNTERS-MIB", rlCpuCountersEntry=rlCpuCountersEntry, rlCpuCountersRxUC=rlCpuCountersRxUC, rlCpuCountersEnabled=rlCpuCountersEnabled, PYSNMP_MODULE_ID=rlCpuCounters, rlCpuCounters=rlCpuCounters, rlCpuCountersTxOctets=rlCpuCountersTxOctets, rlCpuCountersTarget=rlCpuCountersTarget, rlCpuCountersTable=rlCpuCountersTable, rlCpuCountersTxBC=rlCpuCountersTxBC, rlCpuCountersRxOctets=rlCpuCountersRxOctets, rlCpuCountersReset=rlCpuCountersReset, rlCpuCountersTxUC=rlCpuCountersTxUC, rlCpuCountersRxBC=rlCpuCountersRxBC, rlCpuCountersRxMC=rlCpuCountersRxMC, rlCpuCountersTxMC=rlCpuCountersTxMC)
