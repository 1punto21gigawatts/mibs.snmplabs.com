#
# PySNMP MIB module ALC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALC-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, enterprises, ModuleIdentity, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, MibIdentifier, Counter32, Integer32, TimeTicks, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "ModuleIdentity", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "Counter32", "Integer32", "TimeTicks", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTALCCfgTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27))
cdx6500PPCTALCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1), )
if mibBuilder.loadTexts: cdx6500PPCTALCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTALCPortTable.setDescription('This table contains ALC Port configuration parameters')
cdx6500PPCTALCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTALCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTALCPortEntry.setDescription('Entries in the ALC Port Configuration Table.')
alcPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgPortNumber.setDescription('Port number of this port.')
alcPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31))).clone(namedValues=NamedValues(("alc", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgPortType.setDescription('Port Type of this port.')
alcPCfgSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alcHpad", 1), ("alcTpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgSubtype.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgSubtype.setDescription('This is the ALC port subtype. alcHpad - Host PAD. alcTpad - Terminal PAD.')
alcPCfgPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 13, 15))).clone(namedValues=NamedValues(("simp", 1), ("emri", 4), ("emdc", 5), ("dtr", 13), ("alcDte", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgPortControl.setDescription('Specify any of the following port control options: simp : Simple connection with no control signal handshake. dtr : Connection with DTR control signal handshake. emri : Port emulates a modem and does dial-in/out handshake with RI. emdc : Port emulates a modem and does dial-in/out handshake with DCD. alcDte : DTE emulation with RTS/CTS handshake.')
alcPCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("int", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgClockSource.setDescription('int : Internal clock source. ext : External clock source.')
alcPCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clkspd1200", 1), ("clkspd2400", 2), ("clkspd4800", 3), ("clkspd9600", 4), ("clkspd19200", 5), ("clkspd38400", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking.')
alcPCfgPollDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPollDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgPollDelayTimer.setDescription('This is the delay in milliseconds to impose between poll cycles if no interchanges are polled. Valid on TPAD lines only.')
alcPCfgHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgHostTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgHostTimeout.setDescription('On a poll coerced line, the host is considered to be down if a poll is not received within this time, specified in milliseconds. Valid on HPAD lines only.')
alcPCfgMaxMesgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgMaxMesgSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgMaxMesgSize.setDescription('This specifies the maximum size of messages that can be sent or received on this line excluding padding characters. TPAD may receive multiple messages in a frame, HPAD may transmit multiple messages in a frame.')
alcPCfgMinIntrvlBetweenPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgMinIntrvlBetweenPolls.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgMinIntrvlBetweenPolls.setDescription('The minimum length of time, in milliseconds, between polls issued on this line. Valid on TPAD lines only.')
alcPCfgRtsCtsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgRtsCtsTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgRtsCtsTimeout.setDescription('The time in milliseconds, within which CTS must be raised following the RTS signal.')
alcPCfgLeadPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgLeadPadChar.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgLeadPadChar.setDescription('This is the character to use when inserting leading padding characters.')
alcPCfgNumLeadPadChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgNumLeadPadChars.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgNumLeadPadChars.setDescription('This is the number of leading padding characters to use.')
alcPCfgTrailPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgTrailPadChar.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgTrailPadChar.setDescription('This is the character to use when inserting trailing padding characters.')
alcPCfgNumTrailPadChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgNumTrailPadChars.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgNumTrailPadChars.setDescription('This is the number of trailing padding characters to use.')
alcPCfgALCLineOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 71))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgALCLineOptions.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgALCLineOptions.setDescription("Select options on this ALC port as follows: NONE : no option specified EMB_SYNC : Sychronization characters are inserted between messages in the same frame. MASK8 : Indicates that the `8' bit is treated as zero when examining interchange addresses on this line. COERCE : Poll coercion is used. CLASH : Poll responses will be aborted if a poll is received whilst a response to a previous poll is being transmitted. RFRTM : Responses will be generated to Response and Forward RTM messages. RZRTM : Responses will be generated to enquiry RTM messages. SOFT_SYNC : Selects software synchronization. NULLS : Nulls are allowed in the data stream. BACKTOBACK : Frames may be received back to back. Any combination of the above maybe specified by summing (e.g. NULLS+BACKTOBACK. . .).")
alcPCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgConnType.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgConnType.setDescription('none : No connection. x25 : Connection type is X.25. nc : Skipped during configuration')
alcPCfgAcallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgAcallMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgAcallMnemonic.setDescription('This is the mnemonic to be used to establish the call when the call request is issued. The mnemonic must be defined in the mnemonic table. If no mnemonic is specified, ALP PAD will wait for the call. It consists of 0-8 alphanumeric characters, and the space character is used to blank the field.')
alcPCfgCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgCallingAddress.setDescription('The calling address to be used in outbound calls. It consists of 0-15 BCD digits, and the space character is used to blank the field.')
alcPCfgCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgCUD.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgCUD.setDescription('The Call User Data field to be used in outbound calls. It consists of a list of up to 16 hexadecimal numbers between 0 and FF, separated by commas.')
alcPCfgNumOfBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgNumOfBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgNumOfBuffers.setDescription('This defines the number of buffers that are available for data transfer in each direction. Each buffer will hold one message.')
alcPCfgInHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgInHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgInHeader.setDescription('This data is assumed to be at the start of all messages received from X.25. If IA and/or TA are specified in the header, the values associated with these positions are checked against the IA and TA associated with the header is then removed from the message, and replaced by the IA and TA associated with the connection.')
alcPCfgOutHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgOutHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgOutHeader.setDescription('This data is prefixed to all messages sent to X.25. If IA and/or TA are specified in the header, the IA and TA associated with the connection are inserted into the outgoing message at the positions specified by the header. The IA and TA received from ALC are removed and replaced with the OUT Header.')
alcPCfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgReconnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgReconnectTimeout.setDescription('The time in seconds between attempts to establish an X.25 virtual circuit when the ALP connection is enabled, or after the SVC has been cleared.')
alcPCfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgInactivityTimeout.setDescription('The time in seconds after which the call is cleared if no data is transmitted or received. A value of 0 disables the timer.')
alcPCfgDebounceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgDebounceTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgDebounceTimeout.setDescription('This defines the time in seconds for which the PAD waits before implementing the shutdown action. If the time out is 0, shutdown occurs immediately.')
alcPCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgParity.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgParity.setDescription('none : No parity will be used. odd : All messages sent to X.25 will have odd parity. nc : Skipped during configuration')
alcPCfgConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgConnOptions.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgConnOptions.setDescription('Options controlling the behaviour of the connection. NONE : No options are specified. HDR : ALP PAD discards all data messages incoming from the network in which the constant parts of the IN Header do not match the header of the message. ALCSD : If this option is specified and the SVC goes down, then the ALC entity is shutdown. CSD : If this option is specified and the ALC entity goes down, then the associated call is cleared. FLOW : If the number of free buffers decreases to 20% of its maximum, then flow control is imposed on the receiver. It is released when the number of free buffers reaches 50% of its maximum. If the option is not set, messages received when there are no buffers available will be discarded. Note that flow control requests from X.25 are always acted upon, regardless of the setting of this option. USE_ADDR : The address in the received message is used when the message is passed to ALC, and address checking is turned off. Any combination of the above maybe specified by summing (e.g. FLOW+USE_ADDR+. . .).')
alcPCfgAvailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgAvailableMesg.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgAvailableMesg.setDescription('This specifies the text of a message that is broadcast to the ALC entity associated with this connection after a message from that terminal has been discarded due to the X.25 VC being down. This message is only sent if an Unavailable message has previously been sent to one of the terminals associated with this connection. If no message is defined, none is sent. The space character is used to blank this field. Note that this is only used on TPAD configurations.')
alcPCfgUnavailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgUnavailableMesg.setStatus('mandatory')
if mibBuilder.loadTexts: alcPCfgUnavailableMesg.setDescription('This specifies the text of a message that is sent to a terminal when a message from that terminal is discarded because the X.25 VC is down. If no message is defined, none is sent. The space character is used to blank this field. Note that this is only used on TPAD configurations.')
cdx6500PPCTALCInterchangeTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2), )
if mibBuilder.loadTexts: cdx6500PPCTALCInterchangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTALCInterchangeTable.setDescription('This table contains ALC Interchange configuration parameters')
cdx6500PPCTALCInterchangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcICfgPortNumber"), (0, "ALC-OPT-MIB", "alcICfgInterchangeAddress"))
if mibBuilder.loadTexts: cdx6500PPCTALCInterchangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTALCInterchangeEntry.setDescription('Entries in the ALC Interchange Configuration Table.')
alcICfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgPortNumber.setDescription('Port number of this port.')
alcICfgInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgInterchangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgInterchangeAddress.setDescription('The address of the interchange. Addresses 0D,0F,1D,2D,3D and 3F are illegal as they are used as line control characters.')
alcICfgOptionOnInvalidCCC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("discard", 2), ("resend", 3), ("reenter", 4), ("ignore", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgOptionOnInvalidCCC.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgOptionOnInvalidCCC.setDescription("The action to be taken on receipt of a message with an invalid ccc. discard : Discard the message ignore : Treat the message as correct. reenter : (TPAD only) The configured `re-enter' message is sent to the terminal. resend : (TPAD only) A resend request message is sent to the terminal.")
alcICfgGenTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgGenTerminalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgGenTerminalAddress.setDescription('Specifies the terminal address to which broadcast messages are sent when the GTA option is specified.')
alcICfgHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgHostTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgHostTimeout.setDescription('The host is considered to be down if a poll is not received within this period, which is specified in milliseconds.')
alcICfgMaxComponentsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgMaxComponentsPerFrame.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgMaxComponentsPerFrame.setDescription('Specifies the maximum number of message segments transmitted in one frame (HPAD) or expected in one frame (TPAD).')
alcICfgFastPollCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgFastPollCycleCount.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgFastPollCycleCount.setDescription('The polling rate for an interchange in fast poll. A poll is issued to this interchange once in every n poll cycles on the line.')
alcICfgSlowPollCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgSlowPollCycleCount.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgSlowPollCycleCount.setDescription('The polling rate for an interchange in slow poll. One slow poll IA is polled every n poll cycles on the line.')
alcICfgN1Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgN1Counter.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgN1Counter.setDescription('The number of polls that can be sent without receiving a response before the interchange enters slow poll.')
alcICfgN2Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgN2Counter.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgN2Counter.setDescription('The number of good poll responses required before the interchange enters fast poll.')
alcICfgT1Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgT1Timeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgT1Timeout.setDescription('The time, in milliseconds, within which an interchange must start responding to a poll.')
alcICfgT2Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgT2Timeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgT2Timeout.setDescription('The time, in milliseconds, within which an interchange must complete its transmission.')
alcICfgReenterMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgReenterMessage.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgReenterMessage.setDescription('This specifies the text of a message sent to terminals when a message with an incorrect ccc is received and the action on receipt of an invalid ccc is REENTER. Note that some terminals may require control characters at the start of the message.')
alcICfgStartMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgStartMessage.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgStartMessage.setDescription('This specifies the text of a message sent to terminals when polling of this interchange is started and the STST option is configured. Note that some terminals may require control characters at the start of the message.')
alcICfgStopMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgStopMessage.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgStopMessage.setDescription('This specifies the text of a message sent to terminals when polling of this interchange is stopped and the STST option is configured. Note that some terminals may require control characters at the start of the message.')
alcICfgOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgOptions.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgOptions.setDescription('Select options on this ALC Interchange as follows : NONE : no option specified GTA : (TPAD only) Indicates that there is a general terminal address which may be used for broadcasting to all terminals on the interchange. NOPOLL : (TPAD only) Indicates that this interchange is not to be polled. RESET : Indicates that the interchange is capable of handling ALC Reset messages. STST : (TPAD only) Indicates that the configured start and stop messages should be transmitted when polling is started or stopped. Any combination of the above maybe specified by summing (e.g. GTA+NOPOLL+. . .).')
alcICfgValidTAList = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgValidTAList.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgValidTAList.setDescription("A list of hexadecimal numbers between 1 and 3F separated by commas. /f or /r after each is used to indicate forward or reverse abort respectively. Ranges may be specified by separating two addresses by a dash `-'. Note that the addresses 0D, 1D, 2D, 3D and 3F are illegal. The list of terminal addresses that may be configured on the line, including the forward or reverse abort settings for each terminal.")
alcICfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgConnType.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgConnType.setDescription('none : No connection. x25 : Connection type is X.25. nc : Skipped during configuration')
alcICfgAcallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgAcallMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgAcallMnemonic.setDescription('This is the mnemonic to be used to establish the call when the call request is issued. The mnemonic must be defined in the mnemonic table. If no mnemonic is specified, ALP PAD will wait for the call. It consists of 0-8 alphanumeric characters, and the space character is used to blank the field.')
alcICfgCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgCallingAddress.setDescription('The calling address to be used in outbound calls. It consists of 0-15 BCD digits, and the space character is used to blank the field.')
alcICfgCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgCUD.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgCUD.setDescription('The Call User Data field to be used in outbound calls. It consists of a list of up to 16 hexadecimal numbers between 0 and FF, separated by commas.')
alcICfgNumOfBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgNumOfBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgNumOfBuffers.setDescription('This defined the number of buffers that are available for data transfer in each direction. Each buffer will hold one message.')
alcICfgInHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgInHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgInHeader.setDescription('This data is assumed to be at the start of all messages received from X.25. If IA and/or TA are specified in the header, the values associated with these positions are checked against the IA and TA associated with the header is then removed from the message, and replaced by the IA and TA associated with the connection.')
alcICfgOutHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgOutHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgOutHeader.setDescription('This data is prefixed to all messages sent to X.25. If IA and/or TA are specified in the header, the IA and TA associated with the connection are inserted into the outgoing message at the positions specified by the header. The IA and TA received from ALC are removed and replaced with the OUT Header.')
alcICfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgReconnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgReconnectTimeout.setDescription('The time in seconds between attempts to establish an X.25 virtual circuit when the ALP connection is enabled, or after the SVC has been cleared.')
alcICfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgInactivityTimeout.setDescription('The time in seconds after which the call is cleared if no data is transmitted or received. A value of 0 disables the timer.')
alcICfgDebounceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgDebounceTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgDebounceTimeout.setDescription('This defines the time in seconds for which the PAD waits before implementing the shutdown action. If the time out is 0, shutdown occurs immediately.')
alcICfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgParity.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgParity.setDescription('none : No parity will be used. odd : All messages sent to X.25 will have odd parity. nc : Skipped during configuration')
alcICfgConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgConnOptions.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgConnOptions.setDescription('Options controlling the behaviour of the connection. NONE : No options are specified. HDR : ALP PAD discards all data messages incoming from the network in which the constant parts of the IN Header do not match the header of the message. ALCSD : If this option is specified and the SVC goes down, then the ALC entity is shutdown. CSD : If this option is specified and the ALC entity goes down, then the associated call is cleared. FLOW : If the number of free buffers decreases to 20% of its maximum, then flow control is imposed on the receiver. It is released when the number of free buffers reaches 50% of its maximum. If the option is not set, messages received when there are no buffers available will be discarded. Note that flow control requests from X.25 are always acted upon, regardless of the setting of this option. USE_ADDR : The address in the received message is used when the message is passed to ALC, and address checking is turned off. Any combination of the above maybe specified by summing (e.g. FLOW+USE_ADDR+. . .).')
alcICfgAvailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgAvailableMesg.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgAvailableMesg.setDescription('This specifies the text of a message that is broadcast to the ALC entity associated with this connection after a message from that terminal has been discarded due to the X.25 VC being down. This message is only sent if an Unavailable message has previously been sent to one of the terminals associated with this connection. If no message is defined, none is sent. The space character is used to blank this field. Note that this is only used on TPAD configurations.')
alcICfgUnavailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgUnavailableMesg.setStatus('mandatory')
if mibBuilder.loadTexts: alcICfgUnavailableMesg.setDescription('This specifies the text of a message that is sent to a terminal when a message from that terminal is discarded because the X.25 VC is down. If no message is defined, none is sent. The space character is used to blank this field. Note that this is only used on TPAD configurations.')
cdx6500PPCTALCTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3), )
if mibBuilder.loadTexts: cdx6500PPCTALCTerminalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTALCTerminalTable.setDescription('This table contains ALC Terminal configuration parameters')
cdx6500PPCTALCTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcTCfgPortNumber"), (0, "ALC-OPT-MIB", "alcTCfgInterchangeAddress"), (0, "ALC-OPT-MIB", "alcTCfgTerminalAddress"))
if mibBuilder.loadTexts: cdx6500PPCTALCTerminalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTALCTerminalEntry.setDescription('Entries in the ALC Terminal Configuration Table.')
alcTCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgPortNumber.setDescription('Port number of this port.')
alcTCfgInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgInterchangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgInterchangeAddress.setDescription('The address of the interchange. Addresses 0D,0F,1D,2D,3D and 3F are illegal as they are used as line control characters.')
alcTCfgTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgTerminalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgTerminalAddress.setDescription('Address identifying this terminal.')
alcTCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgConnType.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgConnType.setDescription('none : No connection type. x25 : Connection type is X.25. nc : Skipped during configuration')
alcTCfgAcallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgAcallMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgAcallMnemonic.setDescription('This is the mnemonic to be used to establish the call when the call request is issued. The mnemonic must be defined in the mnemonic table. If no mnemonic is specified, ALP PAD will wait for the call. It consists of 0-8 alphanumeric characters, and the space character is used to blank the field.')
alcTCfgCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgCallingAddress.setDescription('The calling address to be used in outbound calls. It consists of 0-15 BCD digits, and the space character is used to blank the field.')
alcTCfgCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgCUD.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgCUD.setDescription('The Call User Data field to be used in outbound calls. It consists of a list of up to 16 hexadecimal numbers between 0 and FF, separated by commas.')
alcTCfgNumOfBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgNumOfBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgNumOfBuffers.setDescription('This defined the number of buffers that are available for data transfer in each direction. Each buffer will hold one message.')
alcTCfgInHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgInHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgInHeader.setDescription('This data is assumed to be at the start of all messages received from X.25. If IA and/or TA are specified in the header, the values associated with these positions are checked against the IA and TA associated with the header is then removed from the message, and replaced by the IA and TA associated with the connection.')
alcTCfgOutHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgOutHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgOutHeader.setDescription('This data is prefixed to all messages sent to X.25. If IA and/or TA are specified in the header, the IA and TA associated with the connection are inserted into the outgoing message at the positions specified by the header. The IA and TA received from ALC are removed and replaced with the OUT Header.')
alcTCfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgReconnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgReconnectTimeout.setDescription('The time in seconds between attempts to establish an X.25 virtual circuit when the ALP connection is enabled, or after the SVC has been cleared.')
alcTCfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgInactivityTimeout.setDescription('The time in seconds after which the call is cleared if no data is transmitted or received. A value of 0 disables the timer.')
alcTCfgDebounceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgDebounceTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgDebounceTimeout.setDescription('This defines the time in seconds for which the PAD waits before implementing the shutdown action. If the time out is 0, shutdown occurs immediately.')
alcTCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgParity.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgParity.setDescription('none : No parity will be used. odd : All messages sent to X.25 will have odd parity. nc : Skipped during configuration')
alcTCfgConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgConnOptions.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgConnOptions.setDescription('Options controlling the behaviour of the connection. NONE : No options are specified. HDR : ALP PAD discards all data messages incoming from the network in which the constant parts of the IN Header do not match the header of the message. ALCSD : If this option is specified and the SVC goes down, then the ALC entity is shutdown. CSD : If this option is specified and the ALC entity goes down, then the associated call is cleared. FLOW : If the number of free buffers decreases to 20% of its maximum, then flow control is imposed on the receiver. It is released when the number of free buffers reaches 50% of its maximum. If the option is not set, messages received when there are no buffers available will be discarded. Note that flow control requests from X.25 are always acted upon, regardless of the setting of this option. USE_ADDR : The address in the received message is used when the message is passed to ALC, and address checking is turned off. Any combination of the above maybe specified by summing (e.g. FLOW+USE_ADDR+. . .).')
alcTCfgAvailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgAvailableMesg.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgAvailableMesg.setDescription('This specifies the text of a message that is broadcast to the ALC entity associated with this connection after a message from that terminal has been discarded due to the X.25 VC being down. This message is only sent if an Unavailable message has previously been sent to one of the terminals associated with this connection. If no message is defined, none is sent. The space character is used to blank this field. Note that this is only used on TPAD configurations.')
alcTCfgUnavailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgUnavailableMesg.setStatus('mandatory')
if mibBuilder.loadTexts: alcTCfgUnavailableMesg.setDescription('This specifies the text of a message that is sent to a terminal when a message from that terminal is discarded because the X.25 VC is down. If no message is defined, none is sent. The space character is used to blank this field. Note that this is only used on TPAD configurations.')
cdx6500PPSTALCStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28))
cdx6500PPSTALCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1), )
if mibBuilder.loadTexts: cdx6500PPSTALCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTALCPortTable.setDescription('This table contains ALC Port Statistics parameters.')
cdx6500PPSTALCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcPStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTALCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTALCPortEntry.setDescription('Entries in the ALC Port Statistics Table.')
alcPStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsPortNumber.setDescription('Port number of this port.')
alcPStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31))).clone(namedValues=NamedValues(("alc", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsPortType.setDescription('Port type of this port.')
alcPStatsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 11, 100))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("timedOut", 7), ("pending", 8), ("connecting", 9), ("flowCtrl", 11), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortState.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsPortState.setDescription('Current Port State. connecting:The line has been enabled by the operator, but polling has not yet been established. online :The line is active. offline :The line has been disabled by the operator. pending :The line is inactive because of conditions detected by ALP PAD (X.25 virtual circuit not active). timedOut :The line is not being polled. This will be displayed on poll coerced HPAD lines only. flowCtrl :The application (ALP PAD) has imposed flow control on the line. na :Value not Available')
alcPStatsFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsFramesIn.setDescription('Number of frames received.')
alcPStatsFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsFramesOut.setDescription('Number of frames transmitted.')
alcPStatsDataMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDataMesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsDataMesgsIn.setDescription('Number of data messages received.')
alcPStatsDataMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDataMesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsDataMesgsOut.setDescription('Number of data messages transmitted.')
alcPStatsCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsCharsIn.setDescription('Number of characters received.')
alcPStatsCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsCharsOut.setDescription('Number of characters transmitted.')
alcPStatsPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPolls.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsPolls.setDescription('Number of polls transmitted or received.')
alcPStatsGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsGAs.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsGAs.setDescription('Number of Go Ahead messages transmitted or received.')
alcPStatsResets = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsResets.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsResets.setDescription('Number of Reset messages transmitted or received.')
alcPStatsDiscardBadIAIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDiscardBadIAIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsDiscardBadIAIn.setDescription('Number of received messages discarded due to bad Interchange Address.')
alcPStatsDiscardBadIAOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDiscardBadIAOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsDiscardBadIAOut.setDescription('Number of transmitted messages discarded due to bad Interchange Address.')
alcPStatsMaxQSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsMaxQSizeOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsMaxQSizeOut.setDescription('Maximum transmit queue size.')
alcPStatsCCCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCCCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsCCCErrors.setDescription('Number of messages received with an invalid checksum.')
alcPStatsSignalLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsSignalLosses.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsSignalLosses.setDescription('Number of Signal Losses.')
alcPStatsOverlengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsOverlengthFrames.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsOverlengthFrames.setDescription('Number of overlength frames received.')
alcPStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("busyOut", 3), ("up", 4), ("down", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsPortStatus.setDescription('Current Port Status. na :Value not Available')
alcPStatsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("connecting", 3), ("inactive", 4), ("pending", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsConnState.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsConnState.setDescription('Current state of the connection. online :The connection is available for data transfer. offline :The connection has been disabled by an operator. connecting:The ALP PAD is attempting to make the X.25 virtual circuit available for use. inactive :The inactivity timer has expired, so the virtual circuit has been dropped. Data received from ALC will cause the connection to be re-established. pending :The CSD option has been configured and the ALC entity is currently down; hence the ALP PAD has disabled the virtual circuit. na :Value not Available')
alcPStatsALCMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCMesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsALCMesgsIn.setDescription('The number of messages received from ALC.')
alcPStatsALCMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCMesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsALCMesgsOut.setDescription('The number of messages transmitted to ALC.')
alcPStatsX25MesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25MesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25MesgsIn.setDescription('The number of messages received from X.25.')
alcPStatsX25MesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25MesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25MesgsOut.setDescription('The number of messages transmitted to X.25.')
alcPStatsALCCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsALCCharsIn.setDescription('The number of characters received from ALC.')
alcPStatsALCCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsALCCharsOut.setDescription('The number of characters transmitted to ALC.')
alcPStatsX25CharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25CharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25CharsIn.setDescription('The number of characters received from X.25.')
alcPStatsX25CharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25CharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25CharsOut.setDescription('The number of characters transmitted to X.25.')
alcPStatsALCDiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCDiscardedMesgsEntityDown.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsALCDiscardedMesgsEntityDown.setDescription('The number of messages received by ALC for which the destination entity is unable to process the data.')
alcPStatsX25DiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsEntityDown.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsEntityDown.setDescription('The number of messages received by X.25 for which the destination entity is unable to process the data.')
alcPStatsX25DiscardedMesgsBadALCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsBadALCAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsBadALCAddr.setDescription('The number of messages received from X.25 for which the addresses specified do not match those associated with the connection.')
alcPStatsX25DiscardedMesgsBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsBadHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsBadHeader.setDescription('The number of messages received by X.25 of which the IN header configured does not match the header present in the message.')
alcPStatsX25DiscardedMesgsTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsTooLong.setDescription('The number of messages received from X.25 that were discarded because they were longer than the allowable ALC maximum configured.')
alcPStatsALCDiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCDiscardedMesgsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsALCDiscardedMesgsQFull.setDescription('The number of messages discarded because the ALC outbound message queue was full.')
alcPStatsX25DiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsQFull.setDescription('The number of messages discarded because the X.25 outbound message queue was full.')
alcPStatsCurrTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCurrTxALCQSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsCurrTxALCQSize.setDescription('The number of messages currently queued in the ALC outbound message queue for transmission.')
alcPStatsCurrTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCurrTxX25QSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsCurrTxX25QSize.setDescription('The number of messages currently queued in the X.25 outbound message queue for transmission.')
alcPStatsMaxTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsMaxTxALCQSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsMaxTxALCQSize.setDescription('The maximum (highwater mark) size of the ALC outbound queue so far.')
alcPStatsMaxTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsMaxTxX25QSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcPStatsMaxTxX25QSize.setDescription('The maximum (highwater mark) size of the X.25 outbound queue so far.')
cdx6500PPSTALCInterchangeTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2), )
if mibBuilder.loadTexts: cdx6500PPSTALCInterchangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTALCInterchangeTable.setDescription('This table contains ALC Interchange Statistics parameters.')
cdx6500PPSTALCInterchangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcIStatsPortNumber"), (0, "ALC-OPT-MIB", "alcIStatsInterchangeAddress"))
if mibBuilder.loadTexts: cdx6500PPSTALCInterchangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTALCInterchangeEntry.setDescription('Entries in the ALC Interchange Statistics Table.')
alcIStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsPortNumber.setDescription('Port number of this port.')
alcIStatsInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsInterchangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsInterchangeAddress.setDescription('The address of the interchange. Addresses 0D,0F,1D,2D,3D and 3F are illegal as they are used as line control characters.')
alcIStatsInterchangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 10, 11, 100))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("fastPoll", 3), ("slowPoll", 4), ("stopped", 6), ("timedOut", 7), ("pending", 8), ("failed", 10), ("flowCtrl", 11), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsInterchangeState.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsInterchangeState.setDescription('Current State of this Interchange. online :The interchange is active. This is displayed for HPAD interchanges, and TPAD interchanges configured as NOPOLL, only. offline :The interchange has been disabled by the operator. pending :The interchange is inactive because of conditions detected by the application (ALP PAD). failed :The line with which this interchange is associated is down. timedOut:The interchange is not being polled. This is displayed for HPAD interchanges on non poll-coerced lines only. flowCtrl:The application (ALP PAD) has imposed flow control on the interchange. stopped :The line with which this interchange is associated is in the FLOW CONTROL state. This is valid for TPAD interchanges only. slowPoll:The interchange is in slow poll. fastPoll:The interchange is in fast poll. na :Value not Available')
alcIStatsFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsFramesIn.setDescription('Number of ALC frames received.')
alcIStatsFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsFramesOut.setDescription('Number of ALC frames transmitted.')
alcIStatsDataMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDataMesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsDataMesgsIn.setDescription('Number of ALC data messages received.')
alcIStatsDataMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDataMesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsDataMesgsOut.setDescription('Number of ALC data messages transmitted.')
alcIStatsCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsCharsIn.setDescription('Total number of characters received, excluding synchronization characters.')
alcIStatsCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsCharsOut.setDescription('Total number of characters transmitted, excluding synchronization characters.')
alcIStatsPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsPolls.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsPolls.setDescription('The number of poll messages transmitted for a line defined as a TPAD. The number received for one defined as HPAD.')
alcIStatsGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsGAs.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsGAs.setDescription('The number of Go Ahead messages transmitted for a line defined as HPAD. The number received for one defined as TPAD.')
alcIStatsResets = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsResets.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsResets.setDescription('The number of Reset messages transmitted for a line defined as TPAD. The number received for one defined as HPAD.')
alcIStatsDiscardBadTAIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDiscardBadTAIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsDiscardBadTAIn.setDescription('The number of received messages discarded because the Terminal Address was not defined.')
alcIStatsDiscardBadTAOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDiscardBadTAOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsDiscardBadTAOut.setDescription('The number of transmitted messages discarded because the Terminal Address was not defined.')
alcIStatsDisabledIAIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDisabledIAIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsDisabledIAIn.setDescription('The number of received messages discarded because the Interchange was disabled.')
alcIStatsDisabledIAOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDisabledIAOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsDisabledIAOut.setDescription('The number of transmitted messages discarded because the Interchange was disabled.')
alcIStatsMaxQSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsMaxQSizeOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsMaxQSizeOut.setDescription('Maximum number of frames queued for transmission.')
alcIStatsCCCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCCCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsCCCErrors.setDescription('Number of messages received with an invalid checksum.')
alcIStatsT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsT1Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsT1Timeouts.setDescription('Number of T1 timer expirations. This is defined for TPAD only.')
alcIStatsT2Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsT2Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsT2Timeouts.setDescription('Number of T2 timer expirations. This is defined for TPAD only.')
alcIStatsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("connecting", 3), ("inactive", 4), ("pending", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsConnState.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsConnState.setDescription('Current state of the connection. online :The connection is available for data transfer. offline :The connection has been disabled by an operator. connecting:The ALP PAD is attempting to make the X.25 virtual circuit available for use. inactive :The inactivity timer has expired, so the virtual circuit has been dropped. Data received from ALC will cause the connection to be re-established. pending :The CSD option has been configured and the ALC entity is currently down; hence the ALP PAD has disabled the virtual circuit. na :Value not Available')
alcIStatsALCMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCMesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsALCMesgsIn.setDescription('The number of messages received from ALC.')
alcIStatsALCMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCMesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsALCMesgsOut.setDescription('The number of messages transmitted to ALC.')
alcIStatsX25MesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25MesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25MesgsIn.setDescription('The number of messages received from X.25.')
alcIStatsX25MesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25MesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25MesgsOut.setDescription('The number of messages transmitted to X.25.')
alcIStatsALCCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsALCCharsIn.setDescription('The number of characters received from ALC.')
alcIStatsALCCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsALCCharsOut.setDescription('The number of characters transmitted to ALC.')
alcIStatsX25CharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25CharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25CharsIn.setDescription('The number of characters received from X.25.')
alcIStatsX25CharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25CharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25CharsOut.setDescription('The number of characters transmitted to X.25.')
alcIStatsALCDiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCDiscardedMesgsEntityDown.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsALCDiscardedMesgsEntityDown.setDescription('The number of messages received by ALC for which the destination entity is unable to process the data.')
alcIStatsX25DiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsEntityDown.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsEntityDown.setDescription('The number of messages received by X.25 for which the destination entity is unable to process the data.')
alcIStatsX25DiscardedMesgsBadALCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsBadALCAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsBadALCAddr.setDescription('The number of messages received from X.25 for which the addresses specified do not match those associated with the connection.')
alcIStatsX25DiscardedMesgsBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsBadHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsBadHeader.setDescription('The number of messages received by X.25 of which the IN header configured does not match the header present in the message.')
alcIStatsX25DiscardedMesgsTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsTooLong.setDescription('The number of messages received from X.25 that were discarded because they were longer than the allowable ALC maximum configured.')
alcIStatsALCDiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCDiscardedMesgsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsALCDiscardedMesgsQFull.setDescription('The number of messages discarded because the ALC outbound message queue was full.')
alcIStatsX25DiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsQFull.setDescription('The number of messages discarded because the X.25 outbound message queue was full.')
alcIStatsCurrTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCurrTxALCQSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsCurrTxALCQSize.setDescription('The number of messages currently queued in the ALC outbound message queue for transmission.')
alcIStatsCurrTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCurrTxX25QSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsCurrTxX25QSize.setDescription('The number of messages currently queued in the X.25 outbound message queue for transmission.')
alcIStatsMaxTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsMaxTxALCQSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsMaxTxALCQSize.setDescription('The maximum (highwater mark) size of the ALC outbound queue so far.')
alcIStatsMaxTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsMaxTxX25QSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcIStatsMaxTxX25QSize.setDescription('The maximum (highwater mark) size of the X.25 outbound queue so far.')
cdx6500PPSTALCTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3), )
if mibBuilder.loadTexts: cdx6500PPSTALCTerminalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTALCTerminalTable.setDescription('This table contains ALC Terminalinal Statistics parameters.')
cdx6500PPSTALCTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcTStatsPortNumber"), (0, "ALC-OPT-MIB", "alcTStatsInterchangeAddress"), (0, "ALC-OPT-MIB", "alcTStatsTerminalAddress"))
if mibBuilder.loadTexts: cdx6500PPSTALCTerminalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTALCTerminalEntry.setDescription('Entries in the ALC Terminalinal Statistics Table.')
alcTStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsPortNumber.setDescription('Port number of this port.')
alcTStatsInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsInterchangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsInterchangeAddress.setDescription('The address of the interchange. Addresses 0D,0F,1D,2D,3D and 3F are illegal as they are used as line control characters.')
alcTStatsTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsTerminalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsTerminalAddress.setDescription('Address identifying this terminal.')
alcTStatsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("connecting", 3), ("inactive", 4), ("pending", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsConnState.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsConnState.setDescription('Current state of the connection. online :The connection is available for data transfer. offline :The connection has been disabled by an operator. connecting:The ALP PAD is attempting to make the X.25 virtual circuit available for use. inactive :The inactivity timer has expired, so the virtual circuit has been dropped. Data received from ALC will cause the connection to be re-established. pending :The CSD option has been configured and the ALC entity is currently down; hence the ALP PAD has disabled the virtual circuit. na :Value not Available')
alcTStatsALCMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCMesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsALCMesgsIn.setDescription('The number of messages received from ALC.')
alcTStatsALCMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCMesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsALCMesgsOut.setDescription('The number of messages transmitted to ALC.')
alcTStatsX25MesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25MesgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25MesgsIn.setDescription('The number of messages received from X.25.')
alcTStatsX25MesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25MesgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25MesgsOut.setDescription('The number of messages transmitted to X.25.')
alcTStatsALCCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsALCCharsIn.setDescription('The number of characters received from ALC.')
alcTStatsALCCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsALCCharsOut.setDescription('The number of characters transmitted to ALC.')
alcTStatsX25CharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25CharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25CharsIn.setDescription('The number of characters received from X.25.')
alcTStatsX25CharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25CharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25CharsOut.setDescription('The number of characters transmitted to X.25.')
alcTStatsALCDiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCDiscardedMesgsEntityDown.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsALCDiscardedMesgsEntityDown.setDescription('The number of messages received by ALC for which the destination entity is unable to process the data.')
alcTStatsX25DiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsEntityDown.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsEntityDown.setDescription('The number of messages received by X.25 for which the destination entity is unable to process the data.')
alcTStatsX25DiscardedMesgsBadALCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsBadALCAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsBadALCAddr.setDescription('The number of messages received from X.25 for which the addresses specified do not match those associated with the connection.')
alcTStatsX25DiscardedMesgsBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsBadHeader.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsBadHeader.setDescription('The number of messages received by X.25 of which the IN header configured does not match the header present in the message.')
alcTStatsX25DiscardedMesgsTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsTooLong.setDescription('The number of messages received from X.25 that were discarded because they were longer than the allowable ALC maximum configured.')
alcTStatsALCDiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCDiscardedMesgsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsALCDiscardedMesgsQFull.setDescription('The number of messages discarded because the ALC outbound message queue was full.')
alcTStatsX25DiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsQFull.setDescription('The number of messages discarded because the X.25 outbound message queue was full.')
alcTStatsCurrTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsCurrTxALCQSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsCurrTxALCQSize.setDescription('The number of messages currently queued in the ALC outbound message queue for transmission.')
alcTStatsCurrTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsCurrTxX25QSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsCurrTxX25QSize.setDescription('The number of messages currently queued in the X.25 outbound message queue for transmission.')
alcTStatsMaxTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsMaxTxALCQSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsMaxTxALCQSize.setDescription('The maximum (highwater mark) size of the ALC outbound queue so far.')
alcTStatsMaxTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsMaxTxX25QSize.setStatus('mandatory')
if mibBuilder.loadTexts: alcTStatsMaxTxX25QSize.setDescription('The maximum (highwater mark) size of the X.25 outbound queue so far.')
cdx6500ContALC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10))
cdx6500ContALCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1), )
if mibBuilder.loadTexts: cdx6500ContALCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContALCPortTable.setDescription('This table contains ALC Port Control parameters.')
cdx6500ContALCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcPContPortNumber"))
if mibBuilder.loadTexts: cdx6500ContALCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContALCPortEntry.setDescription('Entries in the ALC Port Control Table.')
alcPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: alcPContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcPContPortNumber.setDescription('ALC Port Number.')
alcPContPortBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcPContPortBoot.setStatus('mandatory')
if mibBuilder.loadTexts: alcPContPortBoot.setDescription('Boots the specified ALC Port. boot - Boot the port. noBoot - Do not boot the port.')
alcPContPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcPContPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: alcPContPortEnable.setDescription('Enables the specified ALC Port. enable - Enable the port. noEnable - Do not enable the port.')
alcPContPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcPContPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: alcPContPortDisable.setDescription('Disables the specified ALC Port. disable - Disable the port. noDisable - Do not disable the port.')
cdx6500ContALCInterchangeTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2), )
if mibBuilder.loadTexts: cdx6500ContALCInterchangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContALCInterchangeTable.setDescription('This table contains ALC Interchange Control parameters.')
cdx6500ContALCInterchangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcIContPortNumber"), (0, "ALC-OPT-MIB", "alcIContInterchangeAddress"))
if mibBuilder.loadTexts: cdx6500ContALCInterchangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContALCInterchangeEntry.setDescription('Entries in the ALC Interchange Control Table.')
alcIContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: alcIContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcIContPortNumber.setDescription('ALC Port Number.')
alcIContInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: alcIContInterchangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcIContInterchangeAddress.setDescription('ALC Interchange address.')
alcIContInterchangeBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcIContInterchangeBoot.setStatus('mandatory')
if mibBuilder.loadTexts: alcIContInterchangeBoot.setDescription('Boots the specified ALC Interchange. boot - Boot the interchange. noBoot - Do not boot the interchange.')
alcIContInterchangeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcIContInterchangeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: alcIContInterchangeEnable.setDescription('Enables the specified ALC Interchange. enable - Enable the interchange. noEnable - Do not enable the interchange.')
alcIContInterchangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcIContInterchangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: alcIContInterchangeDisable.setDescription('Disables the specified ALC Interchange. disable - Disable the interchange. noDisable - Do not disable the interchange.')
cdx6500ContALCTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3), )
if mibBuilder.loadTexts: cdx6500ContALCTerminalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContALCTerminalTable.setDescription('This table contains ALC Terminal Control parameters.')
cdx6500ContALCTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcTContPortNumber"), (0, "ALC-OPT-MIB", "alcTContInterchangeAddress"), (0, "ALC-OPT-MIB", "alcTContTerminalAddress"))
if mibBuilder.loadTexts: cdx6500ContALCTerminalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContALCTerminalEntry.setDescription('Entries in the ALC Terminal Control Table.')
alcTContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: alcTContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alcTContPortNumber.setDescription('ALC Port Number.')
alcTContInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: alcTContInterchangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTContInterchangeAddress.setDescription('ALC Interchange address.')
alcTContTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: alcTContTerminalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alcTContTerminalAddress.setDescription('Address identifying this terminal.')
alcTContTerminalBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcTContTerminalBoot.setStatus('mandatory')
if mibBuilder.loadTexts: alcTContTerminalBoot.setDescription('Boots the specified ALC terminal. boot - Boot the terminal. noBoot - Do not boot the terminal.')
alcTContTerminalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcTContTerminalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: alcTContTerminalEnable.setDescription('Enables the specified ALC Terminal. enable - Enable the terminal. noEnable - Do not enable the terminal.')
alcTContTerminalDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcTContTerminalDisable.setStatus('mandatory')
if mibBuilder.loadTexts: alcTContTerminalDisable.setDescription('Disables the specified ALC terminal. disable - Disable the terminal. noDisable - Do not disable the terminal.')
mibBuilder.exportSymbols("ALC-OPT-MIB", alcIStatsDataMesgsOut=alcIStatsDataMesgsOut, alcTCfgDebounceTimeout=alcTCfgDebounceTimeout, alcPStatsALCDiscardedMesgsQFull=alcPStatsALCDiscardedMesgsQFull, alcIStatsX25MesgsOut=alcIStatsX25MesgsOut, alcPCfgCallingAddress=alcPCfgCallingAddress, cdx6500PPCTALCInterchangeEntry=cdx6500PPCTALCInterchangeEntry, cdx6500PPSTALCStatsTable=cdx6500PPSTALCStatsTable, alcPStatsALCDiscardedMesgsEntityDown=alcPStatsALCDiscardedMesgsEntityDown, alcPStatsMaxTxALCQSize=alcPStatsMaxTxALCQSize, alcPContPortNumber=alcPContPortNumber, alcIContInterchangeDisable=alcIContInterchangeDisable, alcTCfgCUD=alcTCfgCUD, alcICfgSlowPollCycleCount=alcICfgSlowPollCycleCount, cdx6500PPSTALCTerminalTable=cdx6500PPSTALCTerminalTable, cdx6500PPCTALCInterchangeTable=cdx6500PPCTALCInterchangeTable, alcTStatsInterchangeAddress=alcTStatsInterchangeAddress, alcPStatsOverlengthFrames=alcPStatsOverlengthFrames, alcPStatsDataMesgsOut=alcPStatsDataMesgsOut, alcTStatsALCMesgsIn=alcTStatsALCMesgsIn, cdx6500PPCTALCCfgTable=cdx6500PPCTALCCfgTable, cdx6500Controls=cdx6500Controls, cdx6500ContALCTerminalEntry=cdx6500ContALCTerminalEntry, alcPCfgLeadPadChar=alcPCfgLeadPadChar, alcIStatsDiscardBadTAOut=alcIStatsDiscardBadTAOut, alcPCfgInHeader=alcPCfgInHeader, alcPCfgOutHeader=alcPCfgOutHeader, alcPStatsResets=alcPStatsResets, alcICfgOptions=alcICfgOptions, alcPStatsCurrTxALCQSize=alcPStatsCurrTxALCQSize, alcIStatsX25CharsOut=alcIStatsX25CharsOut, alcPStatsCCCErrors=alcPStatsCCCErrors, alcTStatsX25MesgsOut=alcTStatsX25MesgsOut, cdx6500=cdx6500, alcIStatsT1Timeouts=alcIStatsT1Timeouts, cdx6500PPCTALCTerminalTable=cdx6500PPCTALCTerminalTable, alcPCfgSubtype=alcPCfgSubtype, alcICfgN1Counter=alcICfgN1Counter, alcPStatsPortType=alcPStatsPortType, alcIStatsCurrTxALCQSize=alcIStatsCurrTxALCQSize, alcTContTerminalBoot=alcTContTerminalBoot, alcICfgAcallMnemonic=alcICfgAcallMnemonic, cdxProductSpecific=cdxProductSpecific, alcICfgStartMessage=alcICfgStartMessage, alcTContInterchangeAddress=alcTContInterchangeAddress, alcIStatsT2Timeouts=alcIStatsT2Timeouts, alcTCfgCallingAddress=alcTCfgCallingAddress, alcPStatsX25DiscardedMesgsBadALCAddr=alcPStatsX25DiscardedMesgsBadALCAddr, alcIContInterchangeBoot=alcIContInterchangeBoot, alcPCfgInactivityTimeout=alcPCfgInactivityTimeout, alcTCfgNumOfBuffers=alcTCfgNumOfBuffers, alcTCfgAvailableMesg=alcTCfgAvailableMesg, alcTCfgTerminalAddress=alcTCfgTerminalAddress, alcPCfgConnType=alcPCfgConnType, alcIContPortNumber=alcIContPortNumber, alcPContPortBoot=alcPContPortBoot, alcICfgReconnectTimeout=alcICfgReconnectTimeout, alcPStatsALCMesgsIn=alcPStatsALCMesgsIn, alcIStatsALCCharsIn=alcIStatsALCCharsIn, alcTStatsX25CharsIn=alcTStatsX25CharsIn, alcPStatsMaxTxX25QSize=alcPStatsMaxTxX25QSize, alcTCfgReconnectTimeout=alcTCfgReconnectTimeout, cdx6500ContALCPortTable=cdx6500ContALCPortTable, alcICfgFastPollCycleCount=alcICfgFastPollCycleCount, alcICfgInactivityTimeout=alcICfgInactivityTimeout, alcIStatsCurrTxX25QSize=alcIStatsCurrTxX25QSize, alcPCfgPollDelayTimer=alcPCfgPollDelayTimer, cdx6500ContALC=cdx6500ContALC, cdx6500ContALCPortEntry=cdx6500ContALCPortEntry, alcICfgOutHeader=alcICfgOutHeader, alcICfgInterchangeAddress=alcICfgInterchangeAddress, DisplayString=DisplayString, alcTStatsCurrTxALCQSize=alcTStatsCurrTxALCQSize, alcTStatsConnState=alcTStatsConnState, alcPStatsPolls=alcPStatsPolls, alcIStatsFramesIn=alcIStatsFramesIn, cdx6500Statistics=cdx6500Statistics, alcTContTerminalDisable=alcTContTerminalDisable, alcTStatsALCDiscardedMesgsQFull=alcTStatsALCDiscardedMesgsQFull, alcTStatsX25CharsOut=alcTStatsX25CharsOut, alcTCfgInHeader=alcTCfgInHeader, alcPStatsALCCharsIn=alcPStatsALCCharsIn, alcTStatsALCCharsOut=alcTStatsALCCharsOut, alcICfgHostTimeout=alcICfgHostTimeout, alcICfgReenterMessage=alcICfgReenterMessage, alcPStatsX25DiscardedMesgsQFull=alcPStatsX25DiscardedMesgsQFull, alcPCfgHostTimeout=alcPCfgHostTimeout, alcICfgN2Counter=alcICfgN2Counter, alcPStatsCharsIn=alcPStatsCharsIn, alcICfgConnType=alcICfgConnType, alcPStatsX25MesgsIn=alcPStatsX25MesgsIn, alcPCfgConnOptions=alcPCfgConnOptions, alcICfgGenTerminalAddress=alcICfgGenTerminalAddress, alcIStatsCCCErrors=alcIStatsCCCErrors, cdx6500Configuration=cdx6500Configuration, alcPCfgReconnectTimeout=alcPCfgReconnectTimeout, alcPStatsDiscardBadIAOut=alcPStatsDiscardBadIAOut, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, alcIStatsGAs=alcIStatsGAs, alcPCfgMinIntrvlBetweenPolls=alcPCfgMinIntrvlBetweenPolls, alcTCfgUnavailableMesg=alcTCfgUnavailableMesg, alcPStatsGAs=alcPStatsGAs, alcIStatsALCMesgsIn=alcIStatsALCMesgsIn, alcIStatsALCDiscardedMesgsQFull=alcIStatsALCDiscardedMesgsQFull, alcIStatsX25MesgsIn=alcIStatsX25MesgsIn, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, alcTStatsX25DiscardedMesgsTooLong=alcTStatsX25DiscardedMesgsTooLong, alcIStatsDisabledIAIn=alcIStatsDisabledIAIn, alcTStatsMaxTxALCQSize=alcTStatsMaxTxALCQSize, alcPStatsFramesOut=alcPStatsFramesOut, alcPCfgAcallMnemonic=alcPCfgAcallMnemonic, alcPCfgPortType=alcPCfgPortType, alcICfgUnavailableMesg=alcICfgUnavailableMesg, alcIStatsMaxTxX25QSize=alcIStatsMaxTxX25QSize, alcICfgT1Timeout=alcICfgT1Timeout, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, alcPStatsX25CharsOut=alcPStatsX25CharsOut, alcPStatsX25DiscardedMesgsEntityDown=alcPStatsX25DiscardedMesgsEntityDown, alcIContInterchangeAddress=alcIContInterchangeAddress, cdx6500ContALCInterchangeEntry=cdx6500ContALCInterchangeEntry, alcIStatsALCCharsOut=alcIStatsALCCharsOut, alcPStatsDataMesgsIn=alcPStatsDataMesgsIn, alcIStatsX25DiscardedMesgsTooLong=alcIStatsX25DiscardedMesgsTooLong, alcPCfgTrailPadChar=alcPCfgTrailPadChar, alcPStatsPortNumber=alcPStatsPortNumber, alcPStatsSignalLosses=alcPStatsSignalLosses, alcIStatsX25DiscardedMesgsEntityDown=alcIStatsX25DiscardedMesgsEntityDown, alcPCfgClockSource=alcPCfgClockSource, alcTContTerminalEnable=alcTContTerminalEnable, cdx6500PPSTALCPortTable=cdx6500PPSTALCPortTable, alcIStatsDataMesgsIn=alcIStatsDataMesgsIn, alcTStatsX25DiscardedMesgsEntityDown=alcTStatsX25DiscardedMesgsEntityDown, cdx6500PPCTALCPortTable=cdx6500PPCTALCPortTable, alcIStatsDisabledIAOut=alcIStatsDisabledIAOut, alcIStatsInterchangeState=alcIStatsInterchangeState, codex=codex, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, alcPStatsPortState=alcPStatsPortState, alcTStatsX25DiscardedMesgsBadALCAddr=alcTStatsX25DiscardedMesgsBadALCAddr, alcPStatsX25MesgsOut=alcPStatsX25MesgsOut, alcICfgDebounceTimeout=alcICfgDebounceTimeout, alcPStatsMaxQSizeOut=alcPStatsMaxQSizeOut, alcPCfgNumTrailPadChars=alcPCfgNumTrailPadChars, alcPStatsX25DiscardedMesgsTooLong=alcPStatsX25DiscardedMesgsTooLong, alcIStatsPolls=alcIStatsPolls, cdx6500PPSTALCInterchangeEntry=cdx6500PPSTALCInterchangeEntry, alcTStatsALCMesgsOut=alcTStatsALCMesgsOut, alcICfgInHeader=alcICfgInHeader, alcICfgCallingAddress=alcICfgCallingAddress, alcTCfgPortNumber=alcTCfgPortNumber, alcPCfgUnavailableMesg=alcPCfgUnavailableMesg, alcICfgNumOfBuffers=alcICfgNumOfBuffers, cdx6500PPCTALCTerminalEntry=cdx6500PPCTALCTerminalEntry, alcTStatsPortNumber=alcTStatsPortNumber, alcIStatsInterchangeAddress=alcIStatsInterchangeAddress, alcICfgMaxComponentsPerFrame=alcICfgMaxComponentsPerFrame, cdx6500ContALCTerminalTable=cdx6500ContALCTerminalTable, alcPStatsCharsOut=alcPStatsCharsOut, alcICfgConnOptions=alcICfgConnOptions, alcIStatsX25CharsIn=alcIStatsX25CharsIn, alcTContTerminalAddress=alcTContTerminalAddress, alcPCfgDebounceTimeout=alcPCfgDebounceTimeout, alcPCfgNumOfBuffers=alcPCfgNumOfBuffers, alcIStatsResets=alcIStatsResets, alcIStatsALCDiscardedMesgsEntityDown=alcIStatsALCDiscardedMesgsEntityDown, alcICfgT2Timeout=alcICfgT2Timeout, alcPStatsConnState=alcPStatsConnState, alcIStatsFramesOut=alcIStatsFramesOut, alcTStatsX25MesgsIn=alcTStatsX25MesgsIn, alcTStatsX25DiscardedMesgsBadHeader=alcTStatsX25DiscardedMesgsBadHeader, alcPCfgRtsCtsTimeout=alcPCfgRtsCtsTimeout, alcPStatsPortStatus=alcPStatsPortStatus, alcTStatsALCDiscardedMesgsEntityDown=alcTStatsALCDiscardedMesgsEntityDown, alcPCfgNumLeadPadChars=alcPCfgNumLeadPadChars, alcPStatsX25CharsIn=alcPStatsX25CharsIn, alcPStatsDiscardBadIAIn=alcPStatsDiscardBadIAIn, alcTCfgConnOptions=alcTCfgConnOptions, alcPCfgPortControl=alcPCfgPortControl, cdx6500PPSTALCTerminalEntry=cdx6500PPSTALCTerminalEntry, alcTCfgOutHeader=alcTCfgOutHeader, alcPCfgClockSpeed=alcPCfgClockSpeed, alcTCfgInactivityTimeout=alcTCfgInactivityTimeout, cdx6500PPSTALCPortEntry=cdx6500PPSTALCPortEntry, alcTCfgConnType=alcTCfgConnType, alcTCfgAcallMnemonic=alcTCfgAcallMnemonic, alcIStatsMaxTxALCQSize=alcIStatsMaxTxALCQSize, alcTStatsMaxTxX25QSize=alcTStatsMaxTxX25QSize, alcPCfgAvailableMesg=alcPCfgAvailableMesg, alcICfgStopMessage=alcICfgStopMessage, alcIStatsConnState=alcIStatsConnState, alcIStatsMaxQSizeOut=alcIStatsMaxQSizeOut, alcTStatsALCCharsIn=alcTStatsALCCharsIn, alcPStatsX25DiscardedMesgsBadHeader=alcPStatsX25DiscardedMesgsBadHeader, alcIStatsALCMesgsOut=alcIStatsALCMesgsOut, alcICfgCUD=alcICfgCUD, alcPCfgParity=alcPCfgParity, alcTStatsX25DiscardedMesgsQFull=alcTStatsX25DiscardedMesgsQFull, alcTContPortNumber=alcTContPortNumber, alcTCfgParity=alcTCfgParity, alcIStatsX25DiscardedMesgsQFull=alcIStatsX25DiscardedMesgsQFull, alcPContPortDisable=alcPContPortDisable, alcICfgOptionOnInvalidCCC=alcICfgOptionOnInvalidCCC, alcPStatsALCCharsOut=alcPStatsALCCharsOut, alcTStatsTerminalAddress=alcTStatsTerminalAddress, alcPContPortEnable=alcPContPortEnable, alcTCfgInterchangeAddress=alcTCfgInterchangeAddress, alcIStatsX25DiscardedMesgsBadHeader=alcIStatsX25DiscardedMesgsBadHeader, alcIContInterchangeEnable=alcIContInterchangeEnable, alcPStatsCurrTxX25QSize=alcPStatsCurrTxX25QSize, alcICfgParity=alcICfgParity, alcPCfgMaxMesgSize=alcPCfgMaxMesgSize, alcPCfgCUD=alcPCfgCUD, alcIStatsPortNumber=alcIStatsPortNumber, alcICfgValidTAList=alcICfgValidTAList, alcPStatsALCMesgsOut=alcPStatsALCMesgsOut, alcIStatsDiscardBadTAIn=alcIStatsDiscardBadTAIn, alcIStatsX25DiscardedMesgsBadALCAddr=alcIStatsX25DiscardedMesgsBadALCAddr, alcICfgPortNumber=alcICfgPortNumber, alcTStatsCurrTxX25QSize=alcTStatsCurrTxX25QSize, cdx6500PPCTALCPortEntry=cdx6500PPCTALCPortEntry, alcPCfgALCLineOptions=alcPCfgALCLineOptions, alcPStatsFramesIn=alcPStatsFramesIn, alcIStatsCharsOut=alcIStatsCharsOut, cdx6500PPSTALCInterchangeTable=cdx6500PPSTALCInterchangeTable, cdx6500ContALCInterchangeTable=cdx6500ContALCInterchangeTable, alcIStatsCharsIn=alcIStatsCharsIn, alcPCfgPortNumber=alcPCfgPortNumber, alcICfgAvailableMesg=alcICfgAvailableMesg)
