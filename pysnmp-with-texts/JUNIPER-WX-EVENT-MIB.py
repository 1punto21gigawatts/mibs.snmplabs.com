#
# PySNMP MIB module JUNIPER-WX-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-WX-GLOBAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
jnxWxGrpEvents, = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-MIB", "jnxWxGrpEvents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Gauge32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, Counter64, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxWxGrpEventV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0))
if mibBuilder.loadTexts: jnxWxGrpEventV2.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventV2.setDescription(' Branch for SNMPv2 events. The OIDs for SNMPv2 events should have a zero as the next-to-last sub-identifier (as specified in RFC1902). ')
jnxWxGrpEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxWxGrpEventDescr.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventDescr.setDescription(' String that provides a textual description of the event. ')
jnxWxGrpEventPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 1))
if mibBuilder.loadTexts: jnxWxGrpEventPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventPowerSupplyFailure.setDescription('One or more sources of power to the system have failed. A redundant power-supply has presumably taken over. ')
jnxWxGrpEventPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 2))
if mibBuilder.loadTexts: jnxWxGrpEventPowerSupplyOk.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventPowerSupplyOk.setDescription('One or more previously failed sources of power is now working normally. The transition to normal condition happened without the system having to be restarted. ')
jnxWxGrpEventLicenseWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 3)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventLicenseWillExpire.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventLicenseWillExpire.setDescription('The license for the system is about to expire shortly. When it eventually does expire, the system will switch over to and stay in pass-through mode.')
jnxWxGrpEventThruputLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 4)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventThruputLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventThruputLimitExceeded.setDescription('The throughput of traffic through the device has exceeded the limit for which it has been licensed.')
jnxWxGrpEventLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 5)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventLicenseExpired.setDescription('The license for the system expired. As a result, the system will switch over to and stay in pass-through mode.')
jnxWxGrpEventClientLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 6)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventClientLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventClientLimitExceeded.setDescription('Exceeded licensed maximum concurrent client connections. Please contact Juniper Networks to obtain a new license with higher number of concurrent client connections.')
jnxWxGrpEventInFailSafeMode = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 7))
if mibBuilder.loadTexts: jnxWxGrpEventInFailSafeMode.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventInFailSafeMode.setDescription('This trap is sent when the device boots up in fail-safe mode. This can happen for one of the following reasons: Fail-safe reboot was explicitly initiated by the user. The device rebooted automatically too many times because of the failure of internal consistency checks or the failure of tests that verify proper operation of the device.')
jnxWxGrpEventInterfaceSpeedMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 8)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventInterfaceSpeedMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventInterfaceSpeedMismatch.setDescription('A mismatch is detected between the local and remote interface settings. This can happen due to a mismatch in the local and remote interface speed or mode. ')
jnxWxGrpEventInterfaceSpeedOk = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 9)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventInterfaceSpeedOk.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventInterfaceSpeedOk.setDescription('A mismatch previously detected between the local and remote interface settings is now resolved. The local and remote interface speed and mode are matched. ')
jnxWxGrpEventInterfaceDuplexMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 10)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventInterfaceDuplexMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventInterfaceDuplexMismatch.setDescription("A possible mismatch was detected between the duplex settings of either the local or remote interface and that of the device attached to that interface. The interface (local or remote) is identified by the 'ifIndex' object. Note that this notification is quite different from jnxWxGrpEventInterfaceSpeedMismatch, which compares the local and remote interfaces on the same WX device.")
jnxWxGrpEventLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 11)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventLoginFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventLoginFailure.setDescription("A user's login attempt via the console/ssh/web server failed due to incorrect username or password.")
jnxWxGrpEventDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 3, 0, 12)).setObjects(("JUNIPER-WX-EVENT-MIB", "jnxWxGrpEventDescr"))
if mibBuilder.loadTexts: jnxWxGrpEventDiskFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpEventDiskFailure.setDescription('A hard disk failed on the system. The system was rebooted, and will now operate without the downed disk, at a degraded performance. Dictionary accumulated until this point was lost.')
mibBuilder.exportSymbols("JUNIPER-WX-EVENT-MIB", jnxWxGrpEventThruputLimitExceeded=jnxWxGrpEventThruputLimitExceeded, jnxWxGrpEventInterfaceSpeedMismatch=jnxWxGrpEventInterfaceSpeedMismatch, jnxWxGrpEventV2=jnxWxGrpEventV2, jnxWxGrpEventLicenseWillExpire=jnxWxGrpEventLicenseWillExpire, jnxWxGrpEventClientLimitExceeded=jnxWxGrpEventClientLimitExceeded, jnxWxGrpEventPowerSupplyFailure=jnxWxGrpEventPowerSupplyFailure, jnxWxGrpEventDescr=jnxWxGrpEventDescr, jnxWxGrpEventInterfaceDuplexMismatch=jnxWxGrpEventInterfaceDuplexMismatch, jnxWxGrpEventInterfaceSpeedOk=jnxWxGrpEventInterfaceSpeedOk, jnxWxGrpEventLoginFailure=jnxWxGrpEventLoginFailure, jnxWxGrpEventLicenseExpired=jnxWxGrpEventLicenseExpired, jnxWxGrpEventDiskFailure=jnxWxGrpEventDiskFailure, jnxWxGrpEventInFailSafeMode=jnxWxGrpEventInFailSafeMode, jnxWxGrpEventPowerSupplyOk=jnxWxGrpEventPowerSupplyOk)
