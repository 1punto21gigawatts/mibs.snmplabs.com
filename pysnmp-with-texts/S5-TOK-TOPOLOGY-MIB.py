#
# PySNMP MIB module S5-TOK-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-TOK-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
s5TrTop, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5TrTop")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, Unsigned32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, IpAddress, ModuleIdentity, Bits, Gauge32, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Unsigned32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "IpAddress", "ModuleIdentity", "Bits", "Gauge32", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
SnpxChassisType, SnpxBackplaneType = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "SnpxChassisType", "SnpxBackplaneType")
s5TrTopIfTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1), )
if mibBuilder.loadTexts: s5TrTopIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfTable.setDescription('A table with topology status and control for each token ring interface on the NMM. The number of entries is determined by the number of token ring interfaces on the NMM.')
s5TrTopIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopIfIpAddr"))
if mibBuilder.loadTexts: s5TrTopIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfEntry.setDescription('A row in the table of topology status and control for each token ring interface on the NMM. Entries in the table can not be created or deleted via SNMP.')
s5TrTopIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfIpAddr.setDescription('The IP address of the interface.')
s5TrTopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfNum.setDescription('The value of ifIndex for the interface.')
s5TrTopIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("topOn", 1), ("topOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5TrTopIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfStatus.setDescription('Indicates if the interface is participating in topology. The values are: topOn(1)....topology is on topOff(2)...topology is off When the value is topOff(2) the status of entries associated with the interface is undefined. However, the agent should make its best attempt when the value is changed to topOff(2) to remove all existing instances of topology MIB objects for the interface. The agent must save the setting of this object in nonvolatile memory (i.e., save across reboots).')
s5TrTopIfNmmLstChg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNmmLstChg.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfNmmLstChg.setDescription('The value of sysUpTime when the last addition or deletion of an NMM topology table entry associated with the interface was done. If none have been done since cold/warm start of the agent, then the value is zero.')
s5TrTopIfBdgLstChg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfBdgLstChg.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfBdgLstChg.setDescription('The value of sysUpTime when the last addition or deletion of a bridge topology table entry associated with the interface was done. If none have been done since cold/warm start of the agent, then the value is zero.')
s5TrTopIfRingNmmLstChg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfRingNmmLstChg.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfRingNmmLstChg.setDescription('The value of sysUpTime when the last addition or deletion of a Ring NMM topology table entry associated with the interface was done. If none have been done since cold/warm start of the agent, then the value is zero.')
s5TrTopIfNmmMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNmmMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfNmmMaxNum.setDescription('The maximum number of entries for the interface in the NMM topology table.')
s5TrTopIfNmmCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNmmCurNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfNmmCurNum.setDescription('The current number of entries for the interface in the NMM topology table.')
s5TrTopIfBdgMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfBdgMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfBdgMaxNum.setDescription('The maximum number of entries for the interface in the bridge topology table.')
s5TrTopIfBdgCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfBdgCurNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfBdgCurNum.setDescription('The current number of entries for the interface in the bridge topology table.')
s5TrTopIfRingNmmMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfRingNmmMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfRingNmmMaxNum.setDescription('The maximum number of entries for the interface in the Ring NMM topology table.')
s5TrTopIfRingNmmCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfRingNmmCurNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfRingNmmCurNum.setDescription('The current number of entries for the interface in the Ring NMM topology table.')
s5TrTopIfTopSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("topFast", 2), ("topSlow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5TrTopIfTopSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopIfTopSpeed.setDescription('The Token Ring topology message (SONMP frame) transmit speed. The values that are read/write are: topFast(2)...short interval between transmitting topSlow(3)...long interval between transmitting The value that is readonly is: other(1)...speed unknown, or other value In fast mode, the SONMP frame transmit interval is 10 seconds for all SONMP frames except for ring master which is 5 seconds. In slow mode, the interval is 15 seconds for ring master SONMP frames, 50 seconds for concentrator profile SONMP frames, 60 seconds for master NMM announcement SONMP frames, and 70 seconds for adjacent SONMP frames.')
s5TrTopNmmTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2), )
if mibBuilder.loadTexts: s5TrTopNmmTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmTable.setDescription("A table of topology information for each Network Management Module (NMM) with a Token Ring interface on the same 'flat network' as the reporting NMM. The number of entries is determined by the number of detected (and active) NMMs. Entries in the table are created by reception of a topology message with information about a 'new' NMM. An entry is removed from the table when an NMM is not present in the topology message from a ring, or when no topology messages are received from a ring in the required time interval.")
s5TrTopNmmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopNmmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmEntry.setDescription("A row in the table of topology information about Network Management Modules (NMMs) with a Token Ring interface on the same 'flat network' as the reporting NMM. Entries in the table can not be created or deleted via SNMP.")
s5TrTopNmmIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmIfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmIfIpAddr.setDescription('The IP address of the interface on which the topology message was received.')
s5TrTopNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmIpAddr.setDescription('The IP address of an NMM contained in a topology message.')
s5TrTopNmmRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmRingNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmRingNum.setDescription('The ring number on which an NMM from a topology message is located.')
s5TrTopNmmRingMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmRingMaster.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmRingMaster.setDescription('The classification of an NMM from a topology message. The values are: normal(1)...not a master NMM master(2)...a master NMM')
s5TrTopNmmRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmRingSpeed.setDescription('The speed of the ring (in units of Mbits) on which an NMM from a topology message is located. The expected values are: 4....4 Mbps 16...16 Mbps')
s5TrTopNmmBridgeGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmBridgeGroupIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmBridgeGroupIdentifier.setDescription('The bridge Group Number of the port on which the ring is connected. This is the ring of the NMM from which the SONMP message was heard for this entry ')
s5TrTopNmmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmSlotNum.setDescription('The Slot Number of the port on which the ring is connected. This is the ring of the NMM from which the SONMP message was heard for this entry ')
s5TrTopNmmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmPortNum.setDescription('The Port Number of the port on which the ring is connected. This is the ring of the NMM from which the SONMP message was heard for this entry ')
s5TrTopBdgTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3), )
if mibBuilder.loadTexts: s5TrTopBdgTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgTable.setDescription("A table that lists each known bridge with a Token Ring interface on the same 'flat net' as the reporting NMM. The number of entries is determined by the number of detected (and active) bridges. Entries are added by reception of a topology message from a bridge or reception of a topology message from an master NMM that was forwarded by a source routing bridge. An entry is removed from the table when no topology messaged are received from bridge in the required time interval.")
s5TrTopBdgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIndx"))
if mibBuilder.loadTexts: s5TrTopBdgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgEntry.setDescription("A row in the table of known bridges with a Token Ring interface on the same 'flat net' as the reporting NMM. Entries in the table can not be created or deleted via SNMP.")
s5TrTopBdgIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgIfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgIfIpAddr.setDescription('The IP address of the interface on which the topology message was received.')
s5TrTopBdgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgIndx.setDescription('The index of the entry in the table for the interface.')
s5TrTopBdgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgNum.setDescription("The IEEE 802.5 'bridge number' for the bridge.")
s5TrTopBdgOwnRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgOwnRingNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgOwnRingNum.setDescription('The ring number for the reporting NMM. NOTE: this will be the same value for all table entries for each interface.')
s5TrTopBdgAdjRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgAdjRingNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgAdjRingNum.setDescription('The ring number of the adjacent ring that is joined by the bridge. The value is zero if this entry in the table was created due to the receipt of a topology message from another NMM on a different ring and the bridge connecting the rings was a transparent only bridge and it does not generate topology messages.')
s5TrTopBdgAdjMasterNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgAdjMasterNmmIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgAdjMasterNmmIpAddr.setDescription('If this entry was created (and/or validated) by a topology message from a master NMM, then the value is its IP address. If the value of object s5TrTopBdgNum is non-zero, then the master NMM is on an adjacent ring. If the value of s5TrTopBdgNum is zero, then the master NMM may be adjacent, or several rings away, separated by one or more transparent bridges. The value for this object is 0.0.0.0 when the bridge generates a topology message and there is no master NMM on the adjacent ring nor one connected to the adjacent ring through one or more transparent bridges.')
s5TrTopBdgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgMacAddr.setDescription('The MAC address of the bridge port sending the topology message. The value is 00:00:00:00:00:00 if the bridge does not transmit topology messages.')
s5TrTopBdgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgIpAddr.setDescription('IP address of the bridge sending the topology message. The value is 0.0.0.0 if the bridge does not transmit topology messages.')
s5TrTopBdgType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("t3522Syn2Port", 2), ("t2722Syn2Port", 3), ("tCenTillionTrSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgType.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgType.setDescription('The kind of bridge this entry represents. The values come from the topology messages generated by the bridge. The values are: other(1)...........bridge does not send topology messages or is not a defined type t3522Syn2Port(2)...SynOptics 2 port bridge in a modular concentrator t2722Syn2Port(3)...SynOptics 2 port stand-alone bridge tCenTillionTrSwitch(4)...Centillion multi-port TR switch')
s5TrTopBdgSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgSlotNum.setDescription('The slot that the reporting NMM received the topology message from the bridge. The value zero is used to indicate that the bridge does not transmit topology messages or the slot from which the message was received can not be determined.')
s5TrTopBdgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgPortNum.setDescription('The port that the reporting NMM received the topology message from the bridge. The value zero is used to indicate that the bridge does not transmit topology messages or the port from which the message was received can not be determined.')
s5TrTopBdgNumPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgNumPort.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgNumPort.setDescription('The total number of ports installed on the bridge. The value zero is used to indicate that the bridge does not transmit topology messages.')
s5TrTopBdgHelloPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgHelloPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgHelloPortNum.setDescription('The port on the bridge from which the topology message was sent. The value zero is used to indicate that the bridge does not transmit topology messages.')
s5TrTopBdgHelloPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("tranAct", 2), ("tranStnBy", 3), ("srSrsOn", 4), ("srSrsOff", 5), ("srSrsOnTranAct", 6), ("srSrsOffTranAct", 7), ("srSrsOnStnBy", 8), ("srSrsOffStnBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgHelloPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgHelloPortStatus.setDescription('The status of the port on Bridge from which the topology message was sent. The values are: other(1).............bridge does not send topology messages or port not in defined status tranAct(2)...........Transparent active tranStnBy(3).........Transparent standby srSrsOn(4)...........Source routing single route spanning is on srSrsOff(5)..........Source routing single route spanning is off srSrsOnTranAct(6)....Source routing single route spanning is on, and transparent active srSrsOffTranAct(7)...Source routing single route spanning is off, and transparent active srSrsOnStnBy(8)......Source routing single route spanning is on, and transparent standby srSrsOffStnBy(9).....Source routing single route spanning is off, and transparent standby')
s5TrTopBdgMonPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("phantomOff", 2), ("phantomOn", 3), ("phantomOffWrapped", 4), ("phantomOnWrapped", 5), ("wrongSpeedWrap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgMonPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgMonPortStatus.setDescription("The status of the 'monitor' port on Bridge from which the topology message was sent. The values are: other(1)...............bridge does not send topology messages or the status of the monitor port is unknown or the bridge does not have a monitor port, or some other condition. phantomOff(2)..........phantom status is off phantomOn(3)...........phantom status is on phantomOffWrapped(4)...phantom off and port wrapped phantomOnWrapped(5)....phantom on and port wrapped wrongSpeedWrap(6)......port wrapped for wrong speed")
s5TrTopBdgHelloType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("synoptics", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgHelloType.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgHelloType.setDescription("The type of topology message received from the bridge. The values are: other..........bridge does not send any of the recognizable topology message types synoptics(2)...bridge sends SynOptics' topology message")
s5TrTopRingNmmTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4), )
if mibBuilder.loadTexts: s5TrTopRingNmmTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmTable.setDescription("A table listing all the Network Management Modules (NMMs) with a Token Ring interface on the same ring as the reporting NMM. The number of entries is determined by the number of detected (and active) NMMs. Entries are created by reception of a topology message from a 'new' NMM. An entry is removed from the table when no topology messages are received from the NMM in the required time interval.")
s5TrTopRingNmmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopRingNmmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmEntry.setDescription('A row in the table of Network Management Modules (NMMs) with a Token Ring interface on the same ring as the reporting NMM. Entries in the table can not be created or deleted via SNMP.')
s5TrTopRingNmmIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmIfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmIfIpAddr.setDescription('The IP address of the interface on which the topology message was received.')
s5TrTopRingNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmIpAddr.setDescription('The IP address of the NMM that sent the topology message.')
s5TrTopRingNmmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmMacAddr.setDescription('The MAC address of the NMM that sent the topology message.')
s5TrTopRingNmmChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 4), SnpxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmChassisType.setDescription('The type of chassis containing the NMM that sent the topology message.')
s5TrTopRingNmmBkplType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 5), SnpxBackplaneType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmBkplType.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmBkplType.setDescription('The type of backplane in the chassis containing the NMM that sent the topology message.')
s5TrTopRingNmmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmSlotNum.setDescription('The slot containing the NMM that sent the topology message.')
s5TrTopRingNmmUnaIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmUnaIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmUnaIpAddr.setDescription('The IP address of the next upstream NMM of the NMM that sent the topology message.')
s5TrTopNmmEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmEosSize.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmEosSize.setDescription("The current size of a 'row' in the table s5TrTopNmmEosTable. This allows applications to be able to break apart 'rows' in the table.")
s5TrTopNmmEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 6), )
if mibBuilder.loadTexts: s5TrTopNmmEosTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmEosTable.setDescription("A table of encoded octet strings of entries in table s5TrTopNmmTable. The number of entries is determined by the packing of 'rows' from s5TrTopNmmTable.")
s5TrTopNmmEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 6, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopNmmEosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmEosEntry.setDescription('A row in the table of encoded octet strings for table s5TrTopNmmTable. Instance returned in Response PDU: On GETs: instance specified is the instance returned. On GET-NEXTs: instance returned is the instance of the last record contained in the octet string. Entries in the table can not be created or deleted via SNMP.')
s5TrTopNmmEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmEos.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopNmmEos.setDescription("An encoded octet string. On reads it contains an integral number of 'rows' from table s5TrTopNmmTable. All 'rows' are the same size which is defined by object s5TrTopNmmEosSize.")
s5TrTopBdgEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgEosSize.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgEosSize.setDescription("The current size of a 'row' in the table s5TrTopBdgEosTable. This allows applications to be able to break apart 'rows' in the table.")
s5TrTopBdgEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 8), )
if mibBuilder.loadTexts: s5TrTopBdgEosTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgEosTable.setDescription("A table of encoded octet strings of entries in table s5TrTopBdgTable. The number of entries is determined by the packing of 'rows' from s5TrTopBdgTable.")
s5TrTopBdgEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 8, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIndx"))
if mibBuilder.loadTexts: s5TrTopBdgEosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgEosEntry.setDescription('A row in the table of encoded octet strings for table s5TrTopBdgTable. Instance returned in Response PDU: On GETs: instance specified is the instance returned. On GET-NEXTs: instance returned is the instance of the last record contained in the octet string. Entries in the table can not be created or deleted via SNMP.')
s5TrTopBdgEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgEos.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopBdgEos.setDescription("An encoded octet string. On reads it contains an integral number of 'rows' from table s5TrTopBdgEntry. All 'rows' are the same size which is defined by object s5TrTopBdgEosSize.")
s5TrTopRingNmmEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmEosSize.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmEosSize.setDescription("The current size of a 'row' in the table s5TrTopRingNmmEosTable. This allows applications to be able to break apart 'rows' in the table.")
s5TrTopRingNmmEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 10), )
if mibBuilder.loadTexts: s5TrTopRingNmmEosTable.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmEosTable.setDescription("A table of encoded octet strings of entries in table s5TrTopRingNmmTable. The number of entries is determined by the packing of 'rows' from s5TrTopRingNmmTable.")
s5TrTopRingNmmEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 10, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopRingNmmEosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmEosEntry.setDescription('A row in the table of encoded octet strings for table s5TrTopRingNmmTable. Instance returned in Response PDU: On GETs: instance specified is the instance returned. On GET-NEXTs: instance returned is the instance of the last record contained in the octet string. Entries in the table can not be created or deleted via SNMP.')
s5TrTopRingNmmEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmEos.setStatus('mandatory')
if mibBuilder.loadTexts: s5TrTopRingNmmEos.setDescription("An encoded octet string. On reads it contains an integral number of 'rows' from table s5TrTopRingNmmTable. All 'rows' are the same size which is defined by object s5TrTopNmmEosSize.")
mibBuilder.exportSymbols("S5-TOK-TOPOLOGY-MIB", s5TrTopIfRingNmmMaxNum=s5TrTopIfRingNmmMaxNum, s5TrTopNmmPortNum=s5TrTopNmmPortNum, s5TrTopBdgTable=s5TrTopBdgTable, s5TrTopRingNmmEosEntry=s5TrTopRingNmmEosEntry, s5TrTopNmmSlotNum=s5TrTopNmmSlotNum, s5TrTopBdgIpAddr=s5TrTopBdgIpAddr, s5TrTopRingNmmMacAddr=s5TrTopRingNmmMacAddr, s5TrTopIfNmmCurNum=s5TrTopIfNmmCurNum, s5TrTopIfNmmMaxNum=s5TrTopIfNmmMaxNum, s5TrTopBdgMonPortStatus=s5TrTopBdgMonPortStatus, s5TrTopRingNmmUnaIpAddr=s5TrTopRingNmmUnaIpAddr, s5TrTopIfStatus=s5TrTopIfStatus, s5TrTopIfBdgCurNum=s5TrTopIfBdgCurNum, s5TrTopBdgAdjMasterNmmIpAddr=s5TrTopBdgAdjMasterNmmIpAddr, s5TrTopNmmRingMaster=s5TrTopNmmRingMaster, s5TrTopIfTopSpeed=s5TrTopIfTopSpeed, s5TrTopBdgHelloPortNum=s5TrTopBdgHelloPortNum, s5TrTopBdgEosTable=s5TrTopBdgEosTable, s5TrTopBdgIndx=s5TrTopBdgIndx, s5TrTopNmmEntry=s5TrTopNmmEntry, s5TrTopBdgPortNum=s5TrTopBdgPortNum, s5TrTopBdgSlotNum=s5TrTopBdgSlotNum, s5TrTopNmmEosEntry=s5TrTopNmmEosEntry, s5TrTopRingNmmSlotNum=s5TrTopRingNmmSlotNum, s5TrTopBdgOwnRingNum=s5TrTopBdgOwnRingNum, s5TrTopIfNum=s5TrTopIfNum, s5TrTopBdgHelloType=s5TrTopBdgHelloType, s5TrTopRingNmmEosSize=s5TrTopRingNmmEosSize, s5TrTopRingNmmIfIpAddr=s5TrTopRingNmmIfIpAddr, s5TrTopRingNmmChassisType=s5TrTopRingNmmChassisType, s5TrTopNmmEosTable=s5TrTopNmmEosTable, s5TrTopNmmIpAddr=s5TrTopNmmIpAddr, s5TrTopBdgMacAddr=s5TrTopBdgMacAddr, s5TrTopBdgNumPort=s5TrTopBdgNumPort, s5TrTopRingNmmEosTable=s5TrTopRingNmmEosTable, s5TrTopIfIpAddr=s5TrTopIfIpAddr, s5TrTopNmmBridgeGroupIdentifier=s5TrTopNmmBridgeGroupIdentifier, s5TrTopIfRingNmmLstChg=s5TrTopIfRingNmmLstChg, s5TrTopRingNmmEos=s5TrTopRingNmmEos, s5TrTopBdgEosSize=s5TrTopBdgEosSize, s5TrTopBdgAdjRingNum=s5TrTopBdgAdjRingNum, s5TrTopRingNmmTable=s5TrTopRingNmmTable, s5TrTopNmmTable=s5TrTopNmmTable, s5TrTopBdgIfIpAddr=s5TrTopBdgIfIpAddr, s5TrTopIfBdgMaxNum=s5TrTopIfBdgMaxNum, s5TrTopBdgEntry=s5TrTopBdgEntry, s5TrTopRingNmmIpAddr=s5TrTopRingNmmIpAddr, s5TrTopRingNmmBkplType=s5TrTopRingNmmBkplType, s5TrTopNmmIfIpAddr=s5TrTopNmmIfIpAddr, s5TrTopNmmEos=s5TrTopNmmEos, s5TrTopIfRingNmmCurNum=s5TrTopIfRingNmmCurNum, s5TrTopNmmRingSpeed=s5TrTopNmmRingSpeed, s5TrTopNmmEosSize=s5TrTopNmmEosSize, s5TrTopNmmRingNum=s5TrTopNmmRingNum, s5TrTopBdgEosEntry=s5TrTopBdgEosEntry, s5TrTopBdgNum=s5TrTopBdgNum, s5TrTopRingNmmEntry=s5TrTopRingNmmEntry, s5TrTopIfNmmLstChg=s5TrTopIfNmmLstChg, s5TrTopIfBdgLstChg=s5TrTopIfBdgLstChg, s5TrTopIfEntry=s5TrTopIfEntry, s5TrTopBdgType=s5TrTopBdgType, s5TrTopBdgEos=s5TrTopBdgEos, s5TrTopBdgHelloPortStatus=s5TrTopBdgHelloPortStatus, s5TrTopIfTable=s5TrTopIfTable)
