#
# PySNMP MIB module CISCO-MEETINGPLACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MEETINGPLACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, MibIdentifier, Unsigned32, NotificationType, IpAddress, Integer32, Counter32, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Unsigned32", "NotificationType", "IpAddress", "Integer32", "Counter32", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "ObjectIdentity", "TimeTicks")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoMeetingPlaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 733))
ciscoMeetingPlaceMIB.setRevisions(('2010-05-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMeetingPlaceMIB.setRevisionsDescriptions(('Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoMeetingPlaceMIB.setLastUpdated('201005060000Z')
if mibBuilder.loadTexts: ciscoMeetingPlaceMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMeetingPlaceMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: support-meetingplace@cisco.com')
if mibBuilder.loadTexts: ciscoMeetingPlaceMIB.setDescription('This MIB allows management of Cisco Unified MeetingPlace (CUMP) features, CUMP is the key conferencing solution component for Cisco Unified Communications. The CUMP MIB runs on the CUMP application server and provides the status/usage information, and minor/major system alarms to the monitoring station. The monitoring station can either pull application server information through the MIB or set as a trap destination to receive alarms.')
ciscoMeetingPlaceMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 0))
ciscoMeetingPlaceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 1))
ciscoMeetingPlaceMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 2))
cmpAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1))
cmpConferenceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 2))
cmpLicenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 3))
cmpUsageInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4))
cmpNodeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 5))
cmpNotificationStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpNotificationStatus.setStatus('current')
if mibBuilder.loadTexts: cmpNotificationStatus.setDescription("This object specifies the current status of the notification. The notifications are generated when the object is set to 'true'. The notifications, which are controlled by this MIB object, include the cmpT1Down, cmpGWSimAlarm, cmpMajHwAlarm, cmpMinHwAlarm, cmpMajSwAlarm, and cmpMinSwAlarm.")
cmpExceptionCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpExceptionCode.setStatus('current')
if mibBuilder.loadTexts: cmpExceptionCode.setDescription('This object indicates MeetingPlace Exception Code. This is the primary code associated with each MeetingPlace exception condition. Each exception code is associated with a description, and the monitoring station will receive the cmpAlarmDesc and the exception code in the same trap. The application server will keep sending the alarm in every 1 minute until the event has been cleared.')
cmpSysUnit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpSysUnit.setStatus('current')
if mibBuilder.loadTexts: cmpSysUnit.setDescription('This object indicates MeetingPlace Server Unit (Component) Number. This is the unit (component) number of the server that reported the exception. In the MeetingPlace Server, there are multiple units, such as database, SIP signaling, ..., etc.')
cmpHwDev = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("mpTemperature", 1), ("mpPowerSupply", 2), ("mpSerialPort", 3), ("mpTapeDrive", 4), ("mpHardDrive", 5), ("mpDisketteDrive", 6), ("mpEthernet", 7), ("mpModem", 8), ("mpSystemMisc", 9), ("mpDSPMSC", 10), ("mpDSPPRC", 11), ("mpT1Blade", 12), ("mpAnalogBlade", 13), ("mpT1Network", 14), ("mpSystemIntegrityCard", 15), ("mpMainMemory", 16), ("mpE1Blade", 17), ("mpE1Network", 18), ("mpVoIPBlade", 19)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpHwDev.setStatus('current')
if mibBuilder.loadTexts: cmpHwDev.setDescription("This object indicates MeetingPlace Hardware Device Code. This defines the class of device that generated a hardware fault. 'mpTemperature' - indicates the hardware temperature is high 'mpPowerSupply' - indicates the power supply failure 'mpSerialPort' - indicates the serial ports failure 'mpTapeDrive' - indicates the tape device failure 'mpHardDrive' - indicates the hard drive failure 'mpDisketteDrive' - indicates the floppy drive failure 'mpEthernet' - indicates the ethernet card failure 'mpModem' - indicates the modem failure 'mpSystemMisc' - indicates the other hardware failure 'mpDSPMSC' - indicates the DSPMSC device failure 'mpDSPPRC' - indicates the DSPPRC device failure 'mpT1Blade' - indicates the T1 line blade device failure 'mpAnalogBlade' - indicates the analog blade device failure 'mpT1Network' - indicates the T1 network device failure 'mpSystemIntegrityCard' - indicates the system integrity card failure 'mpMainMemory' - indicates the main memory failure 'mpE1Blade' - indicates the E1 blade device failure 'mpE1Network' - indicates the E1 network failure 'mpVoIPBlade' - indicates the Voice Over IP blade failure")
cmpHwUnit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpHwUnit.setStatus('current')
if mibBuilder.loadTexts: cmpHwUnit.setDescription('This object indicates MeetingPlace Hardware Device Unit Number. This is the unit number of the hardware device that generated a fault. For a disk this would be the SCSI ID. For a blade this would the the logical card number as defined in the system configuration.')
cmpHwSlot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpHwSlot.setStatus('current')
if mibBuilder.loadTexts: cmpHwSlot.setDescription('This object indicates MeetingPlace Hardware Device Slot Number. This is the location of the hardware device that generated a fault. For a blade this would be the slot number')
cmpHwPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpHwPort.setStatus('current')
if mibBuilder.loadTexts: cmpHwPort.setDescription('This object indicates MeetingPlace Hardware Device Port Number. This is the logical port number associated with a hardware fault. For a T1 alarm, this is the logical span number.')
cmpAlarmDesc = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 1, 7), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmpAlarmDesc.setStatus('current')
if mibBuilder.loadTexts: cmpAlarmDesc.setDescription('This object indicates MeetingPlace Alarm Description. This is a one-line text description of the exception condition. It comprises a string indexed by the exception code filled in with context-specific values. The exception code and alarm description has one to one mapping, the alarm description is in the admin help page.')
cmpPeakMeeting = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpPeakMeeting.setStatus('current')
if mibBuilder.loadTexts: cmpPeakMeeting.setDescription('This object indicates the maximum number of meetings that has been scheduled during the last 24 hours time frame.')
cmpPeakHour = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpPeakHour.setStatus('current')
if mibBuilder.loadTexts: cmpPeakHour.setDescription('This object indicates the peak hour which has the maximum number of meetings in last 24 hours. For example, if the meetingplace server has maximum number of meetings at 2pm, it will give value of 14.')
cmpMeetingCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMeetingCurrent.setStatus('current')
if mibBuilder.loadTexts: cmpMeetingCurrent.setDescription('This object indicates the number of meeting on current moment at this meetingplace server.')
cmpAudioLicense = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpAudioLicense.setStatus('current')
if mibBuilder.loadTexts: cmpAudioLicense.setDescription('This object indicates the number of audio license is used on this node. .')
cmpMaxAudioLicense = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMaxAudioLicense.setStatus('current')
if mibBuilder.loadTexts: cmpMaxAudioLicense.setDescription('This object indicates the maximum number of audio license that can be used on this meetingplace system.')
cmpVideoLicense = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpVideoLicense.setStatus('current')
if mibBuilder.loadTexts: cmpVideoLicense.setDescription('This object indicates the number of video license is used on this node.')
cmpMaxVideoLicense = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMaxVideoLicense.setStatus('current')
if mibBuilder.loadTexts: cmpMaxVideoLicense.setDescription('This object indicates the maximum number of video license that can be used on this meetingplace system.')
cmpVideoPortsUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpVideoPortsUsage.setStatus('current')
if mibBuilder.loadTexts: cmpVideoPortsUsage.setDescription('This object indicates the number of video ports in use at this meetingplace server on the current moment.')
cmpMaxVideoPortsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMaxVideoPortsAvailable.setStatus('current')
if mibBuilder.loadTexts: cmpMaxVideoPortsAvailable.setDescription('This object indicates the maximum number of video ports available on this meetingplace server.')
cmpAudioPortsUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpAudioPortsUsage.setStatus('current')
if mibBuilder.loadTexts: cmpAudioPortsUsage.setDescription('This object indicates the number of audio ports in use at this meetingplace server on the current moment.')
cmpMaxAudioPortsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMaxAudioPortsAvailable.setStatus('current')
if mibBuilder.loadTexts: cmpMaxAudioPortsAvailable.setDescription('This object indicates the maximum number of audio ports available on this meetingplace server.')
cmpMaxAudioPortsUsage24Hours = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMaxAudioPortsUsage24Hours.setStatus('current')
if mibBuilder.loadTexts: cmpMaxAudioPortsUsage24Hours.setDescription('This object indicates the maximum number of audio ports has been used during the last 24 hours.')
cmpMaxVideoPortsUsage24Hours = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpMaxVideoPortsUsage24Hours.setStatus('current')
if mibBuilder.loadTexts: cmpMaxVideoPortsUsage24Hours.setDescription('This object indicates the maximum number of video ports has been used during the last 24 hours.')
cmpNodeDeployType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpNodeDeployType.setStatus('current')
if mibBuilder.loadTexts: cmpNodeDeployType.setDescription('This object indicates the meetingplace deployment type. It can be webex type I, webex type II and audio only.')
cmpNodeRole = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpNodeRole.setStatus('current')
if mibBuilder.loadTexts: cmpNodeRole.setDescription('This object indicates the role of this MeetingPlace node, this meetingplace node can be acting as a master node, leaf node, replica node, or TSPP node.')
cmpRegionInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpRegionInfo.setStatus('current')
if mibBuilder.loadTexts: cmpRegionInfo.setDescription('This object indicates which geographic region the meetingplace server is located.')
cmpSiteInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 733, 1, 5, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpSiteInfo.setStatus('current')
if mibBuilder.loadTexts: cmpSiteInfo.setDescription('This object indicates which geographic site the meetingplace server is located.')
cmpT1Down = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 733, 0, 1))
if mibBuilder.loadTexts: cmpT1Down.setStatus('current')
if mibBuilder.loadTexts: cmpT1Down.setDescription('MeetingPlace T1 line Down Alarm. This notification indicates that there is a problem with a telephony port which is caused when the T1 line goes down.')
cmpGWSimAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 733, 0, 2))
if mibBuilder.loadTexts: cmpGWSimAlarm.setStatus('current')
if mibBuilder.loadTexts: cmpGWSimAlarm.setDescription('MeetingPlace Gateway Alarm. This notification indicates an alarm generated by a MeetingPlace gateway system, when the gateway system is blocking the signaling.')
cmpMajHwAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 733, 0, 3)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpExceptionCode"), ("CISCO-MEETINGPLACE-MIB", "cmpSysUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpHwDev"), ("CISCO-MEETINGPLACE-MIB", "cmpHwUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpHwSlot"), ("CISCO-MEETINGPLACE-MIB", "cmpHwPort"))
if mibBuilder.loadTexts: cmpMajHwAlarm.setStatus('current')
if mibBuilder.loadTexts: cmpMajHwAlarm.setDescription('MeetingPlace Major Hardware Alarm. The network management station will receive the trap, and see the description in cmpAlarmDesc. The system will keep sending alarms until alarms have been cleared. This notification indicates any major hardware alarms reported in the system. cmpExCode is MeetingPlace Exception Code cmpSysUnit is MeetingPlace Server Unit Number cmpHwDev is MeetingPlace Hardware Device Code cmpHwUnit is MeetingPlace Hardware Device Unit Number cmpHwSlot is MeetingPlace Hardware Device Slot Number cmpHwPort is MeetingPlace Hardware Device Port Number')
cmpMinHwAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 733, 0, 4)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpExceptionCode"), ("CISCO-MEETINGPLACE-MIB", "cmpSysUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpHwDev"), ("CISCO-MEETINGPLACE-MIB", "cmpHwUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpHwSlot"), ("CISCO-MEETINGPLACE-MIB", "cmpHwPort"))
if mibBuilder.loadTexts: cmpMinHwAlarm.setStatus('current')
if mibBuilder.loadTexts: cmpMinHwAlarm.setDescription('MeetingPlace Minor Hardware Alarm. This notification indicates any major hardware alarms reported in the system. The network management station will receive the trap, and see the description in cmpAlarmDesc. The system will keep sending alarms until alarms have been cleared. cmpExCode is MeetingPlace Exception Code cmpSysUnit is MeetingPlace Server Unit Number cmpHwDev is MeetingPlace Hardware Device Code cmpHwUnit is MeetingPlace Hardware Device Unit Number cmpHwSlot is MeetingPlace Hardware Device Slot Number cmpHwPort is MeetingPlace Hardware Device Port Number')
cmpMajSwAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 733, 0, 5)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpExceptionCode"), ("CISCO-MEETINGPLACE-MIB", "cmpSysUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpAlarmDesc"))
if mibBuilder.loadTexts: cmpMajSwAlarm.setStatus('current')
if mibBuilder.loadTexts: cmpMajSwAlarm.setDescription('MeetingPlace Major Software Alarm. This notification indicates any major software alarms reported in the system. The network management station will receive the trap, and see the description in cmpAlarmDesc. The system will keep sending alarms until alarms have been cleared. cmpExCode is MeetingPlace Exception Code cmpSysUnit is MeetingPlace Server Unit Number cmpAlarmDesc is MeetingPlace Alarm Description')
cmpMinSwAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 733, 0, 6)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpExceptionCode"), ("CISCO-MEETINGPLACE-MIB", "cmpSysUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpAlarmDesc"))
if mibBuilder.loadTexts: cmpMinSwAlarm.setStatus('current')
if mibBuilder.loadTexts: cmpMinSwAlarm.setDescription('MeetingPlace Minor Software Alarm. This notification indicates any minor software alarms reported in the system. The network management station will receive the trap, and see the description in cmpAlarmDesc. The system will keep sending alarms until alarms have been cleared. cmpExCode is MeetingPlace Exception Code cmpSysUnit is the MeetingPlace Server Unit Number cmpAlarmDesc is MeetingPlace Alarm Description')
cmpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 2, 1))
cmpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 733, 2, 1, 1)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpAlarmGroup"), ("CISCO-MEETINGPLACE-MIB", "cmpNotifsGroup"), ("CISCO-MEETINGPLACE-MIB", "cmpInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpMIBCompliance = cmpMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cmpMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco MeetingPlace MIB for MeetingPlace.')
cmpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 733, 2, 2))
cmpAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 733, 2, 2, 1)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpExceptionCode"), ("CISCO-MEETINGPLACE-MIB", "cmpSysUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpHwDev"), ("CISCO-MEETINGPLACE-MIB", "cmpHwUnit"), ("CISCO-MEETINGPLACE-MIB", "cmpHwSlot"), ("CISCO-MEETINGPLACE-MIB", "cmpHwPort"), ("CISCO-MEETINGPLACE-MIB", "cmpAlarmDesc"), ("CISCO-MEETINGPLACE-MIB", "cmpNotificationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpAlarmGroup = cmpAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: cmpAlarmGroup.setDescription('A collection of objects representing alarms within MeetingPlace.')
cmpNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 733, 2, 2, 2)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpT1Down"), ("CISCO-MEETINGPLACE-MIB", "cmpGWSimAlarm"), ("CISCO-MEETINGPLACE-MIB", "cmpMajHwAlarm"), ("CISCO-MEETINGPLACE-MIB", "cmpMinHwAlarm"), ("CISCO-MEETINGPLACE-MIB", "cmpMajSwAlarm"), ("CISCO-MEETINGPLACE-MIB", "cmpMinSwAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpNotifsGroup = cmpNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: cmpNotifsGroup.setDescription('The notifications generated by this MIB module.')
cmpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 733, 2, 2, 3)).setObjects(("CISCO-MEETINGPLACE-MIB", "cmpPeakMeeting"), ("CISCO-MEETINGPLACE-MIB", "cmpPeakHour"), ("CISCO-MEETINGPLACE-MIB", "cmpMaxAudioPortsUsage24Hours"), ("CISCO-MEETINGPLACE-MIB", "cmpAudioLicense"), ("CISCO-MEETINGPLACE-MIB", "cmpMaxAudioLicense"), ("CISCO-MEETINGPLACE-MIB", "cmpVideoLicense"), ("CISCO-MEETINGPLACE-MIB", "cmpMaxVideoLicense"), ("CISCO-MEETINGPLACE-MIB", "cmpVideoPortsUsage"), ("CISCO-MEETINGPLACE-MIB", "cmpMaxVideoPortsAvailable"), ("CISCO-MEETINGPLACE-MIB", "cmpAudioPortsUsage"), ("CISCO-MEETINGPLACE-MIB", "cmpMaxAudioPortsAvailable"), ("CISCO-MEETINGPLACE-MIB", "cmpMeetingCurrent"), ("CISCO-MEETINGPLACE-MIB", "cmpMaxVideoPortsUsage24Hours"), ("CISCO-MEETINGPLACE-MIB", "cmpNodeDeployType"), ("CISCO-MEETINGPLACE-MIB", "cmpNodeRole"), ("CISCO-MEETINGPLACE-MIB", "cmpRegionInfo"), ("CISCO-MEETINGPLACE-MIB", "cmpSiteInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpInfoGroup = cmpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmpInfoGroup.setDescription('A collection of objects representing the MeetingPlace application server status information.')
mibBuilder.exportSymbols("CISCO-MEETINGPLACE-MIB", cmpMinSwAlarm=cmpMinSwAlarm, cmpSysUnit=cmpSysUnit, cmpPeakHour=cmpPeakHour, cmpAudioPortsUsage=cmpAudioPortsUsage, ciscoMeetingPlaceMIBObjects=ciscoMeetingPlaceMIBObjects, cmpUsageInfo=cmpUsageInfo, cmpMaxAudioPortsAvailable=cmpMaxAudioPortsAvailable, cmpMajSwAlarm=cmpMajSwAlarm, cmpAlarmDesc=cmpAlarmDesc, cmpExceptionCode=cmpExceptionCode, cmpHwSlot=cmpHwSlot, cmpAlarmGroup=cmpAlarmGroup, cmpVideoLicense=cmpVideoLicense, cmpPeakMeeting=cmpPeakMeeting, cmpMaxVideoLicense=cmpMaxVideoLicense, cmpT1Down=cmpT1Down, cmpNotifsGroup=cmpNotifsGroup, cmpInfoGroup=cmpInfoGroup, cmpMaxAudioPortsUsage24Hours=cmpMaxAudioPortsUsage24Hours, cmpHwUnit=cmpHwUnit, cmpMaxVideoPortsUsage24Hours=cmpMaxVideoPortsUsage24Hours, cmpNodeRole=cmpNodeRole, cmpHwDev=cmpHwDev, cmpMeetingCurrent=cmpMeetingCurrent, cmpMIBCompliances=cmpMIBCompliances, cmpGWSimAlarm=cmpGWSimAlarm, ciscoMeetingPlaceMIB=ciscoMeetingPlaceMIB, cmpNodeDeployType=cmpNodeDeployType, cmpConferenceInfo=cmpConferenceInfo, cmpNodeInfo=cmpNodeInfo, cmpAlarmObjects=cmpAlarmObjects, PYSNMP_MODULE_ID=ciscoMeetingPlaceMIB, ciscoMeetingPlaceMIBConform=ciscoMeetingPlaceMIBConform, cmpMajHwAlarm=cmpMajHwAlarm, cmpNotificationStatus=cmpNotificationStatus, cmpHwPort=cmpHwPort, cmpLicenseInfo=cmpLicenseInfo, cmpMaxVideoPortsAvailable=cmpMaxVideoPortsAvailable, cmpRegionInfo=cmpRegionInfo, cmpVideoPortsUsage=cmpVideoPortsUsage, ciscoMeetingPlaceMIBNotifs=ciscoMeetingPlaceMIBNotifs, cmpMinHwAlarm=cmpMinHwAlarm, cmpMIBGroups=cmpMIBGroups, cmpMIBCompliance=cmpMIBCompliance, cmpMaxAudioLicense=cmpMaxAudioLicense, cmpAudioLicense=cmpAudioLicense, cmpSiteInfo=cmpSiteInfo)
