#
# PySNMP MIB module FCMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FCMGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, experimental, Unsigned32, NotificationType, Integer32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter32, MibIdentifier, Counter64, Gauge32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "experimental", "Unsigned32", "NotificationType", "Integer32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter32", "MibIdentifier", "Counter64", "Gauge32", "ModuleIdentity", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class FcNameId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class FcGlobalId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class FcAddressId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class FcEventSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("emergency", 2), ("alert", 3), ("critical", 4), ("error", 5), ("warning", 6), ("notify", 7), ("info", 8), ("debug", 9), ("mark", 10))

class FcUnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("hub", 3), ("switch", 4), ("gateway", 5), ("converter", 6), ("hba", 7), ("proxy-agent", 8), ("storage-device", 9), ("host", 10), ("storage-subsystem", 11), ("module", 12), ("swdriver", 13), ("storage-access-device", 14), ("wdm", 15), ("ups", 16))

fcmgmt = MibIdentifier((1, 3, 6, 1, 3, 94))
connSet = MibIdentifier((1, 3, 6, 1, 3, 94, 1))
trapReg = MibIdentifier((1, 3, 6, 1, 3, 94, 2))
statSet = MibIdentifier((1, 3, 6, 1, 3, 94, 4))
connUnitServiceSet = MibIdentifier((1, 3, 6, 1, 3, 94, 5))
connUnitServiceScalars = MibIdentifier((1, 3, 6, 1, 3, 94, 5, 1))
connUnitServiceTables = MibIdentifier((1, 3, 6, 1, 3, 94, 5, 2))
revisionNumber = MibScalar((1, 3, 6, 1, 3, 94, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: revisionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: revisionNumber.setDescription("This is the revision number for this MIB. The format of the revision value is as follows (0) = high order major revision number (1) = low order major revision number (2) = high order minor revision number (3) = low order minor revision number The value will be stored as an ASCII value. The following is the current value of this object. (0) = '0' (1) = '3' (2) = '0' (3) = '0' This defines a revision of 03.00 ")
uNumber = MibScalar((1, 3, 6, 1, 3, 94, 1, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uNumber.setDescription('The number of connectivity units present on this system (represented by this agent). May be a count of the boards in a chassis or the number of full boxes in a rack.')
systemURL = MibScalar((1, 3, 6, 1, 3, 94, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemURL.setStatus('mandatory')
if mibBuilder.loadTexts: systemURL.setDescription('The top-level URL of the system. If it does not exist the value is empty string. The URL format is implementation dependant and can have keywords embedded that are preceeded by a percent sign (eg, %USER). The following are the defined keywords that will be recognized and replaced with data during a launch. USER - replace with username PASSWORD - replace with password GLOBALID - replace with globalid SERIALNO - replace with serial number ')
statusChangeTime = MibScalar((1, 3, 6, 1, 3, 94, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: statusChangeTime.setDescription('The sysuptime timestamp in centiseconds at which the last status change occurred for any members of the set.')
configurationChangeTime = MibScalar((1, 3, 6, 1, 3, 94, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: configurationChangeTime.setDescription('The sysuptime timestamp in centiseconds at which the last configuration change occurred for any members of the set. This represents a union of change information for connUnitConfigurationChangeTime.')
connUnitTableChangeTime = MibScalar((1, 3, 6, 1, 3, 94, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitTableChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: connUnitTableChangeTime.setDescription('The sysuptime timestamp in centiseconds at which the connUnitTable was updated (an entry was either added or deleted.')
connUnitTable = MibTable((1, 3, 6, 1, 3, 94, 1, 6), )
if mibBuilder.loadTexts: connUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitTable.setDescription('A list of units under a single SNMP agent. The number of entries is given by the value of uNumber. It is 1 for stand-alone system.')
connUnitEntry = MibTableRow((1, 3, 6, 1, 3, 94, 1, 6, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitId"))
if mibBuilder.loadTexts: connUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEntry.setDescription('A connectivity unit entry containing objects for a particular unit.')
connUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitId.setDescription('The unique identification for this connectivity unit among those within this proxy domain. The value MUST be unique within the proxy domain because it is the index variable for connUnitTable. The value assigned to a given conectivity unit SHOULD be persistent across agent and unit resets. It SHOULD be the same as connUnitGlobalId if connUnitGlobalId is known and stable.')
connUnitGlobalId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 2), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitGlobalId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitGlobalId.setDescription('An optional global-scope identifier for this connectivity unit. It MUST be a WWN for this connectivity unit or 16 octets of value zero. WWN formats requiring fewer than 16 octets MUST be extended to 16 octets with trailing zero octets, If a WWN is used for connUnitId, the same WWN MUST be used for connUnitGlobalId. When a non-zero value is provided, it SHOULD be persistent across agent and unit resets. It SHOULD be globally unique. It SHOULD be one of these FC-PH/PH3 formats: IEEE (NAA=1) IEEE Extended (NAA=2) IEEE Registered (NAA=5). IEEE Registered extended (NAA=6). Use of the IEEE formats allows any IEEE-registered vendor to assure global uniqueness independently. The following are some references on IEEE WWN formats: http://standards.ieee.org/regauth/oui/tutorials/fibreformat.html http://standards.ieee.org/regauth/oui/tutorials/fibrecomp_id.html If one or more WWNs are associated with the connUnit via other management methods, one of them SHOULD be used for connUnitGlobalId. If there is not a WWN assigned specifically to the connUnit, there is some merit, though not a requirement, to using a WWN assigned to (one of) its permanently attached FC/LAN interface(s). This can not risk uniqueness, though. As a counterexample, if your agent runs in a host and the host has an HBA, it is quite possible that agent, host, and HBA will all be distinct connUnits, so the host and agent can not use the WWN of the HBA. Another example: If your hub has a built-in Ethernet port, it might be reasonable for the hub to use its LAN address (prefixed with the appropriate NAA) as its connUnitId. But if the Ethernet were a replaceable PCCard, the hub should have an independent ID.')
connUnitType = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 3), FcUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitType.setDescription('The type of this connectivity unit.')
connUnitNumports = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitNumports.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitNumports.setDescription('Number of physical ports in the connectivity unit (internal/embedded, external).')
connUnitState = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitState.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitState.setDescription('Overall state of the connectivity unit.')
connUnitStatus = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("ok", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitStatus.setDescription('Overall status of the connectivity unit.')
connUnitProduct = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitProduct.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitProduct.setDescription("The connectivity unit vendor's product model name.")
connUnitSn = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSn.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSn.setDescription('The serial number for this connectivity unit.')
connUnitUpTime = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitUpTime.setDescription('The number of centiseconds since the last unit initialization.')
connUnitUrl = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitUrl.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitUrl.setDescription('URL to launch a management application, if applicable. Otherwise empty string. In a standalone unit, this would be the same as the top-level URL. This has the same definition as systemURL for keywords.')
connUnitDomainId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitDomainId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitDomainId.setDescription("24 bit Fibre Channel address ID of this connectivity unit, right justified with leading zero's if required. This should be set to the Fibre Channel address ID or if it is a switch it would be set to the Domain Controller address. If this value is not applicable, return all bits set to one.")
connUnitProxyMaster = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitProxyMaster.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitProxyMaster.setDescription("A value of 'yes' means this is the proxy master unit for a set of managed units. For example, this could be the only unit with a management card in it for a set of units. A standalone unit should return 'yes' for this object.")
connUnitPrincipal = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPrincipal.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPrincipal.setDescription('Whether this connectivity unit is the principal unit within the group of fabric elements. If this value is not applicable, return unknown.')
connUnitNumSensors = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitNumSensors.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitNumSensors.setDescription('Number of sensors in the connUnitSensorTable.')
connUnitStatusChangeTime = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitStatusChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: connUnitStatusChangeTime.setDescription('The sysuptime timestamp in centiseconds at which the last status change occurred.')
connUnitConfigurationChangeTime = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitConfigurationChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: connUnitConfigurationChangeTime.setDescription('The sysuptime timestamp in centiseconds at which the last configuration change occurred.')
connUnitNumRevs = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 17), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitNumRevs.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitNumRevs.setDescription('The number of revisions in the connUnitRevsTable.')
connUnitNumZones = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitNumZones.setStatus('obsolete')
if mibBuilder.loadTexts: connUnitNumZones.setDescription('Number of zones defined in connUnitZoneTable.')
connUnitModuleId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitModuleId.setDescription("This is a unique id, persistent between boots, that can be used to group a set of connUnits together into a module. The intended use would be to create a connUnit with a connUnitType of 'module' to represent a physical or logical group of connectivity units. Then the value of the group would be set to the value of connUnitId for this 'container' connUnit. connUnitModuleId should be zeros if this connUnit is not part of a module.")
connUnitName = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitName.setDescription('A display string containing a name for this connectivity unit. This object value should be persistent between boots.')
connUnitInfo = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitInfo.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitInfo.setDescription('A display string containing information about this connectivity unit. This object value should be persistent between boots.')
connUnitControl = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("resetConnUnitColdStart", 3), ("resetConnUnitWarmStart", 4), ("offlineConnUnit", 5), ("onlineConnUnit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitControl.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitControl.setDescription("This object is used to control the addressed connUnit. NOTE: 'Cold Start' and 'Warm Start' are as defined in MIB II and are not meant to be a factory reset. resetConnUnitColdStart: the addressed unit performs a 'Cold Start' reset. resetConnUnitWarmStart: the addressed unit performs a 'Warm Start' reset. offlineConnUnit: the addressed unit puts itself into an implementation dependant 'offline' state. In general,if a unit is in an offline state, it cannot be used to perform meaningful Fibre Channel work. onlineConnUnit: the addressed unit puts itself into an implementation dependant 'online' state. In general, if a unit is in an online state, it is capable of performing meaningful Fibre Channel work. NOTE: Each implementation may chose not to allow any or all of these values on a SET. ")
connUnitContact = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitContact.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitContact.setDescription('Contact information for this connectivity unit.')
connUnitLocation = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitLocation.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLocation.setDescription('Location information for this connectivity unit.')
connUnitEventFilter = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 25), FcEventSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventFilter.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventFilter.setDescription('This value defines the event severity that will be logged by this connectivity unit. All events of severity less than or equal to connUnitEventFilter are logged in connUnitEventTable.')
connUnitNumEvents = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitNumEvents.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitNumEvents.setDescription('Number of events currently in the connUnitEventTable.')
connUnitMaxEvents = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitMaxEvents.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitMaxEvents.setDescription('Max number of events that can be defined in connUnitEventTable.')
connUnitEventCurrID = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventCurrID.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventCurrID.setDescription('The last used event id (connUnitEventId).')
connUnitRevsTable = MibTable((1, 3, 6, 1, 3, 94, 1, 7), )
if mibBuilder.loadTexts: connUnitRevsTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitRevsTable.setDescription('Table of the revisions supported by connectivity units managed by this agent.')
connUnitRevsEntry = MibTableRow((1, 3, 6, 1, 3, 94, 1, 7, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitRevsUnitId"), (0, "FCMGMT-MIB", "connUnitRevsIndex"))
if mibBuilder.loadTexts: connUnitRevsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitRevsEntry.setDescription('')
connUnitRevsUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitRevsUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitRevsUnitId.setDescription('The connUnitId of the connectivity unit that contains this revision table.')
connUnitRevsIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitRevsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitRevsIndex.setDescription('A unique value among all connUnitRevsEntrys with the same value of connUnitRevsUnitId, in the range between 1 and connUnitNumRevs[connUnitRevsUnitId].')
connUnitRevsRevId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitRevsRevId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitRevsRevId.setDescription('A vendor-specific string identifying a revision of a component of the connUnit indexed by connUnitRevsUnitId.')
connUnitRevsDescription = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitRevsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitRevsDescription.setDescription('Description of a component to which the revision corresponds.')
connUnitSensorTable = MibTable((1, 3, 6, 1, 3, 94, 1, 8), )
if mibBuilder.loadTexts: connUnitSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorTable.setDescription('Table of the sensors supported by each connectivity unit managed by this agent.')
connUnitSensorEntry = MibTableRow((1, 3, 6, 1, 3, 94, 1, 8, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitSensorUnitId"), (0, "FCMGMT-MIB", "connUnitSensorIndex"))
if mibBuilder.loadTexts: connUnitSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorEntry.setDescription('Each entry contains the information for a specific sensor.')
connUnitSensorUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorUnitId.setDescription('The connUnitId of the connectivity unit that contains this sensor table.')
connUnitSensorIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorIndex.setDescription('A unique value among all connUnitSensorEntrys with the same value of connUnitSensorUnitId, in the range between 1 and connUnitNumSensor[connUnitSensorUnitId].')
connUnitSensorName = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorName.setDescription('A textual identification of the sensor intended primarily for operator use.')
connUnitSensorStatus = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("ok", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorStatus.setDescription('The status indicated by the sensor.')
connUnitSensorInfo = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorInfo.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorInfo.setDescription('Miscellaneous static info about the sensor such as its serial number.')
connUnitSensorMessage = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorMessage.setDescription("This describes the status of the sensor as a message. It may also provide more resolution on the sensor indication, for example 'Cover temperature 1503K, above nominal operating range'")
connUnitSensorType = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("battery", 3), ("fan", 4), ("power-supply", 5), ("transmitter", 6), ("enclosure", 7), ("board", 8), ("receiver", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorType.setDescription('The type of component being monitored by this sensor.')
connUnitSensorCharacteristic = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("temperature", 3), ("pressure", 4), ("emf", 5), ("currentValue", 6), ("airflow", 7), ("frequency", 8), ("power", 9), ("door", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSensorCharacteristic.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSensorCharacteristic.setDescription('The characteristics being monitored by this sensor.')
connUnitPortTable = MibTable((1, 3, 6, 1, 3, 94, 1, 10), )
if mibBuilder.loadTexts: connUnitPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortTable.setDescription('Generic information on ports for a specific connUnit.')
connUnitPortEntry = MibTableRow((1, 3, 6, 1, 3, 94, 1, 10, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitPortUnitId"), (0, "FCMGMT-MIB", "connUnitPortIndex"))
if mibBuilder.loadTexts: connUnitPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortEntry.setDescription('Each entry contains the information for a specific port.')
connUnitPortUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortUnitId.setDescription('The connUnitId of the connectivity unit that contains this port.')
connUnitPortIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortIndex.setDescription('A unique value among all connUnitPortEntrys on this connectivity unit, between 0 and connUnitNumPort[connUnitPortUnitId].')
connUnitPortType = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("not-present", 3), ("hub-port", 4), ("n-port", 5), ("l-port", 6), ("fl-port", 7), ("f-port", 8), ("e-port", 9), ("g-port", 10), ("domain-ctl", 11), ("hub-controller", 12), ("scsi", 13), ("escon", 14), ("lan", 15), ("wan", 16), ("ac", 17), ("dc", 18), ("ssa", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortType.setDescription('The port type.')
connUnitPortFCClassCap = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortFCClassCap.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortFCClassCap.setDescription('Bit mask that specifies the classes of service capability of this port. If this is not applicable, return all bits set to zero. The bits have the following definition: unknown - 0 class-f - 1 class-one - 2 class-two - 4 class-three - 8 class-four - 16 class-five - 32 class-six - 64')
connUnitPortFCClassOp = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortFCClassOp.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortFCClassOp.setDescription('Bit mask that specifies the classes of service that are currently operational. If this is not applicable, return all bits set to zero. This object has the same definition as connUnitPortFCClassCap')
connUnitPortState = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3), ("bypassed", 4), ("diagnostics", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortState.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortState.setDescription('The user selected state of the port hardware.')
connUnitPortStatus = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("ready", 3), ("warning", 4), ("failure", 5), ("notparticipating", 6), ("initializing", 7), ("bypass", 8), ("ols", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatus.setDescription('An overall protocol status for the port. This value of connUnitPortState is not online, then this is reported Unknown.')
connUnitPortTransmitterType = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("unused", 3), ("shortwave", 4), ("longwave", 5), ("copper", 6), ("scsi", 7), ("longwaveNoOFC", 8), ("shortwaveNoOFC", 9), ("longwaveLED", 10), ("ssa", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortTransmitterType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortTransmitterType.setDescription('The technology of the port transceiver.')
connUnitPortModuleType = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("gbic", 3), ("embedded", 4), ("glm", 5), ("gbicSerialId", 6), ("gbicNoSerialId", 7), ("gbicNotInstalled", 8), ("smallFormFactor", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortModuleType.setDescription('The module type of the port connector.')
connUnitPortWwn = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 10), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortWwn.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortWwn.setDescription('The World Wide Name of the port if applicable, otherwise empty string.')
connUnitPortFCId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortFCId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortFCId.setDescription('This is the assigned Fibre Channel ID of this port. This value is expected to be a Big Endian value of 24 bits. If this is loop, then it is the ALPA that is connected. If this is an eport, then it will only contain the domain ID left justified, zero filled. If this port does not have a Fibre Channel address, return all bits set to 1.')
connUnitPortSn = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortSn.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortSn.setDescription('The serial number of the unit (e.g., for a GBIC). If this is not applicable, return empty string.')
connUnitPortRevision = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortRevision.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortRevision.setDescription('The port revision (e.g., for a GBIC).')
connUnitPortVendor = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortVendor.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortVendor.setDescription('The port vendor (e.g., for a GBIC).')
connUnitPortSpeed = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortSpeed.setDescription('The speed of the port in kilobytes per second.')
connUnitPortControl = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("resetConnUnitPort", 3), ("bypassConnUnitPort", 4), ("unbypassConnUnitPort", 5), ("offlineConnUnitPort", 6), ("onlineConnUnitPort", 7), ("resetConnUnitPortCounters", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortControl.setDescription("This object is used to control the addressed connUnit's port. Valid commands are: resetConnUnitPort: If the addressed connUnit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'reset' operation. Examples of these operations are: the Link Reset protocol, the Loop Initialization protocol, or a resynchronization occurring between the transceiver in the addressed port to the transceiver that the port is connected to. bypassConnUnitPort: If the addressed connUnit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'bypass' operation. Examples of these operations are: transitioning from online to offline, a request(NON-PARTICIPATING) command to the Loop Port state machine, or removal of the port from an arbitrated loop by a hub. unbypassConnUnitPort: If the addressed connUnit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'unbypass' operation. Examples of these operations are: the Link Failure protocol, a request(PARTICIPATING) command to the Loop Port state machine, or addition of the port to an arbitrated loop by a hub. offlineConnUnitPort: If the addressed connUnit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'offline' operation. Examples of these operations are: disabling a port's transceiver, the Link Failure protocol, request(NON-PARTICIPATING) command to the Loop Port state machine, or removal of the port from an arbitrated loop by a hub. onlineConnUnitPort: If the addressed connUnit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'online' operation. Examples of these operations are: enabling a port's transceiver, the Link Failure protocol, request(PARTICIPATING) command to the Loop Port state machine, or addition of the port from an arbitrated loop by a hub. NOTE: Each implementation may chose not to allow any or all of these values on a SET. ")
connUnitPortName = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connUnitPortName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortName.setDescription('A string describing the addressed port.')
connUnitPortPhysicalNumber = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortPhysicalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortPhysicalNumber.setDescription('This is the internal port number this port is known by. In many implementations, this should be the same as connUnitPortIndex. Some implementations may have an internal port representation not compatible with the rules for table indeces. In that case, provide the internal representation of this port in this object. This value may also be used in the connUnitLinkPortNumberX or connUnitLinkPortNumberY objects of the connUnitLinkTable.')
connUnitPortStatObject = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 19), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatObject.setStatus('deprecated')
if mibBuilder.loadTexts: connUnitPortStatObject.setDescription('This contains the OID of the first object of the table that contains the statistics for this particular port. If this has a value of zero, then there are no statistics available for this port. The port type information will help identify the statistics objects that will be found in the table. From this point, one would do a getnext to get the next statistics object. When the first part of the OID changes, the end of table is reached.')
connUnitPortProtocolCap = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortProtocolCap.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortProtocolCap.setDescription('Bit mask that specifies the driver level protocol capability of this port. If this is not applicable, return all bits set to zero. The bits have the following definition: unknown - 0 Loop - 1 Fabric - 2 SCSI - 4 TCP/IP - 8 VI - 16 FICON - 32')
connUnitPortProtocolOp = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortProtocolOp.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortProtocolOp.setDescription('Bit mask that specifies the driver level protocol(s) that are currently operational. If this is not applicable, return all bits set to zero. This object has the same definition as connUnitPortProtocolCap')
connUnitPortNodeWwn = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 22), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortNodeWwn.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortNodeWwn.setDescription('The Node World Wide Name of the port if applicable, otherwise all zeros. This should have the same value for a group of related ports. The container is defined as the largest physical entity. For example, all ports on HBAs on a host will have the same Node WWN. All ports on the same storage subsystem will have the same Node WWN.')
connUnitPortHWState = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("bypassed", 3), ("active", 4), ("loopback", 5), ("txfault", 6), ("noMedia", 7), ("linkDown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortHWState.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortHWState.setDescription('The hardware detected state of the port.')
connUnitEventTable = MibTable((1, 3, 6, 1, 3, 94, 1, 11), )
if mibBuilder.loadTexts: connUnitEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventTable.setDescription('The table of connectivity unit events. Errors, warnings, and information should be reported in this table.')
connUnitEventEntry = MibTableRow((1, 3, 6, 1, 3, 94, 1, 11, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitEventUnitId"), (0, "FCMGMT-MIB", "connUnitEventIndex"))
if mibBuilder.loadTexts: connUnitEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventEntry.setDescription('Each entry contains information on a specific event for the given connectivity unit.')
connUnitEventUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventUnitId.setDescription('The connUnitId of the connectivity unit that contains this event table.')
connUnitEventIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventIndex.setDescription("Each connectivity unit has its own event buffer. As it wraps, it may write over previous events. This object is an index into the buffer. It is recommended that this table be read using 'getNext's to retrieve the initial table. The management application should read the event table at periodic intervals and then determine if any new entries were added by comparing the last known index value with the current highest index value. The management application should then update its copy of the event table. If the read interval is too long, it is possible that there may be events that may not be contained in the agent's internal event buffer. For example, an agent may read events 50-75. At the next read interval, connUnitEventCurrID is 189. If the management app tries to read event index 76, and the agent's internal buffer is 100 entries max, event index 76 will no longer be available. The index value is an incrementing integer starting from one every time there is a table reset. On table reset, all contents are emptied and all indeces are set to zero. When an event is added to the table, the event is assigned the next higher integer value than the last item entered into the table. If the index value reaches its maximum value, the next item entered will cause the index value to roll over and start at one again.")
connUnitEventId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventId.setStatus('obsolete')
if mibBuilder.loadTexts: connUnitEventId.setDescription('The internal event Id. Incremented for each event, ranging between 0 and connUnitMaxEvents. Not used as table index to simplify the agent implementation. When this reaches the end of the range specified by connUnitMaxEvents, the Id will roll over to start at zero. This value will be set back to zero at reset. The relationship of this value to the index is that internal event id may represent a smaller number than a 32 bit integer (eg max 100 entries) and would only have a value range up to connUnitMaxEvents.')
connUnitREventTime = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitREventTime.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitREventTime.setDescription('This is the real time when the event occurred. It has the following format. DDMMYYYY HHMMSS DD=day number MM=month number YYYY=year number HH=hour number MM=minute number SS=seconds number If not applicable, return a NULL string.')
connUnitSEventTime = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSEventTime.setDescription('This is the sysuptime timestamp when the event occurred.')
connUnitEventSeverity = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 6), FcEventSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventSeverity.setDescription('The event severity level.')
connUnitEventType = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("status", 3), ("configuration", 4), ("topology", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventType.setDescription('The type of this event.')
connUnitEventObject = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventObject.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventObject.setDescription('This is used with the connUnitEventType to identify which object the event refers to. It can be the OID of a connectivity unit or of another object like connUnitPortStatus[...]')
connUnitEventDescr = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 11, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitEventDescr.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitEventDescr.setDescription('The description of the event.')
connUnitLinkTable = MibTable((1, 3, 6, 1, 3, 94, 1, 12), )
if mibBuilder.loadTexts: connUnitLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkTable.setDescription('A list of links know to this agent from this connectivity unit to other connectivity units.')
connUnitLinkEntry = MibTableRow((1, 3, 6, 1, 3, 94, 1, 12, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitLinkUnitId"), (0, "FCMGMT-MIB", "connUnitLinkIndex"))
if mibBuilder.loadTexts: connUnitLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkEntry.setDescription('An entry describing a particular link to another.')
connUnitLinkUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkUnitId.setDescription('The connUnitId of the connectivity unit that contains this link table.')
connUnitLinkIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkIndex.setDescription('This value is used to create a unique value for each entry in the link table with the same connUnitLinkUnitId. The value can only be reused if it is not currently in in use and the value is the next candidate to be used. This value is allowed to wrap at the highest value represented by the number of bits. This value is reset to zero when the system is Reset and the first value to be used is one.')
connUnitLinkNodeIdX = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkNodeIdX.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkNodeIdX.setDescription('The node WWN of the unit at one end of the link. If the node WWN is unknown and the node is a connUnit in the responding agent then the value of this object MUST BE equal to its connUnitID.')
connUnitLinkPortNumberX = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkPortNumberX.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkPortNumberX.setDescription('The port number on the unit specified by connUnitLinkNodeIdX if known, otherwise -1. If the value is nonnegative then it will be equal to connUnitPortPhysicalNumber.')
connUnitLinkPortWwnX = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkPortWwnX.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkPortWwnX.setDescription('The port WWN of the unit specified by connUnitLinkNodeIdX if known, otherwise 16 octets of binary 0')
connUnitLinkNodeIdY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkNodeIdY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkNodeIdY.setDescription('The node WWN of the unit at the other end of the link. If the node WWN is unknown and the node is a connUnit in the responding SNMP agency then the value of this object MUST BE equal to its connUnitID.')
connUnitLinkPortNumberY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkPortNumberY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkPortNumberY.setDescription('The port number on the unit specified by connUnitLinkNodeIdY if known, otherwise -1. If the value is nonnegative then it will be equal to connUnitPortPhysicalNumber.')
connUnitLinkPortWwnY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkPortWwnY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkPortWwnY.setDescription('The port WWN on the unit specified by connUnitLinkNodeIdY if known, otherwise 16 octets of binary 0')
connUnitLinkAgentAddressY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkAgentAddressY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkAgentAddressY.setDescription('The address of an FCMGMT MIB agent for the node identified by connUnitLinkNodeIdY, if known; otherwise 16 octets of binary 0')
connUnitLinkAgentAddressTypeY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkAgentAddressTypeY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkAgentAddressTypeY.setDescription("If connUnitLinkAgentAddressY is nonzero, it is a protocol address. ConnUnitLinkAgentAddressTypeY is the the 'address family number' assigned by IANA to identify the address format. (eg, 1 is Ipv4, 2 is Ipv6).")
connUnitLinkAgentPortY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkAgentPortY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkAgentPortY.setDescription('The IP port number for the agent. This is provided in case the agent is at a non-standard SNMP port.')
connUnitLinkUnitTypeY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 12), FcUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkUnitTypeY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkUnitTypeY.setDescription('Type of the FC connectivity unit as defined in connUnitType.')
connUnitLinkConnIdY = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkConnIdY.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkConnIdY.setDescription('This is the Fibre Channel ID of this port. If the connectivity unit is a switch, this is expected to be a Big Endian value of 24 bits. If this is loop, then it is the ALPA that is connected. If this is an eport, then it will only contain the domain ID. If not any of those, unknown or cascaded loop, return all bits set to 1.')
connUnitLinkCurrIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitLinkCurrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitLinkCurrIndex.setDescription('The last used link index.')
connUnitPortStatTable = MibTable((1, 3, 6, 1, 3, 94, 4, 5), )
if mibBuilder.loadTexts: connUnitPortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatTable.setDescription('A list of statistics for the fabric port types.')
connUnitPortStatEntry = MibTableRow((1, 3, 6, 1, 3, 94, 4, 5, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitPortStatUnitId"), (0, "FCMGMT-MIB", "connUnitPortStatIndex"))
if mibBuilder.loadTexts: connUnitPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatEntry.setDescription('An entry describing port statistics.')
connUnitPortStatUnitId = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 1), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatUnitId.setDescription('The connUnitId of the connectivity unit that contains this port stat table.')
connUnitPortStatIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatIndex.setDescription('A unique value among all entrys in this table, between 0 and connUnitNumPort[connUnitPortUnitId].')
connUnitPortStatCountError = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountError.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountError.setDescription('A count of the errors that have occured on this port.')
connUnitPortStatCountTxObjects = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountTxObjects.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountTxObjects.setDescription('The number of frames/packets/IOs/etc that have been transmitted by this port. Note: A Fibre Channel frame starts with SOF and ends with EOF. FC loop devices should not count frames passed through. This value represents the sum total for all other Tx objects.')
connUnitPortStatCountRxObjects = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountRxObjects.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountRxObjects.setDescription('The number of frames/packets/IOs/etc that have been received by this port. Note: A Fibre Channel frame starts with SOF and ends with EOF. FC loop devices should not count frames passed through. This value represents the sum total for all other Rx objects.')
connUnitPortStatCountTxElements = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountTxElements.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountTxElements.setDescription('The number of octets or bytes that have been transmitted by this port. One second periodic polling of the port. This value is saved and compared with the next polled value to compute net throughput. Note, for Fibre Channel, ordered sets are not included in the count.')
connUnitPortStatCountRxElements = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountRxElements.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountRxElements.setDescription('The number of octets or bytes that have been received. by this port. One second periodic polling of the port. This value is saved and compared with the next polled value to compute net throughput. Note, for Fibre Channel, ordered sets are not included in the count.')
connUnitPortStatCountBBCreditZero = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountBBCreditZero.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountBBCreditZero.setDescription('Count of transitions in/out of BBcredit zero state. The other side is not providing any credit. Note, this is a Fibre Channel stat only.')
connUnitPortStatCountInputBuffersFull = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountInputBuffersFull.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountInputBuffersFull.setDescription('Count of occurrences when all input buffers of a port were full and outbound buffer-to-buffer credit transitioned to zero. There is no credit to provide to other side. Note, this is a Fibre Channel stat only.')
connUnitPortStatCountFBSYFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountFBSYFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountFBSYFrames.setDescription('Count of times that FBSY was returned to this port as a result of a frame that could not be delivered to the other end of the link. This occurs if either the Fabric or the destination port is temporarily busy. Port can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat. This is the sum of all classes. If you cannot keep the by class counters, then keep the sum counters.')
connUnitPortStatCountPBSYFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountPBSYFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountPBSYFrames.setDescription('Count of times that PBSY was returned to this port as a result of a frame that could not be delivered to the other end of the link. This occurs if the destination port is temporarily busy. PBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.This is the sum of all classes. If you cannot keep the by class counters, then keep the sum counters.')
connUnitPortStatCountFRJTFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountFRJTFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountFRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Frame that was rejected by the fabric. Note, This is the total for all classes and is a Fibre Channel only stat.')
connUnitPortStatCountPRJTFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountPRJTFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountPRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Frame that was rejected at the destination N_Port. Note, This is the total for all classes and is a Fibre Channel only stat.')
connUnitPortStatCountClass1RxFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass1RxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass1RxFrames.setDescription('Count of Class 1 Frames received at this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass1TxFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass1TxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass1TxFrames.setDescription('Count of Class 1 Frames transmitted out this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass1FBSYFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass1FBSYFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass1FBSYFrames.setDescription('Count of times that FBSY was returned to this port as a result of a Class 1 Frame that could not be delivered to the other end of the link. This occurs if either the Fabric or the destination port is temporarily busy. FBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass1PBSYFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass1PBSYFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass1PBSYFrames.setDescription('Count of times that PBSY was returned to this port as a result of a Class 1 Frame that could not be delivered to the other end of the link. This occurs if the destination N_Port is temporarily busy. PBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass1FRJTFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass1FRJTFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass1FRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 1 Frame that was rejected by the fabric. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass1PRJTFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass1PRJTFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass1PRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 1 Frame that was rejected at the destination N_Port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass2RxFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass2RxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass2RxFrames.setDescription('Count of Class 2 Frames received at this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass2TxFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass2TxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass2TxFrames.setDescription('Count of Class 2 Frames transmitted out this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass2FBSYFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass2FBSYFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass2FBSYFrames.setDescription('Count of times that FBSY was returned to this port as a result of a Class 2 Frame that could not be delivered to the other end of the link. This occurs if either the Fabric or the destination port is temporarily busy. FBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass2PBSYFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass2PBSYFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass2PBSYFrames.setDescription('Count of times that PBSY was returned to this port as a result of a Class 2 Frame that could not be delivered to the other end of the link. This occurs if the destination N_Port is temporarily busy. PBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass2FRJTFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass2FRJTFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass2FRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 2 Frame that was rejected by the fabric. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass2PRJTFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass2PRJTFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass2PRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 2 Frame that was rejected at the destination N_Port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass3RxFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass3RxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass3RxFrames.setDescription('Count of Class 3 Frames received at this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass3TxFrames = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass3TxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass3TxFrames.setDescription('Count of Class 3 Frames transmitted out this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountClass3Discards = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountClass3Discards.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountClass3Discards.setDescription('Count of Class 3 Frames that were discarded upon reception at this port. There is no FBSY or FRJT generated for Class 3 Frames. They are simply discarded if they cannot be delivered. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountRxMulticastObjects = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountRxMulticastObjects.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountRxMulticastObjects.setDescription('Count of Multicast Frames or Packets received at this port.')
connUnitPortStatCountTxMulticastObjects = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountTxMulticastObjects.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountTxMulticastObjects.setDescription('Count of Multicast Frames or Packets transmitted out this port.')
connUnitPortStatCountRxBroadcastObjects = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountRxBroadcastObjects.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountRxBroadcastObjects.setDescription('Count of Broadcast Frames or Packets received at this port.')
connUnitPortStatCountTxBroadcastObjects = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountTxBroadcastObjects.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountTxBroadcastObjects.setDescription('Count of Broadcast Frames or Packets transmitted out this port. On a Fibre Channel loop, count only OPNr frames generated.')
connUnitPortStatCountRxLinkResets = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountRxLinkResets.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountRxLinkResets.setDescription('Count of Link resets. This is the number of LRs received. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountTxLinkResets = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountTxLinkResets.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountTxLinkResets.setDescription('Count of Link resets. This is the number LRs transmitted. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountNumberLinkResets = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountNumberLinkResets.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountNumberLinkResets.setDescription('Count of Link resets and LIPs detected at this port. The number times the reset link protocol is initiated. These are the count of the logical resets, a count of the number of primatives. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountRxOfflineSequences = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountRxOfflineSequences.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountRxOfflineSequences.setDescription('Count of Offline Primitive OLS received at this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountTxOfflineSequences = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountTxOfflineSequences.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountTxOfflineSequences.setDescription('Count of Offline Primitive OLS transmitted by this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountNumberOfflineSequences = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountNumberOfflineSequences.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountNumberOfflineSequences.setDescription('Count of Offline Primitive sequence received at this port. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountLinkFailures = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountLinkFailures.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountLinkFailures.setDescription('Count of link failures. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountInvalidCRC = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountInvalidCRC.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountInvalidCRC.setDescription('Count of frames received with invalid CRC. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Loop ports should not count CRC errors passing through when monitoring. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountInvalidTxWords = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountInvalidTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountInvalidTxWords.setDescription('Count of invalid transmission words received at this port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountPrimitiveSequenceProtocolErrors = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountPrimitiveSequenceProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountPrimitiveSequenceProtocolErrors.setDescription('Count of primitive sequence protocol errors detected at this port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountLossofSignal = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountLossofSignal.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountLossofSignal.setDescription('Count of instances of signal loss detected at port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountLossofSynchronization = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountLossofSynchronization.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountLossofSynchronization.setDescription('Count of instances of synchronization loss detected at port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountInvalidOrderedSets.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountInvalidOrderedSets.setDescription('Count of invalid ordered sets received at port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
connUnitPortStatCountFramesTooLong = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountFramesTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountFramesTooLong.setDescription('Count of frames received at this port where the frame length was greater than what was agreed to in FLOGI/PLOGI. This could be caused by losing the end of frame delimiter. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountFramesTruncated = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountFramesTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountFramesTruncated.setDescription('Count of frames received at this port where the frame length was less than the minimum indicated by the frame header - normally 24 bytes, but it could be more if the DFCTL field indicates an optional header should have been present. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountAddressErrors = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountAddressErrors.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountAddressErrors.setDescription('Count of frames received with unknown addressing. e.x. unknown SID or DID. the SID or DID is not known to the routing algorithm. Note. this is a Fibre Channel only stat.')
connUnitPortStatCountDelimiterErrors = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountDelimiterErrors.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountDelimiterErrors.setDescription('Count of invalid frame delimiters received at this port. An example is a frame with a class 2 start and and a class 3 at the end. Note, this is a Fibre Channel only stat.')
connUnitPortStatCountEncodingDisparityErrors = MibTableColumn((1, 3, 6, 1, 3, 94, 4, 5, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitPortStatCountEncodingDisparityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitPortStatCountEncodingDisparityErrors.setDescription('Count of disparity errors received at this port. Note, this is a Fibre Channel only stat.')
connUnitSnsMaxEntry = MibScalar((1, 3, 6, 1, 3, 94, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsMaxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsMaxEntry.setDescription('The maximum number of entries in the table.')
connUnitSnsTable = MibTable((1, 3, 6, 1, 3, 94, 5, 2, 1), )
if mibBuilder.loadTexts: connUnitSnsTable.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsTable.setDescription('This table contains an entry for each object registered with this port in the switch.')
connUnitSnsEntry = MibTableRow((1, 3, 6, 1, 3, 94, 5, 2, 1, 1), ).setIndexNames((0, "FCMGMT-MIB", "connUnitSnsId"), (0, "FCMGMT-MIB", "connUnitSnsPortIndex"), (0, "FCMGMT-MIB", "connUnitSnsPortIdentifier"))
if mibBuilder.loadTexts: connUnitSnsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsEntry.setDescription('The Simple Name Server table for the port represented by connUnitSnsPortIndex .')
connUnitSnsId = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsId.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsId.setDescription('The connUnitId of the connectivity unit that contains this Name Server table.')
connUnitSnsPortIndex = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsPortIndex.setDescription('The physical port number of this SNS table entry. Each physical port has an SNS table with 1-n entries indexed by connUnitSnsPortIdentifier (port address)')
connUnitSnsPortIdentifier = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 3), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsPortIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsPortIdentifier.setDescription('The Port Identifier for this entry in the SNS table.')
connUnitSnsPortName = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 4), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsPortName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsPortName.setDescription('The Port Name for this entry in the SNS table.')
connUnitSnsNodeName = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 5), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsNodeName.setDescription('The Node Name for this entry in the SNS table.')
connUnitSnsClassOfSvc = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsClassOfSvc.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsClassOfSvc.setDescription('The Classes of Service offered by this entry in the SNS table.')
connUnitSnsNodeIPAddress = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsNodeIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsNodeIPAddress.setDescription('The IPv6 formatted address of the Node for this entry in the SNS table.')
connUnitSnsProcAssoc = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsProcAssoc.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsProcAssoc.setDescription('The Process Associator for this entry in the SNS table.')
connUnitSnsFC4Type = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsFC4Type.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsFC4Type.setDescription('The FC-4 Types supported by this entry in the SNS table.')
connUnitSnsPortType = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsPortType.setDescription('The Port Type of this entry in the SNS table.')
connUnitSnsPortIPAddress = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsPortIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsPortIPAddress.setDescription('The IPv6 formatted address of this entry in the SNS table.')
connUnitSnsFabricPortName = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 12), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsFabricPortName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsFabricPortName.setDescription('The Fabric Port name of this entry in the SNS table.')
connUnitSnsHardAddress = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 13), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsHardAddress.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsHardAddress.setDescription('The Hard Address of this entry in the SNS table.')
connUnitSnsSymbolicPortName = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsSymbolicPortName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsSymbolicPortName.setDescription('The Symbolic Port Name of this entry in the SNS table.')
connUnitSnsSymbolicNodeName = MibTableColumn((1, 3, 6, 1, 3, 94, 5, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUnitSnsSymbolicNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: connUnitSnsSymbolicNodeName.setDescription('The Symbolic Node Name of this entry in the SNS table.')
trapMaxClients = MibScalar((1, 3, 6, 1, 3, 94, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMaxClients.setStatus('mandatory')
if mibBuilder.loadTexts: trapMaxClients.setDescription('The maximum number of SNMP trap recipients supported by the connectivity unit.')
trapClientCount = MibScalar((1, 3, 6, 1, 3, 94, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientCount.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientCount.setDescription('The current number of rows in the trap table.')
trapRegTable = MibTable((1, 3, 6, 1, 3, 94, 2, 3), )
if mibBuilder.loadTexts: trapRegTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegTable.setDescription('A table containing a row for each IP address/port number that traps will be sent to.')
trapRegEntry = MibTableRow((1, 3, 6, 1, 3, 94, 2, 3, 1), ).setIndexNames((0, "FCMGMT-MIB", "trapRegIpAddress"), (0, "FCMGMT-MIB", "trapRegPort"))
if mibBuilder.loadTexts: trapRegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegEntry.setDescription('Ip/Port pair for a specific client.')
trapRegIpAddress = MibTableColumn((1, 3, 6, 1, 3, 94, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRegIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegIpAddress.setDescription('The Ip address of a client registered for traps.')
trapRegPort = MibTableColumn((1, 3, 6, 1, 3, 94, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRegPort.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegPort.setDescription('The UDP port to send traps to for this host. Normally this would be the standard trap port (162). This object is an index and must be specified to create a row in this table.')
trapRegFilter = MibTableColumn((1, 3, 6, 1, 3, 94, 2, 3, 1, 3), FcEventSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapRegFilter.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegFilter.setDescription("This value defines the trap severity filter for this trap host. The connUnit will send traps to this host that have a severity level less than or equal to this value. The default value of this object is 'warning'.")
trapRegRowState = MibTableColumn((1, 3, 6, 1, 3, 94, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rowDestroy", 1), ("rowInactive", 2), ("rowActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapRegRowState.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegRowState.setDescription('Specifies the state of the row. rowDestroy READ: Can never happen. WRITE: Remove this row from the table. rowInactive READ: Indicates that this row does exist, but that traps are not enabled to be sent to the target. WRITE: If the row does not exist, and the agent allows writes to the trap table, then a new row is created. The values of the optional columns will be set to default values. Traps are not enabled to be sent to the target. If the row already existed, then traps are disabled from being sent to the target. rowActive READ: Indicates that this row exists, and that traps are enabled to be sent to the target. WRITE: If the row does not exist, and the agent allows writes to the trap table, then a new row is created. The values of the optional columns will be set to default values. Traps are enabled to be sent to the target. If the row already exists, then traps are enabled to be sent to the target. A value of rowActive or rowInactive must be specified to create a row in the table.')
connUnitStatusChange = NotificationType((1, 3, 6, 1, 3, 94) + (0,1)).setObjects(("FCMGMT-MIB", "connUnitStatus"), ("FCMGMT-MIB", "connUnitState"))
if mibBuilder.loadTexts: connUnitStatusChange.setDescription('The overall status of the connectivity unit has changed. Recommended severity level (for filtering): alert')
connUnitDeletedTrap = NotificationType((1, 3, 6, 1, 3, 94) + (0,3)).setObjects(("FCMGMT-MIB", "connUnitId"))
if mibBuilder.loadTexts: connUnitDeletedTrap.setDescription('A connUnit has been deleted from this agent. Recommended severity level (for filtering): warning')
connUnitEventTrap = NotificationType((1, 3, 6, 1, 3, 94) + (0,4)).setObjects(("FCMGMT-MIB", "connUnitEventId"), ("FCMGMT-MIB", "connUnitEventType"), ("FCMGMT-MIB", "connUnitEventObject"), ("FCMGMT-MIB", "connUnitEventDescr"))
if mibBuilder.loadTexts: connUnitEventTrap.setDescription('An event has been generated by the connectivity unit. Recommended severity level (for filtering): info')
connUnitSensorStatusChange = NotificationType((1, 3, 6, 1, 3, 94) + (0,5)).setObjects(("FCMGMT-MIB", "connUnitSensorStatus"))
if mibBuilder.loadTexts: connUnitSensorStatusChange.setDescription('The overall status of the connectivity unit has changed. Recommended severity level (for filtering): alert')
connUnitPortStatusChange = NotificationType((1, 3, 6, 1, 3, 94) + (0,6)).setObjects(("FCMGMT-MIB", "connUnitPortStatus"), ("FCMGMT-MIB", "connUnitPortState"))
if mibBuilder.loadTexts: connUnitPortStatusChange.setDescription('The overall status of the connectivity unit has changed. Recommended severity level (for filtering): alert')
mibBuilder.exportSymbols("FCMGMT-MIB", connUnitSnsHardAddress=connUnitSnsHardAddress, connUnitPortIndex=connUnitPortIndex, connUnitLinkNodeIdY=connUnitLinkNodeIdY, connUnitUrl=connUnitUrl, connUnitLinkCurrIndex=connUnitLinkCurrIndex, FcAddressId=FcAddressId, connUnitPortStatIndex=connUnitPortStatIndex, connUnitPortStatCountTxMulticastObjects=connUnitPortStatCountTxMulticastObjects, connUnitPortProtocolOp=connUnitPortProtocolOp, connUnitPortStatus=connUnitPortStatus, trapRegTable=trapRegTable, connUnitRevsEntry=connUnitRevsEntry, connUnitSnsFC4Type=connUnitSnsFC4Type, trapRegPort=trapRegPort, connUnitControl=connUnitControl, connUnitSensorTable=connUnitSensorTable, connUnitPortStatCountRxElements=connUnitPortStatCountRxElements, connUnitSEventTime=connUnitSEventTime, connUnitPortUnitId=connUnitPortUnitId, connUnitPortStatCountClass2TxFrames=connUnitPortStatCountClass2TxFrames, connUnitSnsPortIdentifier=connUnitSnsPortIdentifier, connUnitSensorName=connUnitSensorName, FcNameId=FcNameId, connUnitLinkAgentPortY=connUnitLinkAgentPortY, connUnitSensorMessage=connUnitSensorMessage, connUnitPortStatCountAddressErrors=connUnitPortStatCountAddressErrors, connUnitPortType=connUnitPortType, connUnitSnsClassOfSvc=connUnitSnsClassOfSvc, connUnitStatusChange=connUnitStatusChange, connUnitNumEvents=connUnitNumEvents, fcmgmt=fcmgmt, connUnitSnsMaxEntry=connUnitSnsMaxEntry, connUnitPortPhysicalNumber=connUnitPortPhysicalNumber, revisionNumber=revisionNumber, connUnitPortStatCountClass2RxFrames=connUnitPortStatCountClass2RxFrames, connUnitEventTable=connUnitEventTable, connUnitProduct=connUnitProduct, connUnitPortEntry=connUnitPortEntry, connUnitLinkAgentAddressY=connUnitLinkAgentAddressY, connUnitPortStatCountClass1PRJTFrames=connUnitPortStatCountClass1PRJTFrames, connUnitLinkUnitTypeY=connUnitLinkUnitTypeY, connUnitPortStatCountRxBroadcastObjects=connUnitPortStatCountRxBroadcastObjects, connUnitSnsPortIPAddress=connUnitSnsPortIPAddress, connUnitPortHWState=connUnitPortHWState, connUnitPortStatCountClass1FRJTFrames=connUnitPortStatCountClass1FRJTFrames, connUnitEventObject=connUnitEventObject, connUnitPortStatCountFramesTruncated=connUnitPortStatCountFramesTruncated, connUnitPortStatCountTxObjects=connUnitPortStatCountTxObjects, connUnitPortStatCountPrimitiveSequenceProtocolErrors=connUnitPortStatCountPrimitiveSequenceProtocolErrors, uNumber=uNumber, connUnitEventIndex=connUnitEventIndex, connUnitPortStatCountClass3TxFrames=connUnitPortStatCountClass3TxFrames, connUnitPortStatCountTxBroadcastObjects=connUnitPortStatCountTxBroadcastObjects, connUnitEventCurrID=connUnitEventCurrID, connUnitNumRevs=connUnitNumRevs, connUnitPortNodeWwn=connUnitPortNodeWwn, connUnitLinkPortWwnX=connUnitLinkPortWwnX, connUnitPortStatCountInputBuffersFull=connUnitPortStatCountInputBuffersFull, connUnitTableChangeTime=connUnitTableChangeTime, connUnitPortStatCountInvalidOrderedSets=connUnitPortStatCountInvalidOrderedSets, connUnitSnsNodeName=connUnitSnsNodeName, connUnitPortFCClassCap=connUnitPortFCClassCap, connUnitPortStatCountClass3Discards=connUnitPortStatCountClass3Discards, connUnitRevsDescription=connUnitRevsDescription, connUnitREventTime=connUnitREventTime, trapMaxClients=trapMaxClients, connUnitPortStatCountClass1RxFrames=connUnitPortStatCountClass1RxFrames, connUnitSnsId=connUnitSnsId, trapRegEntry=trapRegEntry, connUnitNumZones=connUnitNumZones, connUnitSensorStatus=connUnitSensorStatus, connUnitPrincipal=connUnitPrincipal, connUnitPortStatCountClass2PRJTFrames=connUnitPortStatCountClass2PRJTFrames, connUnitSnsEntry=connUnitSnsEntry, connUnitTable=connUnitTable, connUnitNumSensors=connUnitNumSensors, connUnitContact=connUnitContact, connUnitPortStatCountFBSYFrames=connUnitPortStatCountFBSYFrames, connUnitPortStatCountRxLinkResets=connUnitPortStatCountRxLinkResets, connUnitDomainId=connUnitDomainId, connUnitSensorStatusChange=connUnitSensorStatusChange, connUnitPortStatCountPRJTFrames=connUnitPortStatCountPRJTFrames, connUnitPortStatCountLinkFailures=connUnitPortStatCountLinkFailures, connUnitEventEntry=connUnitEventEntry, connUnitServiceScalars=connUnitServiceScalars, FcEventSeverity=FcEventSeverity, connUnitPortName=connUnitPortName, connUnitLinkTable=connUnitLinkTable, connUnitSnsFabricPortName=connUnitSnsFabricPortName, connUnitProxyMaster=connUnitProxyMaster, connUnitStatusChangeTime=connUnitStatusChangeTime, connUnitLinkEntry=connUnitLinkEntry, connUnitPortStatCountClass1PBSYFrames=connUnitPortStatCountClass1PBSYFrames, configurationChangeTime=configurationChangeTime, connUnitLinkNodeIdX=connUnitLinkNodeIdX, connUnitSensorIndex=connUnitSensorIndex, connUnitPortStatCountPBSYFrames=connUnitPortStatCountPBSYFrames, connUnitPortStatCountRxObjects=connUnitPortStatCountRxObjects, connUnitRevsRevId=connUnitRevsRevId, connUnitLinkAgentAddressTypeY=connUnitLinkAgentAddressTypeY, connUnitPortStatUnitId=connUnitPortStatUnitId, connUnitGlobalId=connUnitGlobalId, connUnitName=connUnitName, connUnitPortProtocolCap=connUnitPortProtocolCap, connUnitSnsNodeIPAddress=connUnitSnsNodeIPAddress, connUnitSnsTable=connUnitSnsTable, systemURL=systemURL, connUnitNumports=connUnitNumports, connUnitRevsTable=connUnitRevsTable, connUnitLinkPortNumberY=connUnitLinkPortNumberY, connUnitPortTransmitterType=connUnitPortTransmitterType, connUnitPortVendor=connUnitPortVendor, connUnitSnsProcAssoc=connUnitSnsProcAssoc, connUnitPortStatCountEncodingDisparityErrors=connUnitPortStatCountEncodingDisparityErrors, connUnitPortFCClassOp=connUnitPortFCClassOp, trapRegRowState=trapRegRowState, connUnitSensorUnitId=connUnitSensorUnitId, connUnitLinkUnitId=connUnitLinkUnitId, connUnitPortStatCountClass2PBSYFrames=connUnitPortStatCountClass2PBSYFrames, connSet=connSet, connUnitPortRevision=connUnitPortRevision, trapReg=trapReg, connUnitUpTime=connUnitUpTime, connUnitEventFilter=connUnitEventFilter, connUnitPortStatCountTxElements=connUnitPortStatCountTxElements, statusChangeTime=statusChangeTime, connUnitLinkConnIdY=connUnitLinkConnIdY, connUnitId=connUnitId, trapClientCount=trapClientCount, connUnitSnsPortName=connUnitSnsPortName, connUnitPortStatCountLossofSynchronization=connUnitPortStatCountLossofSynchronization, connUnitPortStatCountInvalidTxWords=connUnitPortStatCountInvalidTxWords, connUnitServiceSet=connUnitServiceSet, statSet=statSet, connUnitPortStatTable=connUnitPortStatTable, FcGlobalId=FcGlobalId, connUnitSn=connUnitSn, connUnitStatus=connUnitStatus, connUnitModuleId=connUnitModuleId, connUnitPortModuleType=connUnitPortModuleType, connUnitServiceTables=connUnitServiceTables, connUnitPortWwn=connUnitPortWwn, connUnitPortStatCountClass2FRJTFrames=connUnitPortStatCountClass2FRJTFrames, connUnitEventDescr=connUnitEventDescr, connUnitSnsPortType=connUnitSnsPortType, connUnitMaxEvents=connUnitMaxEvents, connUnitSensorCharacteristic=connUnitSensorCharacteristic, connUnitEventUnitId=connUnitEventUnitId, connUnitPortStatCountRxMulticastObjects=connUnitPortStatCountRxMulticastObjects, connUnitPortState=connUnitPortState, connUnitPortStatEntry=connUnitPortStatEntry, connUnitSnsSymbolicPortName=connUnitSnsSymbolicPortName, connUnitEventTrap=connUnitEventTrap, connUnitRevsIndex=connUnitRevsIndex, connUnitLocation=connUnitLocation, connUnitPortStatCountTxLinkResets=connUnitPortStatCountTxLinkResets, connUnitPortStatCountNumberLinkResets=connUnitPortStatCountNumberLinkResets, connUnitType=connUnitType, connUnitEventSeverity=connUnitEventSeverity, connUnitPortStatCountClass3RxFrames=connUnitPortStatCountClass3RxFrames, connUnitPortStatCountFRJTFrames=connUnitPortStatCountFRJTFrames, connUnitEntry=connUnitEntry, connUnitPortTable=connUnitPortTable, connUnitPortStatCountNumberOfflineSequences=connUnitPortStatCountNumberOfflineSequences, connUnitSnsSymbolicNodeName=connUnitSnsSymbolicNodeName, FcUnitType=FcUnitType, connUnitPortStatCountDelimiterErrors=connUnitPortStatCountDelimiterErrors, connUnitSnsPortIndex=connUnitSnsPortIndex, connUnitPortStatCountError=connUnitPortStatCountError, connUnitPortStatCountFramesTooLong=connUnitPortStatCountFramesTooLong, connUnitPortFCId=connUnitPortFCId, connUnitLinkIndex=connUnitLinkIndex, trapRegIpAddress=trapRegIpAddress, connUnitDeletedTrap=connUnitDeletedTrap, connUnitState=connUnitState, connUnitPortStatCountInvalidCRC=connUnitPortStatCountInvalidCRC, connUnitPortStatCountRxOfflineSequences=connUnitPortStatCountRxOfflineSequences, connUnitInfo=connUnitInfo, connUnitPortStatusChange=connUnitPortStatusChange, connUnitLinkPortWwnY=connUnitLinkPortWwnY, connUnitSensorType=connUnitSensorType, connUnitConfigurationChangeTime=connUnitConfigurationChangeTime, connUnitPortStatCountClass1FBSYFrames=connUnitPortStatCountClass1FBSYFrames, connUnitPortSpeed=connUnitPortSpeed, connUnitPortStatObject=connUnitPortStatObject, connUnitPortStatCountClass2FBSYFrames=connUnitPortStatCountClass2FBSYFrames, connUnitPortStatCountLossofSignal=connUnitPortStatCountLossofSignal, connUnitPortControl=connUnitPortControl, connUnitRevsUnitId=connUnitRevsUnitId, connUnitPortSn=connUnitPortSn, connUnitEventId=connUnitEventId, connUnitLinkPortNumberX=connUnitLinkPortNumberX, connUnitPortStatCountBBCreditZero=connUnitPortStatCountBBCreditZero, connUnitPortStatCountClass1TxFrames=connUnitPortStatCountClass1TxFrames, trapRegFilter=trapRegFilter, connUnitPortStatCountTxOfflineSequences=connUnitPortStatCountTxOfflineSequences, connUnitSensorEntry=connUnitSensorEntry, connUnitEventType=connUnitEventType, connUnitSensorInfo=connUnitSensorInfo)
