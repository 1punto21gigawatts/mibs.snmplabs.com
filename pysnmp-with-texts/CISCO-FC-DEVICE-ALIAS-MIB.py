#
# PySNMP MIB module CISCO-FC-DEVICE-ALIAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-DEVICE-ALIAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
CdpvmDevType, = mibBuilder.importSymbols("CISCO-DYNAMIC-PORT-VSAN-MIB", "CdpvmDevType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, IpAddress, MibIdentifier, iso, Unsigned32, Gauge32, Counter64, TimeTicks, NotificationType, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "MibIdentifier", "iso", "Unsigned32", "Gauge32", "Counter64", "TimeTicks", "NotificationType", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
ciscoFcDeviceAliasMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 430))
ciscoFcDeviceAliasMIB.setRevisions(('2004-09-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcDeviceAliasMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoFcDeviceAliasMIB.setLastUpdated('200409200000Z')
if mibBuilder.loadTexts: ciscoFcDeviceAliasMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoFcDeviceAliasMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFcDeviceAliasMIB.setDescription('The MIB module for the management of Device Aliases in a Fibre Channel Fabric. A Fibre Channel fabric consists of devices such as disks, hosts and switches. The disks and hosts login to the switches and avail services available to them in the fabric. These devices are identified by means of their World Wide Names (WWN). The WWNs are 8-byte cryptic identifiers, which are cumbersome for human use. A Device Alias is a human readable string which can be used to alias a World Wide Name (WWN). So, a Device Alias is used to map a WWN to a user friendly name. Once configured, the Device Alias can be used in place of the WWN. On the switch, this MIB assists in defining the Device Aliases for the remote devices and using these Aliases instead of the cryptic WWNs.')
cfdaMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 430, 0))
cfdaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 430, 1))
cfdaMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 430, 2))
cfdaConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1))
cfdaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1, 1), )
if mibBuilder.loadTexts: cfdaConfigTable.setStatus('current')
if mibBuilder.loadTexts: cfdaConfigTable.setDescription('A table containing information on all device aliases that have been configured on the local switch.')
cfdaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-FC-DEVICE-ALIAS-MIB", "cfdaConfigDeviceAlias"))
if mibBuilder.loadTexts: cfdaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cfdaConfigEntry.setDescription('Each entry in this table contains the mapping between the alias for a Fibre Channel device and its World Wide Name (WWN).')
cfdaConfigDeviceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cfdaConfigDeviceAlias.setStatus('current')
if mibBuilder.loadTexts: cfdaConfigDeviceAlias.setDescription('The device alias of this entry. This object is the human friendly string for the device represented by the corresponding instance of cfdaConfigDeviceWwn. A device can have only one alias configured. The value of this object MUST begin with an alphabet.')
cfdaConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1, 1, 1, 2), CdpvmDevType().clone('pwwn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfdaConfigDeviceType.setStatus('current')
if mibBuilder.loadTexts: cfdaConfigDeviceType.setDescription("The type of the Fibre Channel device represented by the corresponding instance of cfdaConfigDeviceId. This object cannot be modified while the value of the corresponding instance of cfdaConfigRowStatus is 'active'.")
cfdaConfigDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfdaConfigDeviceId.setStatus('current')
if mibBuilder.loadTexts: cfdaConfigDeviceId.setDescription("The Fibre Channel device which is given a device alias as indicated by the corresponding instance of cfdaConfigDeviceAlias. This object MUST be set to a valid value before or concurrently with setting the corresponding instance of cfdaConfigRowStatus object to 'active'. This object cannot be modified while the value of the corresponding instance of cfdaConfigRowStatus object is 'active'.")
cfdaConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 430, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfdaConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cfdaConfigRowStatus.setDescription("The status of this conceptual row. Before setting this object to 'active', the corresponding instance of cfdaConfigDeviceId MUST be set to a valid value. None of the objects can be modified while the value of this object is 'active'.")
ciscoFcDaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 430, 2, 1))
ciscoFcDaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 430, 2, 2))
ciscoFcDaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 430, 2, 1, 1)).setObjects(("CISCO-FC-DEVICE-ALIAS-MIB", "ciscoFcDaConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFcDaMIBCompliance = ciscoFcDaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoFcDaMIBCompliance.setDescription('The compliance statement for entities which implement Device Aliases.')
ciscoFcDaConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 430, 2, 2, 1)).setObjects(("CISCO-FC-DEVICE-ALIAS-MIB", "cfdaConfigDeviceType"), ("CISCO-FC-DEVICE-ALIAS-MIB", "cfdaConfigDeviceId"), ("CISCO-FC-DEVICE-ALIAS-MIB", "cfdaConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFcDaConfigGroup = ciscoFcDaConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFcDaConfigGroup.setDescription('A collection of objects for configuring and distributing device aliases.')
mibBuilder.exportSymbols("CISCO-FC-DEVICE-ALIAS-MIB", cfdaConfigRowStatus=cfdaConfigRowStatus, cfdaMIBNotifs=cfdaMIBNotifs, cfdaConfigDeviceId=cfdaConfigDeviceId, cfdaConfigTable=cfdaConfigTable, cfdaConfigEntry=cfdaConfigEntry, cfdaMIBConform=cfdaMIBConform, cfdaConfigDeviceType=cfdaConfigDeviceType, PYSNMP_MODULE_ID=ciscoFcDeviceAliasMIB, ciscoFcDeviceAliasMIB=ciscoFcDeviceAliasMIB, cfdaConfigDeviceAlias=cfdaConfigDeviceAlias, ciscoFcDaMIBCompliances=ciscoFcDaMIBCompliances, ciscoFcDaMIBCompliance=ciscoFcDaMIBCompliance, ciscoFcDaMIBGroups=ciscoFcDaMIBGroups, cfdaConfiguration=cfdaConfiguration, cfdaMIBObjects=cfdaMIBObjects, ciscoFcDaConfigGroup=ciscoFcDaConfigGroup)
