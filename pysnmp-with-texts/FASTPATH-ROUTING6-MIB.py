#
# PySNMP MIB module FASTPATH-ROUTING6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-ROUTING6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:12:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
fastPath, = mibBuilder.importSymbols("BROADCOM-REF-MIB", "fastPath")
Ipv6AddressPrefix, Ipv6IfIndex, Ipv6Address, Ipv6IfIndexOrZero, Ipv6AddressIfIdentifier = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6IfIndex", "Ipv6Address", "Ipv6IfIndexOrZero", "Ipv6AddressIfIdentifier")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, iso, IpAddress, Counter64, Gauge32, NotificationType, Counter32, ModuleIdentity, Unsigned32, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "iso", "IpAddress", "Counter64", "Gauge32", "NotificationType", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Bits")
TruthValue, RowPointer, PhysAddress, RowStatus, TimeStamp, MacAddress, VariablePointer, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowPointer", "PhysAddress", "RowStatus", "TimeStamp", "MacAddress", "VariablePointer", "TextualConvention", "DisplayString")
fastPathRoutingIpv6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30))
fastPathRoutingIpv6.setRevisions(('2007-05-23 00:00', '2005-09-21 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathRoutingIpv6.setRevisionsDescriptions(('Broadcom branding related changes.', 'Updated for release',))
if mibBuilder.loadTexts: fastPathRoutingIpv6.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: fastPathRoutingIpv6.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathRoutingIpv6.setContactInfo(' Customer Support Postal: Broadcom Corporation 100, Perimeter Park Drive Morrisville, NC 27560 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathRoutingIpv6.setDescription('The Broadcom Private MIB for FastPath Ipv6 Routing')
agentIpv6Group = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1))
agentIpv6RoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RoutingMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RoutingMode.setDescription('Administratively enables/disables ipv6 unicast routing on the switch.')
agentIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2), )
if mibBuilder.loadTexts: agentIpv6InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceTable.setDescription('')
agentIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6InterfaceIfIndex"))
if mibBuilder.loadTexts: agentIpv6InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceEntry.setDescription('')
agentIpv6InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6InterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIfIndex.setDescription('The IfIndex associated with this instance.')
agentIpv6InterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1280, 1500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceMtuValue.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceMtuValue.setDescription('Configures the MTU value for this interface.If it is not yet configured, retrieving the value of this object results in a zero value. Setting the value zero to this object effectively un-configures the MTU.')
agentIpv6InterfaceDadTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceDadTransmits.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceDadTransmits.setDescription('Configures the dad transmits value for this interface.')
agentIpv6InterfaceLinkLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceLinkLocalOnly.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceLinkLocalOnly.setDescription('When enabled, interface is capable of ipv6 operation without a global address. In this case, an eui-64 based link-local address is used. ')
agentIpv6InterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpUnreachables.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpUnreachables.setDescription('If this object is enable, it indicates that ICMPv6 unreachables can be sent on this interface.')
agentIpv6RouterAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3), )
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementTable.setDescription('There is no global administrative flag for router advertisement. The global routing flag (agentIpv6RoutingMode) will be used for this purpose. If routing is disabled, router advertisement is disabled as well.')
agentIpv6RouterAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6RouterAdvertisementIfIndex"))
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementEntry.setDescription('')
agentIpv6RouterAdvertisementIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementIfIndex.setDescription('Interface Number to configure Router Advertisement on.')
agentIpv6RouterAdvertisementSuppressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementSuppressMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementSuppressMode.setDescription('Enable or disable router advertisement suppression on the interface.')
agentIpv6RouterAdvertisementMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMaxAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMaxAdvertisementInterval.setDescription('Maximum time allowed between sending router advertisements from the interface.')
agentIpv6RouterAdvertisementAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 65520)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementAdvertisementLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementAdvertisementLifetime.setDescription('Value of lifetime field of router advertisement sent from the interface. This value must be greater than or equal to agentIpv6RouterAdvertisementMaxAdvertisementInterval.')
agentIpv6RouterAdvertisementNbrSolicitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementNbrSolicitInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementNbrSolicitInterval.setDescription('Value of retrans time field of router advertisement sent from the interface. A value of 0 means this router does not specifiy the interval.')
agentIpv6RouterAdvertisementReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementReachableTime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementReachableTime.setDescription('Value of reachable time field of router advertisement sent from the interface. A value of 0 means this router does not specifiy the interval.')
agentIpv6RouterAdvertisementManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementManagedFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementManagedFlag.setDescription('Value of managed config field of router advertisement sent from the interface.')
agentIpv6RouterAdvertisementOtherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementOtherFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementOtherFlag.setDescription('Value of other config field of router advertisement sent from the interface.')
agentIpv6AddrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4), )
if mibBuilder.loadTexts: agentIpv6AddrPrefixTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixTable.setDescription('The list of IPv6 address prefixes of IPv6 interfaces.')
agentIpv6AddrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6InterfaceIfIndex"), (0, "FASTPATH-ROUTING6-MIB", "agentIpv6AddrPrefix"), (0, "FASTPATH-ROUTING6-MIB", "agentIpv6AddrPrefixLength"))
if mibBuilder.loadTexts: agentIpv6AddrPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix.')
agentIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefix.setDescription('The prefix associated with the this interface.')
agentIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: agentIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixLength.setDescription('The length of the prefix (in bits).')
agentIpv6AddrPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixOnLinkFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixOnLinkFlag.setDescription("This object has the value 'true(1)', if this prefix can be used for on-link determination and the value 'false(2)' otherwise.")
agentIpv6AddrPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAutonomousFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAutonomousFlag.setDescription('Autonomous address configuration flag. When true(1), indicates that this prefix can be used for autonomous address configuration (i.e. can be used to form a local interface address). If false(2), it is not used to autoconfigure a local interface address.')
agentIpv6AddrPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvPreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvPreferredLifetime.setDescription('It is the length of time in seconds that this prefix will remain preferred, i.e. time until deprecation. A value of 4,294,967,295 represents infinity. The address generated from a deprecated prefix should no longer be used as a source address in new communications, but packets received on such an interface are processed as expected.')
agentIpv6AddrPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvValidLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvValidLifetime.setDescription('It is the length of time in seconds that this prefix will remain valid, i.e. time until invalidation. A value of 4,294,967,295 represents infinity. The address generated from an invalidated prefix should not appear as the destination or source address of a packet.')
agentIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5), )
if mibBuilder.loadTexts: agentIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrTable.setDescription("The table of addressing information relevant to this node's interface addresses.")
agentIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6InterfaceIfIndex"), (0, "FASTPATH-ROUTING6-MIB", "agentIpv6AddrAddress"))
if mibBuilder.loadTexts: agentIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrEntry.setDescription("The addressing information for one of this node's interface addresses.")
agentIpv6AddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6AddrAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrAddress.setDescription("The IPv6 address to which this entry's addressing information pertains.")
agentIpv6AddrPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrPfxLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPfxLength.setDescription('The length of the prefix (in bits) associated with the IPv6 address of this entry.')
agentIpv6AddrEui64Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrEui64Flag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrEui64Flag.setDescription("This object has the value 'true(1)', if this address uses and eui-64 generated interface identifier and the value 'false(2)' otherwise.")
agentIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrStatus.setDescription('Creates a new entry in the Address table. Allowed values are: createAndGo(4) - Creates an entry in this table, associating the address with a given interface. The agentIpv6NetMask object must be set during creation. destroy(6) - Removes the associated address from the interface.')
agentIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6), )
if mibBuilder.loadTexts: agentIpv6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteTable.setDescription('IPv6 Static Routing table. This table contains an entry for each valid IPv6 static unicast route that can be used for packet forwarding determination.')
agentIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6StaticRouteDest"), (0, "FASTPATH-ROUTING6-MIB", "agentIpv6StaticRoutePfxLength"), (0, "FASTPATH-ROUTING6-MIB", "agentIpv6StaticRouteIfIndex"), (0, "FASTPATH-ROUTING6-MIB", "agentIpv6StaticRouteNextHop"))
if mibBuilder.loadTexts: agentIpv6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteEntry.setDescription('A routing entry.')
agentIpv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentIpv6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteDest.setDescription('The destination IPv6 address of this route. This object may not take a Multicast address value.')
agentIpv6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: agentIpv6StaticRoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutePfxLength.setDescription('Indicates the prefix length of the destination address.')
agentIpv6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 3), Ipv6IfIndexOrZero())
if mibBuilder.loadTexts: agentIpv6StaticRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ipv6IfIndex. For routes with global address next hop this value can be zero.')
agentIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 4), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteNextHop.setDescription('The address of the next system en route. ')
agentIpv6StaticRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6StaticRoutePreference.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutePreference.setDescription('The routing preference metric for this route. A lower value is more preferred.')
agentIpv6StaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6StaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteStatus.setDescription('Creates a new entry in the Address table. Allowed values are: createAndGo(4) - Creates an entry in this table. destroy(6) - Removes the associated route from the interface.')
agentIpv6ServicePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7))
agentIpv6ServicePortPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1), )
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixTable.setDescription('IPv6 Service Port Prefix Table. This table contains an entry for each valid IPv6 prefix configured on the Service Port.')
agentIpv6ServicePortPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6ServicePortPrefixIndex"))
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixEntry.setDescription('An IPv6 Service Port Prefix entry.')
agentIpv6ServicePortPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixIndex.setDescription('The index of the Ipv6 Prefix Address configured on the Service Port. Removal of a row will cause index values to be reassigned.')
agentIpv6ServicePortPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortPrefix.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
agentIpv6ServicePortPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixLength.setDescription('The length of the IPv6 Prefix Address.')
agentIpv6ServicePortDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2), )
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterTable.setDescription('IPv6 Service Port Default Router Table. This table contains an entry for each valid IPv6 Default Router configured on the Service Port.')
agentIpv6ServicePortDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6ServicePortDefaultRouterIndex"))
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterEntry.setDescription('An IPv6 Service Port Default Router entry.')
agentIpv6ServicePortDefaultRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterIndex.setDescription('The index of the IPv6 Default Router Address configured on the Service Port. Removal of a row will cause index values to be reassigned.')
agentIpv6ServicePortDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouter.setDescription('The Address of the IPv6 Default Router configured on the Service Port.')
agentIpv6ServicePortNbrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3), )
if mibBuilder.loadTexts: agentIpv6ServicePortNbrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrTable.setDescription('IPv6 Service Port Neighbor Table. This table contains an entry for each valid IPv6 Neighbor configured on the Service Port.')
agentIpv6ServicePortNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1), ).setIndexNames((0, "FASTPATH-ROUTING6-MIB", "agentIpv6ServicePortNbrAddr"))
if mibBuilder.loadTexts: agentIpv6ServicePortNbrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrEntry.setDescription('An IPv6 Service Port Neighbor entry.')
agentIpv6ServicePortNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6ServicePortNbrAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrAddr.setDescription('The Ipv6 Address of a neighbor switch visible to the Service Port.')
agentIpv6ServicePortNbrPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrPhysAddr.setDescription('The MacAddress of the neighboring switch.')
agentIpv6ServicePortNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrState.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrState.setDescription('The state of the neighboring switch: reachable(1) - The neighbor is reachable by this switch. stale(2) - Information about the neighbor is scheduled for deletion. delay(3) - No information has been received from neighbor during delay period. probe(4) - Switch is attempting to probe for this neighbor. unknown(6) - Unknown status.')
agentIpv6ServicePortNbrUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrUpdated.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrUpdated.setDescription('The last sysUpTime that this neighbor has been updated.')
agentIpv6ServicePortNbrIsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrIsRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrIsRouter.setDescription('Returns true(1) if the neighbor machine is a router, false(2) otherwise.')
agentIpv6IcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 8))
agentIpv6IcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitInterval.setDescription('Specifies the time interval between tokens being placed in the bucket for ICMP Ratelimit.')
agentIpv6IcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitBurstSize.setDescription('Specifies the number of tokens to be placed after timeout.')
mibBuilder.exportSymbols("FASTPATH-ROUTING6-MIB", agentIpv6AddrPrefixEntry=agentIpv6AddrPrefixEntry, agentIpv6StaticRouteTable=agentIpv6StaticRouteTable, PYSNMP_MODULE_ID=fastPathRoutingIpv6, agentIpv6RoutingMode=agentIpv6RoutingMode, agentIpv6StaticRouteNextHop=agentIpv6StaticRouteNextHop, agentIpv6AddrPrefixAdvValidLifetime=agentIpv6AddrPrefixAdvValidLifetime, agentIpv6Group=agentIpv6Group, agentIpv6ServicePortNbrPhysAddr=agentIpv6ServicePortNbrPhysAddr, agentIpv6IcmpControlGroup=agentIpv6IcmpControlGroup, agentIpv6StaticRouteIfIndex=agentIpv6StaticRouteIfIndex, agentIpv6ServicePortNbrAddr=agentIpv6ServicePortNbrAddr, agentIpv6ServicePortNbrUpdated=agentIpv6ServicePortNbrUpdated, agentIpv6AddrEntry=agentIpv6AddrEntry, agentIpv6RouterAdvertisementIfIndex=agentIpv6RouterAdvertisementIfIndex, agentIpv6StaticRouteStatus=agentIpv6StaticRouteStatus, agentIpv6ServicePortPrefixEntry=agentIpv6ServicePortPrefixEntry, agentIpv6ServicePortDefaultRouterIndex=agentIpv6ServicePortDefaultRouterIndex, agentIpv6AddrStatus=agentIpv6AddrStatus, agentIpv6InterfaceDadTransmits=agentIpv6InterfaceDadTransmits, agentIpv6InterfaceIcmpUnreachables=agentIpv6InterfaceIcmpUnreachables, agentIpv6AddrPfxLength=agentIpv6AddrPfxLength, agentIpv6ServicePortGroup=agentIpv6ServicePortGroup, agentIpv6StaticRouteDest=agentIpv6StaticRouteDest, agentIpv6ServicePortNbrIsRouter=agentIpv6ServicePortNbrIsRouter, fastPathRoutingIpv6=fastPathRoutingIpv6, agentIpv6RouterAdvertisementOtherFlag=agentIpv6RouterAdvertisementOtherFlag, agentIpv6InterfaceEntry=agentIpv6InterfaceEntry, agentIpv6AddrPrefixOnLinkFlag=agentIpv6AddrPrefixOnLinkFlag, agentIpv6StaticRoutePreference=agentIpv6StaticRoutePreference, agentIpv6InterfaceMtuValue=agentIpv6InterfaceMtuValue, agentIpv6StaticRouteEntry=agentIpv6StaticRouteEntry, agentIpv6IcmpRateLimitBurstSize=agentIpv6IcmpRateLimitBurstSize, agentIpv6AddrPrefix=agentIpv6AddrPrefix, agentIpv6AddrPrefixTable=agentIpv6AddrPrefixTable, agentIpv6RouterAdvertisementReachableTime=agentIpv6RouterAdvertisementReachableTime, agentIpv6ServicePortNbrState=agentIpv6ServicePortNbrState, agentIpv6ServicePortPrefixIndex=agentIpv6ServicePortPrefixIndex, agentIpv6ServicePortDefaultRouterEntry=agentIpv6ServicePortDefaultRouterEntry, agentIpv6ServicePortPrefixTable=agentIpv6ServicePortPrefixTable, agentIpv6ServicePortPrefixLength=agentIpv6ServicePortPrefixLength, agentIpv6RouterAdvertisementEntry=agentIpv6RouterAdvertisementEntry, agentIpv6AddrPrefixAdvPreferredLifetime=agentIpv6AddrPrefixAdvPreferredLifetime, agentIpv6InterfaceIfIndex=agentIpv6InterfaceIfIndex, agentIpv6InterfaceLinkLocalOnly=agentIpv6InterfaceLinkLocalOnly, agentIpv6AddrPrefixLength=agentIpv6AddrPrefixLength, agentIpv6AddrTable=agentIpv6AddrTable, agentIpv6StaticRoutePfxLength=agentIpv6StaticRoutePfxLength, agentIpv6ServicePortPrefix=agentIpv6ServicePortPrefix, agentIpv6RouterAdvertisementNbrSolicitInterval=agentIpv6RouterAdvertisementNbrSolicitInterval, agentIpv6InterfaceTable=agentIpv6InterfaceTable, agentIpv6AddrAddress=agentIpv6AddrAddress, agentIpv6ServicePortDefaultRouterTable=agentIpv6ServicePortDefaultRouterTable, agentIpv6ServicePortNbrTable=agentIpv6ServicePortNbrTable, agentIpv6AddrEui64Flag=agentIpv6AddrEui64Flag, agentIpv6RouterAdvertisementSuppressMode=agentIpv6RouterAdvertisementSuppressMode, agentIpv6RouterAdvertisementManagedFlag=agentIpv6RouterAdvertisementManagedFlag, agentIpv6ServicePortNbrEntry=agentIpv6ServicePortNbrEntry, agentIpv6RouterAdvertisementTable=agentIpv6RouterAdvertisementTable, agentIpv6IcmpRateLimitInterval=agentIpv6IcmpRateLimitInterval, agentIpv6ServicePortDefaultRouter=agentIpv6ServicePortDefaultRouter, agentIpv6AddrPrefixAutonomousFlag=agentIpv6AddrPrefixAutonomousFlag, agentIpv6RouterAdvertisementMaxAdvertisementInterval=agentIpv6RouterAdvertisementMaxAdvertisementInterval, agentIpv6RouterAdvertisementAdvertisementLifetime=agentIpv6RouterAdvertisementAdvertisementLifetime)
