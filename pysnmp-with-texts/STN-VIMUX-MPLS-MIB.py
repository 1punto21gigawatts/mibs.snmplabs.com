#
# PySNMP MIB module STN-VIMUX-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-VIMUX-MPLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, Counter64, ObjectIdentity, Counter32, Gauge32, iso, NotificationType, Integer32, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Counter64", "ObjectIdentity", "Counter32", "Gauge32", "iso", "NotificationType", "Integer32", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnRouterVimuxMpls, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterVimuxMpls")
stnVimuxMpls = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1))
if mibBuilder.loadTexts: stnVimuxMpls.setLastUpdated('0004060000Z')
if mibBuilder.loadTexts: stnVimuxMpls.setOrganization('Spring Tide Networks')
if mibBuilder.loadTexts: stnVimuxMpls.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Suite 200 Maynard, MA 01754 USA Tel: +1 978 298 2000 Email: custserv@springtidenet.com ')
if mibBuilder.loadTexts: stnVimuxMpls.setDescription('This MIB module describes managed objects of Spring Tide Networks VIMUX MPLS Interface.')
stnVimuxMplsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1))
stnVimuxMplsL2Table = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1), )
if mibBuilder.loadTexts: stnVimuxMplsL2Table.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2Table.setDescription('A list of VIMUX MPLS L2 entries.')
stnVimuxMplsL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1), ).setIndexNames((0, "STN-VIMUX-MPLS-MIB", "stnVimuxMplsL2IfIndex"))
if mibBuilder.loadTexts: stnVimuxMplsL2Entry.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2Entry.setDescription('Entry contains information about a particular VIMUX MPLS L2.')
stnVimuxMplsL2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2IfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2IfIndex.setDescription('The ifIndex of the VIMUX MPLS Layer 2 Interface.')
stnVimuxMplsL2ViId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2ViId.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2ViId.setDescription('The instance of the configuration record corresponding to this VIMUX MPLS.')
stnVimuxMplsL2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2Name.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2Name.setDescription('The name configured for this VIMUX MPLS.')
stnVimuxMplsL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2State.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2State.setDescription('The current operational state of the VIMUX MPLS.')
stnVimuxMplsL2RegisteredLowerLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2RegisteredLowerLinks.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2RegisteredLowerLinks.setDescription('The current number of VCLinks registered with the VIMUX MPLS.')
stnVimuxMplsL2ActiveLowerLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2ActiveLowerLinks.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2ActiveLowerLinks.setDescription('The current number of VCLinks actively carrying traffic for this VIMUX MPLS.')
stnVimuxMplsL2InvalidInLabelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2InvalidInLabelPackets.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2InvalidInLabelPackets.setDescription('The number of packets dropped because of invalid incoming labels.')
stnVimuxMplsL2InvalidOutLabelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsL2InvalidOutLabelPackets.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsL2InvalidOutLabelPackets.setDescription('The number of packets dropped because of invalid outgoing labels.')
stnVimuxMplsLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2), )
if mibBuilder.loadTexts: stnVimuxMplsLinkTable.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkTable.setDescription('A list of the links configured for a VIMUX MPLS.')
stnVimuxMplsLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2, 1), ).setIndexNames((0, "STN-VIMUX-MPLS-MIB", "stnVimuxMplsLinkVimuxMplsIfIndex"), (0, "STN-VIMUX-MPLS-MIB", "stnVimuxMplsLinkIfIndex"))
if mibBuilder.loadTexts: stnVimuxMplsLinkEntry.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkEntry.setDescription('Entry contains information about a particular VIMUX MPLS L2.')
stnVimuxMplsLinkVimuxMplsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsLinkVimuxMplsIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkVimuxMplsIfIndex.setDescription('The IfIndex of the VIMUX MPLS for which this VcLink is configured.')
stnVimuxMplsLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkIfIndex.setDescription('The IfIndex of this VcLink.')
stnVimuxMplsLinkPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsLinkPhysIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkPhysIfIndex.setDescription('The physical interface index represents the port and line card used by this link. It is calculated based on the slot and port of the module.')
stnVimuxMplsLinkVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsLinkVpi.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkVpi.setDescription('The VPI value of the PVC represented by this link.')
stnVimuxMplsLinkVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsLinkVci.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsLinkVci.setDescription('The VCI value of the PVC represented by this link.')
stnVimuxMplsIncomingLabelTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3), )
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelTable.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelTable.setDescription('A list of the incoming labels defined for this VIMUX MPLS.')
stnVimuxMplsIncomingLabel = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1), ).setIndexNames((0, "STN-VIMUX-MPLS-MIB", "stnVimuxMplsIncomingLabelValue"))
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabel.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabel.setDescription('Entry contains information about a particular incoming label defined for this VIMUX MPLS.')
stnVimuxMplsIncomingLabelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelIfIndex.setDescription('The IfIndex of the VIMUX MPLS which owns the incoming label.')
stnVimuxMplsIncomingLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelValue.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelValue.setDescription('The value of the incoming label.')
stnVimuxMplsIncomingLabelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pop", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelAction.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelAction.setDescription('The action to perform on this incoming label.')
stnVimuxMplsIncomingLabelToPush1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush1.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush1.setDescription('The value of the last label pushed.')
stnVimuxMplsIncomingLabelToPush2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush2.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush2.setDescription('The value of the second-to-last label pushed.')
stnVimuxMplsIncomingLabelToPush3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush3.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush3.setDescription('The value of the third-to-last label pushed.')
stnVimuxMplsIncomingLabelToPush4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush4.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelToPush4.setDescription('The value of the fourth-to-last label pushed.')
stnVimuxMplsIncomingLabelNextVimuxMplsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelNextVimuxMplsIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelNextVimuxMplsIfIndex.setDescription('The IfIndex of the VIMUX MPLS to pass the packets to.')
stnVimuxMplsIncomingLabelTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelTtl.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelTtl.setDescription('The TTL value of this label.')
stnVimuxMplsIncomingLabelReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelReceivedPackets.setDescription('The number of packets received with this label.')
stnVimuxMplsIncomingLabelDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsIncomingLabelDroppedPackets.setDescription('The number of packets dropped with this label.')
stnVimuxMplsOutgoingLabelTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4), )
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelTable.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelTable.setDescription('A list of the outgoing labels defined for this VIMUX MPLS.')
stnVimuxMplsOutgoingLabel = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1), ).setIndexNames((0, "STN-VIMUX-MPLS-MIB", "stnVimuxMplsOutgoingLabelValue"))
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabel.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabel.setDescription('Entry contains information about a particular outgoing label defined for this VIMUX MPLS.')
stnVimuxMplsOutgoingLabelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelIfIndex.setDescription('The IfIndex of the VIMUX MPLS which owns the outgoing label.')
stnVimuxMplsOutgoingLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelValue.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelValue.setDescription('The value of the outgoing label.')
stnVimuxMplsOutgoingLabelOutgoingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelOutgoingIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelOutgoingIfIndex.setDescription('The IfIndex of the L2 interface to pass the packets to.')
stnVimuxMplsOutgoingLabelNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelNexthop.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelNexthop.setDescription('The next hop IP address packets will be sent to, if Ethernet I/F.')
stnVimuxMplsOutgoingLabelSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelSentPackets.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelSentPackets.setDescription('The number of packets sent with this label.')
stnVimuxMplsOutgoingLabelDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: stnVimuxMplsOutgoingLabelDroppedPackets.setDescription('The number of packets dropped with this label.')
mibBuilder.exportSymbols("STN-VIMUX-MPLS-MIB", stnVimuxMplsIncomingLabelTable=stnVimuxMplsIncomingLabelTable, stnVimuxMplsL2RegisteredLowerLinks=stnVimuxMplsL2RegisteredLowerLinks, stnVimuxMplsL2InvalidOutLabelPackets=stnVimuxMplsL2InvalidOutLabelPackets, stnVimuxMplsLinkVimuxMplsIfIndex=stnVimuxMplsLinkVimuxMplsIfIndex, stnVimuxMplsIncomingLabel=stnVimuxMplsIncomingLabel, stnVimuxMplsLinkIfIndex=stnVimuxMplsLinkIfIndex, stnVimuxMplsIncomingLabelDroppedPackets=stnVimuxMplsIncomingLabelDroppedPackets, stnVimuxMplsL2State=stnVimuxMplsL2State, stnVimuxMplsLinkTable=stnVimuxMplsLinkTable, stnVimuxMplsLinkVpi=stnVimuxMplsLinkVpi, stnVimuxMplsOutgoingLabelSentPackets=stnVimuxMplsOutgoingLabelSentPackets, stnVimuxMplsIncomingLabelAction=stnVimuxMplsIncomingLabelAction, stnVimuxMplsIncomingLabelValue=stnVimuxMplsIncomingLabelValue, stnVimuxMplsObjects=stnVimuxMplsObjects, stnVimuxMplsL2Table=stnVimuxMplsL2Table, stnVimuxMplsIncomingLabelReceivedPackets=stnVimuxMplsIncomingLabelReceivedPackets, stnVimuxMplsL2Name=stnVimuxMplsL2Name, stnVimuxMplsOutgoingLabelNexthop=stnVimuxMplsOutgoingLabelNexthop, stnVimuxMplsIncomingLabelToPush3=stnVimuxMplsIncomingLabelToPush3, stnVimuxMplsL2InvalidInLabelPackets=stnVimuxMplsL2InvalidInLabelPackets, stnVimuxMplsIncomingLabelNextVimuxMplsIfIndex=stnVimuxMplsIncomingLabelNextVimuxMplsIfIndex, stnVimuxMplsLinkVci=stnVimuxMplsLinkVci, stnVimuxMplsIncomingLabelIfIndex=stnVimuxMplsIncomingLabelIfIndex, stnVimuxMplsIncomingLabelToPush4=stnVimuxMplsIncomingLabelToPush4, stnVimuxMplsLinkEntry=stnVimuxMplsLinkEntry, stnVimuxMpls=stnVimuxMpls, stnVimuxMplsIncomingLabelToPush1=stnVimuxMplsIncomingLabelToPush1, stnVimuxMplsLinkPhysIfIndex=stnVimuxMplsLinkPhysIfIndex, stnVimuxMplsOutgoingLabelOutgoingIfIndex=stnVimuxMplsOutgoingLabelOutgoingIfIndex, stnVimuxMplsIncomingLabelTtl=stnVimuxMplsIncomingLabelTtl, stnVimuxMplsOutgoingLabel=stnVimuxMplsOutgoingLabel, PYSNMP_MODULE_ID=stnVimuxMpls, stnVimuxMplsOutgoingLabelDroppedPackets=stnVimuxMplsOutgoingLabelDroppedPackets, stnVimuxMplsIncomingLabelToPush2=stnVimuxMplsIncomingLabelToPush2, stnVimuxMplsOutgoingLabelValue=stnVimuxMplsOutgoingLabelValue, stnVimuxMplsL2ViId=stnVimuxMplsL2ViId, stnVimuxMplsOutgoingLabelIfIndex=stnVimuxMplsOutgoingLabelIfIndex, stnVimuxMplsOutgoingLabelTable=stnVimuxMplsOutgoingLabelTable, stnVimuxMplsL2ActiveLowerLinks=stnVimuxMplsL2ActiveLowerLinks, stnVimuxMplsL2Entry=stnVimuxMplsL2Entry, stnVimuxMplsL2IfIndex=stnVimuxMplsL2IfIndex)
