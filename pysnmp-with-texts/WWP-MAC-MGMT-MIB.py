#
# PySNMP MIB module WWP-MAC-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-MAC-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, NotificationType, ModuleIdentity, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Gauge32, iso, Counter64, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "NotificationType", "ModuleIdentity", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Gauge32", "iso", "Counter64", "Unsigned32", "MibIdentifier")
RowStatus, DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpMacMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 28))
wwpMacMgmtMIB.setRevisions(('2005-11-22 19:00', '2003-04-16 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpMacMgmtMIB.setRevisionsDescriptions(('This MIB specifies the managed objects for Managing the Mac addresses to the WWP products. This MIB is an extension of the BRIDGE MIB.', 'As implementation of SAC is different for few of the products, so added the new Sac Table.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpMacMgmtMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpMacMgmtMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpMacMgmtMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpMacMgmtMIB.setDescription('Increased maximum value for SAC learn counts.')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpMacMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1))
wwpMacMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1))
wwpMacMgmtMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 2))
wwpMacMgmtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 2, 0))
wwpMacMgmtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 3))
wwpMacMgmtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 3, 1))
wwpMacMgmtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 28, 3, 2))
wwpMacMgmtMacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1), )
if mibBuilder.loadTexts: wwpMacMgmtMacTable.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacTable.setDescription('The (conceptual) table listing the mac addresses indexed by the Vlan, port and the macaddr.')
wwpMacMgmtMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1), ).setIndexNames((0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtVlanID"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtPortId"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtMacAddr"))
if mibBuilder.loadTexts: wwpMacMgmtMacEntry.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacEntry.setDescription('An entry (conceptual row) in the wwpMacMgmtMacTable.')
wwpMacMgmtVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtVlanID.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtVlanID.setDescription('The vlan id associated with wwpMacMgmtMacAddr and the wwpMacMgmtPortId.')
wwpMacMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtPortId.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPortId.setDescription("Port ID for the instance. Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpMacMgmtMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacAddr.setDescription('A unicast MAC address which has either been learned by the port or has been statically configured.')
wwpMacMgmtMacAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMacMgmtMacAddrMode.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacAddrMode.setDescription("The Mac Addr can be either dynamic or static. For the Static entries the aging time specified by dot1dTpAgingTime does not apply so they stay forever in the Mac Table unless mac table is flushed. Once the wwpMacMgmtStatus is set to 'active', the wwpMacMgmtMacAddrMode can't be modified.")
wwpMacMgmtMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtMacStatus.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacStatus.setDescription('The Mac Address will be disabled or enabled depending upon the protective mode and its Mac Address limit. The added static Mac Address will always be enabled.')
wwpMacMgmtMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpMacMgmtMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. The RowStatus can't be set to active unless wwpMacMgmtMacAddrMode has a valid value.")
wwpMacMgmtMacReset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMacMgmtMacReset.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtMacReset.setDescription("To reset the Mac Table for all the ports. A read on this object will always return the 'none'.")
wwpMacMgmtPMTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3), )
if mibBuilder.loadTexts: wwpMacMgmtPMTable.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMTable.setDescription('The (conceptual) table listing the protected mode attributes.')
wwpMacMgmtPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1), ).setIndexNames((0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtPMVlanID"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtPMPortId"))
if mibBuilder.loadTexts: wwpMacMgmtPMEntry.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMEntry.setDescription('An entry (conceptual row) in the wwpMacMgmtPMTable.')
wwpMacMgmtPMVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtPMVlanID.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMVlanID.setDescription('The vlan id associated with wwpMacMgmtMacAddr and the wwpMacMgmtPortId.')
wwpMacMgmtPMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtPMPortId.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMPortId.setDescription("Port ID for the instance. Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpMacMgmtPMLearnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMacMgmtPMLearnLimit.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMLearnLimit.setDescription('The maximum number of Mac Addresses which will be learned by this Vlan/port pair. This limits applies only for the dynamic addresses.')
wwpMacMgmtPMLearnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtPMLearnCount.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMLearnCount.setDescription('The number of Mac Addresses learned by this Vlan/Port pair. If the wwpMacMgmtMacStatus is enabled then the max value for this object should be equal to wwpMacMgmtPMLearnLimit.')
wwpMacMgmtPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMacMgmtPMStatus.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMStatus.setDescription('To enable the Protection Mode, wwpMacMgmtPMStatus should be set to enable.')
wwpMacMgmtPMMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("flush", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMacMgmtPMMacFlush.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtPMMacFlush.setDescription("Setting this object to 'flush' causes all the dynamic MAC entries for the port/vlan specified by wwpMacMgmtPMPortId/wwpMacMgmtPMVlanID to be deleted. An SNMP read on this object returns 'none' once the flush operation is completed.")
wwpMacMgmtCacheMac = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMacMgmtCacheMac.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCacheMac.setDescription("Specifies whether or not the snmp Agent should cache the Macs in the wwpMacMgmtCacheTable or not. Once a static Mac is added then this object should be set to 'True' again to update the cache.If 'mac reset' or 'mac flush' is used and then the Management Station should set this object to true again to update the Mac Cache Table.")
wwpMacMgmtCacheMacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5), )
if mibBuilder.loadTexts: wwpMacMgmtCacheMacTable.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCacheMacTable.setDescription('The (conceptual) table listing the mac addresses indexed by the Vlan, port and the Mac Index.')
wwpMacMgmtCacheMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1), ).setIndexNames((0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtCVlanID"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtCPortId"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtCMacIndex"))
if mibBuilder.loadTexts: wwpMacMgmtCacheMacEntry.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCacheMacEntry.setDescription('An entry (conceptual row) in the wwpMacMgmtCacheMacTable.')
wwpMacMgmtCVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCVlanID.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCVlanID.setDescription('The vlan id associated with wwpMacMgmtCMacIndex and the wwpMacMgmtCPortId.')
wwpMacMgmtCPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCPortId.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCPortId.setDescription("Port ID for the instance. Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpMacMgmtCMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCMacIndex.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCMacIndex.setDescription('Index for this Mac Address.')
wwpMacMgmtCMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCMacAddr.setDescription('A unicast MAC address which has either been learned by the port or has been statically configured.')
wwpMacMgmtCMacAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCMacAddrMode.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCMacAddrMode.setDescription("The Mac Addr can be either dynamic or static. For the Static entries the aging time specified by dot1dTpAgingTime does not apply so they stay forever in the Mac Table unless mac table is flushed. Once the wwpMacMgmtStatus is set to 'active', the wwpMacMgmtMacAddrMode can't be modified.")
wwpMacMgmtCMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCMacStatus.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCMacStatus.setDescription('The Mac Address will be disabled or enabled depending upon the protective mode and its Mac Address limit. The added static Mac Address will always be enabled.')
wwpMacMgmtCacheMacCountTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 6), )
if mibBuilder.loadTexts: wwpMacMgmtCacheMacCountTable.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCacheMacCountTable.setDescription('The (conceptual) table listing the mac addresses indexed by the Vlan and the port.')
wwpMacMgmtCacheMacCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 6, 1), ).setIndexNames((0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtCVlanID"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtCPortId"))
if mibBuilder.loadTexts: wwpMacMgmtCacheMacCountEntry.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCacheMacCountEntry.setDescription('An entry (conceptual row) in the wwpMacMgmtCacheMacTable.')
wwpMacMgmtCacheMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtCacheMacCount.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtCacheMacCount.setDescription('Count of Mac Addresses associated with this Cache Mac Entry. The count will be shown only for the Vlan/port combination which exists on the box.')
wwpMacMgmtSacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7), )
if mibBuilder.loadTexts: wwpMacMgmtSacTable.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacTable.setDescription('The (conceptual) table listing the security access control attributes.')
wwpMacMgmtSacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1), ).setIndexNames((0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtSacVlanID"), (0, "WWP-MAC-MGMT-MIB", "wwpMacMgmtSacPortId"))
if mibBuilder.loadTexts: wwpMacMgmtSacEntry.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacEntry.setDescription('An entry (conceptual row) in the wwpMacMgmtSacTable.')
wwpMacMgmtSacVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtSacVlanID.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacVlanID.setDescription('The VLAN id for this SAC entry.')
wwpMacMgmtSacPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtSacPortId.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacPortId.setDescription("Port ID for the instance. Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpMacMgmtSacLearnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpMacMgmtSacLearnCount.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacLearnCount.setDescription('The number of Mac Addresses learned by this Vlan/Port pair. If the wwpMacMgmtMacStatus is enabled then the max value for this object should be equal to wwpMacMgmtSacMaxLearn.')
wwpMacMgmtSacMaxLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpMacMgmtSacMaxLearn.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacMaxLearn.setDescription('The maximum number of Mac Addresses which will be learned by this Vlan/port pair. This limits applies only for the dynamic addresses.')
wwpMacMgmtSacLearnDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpMacMgmtSacLearnDisabled.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacLearnDisabled.setDescription("Setting this object to 'true' will cause the learning for the port/vlan pair to be shut off.")
wwpMacMgmtSacMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("flush", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpMacMgmtSacMacFlush.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacMacFlush.setDescription("Setting this object to 'flush' causes all the dynamic MAC entries for the port/vlan specified by wwpMacMgmtSacPortId/wwpMacMgmtSacVlanID to be deleted. An SNMP read on this object returns 'none' once the flush operation is completed.")
wwpMacMgmtSacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 28, 1, 1, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpMacMgmtSacStatus.setStatus('current')
if mibBuilder.loadTexts: wwpMacMgmtSacStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. The SAC entry cab be disabled by setting this object to 'notInService'")
mibBuilder.exportSymbols("WWP-MAC-MGMT-MIB", wwpMacMgmtPMVlanID=wwpMacMgmtPMVlanID, wwpMacMgmtPMEntry=wwpMacMgmtPMEntry, wwpMacMgmtSacStatus=wwpMacMgmtSacStatus, wwpMacMgmtPMLearnLimit=wwpMacMgmtPMLearnLimit, wwpMacMgmtSacMaxLearn=wwpMacMgmtSacMaxLearn, wwpMacMgmtSacMacFlush=wwpMacMgmtSacMacFlush, wwpMacMgmtMacAddr=wwpMacMgmtMacAddr, wwpMacMgmtCMacAddr=wwpMacMgmtCMacAddr, wwpMacMgmtCMacStatus=wwpMacMgmtCMacStatus, wwpMacMgmtSacPortId=wwpMacMgmtSacPortId, wwpMacMgmtMacRowStatus=wwpMacMgmtMacRowStatus, wwpMacMgmtCacheMac=wwpMacMgmtCacheMac, wwpMacMgmtMIBConformance=wwpMacMgmtMIBConformance, wwpMacMgmtCacheMacTable=wwpMacMgmtCacheMacTable, wwpMacMgmtSacTable=wwpMacMgmtSacTable, wwpMacMgmtMIB=wwpMacMgmtMIB, wwpMacMgmtCacheMacCount=wwpMacMgmtCacheMacCount, wwpMacMgmt=wwpMacMgmt, wwpMacMgmtMIBCompliances=wwpMacMgmtMIBCompliances, wwpMacMgmtMacStatus=wwpMacMgmtMacStatus, wwpMacMgmtCacheMacEntry=wwpMacMgmtCacheMacEntry, wwpMacMgmtCacheMacCountEntry=wwpMacMgmtCacheMacCountEntry, wwpMacMgmtMIBGroups=wwpMacMgmtMIBGroups, wwpMacMgmtMacAddrMode=wwpMacMgmtMacAddrMode, wwpMacMgmtPMMacFlush=wwpMacMgmtPMMacFlush, VlanId=VlanId, wwpMacMgmtMIBNotificationPrefix=wwpMacMgmtMIBNotificationPrefix, wwpMacMgmtMacTable=wwpMacMgmtMacTable, wwpMacMgmtCMacIndex=wwpMacMgmtCMacIndex, wwpMacMgmtCPortId=wwpMacMgmtCPortId, PYSNMP_MODULE_ID=wwpMacMgmtMIB, wwpMacMgmtMIBNotifications=wwpMacMgmtMIBNotifications, wwpMacMgmtMacReset=wwpMacMgmtMacReset, wwpMacMgmtMIBObjects=wwpMacMgmtMIBObjects, wwpMacMgmtSacVlanID=wwpMacMgmtSacVlanID, wwpMacMgmtPMLearnCount=wwpMacMgmtPMLearnCount, wwpMacMgmtCMacAddrMode=wwpMacMgmtCMacAddrMode, wwpMacMgmtPortId=wwpMacMgmtPortId, wwpMacMgmtVlanID=wwpMacMgmtVlanID, wwpMacMgmtPMPortId=wwpMacMgmtPMPortId, wwpMacMgmtMacEntry=wwpMacMgmtMacEntry, wwpMacMgmtPMStatus=wwpMacMgmtPMStatus, wwpMacMgmtSacLearnDisabled=wwpMacMgmtSacLearnDisabled, wwpMacMgmtCacheMacCountTable=wwpMacMgmtCacheMacCountTable, wwpMacMgmtSacLearnCount=wwpMacMgmtSacLearnCount, wwpMacMgmtCVlanID=wwpMacMgmtCVlanID, wwpMacMgmtPMTable=wwpMacMgmtPMTable, wwpMacMgmtSacEntry=wwpMacMgmtSacEntry)
