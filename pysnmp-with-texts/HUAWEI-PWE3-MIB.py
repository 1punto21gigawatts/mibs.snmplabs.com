#
# PySNMP MIB module HUAWEI-PWE3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PWE3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
HWL2VpnVcEncapsType, HWEnableValue, HWL2VpnStateChangeReason = mibBuilder.importSymbols("HUAWEI-VPLS-EXT-MIB", "HWL2VpnVcEncapsType", "HWEnableValue", "HWL2VpnStateChangeReason")
InterfaceIndexOrZero, ifName = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifName")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
iso, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Counter64, Bits, TimeTicks, Gauge32, Bits, ObjectIdentity, MibIdentifier, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Counter64", "Bits", "TimeTicks", "Gauge32", "Bits", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Counter32")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
hwL2VpnPwe3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4))
if mibBuilder.loadTexts: hwL2VpnPwe3.setLastUpdated('200704120900Z')
if mibBuilder.loadTexts: hwL2VpnPwe3.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwL2VpnPwe3.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwL2VpnPwe3.setDescription('The HUAWEI-PWE3-MIB contains objects to manage PWE3.')
class HWLdpPwStateChangeReason(TextualConvention, Integer32):
    description = "The type indicates the reason of LDP PW VC's status change: LDP session down (1) AC interface down (2) PSN tunnel state down (3) Mapping message not received (4) PW interface parameter not match (5) Notification not forwarding (6) "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ldpSessionDown", 1), ("interfaceDown", 2), ("tunnelDown", 3), ("receivedNoMapping", 4), ("paraUnMatched", 5), ("notifiNotForward", 6))

hwL2Vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119))
hwPwe3MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1))
hwPwe3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1))
hwPWVcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1), )
if mibBuilder.loadTexts: hwPWVcTable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTable.setDescription('This table is the VC configuration table. Users can create or delete a VC by it.')
hwPWVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWVcID"), (0, "HUAWEI-PWE3-MIB", "hwPWVcType"))
if mibBuilder.loadTexts: hwPWVcEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWVcEntry.setDescription('Provides the information of a VC entry.')
hwPWVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPWVcID.setStatus('current')
if mibBuilder.loadTexts: hwPWVcID.setDescription("Index for the conceptual row identifying a PW within this PW Emulation table.Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element'.")
hwPWVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 2), HWL2VpnVcEncapsType())
if mibBuilder.loadTexts: hwPWVcType.setStatus('current')
if mibBuilder.loadTexts: hwPWVcType.setDescription('The type of the Virtual Circuit.This value indicate the service to be carried over this PW.')
hwPWVcPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPeerAddrType.setDescription("Denotes the address type of the peer node. It should be set to 'unknown' if PE/PW maintenance protocol is not used and the address is unknown. Currently, support 'ipv4' only.")
hwPWVcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPeerAddr.setDescription("This object contain the value of the peer node address of the PW/PE maintenance protocol entity. This object SHOULD contain a value of all zeroes if not applicable (hwPWVcPeerAddrType is 'unknown').")
hwPWVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("plugout", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcStatus.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatus.setDescription("Indicates the status of the PW in the local node. Currently, can't support 'plugout'.")
hwPWVcInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcInboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwPWVcInboundLabel.setDescription('For ldp vc, the value will be created by system automatically.')
hwPWVcOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcOutboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwPWVcOutboundLabel.setDescription('For ldp vc, the value will be created by system automatically.')
hwPWVcSwitchSign = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("staticTostatic", 1), ("ldpTostatic", 2), ("ldpToldp", 3), ("upe", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcSwitchSign.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchSign.setDescription('The sign of switch.')
hwPWVcSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchID.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchID.setDescription("Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element' of the switch PW.")
hwPWVcSwitchPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 10), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchPeerAddrType.setDescription("Denotes the address type of the peer node of the switch PW. It should be set to 'unknown' if PE/PW maintenance protocol is not used and the address is unknown. Currently, support 'ipv4' only.")
hwPWVcSwitchPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchPeerAddr.setDescription("This object contain the value of the peer node address of the switch PW of the PW/PE maintenance protocol entity. This object SHOULD contain a value of all zeroes if not applicable (hwPWVcSwitchPeerAddrType is 'unknown').")
hwPWVcSwitchInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchInboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchInboundLabel.setDescription('For ldp vc, the value will be created by system automatically.')
hwPWVcSwitchOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchOutboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchOutboundLabel.setDescription('For ldp vc, the value will be created by system automatically.')
hwPWVcGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcGroupID.setStatus('current')
if mibBuilder.loadTexts: hwPWVcGroupID.setDescription("Used in the Group ID field sent to the peer PWES within the maintenance protocol used for PW setup. Applicable if pwVcOwner equal 'pwIdFecSignaling' or 'l2tpControlProtocol', should be set to zero otherwise. Currently, this value always be zero.")
hwPWVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVcIfIndex.setDescription('Index of the interface (or the virtual interface) associated with the PW.')
hwPWVcAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("plugout", 3), ("notify", 4), ("notifyDown", 5), ("downNotify", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcAcStatus.setStatus('current')
if mibBuilder.loadTexts: hwPWVcAcStatus.setDescription("Local AC status. Currently, can't support 'plugout'.")
hwPWVcACOAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcACOAMStatus.setStatus('current')
if mibBuilder.loadTexts: hwPWVcACOAMStatus.setDescription("Denotes the AC's protocol is operational or not.")
hwPWVcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(46, 9600), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcMtu.setStatus('current')
if mibBuilder.loadTexts: hwPWVcMtu.setDescription('If not equal zero, the optional Mtu object in the signaling protocol will be sent with this value, representing the locally supported MTU size over the interface (or the virtual interface) associated with the PW.')
hwPWVcCtrlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 19), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcCtrlWord.setStatus('current')
if mibBuilder.loadTexts: hwPWVcCtrlWord.setDescription('If signaling is used for PW establishment, this object indicates the status of the control word negotiation, and in both signaling or manual configuration indicates if CW is to be present or not for this PW.')
hwPWVcVCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 20), Bits().clone(namedValues=NamedValues(("ccCw", 0), ("ccAlert", 1), ("ccLabel", 2), ("cvIcmpping", 3), ("cvLspping", 4), ("cvBfd", 5), ("ccTtl", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcVCCV.setStatus('current')
if mibBuilder.loadTexts: hwPWVcVCCV.setDescription('Indicates the optional VCCV capabilities of the PW. According to whether the control word is enabled, the value can be ccCw(0)|ccAlert(1)|ccTtl(6)|cvLspping(4)|cvBfd(5) or ccAlert(1)|ccTtl(6)|cvLspping(4)|cvBfd(5). The default value is ccAlert(1)|ccTtl(6)|cvLspping(4)|cvBfd(5).')
hwPWVcBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwPWVcBandWidth.setDescription("This object indicates the bandwidth. '0' is the default value.")
hwPWVcMaxAtmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcMaxAtmCells.setStatus('current')
if mibBuilder.loadTexts: hwPWVcMaxAtmCells.setDescription('Indicates the max cell supported when vc type is atm.')
hwPWVcTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTnlPolicyName.setDescription('Indicates the tunnel policy name used.')
hwPWVcQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVcQoSBehaviorIndex.setDescription("Indicates the traffic behavior Index when QOS is implemented. Currently,can't support.Return the default value is '0'.")
hwPWVcExplicitPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcExplicitPathName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcExplicitPathName.setDescription("Indicates the explicit path name set by the operator.Currently, can't support.")
hwPWVcTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTemplateName.setDescription('Indicates the PW template index referenced.')
hwPWVcSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSecondary.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSecondary.setDescription('Indicates whether or not the secondary PW is used.')
hwPWVcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcUpTime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcUpTime.setDescription('Indicates the duration when the PW keeps Up for the last time, in seconds.')
hwPWOAMSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 29), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWOAMSync.setStatus('current')
if mibBuilder.loadTexts: hwPWOAMSync.setDescription('Denotes the AC and PSN are enable or not.')
hwPWVCForBfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVCForBfdIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVCForBfdIndex.setDescription('The index of PW for BFD.')
hwPWVcDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcDelayTime.setDescription('The reroute delay time.')
hwPWVcReroutePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("delay", 1), ("immediately", 2), ("never", 3), ("none", 4), ("err", 5), ("invalid", 6), ("immediatelySwitch", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcReroutePolicy.setStatus('current')
if mibBuilder.loadTexts: hwPWVcReroutePolicy.setDescription('Reroute policy.')
hwPWVcResumeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcResumeTime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcResumeTime.setDescription('The reroute resume time.')
hwPWVcRerouteReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 34), HWL2VpnStateChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcRerouteReason.setStatus('current')
if mibBuilder.loadTexts: hwPWVcRerouteReason.setDescription('Last reroute reason.')
hwPWVcLastRerouteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcLastRerouteTime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcLastRerouteTime.setDescription('Last reroute time.')
hwPWVcManualSetFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 36), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcManualSetFault.setStatus('current')
if mibBuilder.loadTexts: hwPWVcManualSetFault.setDescription('Denotes the manual has been set fault or not.')
hwPWVcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcActive.setStatus('current')
if mibBuilder.loadTexts: hwPWVcActive.setDescription('Denotes the current vc is active or not.')
hwPWVcVrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 38), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcVrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVcVrIfIndex.setDescription('Denotes the VRRP interface this PW binding to.')
hwPWVcVrID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcVrID.setStatus('current')
if mibBuilder.loadTexts: hwPWVcVrID.setDescription('Denotes the VrID this PW binding to.')
hwPWBFDDetectMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 50), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWBFDDetectMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwPWBFDDetectMultiplier.setDescription('The multiple of detection time.')
hwPWBFDMinReceiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWBFDMinReceiveInterval.setStatus('current')
if mibBuilder.loadTexts: hwPWBFDMinReceiveInterval.setDescription('The interval of bfd messages to be received.')
hwPWBFDMinTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWBFDMinTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: hwPWBFDMinTransmitInterval.setDescription('The interval of bfd messages to be sent.')
hwPWDynamicBFDDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 43), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWDynamicBFDDetect.setStatus('current')
if mibBuilder.loadTexts: hwPWDynamicBFDDetect.setDescription('This value indicates the capacitability to support dynamic BFD detect.')
hwPWBFDRemoteVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWBFDRemoteVcID.setStatus('current')
if mibBuilder.loadTexts: hwPWBFDRemoteVcID.setDescription('In the multiple-hop model, the value of remote VC id.')
hwPWEthOamType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethOam1ag", 1), ("ethOam3ah", 2), ("noEthOamCfg", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWEthOamType.setStatus('current')
if mibBuilder.loadTexts: hwPWEthOamType.setDescription('This value indicates the type of ETH OAM.')
hwPWCfmMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWCfmMaIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWCfmMaIndex.setDescription('This value indicates the current CFM MA index.')
hwPWVcUpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcUpStartTime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcUpStartTime.setDescription('Specifies the time this PW status was Up(1).')
hwPWVcUpSumTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcUpSumTime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcUpSumTime.setDescription('Indicates the accumulated time when the VC is Up, in seconds.')
hwPWVcIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcIfName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcIfName.setDescription('Name of the interface (or the virtual interface) associated with the PW.')
hwPWVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPWVcRowStatus.setDescription("RowStatus for this Table. Restriction: The row must be created by 'createAndGo' handle only. Handle 'createAndWait' is forbidden. Not support modifying configuration.")
hwPWVcAtmPackOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 52), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 50000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcAtmPackOvertime.setStatus('current')
if mibBuilder.loadTexts: hwPWVcAtmPackOvertime.setDescription('Specifies the AtmPackOvertime.')
hwPWVcPwJitterBufferDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPwJitterBufferDepth.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPwJitterBufferDepth.setDescription('Specifies the PwJitterBufferDepth.')
hwPWVcPwTdmEncapsulationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPwTdmEncapsulationNum.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPwTdmEncapsulationNum.setDescription('Specifies the PwTdmEncapsulationNum.')
hwPWVcPwIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPwIdleCode.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPwIdleCode.setDescription('Specifies the PwIdleCode.')
hwPWVcPwRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 56), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPwRtpHeader.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPwRtpHeader.setDescription('Specifies the PwRtpHeader.')
hwPWVcSwitchTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchTnlPolicyName.setDescription('Indicates the switch tunnel policy name used.')
hwPWVcCfmMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcCfmMdIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVcCfmMdIndex.setDescription('This value indicates the current CFM MD index.')
hwPWVcCfmMaName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcCfmMaName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcCfmMaName.setDescription('This value indicates the current CFM MA name used.')
hwPWVcCfmMdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcCfmMdName.setStatus('current')
if mibBuilder.loadTexts: hwPWVcCfmMdName.setDescription('This value indicates the current CFM MD name used.')
hwPWVcRawOrTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raw", 1), ("tagged", 2), ("rawTagNotConfiged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcRawOrTagged.setStatus('current')
if mibBuilder.loadTexts: hwPWVcRawOrTagged.setDescription('Specifies whether the raw or tagged is configured.')
hwPWVcInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipInterWorking", 1), ("ipLayer2", 2), ("ipUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcInterworkingType.setStatus('current')
if mibBuilder.loadTexts: hwPWVcInterworkingType.setDescription('Specifies the interworking type of the VC entry.')
hwPWVcCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 63), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcCir.setStatus('current')
if mibBuilder.loadTexts: hwPWVcCir.setDescription('Specifies the committed information rate, based on the VC entry.')
hwPWVcPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 64), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcPir.setStatus('current')
if mibBuilder.loadTexts: hwPWVcPir.setDescription('Specifies the peak information rate, based on the VC entry.')
hwPWVcQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwPWVcQosProfile.setDescription("Specifies the QoS profile's name, based on the VC entry.")
hwPWVcSwitchCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 66), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchCir.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchCir.setDescription('Specifies the committed information rate, based on the switch VC entry.')
hwPWVcSwitchPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 67), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchPir.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchPir.setDescription('Specifies the peak information rate, based on the switch VC entry.')
hwPWVcSwitchQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchQosProfile.setDescription("Specifies the QoS profile's name, based on the switch VC entry.")
hwPWVcTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 69), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcTrigger.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTrigger.setDescription('Specifies whether the PW remote interface shutdown or not.')
hwPWVcEnableACOAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 70), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcEnableACOAM.setStatus('current')
if mibBuilder.loadTexts: hwPWVcEnableACOAM.setDescription('Specifies whether ACOAM detection and notification are all enabled or not.')
hwPWVcSwitchVrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 71), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchVrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchVrIfIndex.setDescription('Denotes the VRRP interface the switch PW binding to.')
hwPWVcSwitchVrID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 72), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWVcSwitchVrID.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchVrID.setDescription('Denotes the VrID the switch PW binding to.')
hwPWVcQosParaFromPWT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cliOrMib", 1), ("pwTemplate", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcQosParaFromPWT.setStatus('current')
if mibBuilder.loadTexts: hwPWVcQosParaFromPWT.setDescription('This object indicates the configuration of the Qos parameters managed through command line or PW template.')
hwPWVcBfdParaFromPWT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cliOrMib", 1), ("pwTemplate", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcBfdParaFromPWT.setStatus('current')
if mibBuilder.loadTexts: hwPWVcBfdParaFromPWT.setDescription('This object indicates the configuration of the Bfd parameters managed through command line or PW template.')
hwPwVcNegotiateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("slaveOrMaster", 1), ("independent", 2), ("unknown", 3), ("frr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcNegotiateMode.setStatus('current')
if mibBuilder.loadTexts: hwPwVcNegotiateMode.setDescription('This object indicates the negotiation mode of the PW on the local node.')
hwPwVcIsBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 76), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcIsBypass.setStatus('current')
if mibBuilder.loadTexts: hwPwVcIsBypass.setDescription('This object indicates whether the PW is the bypass PW.')
hwPwVcIsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 77), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcIsAdmin.setStatus('current')
if mibBuilder.loadTexts: hwPwVcIsAdmin.setDescription('This object indicates whether the PW is the administrator PW.')
hwPwVcAdminPwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 78), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcAdminPwIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPwVcAdminPwIfIndex.setDescription('This object indicates the index of the interface on which the administrator PW resides after it is being tracked by the service PW.')
hwPwVcAdminPwLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcAdminPwLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwPwVcAdminPwLinkStatus.setDescription('This object indicates the status of the administrator PW after it is being tracked by the service PW.')
hwPwVcSwitchAdminPwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 80), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchAdminPwIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchAdminPwIfIndex.setDescription('This object indicates the index of the interface on which the administrator PW resides after it is being tracked by the switch PW.')
hwPwVcSwitchAdminPwLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchAdminPwLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchAdminPwLinkStatus.setDescription('This object indicates the status of the administrator PW after it is being tracked by the switch PW.')
hwPwVcSwitchBackupAdminPwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 82), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupAdminPwIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupAdminPwIfIndex.setDescription('This object indicates the index of the interface on which the administrator PW resides after it is being tracked by the switch backup PW.')
hwPwVcSwitchBackupAdminPwLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchBackupAdminPwLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupAdminPwLinkStatus.setDescription('This object indicates the status of the administrator PW after it is being tracked by the switch backup PW.')
hwPwVcSwitchBackupVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 84), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcId.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcId.setDescription('This object indicates the VC ID of the switch backup PW.')
hwPwVcSwitchBackupVcPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 85), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcPeerAddrType.setDescription('This object indicates type of the IP address of the peer on the switch backup PW. Currently, only IPv4 addresss are supported.')
hwPwVcSwitchBackupVcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 86), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcPeerAddr.setDescription('This object indicates the IP address of the peer on the switch backup PW.')
hwPwVcSwitchBackupVcReceiveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 87), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcReceiveLabel.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcReceiveLabel.setDescription('This object indicates the inbound label of the switch backup VC. For a static VC, the value of the inbound label ranges from 16 to 1023. For a dynamic VC, the inbound label is automatically generated by the system.')
hwPwVcSwitchBackupVcSendLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 88), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcSendLabel.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcSendLabel.setDescription('This object indicates the outbound label of the switch backup VC. For a static VC, the value of the outbound label ranges from 0 to 1048575. For a dynamic VC, the outbound label is automatically generated by the system.')
hwPwVcSwitchBackupVcTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 89), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcTnlPolicyName.setDescription('This object indicates the name of the tunnel policy of the switch backup VC.')
hwPwVcSwitchBackupVcCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 90), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcCir.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcCir.setDescription('This object indicates the CIR of the switch backup VC.')
hwPwVcSwitchBackupVcPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 91), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcPir.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcPir.setDescription('This object indicates the PIR of the switch backup VC.')
hwPwVcSwitchBackupVcQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 92), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcQosProfile.setDescription('This object indicates the name of the QoS profile of the switch backup VC.')
hwPwVcSlaveMasterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("unknown", 3), ("bypass", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSlaveMasterMode.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSlaveMasterMode.setDescription('This object indicates whether the status of the VC is master or slave.')
hwPwVcSwitchVcSlaveMasterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchVcSlaveMasterMode.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchVcSlaveMasterMode.setDescription('This object indicates whether the status of the switch VC is master or slave.')
hwPwVcSwitchBackupVcSlaveMasterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcSlaveMasterMode.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcSlaveMasterMode.setDescription('This object indicates whether the status of the switch backup VC is master or slave.')
hwPwVcSwitchVcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 96), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchVcActive.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchVcActive.setDescription('This object indicates whether the status of the switch VC is active or not.')
hwPwVcSwitchBackupVcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 97), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcActive.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcActive.setDescription('This object indicates whether the status of the switch backup VC is active or not.')
hwPwVcSwitchCwTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 98), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchCwTrans.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchCwTrans.setDescription('This object indicates whether the SPE support Control Word Transparent or not,default is false.')
hwPwVcSwitchVcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 99), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchVcServiceName.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchVcServiceName.setDescription('This object indicates the service name of the switch VC.')
hwPwVcSwitchBackupVcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 1, 1, 100), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcServiceName.setStatus('current')
if mibBuilder.loadTexts: hwPwVcSwitchBackupVcServiceName.setDescription('This object indicates the service name of the switch backup VC.')
hwPWVcTnlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 2), )
if mibBuilder.loadTexts: hwPWVcTnlTable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTnlTable.setDescription('This table is used to search the tunnel index of a VC.')
hwPWVcTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWVcID"), (0, "HUAWEI-PWE3-MIB", "hwPWVcType"), (0, "HUAWEI-PWE3-MIB", "hwPWVcTnlIndex"))
if mibBuilder.loadTexts: hwPWVcTnlEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTnlEntry.setDescription('Provides the information of a VC tunnel entry.')
hwPWVcTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPWVcTnlIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTnlIndex.setDescription('This object indicates the tunnel index of the VC.')
hwPWVcTnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lsp", 1), ("gre", 2), ("ipsec", 3), ("crLsp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTnlType.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTnlType.setDescription('This object indicates the tunnel type.')
hwPWTnlForBfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWTnlForBfdIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWTnlForBfdIndex.setDescription('This object indicates the index of LSP for BFD.')
hwPWVcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 3), )
if mibBuilder.loadTexts: hwPWVcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsTable.setDescription("This table contains the Pwe3's VC packets statistics.")
hwPWVcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWVcID"), (0, "HUAWEI-PWE3-MIB", "hwPWVcType"))
if mibBuilder.loadTexts: hwPWVcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsEntry.setDescription("Provides the information of the Pwe3's VC packets statistics.")
hwPWVcStatisticsRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcStatisticsRcvPkts.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsRcvPkts.setDescription('The total number of packets received on this VC.')
hwPWVcStatisticsRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcStatisticsRcvBytes.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsRcvBytes.setDescription('The total number of bytes received on this VC.')
hwPWVcStatisticsSndPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcStatisticsSndPkts.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsSndPkts.setDescription('The total number of packets sent on this VC.')
hwPWVcStatisticsSndBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcStatisticsSndBytes.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsSndBytes.setDescription('The total number of bytes sent on the VC.')
hwPWRemoteVcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4), )
if mibBuilder.loadTexts: hwPWRemoteVcTable.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcTable.setDescription('This table provides remote PW information for each local PW.')
hwPWRemoteVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWVcID"), (0, "HUAWEI-PWE3-MIB", "hwPWVcType"))
if mibBuilder.loadTexts: hwPWRemoteVcEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcEntry.setDescription('An entry in this table is created by the agent for every PW.')
hwPWRemoteVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcID.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcID.setDescription("Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element' of the remote PW.")
hwPWRemoteVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 2), HWL2VpnVcEncapsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcType.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcType.setDescription('This value indicate the service to be carried over the remote PW.')
hwPWRemoteVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("plugout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcStatus.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcStatus.setDescription('Indicates the forwarding status of the remote VC.')
hwPWRemoteVcGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcGroupID.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcGroupID.setDescription('Indicates the Group ID field of the remote PW. Currently, this value always be zero.')
hwPWRemoteVcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(46, 9600), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcMtu.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcMtu.setDescription('Indicates the supported MTU size of the remote PW.')
hwPWRemoteVcCtrlword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 6), HWEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcCtrlword.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcCtrlword.setDescription('Indicates the control word capability of the remote PW.')
hwPWRemoteVcMaxAtmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcMaxAtmCells.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcMaxAtmCells.setDescription('Indicates the max cell supported of the remote PW when vctype is atm.')
hwPWRemoteVcNotif = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWRemoteVcNotif.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcNotif.setDescription('Indicates notification is supported by the remote PW.')
hwPWVcSwitchNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 5), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPWVcSwitchNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchNotifEnable.setDescription('If this object is set to enable(1), then it enables the emission of hwPWVcSwitchWtoP and hwPWVcSwitchPtoW notifications; otherwise these notifications are not emitted. The default value is disable (2).')
hwPWVcUpDownNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 6), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPWVcUpDownNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcUpDownNotifEnable.setDescription('This object indicates the enable sign of PW VC state change notification. The default value is disable (2).')
hwPWVcDeletedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 7), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPWVcDeletedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcDeletedNotifEnable.setDescription('This object indicates the enable sign of PW VC deletion notification. The default value is disable (2).')
hwPWVcStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 8), HWL2VpnStateChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPWVcStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStateChangeReason.setDescription('This object indicates the reason of PE VC state change.')
hwPWVcSwitchRmtID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPWVcSwitchRmtID.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchRmtID.setDescription('This object indicates the VC ID of PW switch between working PW and protect PW .')
hwLdpPWStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 10), HWLdpPwStateChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpPWStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: hwLdpPWStateChangeReason.setDescription("This object indicates the reason of LDP PW VC's state change.")
hwPWVcTDMPerfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11), )
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentTable.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentTable.setDescription('This table provides per TDM PW performance information. The contents of this table entry are reset to zero and gotten new information every 15 minutes.')
hwPWVcTDMPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWVcID"), (0, "HUAWEI-PWE3-MIB", "hwPWVcType"))
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentEntry.setDescription('An entry in this table is created by the agent for every TDM PW entry.')
hwPWVcTDMPerfCurrentMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentMissingPkts.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
hwPWVcTDMPerfCurrentJtrBfrOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentJtrBfrOverruns.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentJtrBfrOverruns.setDescription('Number of times the jitter buffer was overrun.')
hwPWVcTDMPerfCurrentJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
hwPWVcTDMPerfCurrentMisOrderDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentMisOrderDropped.setDescription('Number of packets detected out of order (via control word sequence numbers) that could not be re-ordered or could not fit in the jitter buffer.')
hwPWVcTDMPerfCurrentMalformedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentMalformedPkt.setDescription("Number of packets detected with unexpected size or bad headers' stack.")
hwPWVcTDMPerfCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentESs.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentESs.setDescription('The counter associated with the number of Error Seconds encountered. Any malformed packet, sequence error, LOPS, and the like are considered as Error Seconds.')
hwPWVcTDMPerfCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentSESs.setDescription('The counter associated with the number of Severely Error Seconds encountered.')
hwPWVcTDMPerfCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered. Any consecutive ten seconds of SES are counted as one Unavailable Seconds (UAS).')
hwPwe3MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2))
hwPWVcSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcCtrlWord"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchRmtID"), ("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReason"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"))
if mibBuilder.loadTexts: hwPWVcSwitchWtoP.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchWtoP.setDescription('This notification is generated when switch from working PW to protect PW happens.')
hwPWVcSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 2)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcCtrlWord"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchRmtID"), ("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReason"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"))
if mibBuilder.loadTexts: hwPWVcSwitchPtoW.setStatus('current')
if mibBuilder.loadTexts: hwPWVcSwitchPtoW.setDescription('This notification is generated when switch from protect PW to working PW happens.')
hwPWVcDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 3)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWVcIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcSecondary"), ("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReason"), ("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchID"), ("HUAWEI-PWE3-MIB", "hwPWVcTnlPolicyName"))
if mibBuilder.loadTexts: hwPWVcDown.setStatus('current')
if mibBuilder.loadTexts: hwPWVcDown.setDescription("This notification indicates the VC's state changes to down.")
hwPWVcUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 4)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWVcIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcSecondary"), ("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReason"), ("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchID"), ("HUAWEI-PWE3-MIB", "hwPWVcTnlPolicyName"))
if mibBuilder.loadTexts: hwPWVcUp.setStatus('current')
if mibBuilder.loadTexts: hwPWVcUp.setDescription("This notification indicates the VC's state changes to up.")
hwPWVcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 5)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWVcIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcSecondary"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchID"))
if mibBuilder.loadTexts: hwPWVcDeleted.setStatus('current')
if mibBuilder.loadTexts: hwPWVcDeleted.setDescription('This notification indicates the VC is deleted.')
hwPWVcBackup = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 6)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWVcIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcSecondary"), ("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReason"), ("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchID"))
if mibBuilder.loadTexts: hwPWVcBackup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcBackup.setDescription("This notification indicates the VC's state changes to backup.")
hwLdpPWVcDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 7)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwLdpPWStateChangeReason"))
if mibBuilder.loadTexts: hwLdpPWVcDown.setStatus('current')
if mibBuilder.loadTexts: hwLdpPWVcDown.setDescription("This notification indicates the LDP PW VC's state changes to down.")
hwLdpPWVcUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 2, 8)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwLdpPWStateChangeReason"))
if mibBuilder.loadTexts: hwLdpPWVcUp.setStatus('current')
if mibBuilder.loadTexts: hwLdpPWVcUp.setDescription("This notification indicates the Ldp PW VC's state changes to up.")
hwSvcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3))
hwSvcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1), )
if mibBuilder.loadTexts: hwSvcTable.setStatus('current')
if mibBuilder.loadTexts: hwSvcTable.setDescription('This table is the SVC configuration table. Users can create or delete a SVC by it.')
hwSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwSvcIfIndex"))
if mibBuilder.loadTexts: hwSvcEntry.setStatus('current')
if mibBuilder.loadTexts: hwSvcEntry.setDescription('Provides the information of a SVC entry.')
hwSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwSvcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwSvcIfIndex.setDescription('Index of the interface (or the virtual interface) associated with the PW.')
hwSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcID.setStatus('current')
if mibBuilder.loadTexts: hwSvcID.setDescription("Index for the conceptual row identifying a PW within this PW Emulation table.Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element'.")
hwSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 3), HWL2VpnVcEncapsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcType.setStatus('current')
if mibBuilder.loadTexts: hwSvcType.setDescription('Index for the conceptual row identifying a PW within this PW Emulation table.This value indicate the service to be carried over this PW.')
hwSvcPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: hwSvcPeerAddrType.setDescription("Denotes the address type of the peer node. It should be set to 'unknown' if PE/PW maintenance protocol is not used and the address is unknown. Currently, support 'ipv4' only.")
hwSvcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwSvcPeerAddr.setDescription("This object contain the value of the peer node address of the PW/PE maintenance protocol entity. This object SHOULD contain a value of all zeroes if not applicable (hwSvcPeerAddrType is 'unknown').")
hwSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("plugout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcStatus.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatus.setDescription("Indicates the status of the PW in the local node. Currently, can't support 'plugout'.")
hwSvcInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcInboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwSvcInboundLabel.setDescription('This object indicates the inbound label.')
hwSvcOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcOutboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwSvcOutboundLabel.setDescription('This object indicates the outbound label.')
hwSvcGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcGroupID.setStatus('current')
if mibBuilder.loadTexts: hwSvcGroupID.setDescription("Used in the Group ID field sent to the peer PWES within the maintenance protocol used for PW setup. Applicable if SvcOwner equal 'pwIdFecSignaling' or 'l2tpControlProtocol', should be set to zero otherwise. Currently, this value always be zero.")
hwSvcAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("plugout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcAcStatus.setStatus('current')
if mibBuilder.loadTexts: hwSvcAcStatus.setDescription("Local AC status. Currently, can't support 'plugout'.")
hwSvcACOAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcACOAMStatus.setStatus('current')
if mibBuilder.loadTexts: hwSvcACOAMStatus.setDescription("Denotes the AC's protocol is operational or not.")
hwSvcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(46, 9600), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcMtu.setStatus('current')
if mibBuilder.loadTexts: hwSvcMtu.setDescription("If not equal zero, the optional Mtu object in the signaling protocol will be sent with this value, representing the locally supported MTU size over the interface (or the virtual interface) associated with the PW.Currently, can't support.'0' is the default value.")
hwSvcCtrlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 13), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcCtrlWord.setStatus('current')
if mibBuilder.loadTexts: hwSvcCtrlWord.setDescription('If signaling is used for PW establishment, this object indicates the status of the control word negotiation, and in both signaling or manual configuration indicates if CW is to be present or not for this PW.')
hwSvcVCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 14), Bits().clone(namedValues=NamedValues(("ccCw", 0), ("ccAlert", 1), ("ccLabel", 2), ("cvIcmpping", 3), ("cvLspping", 4), ("cvBfd", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcVCCV.setStatus('current')
if mibBuilder.loadTexts: hwSvcVCCV.setDescription('Indicates the optional VCCV capabilities of the SVC. According to whether the control word is enabled, the value can be ccCw(0)|ccAlert(1)|cvLspping(4)|cvBfd(5) or ccAlert(1)|cvLspping(4)|cvBfd(5). The default value is ccAlert(1)|cvLspping(4)|cvBfd(5).')
hwSvcBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwSvcBandWidth.setDescription("This object indicates the bandwidth.Currently, can't support.'0' is the default value.")
hwSvcMaxAtmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcMaxAtmCells.setStatus('current')
if mibBuilder.loadTexts: hwSvcMaxAtmCells.setDescription('Indicates the max cell supported when vc type is atm.')
hwSvcTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlPolicyName.setDescription('Indicates the tunnel policy name used.')
hwSvcQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwSvcQoSBehaviorIndex.setDescription("Indicates the traffic behavior Index when QOS is implemented. Currently, can't support.'0' is the default value.")
hwSvcPWTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPWTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwSvcPWTemplateName.setDescription('Indicates the PW template index referenced.')
hwSvcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcUpTime.setStatus('current')
if mibBuilder.loadTexts: hwSvcUpTime.setDescription('Indicates the duration when the SVC keeps Up for the last time, in seconds.')
hwSvcOAMSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcOAMSync.setStatus('current')
if mibBuilder.loadTexts: hwSvcOAMSync.setDescription('Denotes the AC and PSN are enable or not.')
hwSvcForBfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcForBfdIndex.setStatus('current')
if mibBuilder.loadTexts: hwSvcForBfdIndex.setDescription("The index of PW for BFD.Currently, can't support.Return the default value is '0'.")
hwSvcSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcSecondary.setStatus('current')
if mibBuilder.loadTexts: hwSvcSecondary.setDescription("Indicates whether or not the secondary PW is used.Currently, can't support.Return the default value is 'false'.")
hwSvcDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwSvcDelayTime.setDescription("The reroute delay time.Currently, can't support.Return the default value is '0'.")
hwSvcReroutePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("delay", 1), ("immediately", 2), ("never", 3), ("none", 4), ("err", 5), ("invalid", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcReroutePolicy.setStatus('current')
if mibBuilder.loadTexts: hwSvcReroutePolicy.setDescription("Reroute policy.Currently, can't support.Return the default value is 'invalid(6)'.")
hwSvcResumeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcResumeTime.setStatus('current')
if mibBuilder.loadTexts: hwSvcResumeTime.setDescription("The reroute resume time.Currently, can't support.Return the default value is '0'.")
hwSvcRerouteReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 27), HWL2VpnStateChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcRerouteReason.setStatus('current')
if mibBuilder.loadTexts: hwSvcRerouteReason.setDescription("Last reroute reason.Currently, can't support.Return the default value is 'invalidReason(1)'.")
hwSvcLastRerouteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcLastRerouteTime.setStatus('current')
if mibBuilder.loadTexts: hwSvcLastRerouteTime.setDescription("Last reroute time.Currently, can't support.Return the default value is '0'.")
hwSvcManualSetFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcManualSetFault.setStatus('current')
if mibBuilder.loadTexts: hwSvcManualSetFault.setDescription("Denotes the manual has been set fault or not.Currently, can't support.Return the default value is 'false'.")
hwSvcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcActive.setStatus('current')
if mibBuilder.loadTexts: hwSvcActive.setDescription("Denotes the current vc is active or not.Currently, can't support.Return the default value is 'false'.")
hwSvcUpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcUpStartTime.setStatus('current')
if mibBuilder.loadTexts: hwSvcUpStartTime.setDescription('Specifies the time this PW status was Up(1).')
hwSvcUpSumTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcUpSumTime.setStatus('current')
if mibBuilder.loadTexts: hwSvcUpSumTime.setDescription('Indicates the accumulated time when the SVC is Up, in seconds.')
hwSvcAtmPackOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 50000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcAtmPackOvertime.setStatus('current')
if mibBuilder.loadTexts: hwSvcAtmPackOvertime.setDescription('Specifies the AtmPackOvertime.')
hwSvcPwJitterBufferDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPwJitterBufferDepth.setStatus('current')
if mibBuilder.loadTexts: hwSvcPwJitterBufferDepth.setDescription('Specifies the PwJitterBufferDepth.')
hwSvcPwTdmEncapsulationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPwTdmEncapsulationNum.setStatus('current')
if mibBuilder.loadTexts: hwSvcPwTdmEncapsulationNum.setDescription('Specifies the PwTdmEncapsulationNum.')
hwSvcPwIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPwIdleCode.setStatus('current')
if mibBuilder.loadTexts: hwSvcPwIdleCode.setDescription('Specifies the PwIdleCode.')
hwSvcPwRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 37), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPwRtpHeader.setStatus('current')
if mibBuilder.loadTexts: hwSvcPwRtpHeader.setDescription('Specifies the PwRtpHeader.')
hwSvcRawOrTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raw", 1), ("tagged", 2), ("rawTagNotConfiged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcRawOrTagged.setStatus('current')
if mibBuilder.loadTexts: hwSvcRawOrTagged.setDescription('Specifies whether the VLAN tag of the SVC entry is attached or stripped.')
hwSvcInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipInterWorking", 1), ("ipLayer2", 2), ("ipUnknown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcInterworkingType.setStatus('current')
if mibBuilder.loadTexts: hwSvcInterworkingType.setDescription('Specifies the interworking type of the SVC entry.')
hwSvcCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 40), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcCir.setStatus('current')
if mibBuilder.loadTexts: hwSvcCir.setDescription('Specifies the committed information rate, based on the SVC entry.')
hwSvcPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 41), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcPir.setStatus('current')
if mibBuilder.loadTexts: hwSvcPir.setDescription('Specifies the peak information rate, based on the SVC entry.')
hwSvcQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwSvcQosProfile.setDescription("Specifies the QoS profile's name, based on the SVC entry.")
hwSvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSvcRowStatus.setDescription("RowStatus for this Table. Restriction: The row must be created by 'createAndGo' handle only. Handle 'createAndWait' is forbidden. Not support modifying configuration.")
hwSvcTnlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 2), )
if mibBuilder.loadTexts: hwSvcTnlTable.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlTable.setDescription('This table is used to search the tunnel index of a SVC.')
hwSvcTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwSvcIfIndex"), (0, "HUAWEI-PWE3-MIB", "hwSvcTnlIndex"))
if mibBuilder.loadTexts: hwSvcTnlEntry.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlEntry.setDescription('Provides the information of a SVC tunnel entry.')
hwSvcTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwSvcTnlIndex.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlIndex.setDescription('This object indicates the tunnel index of the SVC.')
hwSvcTnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lsp", 1), ("gre", 2), ("ipsec", 3), ("crLsp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcTnlType.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlType.setDescription('This object indicates the tunnel type.')
hwSvcTnlForBfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcTnlForBfdIndex.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlForBfdIndex.setDescription("This object indicates the index of LSP for BFD. Currently, can't support.Return the default value is '0'.")
hwSvcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 3), )
if mibBuilder.loadTexts: hwSvcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsTable.setDescription("This table contains the L2vpn's SVC packets statistics.")
hwSvcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwSvcIfIndex"))
if mibBuilder.loadTexts: hwSvcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsEntry.setDescription("Provides the information of the L2VPN's SVC packets Statistics.")
hwSvcStatisticsRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcStatisticsRcvPkts.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsRcvPkts.setDescription('The total number of packets received on this SVC.')
hwSvcStatisticsRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcStatisticsRcvBytes.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsRcvBytes.setDescription('The total number of bytes received on this SVC.')
hwSvcStatisticsSndPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcStatisticsSndPkts.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsSndPkts.setDescription('The total number of packets sent on this SVC.')
hwSvcStatisticsSndBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcStatisticsSndBytes.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsSndBytes.setDescription('The total number of bytes sent on the SVC.')
hwSvcSwitchNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 4), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSvcSwitchNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwSvcSwitchNotifEnable.setDescription("If this object is set to enable(1), then it enables the emission of hwSvcSwitchWtoP and hwSvcSwitchPtoW notifications; otherwise these notifications are not emitted.Currently, can't support. The default value is disable (2).")
hwSvcUpDownNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 5), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSvcUpDownNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwSvcUpDownNotifEnable.setDescription('This object indicates the enable sign of PW VC state change notification. The default value is disable (2).')
hwSvcDeletedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 6), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSvcDeletedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwSvcDeletedNotifEnable.setDescription('This object indicates the enable sign of PW VC deletion notification. The default value is disable (2).')
hwSvcStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 3, 7), HWL2VpnStateChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSvcStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: hwSvcStateChangeReason.setDescription('This object indicates the reason of PE VC state change.')
hwL2vpnSvcMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 4))
hwSvcSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 4, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcID"), ("HUAWEI-PWE3-MIB", "hwSvcType"), ("HUAWEI-PWE3-MIB", "hwSvcCtrlWord"), ("HUAWEI-PWE3-MIB", "hwSvcStateChangeReason"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwSvcSwitchWtoP.setStatus('current')
if mibBuilder.loadTexts: hwSvcSwitchWtoP.setDescription("This notification is generated when switch from working PW to protect PW happens.Currently, can't support.")
hwSvcSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 4, 2)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcID"), ("HUAWEI-PWE3-MIB", "hwSvcType"), ("HUAWEI-PWE3-MIB", "hwSvcCtrlWord"), ("HUAWEI-PWE3-MIB", "hwSvcStateChangeReason"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwSvcSwitchPtoW.setStatus('current')
if mibBuilder.loadTexts: hwSvcSwitchPtoW.setDescription("This notification is generated when switch from protect PW to working PW happens.Currently, can't support.")
hwSvcDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 4, 3)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcID"), ("HUAWEI-PWE3-MIB", "hwSvcType"), ("HUAWEI-PWE3-MIB", "hwSvcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwSvcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcStateChangeReason"), ("IF-MIB", "ifName"), ("HUAWEI-PWE3-MIB", "hwSvcTnlPolicyName"))
if mibBuilder.loadTexts: hwSvcDown.setStatus('current')
if mibBuilder.loadTexts: hwSvcDown.setDescription("This notification indicates the SVC's state changes to down.")
hwSvcUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 4, 4)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcID"), ("HUAWEI-PWE3-MIB", "hwSvcType"), ("HUAWEI-PWE3-MIB", "hwSvcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwSvcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcStateChangeReason"), ("IF-MIB", "ifName"), ("HUAWEI-PWE3-MIB", "hwSvcTnlPolicyName"))
if mibBuilder.loadTexts: hwSvcUp.setStatus('current')
if mibBuilder.loadTexts: hwSvcUp.setDescription("This notification indicates the SVC's state changes to up.")
hwSvcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 4, 5)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcID"), ("HUAWEI-PWE3-MIB", "hwSvcType"), ("HUAWEI-PWE3-MIB", "hwSvcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwSvcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcOutboundLabel"))
if mibBuilder.loadTexts: hwSvcDeleted.setStatus('current')
if mibBuilder.loadTexts: hwSvcDeleted.setDescription('This notification indicates the SVC is deleted.')
hwPWTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5), )
if mibBuilder.loadTexts: hwPWTemplateTable.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateTable.setDescription('This table specifies information for configuring and status monitoring to PW tempalte.')
hwPWTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWTemplateName"))
if mibBuilder.loadTexts: hwPWTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateEntry.setDescription('A row in this table represents a pseudo wire (PW) template. It is indexed by hwPWCmdTemplateIndex, which uniquely identifying a singular tempalte.')
hwPWTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19)))
if mibBuilder.loadTexts: hwPWTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateName.setDescription("The name of the PW template. Set by the operator to indicate the protocol responsible for establishing this PW. The value 'static' is used in all cases where no maintenance protocol (PW signaling) is used to set-up the PW, i.e. require configuration of entries in the PW tables including PW labels, etc. The value 'ldp' is used in case of signaling with the PWid FEC element with LDP signaling. The value 'rsvp' indicate the use of rsvp control protocol.")
hwPWTemplatePeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePeerAddrType.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePeerAddrType.setDescription("Denotes the address type of the peer node. It should be set to 'unknown' if PE/PW maintenance protocol is not used and the address is unknown. Currently, support 'ipv4' only.")
hwPWTemplatePeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePeerAddr.setDescription('This object contain the value of the peer node address of the PW/PE maintenance protocol entity. ')
hwPWTemplateCtrlword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 4), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateCtrlword.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateCtrlword.setDescription('Indicates the control word capability of the switch PW.')
hwPWTemplateVCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 5), Bits().clone(namedValues=NamedValues(("ccCw", 0), ("ccAlert", 1), ("ccLabel", 2), ("cvIcmpping", 3), ("cvLspping", 4), ("cvBfd", 5), ("ccTtl", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateVCCV.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateVCCV.setDescription('Indicates the optional VCCV capabilities of the PW template. According to whether the control word is enabled, the value can be ccCw(0)|ccAlert(1)|ccTtl(6)|cvLspping(4)|cvBfd(5) or ccAlert(1)|ccTtl(6)|cvLspping(4)|cvBfd(5). The default value is ccAlert(1)|ccTtl(6)|cvLspping(4)|cvBfd(5).')
hwPWTemplateFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateFrag.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateFrag.setDescription('Indicates whether or not fragmentaion is supported.')
hwPWTemplateBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWTemplateBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateBandwidth.setDescription("Indicates the bandwitdh when signaling protocol is rsvp. Currently, can't support.'0' is the default value.")
hwPWTemplateTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateTnlPolicyName.setDescription('Indicates the tunnel policy name used.')
hwPWTemplateQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateQoSBehaviorIndex.setDescription("Indicates the traffic behavior Index when QOS is implemented.Currently, can't support.'0' is the default value.")
hwPWTemplateExplicitPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateExplicitPathName.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateExplicitPathName.setDescription("Indicates the explicit path name set by the operator.Currently, can't support.")
hwPWTemplateBFDDetectMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 50), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateBFDDetectMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateBFDDetectMultiplier.setDescription('The multiple of detection time.')
hwPWTemplateBFDMinReceiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateBFDMinReceiveInterval.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateBFDMinReceiveInterval.setDescription('The interval of bfd messages to be received.')
hwPWTemplateBFDMinTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateBFDMinTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateBFDMinTransmitInterval.setDescription('The interval of bfd messages to be sent.')
hwPWTemplateDynamicBFDDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateDynamicBFDDetect.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateDynamicBFDDetect.setDescription('This value indicates the capacitability to support dynamic BFD detect.')
hwPWTemplateMaxAtmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateMaxAtmCells.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateMaxAtmCells.setDescription('Specifies the MaxAtmCells.')
hwPWTemplateAtmPackOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 50000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateAtmPackOvertime.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateAtmPackOvertime.setDescription('Specifies the AtmPackOvertime.')
hwPWTemplatePwJitterBufferDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePwJitterBufferDepth.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePwJitterBufferDepth.setDescription('Specifies the PwJitterBufferDepth.')
hwPWTemplatePwTdmEncapsulationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePwTdmEncapsulationNum.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePwTdmEncapsulationNum.setDescription('Specifies the PwTdmEncapsulationNum.')
hwPWTemplatePwIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePwIdleCode.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePwIdleCode.setDescription('Specifies the PwIdleCode.')
hwPWTemplatePwRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePwRtpHeader.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePwRtpHeader.setDescription('Specifies the PwRtpHeader.')
hwPWTemplatePwCCSeqEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 21), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePwCCSeqEnable.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePwCCSeqEnable.setDescription('Specifies the CC Sequence is enable or not.')
hwPWTemplateCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateCir.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateCir.setDescription('Specifies the committed information rate, based on the PW template entry.')
hwPWTemplatePir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplatePir.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplatePir.setDescription('Specifies the peak information rate, based on the PW template entry.')
hwPWTemplateQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateQosProfile.setDescription("Specifies the QoS profile's name, based on the PW template entry.")
hwPWTemplateFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 25), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateFlowLabel.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateFlowLabel.setDescription('The value of this object identifies whether the PW FlowLabel is enabled.')
hwPWTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 5, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPWTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateRowStatus.setDescription("RowStatus for this Table. Restriction: The row must be created by 'createAndGo' handle only. Handle 'createAndWait' is forbidden.")
hwPWTemplateMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 6))
hwPWTemplateCannotDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 6, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwPWTemplateName"))
if mibBuilder.loadTexts: hwPWTemplateCannotDeleted.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateCannotDeleted.setDescription('This notification indicates the PWTemplate cannot be deleted.')
hwPWTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7))
hwPWTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7, 1), )
if mibBuilder.loadTexts: hwPWTable.setStatus('current')
if mibBuilder.loadTexts: hwPWTable.setDescription('This table indicates a PW, that is Static PW or LDP PW')
hwPWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-PWE3-MIB", "hwPWId"), (0, "HUAWEI-PWE3-MIB", "hwPWType"), (0, "HUAWEI-PWE3-MIB", "hwPWPeerIp"))
if mibBuilder.loadTexts: hwPWEntry.setStatus('current')
if mibBuilder.loadTexts: hwPWEntry.setDescription('Provides the information of a VC key entry.')
hwPWId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPWId.setStatus('current')
if mibBuilder.loadTexts: hwPWId.setDescription("Index for the conceptual row identifying a PW within this PW Emulation table.Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element'.")
hwPWType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7, 1, 1, 2), HWL2VpnVcEncapsType())
if mibBuilder.loadTexts: hwPWType.setStatus('current')
if mibBuilder.loadTexts: hwPWType.setDescription('Index for the conceptual row identifying a PW within this PW Emulation table.This value indicate the service to be carried over this PW.')
hwPWPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwPWPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwPWPeerIp.setDescription('This object contain the value of the peer node address of the PW/PE maintenance protocol entity. This object SHOULD contain a value of all zeroes if not applicable.')
hwPWInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 1, 7, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwPWInterfaceIndex.setDescription('Index of the interface (or the virtual interface) associated with the PW.')
hwPwe3MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3))
hwPwe3MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 1))
hwPwe3MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 1, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcGroup"), ("HUAWEI-PWE3-MIB", "hwPWVcTnlGroup"), ("HUAWEI-PWE3-MIB", "hwPWVcStatisticsGroup"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcGroup"), ("HUAWEI-PWE3-MIB", "hwPWTemplateGroup"), ("HUAWEI-PWE3-MIB", "hwPWNotificationControlGroup"), ("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReasonGroup"), ("HUAWEI-PWE3-MIB", "hwPWVcNotificationGroup"), ("HUAWEI-PWE3-MIB", "hwPWTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPwe3MIBCompliance = hwPwe3MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwPwe3MIBCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-PWE3-MIB.')
hwPwe3MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2))
hwPWVcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcPeerAddrType"), ("HUAWEI-PWE3-MIB", "hwPWVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWVcStatus"), ("HUAWEI-PWE3-MIB", "hwPWVcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchSign"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchID"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchPeerAddrType"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchInboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwPWVcGroupID"), ("HUAWEI-PWE3-MIB", "hwPWVcIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcAcStatus"), ("HUAWEI-PWE3-MIB", "hwPWVcACOAMStatus"), ("HUAWEI-PWE3-MIB", "hwPWVcMtu"), ("HUAWEI-PWE3-MIB", "hwPWVcCtrlWord"), ("HUAWEI-PWE3-MIB", "hwPWVcVCCV"), ("HUAWEI-PWE3-MIB", "hwPWVcBandWidth"), ("HUAWEI-PWE3-MIB", "hwPWVcMaxAtmCells"), ("HUAWEI-PWE3-MIB", "hwPWVcTnlPolicyName"), ("HUAWEI-PWE3-MIB", "hwPWVcQoSBehaviorIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcExplicitPathName"), ("HUAWEI-PWE3-MIB", "hwPWVcTemplateName"), ("HUAWEI-PWE3-MIB", "hwPWVcSecondary"), ("HUAWEI-PWE3-MIB", "hwPWVcUpTime"), ("HUAWEI-PWE3-MIB", "hwPWOAMSync"), ("HUAWEI-PWE3-MIB", "hwPWVCForBfdIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcDelayTime"), ("HUAWEI-PWE3-MIB", "hwPWVcReroutePolicy"), ("HUAWEI-PWE3-MIB", "hwPWVcResumeTime"), ("HUAWEI-PWE3-MIB", "hwPWVcRerouteReason"), ("HUAWEI-PWE3-MIB", "hwPWVcLastRerouteTime"), ("HUAWEI-PWE3-MIB", "hwPWVcManualSetFault"), ("HUAWEI-PWE3-MIB", "hwPWVcActive"), ("HUAWEI-PWE3-MIB", "hwPWVcVrIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcVrID"), ("HUAWEI-PWE3-MIB", "hwPWBFDDetectMultiplier"), ("HUAWEI-PWE3-MIB", "hwPWBFDMinReceiveInterval"), ("HUAWEI-PWE3-MIB", "hwPWBFDMinTransmitInterval"), ("HUAWEI-PWE3-MIB", "hwPWDynamicBFDDetect"), ("HUAWEI-PWE3-MIB", "hwPWBFDRemoteVcID"), ("HUAWEI-PWE3-MIB", "hwPWEthOamType"), ("HUAWEI-PWE3-MIB", "hwPWCfmMaIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcUpStartTime"), ("HUAWEI-PWE3-MIB", "hwPWVcUpSumTime"), ("HUAWEI-PWE3-MIB", "hwPWVcIfName"), ("HUAWEI-PWE3-MIB", "hwPWVcRowStatus"), ("HUAWEI-PWE3-MIB", "hwPWVcAtmPackOvertime"), ("HUAWEI-PWE3-MIB", "hwPWVcPwJitterBufferDepth"), ("HUAWEI-PWE3-MIB", "hwPWVcPwTdmEncapsulationNum"), ("HUAWEI-PWE3-MIB", "hwPWVcPwIdleCode"), ("HUAWEI-PWE3-MIB", "hwPWVcPwRtpHeader"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchTnlPolicyName"), ("HUAWEI-PWE3-MIB", "hwPWVcCfmMdIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcCfmMaName"), ("HUAWEI-PWE3-MIB", "hwPWVcCfmMdName"), ("HUAWEI-PWE3-MIB", "hwPWVcRawOrTagged"), ("HUAWEI-PWE3-MIB", "hwPWVcInterworkingType"), ("HUAWEI-PWE3-MIB", "hwPWVcCir"), ("HUAWEI-PWE3-MIB", "hwPWVcPir"), ("HUAWEI-PWE3-MIB", "hwPWVcQosProfile"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchCir"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchPir"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchQosProfile"), ("HUAWEI-PWE3-MIB", "hwPWVcTrigger"), ("HUAWEI-PWE3-MIB", "hwPWVcEnableACOAM"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchVrIfIndex"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchVrID"), ("HUAWEI-PWE3-MIB", "hwPWVcQosParaFromPWT"), ("HUAWEI-PWE3-MIB", "hwPWVcBfdParaFromPWT"), ("HUAWEI-PWE3-MIB", "hwPwVcNegotiateMode"), ("HUAWEI-PWE3-MIB", "hwPwVcIsBypass"), ("HUAWEI-PWE3-MIB", "hwPwVcIsAdmin"), ("HUAWEI-PWE3-MIB", "hwPwVcAdminPwIfIndex"), ("HUAWEI-PWE3-MIB", "hwPwVcAdminPwLinkStatus"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchAdminPwIfIndex"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchAdminPwLinkStatus"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupAdminPwIfIndex"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupAdminPwLinkStatus"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcId"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcPeerAddrType"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcReceiveLabel"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcSendLabel"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcTnlPolicyName"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcCir"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcPir"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcQosProfile"), ("HUAWEI-PWE3-MIB", "hwPwVcSlaveMasterMode"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchVcSlaveMasterMode"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcSlaveMasterMode"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchVcActive"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcActive"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchCwTrans"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchVcServiceName"), ("HUAWEI-PWE3-MIB", "hwPwVcSwitchBackupVcServiceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWVcGroup = hwPWVcGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcGroup.setDescription("The Pwe3's VC group.")
hwPWVcTnlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 2)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcTnlType"), ("HUAWEI-PWE3-MIB", "hwPWTnlForBfdIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWVcTnlGroup = hwPWVcTnlGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTnlGroup.setDescription("The PWE3's VC Tunnel group.")
hwPWVcStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 3)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcStatisticsRcvPkts"), ("HUAWEI-PWE3-MIB", "hwPWVcStatisticsRcvBytes"), ("HUAWEI-PWE3-MIB", "hwPWVcStatisticsSndPkts"), ("HUAWEI-PWE3-MIB", "hwPWVcStatisticsSndBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWVcStatisticsGroup = hwPWVcStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStatisticsGroup.setDescription("The PWE3's VC Statistics group.")
hwPWRemoteVcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 4)).setObjects(("HUAWEI-PWE3-MIB", "hwPWRemoteVcID"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcType"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcStatus"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcGroupID"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcMtu"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcCtrlword"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcMaxAtmCells"), ("HUAWEI-PWE3-MIB", "hwPWRemoteVcNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWRemoteVcGroup = hwPWRemoteVcGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWRemoteVcGroup.setDescription("The PWE3's Remote VC group.")
hwPWTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 5)).setObjects(("HUAWEI-PWE3-MIB", "hwPWTemplatePeerAddrType"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePeerAddr"), ("HUAWEI-PWE3-MIB", "hwPWTemplateCtrlword"), ("HUAWEI-PWE3-MIB", "hwPWTemplateVCCV"), ("HUAWEI-PWE3-MIB", "hwPWTemplateFrag"), ("HUAWEI-PWE3-MIB", "hwPWTemplateBandwidth"), ("HUAWEI-PWE3-MIB", "hwPWTemplateTnlPolicyName"), ("HUAWEI-PWE3-MIB", "hwPWTemplateQoSBehaviorIndex"), ("HUAWEI-PWE3-MIB", "hwPWTemplateExplicitPathName"), ("HUAWEI-PWE3-MIB", "hwPWTemplateBFDDetectMultiplier"), ("HUAWEI-PWE3-MIB", "hwPWTemplateBFDMinReceiveInterval"), ("HUAWEI-PWE3-MIB", "hwPWTemplateBFDMinTransmitInterval"), ("HUAWEI-PWE3-MIB", "hwPWTemplateDynamicBFDDetect"), ("HUAWEI-PWE3-MIB", "hwPWTemplateMaxAtmCells"), ("HUAWEI-PWE3-MIB", "hwPWTemplateAtmPackOvertime"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePwJitterBufferDepth"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePwTdmEncapsulationNum"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePwIdleCode"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePwRtpHeader"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePwCCSeqEnable"), ("HUAWEI-PWE3-MIB", "hwPWTemplateCir"), ("HUAWEI-PWE3-MIB", "hwPWTemplatePir"), ("HUAWEI-PWE3-MIB", "hwPWTemplateQosProfile"), ("HUAWEI-PWE3-MIB", "hwPWTemplateFlowLabel"), ("HUAWEI-PWE3-MIB", "hwPWTemplateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWTemplateGroup = hwPWTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWTemplateGroup.setDescription("The PWE3's Template group.")
hwPWNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 6)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcSwitchNotifEnable"), ("HUAWEI-PWE3-MIB", "hwPWVcUpDownNotifEnable"), ("HUAWEI-PWE3-MIB", "hwPWVcDeletedNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWNotificationControlGroup = hwPWNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWNotificationControlGroup.setDescription("The PWE3's Notification Control group.")
hwPWVcStateChangeReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 7)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcStateChangeReason"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchRmtID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWVcStateChangeReasonGroup = hwPWVcStateChangeReasonGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcStateChangeReasonGroup.setDescription("The PWE3's Vc State Reason group.")
hwPWVcNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 8)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcSwitchWtoP"), ("HUAWEI-PWE3-MIB", "hwPWVcSwitchPtoW"), ("HUAWEI-PWE3-MIB", "hwPWVcDown"), ("HUAWEI-PWE3-MIB", "hwPWVcUp"), ("HUAWEI-PWE3-MIB", "hwPWVcDeleted"), ("HUAWEI-PWE3-MIB", "hwPWVcBackup"), ("HUAWEI-PWE3-MIB", "hwLdpPWVcDown"), ("HUAWEI-PWE3-MIB", "hwLdpPWVcUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWVcNotificationGroup = hwPWVcNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcNotificationGroup.setDescription("The PWE3's VC Notification group.")
hwLdpPWStateChangeReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 9)).setObjects(("HUAWEI-PWE3-MIB", "hwLdpPWStateChangeReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdpPWStateChangeReasonGroup = hwLdpPWStateChangeReasonGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdpPWStateChangeReasonGroup.setDescription('The LDP PW VC State Reason group.')
hwPWVcTDMPerfCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 2, 10)).setObjects(("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentMissingPkts"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentJtrBfrOverruns"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentJtrBfrUnderruns"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentMisOrderDropped"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentMalformedPkt"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentESs"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentSESs"), ("HUAWEI-PWE3-MIB", "hwPWVcTDMPerfCurrentUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWVcTDMPerfCurrentGroup = hwPWVcTDMPerfCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWVcTDMPerfCurrentGroup.setDescription("The PWE3's VC TDM performance information group.")
hwL2vpnSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3))
hwSvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcID"), ("HUAWEI-PWE3-MIB", "hwSvcType"), ("HUAWEI-PWE3-MIB", "hwSvcPeerAddrType"), ("HUAWEI-PWE3-MIB", "hwSvcPeerAddr"), ("HUAWEI-PWE3-MIB", "hwSvcStatus"), ("HUAWEI-PWE3-MIB", "hwSvcInboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcOutboundLabel"), ("HUAWEI-PWE3-MIB", "hwSvcGroupID"), ("HUAWEI-PWE3-MIB", "hwSvcAcStatus"), ("HUAWEI-PWE3-MIB", "hwSvcACOAMStatus"), ("HUAWEI-PWE3-MIB", "hwSvcMtu"), ("HUAWEI-PWE3-MIB", "hwSvcCtrlWord"), ("HUAWEI-PWE3-MIB", "hwSvcVCCV"), ("HUAWEI-PWE3-MIB", "hwSvcBandWidth"), ("HUAWEI-PWE3-MIB", "hwSvcMaxAtmCells"), ("HUAWEI-PWE3-MIB", "hwSvcTnlPolicyName"), ("HUAWEI-PWE3-MIB", "hwSvcQoSBehaviorIndex"), ("HUAWEI-PWE3-MIB", "hwSvcPWTemplateName"), ("HUAWEI-PWE3-MIB", "hwSvcUpTime"), ("HUAWEI-PWE3-MIB", "hwSvcOAMSync"), ("HUAWEI-PWE3-MIB", "hwSvcForBfdIndex"), ("HUAWEI-PWE3-MIB", "hwSvcSecondary"), ("HUAWEI-PWE3-MIB", "hwSvcDelayTime"), ("HUAWEI-PWE3-MIB", "hwSvcReroutePolicy"), ("HUAWEI-PWE3-MIB", "hwSvcResumeTime"), ("HUAWEI-PWE3-MIB", "hwSvcRerouteReason"), ("HUAWEI-PWE3-MIB", "hwSvcLastRerouteTime"), ("HUAWEI-PWE3-MIB", "hwSvcManualSetFault"), ("HUAWEI-PWE3-MIB", "hwSvcActive"), ("HUAWEI-PWE3-MIB", "hwSvcUpStartTime"), ("HUAWEI-PWE3-MIB", "hwSvcUpSumTime"), ("HUAWEI-PWE3-MIB", "hwSvcAtmPackOvertime"), ("HUAWEI-PWE3-MIB", "hwSvcPwJitterBufferDepth"), ("HUAWEI-PWE3-MIB", "hwSvcPwTdmEncapsulationNum"), ("HUAWEI-PWE3-MIB", "hwSvcPwIdleCode"), ("HUAWEI-PWE3-MIB", "hwSvcPwRtpHeader"), ("HUAWEI-PWE3-MIB", "hwSvcRawOrTagged"), ("HUAWEI-PWE3-MIB", "hwSvcInterworkingType"), ("HUAWEI-PWE3-MIB", "hwSvcCir"), ("HUAWEI-PWE3-MIB", "hwSvcPir"), ("HUAWEI-PWE3-MIB", "hwSvcQosProfile"), ("HUAWEI-PWE3-MIB", "hwSvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSvcGroup = hwSvcGroup.setStatus('current')
if mibBuilder.loadTexts: hwSvcGroup.setDescription("The L2vpn's SVC group.")
hwSvcTnlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3, 2)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcTnlType"), ("HUAWEI-PWE3-MIB", "hwSvcTnlForBfdIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSvcTnlGroup = hwSvcTnlGroup.setStatus('current')
if mibBuilder.loadTexts: hwSvcTnlGroup.setDescription("The L2vpn's SVC Tunnel group.")
hwSvcStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3, 3)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcStatisticsRcvPkts"), ("HUAWEI-PWE3-MIB", "hwSvcStatisticsRcvBytes"), ("HUAWEI-PWE3-MIB", "hwSvcStatisticsSndPkts"), ("HUAWEI-PWE3-MIB", "hwSvcStatisticsSndBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSvcStatisticsGroup = hwSvcStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwSvcStatisticsGroup.setDescription("The L2vpn's SVC Statistics group.")
hwSvcNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3, 4)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcSwitchNotifEnable"), ("HUAWEI-PWE3-MIB", "hwSvcUpDownNotifEnable"), ("HUAWEI-PWE3-MIB", "hwSvcDeletedNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSvcNotificationControlGroup = hwSvcNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwSvcNotificationControlGroup.setDescription("The L2vpn SVC's Notification Control group.")
hwSvcStateChangeReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3, 5)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcStateChangeReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSvcStateChangeReasonGroup = hwSvcStateChangeReasonGroup.setStatus('current')
if mibBuilder.loadTexts: hwSvcStateChangeReasonGroup.setDescription("The L2vpn's SVc State Reason group.")
hwSvcNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 3, 6)).setObjects(("HUAWEI-PWE3-MIB", "hwSvcSwitchWtoP"), ("HUAWEI-PWE3-MIB", "hwSvcSwitchPtoW"), ("HUAWEI-PWE3-MIB", "hwSvcDown"), ("HUAWEI-PWE3-MIB", "hwSvcUp"), ("HUAWEI-PWE3-MIB", "hwSvcDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSvcNotificationGroup = hwSvcNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwSvcNotificationGroup.setDescription("The L2vpn's SVC Notification group.")
hwL2vpnPWTableMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 4))
hwPWTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 4, 3, 4, 1)).setObjects(("HUAWEI-PWE3-MIB", "hwPWInterfaceIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPWTableGroup = hwPWTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwPWTableGroup.setDescription('The PW Table Group.')
mibBuilder.exportSymbols("HUAWEI-PWE3-MIB", hwPWTemplateVCCV=hwPWTemplateVCCV, hwPWVcVCCV=hwPWVcVCCV, hwPWVcUp=hwPWVcUp, hwL2VpnPwe3=hwL2VpnPwe3, hwSvcInboundLabel=hwSvcInboundLabel, hwPwVcSwitchAdminPwIfIndex=hwPwVcSwitchAdminPwIfIndex, hwPWVcQosProfile=hwPWVcQosProfile, hwSvcInterworkingType=hwSvcInterworkingType, hwSvcTnlEntry=hwSvcTnlEntry, hwPWEntry=hwPWEntry, HWLdpPwStateChangeReason=HWLdpPwStateChangeReason, hwPWVcTDMPerfCurrentMissingPkts=hwPWVcTDMPerfCurrentMissingPkts, hwPWVcBackup=hwPWVcBackup, hwSvcStateChangeReason=hwSvcStateChangeReason, hwPWTemplatePwTdmEncapsulationNum=hwPWTemplatePwTdmEncapsulationNum, hwPWVcActive=hwPWVcActive, hwPWVcExplicitPathName=hwPWVcExplicitPathName, hwPWVcIfName=hwPWVcIfName, hwPWTemplateAtmPackOvertime=hwPWTemplateAtmPackOvertime, hwPWTemplatePwCCSeqEnable=hwPWTemplatePwCCSeqEnable, hwSvcEntry=hwSvcEntry, hwPWTemplateTnlPolicyName=hwPWTemplateTnlPolicyName, hwPWVCForBfdIndex=hwPWVCForBfdIndex, hwPWVcTnlEntry=hwPWVcTnlEntry, hwSvcStatisticsTable=hwSvcStatisticsTable, hwPWTemplateBFDDetectMultiplier=hwPWTemplateBFDDetectMultiplier, hwSvcStatisticsRcvBytes=hwSvcStatisticsRcvBytes, hwPWVcRerouteReason=hwPWVcRerouteReason, hwSvcSwitchWtoP=hwSvcSwitchWtoP, hwPWVcQoSBehaviorIndex=hwPWVcQoSBehaviorIndex, hwSvcTnlType=hwSvcTnlType, hwL2vpnSvcMIBTraps=hwL2vpnSvcMIBTraps, hwPWVcUpStartTime=hwPWVcUpStartTime, hwPwVcSwitchVcActive=hwPwVcSwitchVcActive, hwSvcOAMSync=hwSvcOAMSync, hwSvcLastRerouteTime=hwSvcLastRerouteTime, hwPWVcCfmMdIndex=hwPWVcCfmMdIndex, hwPWVcPwIdleCode=hwPWVcPwIdleCode, hwPWVcSwitchVrID=hwPWVcSwitchVrID, hwPWTemplatePwJitterBufferDepth=hwPWTemplatePwJitterBufferDepth, hwPWVcPwTdmEncapsulationNum=hwPWVcPwTdmEncapsulationNum, hwLdpPWVcUp=hwLdpPWVcUp, hwPWVcGroup=hwPWVcGroup, hwPWRemoteVcMtu=hwPWRemoteVcMtu, hwSvcStatisticsSndBytes=hwSvcStatisticsSndBytes, hwSvcTnlIndex=hwSvcTnlIndex, hwPwVcSwitchBackupVcActive=hwPwVcSwitchBackupVcActive, hwPWRemoteVcGroup=hwPWRemoteVcGroup, hwSvcGroup=hwSvcGroup, hwPWVcAcStatus=hwPWVcAcStatus, hwPWRemoteVcCtrlword=hwPWRemoteVcCtrlword, hwPWVcUpDownNotifEnable=hwPWVcUpDownNotifEnable, hwSvcNotificationGroup=hwSvcNotificationGroup, hwPWVcType=hwPWVcType, hwPWVcSwitchInboundLabel=hwPWVcSwitchInboundLabel, hwPWVcStatisticsRcvPkts=hwPWVcStatisticsRcvPkts, hwSvcStatus=hwSvcStatus, hwSvcDeletedNotifEnable=hwSvcDeletedNotifEnable, hwSvcStatisticsSndPkts=hwSvcStatisticsSndPkts, hwPWBFDDetectMultiplier=hwPWBFDDetectMultiplier, hwPWVcCfmMdName=hwPWVcCfmMdName, hwPWVcManualSetFault=hwPWVcManualSetFault, hwPwVcSlaveMasterMode=hwPwVcSlaveMasterMode, hwPWTemplateFrag=hwPWTemplateFrag, hwPWVcTDMPerfCurrentMalformedPkt=hwPWVcTDMPerfCurrentMalformedPkt, hwSvcRowStatus=hwSvcRowStatus, hwSvcNotificationControlGroup=hwSvcNotificationControlGroup, hwPwVcSwitchBackupVcCir=hwPwVcSwitchBackupVcCir, hwPWRemoteVcTable=hwPWRemoteVcTable, hwSvcAcStatus=hwSvcAcStatus, hwPWVcTDMPerfCurrentUASs=hwPWVcTDMPerfCurrentUASs, PYSNMP_MODULE_ID=hwL2VpnPwe3, hwSvcStatisticsEntry=hwSvcStatisticsEntry, hwPWVcSwitchID=hwPWVcSwitchID, hwSvcPWTemplateName=hwSvcPWTemplateName, hwPWVcSwitchPir=hwPWVcSwitchPir, hwPwVcSwitchCwTrans=hwPwVcSwitchCwTrans, hwPWBFDMinReceiveInterval=hwPWBFDMinReceiveInterval, hwPWVcSwitchPeerAddrType=hwPWVcSwitchPeerAddrType, hwPWVcSwitchTnlPolicyName=hwPWVcSwitchTnlPolicyName, hwPWVcPir=hwPWVcPir, hwPwVcAdminPwIfIndex=hwPwVcAdminPwIfIndex, hwSvcQoSBehaviorIndex=hwSvcQoSBehaviorIndex, hwPWVcEntry=hwPWVcEntry, hwPwVcIsBypass=hwPwVcIsBypass, hwPWVcStatus=hwPWVcStatus, hwPWVcReroutePolicy=hwPWVcReroutePolicy, hwPWVcMtu=hwPWVcMtu, hwPWVcLastRerouteTime=hwPWVcLastRerouteTime, hwPwVcSwitchBackupVcPeerAddrType=hwPwVcSwitchBackupVcPeerAddrType, hwSvcCtrlWord=hwSvcCtrlWord, hwSvcUpSumTime=hwSvcUpSumTime, hwSvcPwTdmEncapsulationNum=hwSvcPwTdmEncapsulationNum, hwSvcRawOrTagged=hwSvcRawOrTagged, hwPWTemplateExplicitPathName=hwPWTemplateExplicitPathName, hwPWVcNotificationGroup=hwPWVcNotificationGroup, hwPWTemplatePir=hwPWTemplatePir, hwPWTemplateMaxAtmCells=hwPWTemplateMaxAtmCells, hwPWRemoteVcMaxAtmCells=hwPWRemoteVcMaxAtmCells, hwPwVcAdminPwLinkStatus=hwPwVcAdminPwLinkStatus, hwPWTemplatePeerAddrType=hwPWTemplatePeerAddrType, hwPWInterfaceIndex=hwPWInterfaceIndex, hwPWVcPeerAddrType=hwPWVcPeerAddrType, hwPWVcVrIfIndex=hwPWVcVrIfIndex, hwPWTemplateDynamicBFDDetect=hwPWTemplateDynamicBFDDetect, hwPWVcEnableACOAM=hwPWVcEnableACOAM, hwPwVcSwitchBackupVcReceiveLabel=hwPwVcSwitchBackupVcReceiveLabel, hwPWTemplateBandwidth=hwPWTemplateBandwidth, hwPWVcUpTime=hwPWVcUpTime, hwPwVcSwitchBackupAdminPwLinkStatus=hwPwVcSwitchBackupAdminPwLinkStatus, hwPWVcStatisticsTable=hwPWVcStatisticsTable, hwPWVcTnlIndex=hwPWVcTnlIndex, hwPWVcStatisticsSndPkts=hwPWVcStatisticsSndPkts, hwPWVcCtrlWord=hwPWVcCtrlWord, hwLdpPWStateChangeReasonGroup=hwLdpPWStateChangeReasonGroup, hwPWTemplateQosProfile=hwPWTemplateQosProfile, hwPwVcSwitchBackupVcId=hwPwVcSwitchBackupVcId, hwSvcActive=hwSvcActive, hwPWVcTDMPerfCurrentEntry=hwPWVcTDMPerfCurrentEntry, hwSvcPwRtpHeader=hwSvcPwRtpHeader, hwPwe3MIBObjects=hwPwe3MIBObjects, hwSvcUpDownNotifEnable=hwSvcUpDownNotifEnable, hwPWTemplateGroup=hwPWTemplateGroup, hwSvcReroutePolicy=hwSvcReroutePolicy, hwSvcPwJitterBufferDepth=hwSvcPwJitterBufferDepth, hwLdpPWStateChangeReason=hwLdpPWStateChangeReason, hwPWTemplatePwIdleCode=hwPWTemplatePwIdleCode, hwPWVcID=hwPWVcID, hwPWVcTnlPolicyName=hwPWVcTnlPolicyName, hwPWVcTDMPerfCurrentESs=hwPWVcTDMPerfCurrentESs, hwPWTemplateBFDMinTransmitInterval=hwPWTemplateBFDMinTransmitInterval, hwSvcStateChangeReasonGroup=hwSvcStateChangeReasonGroup, hwPwVcSwitchBackupVcSendLabel=hwPwVcSwitchBackupVcSendLabel, hwPWTnlForBfdIndex=hwPWTnlForBfdIndex, hwSvcBandWidth=hwSvcBandWidth, hwPWVcTDMPerfCurrentMisOrderDropped=hwPWVcTDMPerfCurrentMisOrderDropped, hwPWTemplateName=hwPWTemplateName, hwPWVcCir=hwPWVcCir, hwPWTableGroup=hwPWTableGroup, hwSvcTnlTable=hwSvcTnlTable, hwPWVcOutboundLabel=hwPWVcOutboundLabel, hwPWTableObjects=hwPWTableObjects, hwPWRemoteVcGroupID=hwPWRemoteVcGroupID, hwPWVcStateChangeReason=hwPWVcStateChangeReason, hwSvcQosProfile=hwSvcQosProfile, hwSvcUpTime=hwSvcUpTime, hwSvcPwIdleCode=hwSvcPwIdleCode, hwPWVcSwitchRmtID=hwPWVcSwitchRmtID, hwPWVcInboundLabel=hwPWVcInboundLabel, hwPWVcBfdParaFromPWT=hwPWVcBfdParaFromPWT, hwPWVcSwitchNotifEnable=hwPWVcSwitchNotifEnable, hwSvcDeleted=hwSvcDeleted, hwSvcRerouteReason=hwSvcRerouteReason, hwPWVcQosParaFromPWT=hwPWVcQosParaFromPWT, hwPWRemoteVcType=hwPWRemoteVcType, hwPWVcRowStatus=hwPWVcRowStatus, hwPWVcRawOrTagged=hwPWVcRawOrTagged, hwPWTemplateMIBTraps=hwPWTemplateMIBTraps, hwPWVcACOAMStatus=hwPWVcACOAMStatus, hwPWBFDMinTransmitInterval=hwPWBFDMinTransmitInterval, hwPWVcSwitchQosProfile=hwPWVcSwitchQosProfile, hwPWVcSwitchVrIfIndex=hwPWVcSwitchVrIfIndex, hwPWType=hwPWType, hwPwVcSwitchBackupVcPir=hwPwVcSwitchBackupVcPir, hwPWVcSwitchSign=hwPWVcSwitchSign, hwPwVcSwitchBackupVcQosProfile=hwPwVcSwitchBackupVcQosProfile, hwPWTemplateFlowLabel=hwPWTemplateFlowLabel, hwPWVcTDMPerfCurrentJtrBfrOverruns=hwPWVcTDMPerfCurrentJtrBfrOverruns, hwPWVcGroupID=hwPWVcGroupID, hwPWVcUpSumTime=hwPWVcUpSumTime, hwPwe3MIBTraps=hwPwe3MIBTraps, hwPWVcTDMPerfCurrentTable=hwPWVcTDMPerfCurrentTable, hwSvcResumeTime=hwSvcResumeTime, hwPwVcSwitchBackupAdminPwIfIndex=hwPwVcSwitchBackupAdminPwIfIndex, hwPWTemplateRowStatus=hwPWTemplateRowStatus, hwPwe3MIBGroups=hwPwe3MIBGroups, hwSvcType=hwSvcType, hwSvcVCCV=hwSvcVCCV, hwPWVcStatisticsSndBytes=hwPWVcStatisticsSndBytes, hwSvcDelayTime=hwSvcDelayTime, hwSvcPir=hwSvcPir, hwPWVcPwRtpHeader=hwPWVcPwRtpHeader, hwPWRemoteVcNotif=hwPWRemoteVcNotif, hwPWTemplateQoSBehaviorIndex=hwPWTemplateQoSBehaviorIndex, hwL2vpnPWTableMIBGroups=hwL2vpnPWTableMIBGroups, hwPWVcTable=hwPWVcTable, hwPwVcSwitchAdminPwLinkStatus=hwPwVcSwitchAdminPwLinkStatus, hwPWRemoteVcEntry=hwPWRemoteVcEntry, hwLdpPWVcDown=hwLdpPWVcDown, hwSvcAtmPackOvertime=hwSvcAtmPackOvertime, hwPwe3MIBCompliance=hwPwe3MIBCompliance, hwPWVcPwJitterBufferDepth=hwPWVcPwJitterBufferDepth, hwPWVcSwitchCir=hwPWVcSwitchCir, hwPwVcSwitchVcServiceName=hwPwVcSwitchVcServiceName, hwPWTemplateBFDMinReceiveInterval=hwPWTemplateBFDMinReceiveInterval, hwPWVcDelayTime=hwPWVcDelayTime, hwSvcStatisticsGroup=hwSvcStatisticsGroup, hwPWVcTnlGroup=hwPWVcTnlGroup, hwSvcUp=hwSvcUp, hwSvcPeerAddrType=hwSvcPeerAddrType, hwPWVcStatisticsGroup=hwPWVcStatisticsGroup, hwPwe3MIBCompliances=hwPwe3MIBCompliances, hwL2Vpn=hwL2Vpn, hwPWVcInterworkingType=hwPWVcInterworkingType, hwPwe3Objects=hwPwe3Objects, hwPWVcSwitchPeerAddr=hwPWVcSwitchPeerAddr, hwPwVcIsAdmin=hwPwVcIsAdmin, hwPWOAMSync=hwPWOAMSync, hwPWVcTnlTable=hwPWVcTnlTable, hwSvcOutboundLabel=hwSvcOutboundLabel, hwPWTemplatePeerAddr=hwPWTemplatePeerAddr, hwPWVcMaxAtmCells=hwPWVcMaxAtmCells, hwPWVcCfmMaName=hwPWVcCfmMaName, hwPwVcSwitchBackupVcServiceName=hwPwVcSwitchBackupVcServiceName, hwPWVcStatisticsRcvBytes=hwPWVcStatisticsRcvBytes, hwSvcMtu=hwSvcMtu, hwSvcTnlForBfdIndex=hwSvcTnlForBfdIndex, hwPWVcTDMPerfCurrentGroup=hwPWVcTDMPerfCurrentGroup, hwPWBFDRemoteVcID=hwPWBFDRemoteVcID, hwPWVcTrigger=hwPWVcTrigger, hwSvcSwitchPtoW=hwSvcSwitchPtoW, hwPwVcSwitchBackupVcSlaveMasterMode=hwPwVcSwitchBackupVcSlaveMasterMode, hwPwe3MIBConformance=hwPwe3MIBConformance, hwSvcID=hwSvcID, hwPWTemplatePwRtpHeader=hwPWTemplatePwRtpHeader, hwSvcMaxAtmCells=hwSvcMaxAtmCells, hwSvcIfIndex=hwSvcIfIndex, hwPWEthOamType=hwPWEthOamType, hwPWVcIfIndex=hwPWVcIfIndex, hwSvcTnlPolicyName=hwSvcTnlPolicyName, hwPWTemplateCir=hwPWTemplateCir, hwPWVcStatisticsEntry=hwPWVcStatisticsEntry, hwPWVcDeleted=hwPWVcDeleted, hwPWRemoteVcStatus=hwPWRemoteVcStatus, hwPWVcTnlType=hwPWVcTnlType, hwSvcTnlGroup=hwSvcTnlGroup, hwPWVcResumeTime=hwPWVcResumeTime, hwPWVcTemplateName=hwPWVcTemplateName, hwPWVcSwitchOutboundLabel=hwPWVcSwitchOutboundLabel, hwSvcPeerAddr=hwSvcPeerAddr, hwPWId=hwPWId, hwPwVcSwitchVcSlaveMasterMode=hwPwVcSwitchVcSlaveMasterMode, hwPWCfmMaIndex=hwPWCfmMaIndex, hwPWTemplateCannotDeleted=hwPWTemplateCannotDeleted, hwPWVcSwitchPtoW=hwPWVcSwitchPtoW, hwPWVcAtmPackOvertime=hwPWVcAtmPackOvertime, hwPWVcSwitchWtoP=hwPWVcSwitchWtoP, hwPWTemplateCtrlword=hwPWTemplateCtrlword, hwPWVcTDMPerfCurrentJtrBfrUnderruns=hwPWVcTDMPerfCurrentJtrBfrUnderruns, hwSvcGroupID=hwSvcGroupID, hwPWRemoteVcID=hwPWRemoteVcID, hwPWVcDeletedNotifEnable=hwPWVcDeletedNotifEnable, hwPWVcBandWidth=hwPWVcBandWidth, hwPwVcNegotiateMode=hwPwVcNegotiateMode)
mibBuilder.exportSymbols("HUAWEI-PWE3-MIB", hwSvcSwitchNotifEnable=hwSvcSwitchNotifEnable, hwSvcStatisticsRcvPkts=hwSvcStatisticsRcvPkts, hwPWVcDown=hwPWVcDown, hwPWVcTDMPerfCurrentSESs=hwPWVcTDMPerfCurrentSESs, hwPWVcStateChangeReasonGroup=hwPWVcStateChangeReasonGroup, hwPWVcPeerAddr=hwPWVcPeerAddr, hwPWVcVrID=hwPWVcVrID, hwPWVcSecondary=hwPWVcSecondary, hwPwVcSwitchBackupVcPeerAddr=hwPwVcSwitchBackupVcPeerAddr, hwPWNotificationControlGroup=hwPWNotificationControlGroup, hwSvcManualSetFault=hwSvcManualSetFault, hwSvcObjects=hwSvcObjects, hwSvcACOAMStatus=hwSvcACOAMStatus, hwSvcUpStartTime=hwSvcUpStartTime, hwPwVcSwitchBackupVcTnlPolicyName=hwPwVcSwitchBackupVcTnlPolicyName, hwPWTable=hwPWTable, hwSvcTable=hwSvcTable, hwPWTemplateTable=hwPWTemplateTable, hwSvcSecondary=hwSvcSecondary, hwPWPeerIp=hwPWPeerIp, hwL2vpnSvcMIBGroups=hwL2vpnSvcMIBGroups, hwSvcForBfdIndex=hwSvcForBfdIndex, hwSvcCir=hwSvcCir, hwPWDynamicBFDDetect=hwPWDynamicBFDDetect, hwSvcDown=hwSvcDown, hwPWTemplateEntry=hwPWTemplateEntry)
