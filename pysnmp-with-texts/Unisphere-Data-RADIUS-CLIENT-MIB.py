#
# PySNMP MIB module Unisphere-Data-RADIUS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-RADIUS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:32:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, Unsigned32, MibIdentifier, Counter64, iso, Bits, NotificationType, Gauge32, TimeTicks, ModuleIdentity, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter64", "iso", "Bits", "NotificationType", "Gauge32", "TimeTicks", "ModuleIdentity", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
usdRadiusClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19))
usdRadiusClientMIB.setRevisions(('2002-05-13 17:54', '2001-10-16 19:54', '2001-09-06 21:08', '2001-03-22 15:20', '2000-12-19 16:40', '2000-05-05 19:44', '1999-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdRadiusClientMIB.setRevisionsDescriptions(('Added objects (parameters) to indicate which RADIUS attributes should be included/excluded from RADIUS packets.', 'Added usdRadiusClientNasIpAddrUse.', 'Added usdRadiusClientRollover and usdRadiusClientCallingStationIdFormat.', 'Added usdRadiusClientEthernetPortType, usdRadiusClientIncludeIpAddrInAcctStart, and usdRadiusClientIncludeAcctSessionIdInAccessReq.', 'Added support for the RADIUS accounting backoff mechanism.', 'Added support for client source address.', 'Initial version of this MIB module, derived from IETF Internet Drafts of RADIUS Client MIBs for Authentication and Accounting.',))
if mibBuilder.loadTexts: usdRadiusClientMIB.setLastUpdated('200205131754Z')
if mibBuilder.loadTexts: usdRadiusClientMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdRadiusClientMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdRadiusClientMIB.setDescription('The RADIUS Client MIB for the Unisphere Networks enterprise.')
usdRadiusClientObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1))
usdRadiusGeneralClient = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1))
usdRadiusAuthClient = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2))
usdRadiusAcctClient = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3))
usdRadiusClientIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusClientIdentifier.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIdentifier.setDescription('The NAS-Identifier of the RADIUS client.')
usdRadiusClientAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("direct", 0), ("roundRobin", 1))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientAlgorithm.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientAlgorithm.setDescription('The algorithm used by the client when multiple authentication/accounting servers are configured: direct Use servers in order of precedence, each time beginning with the highest precedence server and proceeding to lower precedence servers if the the RADIUS request fails, until the request succeeds or all servers have been tried. roundRobin Use servers in round-robin order, each time beginning with the next round-robin-ordered server and proceeding cyclically through servers if the RADIUS request fails, until the request succeeds or all servers have been tried.')
usdRadiusClientSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientSourceAddress.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientSourceAddress.setDescription('The source address used by the RADIUS client in requests to the RADIUS server. The RADIUS server returns responses from this address. Setting this object to 0.0.0.0 will reset the value to its default.')
usdRadiusClientUdpChecksum = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientUdpChecksum.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientUdpChecksum.setDescription('Enables/disables the checksum calculations on RADIUS UDP packets.')
usdRadiusClientNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientNasIdentifier.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientNasIdentifier.setDescription('The identifier used by the client for the value of NAS-Identifier attribute (number 32) in access and accounting requests. The default is to use the system name.')
usdRadiusClientDslPortType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 11, 12, 13, 14, 16))).clone(namedValues=NamedValues(("virtual", 5), ("sdsl", 11), ("adsl-cap", 12), ("adsl-dmt", 13), ("idsl", 14), ("xdsl", 16))).clone('xdsl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientDslPortType.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientDslPortType.setDescription('The value to use in the NAS-Port-Type RADIUS Attribute (attribute number 61) for DSL interfaces in the RADIUS access and accounting messages: virtual Used for Virtual interfaces. sdsl Used for Symmetric DSL. adsl-cap Used for Asymmetric DSL, Carrierless Amplitude Phase Modulation. adsl-dmt Used for Asymmetric DSL, Discrete Multi-Tone. idsl Used for ISDN Digital Subscriber Line. xdsl Used for Digital Subscriber Line of unknown type.')
usdRadiusClientTunnelAccounting = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientTunnelAccounting.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientTunnelAccounting.setDescription('Enables/disables the tunnel accounting feature, which causes the system to send tunnel and session accounting requests.')
usdRadiusClientAcctSessionIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("decimal", 0), ("description", 1))).clone('description')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientAcctSessionIdFormat.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientAcctSessionIdFormat.setDescription('The format used by the client for the Acct-Session-ID attribute (attribute number 44): decimal Use an ASCII decimal value only in the Acct-Session-ID attribute. description Use an ASCII description value which includes the interface type (i.e. ATM), slot, port, and circuit number (VPI and VCI for ATM), and a hexidecimal value in the Acct-Session-ID attribute.')
usdRadiusClientNasPortFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("xssssppp", 0), ("ssssxppp", 1))).clone('ssssxppp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientNasPortFormat.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientNasPortFormat.setDescription('The format used by the client for the NAS-Port attribute (attribute number 5): xssssppp In the NAS-Port attribute (attribute 5) use format of 0 bit, followed by 4 bits for the slot number, 3 bits for the port number, and finally, the circuit number in the remaining bits. ssssxppp In the NAS-Port attribute (attribute 5) use format of 4 bits for the slot number, followed by a 0 bit, 3 bits for the port number and finally, the circuit number in the remaining bits.')
usdRadiusClientCallingStationDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone('#')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientCallingStationDelimiter.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientCallingStationDelimiter.setDescription("The character use as for delimiting fields in the Calling-Station-ID attribute (attribute 31, from RFC 2865) sent by the client. The default value is '#'.")
usdRadiusClientEthernetPortType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 15))).clone(namedValues=NamedValues(("virtual", 5), ("ethernet", 15))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientEthernetPortType.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientEthernetPortType.setDescription('The value to use in the NAS-Port-Type RADIUS Attribute (attribute number 61) for Ethernet interfaces in the RADIUS access and accounting messages: ethernet Used for Ethernet interfaces. virtual Used for Virtual interfaces.')
usdRadiusClientIncludeIpAddrInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeIpAddrInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeIpAddrInAcctStart.setDescription('Enables/disables the inclusion of the Framed-IP-Address attribute in the RADIUS Acct-Start packet.')
usdRadiusClientIncludeAcctSessionIdInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctSessionIdInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctSessionIdInAccessReq.setDescription('Enables/disables the inclusion of the Acct-Session-ID attribute in the RADIUS Access-Request packet.')
usdRadiusClientRollover = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientRollover.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientRollover.setDescription('Enables/disables the rollover to next server on receipt of access-reject.')
usdRadiusClientCallingStationIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("delimited", 0), ("fixedFormat", 1))).clone('delimited')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientCallingStationIdFormat.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientCallingStationIdFormat.setDescription("The format used by the client for the Calling-Station-ID attribute (attribute number 31): delimited In the Calling-Station-ID attribute (attribute 31) use the format '<delimiter><BAS name><delimiter> <interface description><delimiter><layer 2 identifier>'. fixedFomat In the Calling-Station-ID attribute (attribute 31) use the format of 4 bytes for the host name (truncated if needed), 2 digits of slot, 1 digit of port, 3 digits of VPI, followed by 5 digits of VCI.")
usdRadiusClientNasIpAddrUse = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("tunnelClientEndpoint", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientNasIpAddrUse.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientNasIpAddrUse.setDescription("The value used by the client for the NAS-IP-Addr attribute (attribute number 4): normal Use the ERX IP address value in the NAS-IP-Addr attribute (attribute 4). tunnelClientEndpoint Use the Tunnel Client's address value in the NAS-IP-Addr attribute (attribute 4) for tunnel users.")
usdRadiusClientIncludeAcctTunnelConnectionInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctTunnelConnectionInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctTunnelConnectionInAccessReq.setDescription('Enables/disables the inclusion of the Acct-Tunnel-Connection attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeCalledStationIdInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 18), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeCalledStationIdInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeCalledStationIdInAccessReq.setDescription('Enables/disables the inclusion of the Called-Station-ID attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeCallingStationIdInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 19), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeCallingStationIdInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeCallingStationIdInAccessReq.setDescription('Enables/disables the inclusion of the Calling-Station-ID attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeConnectInfoInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeConnectInfoInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeConnectInfoInAccessReq.setDescription('Enables/disables the inclusion of the Connect-Info attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeNasIdentifierInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasIdentifierInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasIdentifierInAccessReq.setDescription('Enables/disables the inclusion of the NAS-Identifier attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeNasPortInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 22), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortInAccessReq.setDescription('Enables/disables the inclusion of the NAS-Port attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeNasPortIdInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortIdInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortIdInAccessReq.setDescription('Enables/disables the inclusion of the NAS-Port-ID attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeNasPortTypeInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 24), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortTypeInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortTypeInAccessReq.setDescription('Enables/disables the inclusion of the NAS-Port-Type attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludePppoeDescriptionInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 25), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludePppoeDescriptionInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludePppoeDescriptionInAccessReq.setDescription('Enables/disables the inclusion of the PPPoE-Description (VSA) attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelClientAuthIdInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 26), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientAuthIdInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientAuthIdInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Client-Auth-Id attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelClientEndpointInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientEndpointInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientEndpointInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Client-Endpoint attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelMediumTypeInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 28), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelMediumTypeInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelMediumTypeInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Medium attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelServerAttributesInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAttributesInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAttributesInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Server attributes (Tunnel attributes for a PPP session terminated on the LNS) in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelServerAuthIdInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 30), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAuthIdInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAuthIdInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Server-Auth-Id attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelServerEndpointInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 31), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerEndpointInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerEndpointInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Server-Endpoint attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeTunnelTypeInAccessReq = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 32), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelTypeInAccessReq.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelTypeInAccessReq.setDescription('Enables/disables the inclusion of the Tunnel-Type attribute in the RADIUS Access-Request packet.')
usdRadiusClientIncludeAcctTunnelConnectionInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 33), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctTunnelConnectionInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctTunnelConnectionInAcctStart.setDescription('Enables/disables the inclusion of the Acct-Tunnel-Connection attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeCalledStationIdInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 34), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeCalledStationIdInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeCalledStationIdInAcctStart.setDescription('Enables/disables the inclusion of the Called-Station-ID attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeCallingStationIdInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 35), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeCallingStationIdInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeCallingStationIdInAcctStart.setDescription('Enables/disables the inclusion of the Calling-Station-ID attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeClassInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 36), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeClassInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeClassInAcctStart.setDescription('Enables/disables the inclusion of the Class attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeConnectInfoInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 37), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeConnectInfoInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeConnectInfoInAcctStart.setDescription('Enables/disables the inclusion of the Connect-Info attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeEgressPolicyNameInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 38), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeEgressPolicyNameInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeEgressPolicyNameInAcctStart.setDescription('Enables/disables the inclusion of the Egress-Policy-Name (VSA) attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeEventTimestampInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 39), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeEventTimestampInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeEventTimestampInAcctStart.setDescription('Enables/disables the inclusion of the Event-Timestamp attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeFramedCompressionInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 40), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedCompressionInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedCompressionInAcctStart.setDescription('Enables/disables the inclusion of the Framed-Compression attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeFramedIpNetmaskInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 41), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedIpNetmaskInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedIpNetmaskInAcctStart.setDescription('Enables/disables the inclusion of the Framed-IP-Netmask attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeIngressPolicyNameInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 42), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeIngressPolicyNameInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeIngressPolicyNameInAcctStart.setDescription('Enables/disables the inclusion of the Ingress-Policy-Name (VSA) attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeNasIdentifierInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 43), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasIdentifierInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasIdentifierInAcctStart.setDescription('Enables/disables the inclusion of the NAS-Identifier attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeNasPortInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 44), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortInAcctStart.setDescription('Enables/disables the inclusion of the NAS-Port attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeNasPortIdInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 45), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortIdInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortIdInAcctStart.setDescription('Enables/disables the inclusion of the NAS-Port-ID attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeNasPortTypeInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 46), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortTypeInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortTypeInAcctStart.setDescription('Enables/disables the inclusion of the NAS-Port-Type attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludePppoeDescriptionInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 47), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludePppoeDescriptionInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludePppoeDescriptionInAcctStart.setDescription('Enables/disables the inclusion of the PPPoE-Description (VSA) attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelAssignmentIdInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 48), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelAssignmentIdInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelAssignmentIdInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Assignment-Id attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelClientAuthIdInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 49), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientAuthIdInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientAuthIdInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Client-Auth-Id attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelClientEndpointInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 50), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientEndpointInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientEndpointInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Client-Endpoint attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelMediumTypeInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 51), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelMediumTypeInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelMediumTypeInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Medium attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelPreferenceInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 52), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelPreferenceInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelPreferenceInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Preference attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelServerAttributesInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 53), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAttributesInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAttributesInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Server attributes (Tunnel attributes for a PPP session terminated on the LNS) in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelServerAuthIdInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 54), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAuthIdInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAuthIdInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Server-Auth-Id attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelServerEndpointInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 55), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerEndpointInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerEndpointInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Server-Endpoint attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeTunnelTypeInAcctStart = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 56), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelTypeInAcctStart.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelTypeInAcctStart.setDescription('Enables/disables the inclusion of the Tunnel-Type attribute in the RADIUS Accounting-Start packet.')
usdRadiusClientIncludeAcctTunnelConnectionInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 57), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctTunnelConnectionInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeAcctTunnelConnectionInAcctStop.setDescription('Enables/disables the inclusion of the Acct-Tunnel-Connection attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeCalledStationIdInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 59), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeCalledStationIdInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeCalledStationIdInAcctStop.setDescription('Enables/disables the inclusion of the Called-Station-ID attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeCallingStationIdInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 60), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeCallingStationIdInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeCallingStationIdInAcctStop.setDescription('Enables/disables the inclusion of the Calling-Station-ID attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeClassInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 61), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeClassInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeClassInAcctStop.setDescription('Enables/disables the inclusion of the Class attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeConnectInfoInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 62), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeConnectInfoInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeConnectInfoInAcctStop.setDescription('Enables/disables the inclusion of the Connect-Info attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeEgressPolicyNameInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 63), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeEgressPolicyNameInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeEgressPolicyNameInAcctStop.setDescription('Enables/disables the inclusion of the Egress-Policy-Name (VSA) attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeEventTimestampInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 64), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeEventTimestampInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeEventTimestampInAcctStop.setDescription('Enables/disables the inclusion of the Event-Timestamp attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeFramedCompressionInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 65), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedCompressionInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedCompressionInAcctStop.setDescription('Enables/disables the inclusion of the Framed-Compression attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeFramedIpNetmaskInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 66), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedIpNetmaskInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeFramedIpNetmaskInAcctStop.setDescription('Enables/disables the inclusion of the Framed-IP-Netmask attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeIngressPolicyNameInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 67), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeIngressPolicyNameInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeIngressPolicyNameInAcctStop.setDescription('Enables/disables the inclusion of the Ingress-Policy-Name (VSA) attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeInputGigawordsInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 68), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeInputGigawordsInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeInputGigawordsInAcctStop.setDescription('Enables/disables the inclusion of the Input-Gigawords attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeNasIdentifierInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 69), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasIdentifierInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasIdentifierInAcctStop.setDescription('Enables/disables the inclusion of the NAS-Identifier attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeNasPortInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 70), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortInAcctStop.setDescription('Enables/disables the inclusion of the NAS-Port attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeNasPortIdInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 71), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortIdInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortIdInAcctStop.setDescription('Enables/disables the inclusion of the NAS-Port-ID attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeNasPortTypeInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 72), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortTypeInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeNasPortTypeInAcctStop.setDescription('Enables/disables the inclusion of the NAS-Port-Type attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeOutputGigawordsInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 73), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeOutputGigawordsInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeOutputGigawordsInAcctStop.setDescription('Enables/disables the inclusion of the Output-Gigawords attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludePppoeDescriptionInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 74), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludePppoeDescriptionInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludePppoeDescriptionInAcctStop.setDescription('Enables/disables the inclusion of the PPPoE-Description (VSA) attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelAssignmentIdInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 75), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelAssignmentIdInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelAssignmentIdInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Assignment-Id attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelClientAuthIdInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 76), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientAuthIdInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientAuthIdInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Client-Auth-Id attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelClientEndpointInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 77), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientEndpointInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelClientEndpointInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Client-Endpoint attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelMediumTypeInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 78), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelMediumTypeInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelMediumTypeInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Medium attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelPreferenceInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 79), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelPreferenceInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelPreferenceInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Preference attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelServerAttributesInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 80), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAttributesInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAttributesInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Server attributes (Tunnel attributes for a PPP session terminated on the LNS) in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelServerAuthIdInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 81), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAuthIdInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerAuthIdInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Server-Auth-Id attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelServerEndpointInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 82), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerEndpointInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelServerEndpointInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Server-Endpoint attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeTunnelTypeInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 83), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelTypeInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeTunnelTypeInAcctStop.setDescription('Enables/disables the inclusion of the Tunnel-Type attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeInputGigapktsInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 84), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeInputGigapktsInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeInputGigapktsInAcctStop.setDescription('Enables/disables the inclusion of the Input-Gigapkts attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIncludeOutputGigapktsInAcctStop = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 85), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIncludeOutputGigapktsInAcctStop.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIncludeOutputGigapktsInAcctStop.setDescription('Enables/disables the inclusion of the Output-Gigapkts attribute in the RADIUS Accounting-Stop packet.')
usdRadiusClientIgnoreFramedIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 1, 86), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRadiusClientIgnoreFramedIpNetmask.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientIgnoreFramedIpNetmask.setDescription('Enables/disables ignoring the Framed-IP-Netmask attribute in the RADIUS Access-Accept packet.')
usdRadiusAuthClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientInvalidServerAddresses.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientInvalidServerAddresses.setDescription('The number of RADIUS Access-Response packets received from unknown addresses.')
usdRadiusAuthClientServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2), )
if mibBuilder.loadTexts: usdRadiusAuthClientServerTable.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientServerTable.setDescription('The (conceptual) table listing the RADIUS authentication servers with which the client shares a secret.')
usdRadiusAuthClientServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1), ).setIndexNames((0, "Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientServerAddress"))
if mibBuilder.loadTexts: usdRadiusAuthClientServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientServerEntry.setDescription('An entry (conceptual row) representing a RADIUS authentication server with which the client shares a secret.')
usdRadiusAuthClientServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdRadiusAuthClientServerAddress.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientServerAddress.setDescription('The IP address of the RADIUS authentication server referred to in this table entry. A value of 0.0.0.0 indicates this entry is not in use.')
usdRadiusAuthClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
usdRadiusAuthClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientRoundTripTime.setDescription('The time interval (in hundredths of seconds) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
usdRadiusAuthClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientAccessRequests.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
usdRadiusAuthClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientAccessRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
usdRadiusAuthClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
usdRadiusAuthClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientAccessRejects.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
usdRadiusAuthClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
usdRadiusAuthClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientMalformedAccessResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
usdRadiusAuthClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
usdRadiusAuthClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientPendingRequests.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientPendingRequests.setDescription('The number of RADIUS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
usdRadiusAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
usdRadiusAuthClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
usdRadiusAuthClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientPacketsDropped.setDescription('The number of RADIUS packets of which were received from this server on the authentication port and dropped for some other reason.')
usdRadiusAuthClientCfgServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3), )
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerTable.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerTable.setDescription('The (conceptual) table listing the RADIUS authentication servers with which the client shares a secret.')
usdRadiusAuthClientCfgServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1), ).setIndexNames((0, "Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgServerAddress"))
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerEntry.setDescription('An entry (conceptual row) representing a RADIUS authentication server with which the client shares a secret.')
usdRadiusAuthClientCfgServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerAddress.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerAddress.setDescription('The IP address of the RADIUS authentication server referred to in this table entry.')
usdRadiusAuthClientCfgServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
usdRadiusAuthClientCfgKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgKey.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgKey.setDescription('The secret (RADIUS authenticator) used by the client during exchanges with this authentication server. The default is a zero-length string, indicating no authenticator is used.')
usdRadiusAuthClientCfgTimeoutInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgTimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgTimeoutInterval.setDescription('The interval between retransmissions of a request to this authentication server.')
usdRadiusAuthClientCfgRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgRetries.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgRetries.setDescription('The maximum number of times to resend a request to this authentication server (in addition to the original request), before resorting to the server specified in the next entry.')
usdRadiusAuthClientCfgMaxPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 4000)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgMaxPendingRequests.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgMaxPendingRequests.setDescription('The maximum number of outstanding requests this server can support.')
usdRadiusAuthClientCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdRadiusAuthClientCfgPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgPrecedence.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgPrecedence.setDescription('Relative precedence of this server with respect to other servers configured in this table. Lower values correspond to higher precedence. Precedence is assigned by the device, in order of entry creation, from higher to lower precedence.')
usdRadiusAuthClientCfgDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAuthClientCfgDeadTime.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientCfgDeadTime.setDescription('The period of time, in minutes, to ignore this server after a request to the server times out (thereby avoiding additional request timeouts for this period, if the server failure persists).')
usdRadiusAcctClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientInvalidServerAddresses.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientInvalidServerAddresses.setDescription('The number of RADIUS Accounting-Response packets received from unknown addresses.')
usdRadiusAcctClientServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2), )
if mibBuilder.loadTexts: usdRadiusAcctClientServerTable.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientServerTable.setDescription('The (conceptual) table listing the RADIUS accounting servers with which the client shares a secret.')
usdRadiusAcctClientServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1), ).setIndexNames((0, "Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientServerAddress"))
if mibBuilder.loadTexts: usdRadiusAcctClientServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientServerEntry.setDescription('An entry (conceptual row) representing a RADIUS accounting server with which the client shares a secret.')
usdRadiusAcctClientServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdRadiusAcctClientServerAddress.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientServerAddress.setDescription('The IP address of the RADIUS accounting server referred to in this table entry. A value of 0.0.0.0 indicates this entry is not in use.')
usdRadiusAcctClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
usdRadiusAcctClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientRoundTripTime.setDescription('The time interval between the most recent Accounting-Response and the Accounting-Request that matched it from this RADIUS accounting server.')
usdRadiusAcctClientRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientRequests.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientRequests.setDescription('The number of RADIUS Accounting-Request packets sent. This does not include retransmissions.')
usdRadiusAcctClientRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientRetransmissions.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientRetransmissions.setDescription('The number of RADIUS Accounting-Request packets retransmitted to this RADIUS accounting server. Retransmissions include retries where the Identifier and Acct-Delay have been updated, as well as those in which they remain the same.')
usdRadiusAcctClientResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientResponses.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientResponses.setDescription('The number of RADIUS packets received on the accounting port from this server.')
usdRadiusAcctClientMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientMalformedResponses.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientMalformedResponses.setDescription('The number of malformed RADIUS Accounting-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators and unknown types are not included as malformed accounting responses.')
usdRadiusAcctClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientBadAuthenticators.setDescription('The number of RADIUS Accounting-Response packets which contained invalid authenticators received from this server.')
usdRadiusAcctClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientPendingRequests.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientPendingRequests.setDescription('The number of RADIUS Accounting-Request packets sent to this server that have not yet timed out or received a response. This variable is incremented when an Accounting-Request is sent and decremented due to receipt of an Accounting-Response, a timeout or a retransmission.')
usdRadiusAcctClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientTimeouts.setDescription('The number of accounting timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as an Accounting-Request as well as a timeout.')
usdRadiusAcctClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the accounting port.')
usdRadiusAcctClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the accounting port and dropped for some other reason.')
usdRadiusAcctClientCfgServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3), )
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerTable.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerTable.setDescription('The (conceptual) table listing the RADIUS accounting servers with which the client shares a secret.')
usdRadiusAcctClientCfgServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1), ).setIndexNames((0, "Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgServerAddress"))
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerEntry.setDescription('An entry (conceptual row) representing a RADIUS accounting server with which the client shares a secret.')
usdRadiusAcctClientCfgServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerAddress.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerAddress.setDescription('The IP address of the RADIUS accounting server referred to in this table entry.')
usdRadiusAcctClientCfgServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
usdRadiusAcctClientCfgKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgKey.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgKey.setDescription('The secret (RADIUS authenticator) used by the client during exchanges with this accounting server. The default is a zero-length string, indicating no authenticator is used.')
usdRadiusAcctClientCfgTimeoutInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgTimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgTimeoutInterval.setDescription('The interval between retransmissions of a request to this accounting server.')
usdRadiusAcctClientCfgRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgRetries.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgRetries.setDescription('The maximum number of times to resend a request to this accounting server (in addition to the original request), before resorting to the server specified in the next entry.')
usdRadiusAcctClientCfgMaxPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 4000)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgMaxPendingRequests.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgMaxPendingRequests.setDescription('The maximum number of outstanding requests this server can support.')
usdRadiusAcctClientCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdRadiusAcctClientCfgPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgPrecedence.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgPrecedence.setDescription('Relative precedence of this server with respect to other servers configured in this table. Lower values correspond to higher precedence. Precedence is assigned by the device, in order of entry creation, from higher to lower precedence.')
usdRadiusAcctClientCfgDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRadiusAcctClientCfgDeadTime.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientCfgDeadTime.setDescription('The period of time, in minutes, to ignore this server after a request to the server times out (thereby avoiding additional request timeouts for this period, if the server failure persists).')
usdRadiusClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2))
usdRadiusClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1))
usdRadiusClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2))
usdRadiusAuthClientCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 1)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusGeneralClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusAuthClientCompliance = usdRadiusAuthClientCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusAuthClientCompliance.setDescription('Obsolete compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality. This statement became obsolete when the usdRadiusClientSourceAddress object was added.')
usdRadiusAcctClientCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 2)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusGeneralClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusAcctClientCompliance = usdRadiusAcctClientCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusAcctClientCompliance.setDescription('Obsolete compliance statement for accounting clients implementing the Unisphere RADIUS Client MIB accounting functionality. This statement became obsolete when the usdRadiusClientSourceAddress object was added.')
usdRadiusAuthClientCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 3)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusGeneralClientGroup2"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusAuthClientCompliance2 = usdRadiusAuthClientCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusAuthClientCompliance2.setDescription('Obsolete compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality. This statement became obsolete when new objects were added.')
usdRadiusAcctClientCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 4)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusGeneralClientGroup2"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusAcctClientCompliance2 = usdRadiusAcctClientCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusAcctClientCompliance2.setDescription('Obsolete compliance statement for accounting clients implementing the Unisphere RADIUS Client MIB accounting functionality. This statement became obsolete when new objects were added.')
usdRadiusClientCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 5)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBasicClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBrasClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusTunnelClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusClientCompliance = usdRadiusClientCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusClientCompliance.setDescription('Obsolete compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality. This statement became obsolete when new B-RAS objects were added.')
usdRadiusClientCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 6)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBasicClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBrasClientGroup2"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusTunnelClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusClientCompliance2 = usdRadiusClientCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusClientCompliance2.setDescription('Obsolete compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality. This statement became obsolete when new objects were added.')
usdRadiusClientCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 7)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBasicClientGroup2"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBrasClientGroup3"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusTunnelClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusClientCompliance3 = usdRadiusClientCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusClientCompliance3.setDescription('Obsolete compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality. This statement became obsolete when the usdRadiusClientNasIpAddrUse object was added.')
usdRadiusClientCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 8)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBasicClientGroup2"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBrasClientGroup4"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusTunnelClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusClientCompliance4 = usdRadiusClientCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusClientCompliance4.setDescription('Obsolete compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality. This statement became obsolete when objects were added to indicate which RADIUS attributes should be included or excluded from RADIUS packets.')
usdRadiusClientCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 1, 9)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBasicClientGroup2"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientGroup"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusBrasClientGroup5"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusTunnelClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusClientCompliance5 = usdRadiusClientCompliance5.setStatus('current')
if mibBuilder.loadTexts: usdRadiusClientCompliance5.setDescription('The compliance statement for authentication clients implementing the Unisphere RADIUS Client MIB authentication functionality.')
usdRadiusGeneralClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 1)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIdentifier"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusGeneralClientGroup = usdRadiusGeneralClientGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusGeneralClientGroup.setDescription('Obsolete basic collection of objects providing management of RADIUS Clients. This group became obsolete when usdRadiusClientSourceAddress was added.')
usdRadiusAuthClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 2)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientInvalidServerAddresses"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientServerPortNumber"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientRoundTripTime"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientAccessRequests"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientAccessRetransmissions"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientAccessAccepts"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientAccessRejects"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientAccessChallenges"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientMalformedAccessResponses"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientBadAuthenticators"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientPendingRequests"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientTimeouts"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientUnknownTypes"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientPacketsDropped"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgServerPortNumber"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgKey"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgTimeoutInterval"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgRetries"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgMaxPendingRequests"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgRowStatus"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgPrecedence"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAuthClientCfgDeadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusAuthClientGroup = usdRadiusAuthClientGroup.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAuthClientGroup.setDescription('The basic collection of objects providing management of RADIUS Authentication Clients.')
usdRadiusAcctClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 3)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientInvalidServerAddresses"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientServerPortNumber"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientRoundTripTime"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientRequests"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientRetransmissions"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientResponses"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientMalformedResponses"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientBadAuthenticators"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientPendingRequests"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientTimeouts"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientUnknownTypes"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientPacketsDropped"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgServerPortNumber"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgKey"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgTimeoutInterval"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgRetries"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgMaxPendingRequests"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgRowStatus"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgPrecedence"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusAcctClientCfgDeadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusAcctClientGroup = usdRadiusAcctClientGroup.setStatus('current')
if mibBuilder.loadTexts: usdRadiusAcctClientGroup.setDescription('The basic collection of objects providing management of RADIUS Accounting Clients.')
usdRadiusGeneralClientGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 4)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIdentifier"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAlgorithm"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientSourceAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusGeneralClientGroup2 = usdRadiusGeneralClientGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusGeneralClientGroup2.setDescription('Obsolete basic collection of objects providing management of RADIUS Clients. This group became obsolete when new objects were added.')
usdRadiusBasicClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 5)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIdentifier"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAlgorithm"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientSourceAddress"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientUdpChecksum"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBasicClientGroup = usdRadiusBasicClientGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusBasicClientGroup.setDescription('Obsolete collection of objects providing basic management of RADIUS Clients. This group became obsolete when the usdRadiusClientRollover object was added.')
usdRadiusBrasClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 6)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientDslPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAcctSessionIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasPortFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationDelimiter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBrasClientGroup = usdRadiusBrasClientGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusBrasClientGroup.setDescription('Obsolete collection of objects providing management of general B-RAS functions for RADIUS Clients. This group became obsolete when new objects were added.')
usdRadiusTunnelClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 7)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientTunnelAccounting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusTunnelClientGroup = usdRadiusTunnelClientGroup.setStatus('current')
if mibBuilder.loadTexts: usdRadiusTunnelClientGroup.setDescription('An object providing management of tunneling functions for RADIUS Clients.')
usdRadiusBrasClientGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 8)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientDslPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAcctSessionIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasPortFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationDelimiter"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientEthernetPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeIpAddrInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctSessionIdInAccessReq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBrasClientGroup2 = usdRadiusBrasClientGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusBrasClientGroup2.setDescription('Obsolete collection of objects providing management of general B-RAS functions for RADIUS Clients. This group became obsolete when the usdRadiusClientCallingStationIdFormat object was added.')
usdRadiusBasicClientGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 9)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIdentifier"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAlgorithm"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientSourceAddress"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientUdpChecksum"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasIdentifier"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientRollover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBasicClientGroup2 = usdRadiusBasicClientGroup2.setStatus('current')
if mibBuilder.loadTexts: usdRadiusBasicClientGroup2.setDescription('A collection of objects providing basic management of RADIUS Clients.')
usdRadiusBrasClientGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 10)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientDslPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAcctSessionIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasPortFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationDelimiter"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientEthernetPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeIpAddrInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctSessionIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationIdFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBrasClientGroup3 = usdRadiusBrasClientGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusBrasClientGroup3.setDescription('Obsolete collection of objects providing management of general B-RAS functions for RADIUS Clients. This group became obsolete when the usdRadiusClientNasIpAddrUse object was added.')
usdRadiusBrasClientGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 11)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientDslPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAcctSessionIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasPortFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationDelimiter"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientEthernetPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeIpAddrInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctSessionIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasIpAddrUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBrasClientGroup4 = usdRadiusBrasClientGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: usdRadiusBrasClientGroup4.setDescription('Obsolete collection of objects providing management of general B-RAS functions for RADIUS Clients. This group became obsolete when objects were added to indicate which RADIUS attributes should be included or excluded from RADIUS packets.')
usdRadiusBrasClientGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 19, 2, 2, 12)).setObjects(("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientDslPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientAcctSessionIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasPortFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationDelimiter"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientEthernetPortType"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeIpAddrInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctSessionIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientCallingStationIdFormat"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientNasIpAddrUse"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctTunnelConnectionInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeCalledStationIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeCallingStationIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeConnectInfoInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasIdentifierInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortTypeInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludePppoeDescriptionInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelClientAuthIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelClientEndpointInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelMediumTypeInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerAttributesInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerAuthIdInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerEndpointInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelTypeInAccessReq"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctTunnelConnectionInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeCalledStationIdInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeCallingStationIdInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeClassInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeConnectInfoInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeEgressPolicyNameInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeEventTimestampInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeFramedCompressionInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeFramedIpNetmaskInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeIngressPolicyNameInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasIdentifierInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortIdInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortTypeInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludePppoeDescriptionInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelAssignmentIdInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelClientAuthIdInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelClientEndpointInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelMediumTypeInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelPreferenceInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerAttributesInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerAuthIdInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerEndpointInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelTypeInAcctStart"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeAcctTunnelConnectionInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeCalledStationIdInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeCallingStationIdInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeClassInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeConnectInfoInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeEgressPolicyNameInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeEventTimestampInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeFramedCompressionInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeFramedIpNetmaskInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeIngressPolicyNameInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeInputGigawordsInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasIdentifierInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortIdInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeNasPortTypeInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeOutputGigawordsInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludePppoeDescriptionInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelAssignmentIdInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelClientAuthIdInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelClientEndpointInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelMediumTypeInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelPreferenceInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerAttributesInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerAuthIdInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelServerEndpointInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeTunnelTypeInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeInputGigapktsInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIncludeOutputGigapktsInAcctStop"), ("Unisphere-Data-RADIUS-CLIENT-MIB", "usdRadiusClientIgnoreFramedIpNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRadiusBrasClientGroup5 = usdRadiusBrasClientGroup5.setStatus('current')
if mibBuilder.loadTexts: usdRadiusBrasClientGroup5.setDescription('A collection of objects providing management of general B-RAS functions for RADIUS Clients.')
mibBuilder.exportSymbols("Unisphere-Data-RADIUS-CLIENT-MIB", usdRadiusClientIncludeCalledStationIdInAcctStop=usdRadiusClientIncludeCalledStationIdInAcctStop, usdRadiusClientIncludeTunnelPreferenceInAcctStart=usdRadiusClientIncludeTunnelPreferenceInAcctStart, usdRadiusClientIncludeOutputGigawordsInAcctStop=usdRadiusClientIncludeOutputGigawordsInAcctStop, usdRadiusAcctClientServerAddress=usdRadiusAcctClientServerAddress, usdRadiusClientIncludeEgressPolicyNameInAcctStart=usdRadiusClientIncludeEgressPolicyNameInAcctStart, usdRadiusClientIncludeConnectInfoInAccessReq=usdRadiusClientIncludeConnectInfoInAccessReq, usdRadiusAuthClientAccessAccepts=usdRadiusAuthClientAccessAccepts, usdRadiusAuthClientAccessRejects=usdRadiusAuthClientAccessRejects, usdRadiusClientIncludeCallingStationIdInAcctStart=usdRadiusClientIncludeCallingStationIdInAcctStart, usdRadiusClientIncludeTunnelClientEndpointInAccessReq=usdRadiusClientIncludeTunnelClientEndpointInAccessReq, usdRadiusAcctClientResponses=usdRadiusAcctClientResponses, usdRadiusAuthClientBadAuthenticators=usdRadiusAuthClientBadAuthenticators, usdRadiusClientIncludeNasPortInAccessReq=usdRadiusClientIncludeNasPortInAccessReq, usdRadiusClientIncludeNasPortIdInAcctStart=usdRadiusClientIncludeNasPortIdInAcctStart, usdRadiusClientIncludeFramedIpNetmaskInAcctStop=usdRadiusClientIncludeFramedIpNetmaskInAcctStop, usdRadiusClientUdpChecksum=usdRadiusClientUdpChecksum, usdRadiusBrasClientGroup=usdRadiusBrasClientGroup, usdRadiusClientNasIdentifier=usdRadiusClientNasIdentifier, usdRadiusClientIncludeInputGigapktsInAcctStop=usdRadiusClientIncludeInputGigapktsInAcctStop, usdRadiusAuthClientPacketsDropped=usdRadiusAuthClientPacketsDropped, PYSNMP_MODULE_ID=usdRadiusClientMIB, usdRadiusAuthClient=usdRadiusAuthClient, usdRadiusClientIncludeTunnelTypeInAcctStart=usdRadiusClientIncludeTunnelTypeInAcctStart, usdRadiusAcctClientCfgRowStatus=usdRadiusAcctClientCfgRowStatus, usdRadiusClientCallingStationDelimiter=usdRadiusClientCallingStationDelimiter, usdRadiusAuthClientCfgServerTable=usdRadiusAuthClientCfgServerTable, usdRadiusClientMIB=usdRadiusClientMIB, usdRadiusAuthClientCfgServerEntry=usdRadiusAuthClientCfgServerEntry, usdRadiusClientIncludeNasPortTypeInAcctStart=usdRadiusClientIncludeNasPortTypeInAcctStart, usdRadiusGeneralClientGroup=usdRadiusGeneralClientGroup, usdRadiusClientIncludeOutputGigapktsInAcctStop=usdRadiusClientIncludeOutputGigapktsInAcctStop, usdRadiusClientIncludeClassInAcctStop=usdRadiusClientIncludeClassInAcctStop, usdRadiusAuthClientCompliance2=usdRadiusAuthClientCompliance2, usdRadiusAuthClientAccessRequests=usdRadiusAuthClientAccessRequests, usdRadiusBrasClientGroup2=usdRadiusBrasClientGroup2, usdRadiusAuthClientCfgServerAddress=usdRadiusAuthClientCfgServerAddress, usdRadiusClientIncludePppoeDescriptionInAcctStop=usdRadiusClientIncludePppoeDescriptionInAcctStop, usdRadiusClientIncludeNasPortIdInAcctStop=usdRadiusClientIncludeNasPortIdInAcctStop, usdRadiusAcctClient=usdRadiusAcctClient, usdRadiusClientIncludeTunnelClientAuthIdInAccessReq=usdRadiusClientIncludeTunnelClientAuthIdInAccessReq, usdRadiusClientIncludeNasPortInAcctStop=usdRadiusClientIncludeNasPortInAcctStop, usdRadiusAcctClientServerTable=usdRadiusAcctClientServerTable, usdRadiusClientIncludeCalledStationIdInAcctStart=usdRadiusClientIncludeCalledStationIdInAcctStart, usdRadiusClientIncludeTunnelAssignmentIdInAcctStart=usdRadiusClientIncludeTunnelAssignmentIdInAcctStart, usdRadiusAuthClientServerTable=usdRadiusAuthClientServerTable, usdRadiusClientObjects=usdRadiusClientObjects, usdRadiusClientIncludeAcctTunnelConnectionInAcctStop=usdRadiusClientIncludeAcctTunnelConnectionInAcctStop, usdRadiusClientIncludeTunnelClientEndpointInAcctStart=usdRadiusClientIncludeTunnelClientEndpointInAcctStart, usdRadiusClientIncludeNasIdentifierInAcctStart=usdRadiusClientIncludeNasIdentifierInAcctStart, usdRadiusClientIncludePppoeDescriptionInAccessReq=usdRadiusClientIncludePppoeDescriptionInAccessReq, usdRadiusBrasClientGroup3=usdRadiusBrasClientGroup3, usdRadiusAuthClientCfgDeadTime=usdRadiusAuthClientCfgDeadTime, usdRadiusClientIncludeInputGigawordsInAcctStop=usdRadiusClientIncludeInputGigawordsInAcctStop, usdRadiusClientIncludeCallingStationIdInAcctStop=usdRadiusClientIncludeCallingStationIdInAcctStop, usdRadiusClientIncludeTunnelServerAuthIdInAcctStop=usdRadiusClientIncludeTunnelServerAuthIdInAcctStop, usdRadiusAcctClientCfgMaxPendingRequests=usdRadiusAcctClientCfgMaxPendingRequests, usdRadiusAcctClientCfgTimeoutInterval=usdRadiusAcctClientCfgTimeoutInterval, usdRadiusAuthClientGroup=usdRadiusAuthClientGroup, usdRadiusClientIncludeTunnelServerAttributesInAcctStop=usdRadiusClientIncludeTunnelServerAttributesInAcctStop, usdRadiusGeneralClientGroup2=usdRadiusGeneralClientGroup2, usdRadiusClientIncludeTunnelServerEndpointInAcctStop=usdRadiusClientIncludeTunnelServerEndpointInAcctStop, usdRadiusAcctClientCfgServerEntry=usdRadiusAcctClientCfgServerEntry, usdRadiusClientIncludeTunnelServerAuthIdInAcctStart=usdRadiusClientIncludeTunnelServerAuthIdInAcctStart, usdRadiusClientIncludeTunnelTypeInAccessReq=usdRadiusClientIncludeTunnelTypeInAccessReq, usdRadiusAcctClientGroup=usdRadiusAcctClientGroup, usdRadiusClientIncludeClassInAcctStart=usdRadiusClientIncludeClassInAcctStart, usdRadiusAcctClientCompliance2=usdRadiusAcctClientCompliance2, usdRadiusClientIncludeNasPortTypeInAccessReq=usdRadiusClientIncludeNasPortTypeInAccessReq, usdRadiusClientIncludeFramedCompressionInAcctStop=usdRadiusClientIncludeFramedCompressionInAcctStop, usdRadiusClientMIBCompliances=usdRadiusClientMIBCompliances, usdRadiusClientIncludeNasIdentifierInAcctStop=usdRadiusClientIncludeNasIdentifierInAcctStop, usdRadiusClientNasIpAddrUse=usdRadiusClientNasIpAddrUse, usdRadiusClientCompliance4=usdRadiusClientCompliance4, usdRadiusClientDslPortType=usdRadiusClientDslPortType, usdRadiusClientCompliance=usdRadiusClientCompliance, usdRadiusAuthClientUnknownTypes=usdRadiusAuthClientUnknownTypes, usdRadiusAcctClientPendingRequests=usdRadiusAcctClientPendingRequests, usdRadiusAuthClientTimeouts=usdRadiusAuthClientTimeouts, usdRadiusClientSourceAddress=usdRadiusClientSourceAddress, usdRadiusClientIncludeFramedIpNetmaskInAcctStart=usdRadiusClientIncludeFramedIpNetmaskInAcctStart, usdRadiusClientIncludeTunnelTypeInAcctStop=usdRadiusClientIncludeTunnelTypeInAcctStop, usdRadiusClientCompliance2=usdRadiusClientCompliance2, usdRadiusClientIncludeTunnelClientAuthIdInAcctStop=usdRadiusClientIncludeTunnelClientAuthIdInAcctStop, usdRadiusAuthClientServerPortNumber=usdRadiusAuthClientServerPortNumber, usdRadiusAcctClientRequests=usdRadiusAcctClientRequests, usdRadiusClientIncludeEventTimestampInAcctStart=usdRadiusClientIncludeEventTimestampInAcctStart, usdRadiusClientAlgorithm=usdRadiusClientAlgorithm, usdRadiusClientIncludeAcctTunnelConnectionInAccessReq=usdRadiusClientIncludeAcctTunnelConnectionInAccessReq, usdRadiusBasicClientGroup=usdRadiusBasicClientGroup, usdRadiusClientTunnelAccounting=usdRadiusClientTunnelAccounting, usdRadiusClientIncludeAcctTunnelConnectionInAcctStart=usdRadiusClientIncludeAcctTunnelConnectionInAcctStart, usdRadiusClientCallingStationIdFormat=usdRadiusClientCallingStationIdFormat, usdRadiusAcctClientCfgPrecedence=usdRadiusAcctClientCfgPrecedence, usdRadiusAcctClientCfgRetries=usdRadiusAcctClientCfgRetries, usdRadiusClientEthernetPortType=usdRadiusClientEthernetPortType, usdRadiusClientIncludeTunnelServerEndpointInAcctStart=usdRadiusClientIncludeTunnelServerEndpointInAcctStart, usdRadiusClientIncludeTunnelServerAttributesInAcctStart=usdRadiusClientIncludeTunnelServerAttributesInAcctStart, usdRadiusClientIncludeConnectInfoInAcctStart=usdRadiusClientIncludeConnectInfoInAcctStart, usdRadiusAcctClientCfgServerAddress=usdRadiusAcctClientCfgServerAddress, usdRadiusAcctClientRetransmissions=usdRadiusAcctClientRetransmissions, usdRadiusClientIncludeTunnelMediumTypeInAccessReq=usdRadiusClientIncludeTunnelMediumTypeInAccessReq, usdRadiusClientIdentifier=usdRadiusClientIdentifier, usdRadiusClientIncludeTunnelServerAttributesInAccessReq=usdRadiusClientIncludeTunnelServerAttributesInAccessReq, usdRadiusAuthClientCfgKey=usdRadiusAuthClientCfgKey, usdRadiusAuthClientCfgTimeoutInterval=usdRadiusAuthClientCfgTimeoutInterval, usdRadiusClientIncludeCallingStationIdInAccessReq=usdRadiusClientIncludeCallingStationIdInAccessReq, usdRadiusAcctClientPacketsDropped=usdRadiusAcctClientPacketsDropped, usdRadiusTunnelClientGroup=usdRadiusTunnelClientGroup, usdRadiusAuthClientCfgRetries=usdRadiusAuthClientCfgRetries, usdRadiusAuthClientAccessRetransmissions=usdRadiusAuthClientAccessRetransmissions, usdRadiusClientIncludeEventTimestampInAcctStop=usdRadiusClientIncludeEventTimestampInAcctStop, usdRadiusAcctClientServerEntry=usdRadiusAcctClientServerEntry, usdRadiusBasicClientGroup2=usdRadiusBasicClientGroup2, usdRadiusClientAcctSessionIdFormat=usdRadiusClientAcctSessionIdFormat, usdRadiusAuthClientCfgPrecedence=usdRadiusAuthClientCfgPrecedence, usdRadiusClientIncludeNasIdentifierInAccessReq=usdRadiusClientIncludeNasIdentifierInAccessReq, usdRadiusBrasClientGroup5=usdRadiusBrasClientGroup5, usdRadiusAuthClientMalformedAccessResponses=usdRadiusAuthClientMalformedAccessResponses, usdRadiusClientIncludeTunnelClientEndpointInAcctStop=usdRadiusClientIncludeTunnelClientEndpointInAcctStop, usdRadiusClientCompliance3=usdRadiusClientCompliance3, usdRadiusClientIncludeAcctSessionIdInAccessReq=usdRadiusClientIncludeAcctSessionIdInAccessReq, usdRadiusAcctClientCompliance=usdRadiusAcctClientCompliance, usdRadiusClientIncludeNasPortTypeInAcctStop=usdRadiusClientIncludeNasPortTypeInAcctStop, usdRadiusClientIncludeIngressPolicyNameInAcctStop=usdRadiusClientIncludeIngressPolicyNameInAcctStop, usdRadiusAuthClientServerEntry=usdRadiusAuthClientServerEntry, usdRadiusAcctClientMalformedResponses=usdRadiusAcctClientMalformedResponses, usdRadiusAuthClientRoundTripTime=usdRadiusAuthClientRoundTripTime, usdRadiusAuthClientPendingRequests=usdRadiusAuthClientPendingRequests, usdRadiusClientIncludeIpAddrInAcctStart=usdRadiusClientIncludeIpAddrInAcctStart, usdRadiusClientRollover=usdRadiusClientRollover, usdRadiusAcctClientBadAuthenticators=usdRadiusAcctClientBadAuthenticators, usdRadiusClientCompliance5=usdRadiusClientCompliance5, usdRadiusClientIncludeTunnelServerAuthIdInAccessReq=usdRadiusClientIncludeTunnelServerAuthIdInAccessReq, usdRadiusClientIncludeNasPortIdInAccessReq=usdRadiusClientIncludeNasPortIdInAccessReq, usdRadiusClientIncludeTunnelServerEndpointInAccessReq=usdRadiusClientIncludeTunnelServerEndpointInAccessReq, usdRadiusClientIncludeTunnelMediumTypeInAcctStop=usdRadiusClientIncludeTunnelMediumTypeInAcctStop, usdRadiusAcctClientUnknownTypes=usdRadiusAcctClientUnknownTypes, usdRadiusAcctClientCfgKey=usdRadiusAcctClientCfgKey, usdRadiusClientMIBConformance=usdRadiusClientMIBConformance, usdRadiusClientIncludeIngressPolicyNameInAcctStart=usdRadiusClientIncludeIngressPolicyNameInAcctStart, usdRadiusAuthClientCfgMaxPendingRequests=usdRadiusAuthClientCfgMaxPendingRequests, usdRadiusAuthClientCfgRowStatus=usdRadiusAuthClientCfgRowStatus, usdRadiusAcctClientTimeouts=usdRadiusAcctClientTimeouts, usdRadiusAcctClientCfgDeadTime=usdRadiusAcctClientCfgDeadTime, usdRadiusClientIncludePppoeDescriptionInAcctStart=usdRadiusClientIncludePppoeDescriptionInAcctStart, usdRadiusGeneralClient=usdRadiusGeneralClient, usdRadiusClientIncludeNasPortInAcctStart=usdRadiusClientIncludeNasPortInAcctStart, usdRadiusClientNasPortFormat=usdRadiusClientNasPortFormat, usdRadiusAuthClientInvalidServerAddresses=usdRadiusAuthClientInvalidServerAddresses, usdRadiusClientMIBGroups=usdRadiusClientMIBGroups, usdRadiusClientIgnoreFramedIpNetmask=usdRadiusClientIgnoreFramedIpNetmask, usdRadiusClientIncludeTunnelMediumTypeInAcctStart=usdRadiusClientIncludeTunnelMediumTypeInAcctStart, usdRadiusAcctClientCfgServerTable=usdRadiusAcctClientCfgServerTable, usdRadiusClientIncludeTunnelAssignmentIdInAcctStop=usdRadiusClientIncludeTunnelAssignmentIdInAcctStop, usdRadiusAcctClientCfgServerPortNumber=usdRadiusAcctClientCfgServerPortNumber, usdRadiusBrasClientGroup4=usdRadiusBrasClientGroup4, usdRadiusClientIncludeTunnelPreferenceInAcctStop=usdRadiusClientIncludeTunnelPreferenceInAcctStop, usdRadiusClientIncludeConnectInfoInAcctStop=usdRadiusClientIncludeConnectInfoInAcctStop, usdRadiusClientIncludeTunnelClientAuthIdInAcctStart=usdRadiusClientIncludeTunnelClientAuthIdInAcctStart, usdRadiusClientIncludeEgressPolicyNameInAcctStop=usdRadiusClientIncludeEgressPolicyNameInAcctStop, usdRadiusClientIncludeFramedCompressionInAcctStart=usdRadiusClientIncludeFramedCompressionInAcctStart, usdRadiusAuthClientCompliance=usdRadiusAuthClientCompliance, usdRadiusAuthClientServerAddress=usdRadiusAuthClientServerAddress, usdRadiusAuthClientAccessChallenges=usdRadiusAuthClientAccessChallenges, usdRadiusAcctClientInvalidServerAddresses=usdRadiusAcctClientInvalidServerAddresses, usdRadiusAcctClientRoundTripTime=usdRadiusAcctClientRoundTripTime, usdRadiusAcctClientServerPortNumber=usdRadiusAcctClientServerPortNumber, usdRadiusAuthClientCfgServerPortNumber=usdRadiusAuthClientCfgServerPortNumber, usdRadiusClientIncludeCalledStationIdInAccessReq=usdRadiusClientIncludeCalledStationIdInAccessReq)
