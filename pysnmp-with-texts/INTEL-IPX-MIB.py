#
# PySNMP MIB module INTEL-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, Counter64, IpAddress, Counter32, NotificationType, ModuleIdentity, Bits, iso, Integer32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Counter64", "IpAddress", "Counter32", "NotificationType", "ModuleIdentity", "Bits", "iso", "Integer32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22))
ipxControl = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22, 1))
ipxConf = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22, 2))
ipxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22, 3))
ipxCount = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22, 4))
ipxRip = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22, 5))
ipxSap = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 22, 6))
class FltDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rx", 1), ("tx", 2))

class IpxAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class FltAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pass", 1), ("discard", 2), ("disabled", 3))

ipxControlCommand = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flushRipSap", 1), ("updateRipSap", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipxControlCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ipxControlCommand.setDescription('Control register : - Write 1 to flush routing table. (Affects ipxRipTable & ipxSapTable) - Write 2 to update RIP & SAP tables. (Affects ipxRipTable & ipxSapTable)')
ipxLinkConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1), )
if mibBuilder.loadTexts: ipxLinkConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfTable.setDescription('This table contains link-specific configuration parameters.')
ipxLinkConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxLinkConfIpxLinkIndex"))
if mibBuilder.loadTexts: ipxLinkConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfEntry.setDescription('')
ipxLinkConfIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkConfIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfIpxLinkIndex.setDescription('IPX Link index. This is a number that uniquely identifies an IPX interface.')
ipxLinkConfRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripAndSap", 1), ("staticOrNone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfRoutingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfRoutingProtocol.setDescription('Determines if dynamic routing using RIP and SAP is enabled or if only static routes and services are used.')
ipxLinkConfNumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfNumbered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfNumbered.setDescription('Determines if a WAN link is numbered.')
ipxLinkConfNet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfNet.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfNet.setDescription('The IPX net number defines a unique network number. This object is not relevant for unnumbered WANs.')
ipxLinkConfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 16))).clone(namedValues=NamedValues(("type", 1), ("ieee8022", 2), ("snap", 4), ("ieee8023", 5), ("wan", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfFrameType.setDescription('The Frame type parameter specifies the encapsulation method to use. Type(1) is also called Ethernet II.')
ipxLinkConfFrameParam = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkConfFrameParam.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfFrameParam.setDescription('The actual frame format for ipx2ConfFrameType.')
ipxLinkConfIpxWanNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfIpxWanNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfIpxWanNegotiation.setDescription('IPX WAN 2 Protocol')
ipxLinkConfRipUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfRipUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfRipUpdateInterval.setDescription('Time between RIP updates in seconds.')
ipxLinkConfRipTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfRipTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfRipTrigger.setDescription('Use triggered RIP updates.')
ipxLinkConfSapUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfSapUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfSapUpdateInterval.setDescription('Time between SAP updates in seconds.')
ipxLinkConfSapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfSapTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfSapTrigger.setDescription('Use triggered SAP updates.')
ipxLinkConfAutomaticDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfAutomaticDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfAutomaticDelay.setDescription('Specifies if the delay associated with use of the LAN or WAN Link is determined automatically or is manually defined.')
ipxLinkConfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfDelay.setDescription('The configured delay in ticks (1 tick = 55 ms)')
ipxLinkConfSpxSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfSpxSpoofing.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfSpxSpoofing.setDescription('SPX Spoofing is used to answer SPX keep-alive packets on behalf of a remote client when the WAN Link is in timecut mode.')
ipxLinkConfSpxSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfSpxSessionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfSpxSessionTimeout.setDescription('Defines the time limit for spoofing SPX keep-alive packets from the LAN on behalf of remote clients.')
ipxLinkConfType20Broadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfType20Broadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfType20Broadcast.setDescription('Type 20 packets are used to propogate broadcasts using different protocols through the network.')
ipxLinkConfWatchdogSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfWatchdogSpoofing.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfWatchdogSpoofing.setDescription('Watchdog Spoofing is used to answer IPX watchdog (keep-alive) packets from a local server on behalf of a remote client when the WAN Link is in timecut mode.')
ipxLinkConfRipFltRxDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 18), FltAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfRipFltRxDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfRipFltRxDefaultAction.setDescription('Default action for RIP Receive Filters.')
ipxLinkConfRipFltTxDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 19), FltAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfRipFltTxDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfRipFltTxDefaultAction.setDescription('Default action for RIP Transmit Filters.')
ipxLinkConfSapFltRxDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 20), FltAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfSapFltRxDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfSapFltRxDefaultAction.setDescription('Default action for SAP Receive Filters.')
ipxLinkConfSapFltTxDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 21), FltAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfSapFltTxDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfSapFltTxDefaultAction.setDescription('Default action for SAP Transmit Filters.')
ipxLinkConfDataFltRxDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 22), FltAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfDataFltRxDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfDataFltRxDefaultAction.setDescription('Default action for Data Receive Filters.')
ipxLinkConfDataFltTxDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 23), FltAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfDataFltTxDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfDataFltTxDefaultAction.setDescription('Default action for Data Transmit Filters.')
ipxLinkConfDataFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfDataFilters.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfDataFilters.setDescription('Configuration status of Data Filters')
ipxLinkConfCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(34, 34)).setFixedLength(34)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfCreateObj.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfCreateObj.setDescription('Create a non existing table entry. If the entry already exist, genError is returned. Binary format (big-endian): 2 bytes : ipxLinkMonMplIndex 1 byte : ipxLinkConfRoutingProtocol 1 byte : ipxLinkConfNumbered 4 bytes : ipxLinkConfNet 2 bytes : ipxLinkConfFrameType 1 byte : ipxLinkConfIpxWanNegotiation 4 bytes : ipxLinkConfRipUpdateInterval 1 byte : ipxLinkConfRipTrigger 4 bytes : ipxLinkConfSapUpdateInterval 1 byte : ipxLinkConfSapTrigger 1 byte : ipxLinkConfAutomaticDelay 1 byte : ipxLinkConfDelay 1 byte : ipxLinkConfSpxSpoofing 1 byte : ipxLinkConfSpxSessionTimeout 1 byte : ipxLinkConfType20Broadcast 1 byte : ipxLinkConfWatchdogSpoofing 1 byte : ipxLinkConfRipFltRxDefaultAction 1 byte : ipxLinkConfRipFltTxDefaultAction 1 byte : ipxLinkConfSapFltRxDefaultAction 1 byte : ipxLinkConfSapFltTxDefaultAction 1 byte : ipxLinkConfDataFltRxDefaultAction 1 byte : ipxLinkConfDataFltTxDefaultAction 1 byte : ipxLinkConfDataFilters')
ipxLinkConfDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxLinkConfDeleteObj.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkConfDeleteObj.setDescription('')
ipxRipFltTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2), )
if mibBuilder.loadTexts: ipxRipFltTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltTable.setDescription('RIP Filters')
ipxRipFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxRipFltIpxLinkIndex"), (0, "INTEL-IPX-MIB", "ipxRipFltDirection"), (0, "INTEL-IPX-MIB", "ipxRipFltNumber"))
if mibBuilder.loadTexts: ipxRipFltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltEntry.setDescription('')
ipxRipFltIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipFltIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltIpxLinkIndex.setDescription('IPX Link index')
ipxRipFltDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1, 2), FltDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipFltDirection.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltDirection.setDescription('Filter direction')
ipxRipFltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipFltNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltNumber.setDescription('Filter number')
ipxRipFltAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1, 4), FltAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipFltAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltAction.setDescription('Action to perform on packet if filter matches.')
ipxRipFltNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipFltNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltNetworkAddress.setDescription('Network number or group of networks. If ipxRipFltNetworkAddress is 0x00000000 and ipxRipFltNetworkMask is 0xFFFFFFFF then filtering is disabled.')
ipxRipFltNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipFltNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipFltNetworkMask.setDescription('Network mask. See also ipxRipFltNetworkAddress')
ipxSapFltTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3), )
if mibBuilder.loadTexts: ipxSapFltTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltTable.setDescription('SAP Filters')
ipxSapFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxSapFltIpxLinkIndex"), (0, "INTEL-IPX-MIB", "ipxSapFltDirection"), (0, "INTEL-IPX-MIB", "ipxSapFltNumber"))
if mibBuilder.loadTexts: ipxSapFltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltEntry.setDescription('')
ipxSapFltIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltIpxLinkIndex.setDescription('IPX Link index')
ipxSapFltDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 2), FltDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltDirection.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltDirection.setDescription('Filter direction')
ipxSapFltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltNumber.setDescription('Filter number')
ipxSapFltAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 4), FltAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltAction.setDescription('Action to perform on packet if filter matches.')
ipxSapFltNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltNetworkAddress.setDescription('Network number or group of networks. If ipxSapFltNetworkAddress is 0x00000000 and ipxSapFltNetworkMask is 0xFFFFFFFF then filtering is disabled.')
ipxSapFltNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltNetworkMask.setDescription('Network mask')
ipxSapFltNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltNodeAddress.setDescription('If node is 0x00000000 filtering is disabled.')
ipxSapFltServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltServiceType.setDescription('Service type')
ipxSapFltServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapFltServerName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapFltServerName.setDescription('Server name')
ipxDataFltTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4), )
if mibBuilder.loadTexts: ipxDataFltTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltTable.setDescription('Data Filters')
ipxDataFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxDataFltIpxLinkIndex"), (0, "INTEL-IPX-MIB", "ipxDataFltDirection"), (0, "INTEL-IPX-MIB", "ipxDataFltNumber"))
if mibBuilder.loadTexts: ipxDataFltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltEntry.setDescription('')
ipxDataFltIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltIpxLinkIndex.setDescription('IPX Link index')
ipxDataFltDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 2), FltDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltDirection.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltDirection.setDescription('Filter direction')
ipxDataFltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltNumber.setDescription('Filter number')
ipxDataFltAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 4), FltAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltAction.setDescription('Action to perform on packet if filter matches.')
ipxDataFltDstNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltDstNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltDstNetworkAddress.setDescription('Network number or group of networks. If ipxDataFltDstNetworkAddress is 0x00000000 and ipxDataFltDstNetworkMask is 0xFFFFFFFF then filtering is disabled.')
ipxDataFltDstNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltDstNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltDstNetworkMask.setDescription('Destination network mask')
ipxDataFltDstNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltDstNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltDstNodeAddress.setDescription('If node is 0x00000000 filtering is disabled.')
ipxDataFltDstSocketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltDstSocketFilter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltDstSocketFilter.setDescription('Determines if filtering on destination socket is enabled.')
ipxDataFltDstSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltDstSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltDstSocket.setDescription('Destination socket')
ipxDataFltSrcNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltSrcNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltSrcNetworkAddress.setDescription('Network number or group of networks. If ipxDataFltDstNetworkAddress is 0x00000000 and ipxDataFltDstNetworkMask is 0xFFFFFFFF then filtering is disabled.')
ipxDataFltSrcNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltSrcNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltSrcNetworkMask.setDescription('Source network mask')
ipxDataFltSrcNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltSrcNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltSrcNodeAddress.setDescription('If node is 0x00000000 filtering is disabled.')
ipxDataFltSrcSocketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltSrcSocketFilter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltSrcSocketFilter.setDescription('Determines if filtering on source socket is enabled.')
ipxDataFltSrcSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltSrcSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltSrcSocket.setDescription('Source socket')
ipxDataFltPacketTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltPacketTypeFilter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltPacketTypeFilter.setDescription('Determines if filtering on packet type is enabled.')
ipxDataFltPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltPacketType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltPacketType.setDescription('Packet Type')
ipxDataFltHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDataFltHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDataFltHits.setDescription('Number of matches for this filter')
ipxConfAutoIntNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxConfAutoIntNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxConfAutoIntNetNumber.setDescription('Specifies if the Internal Network Number should be defined automatically (which means that the 4 lower bytes of the MAC address are used.')
ipxConfIntNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxConfIntNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxConfIntNetNumber.setDescription('Internal Network Number')
ipxLinkMonTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1), )
if mibBuilder.loadTexts: ipxLinkMonTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonTable.setDescription('This table contains link-specific parameters.')
ipxLinkMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxLinkMonIpxLinkIndex"))
if mibBuilder.loadTexts: ipxLinkMonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonEntry.setDescription('')
ipxLinkMonIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkMonIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonIpxLinkIndex.setDescription('IPX Link index.')
ipxLinkMonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkMonIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonIfIndex.setDescription('Interface index for layer below.')
ipxLinkMonState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("negotiating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkMonState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonState.setDescription('Link state')
ipxLinkMonDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkMonDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonDelay.setDescription('Link Delay in ticks (1 tick = 55 ms). The delay can be calculated automatically or configured manuallly.')
ipxLinkMonMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkMonMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkMonMtuSize.setDescription('MTU Size is maximum packet size that can be received and transmitted')
ipxStatusConfigTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatusConfigTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStatusConfigTimeStamp.setDescription('Last configuration time in time ticks (like sysUpTime).')
ipxStatusReachableNets = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatusReachableNets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStatusReachableNets.setDescription('Number of reachable networks in RIP Table.')
ipxStatusDeadNets = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatusDeadNets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStatusDeadNets.setDescription('Number of dead networks in RIP Table.')
ipxStatusReachableServices = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatusReachableServices.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStatusReachableServices.setDescription('Number of reachable networks in SAP Table.')
ipxStatusDeadServices = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatusDeadServices.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStatusDeadServices.setDescription('Number of dead (hops=16) networks in SAP Table.')
ipxStatusLinkTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 3, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStatusLinkTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxStatusLinkTimeStamp.setDescription('Last change in a link state in time ticks (like sysUpTime).')
ipxLinkCntTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1), )
if mibBuilder.loadTexts: ipxLinkCntTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTable.setDescription('This table contains link-specific counters.')
ipxLinkCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxLinkCntIpxLinkIndex"))
if mibBuilder.loadTexts: ipxLinkCntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntEntry.setDescription('')
ipxLinkCntIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntIpxLinkIndex.setDescription('IPX Link index.')
ipxLinkCntRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxTotal.setDescription('Total number of received IPX packets.')
ipxLinkCntTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxTotal.setDescription('Total number of transmitted IPX packets.')
ipxLinkCntTxFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxFailed.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxFailed.setDescription('Number of packets that could not be transmitted.')
ipxLinkCntRxFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxFiltered.setDescription('Total number of received packets that were filtered.')
ipxLinkCntTxFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxFiltered.setDescription('Total number of packets to be transmitted that were filtered.')
ipxLinkCntRxTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxTooManyHops.setDescription('Total number of IPX packets that have exceeded the maximum hop count.')
ipxLinkCntRxHeaderErr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxHeaderErr.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxHeaderErr.setDescription('Total number of IPX packets with bad length.')
ipxLinkCntRxSapReq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxSapReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxSapReq.setDescription('Total number of IPX SAP request packets received.')
ipxLinkCntTxSapReq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxSapReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxSapReq.setDescription('Total number of IPX SAP request packets transmitted.')
ipxLinkCntRxSapResp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxSapResp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxSapResp.setDescription('Total number of IPX SAP response packets received.')
ipxLinkCntTxSapReply = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxSapReply.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxSapReply.setDescription('Total number of IPX SAP reply packets transmitted.')
ipxLinkCntRxSapInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxSapInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxSapInvalid.setDescription('Number of invalid IPX SAP request packets.')
ipxLinkCntRxRipReq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxRipReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxRipReq.setDescription('Total number of IPX RIP request packets received.')
ipxLinkCntTxRipReq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxRipReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxRipReq.setDescription('Total number of IPX RIP request packets transmitted.')
ipxLinkCntRxRipResp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxRipResp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxRipResp.setDescription('Total number of IPX RIP response packets received.')
ipxLinkCntTxRipReply = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxRipReply.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxRipReply.setDescription('Total number of IPX RIP reply packets transmitted.')
ipxLinkCntRxRipInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxRipInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxRipInvalid.setDescription('Number of invalid IPX RIP request packets.')
ipxLinkCntRxType20 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxType20.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxType20.setDescription('Total number of Type 20 propagation packet received.')
ipxLinkCntTxType20 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxType20.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxType20.setDescription('Total number of Type 20 propagation packet transmitted.')
ipxLinkCntType20Disc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntType20Disc.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntType20Disc.setDescription('Number of Type 20 Propagation discarded.')
ipxLinkCntNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntNoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntNoRoute.setDescription('Total number of IPX packets dropped due to unknown net number.')
ipxLinkCntRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxDiscarded.setDescription('Total number of discarded IPX packets.')
ipxLinkCntSpxSpoofed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntSpxSpoofed.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntSpxSpoofed.setDescription('Number of SPX packets spoofed.')
ipxLinkCntWatchdogSpoofed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntWatchdogSpoofed.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntWatchdogSpoofed.setDescription('Number of Watchdog packets spoofed.')
ipxLinkCntForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntForwarded.setDescription('Number of packets sent that were received on another interface.')
ipxLinkCntCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntCacheHits.setDescription('Number of packets that were cache forwarded.')
ipxLinkCntSPXCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntSPXCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntSPXCacheHits.setDescription('Number of cache hits in SPX Spoofing Table.')
ipxLinkCntRxDefDataFltHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntRxDefDataFltHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntRxDefDataFltHits.setDescription('Number of times a packet did not match any receive filters and the default action was used.')
ipxLinkCntTxDefDataFltHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkCntTxDefDataFltHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkCntTxDefDataFltHits.setDescription('Number of times a packet did not match any transmit filters and the default action was used.')
ipxLinkByteCntTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2), )
if mibBuilder.loadTexts: ipxLinkByteCntTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTable.setDescription('This table contains link-specific byte counters.')
ipxLinkByteCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxLinkByteCntIpxLinkIndex"))
if mibBuilder.loadTexts: ipxLinkByteCntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntEntry.setDescription('')
ipxLinkByteCntIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntIpxLinkIndex.setDescription('IPX Link index.')
ipxLinkByteCntRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxTotal.setDescription('Number of bytes received in total for link.')
ipxLinkByteCntTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxTotal.setDescription('Number of bytes transmitted in total for link.')
ipxLinkByteCntRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxOther.setDescription('Number of bytes received of unknown types.')
ipxLinkByteCntTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxOther.setDescription('Number of bytes transmitted of unknown types.')
ipxLinkByteCntRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxNcp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxNcp.setDescription('Number of NCP bytes received.')
ipxLinkByteCntTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxNcp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxNcp.setDescription('Number of NCP bytes transmitted.')
ipxLinkByteCntRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxSpx.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxSpx.setDescription('Number of SPX bytes received.')
ipxLinkByteCntTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxSpx.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxSpx.setDescription('Number of SPX bytes transmitted.')
ipxLinkByteCntRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxRip.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxRip.setDescription('Number of RIP bytes received.')
ipxLinkByteCntTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxRip.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxRip.setDescription('Number of RIP bytes transmitted.')
ipxLinkByteCntRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxSap.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxSap.setDescription('Number of SAP bytes received.')
ipxLinkByteCntTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxSap.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxSap.setDescription('Number of SAP bytes transmitted.')
ipxLinkByteCntRxType20 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntRxType20.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntRxType20.setDescription('Number of Type 20 bytes received.')
ipxLinkByteCntTxType20 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxLinkByteCntTxType20.setStatus('mandatory')
if mibBuilder.loadTexts: ipxLinkByteCntTxType20.setDescription('Number of Type 20 bytes transmitted.')
ipxCountRxTotal = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxTotal.setDescription('Total number of received IPX packets.')
ipxCountTxTotal = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxTotal.setDescription('Total number of transmitted IPX packets.')
ipxCountTxFailed = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxFailed.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxFailed.setDescription('Number of packets that could not be transmitted.')
ipxCountRxFiltered = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxFiltered.setDescription('Total number of received packets that were filtered.')
ipxCountTxFiltered = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxFiltered.setDescription('Total number of packets to be transmitted that were filtered.')
ipxCountRxTooManyHops = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxTooManyHops.setDescription('Total number of IPX packets that have exceeded the maximum hop count.')
ipxCountRxHeaderErr = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxHeaderErr.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxHeaderErr.setDescription('Total number of IPX packets with bad length.')
ipxCountRxSapReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxSapReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxSapReq.setDescription('Total number of IPX SAP request packets received.')
ipxCountTxSapReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxSapReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxSapReq.setDescription('Total number of IPX SAP request packets transmitted.')
ipxCountRxSapResp = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxSapResp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxSapResp.setDescription('Total number of IPX SAP response packets received.')
ipxCountTxSapReply = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxSapReply.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxSapReply.setDescription('Total number of IPX SAP reply packets transmitted.')
ipxCountRxSapInvalid = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxSapInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxSapInvalid.setDescription('Number of invalid IPX SAP request packets.')
ipxCountRxRipReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxRipReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxRipReq.setDescription('Total number of IPX RIP request packets received.')
ipxCountTxRipReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxRipReq.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxRipReq.setDescription('Total number of IPX RIP request packets transmitted.')
ipxCountRxRipResp = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxRipResp.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxRipResp.setDescription('Total number of IPX RIP response packets received.')
ipxCountTxRipReply = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxRipReply.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxRipReply.setDescription('Total number of IPX RIP reply packets transmitted.')
ipxCountRxRipInvalid = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxRipInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxRipInvalid.setDescription('Number of invalid IPX RIP request packets.')
ipxCountRxType20 = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxType20.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxType20.setDescription('Total number of Type 20 propagation packet received.')
ipxCountTxType20 = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountTxType20.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountTxType20.setDescription('Total number of Type 20 propagation packet transmitted.')
ipxCountType20Disc = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountType20Disc.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountType20Disc.setDescription('Number of Type 20 Propagation discarded.')
ipxCountNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountNoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountNoRoute.setDescription('Total number of IPX packets dropped due to unknownnet number.')
ipxCountRxDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountRxDiscarded.setDescription('Total number of discarded IPX packets.')
ipxCountSpxSpoofed = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountSpxSpoofed.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountSpxSpoofed.setDescription('Number of SPX packets spoofed.')
ipxCountWatchdogSpoofed = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountWatchdogSpoofed.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountWatchdogSpoofed.setDescription('Number of Watchdog packets spoofed.')
ipxCountForwarded = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountForwarded.setDescription('Number of packets sent that were received onanother interface.')
ipxCountCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountCacheHits.setDescription('Number of packets that were cache forwarded.')
ipxCountSPXCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 22, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCountSPXCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCountSPXCacheHits.setDescription('Number of cache hits in SPX Spoofing Table.')
ipxRipTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1), )
if mibBuilder.loadTexts: ipxRipTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipTable.setDescription('RIP table - supplement to table in Novells MIB')
ipxRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxRipNetwork"))
if mibBuilder.loadTexts: ipxRipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipEntry.setDescription('')
ipxRipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipNetwork.setDescription('')
ipxRipIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIpxLinkIndex.setDescription('Network received on interface with this IPX Link index.')
ipxRipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfIndex.setDescription('Network received on interface with this interface index.')
ipxRipProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5), ("staticBackup", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipProtocol.setDescription('Specifies where the network entry came from. Note: local is the same as direct.')
ipxRipDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipDelay.setDescription('Delay to destination measured in ticks (1 tick = 55 ms).')
ipxRipHops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipHops.setDescription('Number of hops to route.')
ipxRipAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipAge.setDescription('Time in milliseconds since (re)insertion.')
ipxRipIpxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 8), IpxAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipIpxAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIpxAddr.setDescription('The route was learned from this IPX address.')
ipxRipStaticCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipStaticCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipStaticCount.setDescription('Number of other static route to this network.')
ipxSapTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1), )
if mibBuilder.loadTexts: ipxSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapTable.setDescription('SAP table - supplement to table in Novells MIB')
ipxSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1), ).setIndexNames((0, "INTEL-IPX-MIB", "ipxSapServerAddr"), (0, "INTEL-IPX-MIB", "ipxSapServerType"))
if mibBuilder.loadTexts: ipxSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapEntry.setDescription('')
ipxSapServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 1), IpxAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapServerAddr.setDescription('Address of server')
ipxSapServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapServerType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapServerType.setDescription('Service type')
ipxSapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapServerName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapServerName.setDescription('')
ipxSapIpxLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapIpxLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIpxLinkIndex.setDescription('Service received on interface with this IPX Link index.')
ipxSapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfIndex.setDescription('Service received on interface with this interface index.')
ipxSapAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapAge.setDescription('Time in milliseconds since (re)insertion.')
ipxSapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6))).clone(namedValues=NamedValues(("static", 5), ("sap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapProtocol.setDescription('Specifies how the service was learned.')
ipxSapHops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapHops.setDescription('')
ipxSapStaticCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 22, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapStaticCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapStaticCount.setDescription('Number of other static services with this name and type.')
mibBuilder.exportSymbols("INTEL-IPX-MIB", ipxCountTxSapReq=ipxCountTxSapReq, ipxRipFltEntry=ipxRipFltEntry, ipxLinkConfSapUpdateInterval=ipxLinkConfSapUpdateInterval, ipxLinkCntRxTotal=ipxLinkCntRxTotal, ipxCountSPXCacheHits=ipxCountSPXCacheHits, ipxLinkCntRxTooManyHops=ipxLinkCntRxTooManyHops, ipxRipIfIndex=ipxRipIfIndex, ipxStatus=ipxStatus, ipxLinkMonTable=ipxLinkMonTable, ipxSap=ipxSap, ipxRipFltNumber=ipxRipFltNumber, ipxLinkByteCntRxTotal=ipxLinkByteCntRxTotal, ipxLinkConfRipUpdateInterval=ipxLinkConfRipUpdateInterval, ipxStatusDeadServices=ipxStatusDeadServices, ipxSapServerAddr=ipxSapServerAddr, FltDirection=FltDirection, ipxDataFltHits=ipxDataFltHits, ipxDataFltPacketType=ipxDataFltPacketType, ipxLinkConfDataFltTxDefaultAction=ipxLinkConfDataFltTxDefaultAction, ipxLinkConfRipTrigger=ipxLinkConfRipTrigger, ipxDataFltDstNodeAddress=ipxDataFltDstNodeAddress, ipxLinkCntRxDiscarded=ipxLinkCntRxDiscarded, ipxDataFltSrcNodeAddress=ipxDataFltSrcNodeAddress, ipxLinkCntWatchdogSpoofed=ipxLinkCntWatchdogSpoofed, ipxConfAutoIntNetNumber=ipxConfAutoIntNetNumber, ipxLinkConfNet=ipxLinkConfNet, ipxDataFltAction=ipxDataFltAction, ipxRipHops=ipxRipHops, ipxLinkByteCntIpxLinkIndex=ipxLinkByteCntIpxLinkIndex, ipxSapFltServiceType=ipxSapFltServiceType, ipxSapIfIndex=ipxSapIfIndex, ipxLinkCntTxFailed=ipxLinkCntTxFailed, ipxCountTxRipReply=ipxCountTxRipReply, ipxRipNetwork=ipxRipNetwork, ipxLinkCntRxHeaderErr=ipxLinkCntRxHeaderErr, ipxLinkByteCntTxSpx=ipxLinkByteCntTxSpx, ipxDataFltDstSocketFilter=ipxDataFltDstSocketFilter, ipxLinkMonIfIndex=ipxLinkMonIfIndex, ipxLinkCntSPXCacheHits=ipxLinkCntSPXCacheHits, ipxLinkByteCntRxSpx=ipxLinkByteCntRxSpx, ipxStatusConfigTimeStamp=ipxStatusConfigTimeStamp, ipxDataFltEntry=ipxDataFltEntry, ipxLinkConfIpxLinkIndex=ipxLinkConfIpxLinkIndex, ipxLinkCntRxRipInvalid=ipxLinkCntRxRipInvalid, ipxLinkCntRxDefDataFltHits=ipxLinkCntRxDefDataFltHits, ipxCountRxTooManyHops=ipxCountRxTooManyHops, ipxRipProtocol=ipxRipProtocol, ipxDataFltIpxLinkIndex=ipxDataFltIpxLinkIndex, ipxLinkCntRxFiltered=ipxLinkCntRxFiltered, ipxCountRxRipInvalid=ipxCountRxRipInvalid, ipxDataFltNumber=ipxDataFltNumber, ipxRipFltIpxLinkIndex=ipxRipFltIpxLinkIndex, ipxRipFltTable=ipxRipFltTable, ipxSapFltNetworkMask=ipxSapFltNetworkMask, ipxDataFltDstSocket=ipxDataFltDstSocket, ipxLinkCntCacheHits=ipxLinkCntCacheHits, ipxLinkConfFrameParam=ipxLinkConfFrameParam, ipxLinkByteCntRxOther=ipxLinkByteCntRxOther, ipxDataFltPacketTypeFilter=ipxDataFltPacketTypeFilter, ipxLinkCntSpxSpoofed=ipxLinkCntSpxSpoofed, ipxLinkCntTxRipReq=ipxLinkCntTxRipReq, ipxRipFltNetworkAddress=ipxRipFltNetworkAddress, ipxCountCacheHits=ipxCountCacheHits, ipxLinkConfEntry=ipxLinkConfEntry, ipxLinkConfSapFltTxDefaultAction=ipxLinkConfSapFltTxDefaultAction, ipxLinkCntTxSapReply=ipxLinkCntTxSapReply, ipxRip=ipxRip, ipxCount=ipxCount, ipxLinkConfAutomaticDelay=ipxLinkConfAutomaticDelay, ipxSapFltIpxLinkIndex=ipxSapFltIpxLinkIndex, ipxCountTxFiltered=ipxCountTxFiltered, ipxLinkConfSapTrigger=ipxLinkConfSapTrigger, ipxLinkConfFrameType=ipxLinkConfFrameType, ipxCountRxTotal=ipxCountRxTotal, ipxLinkConfDelay=ipxLinkConfDelay, ipxCountRxRipReq=ipxCountRxRipReq, ipxRipAge=ipxRipAge, ipxDataFltSrcNetworkAddress=ipxDataFltSrcNetworkAddress, ipxLinkConfSpxSessionTimeout=ipxLinkConfSpxSessionTimeout, IpxAddr=IpxAddr, ipxStatusLinkTimeStamp=ipxStatusLinkTimeStamp, ipxLinkConfIpxWanNegotiation=ipxLinkConfIpxWanNegotiation, ipxLinkMonState=ipxLinkMonState, ipxSapFltNodeAddress=ipxSapFltNodeAddress, ipxCountRxHeaderErr=ipxCountRxHeaderErr, ipxCountRxSapInvalid=ipxCountRxSapInvalid, ipxCountTxType20=ipxCountTxType20, ipxCountRxDiscarded=ipxCountRxDiscarded, ipxSapStaticCount=ipxSapStaticCount, ipxLinkByteCntTxOther=ipxLinkByteCntTxOther, ipxSapIpxLinkIndex=ipxSapIpxLinkIndex, ipxStatusReachableServices=ipxStatusReachableServices, ipxLinkConfWatchdogSpoofing=ipxLinkConfWatchdogSpoofing, ipxLinkMonDelay=ipxLinkMonDelay, ipxLinkCntTxType20=ipxLinkCntTxType20, ipxLinkByteCntTxTotal=ipxLinkByteCntTxTotal, ipxDataFltDstNetworkAddress=ipxDataFltDstNetworkAddress, ipxRipEntry=ipxRipEntry, ipxLinkCntRxRipReq=ipxLinkCntRxRipReq, ipxLinkByteCntTxNcp=ipxLinkByteCntTxNcp, ipxLinkCntTxRipReply=ipxLinkCntTxRipReply, ipxLinkCntTxDefDataFltHits=ipxLinkCntTxDefDataFltHits, ipxSapFltTable=ipxSapFltTable, ipxLinkByteCntEntry=ipxLinkByteCntEntry, ipxCountTxSapReply=ipxCountTxSapReply, ipxLinkConfRoutingProtocol=ipxLinkConfRoutingProtocol, ipxLinkConfSpxSpoofing=ipxLinkConfSpxSpoofing, ipxRipFltAction=ipxRipFltAction, ipxConf=ipxConf, ipxSapFltEntry=ipxSapFltEntry, ipxDataFltSrcSocketFilter=ipxDataFltSrcSocketFilter, ipxLinkByteCntTxType20=ipxLinkByteCntTxType20, ipxLinkConfDataFilters=ipxLinkConfDataFilters, ipxDataFltDirection=ipxDataFltDirection, ipxSapHops=ipxSapHops, ipxLinkByteCntTable=ipxLinkByteCntTable, ipxLinkConfDeleteObj=ipxLinkConfDeleteObj, ipxLinkConfDataFltRxDefaultAction=ipxLinkConfDataFltRxDefaultAction, ipxLinkByteCntRxSap=ipxLinkByteCntRxSap, ipxDataFltDstNetworkMask=ipxDataFltDstNetworkMask, ipxSapFltAction=ipxSapFltAction, ipxRipFltDirection=ipxRipFltDirection, ipxLinkConfCreateObj=ipxLinkConfCreateObj, ipxLinkByteCntRxNcp=ipxLinkByteCntRxNcp, ipxLinkMonMtuSize=ipxLinkMonMtuSize, ipxSapServerName=ipxSapServerName, ipxLinkCntRxSapInvalid=ipxLinkCntRxSapInvalid, ipxSapAge=ipxSapAge, ipxCountRxType20=ipxCountRxType20, ipxSapProtocol=ipxSapProtocol, ipxLinkCntRxSapReq=ipxLinkCntRxSapReq, ipxSapFltNumber=ipxSapFltNumber, ipxLinkMonEntry=ipxLinkMonEntry, ipxCountRxSapResp=ipxCountRxSapResp, ipxRipTable=ipxRipTable, ipxCountTxTotal=ipxCountTxTotal, ipxLinkByteCntTxSap=ipxLinkByteCntTxSap, ipxStatusDeadNets=ipxStatusDeadNets, ipxCountRxFiltered=ipxCountRxFiltered, ipxLinkMonIpxLinkIndex=ipxLinkMonIpxLinkIndex, ipxLinkConfSapFltRxDefaultAction=ipxLinkConfSapFltRxDefaultAction, ipxSapFltDirection=ipxSapFltDirection, ipxCountType20Disc=ipxCountType20Disc, ipxLinkCntNoRoute=ipxLinkCntNoRoute, ipxLinkCntEntry=ipxLinkCntEntry, ipxSapServerType=ipxSapServerType, ipxLinkCntTxSapReq=ipxLinkCntTxSapReq, ipxCountRxSapReq=ipxCountRxSapReq, ipxLinkConfRipFltTxDefaultAction=ipxLinkConfRipFltTxDefaultAction, ipxLinkConfNumbered=ipxLinkConfNumbered, ipxLinkConfRipFltRxDefaultAction=ipxLinkConfRipFltRxDefaultAction, FltAction=FltAction, ipxLinkCntRxType20=ipxLinkCntRxType20, ipxCountForwarded=ipxCountForwarded, ipxStatusReachableNets=ipxStatusReachableNets, ipxLinkCntRxRipResp=ipxLinkCntRxRipResp, ipxLinkCntForwarded=ipxLinkCntForwarded, ipxControl=ipxControl, ipx=ipx, ipxDataFltTable=ipxDataFltTable, ipxLinkCntRxSapResp=ipxLinkCntRxSapResp, ipxConfIntNetNumber=ipxConfIntNetNumber, ipxControlCommand=ipxControlCommand, ipxSapTable=ipxSapTable, ipxRipStaticCount=ipxRipStaticCount, ipxCountWatchdogSpoofed=ipxCountWatchdogSpoofed, ipxSapEntry=ipxSapEntry, ipxCountNoRoute=ipxCountNoRoute, ipxLinkCntTxFiltered=ipxLinkCntTxFiltered, ipxRipIpxLinkIndex=ipxRipIpxLinkIndex, ipxLinkConfTable=ipxLinkConfTable, ipxLinkByteCntRxRip=ipxLinkByteCntRxRip, ipxLinkConfType20Broadcast=ipxLinkConfType20Broadcast, ipxLinkCntTable=ipxLinkCntTable, ipxDataFltSrcSocket=ipxDataFltSrcSocket, ipxLinkCntType20Disc=ipxLinkCntType20Disc, ipxSapFltNetworkAddress=ipxSapFltNetworkAddress, ipxDataFltSrcNetworkMask=ipxDataFltSrcNetworkMask, ipxSapFltServerName=ipxSapFltServerName, ipxLinkByteCntRxType20=ipxLinkByteCntRxType20, ipxCountRxRipResp=ipxCountRxRipResp, ipxRipDelay=ipxRipDelay, ipxLinkCntIpxLinkIndex=ipxLinkCntIpxLinkIndex, ipxLinkCntTxTotal=ipxLinkCntTxTotal, ipxRipFltNetworkMask=ipxRipFltNetworkMask, ipxCountSpxSpoofed=ipxCountSpxSpoofed, ipxCountTxRipReq=ipxCountTxRipReq, ipxCountTxFailed=ipxCountTxFailed, ipxLinkByteCntTxRip=ipxLinkByteCntTxRip, ipxRipIpxAddr=ipxRipIpxAddr)
