#
# PySNMP MIB module ALCATEL-IND1-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1Ospf, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Ospf")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ospfAreaEntry, ospfExtLsdbEntry, ospfIfEntry, ospfVirtIfEntry, ospfAreaAggregateEntry, ospfNbrEntry, ospfAreaId, ospfVirtNbrEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfAreaEntry", "ospfExtLsdbEntry", "ospfIfEntry", "ospfVirtIfEntry", "ospfAreaAggregateEntry", "ospfNbrEntry", "ospfAreaId", "ospfVirtNbrEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, NotificationType, MibIdentifier, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, Gauge32, Integer32, ObjectIdentity, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "NotificationType", "MibIdentifier", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "Gauge32", "Integer32", "ObjectIdentity", "Unsigned32", "Bits")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
alcatelIND1OSPFMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1))
alcatelIND1OSPFMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line Configuration Of Global OSPF Configuration Parameters. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1OSPFMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBObjects.setDescription('Branch For Open Shortest Path First (OSPF) Subsystem Managed Objects.')
alcatelIND1OSPFMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBConformance.setDescription('Branch For Open Shortest Path First (OSPF) Subsystem Conformance Information.')
alcatelIND1OSPFMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBGroups.setDescription('Branch For Open Shortest Path First (OSPF) Subsystem Units Of Conformance.')
alcatelIND1OSPFMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBCompliances.setDescription('Branch For Open Shortest Path First (OSPF) Subsystem Compliance Statements.')
class AlaAuthenticationEncryptKey(TextualConvention, OctetString):
    description = 'The authentication encryption key that is used to decypher RIP simple passwords.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

alaProtocolOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1))
alaOspfRedistAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistAdminStatus.setDescription('Enable or disable redistribution of routes into OSPF. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaOspfRedistRouteTag.setDescription('A 32-bit value tagged to each OSPF internal route that is redistributed in to other routing protocol domains. The lower 16-bits typically indicate the autonomous system number.')
alaOspfTimerSpfDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfTimerSpfDelay.setStatus('current')
if mibBuilder.loadTexts: alaOspfTimerSpfDelay.setDescription('Number of seconds to delay the SPF calculation after receiving a topology change. This value should not be greater than SPF hold time.')
alaOspfTimerSpfHold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfTimerSpfHold.setStatus('current')
if mibBuilder.loadTexts: alaOspfTimerSpfHold.setDescription('Minimum time, in seconds, between two consecutive SPF calculations. This value should not be less than SPF delay time.')
alaOspfRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteNumber.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteNumber.setDescription('The number of network routes in OSPF routing table.')
alaOspfMTUCheck = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfMTUCheck.setStatus('current')
if mibBuilder.loadTexts: alaOspfMTUCheck.setDescription('Enable or disable the check for MTU size in database description packets. Disabled by default')
alaOspfAsBdrRtr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfAsBdrRtr.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfAsBdrRtr.setDescription('Enable or disable the switch being configured as an ASBR (Autonomous System Border Router. NOT SUPPORTED - Use IETF_OSPF.mib variable ospfASBdrRtrStatus.')
alaOspfRedistProtoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10), )
if mibBuilder.loadTexts: alaOspfRedistProtoTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoTable.setDescription('Protocol based configuration for route redistribution using OSPF. This table has been deprecated. Use the alaRouteMapRedistProtoTable of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoId"))
if mibBuilder.loadTexts: alaOspfRedistProtoEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoEntry.setDescription('A range of routes from a protocol to be redistributed using OSPF. This entry has been deprecated. Use the alaRouteMapRedistProtoEntry of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 38, 70, 102, 134, 166, 198, 230))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("static", 3), ("directHost", 4), ("rip", 5), ("ospf", 6), ("isis", 7), ("bgp", 8), ("ospf2", 38), ("ospf3", 70), ("ospf4", 102), ("ospf5", 134), ("ospf6", 166), ("ospf7", 198), ("ospf8", 230))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRedistProtoId.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoId.setDescription('The routing mechanism via which the routes, to be redistributed using OSPF, are learned. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistProtoSubnets.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoSubnets.setDescription('Enable/disable the reditribution of subnet routes. Default value is enable. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistProtoMetricType.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoMetricType.setDescription('Type of metric to be used for redistribution. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistProtoMetric.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoMetric.setDescription('Default metric to be used for redistributing routes using type1 metric type. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1, 5), RowStatus().clone('notInService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistProtoStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoStatus.setDescription('Row status of this entry. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistProtoRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRedistProtoRouteTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoRouteTag.setDescription('Associated route tag. This object has been deprecated.')
alaOspfDebugConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2))
alaOspfDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugLevel.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugLevel.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebug Configuration')
alaOspfDebugError = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugError.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugError.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugError MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugWarning = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugWarning.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugWarning.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugWarning MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugState.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugState.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugState MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugRecv = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugRecv.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugRecv.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugRecv MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugSend = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugSend.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugSend.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugSend MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugFlood = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugFlood.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugFlood.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugFlood MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugSPF = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugSPF.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugSPF.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugSPF MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugLsdb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugLsdb.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugLsdb.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugLsdb MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugRdb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugRdb.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugRdb.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugRdb MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugAge = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugAge.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugAge.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugAge MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugVlink = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugVlink.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugVlink.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugVlink MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugRedist = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugRedist.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugRedist.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugRedist MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugSummary = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugSummary.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugSummary.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugSummary MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugDbexch = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugDbexch.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugDbexch.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugDbexch MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugHello = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugHello.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugHello.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugHello MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugAuth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugAuth.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugAuth.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugAuth MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugArea = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugArea.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugArea.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugArea MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugIntf = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugIntf.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugIntf.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugIntf MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugMip = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugMip.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugMip.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugMip MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugInfo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugInfo.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugInfo.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugInfo MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugSetup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugSetup.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugSetup.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugSetup MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugTime.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugTime.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugTime MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugTm = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugTm.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugTm.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugTm MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugAll = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugAll.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugAll.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugAll MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugRestart = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugRestart.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugRestart.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugRestart MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfDebugHelper = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDebugHelper.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfDebugHelper.setDescription('This Object is deprecated in favour of alaDrcTmOspfDebugHelper MIB Object of alaDrcTmOspfDebug Configuration')
alaOspfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12), )
if mibBuilder.loadTexts: alaOspfRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteTable.setDescription('OSPF routing table which contains the network routes.')
alaOspfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteDest"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMask"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteTos"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteNextHop"))
if mibBuilder.loadTexts: alaOspfRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteEntry.setDescription('OSPF routing table which contains the network routes.')
alaOspfRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteDest.setDescription('The destination IP address of this route.')
alaOspfRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteMask.setDescription('The network mask for this route.')
alaOspfRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteTos.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteTos.setDescription('Type Of Service (TOS) for this route.')
alaOspfRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteNextHop.setDescription('The address of the next hop to reach this route.')
alaOspfRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached.')
alaOspfRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("intraArea", 1), ("interArea", 2), ("externalType1", 3), ("externalType2", 4), ("nssaExternalType1", 5), ("nssaExternalType2", 6))).clone('intraArea')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteType.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteType.setDescription('The type of route.')
alaOspfRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteAge.setDescription('The number of seconds since this route was last updated or otherwise determined to be correct.')
alaOspfRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteTag.setDescription("The associated route tag for external roues. It's 0 for routes internal to the autonomous system.")
alaOspfRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteMetric1.setDescription('The primary routing metric for this route.')
alaOspfRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteMetric2.setDescription("An alternate routing metric for this route. It's 0 for internal routes. For an external route, it's the metric to reach the ASBR that announced the external route.")
alaOspfRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 11), RowStatus().clone('notInService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
alaOspfBdrRouterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13), )
if mibBuilder.loadTexts: alaOspfBdrRouterTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterTable.setDescription('OSPF routing table which contains the routes to border (ABR and ASBR) routers.')
alaOspfBdrRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterAreaId"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterId"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterTos"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterNextHop"))
if mibBuilder.loadTexts: alaOspfBdrRouterEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterEntry.setDescription('OSPF routing table which contains the routes to border (ABR and ASBR) routers.')
alaOspfBdrRouterAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterAreaId.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterAreaId.setDescription('The area to which the border router belongs to.')
alaOspfBdrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterId.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterId.setDescription('The router idenitifer of this border router.')
alaOspfBdrRouterTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterTos.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterTos.setDescription('Type Of Service (TOS) for this route.')
alaOspfBdrRouterNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterNextHop.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterNextHop.setDescription('The address of the next hop to reach this border router.')
alaOspfBdrRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached.')
alaOspfBdrRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abr", 1), ("asbr", 2), ("abrAsbr", 3))).clone('abr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterType.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterType.setDescription('The type of border router.')
alaOspfBdrRouterAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterAge.setDescription('The number of seconds since this route was last updated or otherwise determined to be correct.')
alaOspfBdrRouterMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterMetric.setDescription('The cost to reach the border router.')
alaOspfBdrRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 9), RowStatus().clone('notInService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
alaOspfRedistRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14), )
if mibBuilder.loadTexts: alaOspfRedistRouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteTable.setDescription('A configuration table which controls the routes to be redistributed by OSPF from other routing protocols. This table has been deprecated. Use the alaRouteMapRedistProtoTable of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteProto"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteDest"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteMask"))
if mibBuilder.loadTexts: alaOspfRedistRouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteEntry.setDescription('A configuration table which controls the routes to be redistributed by OSPF from other routing protocols. This entry has been deprecated. Use the alaRouteMapRedistProtoEntry of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("static", 3), ("directHost", 4), ("rip", 5), ("isis", 7), ("bgp", 8))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteProto.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteProto.setDescription('Protocol from which this route is to be imported into OSPF. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRedistRouteDest.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteDest.setDescription('The destination IP address of this route. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRedistRouteMask.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteMask.setDescription('The network mask for this route. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteMetric.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteMetric.setDescription('The metric to be used for the redistributed route. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redistributeAllSubnets", 1), ("redistributeAsAggregate", 2), ("redistributeExactMatch", 3))).clone('redistributeAllSubnets')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteControl.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteControl.setDescription('Specifies how routes matching this entry are to be redistributed into OSPF. The different mechanisms possible are to redistribute all the subnet routes, redistribute an aggregated route if there are one or more actual routes which match this entry or redistribute only an exactly matching route. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteTagMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteTagMatch.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteTagMatch.setDescription('Redistribute the route only when the route tag matches with this value. It defaults to 0 which matches all route tags. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redistribute", 1), ("doNotRedistribute", 2))).clone('redistribute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteEffect.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteEffect.setDescription('Specifies whether the redistribution of routes in this range is allowed or denied. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfRedistRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 14, 1, 8), RowStatus().clone('notInService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteStatus.setDescription('The row status variable, used according to row installation and removal conventions. This object has been deprecated. Use the alaRouteMapRedistProtoEntry objects of AlcatelIND1RouteMap.mib.')
alaOspfIfMd5Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16), )
if mibBuilder.loadTexts: alaOspfIfMd5Table.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Table.setDescription('The OSPF Interface MD5 Table describes the MD5 key management for OSPF interfaces.')
alaOspfIfMd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5IpAddress"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyId"))
if mibBuilder.loadTexts: alaOspfIfMd5Entry.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Entry.setDescription('The OSPF Interface MD5 Entry describes the MD5 key management for OSPF interfaces.')
alaOspfIfMd5IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfMd5IpAddress.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5IpAddress.setDescription('The IP address of this OSPF MD5 key interface.')
alaOspfIfMd5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfMd5KeyId.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyId.setDescription('A key identifier which identifies the algorithm and MD5 secret key associated with this interface.')
alaOspfIfMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5Key.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Key.setDescription('The MD5 message digest key.')
alaOspfIfMd5KeyStartAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartAccept.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartAccept.setDescription('The time that OSPF router will start accepting packets that have been created with this key.')
alaOspfIfMd5KeyStopAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopAccept.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopAccept.setDescription('The time that OSPF router will stop accepting packets that have been created with this key.')
alaOspfIfMd5KeyStartGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartGenerate.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartGenerate.setDescription('The time that OSPF router will start using this key for packet generation.')
alaOspfIfMd5KeyStopGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopGenerate.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopGenerate.setDescription('The time that OSPF router will stop using this key for packet generation.')
alaOspfIfMd5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 8), RowStatus().clone('notInService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5RowStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5RowStatus.setDescription('Row status of this entry.')
alaOspfIfMd5EncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 9), AlaAuthenticationEncryptKey().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfIfMd5EncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5EncryptKey.setDescription('The MD5 message digest Encrypted key.')
alaOspfIfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17), )
if mibBuilder.loadTexts: alaOspfIfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfAugTable.setDescription('Expansion for ospfIfTable')
alaOspfIfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1), )
ospfIfEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfIfAugEntry"))
alaOspfIfAugEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfIfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfAugEntry.setDescription('An entry of alaOspfIfAugTable')
alaOspfIfEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 1), AlaAuthenticationEncryptKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfEncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfEncryptKey.setDescription('The authentication encryption key that is used to decypher OSPF passwords.')
alaOspfIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfIpMask.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfIpMask.setDescription('The IP mask of this OSPF interface.')
alaOspfIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4097))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfVlanId.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfVlanId.setDescription('Vlan Identifier associated with this interface')
alaOspfIfDrRouterid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfDrRouterid.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfDrRouterid.setDescription('Router Id of Designated router for this interface')
alaOspfIfBdrRouterid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfBdrRouterid.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfBdrRouterid.setDescription('Router Id of Backup Designated router for this interface')
alaOspfIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfMTU.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMTU.setDescription('Max Transfer size of OSPF packets on this interface')
alaOspfIfInitNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfInitNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfInitNbrs.setDescription('Number of ospf INIT state neighbors on this interface')
alaOspfIfExchNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfExchNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfExchNbrs.setDescription('Number of ospf EXCHANGE state neighbors on this interface')
alaOspfIfFullNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfFullNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfFullNbrs.setDescription('Number of ospf FULL state neighbors on this interface')
alaOspfIfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("broadcast", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfLinkType.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfLinkType.setDescription('Type of physical medium used for transmission of OSPF packets')
alaOspfIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfOperStatus.setDescription('Operational status of this interface')
alaOspfIfIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfIntfName.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfIntfName.setDescription('The user defined name used to identify the IP interface')
alaOspfIf2WayNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIf2WayNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIf2WayNbrs.setDescription('Number of ospf 2-WAY state neighbors on this interface')
alaOspfIfBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfBfdStatus.setDescription('Enables/Disables OSPF for a BFD interface')
alaOspfIfBfdDrsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfBfdDrsOnly.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfBfdDrsOnly.setDescription('Enables/Disables Drs Only option for a BFD interface')
alaOspfVirtIfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18), )
if mibBuilder.loadTexts: alaOspfVirtIfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfAugTable.setDescription('Expansion for ospfVirtIfTable')
alaOspfVirtIfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18, 1), )
ospfVirtIfEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtIfAugEntry"))
alaOspfVirtIfAugEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfVirtIfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfAugEntry.setDescription('An entry of alaOspfVirtIfAugTable')
alaOspfVirtIfEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18, 1, 1), AlaAuthenticationEncryptKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfVirtIfEncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfEncryptKey.setDescription('The authentication encryption key that is used to decypher OSPF passwords.')
alaOspfVirtIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfOperStatus.setDescription('Operational status of the virtual link')
alaOspfRestartHelperSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartHelperSupport.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartHelperSupport.setDescription("The router's support for acting as an OSPF hitless restart helper.")
alaOspfRestartHelperStrictLSAChecking = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartHelperStrictLSAChecking.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartHelperStrictLSAChecking.setDescription('Indicates whether or not a changed LSA will result in termination of graceful restart by a helping router.')
alaOspfRestartHelperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("helping", 1), ("notHelping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartHelperStatus.setDescription('Indicates whether this OSPF router is operating as a Helper to a restarting router.')
alaOspfRFC1583Compatibility = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRFC1583Compatibility.setReference('OSPF Version 2, Section 16.4.1 External path preferences')
if mibBuilder.loadTexts: alaOspfRFC1583Compatibility.setStatus('current')
if mibBuilder.loadTexts: alaOspfRFC1583Compatibility.setDescription('Indicates metrics used to choose among multiple AS- external-LSAs. When RFC1583Compatibility is set to enabled, only cost will be used when choosing among multiple AS-external-LSAs advertising the same destination. When RFC1583Compatibility is set to disabled, preference will be driven first by type of path using cost only to break ties.')
alaOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: alaOspfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: alaOspfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types.")
alaOspfTrafficEngineeringSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTrafficEngineeringSupport.setStatus('current')
if mibBuilder.loadTexts: alaOspfTrafficEngineeringSupport.setDescription("The router's support for OSPF traffic engineering.")
alaOspfReferenceBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfReferenceBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaOspfReferenceBandwidth.setDescription('Reference bandwidth in kilobits/second for calculating default interface metrics. The default value is 100,000 KBPS (100 MBPS)')
alaOspfRestartSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plannedOnly", 2), ("plannedAndUnplanned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartSupport.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartSupport.setDescription("The router's support for OSPF hitless restart. Options include: no restart support, only planned restarts or both planned and unplanned restarts.")
alaOspfRestartInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartInterval.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartInterval.setDescription('Configured OSPF hitless restart timeout interval.')
alaOspfRestartStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2), ("unplannedRestart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartStatus.setDescription('Current status of OSPF hitless restart. The status of hitless restart is unplannedRestart after a CMM takeover. Before CMM takeover, the status is plannedRestart.')
alaOspfRestartAge = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 29), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartAge.setDescription('Remaining time in current OSPF hitless restart interval.')
alaOspfRestartExitReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartExitReason.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartExitReason.setDescription("Describes the outcome of the last attempt at a hitless restart. If the value is 'none', no restart has yet been attempted. If the value is 'inProgress', a restart attempt is currently underway.")
alaOspfNbrAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31), )
if mibBuilder.loadTexts: alaOspfNbrAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAugTable.setDescription('Extensions to the ospfNbrTable')
alaOspfNbrAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1), )
ospfNbrEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrAugEntry"))
alaOspfNbrAugEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfNbrAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAugEntry.setDescription('Additions to neighbor table')
alaOspfNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrRestartHelperStatus.setDescription('Indicates whether the router is acting as a hitless restart helper for the neighbor.')
alaOspfNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrRestartHelperAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrRestartHelperAge.setDescription('Remaining time in current OSPF hitless restart interval, if the router is acting as a restart helper for the neighbor.')
alaOspfNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrRestartHelperExitReason.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrRestartHelperExitReason.setDescription('Describes the outcome of the last attempt at acting as a hitless restart helper for the neighbor.')
alaOspfNbrAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrAreaId.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAreaId.setDescription('The area to which this neighbor belongs')
alaOspfNbrDrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrDrAddress.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrDrAddress.setDescription('Designated router of this neighbor')
alaOspfNbrBdrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrBdrAddress.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrBdrAddress.setDescription('Backup Designated router of this neighbor')
alaOspfNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrType.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrType.setDescription('Neighbors learned via the OSPF Hello protocol are dynamic. Configured neighbors are static')
alaOspfNbrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("slaveHold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrMode.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrMode.setDescription('Current neighbor mode. This is applicable only during adjacency formation')
alaOspfNbrMd5SeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrMd5SeqNo.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrMd5SeqNo.setDescription('Sequence number used in Md5 authentication')
alaOspfNbrLastHello = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrLastHello.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrLastHello.setDescription('No of seconds elapsed since the last hello was received from this neighbor')
alaOspfNbrPendingLSreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrPendingLSreq.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrPendingLSreq.setDescription('Number of outstanding link state requests to be sent to this neighbor')
alaOspfNbrPendingLSack = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrPendingLSack.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrPendingLSack.setDescription('Number of outstanding link state acknowledgements to be sent to this neighbor')
alaOspfNbrPendingLSupd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrPendingLSupd.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrPendingLSupd.setDescription('Number of outstanding link state update packets to be sent to this neighbor')
alaOspfVirtNbrAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32), )
if mibBuilder.loadTexts: alaOspfVirtNbrAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrAugTable.setDescription('Extensions to ospfVirtNbrTable')
alaOspfVirtNbrAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1), )
if mibBuilder.loadTexts: alaOspfVirtNbrAugEntry.setReference('OSPF Version 2 Management Information Base, Work In Progress draft-ietf-ospf-mib-update-07.txt Section B.4')
ospfVirtNbrEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrAugEntry"))
alaOspfVirtNbrAugEntry.setIndexNames(*ospfVirtNbrEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfVirtNbrAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrAugEntry.setDescription('Information regarding a single virtual neighbor.')
alaOspfVirtNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperStatus.setDescription('Indicates whether the router is acting as a hitless restart helper for the neighbor.')
alaOspfVirtNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperAge.setDescription('Remaining time in current OSPF hitless restart interval, if the router is acting as a restart helper for the neighbor.')
alaOspfVirtNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperExitReason.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperExitReason.setDescription('Describes the outcome of the last attempt at acting as a hitless restart helper for the neighbor.')
alaOspfVirtNbrDrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrDrAddr.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrDrAddr.setDescription('Designated router of this virtual neighbor')
alaOspfVirtNbrBdrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrBdrAddr.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrBdrAddr.setDescription('Backup Designated router of this virtual neighbor')
alaOspfVirtNbrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("slaveHold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrMode.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrMode.setDescription('Current neighbor mode. This is applicable only during adjacency formation')
alaOspfVirtNbrMd5SeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrMd5SeqNo.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrMd5SeqNo.setDescription('Sequence number used in Md5 authentication')
alaOspfVirtNbrLastHello = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrLastHello.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrLastHello.setDescription('No of seconds elapsed since the last hello was received from this neighbor')
alaOspfVirtNbrPendingLSreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSreq.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSreq.setDescription('Number of outstanding link state requests to be sent to this neighbor')
alaOspfVirtNbrPendingLSack = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSack.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSack.setDescription('Number of outstanding link state acknowledgements to be sent to this neighbor')
alaOspfVirtNbrPendingLSupd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSupd.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSupd.setDescription('Number of outstanding link state update packets to be sent to this neighbor')
alaOspfRestartInitiate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartInitiate.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartInitiate.setDescription('Initiates a planned graceful restart, if set to plannedRestart.')
alaOspfGeneralTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3))
alaOspfTotalSpfRuns = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalSpfRuns.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalSpfRuns.setDescription('Total number of SPF runs performed on this router')
alaOspfTotalIncrSpfRuns = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalIncrSpfRuns.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalIncrSpfRuns.setDescription('Total number of Incremental SPF runs performed on this router')
alaOspfTotalInitNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalInitNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalInitNbrs.setDescription('Number of INIT state neighbors on this router')
alaOspfTotalExchNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalExchNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalExchNbrs.setDescription('Number of EXCHANGE state neighbors on this router')
alaOspfTotalFullNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalFullNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalFullNbrs.setDescription('Number of FULL state neighbors on this router')
alaOspfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalAreas.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalAreas.setDescription('Total Number of areas configured on this router')
alaOspfTotalActiveAreas = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalActiveAreas.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalActiveAreas.setDescription('Total Number of active areas configured on this router')
alaOspfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalTransitAreas.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalTransitAreas.setDescription('Number of transit areas on this router')
alaOspfTotalNSSA = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalNSSA.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalNSSA.setDescription('Total Number of NSSA areas on this router')
alaOspfTotal2wayNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotal2wayNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotal2wayNbrs.setDescription('Number of 2-way state neighbors on this router')
alaOspfAreaAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35), )
if mibBuilder.loadTexts: alaOspfAreaAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAugTable.setDescription('Extensions to ospfAreaTable')
alaOspfAreaAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1), )
ospfAreaEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAugEntry"))
alaOspfAreaAugEntry.setIndexNames(*ospfAreaEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfAreaAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAugEntry.setDescription('Area table additions')
alaOspfAreaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaOperStatus.setDescription('Operational status of the area')
alaOspfAreaLastSpfRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaLastSpfRun.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaLastSpfRun.setDescription('Time in secs since last SPF ran for this area')
alaOspfAreaActiveVlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaActiveVlinks.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaActiveVlinks.setDescription('Number of active virtual links in this area')
alaOspfAreaIncrSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaIncrSpfRuns.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaIncrSpfRuns.setDescription('The number of times that incremental SPF has been run for this area to calculate inter-area routes')
alaOspfAreaInitNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaInitNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaInitNbrs.setDescription('Number of ospf INIT state neighbors in this area')
alaOspfAreaExchNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaExchNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaExchNbrs.setDescription('Number of ospf EXCHANGE state neighbors in this area')
alaOspfAreaFullNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaFullNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaFullNbrs.setDescription('Number of ospf FULL state neighbors in this area')
alaOspfAreaNumIntfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNumIntfs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNumIntfs.setDescription('Number of interfaces in this area')
alaOspfAreaAttachedIntfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaAttachedIntfs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAttachedIntfs.setDescription('List of interfaces attached to this area')
alaOspfArea2WayNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfArea2WayNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfArea2WayNbrs.setDescription('Number of ospf 2-WAY state neighbors in this area')
alaOspfAreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("candidate", 1), ("always", 2), ("none", 3))).clone('candidate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorRole.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorRole.setDescription('Specifies whether or not an NSSA border router will unconditionally translate Type-7 LSAs into Type-5 LSAs. When set to always, an NSSA border router always translates Type-7 LSAs into Type-5 LSAs regardless of the translator state of other NSSA border routers. When set to candidate, an NSSA border router participates in the translator election process. For non-NSSA border routers, this value is none.')
alaOspfAreaNssaTranslatorStabilityInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorStabilityInterval.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorStabilityInterval.setDescription('Defines the length of time (in seconds) an elected Type-7 translator will continue to perform its translator duties once it has determined that its translator status has been deposed by another NSSA border router translator. For non-NSSA border routers, this value is not defined and will be 0.')
alaOspfAreaNssaImportSetPbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("propagate", 1), ("doNotPropagate", 2), ("none", 3))).clone('propagate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaImportSetPbit.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaImportSetPbit.setDescription('Specifies whether or not an NSSA AS boundary router sets the P-bit when external routes are imported into the NSSA as Type-7 LSAs. For non-NSSA boundary routers, this value is not defined and will be none.')
alaOspfAreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("elected", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorState.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorState.setDescription('The state of the NSSA Translator, for NSSA border routers. For non-NSSA border routers, the state is none.')
alaOspfAreaNssaElectedTranslatorRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaElectedTranslatorRouterId.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaElectedTranslatorRouterId.setDescription('The elected/current NSSA translator router id elected by this NSSA border router. For non-NSSA border router, this object is not defined.')
alaOspfExtLsdbAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36), )
if mibBuilder.loadTexts: alaOspfExtLsdbAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbAugTable.setDescription('Extensions to ospfExtLsdbTable')
alaOspfExtLsdbAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1), )
ospfExtLsdbEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbAugEntry"))
alaOspfExtLsdbAugEntry.setIndexNames(*ospfExtLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfExtLsdbAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbAugEntry.setDescription('External Link state database additions')
alaOspfExtLsdbProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("static", 2), ("direct", 3), ("rip", 4), ("ospf", 5), ("isis", 6), ("bgp", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbProto.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbProto.setDescription('Protocol through which this external LSA was learnt')
alaOspfExtLsdbRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbRouteTag.setDescription('A 32-bit value attached to each external route.')
alaOspfExtLsdbFwdAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbFwdAddr.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbFwdAddr.setDescription("The address to which data traffic for the advertised destination is to be forwarded. If the Forwarding address is set to 0.0.0.0, data traffic is to be forwarded to the LSA's originator.")
alaOspfExtLsdbMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbMetricType.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbMetricType.setDescription('The type of external metric.')
alaOspfExtLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbMetric.setDescription('The OSPF External TOS 0 Metric.')
alaOspfExtLsdbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbLength.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbLength.setDescription('The length of the AS External Link-State Advertisement.')
alaOspfExtLsdbMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbMask.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbMask.setDescription('The IP address mask for the advertised destination.')
alaOspfAreaInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 37), )
if mibBuilder.loadTexts: alaOspfAreaInterfaceTable.setStatus('obsolete')
if mibBuilder.loadTexts: alaOspfAreaInterfaceTable.setDescription('This table holds the mapping between area ID and the interfaces attached to it')
alaOspfAreaInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 37, 1), ).setIndexNames((0, "OSPF-MIB", "ospfAreaId"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfIfIpAddress"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfAddressLessIf"))
if mibBuilder.loadTexts: alaOspfAreaInterfaceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: alaOspfAreaInterfaceEntry.setDescription('Lests all interfaces attached to a specific area')
alaOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 37, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: alaOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
alaOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAddressLessIf.setStatus('obsolete')
if mibBuilder.loadTexts: alaOspfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
alaOspfAreaAggregateAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 38), )
if mibBuilder.loadTexts: alaOspfAreaAggregateAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateAugTable.setDescription('Extensions to ospfAreaAggregateTable')
alaOspfAreaAggregateAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 38, 1), )
ospfAreaAggregateEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAggregateAugEntry"))
alaOspfAreaAggregateAugEntry.setIndexNames(*ospfAreaAggregateEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfAreaAggregateAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateAugEntry.setDescription('Additions to the area aggregate table')
alaOspfAreaAggregateMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfAreaAggregateMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateMetric.setDescription('If set, this value is used as the metric for the area aggregate route, overriding the calculated metric')
alaOspfDefaultOriginate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("only", 2), ("always", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: alaOspfDefaultOriginate.setDescription("Indicates whether this ASBR router originates the default route into the OSPF normal area(s). If set to 'only', the default route is advertised into the OSPF normal area, provided the ASBR has a route to 0.0.0.0/0 in its routing table. Alternatively, if set to 'always', a default route is advertised into the OSPF domain regardless of whether the ASBR has a route to 0.0.0.0/0. A value of 'none' has the effect of not originating the default route.")
alaOspfDefaultOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetricType.setStatus('current')
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetricType.setDescription('Type of metric to be used with the default route.')
alaOspfDefaultOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetric.setDescription('Default metric to be used for the default route.')
alaOspfBfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfBfdStatus.setDescription('Enables or disables bfd for OSPF protocol')
alaOspfBfdAllInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfBfdAllInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfBfdAllInterfaceStatus.setDescription('Enables or disables bfd for all OSPF interfaces')
alcatelIND1OSPFMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfMiscellaneousGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5Group"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfGeneralGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaInterfaceGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAggregateAugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbAugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfAugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrAugEntryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1OSPFMIBCompliance = alcatelIND1OSPFMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBCompliance.setDescription('Compliance statement for Open Shortest Path First (OSPF) Subsystem.')
alaOspfMiscellaneousGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistAdminStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteTag"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTimerSpfDelay"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTimerSpfHold"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteNumber"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfMTUCheck"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBfdStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBfdAllInterfaceStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAsBdrRtr"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDefaultOriginate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDefaultOriginateMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDefaultOriginateMetricType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfMiscellaneousGroup = alaOspfMiscellaneousGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfMiscellaneousGroup.setDescription('Collection of Miscellaneous objects for management of OSPF.')
alaOspfRedistProtoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoSubnets"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoMetricType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfRedistProtoGroup = alaOspfRedistProtoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistProtoGroup.setDescription('Collection of objects for management of Route Redistribution Protocol. These objects have been deprecated, and the group is no longer mandatory.')
alaOspfDebugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugLevel"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugError"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugWarning"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugState"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugRecv"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugSend"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugFlood"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugSPF"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugLsdb"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugRdb"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugVlink"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugRedist"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugSummary"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugDbexch"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugHello"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugAuth"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugArea"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugIntf"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugMip"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugInfo"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugSetup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugTime"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugTm"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugAll"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugHelper"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDebugRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfDebugGroup = alaOspfDebugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfDebugGroup.setDescription('Collection of objects for management of Debugging configuration.')
alaOspfRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteDest"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMask"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteTos"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteNextHop"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteIfIndex"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteTag"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMetric1"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMetric2"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfRouteGroup = alaOspfRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteGroup.setDescription('Collection of objects for management of Network Route configuration.')
alaOspfBdrRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterAreaId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterTos"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterNextHop"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterIfIndex"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfBdrRouterGroup = alaOspfBdrRouterGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterGroup.setDescription('Collection of objects for management of routes to Border Routers.')
alaOspfRedistRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteProto"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteDest"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteMask"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteControl"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteTagMatch"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteEffect"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfRedistRouteGroup = alaOspfRedistRouteGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRedistRouteGroup.setDescription('Collection of objects for management of Route Redistribution configuration. These objects have been deprecated, and the group is no longer mandatory.')
alaOspfIfMd5Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5IpAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5Key"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStartAccept"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStopAccept"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStartGenerate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStopGenerate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5RowStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5EncryptKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfIfMd5Group = alaOspfIfMd5Group.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Group.setDescription('Collection of objects for management of Interface MD5 configuration.')
alaOspfGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalSpfRuns"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalIncrSpfRuns"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalInitNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalExchNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalFullNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalAreas"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalActiveAreas"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalTransitAreas"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalNSSA"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotal2wayNbrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfGeneralGroup = alaOspfGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfGeneralGroup.setDescription('Collection of objects for management of Interface MD5 configuration.')
alaOspfAreaInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfAddressLessIf"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfIpAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfArea2WayNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaActiveVlinks"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAttachedIntfs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfAreaInterfaceGroup = alaOspfAreaInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaInterfaceGroup.setDescription('all interfaces attached to a specific area.')
alaOspfAreaAggregateAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAggregateMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfAreaAggregateAugGroup = alaOspfAreaAggregateAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateAugGroup.setDescription('Additions to the area aggregate table.')
alaOspfAreaAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaExchNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaFullNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaIncrSpfRuns"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaInitNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaLastSpfRun"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaElectedTranslatorRouterId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaImportSetPbit"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaTranslatorRole"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaTranslatorStabilityInterval"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaTranslatorState"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNumIntfs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfAreaAugGroup = alaOspfAreaAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAugGroup.setDescription('Area table additions.')
alaOspfExtLsdbAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbFwdAddr"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbLength"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbMask"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbMetricType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbProto"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbRouteTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfExtLsdbAugGroup = alaOspfExtLsdbAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbAugGroup.setDescription('External Link state database additions.')
alaOspfIfAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfIf2WayNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfBdrRouterid"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfFullNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfBfdDrsOnly"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfBfdStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfDrRouterid"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfEncryptKey"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfExchNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfInitNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfIntfName"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfIpMask"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfLinkType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMTU"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfOperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfIfAugGroup = alaOspfIfAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfAugGroup.setDescription('')
alaOspfNbrAugEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrAreaId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrBdrAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrDrAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrLastHello"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrMd5SeqNo"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrMode"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrPendingLSack"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrPendingLSreq"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrPendingLSupd"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrRestartHelperAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrRestartHelperExitReason"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrRestartHelperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfNbrAugEntryGroup = alaOspfNbrAugEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAugEntryGroup.setDescription('')
alaProtocolOspfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfOpaqueLsaSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRFC1583Compatibility"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistProtoRouteTag"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfReferenceBandwidth"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartExitReason"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartHelperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartHelperStrictLSAChecking"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartHelperSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartInitiate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartInterval"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTrafficEngineeringSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtIfEncryptKey"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtIfOperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrBdrAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaProtocolOspfGroup = alaProtocolOspfGroup.setStatus('current')
if mibBuilder.loadTexts: alaProtocolOspfGroup.setDescription('')
alaOspfVirtNbrAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrDrAddr"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrLastHello"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrMd5SeqNo"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrMode"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrPendingLSack"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrPendingLSreq"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrPendingLSupd"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrRestartHelperAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrRestartHelperExitReason"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrRestartHelperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfVirtNbrAugGroup = alaOspfVirtNbrAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrAugGroup.setDescription('')
mibBuilder.exportSymbols("ALCATEL-IND1-OSPF-MIB", alaOspfVirtNbrMode=alaOspfVirtNbrMode, alaOspfBdrRouterType=alaOspfBdrRouterType, alaOspfTotalSpfRuns=alaOspfTotalSpfRuns, alaOspfDebugError=alaOspfDebugError, alaOspfRedistRouteEffect=alaOspfRedistRouteEffect, alaOspfRouteGroup=alaOspfRouteGroup, alcatelIND1OSPFMIB=alcatelIND1OSPFMIB, alaOspfIfIpMask=alaOspfIfIpMask, alaOspfIfOperStatus=alaOspfIfOperStatus, alaOspfNbrMd5SeqNo=alaOspfNbrMd5SeqNo, alaOspfTotal2wayNbrs=alaOspfTotal2wayNbrs, alaOspfVirtNbrRestartHelperExitReason=alaOspfVirtNbrRestartHelperExitReason, alaOspfIfMd5EncryptKey=alaOspfIfMd5EncryptKey, alcatelIND1OSPFMIBGroups=alcatelIND1OSPFMIBGroups, alaOspfIfIntfName=alaOspfIfIntfName, alaOspfNbrPendingLSupd=alaOspfNbrPendingLSupd, alaOspfIfBfdStatus=alaOspfIfBfdStatus, alaOspfRestartInterval=alaOspfRestartInterval, alaOspfIfMd5KeyStartAccept=alaOspfIfMd5KeyStartAccept, alaOspfDebugInfo=alaOspfDebugInfo, alaOspfNbrMode=alaOspfNbrMode, alaOspfAreaIncrSpfRuns=alaOspfAreaIncrSpfRuns, alaOspfAreaExchNbrs=alaOspfAreaExchNbrs, alaOspfDebugMip=alaOspfDebugMip, alaOspfDebugVlink=alaOspfDebugVlink, alaOspfRestartHelperStatus=alaOspfRestartHelperStatus, alaOspfExtLsdbLength=alaOspfExtLsdbLength, alaOspfDebugLsdb=alaOspfDebugLsdb, alaOspfNbrAugEntryGroup=alaOspfNbrAugEntryGroup, alaOspfIfMd5KeyStopAccept=alaOspfIfMd5KeyStopAccept, alaOspfTotalExchNbrs=alaOspfTotalExchNbrs, alaOspfTotalFullNbrs=alaOspfTotalFullNbrs, alaOspfBdrRouterTable=alaOspfBdrRouterTable, alaOspfRedistProtoId=alaOspfRedistProtoId, alaOspfDebugAll=alaOspfDebugAll, alaOspfRouteTable=alaOspfRouteTable, alaOspfAsBdrRtr=alaOspfAsBdrRtr, alaOspfRedistRouteControl=alaOspfRedistRouteControl, alaOspfTotalIncrSpfRuns=alaOspfTotalIncrSpfRuns, alaOspfDebugTm=alaOspfDebugTm, alaOspfAreaInterfaceGroup=alaOspfAreaInterfaceGroup, alaOspfAreaFullNbrs=alaOspfAreaFullNbrs, alaOspfVirtNbrPendingLSupd=alaOspfVirtNbrPendingLSupd, alaOspfIfAugGroup=alaOspfIfAugGroup, PYSNMP_MODULE_ID=alcatelIND1OSPFMIB, alaOspfRedistAdminStatus=alaOspfRedistAdminStatus, alaOspfAreaAugEntry=alaOspfAreaAugEntry, alaOspfAreaActiveVlinks=alaOspfAreaActiveVlinks, alaOspfRedistRouteTag=alaOspfRedistRouteTag, alaOspfDebugLevel=alaOspfDebugLevel, alaOspfVirtNbrAugGroup=alaOspfVirtNbrAugGroup, alaOspfExtLsdbAugTable=alaOspfExtLsdbAugTable, alaOspfVirtNbrPendingLSreq=alaOspfVirtNbrPendingLSreq, alaOspfRestartAge=alaOspfRestartAge, alaOspfRestartHelperSupport=alaOspfRestartHelperSupport, alaOspfNbrAugEntry=alaOspfNbrAugEntry, alaOspfRedistRouteStatus=alaOspfRedistRouteStatus, alaOspfOpaqueLsaSupport=alaOspfOpaqueLsaSupport, alaOspfTotalAreas=alaOspfTotalAreas, alaOspfRouteMask=alaOspfRouteMask, alaOspfNbrPendingLSreq=alaOspfNbrPendingLSreq, alaProtocolOspf=alaProtocolOspf, alaOspfNbrRestartHelperStatus=alaOspfNbrRestartHelperStatus, alaOspfAreaNssaTranslatorRole=alaOspfAreaNssaTranslatorRole, alaOspfRedistProtoGroup=alaOspfRedistProtoGroup, alaOspfIfMd5Group=alaOspfIfMd5Group, alaOspfRedistProtoTable=alaOspfRedistProtoTable, alaOspfBdrRouterStatus=alaOspfBdrRouterStatus, alaOspfDebugAge=alaOspfDebugAge, alaOspfIfAugTable=alaOspfIfAugTable, alaOspfIfFullNbrs=alaOspfIfFullNbrs, alaOspfTotalNSSA=alaOspfTotalNSSA, alaOspfIf2WayNbrs=alaOspfIf2WayNbrs, alaOspfAreaInitNbrs=alaOspfAreaInitNbrs, alaOspfAreaInterfaceEntry=alaOspfAreaInterfaceEntry, alaOspfRestartInitiate=alaOspfRestartInitiate, alaOspfIfLinkType=alaOspfIfLinkType, alaOspfBdrRouterMetric=alaOspfBdrRouterMetric, alaOspfAreaAugTable=alaOspfAreaAugTable, alaOspfIfAugEntry=alaOspfIfAugEntry, alcatelIND1OSPFMIBObjects=alcatelIND1OSPFMIBObjects, alaOspfRFC1583Compatibility=alaOspfRFC1583Compatibility, alaOspfExtLsdbAugGroup=alaOspfExtLsdbAugGroup, alaOspfAreaAugGroup=alaOspfAreaAugGroup, alaOspfRedistProtoSubnets=alaOspfRedistProtoSubnets, alaOspfTotalTransitAreas=alaOspfTotalTransitAreas, alaOspfVirtNbrRestartHelperStatus=alaOspfVirtNbrRestartHelperStatus, alaOspfVirtNbrAugEntry=alaOspfVirtNbrAugEntry, alaOspfIfMd5RowStatus=alaOspfIfMd5RowStatus, alaOspfNbrPendingLSack=alaOspfNbrPendingLSack, alaOspfAreaNssaTranslatorState=alaOspfAreaNssaTranslatorState, alaOspfRouteMetric1=alaOspfRouteMetric1, alaOspfVirtIfAugTable=alaOspfVirtIfAugTable, alaOspfIfMd5Table=alaOspfIfMd5Table, alaOspfAddressLessIf=alaOspfAddressLessIf, alaOspfNbrRestartHelperAge=alaOspfNbrRestartHelperAge, alaOspfIfMd5KeyId=alaOspfIfMd5KeyId, alaOspfAreaAggregateMetric=alaOspfAreaAggregateMetric, alaOspfDebugArea=alaOspfDebugArea, alaOspfIfMd5Key=alaOspfIfMd5Key, alaOspfIfMd5Entry=alaOspfIfMd5Entry, alaOspfIfMd5KeyStopGenerate=alaOspfIfMd5KeyStopGenerate, alaOspfDebugRdb=alaOspfDebugRdb, alaOspfRedistRouteTagMatch=alaOspfRedistRouteTagMatch, alaOspfVirtNbrLastHello=alaOspfVirtNbrLastHello, alaOspfExtLsdbAugEntry=alaOspfExtLsdbAugEntry, alaOspfRedistProtoEntry=alaOspfRedistProtoEntry, alaOspfMTUCheck=alaOspfMTUCheck, alaOspfRouteTos=alaOspfRouteTos, alaOspfNbrBdrAddress=alaOspfNbrBdrAddress, alaOspfAreaAggregateAugTable=alaOspfAreaAggregateAugTable, alaOspfBdrRouterGroup=alaOspfBdrRouterGroup, alaOspfDebugRedist=alaOspfDebugRedist, alaOspfIfMd5IpAddress=alaOspfIfMd5IpAddress, alaOspfIfBfdDrsOnly=alaOspfIfBfdDrsOnly, alaOspfRouteAge=alaOspfRouteAge, alaOspfDebugHello=alaOspfDebugHello, alaOspfRouteNextHop=alaOspfRouteNextHop, alaOspfIfMTU=alaOspfIfMTU, alaOspfVirtIfOperStatus=alaOspfVirtIfOperStatus, alaOspfRedistRouteMetric=alaOspfRedistRouteMetric, alaOspfRestartHelperStrictLSAChecking=alaOspfRestartHelperStrictLSAChecking, alaOspfAreaNumIntfs=alaOspfAreaNumIntfs, alaOspfAreaNssaImportSetPbit=alaOspfAreaNssaImportSetPbit, alaOspfBdrRouterTos=alaOspfBdrRouterTos, alaOspfDefaultOriginateMetric=alaOspfDefaultOriginateMetric, alaOspfAreaAggregateAugGroup=alaOspfAreaAggregateAugGroup, alaOspfExtLsdbMetric=alaOspfExtLsdbMetric, alaOspfDebugDbexch=alaOspfDebugDbexch, alaOspfRedistProtoMetricType=alaOspfRedistProtoMetricType, alaOspfVirtIfEncryptKey=alaOspfVirtIfEncryptKey, alaOspfExtLsdbRouteTag=alaOspfExtLsdbRouteTag, alaOspfRouteEntry=alaOspfRouteEntry, alaOspfNbrLastHello=alaOspfNbrLastHello, alaOspfTimerSpfHold=alaOspfTimerSpfHold, alaOspfRouteIfIndex=alaOspfRouteIfIndex, alaOspfRedistRouteMask=alaOspfRedistRouteMask, alaOspfIfExchNbrs=alaOspfIfExchNbrs, alaOspfVirtNbrDrAddr=alaOspfVirtNbrDrAddr, alaOspfRestartStatus=alaOspfRestartStatus, alaOspfAreaAggregateAugEntry=alaOspfAreaAggregateAugEntry, alaOspfIfDrRouterid=alaOspfIfDrRouterid, alaOspfDebugSetup=alaOspfDebugSetup, alaOspfAreaInterfaceTable=alaOspfAreaInterfaceTable, alaOspfRedistProtoRouteTag=alaOspfRedistProtoRouteTag, alaOspfAreaNssaElectedTranslatorRouterId=alaOspfAreaNssaElectedTranslatorRouterId, alaOspfDefaultOriginateMetricType=alaOspfDefaultOriginateMetricType, alaOspfBdrRouterAreaId=alaOspfBdrRouterAreaId, alaOspfRestartSupport=alaOspfRestartSupport, AlaAuthenticationEncryptKey=AlaAuthenticationEncryptKey, alaOspfVirtNbrRestartHelperAge=alaOspfVirtNbrRestartHelperAge, alaOspfGeneralTable=alaOspfGeneralTable, alaOspfIfInitNbrs=alaOspfIfInitNbrs, alaOspfRouteTag=alaOspfRouteTag, alaOspfRedistProtoStatus=alaOspfRedistProtoStatus, alaOspfRedistRouteProto=alaOspfRedistRouteProto, alaOspfAreaNssaTranslatorStabilityInterval=alaOspfAreaNssaTranslatorStabilityInterval, alaOspfRedistProtoMetric=alaOspfRedistProtoMetric, alaOspfDebugState=alaOspfDebugState, alaOspfVirtNbrAugTable=alaOspfVirtNbrAugTable, alaOspfVirtIfAugEntry=alaOspfVirtIfAugEntry, alaOspfAreaLastSpfRun=alaOspfAreaLastSpfRun, alaOspfVirtNbrMd5SeqNo=alaOspfVirtNbrMd5SeqNo, alaOspfExtLsdbMask=alaOspfExtLsdbMask, alcatelIND1OSPFMIBCompliance=alcatelIND1OSPFMIBCompliance, alaOspfRedistRouteGroup=alaOspfRedistRouteGroup, alaOspfBfdStatus=alaOspfBfdStatus, alaOspfRouteDest=alaOspfRouteDest, alcatelIND1OSPFMIBCompliances=alcatelIND1OSPFMIBCompliances, alaOspfDebugGroup=alaOspfDebugGroup, alaOspfBfdAllInterfaceStatus=alaOspfBfdAllInterfaceStatus, alaOspfDebugAuth=alaOspfDebugAuth, alaOspfNbrType=alaOspfNbrType, alaOspfDebugFlood=alaOspfDebugFlood, alaOspfRedistRouteEntry=alaOspfRedistRouteEntry, alaOspfExtLsdbMetricType=alaOspfExtLsdbMetricType, alaOspfAreaOperStatus=alaOspfAreaOperStatus, alaOspfNbrAugTable=alaOspfNbrAugTable, alaOspfTotalActiveAreas=alaOspfTotalActiveAreas, alaOspfGeneralGroup=alaOspfGeneralGroup, alaProtocolOspfGroup=alaProtocolOspfGroup, alaOspfReferenceBandwidth=alaOspfReferenceBandwidth, alaOspfIfMd5KeyStartGenerate=alaOspfIfMd5KeyStartGenerate, alaOspfRouteStatus=alaOspfRouteStatus, alaOspfDebugWarning=alaOspfDebugWarning, alaOspfExtLsdbProto=alaOspfExtLsdbProto, alaOspfNbrRestartHelperExitReason=alaOspfNbrRestartHelperExitReason, alaOspfBdrRouterEntry=alaOspfBdrRouterEntry, alaOspfBdrRouterAge=alaOspfBdrRouterAge, alaOspfVirtNbrPendingLSack=alaOspfVirtNbrPendingLSack, alaOspfTotalInitNbrs=alaOspfTotalInitNbrs, alaOspfIfIpAddress=alaOspfIfIpAddress, alaOspfRedistRouteTable=alaOspfRedistRouteTable, alaOspfMiscellaneousGroup=alaOspfMiscellaneousGroup, alaOspfRedistRouteDest=alaOspfRedistRouteDest, alaOspfDebugSPF=alaOspfDebugSPF, alaOspfArea2WayNbrs=alaOspfArea2WayNbrs, alaOspfTrafficEngineeringSupport=alaOspfTrafficEngineeringSupport, alaOspfDebugConfig=alaOspfDebugConfig, alaOspfNbrDrAddress=alaOspfNbrDrAddress, alcatelIND1OSPFMIBConformance=alcatelIND1OSPFMIBConformance, alaOspfDefaultOriginate=alaOspfDefaultOriginate, alaOspfBdrRouterId=alaOspfBdrRouterId, alaOspfDebugHelper=alaOspfDebugHelper, alaOspfNbrAreaId=alaOspfNbrAreaId, alaOspfAreaAttachedIntfs=alaOspfAreaAttachedIntfs, alaOspfDebugIntf=alaOspfDebugIntf, alaOspfDebugRecv=alaOspfDebugRecv, alaOspfTimerSpfDelay=alaOspfTimerSpfDelay, alaOspfBdrRouterIfIndex=alaOspfBdrRouterIfIndex, alaOspfDebugSend=alaOspfDebugSend, alaOspfDebugRestart=alaOspfDebugRestart, alaOspfIfEncryptKey=alaOspfIfEncryptKey, alaOspfBdrRouterNextHop=alaOspfBdrRouterNextHop, alaOspfRestartExitReason=alaOspfRestartExitReason, alaOspfIfBdrRouterid=alaOspfIfBdrRouterid, alaOspfVirtNbrBdrAddr=alaOspfVirtNbrBdrAddr, alaOspfRouteType=alaOspfRouteType, alaOspfDebugTime=alaOspfDebugTime, alaOspfIfVlanId=alaOspfIfVlanId, alaOspfRouteMetric2=alaOspfRouteMetric2, alaOspfRouteNumber=alaOspfRouteNumber, alaOspfDebugSummary=alaOspfDebugSummary, alaOspfExtLsdbFwdAddr=alaOspfExtLsdbFwdAddr)
