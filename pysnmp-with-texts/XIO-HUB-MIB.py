#
# PySNMP MIB module XIO-HUB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XIO-HUB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, Integer32, ModuleIdentity, Counter64, ObjectIdentity, MibIdentifier, IpAddress, Gauge32, Counter32, iso, NotificationType, NotificationType, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises", "Integer32", "ModuleIdentity", "Counter64", "ObjectIdentity", "MibIdentifier", "IpAddress", "Gauge32", "Counter32", "iso", "NotificationType", "NotificationType", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xiotech = MibIdentifier((1, 3, 6, 1, 4, 1, 2366))
xioHub = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1))
xioHubIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 1))
xioHubEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 2))
xioHubStatusData = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 3))
xioHubPhysicalDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 4))
xioHubRaidDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 5))
xioHubVirtualDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 6))
xioHubCacheInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 7))
xioHubHabInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 8))
xioHubBusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 9))
xioHubTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 10))
xioHubTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 20))
xioHubLoadInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 30))
xioHubStorageDevList = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 40))
xioHubVpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 50))
xioHubPpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 60))
xioHubSvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2366, 1, 70))
xioHubHuName = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xioHubHuName.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHuName.setDescription('Storage Hub Name.')
xioHubHuSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHuSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHuSerialNum.setDescription('Storage Hub Serial Number.')
xioHubHuCompat = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHuCompat.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHuCompat.setDescription('Compatibility level of Storage Hub.')
xioHubHuTCPIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xioHubHuTCPIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHuTCPIPAddr.setDescription('Storage Hub TCPIP address.')
xioHubHuHeartbeat = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHuHeartbeat.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHuHeartbeat.setDescription('Storage Hub Heartbeat.')
xioHubEvUpsAc = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvUpsAc.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvUpsAc.setDescription('Indicates that the UPS AC input is good.')
xioHubEvUpsBattLow = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvUpsBattLow.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvUpsBattLow.setDescription('UPS Battery is good.')
xioHubEvMainPower = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvMainPower.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvMainPower.setDescription('Main DC Power supply is good.')
xioHubEvNumSupplies = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvNumSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvNumSupplies.setDescription('Number of DC Power Supplies.')
xioHubEvNumFrontFans = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvNumFrontFans.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvNumFrontFans.setDescription('Number of Front Fans.')
xioHubEvNumRearFans = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvNumRearFans.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvNumRearFans.setDescription('Number of Rear Fans.')
xioHubEvMainDcPowerTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 2, 7), )
if mibBuilder.loadTexts: xioHubEvMainDcPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvMainDcPowerTable.setDescription('The status of Main DC Power Supplies.')
xioHubEvMainDcPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 2, 7, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubEvDcId"))
if mibBuilder.loadTexts: xioHubEvMainDcPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvMainDcPowerEntry.setDescription('Main DC Power Supply status.')
xioHubEvDcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvDcId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvDcId.setDescription('Value indicating a specific DC Power Supply.')
xioHubEvDcExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvDcExists.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvDcExists.setDescription('Flag indicating that DC Power Supply exists.')
xioHubEvDcGood = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvDcGood.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvDcGood.setDescription('Flag indicating status of DC Power Supply')
xioHubEvFrontFansTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 2, 8), )
if mibBuilder.loadTexts: xioHubEvFrontFansTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvFrontFansTable.setDescription('The status of Front fans.')
xioHubEvFrontFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 2, 8, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubEvFrontFansId"))
if mibBuilder.loadTexts: xioHubEvFrontFansEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvFrontFansEntry.setDescription('Front Fans status.')
xioHubEvFrontFansId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvFrontFansId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvFrontFansId.setDescription('Value indicating specfic Front Fans.')
xioHubEvFrontFansGood = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvFrontFansGood.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvFrontFansGood.setDescription('Flag indicating that Front Fans are good.')
xioHubEvRearFansTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 2, 9), )
if mibBuilder.loadTexts: xioHubEvRearFansTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvRearFansTable.setDescription('The status of Rear fans.')
xioHubEvRearFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 2, 9, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubEvRearFansId"))
if mibBuilder.loadTexts: xioHubEvRearFansEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvRearFansEntry.setDescription('Rear Fans status.')
xioHubEvRearFansId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvRearFansId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvRearFansId.setDescription('Value indicating specific Rear Fans.')
xioHubEvRearFansGood = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvRearFansGood.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvRearFansGood.setDescription('Flag indicating that Rear Fans are good.')
xioHubEvExtUpsAc = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtUpsAc.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtUpsAc.setDescription('Indicates status of external cabinet UPS AC input.')
xioHubEvExtUpsBatt = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtUpsBatt.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtUpsBatt.setDescription('Indicates status of external cabinet UPS battery.')
xioHubEvExtDcMain = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtDcMain.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtDcMain.setDescription('Indicates status of external cabinet Main DC Power Supply.')
xioHubEvExtNumSupplies = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtNumSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtNumSupplies.setDescription('Number of Power Supplies in external cabinet.')
xioHubEvExtNumRearFans = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtNumRearFans.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtNumRearFans.setDescription('Number of rear fans in external cabinet.')
xioHubEvExtMainDcPowerTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 2, 15), )
if mibBuilder.loadTexts: xioHubEvExtMainDcPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtMainDcPowerTable.setDescription('The status of Main DC Power Supplies.')
xioHubEvExtMainDcPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 2, 15, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubEvExtDcId"))
if mibBuilder.loadTexts: xioHubEvExtMainDcPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtMainDcPowerEntry.setDescription('Main DC Power Supply status.')
xioHubEvExtDcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtDcId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtDcId.setDescription('Value indicating specific external cabinet DC Power Supply.')
xioHubEvExtDcExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtDcExists.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtDcExists.setDescription('Flag indicating that external cabinet DC Power Supply exists.')
xioHubEvExtDcGood = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtDcGood.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtDcGood.setDescription('Flag indicating status of external cabinet DC Power Supply')
xioHubEvExtRearFansTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 2, 16), )
if mibBuilder.loadTexts: xioHubEvExtRearFansTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtRearFansTable.setDescription('The status of External Cabinet Rear fans.')
xioHubEvExtRearFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 2, 16, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubEvExtRearFansId"))
if mibBuilder.loadTexts: xioHubEvExtRearFansEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtRearFansEntry.setDescription('External cabinet Rear Fans status.')
xioHubEvExtRearFansId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtRearFansId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtRearFansId.setDescription('Value indicating spcecific external cabinet Rear Fan.')
xioHubEvExtRearFansGood = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtRearFansGood.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtRearFansGood.setDescription('Flag indicating that external cabinet Rear Fans are good.')
xioHubEvHabTempsTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 2, 17), )
if mibBuilder.loadTexts: xioHubEvHabTempsTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvHabTempsTable.setDescription('The Hab temperatures.')
xioHubEvHabTempsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 2, 17, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubEvHabId"))
if mibBuilder.loadTexts: xioHubEvHabTempsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvHabTempsEntry.setDescription('Hab temperatures.')
xioHubEvHabId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvHabId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvHabId.setDescription('Value indicating specific Hab.')
xioHubEvHabInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvHabInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvHabInstalled.setDescription('Flag indicating that Hab is installed.')
xioHubEvHubHabTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvHubHabTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvHubHabTemp.setDescription('Temperature of Hab within the Hub.')
xioHubEvServerHabTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 2, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvServerHabTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvServerHabTemp.setDescription('Temperature of Hab within the Server.')
xioHubEvProcessorTemp = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvProcessorTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvProcessorTemp.setDescription('Controller processor temperature.')
xioHubEvCacheTemp = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvCacheTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvCacheTemp.setDescription('Cache temperature.')
xioHubEvIsaTemp = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvIsaTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvIsaTemp.setDescription('ISA board temperature.')
xioHubEvRearTemp = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvRearTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvRearTemp.setDescription('Rear temperature.')
xioHubEvExtCabinetTemp = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvExtCabinetTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvExtCabinetTemp.setDescription('External cabinet temperature.')
xioHubEvKBsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvKBsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvKBsPerSec.setDescription('Total Magnitude transfer rate, in KB/s.')
xioHubEvIOsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubEvIOsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubEvIOsPerSec.setDescription('Total Magnitude transfer rate, in IO/s.')
xioHubSdEmbedPcState = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 65535))).clone(namedValues=NamedValues(("offline", 0), ("standby", 1), ("post0", 2), ("post1", 3), ("runningdiagnostics", 4), ("operational", 5), ("failed", 6), ("waitingforfibreconnect", 7), ("synchronizing", 8), ("notconnected", 9), ("unknown", 15), ("goneoffline", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdEmbedPcState.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdEmbedPcState.setDescription('Embedded PC State.')
xioHubSdControllerState = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 65535))).clone(namedValues=NamedValues(("offline", 0), ("standby", 1), ("post0", 2), ("post1", 3), ("runningdiagnostics", 4), ("operational", 5), ("failed", 6), ("waitingforfibreconnect", 7), ("synchronizing", 8), ("notconnected", 9), ("unknown", 15), ("goneoffline", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdControllerState.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdControllerState.setDescription('Controller State.')
xioHubSdCacheState = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdCacheState.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdCacheState.setDescription('Write Cache State.')
xioHubSdHabStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 3, 4), )
if mibBuilder.loadTexts: xioHubSdHabStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdHabStatusTable.setDescription('The Hab board status.')
xioHubSdHabStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 3, 4, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubSdHabId"))
if mibBuilder.loadTexts: xioHubSdHabStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdHabStatusEntry.setDescription('Hab status.')
xioHubSdHabId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdHabId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdHabId.setDescription('Value indicating specific Hab.')
xioHubSdHabInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdHabInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdHabInstalled.setDescription('Flag indicating that Hab is installed.')
xioHubSdHubHabState = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 65535))).clone(namedValues=NamedValues(("offline", 0), ("standby", 1), ("post0", 2), ("post1", 3), ("runningdiagnostics", 4), ("operational", 5), ("failed", 6), ("waitingforfibreconnect", 7), ("synchronizing", 8), ("notconnected", 9), ("unknown", 15), ("goneoffline", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdHubHabState.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdHubHabState.setDescription('State of Hab within the Hub.')
xioHubSdServerHabState = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 65535))).clone(namedValues=NamedValues(("offline", 0), ("standby", 1), ("post0", 2), ("post1", 3), ("runningdiagnostics", 4), ("operational", 5), ("failed", 6), ("waitingforfibreconnect", 7), ("synchronizing", 8), ("notconnected", 9), ("unknown", 15), ("goneoffline", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdServerHabState.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdServerHabState.setDescription('State of Hab within the Server.')
xioHubSdServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 3, 5), )
if mibBuilder.loadTexts: xioHubSdServerInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdServerInfoTable.setDescription('The Server status info.')
xioHubSdServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 3, 5, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubSdServerId"))
if mibBuilder.loadTexts: xioHubSdServerInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdServerInfoEntry.setDescription('Server status.')
xioHubSdServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdServerId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdServerId.setDescription('Value indicating specific Server.')
xioHubSdServerStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 65535))).clone(namedValues=NamedValues(("offline", 0), ("standby", 1), ("post0", 2), ("post1", 3), ("runningdiagnostics", 4), ("operational", 5), ("failed", 6), ("waitingforfibreconnect", 7), ("synchronizing", 8), ("notconnected", 9), ("unknown", 15), ("goneoffline", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSdServerStates.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSdServerStates.setDescription('State of the Server containing a Hab.')
xioHubPdPhysDevTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1), )
if mibBuilder.loadTexts: xioHubPdPhysDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdPhysDevTable.setDescription('Physical Devices info and statistics.')
xioHubPdPhysDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubPdIndex"))
if mibBuilder.loadTexts: xioHubPdPhysDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdPhysDevEntry.setDescription('Physical device info and statistics.')
xioHubPdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdIndex.setDescription('Physical Devices table index.')
xioHubPdChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdChannel.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdChannel.setDescription('SCSI Channel to which the device is attached.')
xioHubPdScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdScsiId.setDescription('SCSI ID for device.')
xioHubPdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unlabled", 1), ("data", 2), ("hotspare", 3), ("notsafe", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdClass.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdClass.setDescription('Physical device class.')
xioHubPdDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdDevName.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdDevName.setDescription('Physical device name.')
xioHubPdSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdSerialNum.setDescription('System serial number.')
xioHubPdPostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("nonexistent", 1), ("deviceok", 2), ("failinquirecmd", 3), ("failtestunitready", 4), ("failstartunit", 5), ("failinquireserialno", 6), ("failsenddiag", 7), ("failwritebuf", 8), ("failreadbuf", 9), ("failwrrdbufpat", 10), ("failverify", 11), ("failrdcapacity", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdPostStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdPostStatus.setDescription('Results from the Power On Self Test.')
xioHubPdDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonExistent", 1), ("deviceOK", 2), ("inoperable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdDevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdDevStatus.setDescription('Physical device status.')
xioHubPdDevCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdDevCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdDevCapacity.setDescription('Physical device storage capacity, in MB.')
xioHubPdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdProductId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdProductId.setDescription('Physical device product ID.')
xioHubPdVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdVendorId.setDescription('Physical device vendor ID.')
xioHubPdProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdProductRev.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdProductRev.setDescription('Physical device revision.')
xioHubPdSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdSerialNo.setDescription('Physical device serial number.')
xioHubPdTotAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdTotAvail.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdTotAvail.setDescription('Physical device storage available, in MB.')
xioHubPdLargestAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdLargestAvail.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdLargestAvail.setDescription('Largest block available on the physical device, in MB.')
xioHubPdTotRdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdTotRdReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdTotRdReq.setDescription('Total read requests made on the physical device.')
xioHubPdTotWrReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdTotWrReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdTotWrReq.setDescription('Total write requests made on the physical device.')
xioHubPdTotCorrectErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdTotCorrectErr.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdTotCorrectErr.setDescription('Total error corrections made on the physical device.')
xioHubPdAvgSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdAvgSec.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdAvgSec.setDescription('Avg number of sectors per data transfer occurring over the last second.')
xioHubPdNumReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdNumReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdNumReq.setDescription('Number of requests occuring over last second.')
xioHubPdQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdQueDepth.setDescription('I/O request queue depth.')
xioHubPdKBytesPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 4, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPdKBytesPS.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPdKBytesPS.setDescription('Physical device transfer rate, in KB/s.')
xioHubRdRaidDevTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1), )
if mibBuilder.loadTexts: xioHubRdRaidDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdRaidDevTable.setDescription('RAID Devices info and statistics.')
xioHubRdRaidDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubRdRaidId"))
if mibBuilder.loadTexts: xioHubRdRaidDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdRaidDevEntry.setDescription('RAID device info and statistics.')
xioHubRdRaidId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdRaidId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdRaidId.setDescription('RAID device identifier.')
xioHubRdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("classNonRaid", 1), ("classRaid0", 2), ("classRaid1", 3), ("classRaid5", 4), ("classRaid10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdClass.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdClass.setDescription('RAID device class.')
xioHubRdDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonExistent", 1), ("deviceOK", 2), ("uninitialized", 3), ("inoperable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDevStatus.setDescription('RAID device status.')
xioHubRdDepthMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDepthMirror.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDepthMirror.setDescription('Number of drives data is mirrored on.')
xioHubRdDevStripe = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDevStripe.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDevStripe.setDescription('Number of drives in a stripe.')
xioHubRdDevCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDevCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDevCapacity.setDescription('RAID device capacity, in MB.')
xioHubRdNumSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdNumSectors.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdNumSectors.setDescription('Stripe size, in sectors.')
xioHubRdTotRdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdTotRdReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdTotRdReq.setDescription('Total read requests made on the RAID device.')
xioHubRdTotWrReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdTotWrReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdTotWrReq.setDescription('Total write requests made on the RAID device.')
xioHubRdTotCorrectErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdTotCorrectErr.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdTotCorrectErr.setDescription('Total error corrections made on the RAID device.')
xioHubRdAvgSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdAvgSec.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdAvgSec.setDescription('Avg number of sectors per data transfer occurring over the last second.')
xioHubRdNumReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdNumReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdNumReq.setDescription('Number of requests occuring over last second.')
xioHubRdQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdQueDepth.setDescription('I/O request queue depth.')
xioHubRdKBytesPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdKBytesPS.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdKBytesPS.setDescription('RAID device transfer rate, in KB/s.')
xioHubRdPhysDevTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2), )
if mibBuilder.loadTexts: xioHubRdPhysDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdPhysDevTable.setDescription('Physical devices within a RAID Device.')
xioHubRdPhysDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubRdRaidDevId"))
if mibBuilder.loadTexts: xioHubRdPhysDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdPhysDevEntry.setDescription('Physical devices within a RAID device.')
xioHubRdRaidDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdRaidDevId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdRaidDevId.setDescription('RAID device identifier for physical devices in RAID.')
xioHubRdChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdChannel.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdChannel.setDescription('Scsi Channel for physical devices in RAID.')
xioHubRdScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdScsiId.setDescription('SCSI ID for physical devices in RAID.')
xioHubRdDevInRaid = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDevInRaid.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDevInRaid.setDescription('Flag indicating physical devices in RAID.')
xioHubRdDevRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDevRebuild.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDevRebuild.setDescription('physical devices in RAID being rebuilt.')
xioHubRdDevFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubRdDevFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubRdDevFailed.setDescription('physical devices in RAID which have failed.')
xioHubVdVirtualDevTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1), )
if mibBuilder.loadTexts: xioHubVdVirtualDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdVirtualDevTable.setDescription('Virtual Devices info and statistics.')
xioHubVdVirtualDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubVdVirtualId"))
if mibBuilder.loadTexts: xioHubVdVirtualDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdVirtualDevEntry.setDescription('Virtual device info and statistics.')
xioHubVdVirtualId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdVirtualId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdVirtualId.setDescription('Virtual device identifier.')
xioHubVdHabGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdHabGroup.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdHabGroup.setDescription('Cluster to which this Virtual Device belongs.')
xioHubVdDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nonExistent", 1), ("deviceOK", 2), ("uninitialized", 3), ("inoperable", 4), ("copyingTo", 5), ("mirroring", 6), ("pausedInCopy", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdDevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdDevStatus.setDescription('Virtual device status.')
xioHubVdDevCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdDevCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdDevCapacity.setDescription('Virtual device storage capacity, in MB.')
xioHubVdTotRdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdTotRdReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdTotRdReq.setDescription('Total read requests made on the virtual device.')
xioHubVdTotWrReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdTotWrReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdTotWrReq.setDescription('Total write requests made on the virtual device.')
xioHubVdAvgSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdAvgSec.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdAvgSec.setDescription('Avg number of sectors per data transfer occurring over the last second.')
xioHubVdNumReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdNumReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdNumReq.setDescription('Number of requests occuring over last second.')
xioHubVdQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdQueDepth.setDescription('I/O request queue depth.')
xioHubVdKBytesPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdKBytesPS.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdKBytesPS.setDescription('Virtual device transfer rate, in KB/s.')
xioHubVdAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdAttribute.setDescription('Virtual device attributes.')
xioHubVdRaidDevTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 6, 2), )
if mibBuilder.loadTexts: xioHubVdRaidDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdRaidDevTable.setDescription('Raid devices within a Virtual Device.')
xioHubVdRaidDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 6, 2, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubVdRaidVirtId"))
if mibBuilder.loadTexts: xioHubVdRaidDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdRaidDevEntry.setDescription('Raid devices within a Virtual device.')
xioHubVdRaidVirtId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdRaidVirtId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdRaidVirtId.setDescription('Virtual device identifier for Raid dev list.')
xioHubVdRaidId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdRaidId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdRaidId.setDescription('RAID device identifier for Raid dev list.')
xioHubVdRaidExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdRaidExists.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdRaidExists.setDescription('Flag indicating that RAID device is part of virtual device.')
xioHubVdCacheInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3), )
if mibBuilder.loadTexts: xioHubVdCacheInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdCacheInfoTable.setDescription('Cache Infor for a Virtual Device.')
xioHubVdCacheInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubVdCacheVirtId"))
if mibBuilder.loadTexts: xioHubVdCacheInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdCacheInfoEntry.setDescription('Virtual device info and statistics.')
xioHubVdCacheVirtId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdCacheVirtId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdCacheVirtId.setDescription('Virtual device identifier for cache info.')
xioHubVdCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdCacheEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdCacheEnabled.setDescription('Flag indicating that cache is enabled for Virtual device.')
xioHubVdReadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdReadHits.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdReadHits.setDescription('Number of read hits in cache.')
xioHubVdReadMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdReadMiss.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdReadMiss.setDescription('Number of read misses.')
xioHubVdWriteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdWriteHits.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdWriteHits.setDescription('Number of write hits.')
xioHubVdWriteMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVdWriteMiss.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVdWriteMiss.setDescription('Number of write misses.')
xioHubCiStatus = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("deviceOK", 2), ("noPower", 3), ("hwFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiStatus.setDescription('Write Cache status.')
xioHubCiCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiCacheSize.setDescription('Total size of cache memory in bytes.')
xioHubCiMaxCacheable = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiMaxCacheable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiMaxCacheable.setDescription('Max # of sectors cacehable for any write operation.')
xioHubCiNumWrBacks = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiNumWrBacks.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiNumWrBacks.setDescription('Current # of writebacks that are in process.')
xioHubCiFreeBuffers = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiFreeBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiFreeBuffers.setDescription('Total # of free (unassigned) cache buffers.')
xioHubCiCleanBuffers = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiCleanBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiCleanBuffers.setDescription('Total # of clean (assigned) chace buffers.')
xioHubCiDirtyBuffers = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubCiDirtyBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubCiDirtyBuffers.setDescription('Total # of dirty (assigned) cache buffers.')
xioHubHiHabInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 8, 1), )
if mibBuilder.loadTexts: xioHubHiHabInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHiHabInfoTable.setDescription('Hab info.')
xioHubHiHabInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 8, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubHiHabId"))
if mibBuilder.loadTexts: xioHubHiHabInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHiHabInfoEntry.setDescription('Hab info.')
xioHubHiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deviceNotInstalled", 1), ("deviceOK", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHiStatus.setDescription('HAB Status.')
xioHubHiHabId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHiHabId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHiHabId.setDescription('Physical HAB id.')
xioHubHiHabGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unassigned", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHiHabGroup.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHiHabGroup.setDescription('HAB Group associated with physical HAB.')
xioHubHiServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubHiServerName.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubHiServerName.setDescription('Name of server associated with physical HAB.')
xioHubBiBusInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1), )
if mibBuilder.loadTexts: xioHubBiBusInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiBusInfoTable.setDescription('SCSI Bus info and statistics.')
xioHubBiBusInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubBiChannel"))
if mibBuilder.loadTexts: xioHubBiBusInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiBusInfoEntry.setDescription('Physical device info and statistics.')
xioHubBiChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiChannel.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiChannel.setDescription('SCSI Channel device is attached to.')
xioHubBiTotRdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiTotRdReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiTotRdReq.setDescription('Total read requests made on the bus.')
xioHubBiTotWrReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiTotWrReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiTotWrReq.setDescription('Total write requests made on the bus.')
xioHubBiTotCorrectErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiTotCorrectErr.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiTotCorrectErr.setDescription('Total error corrections made on the bus.')
xioHubBiAvgSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiAvgSec.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiAvgSec.setDescription('Avg number of sectors per data transfer occurring over the last second.')
xioHubBiNumReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiNumReq.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiNumReq.setDescription('Number of requests occuring over last second.')
xioHubBiQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiQueDepth.setDescription('I/O request queue depth.')
xioHubBiKBytesPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubBiKBytesPS.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubBiKBytesPS.setDescription('Bus transfer rate, in KB/s.')
xioHubTvEventNum = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvEventNum.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvEventNum.setDescription('Event number generated by the Magnitude.')
xioHubTvTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvTimestamp.setDescription('Timestamp in YYYY/MM/DD HH:MM:SS format.')
xioHubTvType = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvType.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvType.setDescription('Magnitude-specific event type.')
xioHubTvExtType = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvExtType.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvExtType.setDescription('Extended Magnitude-specific event type.')
xioHubTvFlags = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvFlags.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvFlags.setDescription('Event flags (acknowledged, severity, etc).')
xioHubTvLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvLedStatus.setDescription('LED status.')
xioHubTvMessage = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvMessage.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvMessage.setDescription('Event description.')
xioHubTvAddress = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvAddress.setDescription('IP address or modem phone number of the Magnitude.')
xioHubTvHubName = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubTvHubName.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubTvHubName.setDescription('Name of the Magnitude.')
xioHubUnknownEvent = NotificationType((1, 3, 6, 1, 4, 1, 2366, 1, 20) + (0,2)).setObjects(("XIO-HUB-MIB", "xioHubTvEventNum"), ("XIO-HUB-MIB", "xioHubTvTimestamp"), ("XIO-HUB-MIB", "xioHubTvType"), ("XIO-HUB-MIB", "xioHubTvExtType"), ("XIO-HUB-MIB", "xioHubTvFlags"), ("XIO-HUB-MIB", "xioHubTvLedStatus"), ("XIO-HUB-MIB", "xioHubTvMessage"), ("XIO-HUB-MIB", "xioHubTvAddress"), ("XIO-HUB-MIB", "xioHubTvHubName"))
if mibBuilder.loadTexts: xioHubUnknownEvent.setDescription('A Magnitude unknown event; the severity is invalid.')
xioHubInfoEvent = NotificationType((1, 3, 6, 1, 4, 1, 2366, 1, 20) + (0,5)).setObjects(("XIO-HUB-MIB", "xioHubTvEventNum"), ("XIO-HUB-MIB", "xioHubTvTimestamp"), ("XIO-HUB-MIB", "xioHubTvType"), ("XIO-HUB-MIB", "xioHubTvExtType"), ("XIO-HUB-MIB", "xioHubTvFlags"), ("XIO-HUB-MIB", "xioHubTvLedStatus"), ("XIO-HUB-MIB", "xioHubTvMessage"), ("XIO-HUB-MIB", "xioHubTvAddress"), ("XIO-HUB-MIB", "xioHubTvHubName"))
if mibBuilder.loadTexts: xioHubInfoEvent.setDescription('A Magnitude Informational event.')
xioHubWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 2366, 1, 20) + (0,6)).setObjects(("XIO-HUB-MIB", "xioHubTvEventNum"), ("XIO-HUB-MIB", "xioHubTvTimestamp"), ("XIO-HUB-MIB", "xioHubTvType"), ("XIO-HUB-MIB", "xioHubTvExtType"), ("XIO-HUB-MIB", "xioHubTvFlags"), ("XIO-HUB-MIB", "xioHubTvLedStatus"), ("XIO-HUB-MIB", "xioHubTvMessage"), ("XIO-HUB-MIB", "xioHubTvAddress"), ("XIO-HUB-MIB", "xioHubTvHubName"))
if mibBuilder.loadTexts: xioHubWarningEvent.setDescription('A Magnitude Warning event.')
xioHubSeriousEvent = NotificationType((1, 3, 6, 1, 4, 1, 2366, 1, 20) + (0,7)).setObjects(("XIO-HUB-MIB", "xioHubTvEventNum"), ("XIO-HUB-MIB", "xioHubTvTimestamp"), ("XIO-HUB-MIB", "xioHubTvType"), ("XIO-HUB-MIB", "xioHubTvExtType"), ("XIO-HUB-MIB", "xioHubTvFlags"), ("XIO-HUB-MIB", "xioHubTvLedStatus"), ("XIO-HUB-MIB", "xioHubTvMessage"), ("XIO-HUB-MIB", "xioHubTvAddress"), ("XIO-HUB-MIB", "xioHubTvHubName"))
if mibBuilder.loadTexts: xioHubSeriousEvent.setDescription('A Magnitude Serious event.')
xioHubFatalEvent = NotificationType((1, 3, 6, 1, 4, 1, 2366, 1, 20) + (0,8)).setObjects(("XIO-HUB-MIB", "xioHubTvEventNum"), ("XIO-HUB-MIB", "xioHubTvTimestamp"), ("XIO-HUB-MIB", "xioHubTvType"), ("XIO-HUB-MIB", "xioHubTvExtType"), ("XIO-HUB-MIB", "xioHubTvFlags"), ("XIO-HUB-MIB", "xioHubTvLedStatus"), ("XIO-HUB-MIB", "xioHubTvMessage"), ("XIO-HUB-MIB", "xioHubTvAddress"), ("XIO-HUB-MIB", "xioHubTvHubName"))
if mibBuilder.loadTexts: xioHubFatalEvent.setDescription('A Magnitude Fatal event.')
xioHubLiProcUsed = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubLiProcUsed.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiProcUsed.setDescription('% of Processor Capacity Used.')
xioHubLiFHabTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 30, 2), )
if mibBuilder.loadTexts: xioHubLiFHabTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiFHabTable.setDescription('The FHab Cpu Load Variables.')
xioHubLiFHabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 30, 2, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubLiIndex"))
if mibBuilder.loadTexts: xioHubLiFHabEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiFHabEntry.setDescription('Hab status.')
xioHubLiFHabUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubLiFHabUsed.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiFHabUsed.setDescription('% of HAB Processor Capacity Used.')
xioHubLiFHabMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubLiFHabMbs.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiFHabMbs.setDescription('HAB throughput in MB/s.')
xioHubLiFHabIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 30, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubLiFHabIOs.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiFHabIOs.setDescription('HAB I/Os per second.')
xioHubLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 30, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubLiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubLiIndex.setDescription('Li id.')
xioHubStDevListNum = MibScalar((1, 3, 6, 1, 4, 1, 2366, 1, 40, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevListNum.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListNum.setDescription('Number of Storage devices.')
xioHubStDevListSNTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 40, 2), )
if mibBuilder.loadTexts: xioHubStDevListSNTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListSNTable.setDescription('The Storage Device Serial Numbers.')
xioHubStDevListSNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 40, 2, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubStDevSNIndex"))
if mibBuilder.loadTexts: xioHubStDevListSNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListSNEntry.setDescription('Serial Number.')
xioHubStDevListSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 40, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevListSNum.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListSNum.setDescription('The Storage Device Serial Number.')
xioHubStDevSNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 40, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevSNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevSNIndex.setDescription('The Storage Device Serial Number Index.')
xioHubStDevListNTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 40, 3), )
if mibBuilder.loadTexts: xioHubStDevListNTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListNTable.setDescription('The Storage Device Names.')
xioHubStDevListNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 40, 3, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubStDevNIndex"))
if mibBuilder.loadTexts: xioHubStDevListNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListNEntry.setDescription('Name.')
xioHubStDevListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 40, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevListName.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListName.setDescription('The Storage Device name.')
xioHubStDevNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 40, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevNIndex.setDescription('The Storage Device name index.')
xioHubStDevListATable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 40, 4), )
if mibBuilder.loadTexts: xioHubStDevListATable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListATable.setDescription('The Storage Device Addresses.')
xioHubStDevListAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 40, 4, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubStDevAIndex"))
if mibBuilder.loadTexts: xioHubStDevListAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListAEntry.setDescription('Address.')
xioHubStDevListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 40, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevListAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevListAddr.setDescription('The Storage Device address.')
xioHubStDevAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 40, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubStDevAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubStDevAIndex.setDescription('The Storage Device address.')
xioHubVpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 50, 1), )
if mibBuilder.loadTexts: xioHubVpInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVpInfoTable.setDescription('VDisk Performance info.')
xioHubVpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 50, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubVpId"))
if mibBuilder.loadTexts: xioHubVpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVpInfoEntry.setDescription('Performance info on a VDisk.')
xioHubVpKBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVpKBS.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVpKBS.setDescription('KiloBytes Per Second Throughput for this VDisk.')
xioHubVpIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 50, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVpIOs.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVpIOs.setDescription('IOs per second for this VDisk.')
xioHubVpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 50, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubVpId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubVpId.setDescription('VDisk Table Index.')
xioHubPpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 60, 1), )
if mibBuilder.loadTexts: xioHubPpInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPpInfoTable.setDescription('Physical Disk Performance info.')
xioHubPpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 60, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubPpId"))
if mibBuilder.loadTexts: xioHubPpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPpInfoEntry.setDescription('Performance info on a Physical Disk.')
xioHubPpKBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 60, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPpKBS.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPpKBS.setDescription('KiloBytes Per Second Throughput for this Physical Disk.')
xioHubPpIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 60, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPpIOs.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPpIOs.setDescription('IOs per second for this Physical Disk.')
xioHubPpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 60, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubPpId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubPpId.setDescription('Physical Disk Table Index.')
xioHubSvInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1), )
if mibBuilder.loadTexts: xioHubSvInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvInfoTable.setDescription('Server info.')
xioHubSvInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1), ).setIndexNames((0, "XIO-HUB-MIB", "xioHubSvId"))
if mibBuilder.loadTexts: xioHubSvInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvInfoEntry.setDescription('Info on a Server.')
xioHubSvClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSvClusterId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvClusterId.setDescription('Cluster index number.')
xioHubSvFCalId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSvFCalId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvFCalId.setDescription('Fcal id.')
xioHubSvVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSvVDiskId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvVDiskId.setDescription('VDisk id.')
xioHubSvVDiskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSvVDiskLUN.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvVDiskLUN.setDescription('LUN value for this vdisk.')
xioHubSvId = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSvId.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvId.setDescription('Server index number.')
xioHubSvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2366, 1, 70, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xioHubSvName.setStatus('mandatory')
if mibBuilder.loadTexts: xioHubSvName.setDescription('Server Name.')
mibBuilder.exportSymbols("XIO-HUB-MIB", xioHubWarningEvent=xioHubWarningEvent, xioHubEvNumRearFans=xioHubEvNumRearFans, xioHubEvDcExists=xioHubEvDcExists, xioHubSdServerInfoEntry=xioHubSdServerInfoEntry, xioHubEvRearFansGood=xioHubEvRearFansGood, xioHubSvVDiskId=xioHubSvVDiskId, xioHubIdentification=xioHubIdentification, xioHubEvExtUpsAc=xioHubEvExtUpsAc, xioHubPpIOs=xioHubPpIOs, xioHubPdQueDepth=xioHubPdQueDepth, xioHubStatusData=xioHubStatusData, xioHubStorageDevList=xioHubStorageDevList, xioHubVdNumReq=xioHubVdNumReq, xioHubEvMainDcPowerTable=xioHubEvMainDcPowerTable, xioHubBiBusInfoTable=xioHubBiBusInfoTable, xioHubLoadInfo=xioHubLoadInfo, xioHubBiTotCorrectErr=xioHubBiTotCorrectErr, xioHubSvId=xioHubSvId, xioHubStDevListAddr=xioHubStDevListAddr, xiotech=xiotech, xioHubVdCacheInfoTable=xioHubVdCacheInfoTable, xioHubEvFrontFansId=xioHubEvFrontFansId, xioHubRdDevFailed=xioHubRdDevFailed, xioHubCacheInfo=xioHubCacheInfo, xioHubTvExtType=xioHubTvExtType, xioHubVdCacheInfoEntry=xioHubVdCacheInfoEntry, xioHubLiIndex=xioHubLiIndex, xioHubSdHubHabState=xioHubSdHubHabState, xioHubEnvironment=xioHubEnvironment, xioHubRdScsiId=xioHubRdScsiId, xioHubStDevListNum=xioHubStDevListNum, xioHubPpInfo=xioHubPpInfo, xioHubTvAddress=xioHubTvAddress, xioHubStDevListSNum=xioHubStDevListSNum, xioHubSdCacheState=xioHubSdCacheState, xioHubRdPhysDevEntry=xioHubRdPhysDevEntry, xioHubEvProcessorTemp=xioHubEvProcessorTemp, xioHubSdServerStates=xioHubSdServerStates, xioHubVdQueDepth=xioHubVdQueDepth, xioHubEvExtDcExists=xioHubEvExtDcExists, xioHubHiHabInfoEntry=xioHubHiHabInfoEntry, xioHubRdRaidDevTable=xioHubRdRaidDevTable, xioHubCiNumWrBacks=xioHubCiNumWrBacks, xioHubStDevAIndex=xioHubStDevAIndex, xioHubPhysicalDevice=xioHubPhysicalDevice, xioHubEvExtNumRearFans=xioHubEvExtNumRearFans, xioHubTvFlags=xioHubTvFlags, xioHubLiFHabMbs=xioHubLiFHabMbs, xioHubHuTCPIPAddr=xioHubHuTCPIPAddr, xioHubEvIOsPerSec=xioHubEvIOsPerSec, xioHubSdControllerState=xioHubSdControllerState, xioHubSeriousEvent=xioHubSeriousEvent, xioHubSvName=xioHubSvName, xioHubRdTotCorrectErr=xioHubRdTotCorrectErr, xioHubStDevListName=xioHubStDevListName, xioHubRdQueDepth=xioHubRdQueDepth, xioHubVdDevStatus=xioHubVdDevStatus, xioHubEvUpsAc=xioHubEvUpsAc, xioHubPdScsiId=xioHubPdScsiId, xioHubVdRaidDevTable=xioHubVdRaidDevTable, xioHubBiBusInfoEntry=xioHubBiBusInfoEntry, xioHubPdIndex=xioHubPdIndex, xioHubEvNumFrontFans=xioHubEvNumFrontFans, xioHubEvExtRearFansGood=xioHubEvExtRearFansGood, xioHubRdPhysDevTable=xioHubRdPhysDevTable, xioHubPdDevName=xioHubPdDevName, xioHubEvUpsBattLow=xioHubEvUpsBattLow, xioHubVdRaidExists=xioHubVdRaidExists, xioHubLiFHabIOs=xioHubLiFHabIOs, xioHubRdClass=xioHubRdClass, xioHubVdRaidId=xioHubVdRaidId, xioHubEvFrontFansEntry=xioHubEvFrontFansEntry, xioHubEvExtNumSupplies=xioHubEvExtNumSupplies, xioHubPdTotCorrectErr=xioHubPdTotCorrectErr, xioHubRdTotWrReq=xioHubRdTotWrReq, xioHubBiTotRdReq=xioHubBiTotRdReq, xioHubHiHabId=xioHubHiHabId, xioHubPdTotRdReq=xioHubPdTotRdReq, xioHubBiChannel=xioHubBiChannel, xioHubPdProductRev=xioHubPdProductRev, xioHubPdDevStatus=xioHubPdDevStatus, xioHubRdKBytesPS=xioHubRdKBytesPS, xioHubTvType=xioHubTvType, xioHubHuCompat=xioHubHuCompat, xioHubEvHabTempsEntry=xioHubEvHabTempsEntry, xioHubTvHubName=xioHubTvHubName, xioHubSdHabStatusEntry=xioHubSdHabStatusEntry, xioHubSdHabInstalled=xioHubSdHabInstalled, xioHubPdDevCapacity=xioHubPdDevCapacity, xioHubEvRearTemp=xioHubEvRearTemp, xioHubVpId=xioHubVpId, xioHubSvVDiskLUN=xioHubSvVDiskLUN, xioHubHiServerName=xioHubHiServerName, xioHubRdNumSectors=xioHubRdNumSectors, xioHubRaidDevice=xioHubRaidDevice, xioHubHiStatus=xioHubHiStatus, xioHubVpInfoTable=xioHubVpInfoTable, xioHubVdRaidDevEntry=xioHubVdRaidDevEntry, xioHubStDevListNEntry=xioHubStDevListNEntry, xioHubCiCacheSize=xioHubCiCacheSize, xioHubEvCacheTemp=xioHubEvCacheTemp, xioHubPpInfoEntry=xioHubPpInfoEntry, xioHubCiDirtyBuffers=xioHubCiDirtyBuffers, xioHubPdClass=xioHubPdClass, xioHubVdVirtualId=xioHubVdVirtualId, xioHubEvFrontFansGood=xioHubEvFrontFansGood, xioHubLiProcUsed=xioHubLiProcUsed, xioHubRdDevRebuild=xioHubRdDevRebuild, xioHubBiAvgSec=xioHubBiAvgSec, xioHubSdServerId=xioHubSdServerId, xioHubPdLargestAvail=xioHubPdLargestAvail, xioHubLiFHabUsed=xioHubLiFHabUsed, xioHubEvExtDcGood=xioHubEvExtDcGood, xioHubPdPostStatus=xioHubPdPostStatus, xioHubVdCacheEnabled=xioHubVdCacheEnabled, xioHubTvLedStatus=xioHubTvLedStatus, xioHubEvExtRearFansTable=xioHubEvExtRearFansTable, xioHubPdNumReq=xioHubPdNumReq, xioHubVpInfo=xioHubVpInfo, xioHubSdServerInfoTable=xioHubSdServerInfoTable, xioHubCiCleanBuffers=xioHubCiCleanBuffers, xioHubVpKBS=xioHubVpKBS, xioHubRdNumReq=xioHubRdNumReq, xioHubSdEmbedPcState=xioHubSdEmbedPcState, xioHubEvExtDcMain=xioHubEvExtDcMain, xioHubHiHabGroup=xioHubHiHabGroup, xioHubSvInfo=xioHubSvInfo, xioHubHuSerialNum=xioHubHuSerialNum, xioHubEvExtMainDcPowerTable=xioHubEvExtMainDcPowerTable, xioHubRdDepthMirror=xioHubRdDepthMirror, xioHubVdVirtualDevTable=xioHubVdVirtualDevTable, xioHubRdDevInRaid=xioHubRdDevInRaid, xioHubEvMainDcPowerEntry=xioHubEvMainDcPowerEntry, xioHubVdHabGroup=xioHubVdHabGroup, xioHubPdTotAvail=xioHubPdTotAvail, xioHubCiStatus=xioHubCiStatus, xioHubBiKBytesPS=xioHubBiKBytesPS, xioHubPdVendorId=xioHubPdVendorId, xioHubSvInfoTable=xioHubSvInfoTable, xioHubPdProductId=xioHubPdProductId, xioHubEvKBsPerSec=xioHubEvKBsPerSec, xioHubRdAvgSec=xioHubRdAvgSec, xioHubRdRaidId=xioHubRdRaidId, xioHubCiFreeBuffers=xioHubCiFreeBuffers, xioHubVdAttribute=xioHubVdAttribute, xioHubVdAvgSec=xioHubVdAvgSec, xioHubRdTotRdReq=xioHubRdTotRdReq, xioHubPdSerialNum=xioHubPdSerialNum, xioHubPdPhysDevEntry=xioHubPdPhysDevEntry, xioHubStDevListAEntry=xioHubStDevListAEntry, xioHubEvRearFansId=xioHubEvRearFansId, xioHubEvExtMainDcPowerEntry=xioHubEvExtMainDcPowerEntry, xioHubRdRaidDevId=xioHubRdRaidDevId, xioHubPdSerialNo=xioHubPdSerialNo, xioHubVdKBytesPS=xioHubVdKBytesPS, xioHubVdCacheVirtId=xioHubVdCacheVirtId, xioHubBiNumReq=xioHubBiNumReq, xioHubEvRearFansTable=xioHubEvRearFansTable, xioHubSdHabId=xioHubSdHabId, xioHubHuName=xioHubHuName, xioHubEvFrontFansTable=xioHubEvFrontFansTable, xioHubVdReadHits=xioHubVdReadHits, xioHubUnknownEvent=xioHubUnknownEvent, xioHubStDevListNTable=xioHubStDevListNTable, xioHubEvExtDcId=xioHubEvExtDcId, xioHub=xioHub, xioHubEvNumSupplies=xioHubEvNumSupplies, xioHubVdRaidVirtId=xioHubVdRaidVirtId, xioHubVdWriteHits=xioHubVdWriteHits, xioHubEvHabInstalled=xioHubEvHabInstalled, xioHubEvHabId=xioHubEvHabId, xioHubHabInfo=xioHubHabInfo, xioHubVdTotWrReq=xioHubVdTotWrReq, xioHubEvIsaTemp=xioHubEvIsaTemp, xioHubVpIOs=xioHubVpIOs, xioHubEvDcId=xioHubEvDcId, xioHubTrapVariables=xioHubTrapVariables, xioHubPpId=xioHubPpId, xioHubLiFHabEntry=xioHubLiFHabEntry, xioHubSvClusterId=xioHubSvClusterId, xioHubLiFHabTable=xioHubLiFHabTable, xioHubPdTotWrReq=xioHubPdTotWrReq, xioHubSvFCalId=xioHubSvFCalId, xioHubBiTotWrReq=xioHubBiTotWrReq, xioHubTvMessage=xioHubTvMessage, xioHubVdWriteMiss=xioHubVdWriteMiss, xioHubTvEventNum=xioHubTvEventNum, xioHubPpInfoTable=xioHubPpInfoTable, xioHubEvExtUpsBatt=xioHubEvExtUpsBatt, xioHubStDevListATable=xioHubStDevListATable, xioHubEvExtRearFansEntry=xioHubEvExtRearFansEntry, xioHubStDevListSNTable=xioHubStDevListSNTable, xioHubRdDevStripe=xioHubRdDevStripe, xioHubEvMainPower=xioHubEvMainPower, xioHubStDevListSNEntry=xioHubStDevListSNEntry, xioHubRdChannel=xioHubRdChannel, xioHubCiMaxCacheable=xioHubCiMaxCacheable, xioHubSdServerHabState=xioHubSdServerHabState, xioHubInfoEvent=xioHubInfoEvent, xioHubSvInfoEntry=xioHubSvInfoEntry, xioHubTraps=xioHubTraps, xioHubFatalEvent=xioHubFatalEvent, xioHubBusInfo=xioHubBusInfo, xioHubEvExtCabinetTemp=xioHubEvExtCabinetTemp, xioHubVpInfoEntry=xioHubVpInfoEntry, xioHubHuHeartbeat=xioHubHuHeartbeat, xioHubHiHabInfoTable=xioHubHiHabInfoTable, xioHubPdChannel=xioHubPdChannel, xioHubEvRearFansEntry=xioHubEvRearFansEntry, xioHubRdDevStatus=xioHubRdDevStatus, xioHubPdKBytesPS=xioHubPdKBytesPS, xioHubTvTimestamp=xioHubTvTimestamp, xioHubEvDcGood=xioHubEvDcGood, xioHubPpKBS=xioHubPpKBS, xioHubPdPhysDevTable=xioHubPdPhysDevTable, xioHubStDevNIndex=xioHubStDevNIndex, xioHubStDevSNIndex=xioHubStDevSNIndex, xioHubEvExtRearFansId=xioHubEvExtRearFansId, xioHubBiQueDepth=xioHubBiQueDepth, xioHubPdAvgSec=xioHubPdAvgSec, xioHubSdHabStatusTable=xioHubSdHabStatusTable, xioHubVdVirtualDevEntry=xioHubVdVirtualDevEntry, xioHubVdDevCapacity=xioHubVdDevCapacity, xioHubEvHabTempsTable=xioHubEvHabTempsTable, xioHubEvServerHabTemp=xioHubEvServerHabTemp, xioHubVdReadMiss=xioHubVdReadMiss, xioHubRdRaidDevEntry=xioHubRdRaidDevEntry, xioHubRdDevCapacity=xioHubRdDevCapacity, xioHubVirtualDevice=xioHubVirtualDevice, xioHubEvHubHabTemp=xioHubEvHubHabTemp, xioHubVdTotRdReq=xioHubVdTotRdReq)
