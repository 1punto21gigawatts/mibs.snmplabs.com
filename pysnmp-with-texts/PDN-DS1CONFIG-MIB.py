#
# PySNMP MIB module PDN-DS1CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-DS1CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
pdn_interfaces, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-interfaces")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, IpAddress, NotificationType, Unsigned32, TimeTicks, ModuleIdentity, MibIdentifier, Counter64, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "IpAddress", "NotificationType", "Unsigned32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ent_ds1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5)).setLabel("ent-ds1")
devDS1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1))
devDS1TestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 1), )
if mibBuilder.loadTexts: devDS1TestTable.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1TestTable.setDescription('The Paradyne DS1 Interface Test Table.')
devDS1TestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 1, 1), ).setIndexNames((0, "PDN-DS1CONFIG-MIB", "devDS1TestIfIndex"), (0, "PDN-DS1CONFIG-MIB", "devDS1TestType"))
if mibBuilder.loadTexts: devDS1TestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1TestEntry.setDescription('An entry in the Paradyne DS1 Interface Test Table.')
devDS1TestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1TestIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1TestIfIndex.setDescription('The index value which uniquely identifies the interface for which this entry contains information on interface tests. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
devDS1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("llbup", 1), ("llbdn", 2), ("llb", 3), ("plb", 4), ("rlb", 5), ("sendQRSS", 6), ("sendZeros", 7), ("sendOnes", 8), ("send1in8", 9), ("send3in24", 10), ("send63", 11), ("send511", 12), ("send2047", 13), ("send2E15", 14), ("send2E20", 15), ("sendUserDefined", 16), ("monQRSS", 17), ("monZeros", 18), ("monOnes", 19), ("mon1in8", 20), ("mon3in24", 21), ("mon63", 22), ("mon11", 23), ("mon2047", 24), ("mon2E15", 25), ("mon2E20", 26), ("monUserDefined", 27), ("send2E7", 28), ("mon2E7", 29), ("send2E11", 30), ("mon2E11", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1TestType.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1TestType.setDescription('The index value which uniquely identifies the test for which this entry contains information.')
devDS1TestControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("running", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devDS1TestControl.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1TestControl.setDescription("A control variable used to start and stop operator- initiated interface tests. Writing idle(1) to the test table entry terminates the specified test for the interface associated with the entry. Writing running(2) activates the specified test for the interface, if allowed (i.e., the test must be allowed for the interface and in combination with any other tests currently executing for the interface). The rules for executing tests for the product are specified in the product's Operator's Guide. This variable is read to determine the current status of the test for the interface. A value of running(2) indicates the test is currently in progress on the interface. A value of idle(1) indicates that the test is currently not active on the interface.")
devDS1TestArgument = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devDS1TestArgument.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1TestArgument.setDescription('Any argument required by the test being executed.')
devDS1MonResultTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 2), )
if mibBuilder.loadTexts: devDS1MonResultTable.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1MonResultTable.setDescription('The Paradyne Device Monitor Test Pattern Result Table.')
devDS1MonResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 2, 1), ).setIndexNames((0, "PDN-DS1CONFIG-MIB", "devDS1MonResultIfIndex"), (0, "PDN-DS1CONFIG-MIB", "devDS1MonResultTestType"))
if mibBuilder.loadTexts: devDS1MonResultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1MonResultEntry.setDescription('An entry in the Paradyne Device Monitor Test Pattern Result Table.')
devDS1MonResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1MonResultIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1MonResultIfIndex.setDescription('The index value which uniquely identifies the interface for which this entry contains information on the result of the monitor test pattern request. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
devDS1MonResultTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31))).clone(namedValues=NamedValues(("monQRSS", 17), ("monZeros", 18), ("monOnes", 19), ("mon1in8", 20), ("mon3in24", 21), ("mon63", 22), ("mon11", 23), ("mon2047", 24), ("mon2E15", 25), ("mon2E20", 26), ("monUserDefined", 27), ("mon2E7", 29), ("mon2E11", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1MonResultTestType.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1MonResultTestType.setDescription('The index value which uniquely identifies the test for which this entry contains information.')
devDS1MonResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inSyncNoBitErrors", 2), ("inSyncWithBitErrors", 3), ("notInSync", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1MonResultCode.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1MonResultCode.setDescription('This object contains a code for more specific information on the test pattern monitoring result. A value of none(1) indicates that no further information is available. inSyncNoBitErrors(2) notes that the monitor pattern test has synchronized on the pattern and has not detected any bit errors. inSyncWithBitErrors indicates that the monitor pattern test has synchronized on the pattern and has detected bit errors. A monitor pattern test that has not synchronized on the request pattern returns a value of notInSync(4).')
devDS1MonResultErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devDS1MonResultErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1MonResultErrorCount.setDescription('The number of bit errors detected in the received monitoring test pattern. The error count is updated once every second. The error count does not increment during periods when the pattern is not synchronized, or once synchronization is lost. The maximum value of this object is 99,999. Writing any value to this object will reset it to zero.')
devDS1SendControlTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 3), )
if mibBuilder.loadTexts: devDS1SendControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1SendControlTable.setDescription('The Paradyne Device Send Test Pattern Control Table.')
devDS1SendControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 3, 1), ).setIndexNames((0, "PDN-DS1CONFIG-MIB", "devDS1SendControlIfIndex"))
if mibBuilder.loadTexts: devDS1SendControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1SendControlEntry.setDescription('An entry in the Paradyne Device Send Test Pattern Control Table.')
devDS1SendControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1SendControlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1SendControlIfIndex.setDescription('The index value which uniquely identifies the interface for which this entry contains information on the result of the monitor test pattern request. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
devDS1SendControlInjectErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("inject", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devDS1SendControlInjectErr.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1SendControlInjectErr.setDescription('Setting this object to inject(2) will inject one error in the data pattern being sent. If no pattern is being sent, the agent will return BAD VALUE. Reading this value will always return noOp(1).')
devDS1SendControlErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 5, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDS1SendControlErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: devDS1SendControlErrorCount.setDescription('The number of bit errors injected into the test pattern being sent. The maximum value of this object is 99,999.')
mibBuilder.exportSymbols("PDN-DS1CONFIG-MIB", devDS1MonResultEntry=devDS1MonResultEntry, devDS1MonResultCode=devDS1MonResultCode, devDS1TestControl=devDS1TestControl, devDS1SendControlInjectErr=devDS1SendControlInjectErr, devDS1Test=devDS1Test, devDS1SendControlIfIndex=devDS1SendControlIfIndex, devDS1TestTable=devDS1TestTable, devDS1TestArgument=devDS1TestArgument, devDS1TestType=devDS1TestType, devDS1SendControlTable=devDS1SendControlTable, devDS1TestEntry=devDS1TestEntry, devDS1TestIfIndex=devDS1TestIfIndex, devDS1MonResultErrorCount=devDS1MonResultErrorCount, devDS1SendControlEntry=devDS1SendControlEntry, devDS1MonResultTestType=devDS1MonResultTestType, devDS1MonResultIfIndex=devDS1MonResultIfIndex, devDS1MonResultTable=devDS1MonResultTable, devDS1SendControlErrorCount=devDS1SendControlErrorCount, ent_ds1=ent_ds1)
