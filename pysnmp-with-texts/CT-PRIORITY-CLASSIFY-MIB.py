#
# PySNMP MIB module CT-PRIORITY-CLASSIFY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-PRIORITY-CLASSIFY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:29:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ctPriorityExt, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctPriorityExt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ObjectIdentity, IpAddress, Gauge32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Bits, NotificationType, Counter32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "IpAddress", "Gauge32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Bits", "NotificationType", "Counter32", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctPriorityExtClassifyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5))
pClassifyRTP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1))
pClassifyUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2))
pClassifyRTPLowDelayQueuePreference = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPLowDelayQueuePreference.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPLowDelayQueuePreference.setDescription('This value represents one of eight preference levels, 0 through 7, with 0 being the worst and 7 the best. The value will be translated by the device into a three bit binary number. This value shall be used to put incoming RTP packets on an internal queue.')
pClassifyRTCPParsing = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTCPParsing.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTCPParsing.setDescription("This object will enable or disable parsing of all forwarded packets looking for RTCP packets. Enabled(2) means that all fowarded packets will be parsed for RTCP. When an RTCP packet is found, the identification of the associated RTP 'connection' (next lower port number) is added to the list of low delay ports. Disabled(1) means that no packets will be parsed. ")
pClassifyRTPTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3), )
if mibBuilder.loadTexts: pClassifyRTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPTable.setDescription('A list describing which MIB-II interfaces will allow 802.1 P/Q tagging or modification of the precedence field in the TOS portion of an IP packet or both. It also specifies the tagging value and the TOS precedence where applicable. ')
pClassifyRTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1), ).setIndexNames((0, "CT-PRIORITY-CLASSIFY-MIB", "pClassifyRTPInterfaceNumber"))
if mibBuilder.loadTexts: pClassifyRTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPEntry.setDescription('This entry for pClassifyRTPEntry.')
pClassifyRTPInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pClassifyRTPInterfaceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPInterfaceNumber.setDescription('The index of the MIB-II interface that the packet is destined for.')
pClassifyRTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noModification", 1), ("onlyQTag", 2), ("onlyQTOS", 3), ("qTagAndQTOS", 4))).clone('noModification')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPState.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPState.setDescription('This object will enable or disable modification of the TOS precedence field and the 802.1 P/Q tagging. A value of NoModification(1) implies that modification is not allowed. OnlyQTag(2) means that only 802.1 P/Q tagging is allowed. When this object has a value OnlyQTOS(3), modification of only the TOS precedence field is permitted. QTagAndQTOS means that both TOS precedence modification and P/Q tagging is allowed.')
pClassifyRTPTOSPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPTOSPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPTOSPrecedence.setDescription('This value represents one of eight precedence levels, 0 through 7, with 0 being the lowest and 7 the highest. The value will be translated by the device into a three bit binary number for use as the precedence field in the TOS portion of the IP Datagram. This object is valid only if pClassifyRTPState is OnlyQTOS or QTagAndQTOS.')
pClassifyRTPTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPTagPriority.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPTagPriority.setDescription('This value represents one of eight priority levels, 0 through 7, with 0 being the lowest and 7 the highest. The value will be translated by the device into a three bit binary number for use as the user_priority field of the TCI (Tag Control Information) format. This object is only valid if pClassifyRTPState is OnlyQTag or QTagAndQTOS.')
pClassifyRTPTagVID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyRTPTagVID.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyRTPTagVID.setDescription('This value represents a twelve bit VLAN identifier (VID) as specified in the IEEE 802.1Q standard. This object will provide a twelve bit VID in the TCI (Tag Control Information) portion of a tagged frame as specified in the IEEE 802.1Q. This value will be used to classify qualified packets in accordance with the IEEE 802.1Q standard. This object will also be used to reclassify certain packets exiting the port specified in pClassifyRTPInterfaceNumber whose TCI field contains a VID equal to the NULL VLAN ID. This object is valid only if pClassifyRTPState is OnlyQTag or QTagAndQTOS.')
pClassifyUDPTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1), )
if mibBuilder.loadTexts: pClassifyUDPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyUDPTable.setDescription(' A list of UDP destination port numbers, UDP packets whose port numbers appear in this table will be put on a low delay queue, and the preference specified.')
pClassifyUDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1), ).setIndexNames((0, "CT-PRIORITY-CLASSIFY-MIB", "pClassifyUDPPortNumber"))
if mibBuilder.loadTexts: pClassifyUDPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyUDPEntry.setDescription('A list of objects that describe the UDP port numbers that qualify as candidates for low delay queue preference classification.')
pClassifyUDPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyUDPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyUDPPortNumber.setDescription('The UDP destination port number tha qualifies as a candidate for low delay classification.')
pClassifyUDPState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("remove", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyUDPState.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyUDPState.setDescription('A packet with UDP port number equal to pClassifyUDPPortNumber will be put on a low_delay queue if state is Enabled(2).')
pClassifyUDPLowDelayQueuePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 14, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pClassifyUDPLowDelayQueuePreference.setStatus('mandatory')
if mibBuilder.loadTexts: pClassifyUDPLowDelayQueuePreference.setDescription('Preference with which packet with UDP destination port number equal to pClassifyUDPPortNumberis put on the queue. ')
mibBuilder.exportSymbols("CT-PRIORITY-CLASSIFY-MIB", pClassifyRTCPParsing=pClassifyRTCPParsing, pClassifyRTPTOSPrecedence=pClassifyRTPTOSPrecedence, pClassifyUDPTable=pClassifyUDPTable, pClassifyUDPEntry=pClassifyUDPEntry, ctPriorityExtClassifyConfig=ctPriorityExtClassifyConfig, pClassifyUDPPortNumber=pClassifyUDPPortNumber, pClassifyUDPLowDelayQueuePreference=pClassifyUDPLowDelayQueuePreference, pClassifyRTP=pClassifyRTP, pClassifyRTPEntry=pClassifyRTPEntry, pClassifyRTPInterfaceNumber=pClassifyRTPInterfaceNumber, pClassifyRTPState=pClassifyRTPState, pClassifyRTPTagPriority=pClassifyRTPTagPriority, pClassifyRTPTagVID=pClassifyRTPTagVID, pClassifyUDPState=pClassifyUDPState, pClassifyUDP=pClassifyUDP, pClassifyRTPTable=pClassifyRTPTable, pClassifyRTPLowDelayQueuePreference=pClassifyRTPLowDelayQueuePreference)
