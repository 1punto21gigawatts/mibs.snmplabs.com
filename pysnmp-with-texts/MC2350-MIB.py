#
# PySNMP MIB module MC2350-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MC2350-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:10:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hrDeviceIndex, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrDeviceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibIdentifier, TimeTicks, Gauge32, Unsigned32, NotificationType, Counter64, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, Bits, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "TimeTicks", "Gauge32", "Unsigned32", "NotificationType", "Counter64", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "Bits", "IpAddress", "ObjectIdentity")
TextualConvention, PhysAddress, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DateAndTime", "DisplayString")
minolta = MibIdentifier((1, 3, 6, 1, 4, 1, 2590))
mltMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1))
mltDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 2))
mltMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1))
mltSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1))
mltInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2))
mltDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 3))
mltJob = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4))
mltPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1))
mltSysMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5))
mltNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1))
mltNetworkMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5))
mltJobManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1))
class CodedCharSet(TextualConvention, Integer32):
    description = 'A coded character set value that specifies both a set of characters that may be used and an encoding (as one or more octets) that is used to represent the characters in the set. These values are to be used to identify the encoding employed for strings in the MIB where this is not fixed by the MIB. '
    status = 'mandatory'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("other", 1))

mltPrinterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6))
mltPrtMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 1))
mltPrtCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4))
mltPrtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5))
mltPrtFont = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6))
mltPrtPaper = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7))
mltPrtRemotePanel = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10))
mltPrtMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtMibVersion.setDescription(' The standardization version of MIB implemented in a printer. This indicates the version of the Private Printer MIB that is implemented. There are some mib objects that indicate the Mib Version. (mltSysMibVersion, mltPrtMibVersion, mltScnMibVersion, mltNetMibVersion, mltJmMibVersion) But, the each mib version should be same version. Especially, the each major versions must be same. A string specifying Printer MIB Standard specification version. General form is ##.XX. ## is indicating major revision, and XX is minor revision. Decimal point is ASCII-coded period. ')
mltPrtCommandTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1), )
if mibBuilder.loadTexts: mltPrtCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCommandTable.setDescription(' The table for showing the command information of printer relation. This table must be implemented even if no function in this table are supported by a model. ')
mltPrtCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: mltPrtCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCommandEntry.setDescription(" An entry exists in this table for each device entry in the hostmib device table whose type is 'printer'. ")
mltPrtCommandOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("onLine", 1), ("offLine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCommandOnline.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCommandOnline.setDescription(' Indicate printer online or offline. If printer has no online button, this value should be notSupported (0) as read-only. ')
mltPrtCommandJobCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("notCancel", 1), ("jobCancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCommandJobCancel.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCommandJobCancel.setDescription(' Command of cancel job. If printer has not job cancel function, this value should be notSupported (0) as read-only. In normal condition, this value should be notCancel (1). If canceling job, set this object jobCancel (2). ')
mltPrtCommandJobProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("notProceed", 1), ("jobProceed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCommandJobProceed.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCommandJobProceed.setDescription(' Command of proceeds. If printer has not proceed function, this value should be notSupported (0) as read-only. In normal condition, this value should be notProceed (1). If proceeding job, set this object proceed (2). ')
mltPrtPrintPageTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: mltPrtPrintPageTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintPageTable.setDescription(' A table of printable configuration print. If a printer does not support print the test pages from network access, this table needs not to be implemented. ')
mltPrtPrintPageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPrintPageIndex"))
if mibBuilder.loadTexts: mltPrtPrintPageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintPageEntry.setDescription("Information about printer's configuration prints. Entries may exist in the table for each device index whose device type is 'printer'. ")
mltPrtPrintPageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPrintPageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintPageIndex.setDescription(' Index for uniquely distinguishing the page held within a printer. Although the value of index depends on an implementation, ')
mltPrtPrintPageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPrintPageName.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintPageName.setDescription(' The name of the page, which can be printed. The value that should be implemented depends on an implementation of a model and it should be common with a manual etc. ')
mltPrtPrintCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("print", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPrintCommand.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintCommand.setDescription(' Command of print page. In normal condition , this value should be supported (1). If print page, set this object print (2). ')
mltPrtSysConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1), )
if mibBuilder.loadTexts: mltPrtSysConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtSysConfigTable.setDescription(' A table of configurations for printer. This table must be implemented even if no functions in this table are supported. ')
mltPrtSysConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: mltPrtSysConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtSysConfigEntry.setDescription(" An entry exists in this table for each device entry in the hostmib device table whose type is 'printer'. ")
mltPrtJobLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("auto", 0), ("pcl", 1), ("ps", 2), ("gdi", 3), ("linePrinter", 4), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtJobLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtJobLanguage.setDescription(' Configuration printer job language. Only in the case that a printer has a function of setting(changing) this default printer language, this object is implemented as RW. In the other case, this object should be implemented as RO. In case of PCL/PS printer, default value is Auto(0). If necessary, PCL(1)/PS(2) is changeable. In case of printer has only one interpreter (PCL or PS), this object should be pcl(1) or ps (2) as RO. In case of GDI printer, this value is GDI(3) (RO). ')
mltPrtPowerSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPowerSave.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPowerSave.setDescription(" Timer value setting before the power save mode is asserted. Unit is minutes. If '0' is selected, the controller doesn't enter Power Save mode. If this value is -1, printer doesn't support power save mode. If out of spec value is set, Error is returned. ")
mltPrtAutoContinue = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notSupported", 0), ("off", 1), ("ac0Sec", 2), ("ac10Sec", 3), ("ac20Sec", 4), ("ac30Sec", 5), ("ac60Sec", 6), ("ac90Sec", 7), ("ac120Sec", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtAutoContinue.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtAutoContinue.setDescription(' The setting whether printing will automatically recover or not when an Error or Caution occurred. If a device support only the value of 1(off) and 2(ac0Sec), this implementation is allowed. ')
mltPrtPaperTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("off", 1), ("proceedJob", 2), ("cancelJob", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPaperTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPaperTimeOut.setDescription(' Setting which decides whether automatic recover should be proceed or not when an error related to paper occurred. ')
mltPrtPsErrorPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPsErrorPrint.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsErrorPrint.setDescription(' The setting whether the printer prints PostScript Error Page when PostScript Error occurred during job processing. About PS error, since it is the function of a printer controller, all the devices with PS should be implemented If a device has no PostScript interpreter, this value should be always notSupported(0) as RO. ')
mltPrtPrintConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2), )
if mibBuilder.loadTexts: mltPrtPrintConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintConfigTable.setDescription(' A table of configurations for printer. This table must be implemented even if no functions in this table are supported. ')
mltPrtPrintConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: mltPrtPrintConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPrintConfigEntry.setDescription(" An entry exists in this table for each device entry in the hostmib device table whose type is 'printer' ")
mltPrtCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCopies.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCopies.setDescription(' The number of printing copies. If set value is over limit, printer should return error. About device which has no PCL interpreter, This value should be -1, because of no default copies setting. ')
mltPrtPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPaperSize.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPaperSize.setDescription(' Paper size of printing. The value of the mltPaperSizeIndex corresponding to the current paper size. About device which has no PCL interpreter, This value should be -1, because of no default paper size setting. ')
mltPrtPaperSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPaperSource.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPaperSource.setDescription(" Feeders for printing. The value of prtInputIndex corresponding to the default input sub-unit: that is, this object selects the default source of input media. If value is 0, this means 'Auto'. About device which has no PCL interpreter, This value should be -1, because of no default paper source setting. ")
mltPrtFineArt = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 0), ("on", 1), ("offSwitch", 2), ("dark", 3), ("medium", 4), ("light", 5), ("offStep", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtFineArt.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtFineArt.setDescription(' Smooting setting. If printer has no smoothing function, this value should be notSupported(0) and RO. If printer supports only On/Off , this value should be on(1) or offSwitch(2). If printer supports 4 steps, this value should be dark(3), medium(4), light(5) and offStep(6). ')
mltPrtTonerSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtTonerSave.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtTonerSave.setDescription(' Toner saving setting. If printer is not supporting toner save function, this value should be notSupported(0) and RO. If printer is supporting toner save function, this value should be on(1) or off(2) and RW. ')
mltPrtPclFontTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1), )
if mibBuilder.loadTexts: mltPrtPclFontTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPclFontTable.setDescription(' This table shows PCL font information of printer has. Since it is a function peculiar to PCL, it is not necessary to implement this table in the device in which PCL is not installed or PCL font management function is not installed. ')
mltPrtPclFontEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPclFontIndex"))
if mibBuilder.loadTexts: mltPrtPclFontEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPclFontEntry.setDescription(" Information about printer's PCL fonts. Entries may exist in the table for each device index whose device type is 'printer'. ")
mltPrtPclFontIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPclFontIndex.setDescription(' A unique value used to identify this entry. ')
mltPrtPclFontName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontName.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPclFontName.setDescription(' The name of PCL Font. ')
mltPrtPclFontNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPclFontNumber.setDescription(' The number of PCL Font. The number for managing the font, which a printer holds inside. ')
mltPrtPclFontSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("internalRom", 1), ("internalHd", 2), ("downLoadRam", 3), ("downLoadHd", 4), ("downLoadFlashRom", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontSource.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPclFontSource.setDescription(' The information of a place that PCL font exists. ')
mltPrtPsFontTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2), )
if mibBuilder.loadTexts: mltPrtPsFontTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsFontTable.setDescription(' This table shows PostScript font information of printer has. Since it is a function peculiar to PS, it is not necessary to implement this table in the device in which PS is not installed. ')
mltPrtPsFontEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPsFontIndex"))
if mibBuilder.loadTexts: mltPrtPsFontEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsFontEntry.setDescription(" Information about printer's PS fonts. Entries may exist in the table for each device index whose device type is 'printer'. ")
mltPrtPsFontIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsFontIndex.setDescription(' A unique value used to identify this entry. ')
mltPrtPsFontName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontName.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsFontName.setDescription(' The name of PS Font. ')
mltPrtPsFontNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsFontNumber.setDescription(" The number of PS Font. This number is used in order to administrate printer's fonts. If a printer does not manage this number, this value should be implemented same as mltPrtPsFontIndex. ")
mltPrtPsFontSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("internalRom", 1), ("internalHd", 2), ("downLoadRam", 3), ("downLoadHd", 4), ("downLoadFlashRom", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontSource.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPsFontSource.setDescription(' The information of a place that PS font exists ')
mltPrtSymbolSetTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3), )
if mibBuilder.loadTexts: mltPrtSymbolSetTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtSymbolSetTable.setDescription(' This table shows symbol sets a printer has. If no function in this table is supported by a device, this table needs not to be implemented. ')
mltPrtSymbolSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtSymbolSetIndex"))
if mibBuilder.loadTexts: mltPrtSymbolSetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtSymbolSetEntry.setDescription(" Information about printer's symbol sets. Entries may exist in the table for each device index whose device type is 'printer'. ")
mltPrtSymbolSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtSymbolSetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtSymbolSetIndex.setDescription(' A unique value used to identify this entry. ')
mltPrtSymbolSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtSymbolSetName.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtSymbolSetName.setDescription(' The name of SymbolSet (CodedCharSet). ')
mltPrtCharSetID = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtCharSetID.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtCharSetID.setDescription(' The ID of Code CharSet. Refer to the following URL that IANA administrates regarding character code sets: http://www.iana.org/assignments/character-sets ')
mltPrtPaperSizeTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1), )
if mibBuilder.loadTexts: mltPrtPaperSizeTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPaperSizeTable.setDescription(" A table of the printer selectable paper sizes. Even if a printer can not recognize the supportable paper, one object ('unknown' or 'other') must be loaded at least. ")
mltPrtPaperSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPaperSizeIndex"))
if mibBuilder.loadTexts: mltPrtPaperSizeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltPrtPaperSizeEntry.setDescription(" An entry exists in this table for each device entry in the hostmib device table whose type is 'printer' ")
mltPaperSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPaperSizeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltPaperSizeIndex.setDescription(' A unique value used to identify this entry. ')
mltPaperSizeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPaperSizeName.setStatus('mandatory')
if mibBuilder.loadTexts: mltPaperSizeName.setDescription(' The name of paper size. e.g., letter, legal, A4, B5 etc. ')
mltPaperFeedDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("sef", 1), ("lef", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPaperFeedDir.setStatus('mandatory')
if mibBuilder.loadTexts: mltPaperFeedDir.setDescription(' This value shows paper feeding orientation. ')
mltPrtRemotePanelButtonTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1), )
if mibBuilder.loadTexts: mltPrtRemotePanelButtonTable.setStatus('optional')
if mibBuilder.loadTexts: mltPrtRemotePanelButtonTable.setDescription(" A table of printer's remote operational panel button. ")
mltPrtRemotePanelButtonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPanelButtonIndex"))
if mibBuilder.loadTexts: mltPrtRemotePanelButtonEntry.setStatus('optional')
if mibBuilder.loadTexts: mltPrtRemotePanelButtonEntry.setDescription(" An entry exists in this table for each device entry in the hostmib device table whose type is `printer' ")
mltPrtPanelButtonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPanelButtonIndex.setStatus('optional')
if mibBuilder.loadTexts: mltPrtPanelButtonIndex.setDescription(' A unique value used by the operational panel button to identify table ')
mltPrtPanelButtonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPanelButtonName.setStatus('optional')
if mibBuilder.loadTexts: mltPrtPanelButtonName.setDescription(' The name of panel button. ')
mltPrtPanelButtonPush = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noAction", 0), ("push", 1), ("longPush", 2), ("shiftPush", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPanelButtonPush.setStatus('optional')
if mibBuilder.loadTexts: mltPrtPanelButtonPush.setDescription(' This value indicates panel button status, and make pushing button. noAction (0) -- indicate steady. push (1) -- To set 1 means push panel button. longPush (2) -- To set 2 means push button long time. shiftPush (3) -- To set 3 means push panel bottom and shift button same time. ')
mltPrtPanelButtonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPanelButtonDescr.setStatus('optional')
if mibBuilder.loadTexts: mltPrtPanelButtonDescr.setDescription(' An explanation of panel button function etc. ')
mltSysMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysMibVersion.setDescription(' The version information of Standard MIB specification. This indicates the version of the Private System MIB which is implemented. General form is AA.BC. AA is indicating major revision, and B and C is minor revision. Decimal point is ASCII-coded period. ')
mltSysGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 2))
mltSysContact = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3))
mltSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5))
mltSysComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6))
mltSysCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7))
mltSysPriorityDevice = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysPriorityDevice.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysPriorityDevice.setDescription('This object shows the function which operates with highest priority in a system. When it can set up by user choice etc., it should be RW. If setup change is impossible from MIB, the implementation of RO is acceptable. There is no function with highest priority or no preference order of function, implement RO as 0. ')
mltSysCurrentDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 2, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysCurrentDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysCurrentDateTime.setDescription('Time, which is set in the system and specifies by DateAndTime If not having a clock function, implement 0x00 in all Bytes. ')
mltSysContactSiteName = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysContactSiteName.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysContactSiteName.setDescription("The name of a support contact for system. If device cannot support this object, device should be implement '-' as read-only ")
mltSysContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysContactInfo.setDescription("Explanation of a support contact for system. Default value shall be a blank, and a service person or a user shall input it. If device cannot support this object, device should be implement '-' as read-only ")
mltSysProductHelpURL = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysProductHelpURL.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysProductHelpURL.setDescription("URL of the support contact for system. If device cannot support this object, device should be implement '-' as read-only ")
mltSysCorpURL = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysCorpURL.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysCorpURL.setDescription("URL of the company which provides a system. If device cannot support this object, device should be implement '-' as read-only ")
mltSysSuppliesInfo = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysSuppliesInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSuppliesInfo.setDescription("A telephone number or E-mail addresses for the supplies and accessories, etc. In the support contact in which a system has. Default shall be a blank, and a service person or a user shall input it. If device cannot support this object, device should be implement '-' as read-only ")
mltSysVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1), )
if mibBuilder.loadTexts: mltSysVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysVersionTable.setDescription('The table for showing ROM and F/W version in which a system has. ')
mltSysVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysVersionIndex"))
if mibBuilder.loadTexts: mltSysVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysVersionEntry.setDescription('The version information of FW or ROM. ')
mltSysVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVersionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysVersionIndex.setDescription('Index for uniquely showing the version information in which a system has. The number and the order of index depends on an implementation of a model. Implement the maximum number of index of ROM and F/W which is possible to detect/display, regardless of the availability of installation of Option etc. The number of indexes to hold shall be always fixed regardless of the option installation state. ')
mltSysVerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVerName.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysVerName.setDescription("The name of the function which shows a version. For example, 'MSC/Panel ROM Version', 'Printer ROM Version', etc. ")
mltSysVersionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVersionCode.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysVersionCode.setDescription("The version of ROM and F/W. It shall be written by 15 or less characters. '[Product Code(4)]-[Block Code(2)][Stage Code(1)] [Specification Code(1)]-[Change Management Code(2)] -[Shipment Destination Code(2)]' supports. For corresponding to the other written methods, it was made into the maximum 31 characters, on the definition. When the value cannot acquire although index is set by Option etc., display '-' (hyphen). ")
mltSysVerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVerDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysVerDescr.setDescription('Explanation of a version. As for the contents to indicate, depends on an implementation of a model. However, since not supporting this object is not acceptable, implement Null (Zero-Length) at least. ')
mltSysCompConfigID = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysCompConfigID.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysCompConfigID.setDescription('Shows the ID by the combination of the structure of Device. A project should prepare ID which is worth for the number of combination, such as Option. If system has no option or cannot detect option installed, this value should be always 0. ')
mltSysInputTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2), )
if mibBuilder.loadTexts: mltSysInputTrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTrayTable.setDescription('The table for showing the information of Input tray that is installed in a system. As a principle, the un-acquirable information shall be displayed if there is only prtInputTable, and this table is premised on that PrinterMIB is being implemented. It shall display about InputTray which is installed like prtInputTable. If a system does not have a printer engine (has no input tray and no PrinterMIB), this table does not need to implement. ')
mltSysInputTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysInputTrayIndex"))
if mibBuilder.loadTexts: mltSysInputTrayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTrayEntry.setDescription('The information of paper input tray. ')
mltSysInputTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysInputTrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTrayIndex.setDescription('Index for showing InputTray in a system. Index depends on the state of the implementation of a model, and shall be taken the amount which is worth for the number of InputTray in the order from 1. ')
mltSysInputTrayRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysInputTrayRefIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTrayRefIndex.setDescription('The value of prtInputIndex of a tray which mltSysInputTrayIndex shows. ')
mltSysInputTrayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysInputTrayName.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTrayName.setDescription('The name of InputTray. Default value depends on a model. In principle, use the name unified by DriverUI. Set of the character string up to 15 characters shall be possible. implementation of RO is also accepted when there are capacity restrictions of NVRAM. Since this item is the value used when a user does a remote management, it is not necessary to link it with a setup of a printer engine. SNMP agent holds value, and should just provide the convenience to the user who remote accesses. ')
mltSysInputTrayCapacitySence = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noSensor", 0), ("emptyOnly", 1), ("nearEmpty", 2), ("linearSense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysInputTrayCapacitySence.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTrayCapacitySence.setDescription('This item shows the detection method of paper residual quantity, and is used for distinction of the value displayed in prtInputCurrentLevel. The details of a residual quantity display are indicated to prtInputCurrentLevel. ')
mltSysInputTraySpecialPaper = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10, 11, 12, 14, 16, 20, 22, 23, 24, 25, 26, 27, 30, 36, 40, 41, 42, 44, 46, 48))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("plainPaper", 10), ("plainPaper-NotFor2Sided", 11), ("plainPaper-Recycled", 12), ("plainPaper-Exclusive", 14), ("plainPaper-Color", 16), ("thick", 20), ("thick1", 22), ("thick1-2side", 23), ("thick2", 24), ("thick2-2side", 25), ("thick3", 26), ("thick3-2side", 27), ("ohp", 30), ("thin", 36), ("envelope", 40), ("envelope-2side", 41), ("label", 42), ("postCard", 44), ("letterHead", 46), ("tab", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysInputTraySpecialPaper.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysInputTraySpecialPaper.setDescription('Shows the media type of InputTray. If this value is RW and when a setup is changed by MIB, it shall be reflected in a setup of a printer engine. In a unavoidable case, the access way may be RO. ')
mltSysInputTrayPaperAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 0), ("s0-normalPaper", 1), ("s1-recyclePaper", 2), ("s2-specialPaper", 3), ("s3-reusePaper", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysInputTrayPaperAttribute.setStatus('optional')
if mibBuilder.loadTexts: mltSysInputTrayPaperAttribute.setDescription('Shows the paper attribute of InputTray. If this value is RW and when a setup is changed by MIB, it shall be reflected in a setup of a printer engine. In a unavoidable case, the access way may be RO. ')
mltSysOutputTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3), )
if mibBuilder.loadTexts: mltSysOutputTrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayTable.setDescription('The table for showing the information of OutputTray relation in a system. Index shall be mltSysOutputTrayIndex. This table is for displaying the tray information of OutputOption (Finisher), and shall not include the function information of Finisher. If a system does not have a printer engine (has no output tray and no PrinterMIB), this table may not be implemented. ')
mltSysOutputTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysOutputTrayIndex"))
if mibBuilder.loadTexts: mltSysOutputTrayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayEntry.setDescription('The information of paper output tray. ')
mltSysOutputTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayIndex.setDescription("Index for showing OutputTray in a system. Index depends on the implementation of a model, and shall be taken the amount which is worth for the number of Output in the order from 1. In principle, when the top tray is set as 1, index shall be increased in progress of going to the lower part. As for the middle processing tray that does not become papers' final output destination, is not treated as OutputTray. ")
mltSysOutputTrayRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayRefIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayRefIndex.setDescription('Value of prtOutputIndex of the tray which mltSysOutputTrayIndex shows. ')
mltSysOutputTrayDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayDefaultName.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayDefaultName.setDescription('The name of OutputTray. Unify with the notation of a manual or a driver. ')
mltSysOutputTrayNickName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysOutputTrayNickName.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayNickName.setDescription("The name of OutputTray in which a user can set up. In MailBin, use it in order to indicate a user's name, etc. which each Tray set up. The recommendation default is the same as mltSysOutputTrayDefaultName. Set of the character string up to 15 characters shall be possible, and neither retrenchment of the number of characters which can be written in, nor implementation of RO shall be accepted. However, the implementation of RO is accepted only to the thing without MailBin as OutputOption. Moreover, being reflected in the display screen of a printer driver is desirable. Since this item is the value used when a user does a remote management, it is not necessary to link it with a setup of a printer engine. SNMP agent holds value, and should just provide the convenience to the user who remote accesses. If device cannot support this function, this object should be '-' as ReadOnly. ")
mltSysOutputTrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("standardBin", 1), ("sortBin", 3), ("mailBox", 4), ("fixedMailBin", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayType.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysOutputTrayType.setDescription('Shows the type of tray in OutputTray. This is an item for judging whether it is MailBin, and it is used in order to judge whether the writing of NickName should be possible. ')
mltSysCounterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1))
mltSysSystemCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2))
mltSysSupportedCounterType = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSupportedCounterType.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSupportedCounterType.setDescription('Shows the type of a counter installed in a system. The counter which a system has can specify by referring to this. Displays the counter to support with Bitmap and shows the supporting counter by the total. Bit Value CounterType --- ----- --------------- 0 1 GeneralCounter 1 2 PrintFunctionCounter 2 4 SendFunctionCounter 3 8 PapersSizeCounter 4 16 DivCounter 5 32 TonerLifeCounter It becomes 63 when implementing all the counters. ')
mltSysDuplexCountMode = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("singleCount", 1), ("doubleCount", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysDuplexCountMode.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysDuplexCountMode.setDescription("Sets up whether Duplex printing is counted two times to TotalCounter at the time. This setup is reflected to all TotalCounters. This object may be implemented with RO access. If a system doesn't have this setting (e.g. printer), the value of the static count mode (1 or 2) must be implemented. Basically this value must not be '0'. This is also applied to mtSysLargeSizeCountMode and mltSysLargeSizeMode same. ")
mltSysLargeSizeCountMode = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("singleCount", 1), ("doubleCount", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysLargeSizeCountMode.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysLargeSizeCountMode.setDescription('Sets up whether LargeSize is counted two times to TotalCounter at the time. This setup is reflected to all TotalCounters. This object may be implemented with RO access. This setting is the item of a service choice. A setup of a service choice is reflected to this object. Also enable operation from PageScope. Management of the access rights supports by PageScope side. ')
mltSysLargeSizeType = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noLargeSize", 0), ("typeA", 1), ("typeB", 2), ("typeC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysLargeSizeType.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysLargeSizeType.setDescription('Sets up the type of paper counted as LargeSize. noLargeSize(0): indicates that the count of LargeSize is not performed or not detect large size type. typeA(1): For US is 11x17, For EU is A3, For Japan is A3. typeB(2): For US is 11x17, For EU is A3/B4, For Japan is A3/B4. typeC(3): For US is 11x17/11x14/8.5x14, For EU is A3/B4, For Japan A3/B4. This object may be implemented with RO access. The choice item of EP-NET. Also enable operation from PageScope. ')
mltSysColorCountSupportType = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysColorCountSupportType.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysColorCountSupportType.setDescription('It is shown what kind of counter by the color is supported. The color counter which a device supports can be specified by referring to this. Displays the type of counter to support with Bitmap and shows the supporting counter by the total. The type counter that is shown in here shall be held by the color-related counter. Bit Value CounterType --- ----- ----------------- 0 1 reserved 1 2 bw --The monochrome counter --in a color machine 2 4 fourColor (4c) --Full color -- (All of C, M, Y, and K are used) 3 8 threeColor (3c) --Monochrome color --(monochrome is taken out using -- three colors of C, M, and Y) 4 16 cmy --CMY: (using any 1 color of C/M/Y) 5 32 rgb --RGB: (using three colors of CMY) 6 64 monoColor --The total of 3C, CMY, and RGB 7 128 paperPath --PaperPath counter ')
mltSysGeneralCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1))
mltSysTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTotalCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysTotalCount.setDescription('The total print count of a system. Displays the total of Copy, Print, and Receiving Job. About the count method of Duplex and LargeSize, it depends on a setup. A count shall be an output count. About a color machine, it shall be the total of all color classifications. ')
mltSysLargeSizeCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysLargeSizeCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysLargeSizeCount.setDescription('The total print count of LargeSize paper. About the type of LargeSize, it depends on a setup of mltSysLargeSizeType. When the setup of mltSysLargeSizeType is noCount(0), this counter always shall be -1. In addition, also in the system without A4 machine, etc., this counter should be -1. ')
mltSysDuplexCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysDuplexCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysDuplexCount.setDescription('The total print count of Duplex (back). In the system without Duplex mechanism, it should be -1. ')
mltSysLargeDuplexCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysLargeDuplexCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysLargeDuplexCount.setDescription('The total print count of LargeSize, and also Duplex (back). About the type of LargeSize, it depends on a setup of mltSysLargeSizeType. When the setup of mltSysLargeSizeType is noCount(0), this counter always shall be -1. In addition, in the system of A4 machine or in the system without Duplex, this counter always should be -1. ')
mltSysSendTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSendTotalCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSendTotalCount.setDescription('Total count scaned as a transmitting function in the system. It shall be the total of mltSysSendScanCount. In the device without Scan function, it always shall be -1. ')
mltSysTotalJamCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTotalJamCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysTotalJamCount.setDescription('The number of times of Jam occurred in the system. It shall be the total of all Jam counters. (including ADF jams). ')
mltSysTotalTroubleCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTotalTroubleCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysTotalTroubleCount.setDescription('The number of times of Trouble (FatalError) occurred in the system. It shall be the total of all Trouble counters. ')
mltSysPrintFunctionCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2), )
if mibBuilder.loadTexts: mltSysPrintFunctionCounterTable.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionCounterTable.setDescription('The table for showing the counter by the color and function. In the monochrome machine of a single function, it is not necessary to implement. ')
mltSysPrintFunctionCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysPrintFunctionColorIndex"), (0, "MC2350-MIB", "mltSysPrintFunctionIndex"))
if mibBuilder.loadTexts: mltSysPrintFunctionCounterEntry.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionCounterEntry.setDescription('The counters of color and print functions. ')
mltSysPrintFunctionColorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionColorIndex.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionColorIndex.setDescription('Index for showing the color in the counter by color/function. By the color, index shall be attached in the order of the following. No. Function -------------------- 1 BW 2 4C 3 3C 4 CMY 5 RGB 6 MonoColor ')
mltSysPrintFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionIndex.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionIndex.setDescription('Index for showing the function in the counter by color/function. By the function, index shall be attached in the order of the following. No. Function -------------------- 1 copy 2 printer 3 received Job 4 fax received Job 5 reportPrint Although classifying into printer/receive Job/fax receive job as a printing function is recommended, the implementation of multiple counting as a printer function is also accepted. ')
mltSysPrintFunctionColorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bw", 1), ("fourColor", 2), ("threeColor", 3), ("cmy", 4), ("rgb", 5), ("monoColor", 6), ("paperPath", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionColorType.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionColorType.setDescription('Shows the color mode in the counter by color/function. ')
mltSysPrintFunctionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("copyFunction", 1), ("printFunction", 2), ("receiveFunction", 3), ("faxReceiveFunction", 4), ("reportPrint", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionType.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionType.setDescription('Shows the function in the counter by color/function. Although classifying into printer/receive Job/fax receive job as a printing function is recommended, the implementation of multiple counting as a printer function is also accepted. ')
mltSysPrintFunctionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionTotalCount.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionTotalCount.setDescription('The total print count in a specified function. About the count method, complies with GeneralCounter ')
mltSysPrintFunctionDuplexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionDuplexCount.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionDuplexCount.setDescription('The print count of Duplex (back) in a specified function. The print count of the LargeSize paper in a specified function. About the count method, complies with GeneralCounter. ')
mltSysPrintFunctionLargeSizeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionLargeSizeCount.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionLargeSizeCount.setDescription('The print count of the LargeSize paper in a specified function. About the count method, complies with GeneralCounter. ')
mltSysPrintFunctionLargeDuplexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionLargeDuplexCount.setStatus('optional')
if mibBuilder.loadTexts: mltSysPrintFunctionLargeDuplexCount.setDescription('The print count of LargeSize and Duplex (back) in a specified function. About the count method, complies with GeneralCounter. ')
mltSysSizeCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4), )
if mibBuilder.loadTexts: mltSysSizeCounterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeCounterTable.setDescription('The table of the counter by the paper sizes (types). The model which supports plural paper sizes has to implement. Regardless of shipment destination, having a counter to all the paper sizes that can be printed is recommended. By implementation, implementing different size counter by shipment destination is also accepted. It shall also have index by the functions so that it can correspond to the counter by sizes by the functions. ')
mltSysSizeCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysSizeFunctionIndex"), (0, "MC2350-MIB", "mltSysSizeTypeIndex"))
if mibBuilder.loadTexts: mltSysSizeCounterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeCounterEntry.setDescription('The information of paper size counters. ')
mltSysSizeFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeFunctionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeFunctionIndex.setDescription('Index for showing the function which becomes the count object in the counter by paper sizes. Although Index shall be attached in the order of the following by the function, having Index by fixation shall not require. No. Function -------------------- 1 Total ')
mltSysSizeTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeTypeIndex.setDescription('Index for showing the paper which becomes the count object in the counter by paper sizes. Only the type of corresponding paper shall be taken in the order from 1. Using fixed index for every paper does not require. ')
mltSysSizeFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("total", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeFunction.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeFunction.setDescription('Shows the function which becomes the count object in the counter by paper size. ')
mltSysSizeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 83, 84, 93, 100, 101, 102, 103, 104, 106, 114, 115, 116, 117, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 222, 223, 224, 225, 226, 227, 230, 236, 240, 241, 242, 244, 246, 248))).clone(namedValues=NamedValues(("otherPaperSize", 0), ("unknownPaperSize", 1), ("a0", 11), ("a1", 12), ("a2", 13), ("a3", 14), ("a4", 15), ("a5", 16), ("a6", 17), ("b0", 21), ("b1", 22), ("b2", 23), ("b3", 24), ("b4", 25), ("b5", 26), ("b6", 27), ("us12x14", 30), ("ledger", 31), ("us11x15", 32), ("us11x14", 33), ("comp", 34), ("us10x14", 35), ("us9-1by4x14", 36), ("legal", 37), ("us8-1by4x11-3by4", 38), ("letter", 39), ("govermentLetter", 40), ("quarto", 41), ("executive", 42), ("statement", 43), ("fls", 50), ("fls0", 51), ("fls1", 52), ("fls2", 53), ("fls3", 54), ("hagaki", 61), ("oufuku-Hagaki", 62), ("envelopeB5", 63), ("envelopeCom10", 64), ("envelopeC5", 65), ("envelopeDL", 66), ("envelopeMonarch", 67), ("envelopeC6", 68), ("youkei-0Gou", 70), ("youkei-4Gou", 71), ("youkei-6Gou", 72), ("choukei-3Gou", 83), ("choukei-4Gou", 84), ("kakugata-3Gou", 93), ("special0", 100), ("special1", 101), ("special2", 102), ("special3", 103), ("special4", 104), ("special5", 106), ("a3W", 114), ("a4W", 115), ("a5W", 116), ("a6W", 117), ("otherPaperAttribute", 199), ("unknownPaperAttribute", 200), ("plain", 201), ("exclusive", 202), ("notFor2Sided", 203), ("specialPaper", 204), ("cover", 205), ("inserter", 206), ("reuse", 207), ("otherMediaType", 208), ("unknownMediaType", 209), ("plainPaper", 210), ("plainPaper-2side", 211), ("plainPaper-Recycled", 212), ("plainPaper-Exclusive", 214), ("plainPaper-Color", 216), ("thick1", 222), ("thick1-2side", 223), ("thick2", 224), ("thick2-2side", 225), ("thick3", 226), ("thick3-2side", 227), ("ohp", 230), ("thin", 236), ("envelope", 240), ("envelope-2side", 241), ("label", 242), ("postCard", 244), ("letterHead", 246), ("tab", 248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeType.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeType.setDescription('Shows the paper which becomes the count object in the counter by paper sizes. ')
mltSysSizeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltSysSizeCount.setDescription('The number of print of the specified function and specified size, media type, or attribute. ')
mltSysTonerLifeCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5), )
if mibBuilder.loadTexts: mltSysTonerLifeCounterTable.setStatus('optional')
if mibBuilder.loadTexts: mltSysTonerLifeCounterTable.setDescription('The table of toner life counter. ')
mltSysTonerLifeCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysTonerTypeIndex"))
if mibBuilder.loadTexts: mltSysTonerLifeCounterEntry.setStatus('optional')
if mibBuilder.loadTexts: mltSysTonerLifeCounterEntry.setDescription('The information of toner life counters. ')
mltSysTonerTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTonerTypeIndex.setStatus('optional')
if mibBuilder.loadTexts: mltSysTonerTypeIndex.setDescription('Index for Toner used as the count object in TonerLife counter being shown. ')
mltSysTonerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("cyan", 1), ("magenta", 2), ("yellow", 3), ("black", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTonerType.setStatus('optional')
if mibBuilder.loadTexts: mltSysTonerType.setDescription('Toner used as the count object in TonerLife counter is shown. ')
mltTonerTypeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltTonerTypeCount.setStatus('optional')
if mibBuilder.loadTexts: mltTonerTypeCount.setDescription('TonerLife count. This is used for calculation of Coverage, by the amount of Toner consumption, etc. by counting Dot number used for every Toner. 1unit is 2M Dots. ')
mltNetMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetMibVersion.setDescription(' The standardization version of MIB implemented in Network. This indicates the version of the Private Network MIB. General form is AA.BC. AA is indicating major revision, and B and C is minor revision. Decimal point is ASCII-coded period. ')
mltNetGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2))
mltNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3))
mltNetCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5))
mltNetSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6))
mltNetTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7))
mltNetNetWare = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8))
mltNetAppleTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9))
mltNetSmb = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10))
mltNetGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: mltNetGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetGeneralTable.setDescription(' Table for showing the general information of Network relation. ')
mltNetGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetGeneralIndex"))
if mibBuilder.loadTexts: mltNetGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetGeneralEntry.setDescription(' General information of network interface. ')
mltNetGeneralIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetGeneralIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetGeneralIndex.setDescription(' Index for showing NetworkInterface installed to a device. Basically, it shall take the same value with ifIndex. ')
mltNetFirmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFirmVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFirmVersion.setDescription(" Shows the FW version of NetworkInterface. Write it as ##.xx. ## shall be a major version and xx shall be a minor version. If there is no original FW of NetworkInterface, implement character strings of '-' (hyphen). ")
mltNetHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHardwareAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHardwareAddress.setDescription(' MAC address of NetworkInterface. (Hardware address) In the device of our company, it was made into RW since MAC address needs to be written at the time of shipment. Implement as RO when the writing of MAC address is unnecessary. Moreover, in a management tool side, be sure to handle it as RO. ')
mltNetSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSerialNumber.setDescription(" The serial number of NetworkInterface. Implement '-' (hyphen) in the device without a serial number. In the device of our company, it was made into RW since serial number may need to be written at the time of shipment. Implement as RO when the writing of serial number is unnecessary. Moreover, in a management tool side, be sure to handle it as RO. ")
mltNetSupportedConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSupportedConnector.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSupportedConnector.setDescription(' An integer bitmap value specifying network connector information. Each bit in the integer is defined as follows. bit Value Connector --- ----- --------- 0 1 Reserved 1 2 Ethernet AUI -- 10Base5 2 4 Ethernet BNC -- 10Base2 3 8 Ethernet RJ45 -- 10/100BaseT 4 16 Ethernet Fiber -- 10/100BaseF 5 32 Reserved 6 64 Reserved 7 128 TokenRing STP(DB-15) 8 256 TokenRing UTP(RJ-45) 9 512 TokenRing Fiber 10 1024 Reserved 11 2048 wirelessA -- 802.11a 12 4096 wirelessB -- 802.11b 13 8132 blueTooth 14 16364 ieee1394 -- IP over IEEE1394 ')
mltNetCurrentConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notWorking", 0), ("etherAUI", 1), ("etherBNC", 2), ("etherRJ", 3), ("etherFiber", 4), ("tokenSTP", 7), ("tokenUTP", 8), ("tokenFiber", 9), ("wirelessA", 11), ("wirelessB", 12), ("blueTooth", 13), ("ieee1394", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCurrentConnector.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCurrentConnector.setDescription(' Shows the connector that is working on NetworkInterface. ')
mltNetSpeedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 0), ("autoDetectEther", 1), ("et10MbpsHalfDuplex", 2), ("et10MbpsFullDuplex", 3), ("et100MbpsHalfDuplex", 4), ("et100MbpsFullDuplex", 5), ("etGbpsHalfDuplex", 6), ("etGbpsFullDuplex", 7), ("autoDetectToken", 10), ("tr4Mbps", 11), ("tr16Mbps", 12), ("tr32Mbps", 13), ("autoDetectWireless", 20), ("wireless1Mbps", 21), ("wireless2Mbps", 22), ("wireless5-5Mbps", 23), ("wireless11Mbps", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSpeedConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSpeedConfig.setDescription(' Sets up the speed of NetworkInterface. Refer to ifSpeed for checking the present speed of operation. If this setting can not be set from Network access, a device should implement a current set value with RO access. ')
mltNetInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 100, 101, 102, 103, 104, 201, 202))).clone(namedValues=NamedValues(("other", 0), ("ieee1284", 1), ("ieee1394", 2), ("usb", 3), ("dual1284", 10), ("dpo", 11), ("psio", 12), ("onBoardDPO", 100), ("noPhysicalNIC", 101), ("onBoard", 102), ("onBoardOneChip", 103), ("onBoardPSIO", 104), ("pciNonIntelligent", 201), ("pciIntelligent", 202)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetInterfaceType.setDescription(' Shows the type of NetworkInterface. ')
mltNetIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetIfDescr.setDescription(" Explanation of NetworkInterface. Shows the type of port and the version information. The name to indicate is determined at Project side and implementation of NullString is not accepted. Even if a device have a no description about this, '-' need to be implemented. ")
mltNetProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: mltNetProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolTable.setDescription(' The table for showing the protocol information which NetworkInterface supports. ')
mltNetProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetProtocolIfIndex"), (0, "MC2350-MIB", "mltNetProtocolIndex"))
if mibBuilder.loadTexts: mltNetProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolEntry.setDescription(' The information of protocol. ')
mltNetProtocolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolIfIndex.setDescription(' Index for showing NetworkInterface that a system has. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolIndex.setDescription(' Index for uniquely showing the protocol which a system supports. Index shall be assigned in the following order is recommended. No. Protocol -------------------- 1 TCP/IP 2 NetWare(IPX/SPX) 3 AppleTalk 4 SMB ')
mltNetProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tcp-ip", 1), ("netWare", 2), ("appleTalk", 3), ("smb", 4), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolType.setDescription(' Shows the type of supporting protocol. ')
mltNetProtocolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolDescr.setDescription(" Description that shows a protocol. Although the value to indicate shall depend on an implementation, the general protocol name, such as 'TCP/IP', 'NetWare', etc., shall be indicated in principle. Implementation of Null is not accepted. ")
mltNetProtocolVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolVer.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolVer.setDescription(" The version of the implemented protocol stack. Implement '-' (hyphen) when there is no version notation. Implementation of Null is not accepted. ")
mltNetProtocolOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetProtocolOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetProtocolOnOff.setDescription(' Sets up a states display of On and Off of the function of each protocol. If this setting can not be set from Network access, a device should implement a current set value with RO access. ')
mltNetCommandTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: mltNetCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandTable.setDescription(' The table for showing the command information which NetworkInterface supports. ')
mltNetCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetCommandIfIndex"))
if mibBuilder.loadTexts: mltNetCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandEntry.setDescription(' The information of command for network interface. ')
mltNetCommandIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandIfIndex.setDescription(' Index for uniquely showing the destination of command. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetCommandReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("reset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandReset.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandReset.setDescription(' The command that performs independent reset of NetworkInterface. When reset(2) is set, an agent side shall surely return Reply. Implementation that performs Reset immediately without returning Reply is not accepted. Return Reply of an error, when Reset command is invalid. After reset(2) is set, about the timing which is actually performing Reset depends on an implementation, and it shall not be defined in MIB. ')
mltNetCommandDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetCommandDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandDefault.setDescription(' The command for returning a setup about NetworkInterface to FactoryDefault. When resetToDefault(2) is set, an agent side shall surely return Reply. In principle, when resetToDefault(2) is set, about the timing in which the setup returns to default depends on an implementation and it does not define in MIB. ')
mltNetCommandPrintNicConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12))).clone(namedValues=NamedValues(("notSupported", 10), ("supported", 11), ("printing", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandPrintNicConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandPrintNicConfig.setDescription(' The command for making it perform the output of ConfigPage which Network Interface has at the time of normal operation. Independent ConfigPage of two or more kinds of Network is not considered. ')
mltNetCommandStartupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12))).clone(namedValues=NamedValues(("notSupported", 10), ("supported", 11), ("printStartUp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandStartupConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandStartupConfig.setDescription(' The command that sets up the availability of the output of ConfigPage of NetworkInterface at the time of starting. Independent StartupPage of two or more kinds of Network is not considered. ')
mltNetCommandDownLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("notDownLoad", 1), ("downLoading", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandDownLoad.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetCommandDownLoad.setDescription(' The command that sets up the mode that updates FW of NetworkInterface. Since this setup needs to operate with Admin authority, do not perform both display and writing at the management tool side. ')
mltNetSnmpCommTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: mltNetSnmpCommTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpCommTable.setDescription(' The table for showing the information of Community of SNMP which a system has. In addition, Community name shall be the common to the whole system on the premise, and shall not have independent Community for every NetworkInterface. In having Community independently by Intelligent NIC etc., it shall have NetworkMIB independently to each and is not managed by unified agent. ')
mltNetSnmpCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSnmpCommIndex"))
if mibBuilder.loadTexts: mltNetSnmpCommEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpCommEntry.setDescription(' ')
mltNetSnmpCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSnmpCommIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpCommIndex.setDescription(' Index for identifying each SNMP community. Although about Community number to support, Community name, and each access rights are dependent on an implementation, having the following three Communities is recommended. public (RO) private (RW) admin (RW) It shall be indispensable at least to have public (RW) or to have the two of public (RO) and private (RW). ')
mltNetSnmpCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpCommName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpCommName.setDescription(" Community name of SNMP. Having the above-mentioned name as default is recommended. This item does not accept the implementation of RO. Community name has to be changeable. But if Community name can not be changeable, 'public' or 'private' is recommended to be implemented as Community name with RO access. ")
mltNetSnmpCommAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("readOnly", 1), ("writeOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpCommAccessRight.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpCommAccessRight.setDescription(' Shows the access rights of SNMP community. If this setting can not be set from Network access, a device should implement a current set value with RO access. ')
mltNetSnmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: mltNetSnmpTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapTable.setDescription(' The table for showing the information of destination of Trap of SNMP. When it does not have Trap function of SNMP, this Table does not need to implement. ')
mltNetSnmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSnmpTrapIfIndex"), (0, "MC2350-MIB", "mltNetSnmpTrapIndex"))
if mibBuilder.loadTexts: mltNetSnmpTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapEntry.setDescription(' ')
mltNetSnmpTrapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSnmpTrapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapIfIndex.setDescription(' The index for uniquely showing the NetworkInterface which becomes the sender of Trap. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSnmpTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSnmpTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapIndex.setDescription(' The index for uniquely showing the destination of Trap. In Default, it shall have at least one TrapAddress in a Table. ')
mltNetSnmpTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapCommunity.setDescription(' Community name at the time of transmitting Trap. In Default, it shall have public. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetSnmpTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapIpAddress.setDescription(' IP address of Trap destination. It shall be 255.255.255.255 (BroadCast) in Default. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetSnmpTrapIpxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapIpxAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapIpxAddress.setDescription(" IPX address of the destination of Trap. It shall be 'FFFFFFFF:FFFFFFFFFFFFFFFF' in Default. When it does not have Trap transmitting function in IPX, the character string of '-' (hyphen) shall be displayed. If this setting can not be set from Network access, a device should implement this value with RO access. ")
mltNetSnmpTrapOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSnmpTrapOnOff.setDescription(' On/Off of transmission of Trap is controlled. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1))
mltNetLpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2))
mltNetFtpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6))
mltNetHttpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8))
mltNetSmtpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13))
mltNetIpp = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14))
mltNetSlp = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17))
mltNetTcpipGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1), )
if mibBuilder.loadTexts: mltNetTcpipGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipGeneralTable.setDescription(' Table with the basic information of TCP/IP relation which NetworkInterface has. ')
mltNetTcpipGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetTcpipIfIndex"))
if mibBuilder.loadTexts: mltNetTcpipGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipGeneralEntry.setDescription(' ')
mltNetTcpipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipIfIndex.setDescription(' Index for uniquely showing NetworkInterface which IP address is set up. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetTcpipDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDefault.setDescription(' The command that returns all setup about TCP/IP to FactoryDefault. When resetToDefault(2) is set, an agent side shall surely return Reply. In principle, when resetToDefault(2) is set, about the timing in which the setup returns to default depends on an implementation and it does not define in MIB. ')
mltNetTcpipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipAddress.setDescription(' IP address of NetworkInterface. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipSubnet.setDescription(' Subnet mask of NetworkInterface. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipGateway.setDescription(' DefaultGateway of NetworkInterface. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipUseBootProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("neverUse", 0), ("useWhenNoAddress", 1), ("useEveryTime", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipUseBootProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipUseBootProtocol.setDescription(' Specifies the IP address acquisition method of NetworkInterface. The value taken by default depends on the implementation of a model. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipBootProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipBootProtocolEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipBootProtocolEnable.setDescription(' Bitmap for specifying BootProtocol used in order to determine the IP address of NetworkInterface. The value that should have by Default depends on the implementation of a model. An integer bitmap value specifying bootProtocols. Each bit in the integer is defined as follows. bit Value Type --- ----- --------- 0 1 Arp & Ping 1 2 RARP 2 4 BootP 3 8 DHCP 4 16 AutoIP If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipAddressServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipAddressServer.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipAddressServer.setDescription(" IP address of Server which offered IP address when IP address was acquired by bootProtocol. When it is manually inputted or Address in NVRAM is used, '0.0.0.0' shall be inputted for this value. This value shall be held even if turning a power supply off. ")
mltNetTcpipRawPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipRawPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipRawPortNumber.setDescription(" Port number for RAW socket printing. Default shall be '9100'. In addition, two or more RAW Port printings shall not be supported. If this setting can not be set from Network access, a device should implement this value with RO access. ")
mltNetTcpipSupportService = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipSupportService.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipSupportService.setDescription(' In NetworkInterface, shows the service supported on TCP/IP by Bitmap. An integer bitmap value specifying TCP/IP support service information. Each bit in the integer is defined as follows. bit Value Service --- ----- --------- 0 1 Reserved 1 2 Reserved 2 4 LPD 3 8 Reserved for LPR 4 16 telnet 5 32 Reserved for telnet client 6 64 ftp server 7 128 ftp client 8 256 http server 9 512 Reserved for http client 10 1024 Reserved for POP3 server 11 2048 POP3 client 12 4096 Reserved for SMTP server 13 8132 SMTP client 14 16364 ipp 15 32768 Reserved 16 65536 Reserved 17 131072 slp 18 262144 Reserved for IMAP server 19 524288 IMAP client 20 1048576 Reserved 21 2097152 Reserved for UPnP ')
mltNetTcpipDnsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("use", 1), ("noUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDnsSupport.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsSupport.setDescription(' Sets up the availability of use of DNS. The following value shall be used. When DNS is not being supported, always takes 0. When supporting, Default shall be noUse(2). If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetTcpipDnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipDnsHostName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsHostName.setDescription(" The host name of NetworkInterface used by DNS. Default in the case of supporting DNS is Null (size =0). When DNS is not being supported, implement '-' (hyphen) and shall be RO. If this setting can not be set from Network access, a device should implement this value with RO access. ")
mltNetTcpipDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipDnsDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsDomainName.setDescription(" Domain name to which NetworkInterface used by DNS belongs. Default in the case of supporting DNS is Null (size =0). When DNS is not being supported, implement '-' (hyphen) and shall be RO. If this setting can not be set from Network access, a device should implement this value with RO access. ")
mltNetTcpipDnsTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2), )
if mibBuilder.loadTexts: mltNetTcpipDnsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsTable.setDescription(' The table for showing DNS Server. ')
mltNetTcpipDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetTcpipDnsIfIndex"), (0, "MC2350-MIB", "mltNetTcpipDnsServerIndex"))
if mibBuilder.loadTexts: mltNetTcpipDnsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsEntry.setDescription(' ')
mltNetTcpipDnsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDnsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsIfIndex.setDescription(' The index for uniquely showing NetworkInterface to which IP address is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetTcpipDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDnsServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsServerIndex.setDescription(' The index for uniquely showing each DNS Server. It shall have at least one or more Indexes as Default. The number of Indexes depends on an implementation. ')
mltNetTcpipDnsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipDnsServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetTcpipDnsServerAddress.setDescription(' IP address of DNS Server. If this setting can not be set from Network access, a device should implement this value with RO access. ')
mltNetLpdGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1), )
if mibBuilder.loadTexts: mltNetLpdGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdGeneralTable.setDescription(' The table for showing the general information of lpd. ')
mltNetLpdGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetLpdIfIndex"))
if mibBuilder.loadTexts: mltNetLpdGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdGeneralEntry.setDescription(' ')
mltNetLpdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which lpd is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetLpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdEnable.setDescription(' Sets up Enable/Disable of service of lpd. ')
mltNetLpdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdPort.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdPort.setDescription(' Specifies Port number which lpd uses. Default is 515. ')
mltNetLpdQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2), )
if mibBuilder.loadTexts: mltNetLpdQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueTable.setDescription(' The table for showing the information of Queue of lpd. ')
mltNetLpdQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetLpdQueueIfIndex"), (0, "MC2350-MIB", "mltNetLpdQueueIndex"))
if mibBuilder.loadTexts: mltNetLpdQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueEntry.setDescription(' ')
mltNetLpdQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which each Queue is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetLpdQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueIndex.setDescription(' The index for uniquely showing Queue set up for every NetworkInterface. The number of Indexes depends on an implementation. ')
mltNetLpdQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueName.setDescription(" The name of Queue used at the time of printing by lpd. The value of Default depends on a model. Default shall be '-' (hyphen) when printing function has no relation to the name of Queue. ")
mltNetLpdQueueDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdQueueDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueDescr.setDescription(' It recommends describing the information which serves as help when a user performs a setup for lpr printing. ')
mltNetLpdQueueFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueFilter.setDescription(' Selects Filter function set as Queue by Bitmap. When there is no Filter function in Queue, shall always be 0. Each bit in the integer is defined as follows. bit Value Filter --- ----- --------- 0 1 FF (Form Feed) 1 2 LF (Line Feed) 2 4 CR (Carriage Return) 3 8 PS (Add PostScript Header) 4 16 reserved 5 32 rejectPS 6 64 rejectPCL 7 128 rejectASCIIt ')
mltNetLpdQueueBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noBanner", 0), ("ascii", 1), ("pcl", 2), ("ps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueBanner.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueBanner.setDescription(' A setup of BannerPage set in Queue. ')
mltNetLpdQueueEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetLpdQueueEnable.setDescription(' Sets up Enable/Disable of each Queue. ')
mltNetFtpdGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1), )
if mibBuilder.loadTexts: mltNetFtpdGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdGeneralTable.setDescription(' The table for showing the general information of FTP Server. ')
mltNetFtpdGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetFtpdIfIndex"))
if mibBuilder.loadTexts: mltNetFtpdGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdGeneralEntry.setDescription(' ')
mltNetFtpdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which FTP server is set up. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetFtpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetFtpdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdEnable.setDescription(' Sets up Enable/Disable of service of FTP. ')
mltNetFtpdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetFtpdPort.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdPort.setDescription(' Specifies Port number which FTP Server uses. Default is 21. ')
mltNetFtpdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2), )
if mibBuilder.loadTexts: mltNetFtpdConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdConfigTable.setDescription(' The table for showing the User information connectable to FTPServer. ')
mltNetFtpdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetFtpdConfigIfIndex"), (0, "MC2350-MIB", "mltNetFtpdUserIndex"))
if mibBuilder.loadTexts: mltNetFtpdConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdConfigEntry.setDescription(' ')
mltNetFtpdConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdConfigIfIndex.setDescription(' The Index for uniquely specifying NetworkInterface to which each User considers as an object. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetFtpdUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdUserIndex.setDescription(' The index for uniquely showing the User. The number of Indexes depends on an implementation. ')
mltNetFtpdUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdUser.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdUser.setDescription(' Login user name of FTP Server. ')
mltNetFtpdUserPassWd = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdUserPassWd.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdUserPassWd.setDescription(' Password of FTP Server. When it is gotten, applying scramble to value is not accepted. About security, support by the management tool side. ')
mltNetFtpdCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdCapability.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdCapability.setDescription(' Shows the function permitted to each user on FTP Server by Bitmap. An integer bitmap value specifying FTP function information. Each bit in the integer is defined as follows. bit Value Filter --- ----- --------- 0 1 putting job & No Filter 1 2 putting job & CR-LF invert 2 4 get (status or job or Driver) 3 8 put NIC Firmware 4 16 put Printer Font 5 32 reserved ')
mltNetFtpdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetFtpdDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetFtpdDescr.setDescription(' Explanation etc. of the function set to each user is indicated. ')
mltNetHttpdGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1), )
if mibBuilder.loadTexts: mltNetHttpdGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHttpdGeneralTable.setDescription(' The table for showing the general information about HTTP Server. ')
mltNetHttpdGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetHttpdIfIndex"))
if mibBuilder.loadTexts: mltNetHttpdGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHttpdGeneralEntry.setDescription(' ')
mltNetHttpdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetHttpdIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHttpdIfIndex.setDescription(' Index for uniquely showing NetworkInterface to which HTTP Server is set up. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetHttpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHttpdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHttpdEnable.setDescription(' Sets up Enable/Disable of service of HTTP Server. ')
mltNetHttpdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHttpdPort.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHttpdPort.setDescription(' The port number which HTTP Server uses. Default is 80. ')
mltNetHttpdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHttpdDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetHttpdDescr.setDescription(' Indicates the information, such as a version of HTTP Server. ')
mltNetSmtpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1), )
if mibBuilder.loadTexts: mltNetSmtpGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpGeneralTable.setDescription(' The table for showing the general information of SMTP. ')
mltNetSmtpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmtpIfIndex"))
if mibBuilder.loadTexts: mltNetSmtpGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpGeneralEntry.setDescription(' ')
mltNetSmtpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which SMTP is set. The value of Index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSmtpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpEnable.setDescription(' Sets up Enable/Disable of service of SMTP. ')
mltNetSmtpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpServerAddress.setDescription(" Shows the IP address of SMTP Server. Considering about specification by Domain name, it is made into DisplayString. In the case of specifying by the IP address, it shall be handled as a character string of maximum 15 characters of 'xxx.xxx.xxx.xxx'. Whether to accept a setup by Domain name is dependent on an implementation of a model. ")
mltNetSmtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpPort.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpPort.setDescription(' Specifies Port number which SMTP uses. Default is 25. ')
mltNetSmtpAccountTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2), )
if mibBuilder.loadTexts: mltNetSmtpAccountTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpAccountTable.setDescription(' The table for showing Account information of SMTP. ')
mltNetSmtpAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmtpAccountIfIndex"), (0, "MC2350-MIB", "mltNetSmtpAccountIndex"))
if mibBuilder.loadTexts: mltNetSmtpAccountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpAccountEntry.setDescription(' ')
mltNetSmtpAccountIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpAccountIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpAccountIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which each From setup makes into the object. The value of Index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSmtpAccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpAccountIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpAccountIndex.setDescription(' The index for uniquely showing e-mail From address setup. Although the number of index depends on an implementation, index of the number of functions in which EP-NET and Scan function etc. are supporting needs to be prepared in Default. ')
mltNetSmtpFromAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpFromAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpFromAddress.setDescription(' The address of From Field used by SMTP. ')
mltNetSmtpReplyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpReplyAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpReplyAddress.setDescription(' The address of RepryTo used by SMTP. ')
mltNetSmtpConnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpConnTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpConnTimeout.setDescription(' Timeout setup in SMTP. A unit is second. It shall be possible to set the number between 30-300. Default is 60 (seconds). ')
mltNetSmtpPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("epNet", 1), ("scanFunction", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpPurpose.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpPurpose.setDescription(' Displays the use of From setup of SMTP. ')
mltNetSmtpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpDescription.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmtpDescription.setDescription(' Description of each From setup. Default is dependent on an implementation. ')
mltNetIppGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1))
mltNetIppPrtDescrAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2))
mltNetIppJobTemplateAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3))
mltNetIppGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1), )
if mibBuilder.loadTexts: mltNetIppGeneralTable.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppGeneralTable.setDescription(' The table for showing the general information of IPP. ')
mltNetIppGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetIppGeneralIfIndex"))
if mibBuilder.loadTexts: mltNetIppGeneralEntry.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppGeneralEntry.setDescription(' ')
mltNetIppGeneralIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppGeneralIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppGeneralIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of Index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetIppServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetIppServiceEnable.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppServiceEnable.setDescription(' Sets up Enable/Disable of service of IPP ')
mltNetIppDefaultPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetIppDefaultPortIndex.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppDefaultPortIndex.setDescription(' mltNetIppPortIndex which shows Default Port number used by IPP. ')
mltNetIppPortTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2), )
if mibBuilder.loadTexts: mltNetIppPortTable.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPortTable.setDescription(' The table for showing Port information of IPP. ')
mltNetIppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetIppPortIfIndex"), (0, "MC2350-MIB", "mltNetIppPortIndex"))
if mibBuilder.loadTexts: mltNetIppPortEntry.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPortEntry.setDescription(' ')
mltNetIppPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppPortIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPortIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of Index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetIppPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppPortIndex.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPortIndex.setDescription(' The index for uniquely showing Port. ')
mltNetIppPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppPortNumber.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPortNumber.setDescription(" Port number. '631' is supported at least. ")
mltNetIppPrtDescGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1), )
if mibBuilder.loadTexts: mltNetIppPrtDescGeneralTable.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPrtDescGeneralTable.setDescription(' The table for showing the general information about Printer Description Attribute of IPP. ')
mltNetIppPrtDescGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppPrtDescGeneralIfIndex"))
if mibBuilder.loadTexts: mltNetIppPrtDescGeneralEntry.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppPrtDescGeneralEntry.setDescription(' ')
mltIppPrtDescGeneralIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtDescGeneralIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtDescGeneralIfIndex.setDescription(' Index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppPrtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrtName.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtName.setDescription(" 'printer-name' attribute is shown. ")
mltIppPrtMoreInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrtMoreInfo.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtMoreInfo.setDescription(" 'printer-more-info' attribute is shown. ")
mltIppPrtState = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("idle", 3), ("processing", 4), ("stopped", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtState.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtState.setDescription(" 'printer-state' attribute is shown. ")
mltIppCharSetConfiguredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetConfiguredIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetConfiguredIndex.setDescription(" Index which shows 'charset-configured.' ")
mltIppNaturalLanguageConfiguredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLanguageConfiguredIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppNaturalLanguageConfiguredIndex.setDescription(" 'natural-language-configured' attribute is shown. ")
mltIppDocFormatDefaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppDocFormatDefaultIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppDocFormatDefaultIndex.setDescription(" 'document-format-default' attribute is shown. ")
mltIppPrinterIsAcceptingJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrinterIsAcceptingJobs.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrinterIsAcceptingJobs.setDescription(" 'printer-is-accepting-jobs' attribute is shown. ")
mltIppQueuedJobCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppQueuedJobCount.setStatus('optional')
if mibBuilder.loadTexts: mltIppQueuedJobCount.setDescription(" 'queued-job-count' attribute is shown. ")
mltIppColorSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppColorSupported.setStatus('optional')
if mibBuilder.loadTexts: mltIppColorSupported.setDescription(" 'color-supported' attribute is shown. ")
mltIppPdlOverrideSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("attempted", 3), ("notAttempted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPdlOverrideSupported.setStatus('optional')
if mibBuilder.loadTexts: mltIppPdlOverrideSupported.setDescription(" 'pdl-override-supported' attribute is shown. ")
mltIppPrinterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrinterUpTime.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrinterUpTime.setDescription(" 'printer-up-time' attribute is shown. ")
mltIppPrtLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrtLocation.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtLocation.setDescription(" 'printer-location' attribute is shown. ")
mltIppPrinterCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrinterCurrentTime.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrinterCurrentTime.setDescription(" 'printer-current-up-time' attribute is shown. ")
mltIppUriSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2), )
if mibBuilder.loadTexts: mltIppUriSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppUriSupportedTable.setDescription(" The table for showing 'printer-uri-authentication-supported' and 'printer-uri-security-supported' to 'printer-uri-supported' attribute and each 'printer-uri'. ")
mltIppUriSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppUriIfIndex"), (0, "MC2350-MIB", "mltIppUriIndex"))
if mibBuilder.loadTexts: mltIppUriSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppUriSupportedEntry.setDescription(' ')
mltIppUriIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppUriIfIndex.setDescription(' Index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppUriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppUriIndex.setDescription(" Index for uniquely showing 'printer-uri'. ")
mltIppUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUri.setStatus('optional')
if mibBuilder.loadTexts: mltIppUri.setDescription(" 'printer-uri' to support is shown. ")
mltIppUriSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("none", 3), ("ssl3", 4), ("tls", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriSecurity.setStatus('optional')
if mibBuilder.loadTexts: mltIppUriSecurity.setDescription(" 'printer-uri-security' to 'printer-uri' to support is shown. ")
mltIppUriAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 3), ("requestingUserName", 4), ("basic", 5), ("digest", 6), ("certificate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriAuthentication.setStatus('optional')
if mibBuilder.loadTexts: mltIppUriAuthentication.setDescription(" 'printer-uri-authentication' to 'printer-uri' to support is shown. This item is an IPP Ver1.1 support item. In implementation of IPP Ver1.0, it is not necessary to implement this item. ")
mltIppPrtStateReasonsTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3), )
if mibBuilder.loadTexts: mltIppPrtStateReasonsTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtStateReasonsTable.setDescription(" The table which shows 'printer-state-reasons' attribute. ")
mltIppPrtStateReasonsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppPrtStateReasonIfIndex"), (0, "MC2350-MIB", "mltIppPrtStateReasonIndex"))
if mibBuilder.loadTexts: mltIppPrtStateReasonsEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtStateReasonsEntry.setDescription(' ')
mltIppPrtStateReasonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtStateReasonIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtStateReasonIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppPrtStateReasonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtStateReasonIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtStateReasonIndex.setDescription(" Index for uniquely showing 'printer-state-reasons'. ")
mltIppPrinterStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("other", 2), ("none", 3), ("mediaNeeded", 4), ("mediaJam", 5), ("movingToPaused", 6), ("paused", 7), ("shutDown", 8), ("connectingToDevice", 9), ("timedOut", 10), ("stopping", 11), ("stoppedPartly", 12), ("tonerLow", 13), ("tonerEmpty", 14), ("spoolAreaFull", 15), ("coverOpen", 16), ("interlockOpen", 17), ("doorOpen", 18), ("inputTrayMissing", 19), ("mediaLow", 20), ("mediaEmpty", 21), ("outputTrayMissing", 22), ("outputAreaAlmostFull", 23), ("outputAreaFull", 24), ("markerSupplyLow", 25), ("markerSupplyEmpty", 26), ("markerWasteAlmostFull", 27), ("markerWasteFull", 28), ("fuserOverTemp", 29), ("fuserUnderTemp", 30), ("opcNearEndOfLife", 31), ("opcLifeOver", 32), ("developerLow", 33), ("developerEmpty", 34), ("interpreterResourceUnavailable", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrinterStateReason.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrinterStateReason.setDescription(" 'printer-state-reasons' attribute is shown. mltIppPrtStateReasonSuffix shows suffix of '-report', '-warning', and '-error' ")
mltIppPrtStateReasonSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("report", 3), ("warning", 4), ("error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtStateReasonSuffix.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrtStateReasonSuffix.setDescription(" Three suffixes ('-report', '-warning', and '-error') of 'printer-state-reasons' attribute are shown. ")
mltIppVersionsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4), )
if mibBuilder.loadTexts: mltIppVersionsSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppVersionsSupportedTable.setDescription(" Table which shows 'ipp-versions-supported.' This item is an IPP Ver1.1 support item. In implementation of IPP Ver1.0, it is not necessary to implement this item. ")
mltIppVersionsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppVersionIfIndex"), (0, "MC2350-MIB", "mltIppVersionIndex"))
if mibBuilder.loadTexts: mltIppVersionsSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppVersionsSupportedEntry.setDescription(' ')
mltIppVersionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppVersionIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppVersionIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppVersionIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppVersionIndex.setDescription(" Index for uniquely showing 'ipp-version'. ")
mltIppVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ipp10", 3), ("ipp11", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppVersionType.setStatus('optional')
if mibBuilder.loadTexts: mltIppVersionType.setDescription(" 'ipp-version' to support is shown ")
mltIppOperationSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5), )
if mibBuilder.loadTexts: mltIppOperationSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppOperationSupportedTable.setDescription(" Table which has 'operation-supported' attribute. ")
mltIppOperationSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppOperationIfIndex"), (0, "MC2350-MIB", "mltIppOperationIndex"))
if mibBuilder.loadTexts: mltIppOperationSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppOperationSupportedEntry.setDescription(' ')
mltIppOperationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOperationIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppOperationIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppOperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOperationIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppOperationIndex.setDescription(" Index which shows 'operation' to support. ")
mltIppOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18))).clone(namedValues=NamedValues(("printJob", 2), ("printURI", 3), ("validateJob", 4), ("createJob", 5), ("sendDocument", 6), ("sendURI", 7), ("cancelJob", 8), ("getJobAttributes", 9), ("getJobs", 10), ("getPrinterAttributes", 11), ("holdJobs", 12), ("releaseJob", 13), ("restartJob", 14), ("pausePrinter", 16), ("resumePrinter", 17), ("purgeJobs", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOperationType.setStatus('optional')
if mibBuilder.loadTexts: mltIppOperationType.setDescription(" Type of 'operation' is shown ")
mltIppOperationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppOperationEnable.setStatus('optional')
if mibBuilder.loadTexts: mltIppOperationEnable.setDescription(" This shows Opeartor's Enable/Disable. ")
mltIppCharSetSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6), )
if mibBuilder.loadTexts: mltIppCharSetSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetSupportedTable.setDescription(" Table which shows 'charset-supported.' ")
mltIppCharSetSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppCharSetIfIndex"), (0, "MC2350-MIB", "mltIppCharSetIndex"))
if mibBuilder.loadTexts: mltIppCharSetSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetSupportedEntry.setDescription(' ')
mltIppCharSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppCharSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetIndex.setDescription(" Index for uniquely showing 'charset'. ")
mltIppCharSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetName.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetName.setDescription(' A parameter should follow regulation of IANA of the following. http://www.iana.org/assignments/character-set ')
mltIppCharSetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetCode.setStatus('optional')
if mibBuilder.loadTexts: mltIppCharSetCode.setDescription(" The code of 'charset' to support A parameter should follow regulation of IANA of the following. http://www.iana.org/assignments/character-set ")
mltIppNaturalLanguageSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7), )
if mibBuilder.loadTexts: mltIppNaturalLanguageSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppNaturalLanguageSupportedTable.setDescription(" Table which shows 'generated-natural-language-supported' attribute. ")
mltIppNaturalLanguageSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppNaturalLangIfIndex"), (0, "MC2350-MIB", "mltIppNaturalLangIndex"))
if mibBuilder.loadTexts: mltIppNaturalLanguageSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppNaturalLanguageSupportedEntry.setDescription(' ')
mltIppNaturalLangIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLangIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppNaturalLangIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppNaturalLangIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLangIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppNaturalLangIndex.setDescription(" Index for uniquely showing 'natural-language'. ")
mltIppNaturalLangName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLangName.setStatus('optional')
if mibBuilder.loadTexts: mltIppNaturalLangName.setDescription(" The name of 'natural-language' to support. ")
mltIppDocFormatSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8), )
if mibBuilder.loadTexts: mltIppDocFormatSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppDocFormatSupportedTable.setDescription(" Table which shows 'document-format-supported' attribute. ")
mltIppDocFormatSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppDocFormatIfIndex"), (0, "MC2350-MIB", "mltIppDocFormatIndex"))
if mibBuilder.loadTexts: mltIppDocFormatSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppDocFormatSupportedEntry.setDescription(' ')
mltIppDocFormatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppDocFormatIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppDocFormatIfIndex.setDescription(' The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppDocFormatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppDocFormatIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppDocFormatIndex.setDescription(" The index for uniquely showing 'document-format'. ")
mltIppDocFormatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppDocFormatName.setStatus('optional')
if mibBuilder.loadTexts: mltIppDocFormatName.setDescription(" The name of 'document-format' to support is shown ")
mltIppCompressionSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10), )
if mibBuilder.loadTexts: mltIppCompressionSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppCompressionSupportedTable.setDescription(" Table which shows 'compression-supported.' ")
mltIppCompressionSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppCompressionIfIndex"), (0, "MC2350-MIB", "mltIppCompressionIndex"))
if mibBuilder.loadTexts: mltIppCompressionSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppCompressionSupportedEntry.setDescription(' ')
mltIppCompressionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCompressionIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppCompressionIfIndex.setDescription(' Index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppCompressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCompressionIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppCompressionIndex.setDescription(" Index for uniquely showing 'compression'. ")
mltIppCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 3), ("deflate", 4), ("gzip", 5), ("compress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCompressionType.setStatus('optional')
if mibBuilder.loadTexts: mltIppCompressionType.setDescription(" 'compression' currently supported is shown. ")
mltNetIppJobTemplateGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1), )
if mibBuilder.loadTexts: mltNetIppJobTemplateGeneralTable.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppJobTemplateGeneralTable.setDescription(' The table for showing the general information about Job Template Attribute of IPP. ')
mltNetIppJobTemplateGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppJobTemplateGeneralIfIndex"))
if mibBuilder.loadTexts: mltNetIppJobTemplateGeneralEntry.setStatus('optional')
if mibBuilder.loadTexts: mltNetIppJobTemplateGeneralEntry.setDescription(' ')
mltIppJobTemplateGeneralIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobTemplateGeneralIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobTemplateGeneralIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppJobPriorityDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobPriorityDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobPriorityDefault.setDescription("'job-priority-default' attribute is shown. ")
mltIppJobPrioritySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobPrioritySupported.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobPrioritySupported.setDescription("'job-priority-supported' attribute is shown. ")
mltIppJobHoldUntilDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobHoldUntilDefault.setDescription("'job-hold-until-default' attribute is shown. ")
mltIppJobSheetsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobSheetsDefault.setDescription("'ipp-job-sheets-default' attribute is shown. ")
mltIppCopiesDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppCopiesDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppCopiesDefault.setDescription("'copies-default' attribute is shown. ")
mltIppCopiesMaxSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCopiesMaxSupported.setStatus('optional')
if mibBuilder.loadTexts: mltIppCopiesMaxSupported.setDescription("'copies-supported' attribute is shown. Since MIN value is surely 1, only MAX is shown. ")
mltIppFinishingsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppFinishingsDefault.setDescription("'finishings-default' attribute is shown. ")
mltIppPageRangesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPageRangesSupported.setStatus('optional')
if mibBuilder.loadTexts: mltIppPageRangesSupported.setDescription("'page-ranges-supported' attribute is shown. ")
mltIppSidesDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppSidesDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppSidesDefault.setDescription("'sides-default' attribute is shown. ")
mltIppNumberUpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppNumberUpDefault.setDescription("'number-up-default' attribute is shown. ")
mltIppOrientationRequestedDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppOrientationRequestedDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppOrientationRequestedDefault.setDescription("'orientation-requested-default' attribute is shown. ")
mltIppMediaDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppMediaDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaDefault.setDescription("'media-default' attribute is shown. ")
mltIppPrinterResolutionDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrinterResolutionDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrinterResolutionDefault.setDescription("'printer-resolution-default' attribute is shown. ")
mltIppPrintQualityDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrintQualityDefault.setStatus('optional')
if mibBuilder.loadTexts: mltIppPrintQualityDefault.setDescription("'print-quality-default' attribute is shown. ")
mltIppJobHoldUntilSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2), )
if mibBuilder.loadTexts: mltIppJobHoldUntilSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobHoldUntilSupportedTable.setDescription(" Table which shows 'job-hold-until-supported' attribute. ")
mltIppJobHoldUntilSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppJobHoldUntilIfIndex"), (0, "MC2350-MIB", "mltIppJobHoldUntilIndex"))
if mibBuilder.loadTexts: mltIppJobHoldUntilSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobHoldUntilSupportedEntry.setDescription(' ')
mltIppJobHoldUntilIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobHoldUntilIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppJobHoldUntilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobHoldUntilIndex.setDescription("Index for uniquely showing 'job-hold-until'. ")
mltIppJobHoldUntilType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noHold", 3), ("indefinite", 4), ("dayTime", 5), ("evening", 6), ("night", 7), ("weekend", 8), ("secondShift", 9), ("thirdShift", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilType.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobHoldUntilType.setDescription("Type of 'job-hold-until' to support. ")
mltIppJobSheetsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3), )
if mibBuilder.loadTexts: mltIppJobSheetsSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobSheetsSupportedTable.setDescription(" Table which shows 'ipp-job-sheets-supported'. ")
mltIppJobSheetsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppJobSheetsIfIndex"), (0, "MC2350-MIB", "mltIppJobSheetsIndex"))
if mibBuilder.loadTexts: mltIppJobSheetsSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobSheetsSupportedEntry.setDescription(' ')
mltIppJobSheetsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobSheetsIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppJobSheetsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobSheetsIndex.setDescription("Index for uniquely showing 'job-sheets'. ")
mltIppJobSheetsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("none", 3), ("standard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsType.setStatus('optional')
if mibBuilder.loadTexts: mltIppJobSheetsType.setDescription("Type of 'job-sheets' to support is shown. ")
mltIppFinishingsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4), )
if mibBuilder.loadTexts: mltIppFinishingsSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppFinishingsSupportedTable.setDescription(" Table which shows 'finishings-supported'. ")
mltIppFinishingsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppFinishingsIfIndex"), (0, "MC2350-MIB", "mltIppFinishingsIndex"))
if mibBuilder.loadTexts: mltIppFinishingsSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppFinishingsSupportedEntry.setDescription(' ')
mltIppFinishingsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppFinishingsIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppFinishingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppFinishingsIndex.setDescription("Index for uniquely showing 'finishings'. ")
mltIppFinishingsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("none", 3), ("staple", 4), ("punch", 5), ("cover", 6), ("bind", 7), ("saddle-stitch", 8), ("edge-stitch", 9), ("staple-top-left", 20), ("staple-bottom-left", 21), ("staple-top-right", 22), ("staple-bottom-right", 23), ("edge-stitch-left", 24), ("edge-stitch-top", 25), ("edge-stitch-right", 26), ("edge-stitch-bottom", 27), ("staple-dual-left", 28), ("staple-dual-top", 29), ("staple-dual-right", 30), ("staple-dual-bottom", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsType.setStatus('optional')
if mibBuilder.loadTexts: mltIppFinishingsType.setDescription("Type of 'finishings' to support. ")
mltIppSidesSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5), )
if mibBuilder.loadTexts: mltIppSidesSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppSidesSupportedTable.setDescription(" Table which shows 'sides-supported' attribute. ")
mltIppSidesSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppSidesIfIndex"), (0, "MC2350-MIB", "mltIppSidesIndex"))
if mibBuilder.loadTexts: mltIppSidesSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppSidesSupportedEntry.setDescription(' ')
mltIppSidesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppSidesIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppSidesIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppSidesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppSidesIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppSidesIndex.setDescription("Index for uniquely showing 'sides'. ")
mltIppSidesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("one-sided", 3), ("two-sided-long-edge", 4), ("two-sided-short-edge", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppSidesType.setStatus('optional')
if mibBuilder.loadTexts: mltIppSidesType.setDescription("Type of 'sides' to support ")
mltIppNumberUpSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6), )
if mibBuilder.loadTexts: mltIppNumberUpSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppNumberUpSupportedTable.setDescription(" Table which shows 'number-up-supported'. ")
mltIppNumberUpSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppNumberUpIfIndex"), (0, "MC2350-MIB", "mltIppNumberUpIndex"))
if mibBuilder.loadTexts: mltIppNumberUpSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppNumberUpSupportedEntry.setDescription(' ')
mltIppNumberUpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppNumberUpIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppNumberUpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppNumberUpIndex.setDescription("Index for uniquely showing 'number-up'. ")
mltIppNumberUpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("num1Up", 1), ("num2Up", 2), ("num4Up", 3), ("num9Up", 4), ("num16Up", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpType.setStatus('optional')
if mibBuilder.loadTexts: mltIppNumberUpType.setDescription("The 'number-up' value to support is shown. ")
mltIppOrientationRequestedSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7), )
if mibBuilder.loadTexts: mltIppOrientationRequestedSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppOrientationRequestedSupportedTable.setDescription(" 'orientation-requested-supported' attribute is shown. ")
mltIppOrientationRequestedSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppOrientationRequestedIfIndex"), (0, "MC2350-MIB", "mltIppOrientationRequestedIndex"))
if mibBuilder.loadTexts: mltIppOrientationRequestedSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppOrientationRequestedSupportedEntry.setDescription(' ')
mltIppOrientationRequestedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOrientationRequestedIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppOrientationRequestedIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppOrientationRequestedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOrientationRequestedIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppOrientationRequestedIndex.setDescription("Index for uniquely showing 'orientation-requested'. ")
mltIppOrientationRequestedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("portrait", 3), ("landscape", 4), ("reverse-landscape", 5), ("reverse-portrait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOrientationRequestedType.setStatus('optional')
if mibBuilder.loadTexts: mltIppOrientationRequestedType.setDescription("Type of 'orientation-requested' to support. ")
mltIppMediaSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8), )
if mibBuilder.loadTexts: mltIppMediaSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaSupportedTable.setDescription(" Table which shows 'media-supported' attribute. ")
mltIppMediaSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppMediaIfIndex"), (0, "MC2350-MIB", "mltIppMediaIndex"))
if mibBuilder.loadTexts: mltIppMediaSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaSupportedEntry.setDescription(' ')
mltIppMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltIppMediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaIndex.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaIndex.setDescription("Index for uniquely showing 'media'. ")
mltIppMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaName.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaName.setDescription("The name of 'media' currently supported. Refer to Bergman, R, 'Media Size Standardized Names', PWG Draft Standard D0.5, March 26, 2001. ")
mltIppMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaType.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaType.setDescription("mediatype of 'media' currently supported. ")
mltIppMediaColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaColor.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaColor.setDescription("The color of 'media' currently supported. ")
mltIppMediaInputTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaInputTray.setStatus('optional')
if mibBuilder.loadTexts: mltIppMediaInputTray.setDescription("Tray to which 'media' currently supported is set. ")
mltPrinterResolutionSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9), )
if mibBuilder.loadTexts: mltPrinterResolutionSupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionSupportedTable.setDescription(" Table which shows 'printer-resolution-supported'. ")
mltPrinterResolutionSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1), ).setIndexNames((0, "MC2350-MIB", "mltPrinterResolutionIfIndex"), (0, "MC2350-MIB", "mltPrinterResolutionIndex"))
if mibBuilder.loadTexts: mltPrinterResolutionSupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionSupportedEntry.setDescription(' ')
mltPrinterResolutionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltPrinterResolutionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionIndex.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionIndex.setDescription("Index for uniquely showing 'printer-resolution'. ")
mltPrinterResolutionFeedDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionFeedDir.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionFeedDir.setDescription("The value of Feed direction of 'printer-resolution' to support. ")
mltPrinterResolutionXFeedDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionXFeedDir.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionXFeedDir.setDescription("The value of XFeed direction of 'printer-resolution' to support. ")
mltPrinterResolutionUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("tenThousandthsOfInches", 3), ("micrometers", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionUnit.setStatus('optional')
if mibBuilder.loadTexts: mltPrinterResolutionUnit.setDescription("Unit of 'printer-resolution' to support . ")
mltPrintQualitySupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10), )
if mibBuilder.loadTexts: mltPrintQualitySupportedTable.setStatus('optional')
if mibBuilder.loadTexts: mltPrintQualitySupportedTable.setDescription(" Table which shows 'print-quality-supported' attribute ")
mltPrintQualitySupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1), ).setIndexNames((0, "MC2350-MIB", "mltPrintQualityIfIndex"), (0, "MC2350-MIB", "mltPrintQualityIndex"))
if mibBuilder.loadTexts: mltPrintQualitySupportedEntry.setStatus('optional')
if mibBuilder.loadTexts: mltPrintQualitySupportedEntry.setDescription(' ')
mltPrintQualityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrintQualityIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltPrintQualityIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which IPP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltPrintQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrintQualityIndex.setStatus('optional')
if mibBuilder.loadTexts: mltPrintQualityIndex.setDescription("Index for uniquely showing 'print-quality'. ")
mltPrintQualityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("draft", 3), ("normal", 4), ("high", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrintQualityType.setStatus('optional')
if mibBuilder.loadTexts: mltPrintQualityType.setDescription("Type of 'print-quality' to support. ")
mltNetSlpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1), )
if mibBuilder.loadTexts: mltNetSlpGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpGeneralTable.setDescription(' Table for showing the general information of SLP. ')
mltNetSlpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSlpIfIndex"))
if mibBuilder.loadTexts: mltNetSlpGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpGeneralEntry.setDescription(' ')
mltNetSlpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which SLP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSlpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpEnable.setDescription('Enable/Disable of service of SLP is set up. ')
mltNetSlpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpPortNumber.setDescription('Port number of SLP is shown. Default is 427. ')
mltNetSlpMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpMTU.setDescription('MTU value of LP gas is shown. Default shall be 1400. ')
mltNetSlpTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpTTL.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpTTL.setDescription('TTL value of SLP is shown. Default shall be 255. ')
mltNetSlpBroadcastSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastOnly", 1), ("multicastOnly", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpBroadcastSupport.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpBroadcastSupport.setDescription('Support of multicasting and broadcasting is shown. ')
mltNetSlpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2), )
if mibBuilder.loadTexts: mltNetSlpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpConfigTable.setDescription(' The table for showing the setup information of SLP. ')
mltNetSlpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSlpConfigIfIndex"), (0, "MC2350-MIB", "mltNetSlpIndex"))
if mibBuilder.loadTexts: mltNetSlpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpConfigEntry.setDescription(' ')
mltNetSlpConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpConfigIfIndex.setDescription('The index for uniquely specifying NetworkInterface to which SLP is set. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpIndex.setDescription('Index for showing a specific entry. Default is 1. ')
mltNetSlpService = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpService.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpService.setDescription("The character string which shows the service registered into DA. Example: 'service:printer:help' ")
mltNetSlpScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpScope.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpScope.setDescription("The character string which shows the scope of SLP. Default character string is 'default'. ")
mltNetSlpLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSlpLifetime.setDescription('The value which shows LifeTime of a registration. A unit is second. Default is 10800 (3 hours). ')
mltNetNwGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1), )
if mibBuilder.loadTexts: mltNetNwGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwGeneralTable.setDescription('Table with the basic information of NetWare relation which NetworkInterface has ')
mltNetNwGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwIfIndex"))
if mibBuilder.loadTexts: mltNetNwGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwGeneralEntry.setDescription(' ')
mltNetNwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetNwDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwDefault.setDescription('The command which restores all setup about NetWare to FactoryDefault. When resetToDefault(2) is set, an agent side shall surely return Reply. In principle, when resetToDefault(2) is set, about the timing in which the setup returns to default depends on an implementation and it does not define in MIB. ')
mltNetNwFrameTypeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwFrameTypeConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwFrameTypeConfig.setDescription('A setup of FrameType used by NetWare (IPX). It is set by using Bitmap of the following. 1 (Auto-Sense) is recommended for the Default. Although Auto-Sense and other value do not exist together, about Binding two or more FrameTypes simultaneously, it is dependent on the implementation of a model. Bit Value FrameType ---- ---- ---------- 0 1 Reserved 1 2 802.3 2 4 EthernetII 3 8 802.3-SNAP 4 16 802.2 (4) 5 32 Reserved 6 64 802.5-TokenRing 7 128 TokenRing-SNAP ')
mltNetNwPrintMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pServerMode", 1), ("nPrinterMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPrintMode.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPrintMode.setDescription('The mode of NetworkInterface used by NetWare is set up. Default shall be pServerMode(1). When not supporting NPrinter, it shall be the implementation of RO. ')
mltNetNwFrameTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2), )
if mibBuilder.loadTexts: mltNetNwFrameTable.setStatus('optional')
if mibBuilder.loadTexts: mltNetNwFrameTable.setDescription('The information of FrameType which is working in NetWare is shown. ')
mltNetNwFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwFrameIfIndex"), (0, "MC2350-MIB", "mltNetNwFrameIndex"))
if mibBuilder.loadTexts: mltNetNwFrameEntry.setStatus('optional')
if mibBuilder.loadTexts: mltNetNwFrameEntry.setDescription(' ')
mltNetNwFrameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwFrameIfIndex.setStatus('optional')
if mibBuilder.loadTexts: mltNetNwFrameIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetNwFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwFrameIndex.setStatus('optional')
if mibBuilder.loadTexts: mltNetNwFrameIndex.setDescription('Index for showing FrameType which is operating by NetworkInterface. ')
mltNetNwFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("ethernet8023", 1), ("ethernetII", 2), ("ethernetSnap", 3), ("ethernet8022", 4), ("tokenRing8025", 6), ("tokenRingSnap", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwFrameType.setStatus('optional')
if mibBuilder.loadTexts: mltNetNwFrameType.setDescription('FrameType is shown. ')
mltNetNwNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwNetworkNumber.setStatus('optional')
if mibBuilder.loadTexts: mltNetNwNetworkNumber.setDescription('Network number which each FrameType is using is displayed. The notation of a number is indicated by Hexadecimal numbers. ')
mltNetNwPserverTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3), )
if mibBuilder.loadTexts: mltNetNwPserverTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPserverTable.setDescription('The table for showing the setup of PrintServer. ')
mltNetNwPserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwPsIfIndex"), (0, "MC2350-MIB", "mltNetNwPsIndex"))
if mibBuilder.loadTexts: mltNetNwPserverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPserverEntry.setDescription(' ')
mltNetNwPsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwPsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetNwPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwPsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsIndex.setDescription('Index for uniquely showing PrintServer. The number of indexes depends on an implementation. The number of indexes which can be implemented and the number of defaults depends on an implementation. ')
mltNetNwPsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsName.setDescription('The name of PrintServer. Default is dependent on an implementation. ')
mltNetNwPsPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsPasswd.setDescription('Password of PrintServer. Default is Null. When it is gotten, applying scramble to value is not accepted. About security, support by the management tool side. ')
mltNetNwPsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("binderyMode", 1), ("ndsMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsMode.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsMode.setDescription('The mode in which PrintServer supports is shown. ')
mltNetNwPsPrefFServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPrefFServer.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsPrefFServer.setDescription("Value of Preferred FileServer used in Bindery mode. It shall be NullString when set only to NDS mode. In the system which does not set up PreferredFileServer, implement '-' (hyphen) and shall be RO. ")
mltNetNwPsPrefTree = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPrefTree.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsPrefTree.setDescription("Value of Preferred Tree used in NDS mode. It shall be NullString when set only to Bindery mode. In the system which does not set up PreferredTree, implement 'N/A' and shall be RO. ")
mltNetNwPsPrefContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPrefContext.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsPrefContext.setDescription("Value of Preferred Context used in NDS mode. It shall be NullString when set only to Bindery mode. In the system which does not set up PreferredContext, implement 'N/A' and shall be RO. ")
mltNetNwPsPollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPollingRate.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwPsPollingRate.setDescription(' The interval at which PrinteServer scans Queue. Unit is second. Range which can be set up shall be 1 - 65535. Default is 1 (second). ')
mltNetNwQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4), )
if mibBuilder.loadTexts: mltNetNwQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueTable.setDescription('Table which shows the information of Queue which NetworkInterface has managed. ')
mltNetNwQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwQueueIndex"))
if mibBuilder.loadTexts: mltNetNwQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueEntry.setDescription(' ')
mltNetNwQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueIndex.setDescription('The index for uniquely showing Queue. ')
mltNetNwQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueName.setDescription('The name of Queue. ')
mltNetNwQueueRefIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueRefIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueRefIfIndex.setDescription('NetworkInterface which is managing Queue is shown. Use the value of mltNetNwPsIfIndex. ')
mltNetNwQueueRefPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueRefPsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueRefPsIndex.setDescription('PrintServer which is managing Queue is shown. Use the value of mltNetNwPsIndex. ')
mltNetNwQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("available", 1), ("allocated", 2), ("inUse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwQueueStatus.setDescription('The state of Queue is shown. ')
mltNetNwNPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5), )
if mibBuilder.loadTexts: mltNetNwNPrinterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwNPrinterTable.setDescription('Table which shows the information of NPrinter which NetworkInterface is managing. In the system without Nprinter function, it is not necessary to implement this table. ')
mltNetNwNPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwNPrinterIfIndex"), (0, "MC2350-MIB", "mltNetNwNPrinterIndex"))
if mibBuilder.loadTexts: mltNetNwNPrinterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwNPrinterEntry.setDescription(' ')
mltNetNwNPrinterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwNPrinterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwNPrinterIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetNwNPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwNPrinterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwNPrinterIndex.setDescription('Index for uniquely showing Nprinter. ')
mltNetNwNPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwNPrinterName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwNPrinterName.setDescription('The name of Nprinter. ')
mltNetNwNPrinterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwNPrinterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetNwNPrinterNumber.setDescription('Printer number of NPrinter. Default shall be 1. ')
mltNetAppleTalkGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1), )
if mibBuilder.loadTexts: mltNetAppleTalkGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAppleTalkGeneralTable.setDescription('Table with the basic information of AppleTalk relation which NetworkInterface has. ')
mltNetAppleTalkGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetAtIfIndex"))
if mibBuilder.loadTexts: mltNetAppleTalkGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAppleTalkGeneralEntry.setDescription(' ')
mltNetAtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetAtDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetAtDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtDefault.setDescription('The command which restores all setup about AppleTalk to FactoryDefault. When resetToDefault(2) is set, an agent side shall surely return Reply. In principle, when resetToDefault(2) is set, about the timing in which the setup returns to default depends on an implementation and it does not define in MIB. ')
mltNetAtNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtNetNumber.setDescription('NetworkNumber in Network of AppleTalk. Display the value acquired at the time of Apple Talk starting. When it is unknown, shall be -2 (unknown). ')
mltNetAtNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtNodeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtNodeNumber.setDescription('Node Number in Network of AppleTalk. Display the value acquired at the time of Apple Talk starting. When it is unknown, shall be -2 (unknown). ')
mltNetAtDesiredZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetAtDesiredZone.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtDesiredZone.setDescription("Setting value of Zone name in Apple Talk. Default shall be '*'. ")
mltNetAtCurrentZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtCurrentZone.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtCurrentZone.setDescription('Zone name to which device is operating. In environment of operation, it may differ from the above-mentioned value. ')
mltNetAtPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2), )
if mibBuilder.loadTexts: mltNetAtPrinterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtPrinterTable.setDescription('The table for showing the setup of AppleTalkPrinter. ')
mltNetAtPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetAtPrinterIfIndex"), (0, "MC2350-MIB", "mltNetAtPrinterIndex"))
if mibBuilder.loadTexts: mltNetAtPrinterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtPrinterEntry.setDescription(' ')
mltNetAtPrinterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtPrinterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtPrinterIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetAtPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtPrinterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtPrinterIndex.setDescription('The index for uniquely showing AppleTalkPrinter. The number of indexed depends on an implementation. ')
mltNetAtPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetAtPrinterName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtPrinterName.setDescription('The name of AppleTalkPrinter. When performing the operation, the name in an actual operation environment should be shown. ')
mltNetAtPrinterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtPrinterType.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetAtPrinterType.setDescription("Type of AppleTalk Printer. Default is 'LaserWriter'. ")
mltNetSmbGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1), )
if mibBuilder.loadTexts: mltNetSmbGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbGeneralTable.setDescription('The table with the basic information of SMB relation which NetworkInterface has. ')
mltNetSmbGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmbIfIndex"))
if mibBuilder.loadTexts: mltNetSmbGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbGeneralEntry.setDescription(' ')
mltNetSmbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSmbDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbDefault.setDescription('The command which restores all setup about SMB to FactoryDefault. When resetToDefault(2) is set, an agent side shall surely return Reply. In principle, when resetToDefault(2) is set, about the timing in which the setup returns to default depends on an implementation and it does not define in MIB. ')
mltNetSmbWorkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbWorkGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbWorkGroupName.setDescription("WorkGroup name in Windows Network. Default shall be 'WORKGROUP'. Only the implementation of capital letters is accepted about this item. ")
mltNetSmbHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbHostName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbHostName.setDescription('Host name in Windows Network. Default is dependent on an implementation. Only the implementation of capital letters is accepted about this item ')
mltNetSmbWinsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbWinsSupport.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbWinsSupport.setDescription('Sets up the availability of use of WINS. Default is disable(2). ')
mltNetSmbWinsPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbWinsPrimaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbWinsPrimaryServer.setDescription('Sets up PrimaryServer of Wins. Default is 0.0.0.0 ')
mltNetSmbWinsSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbWinsSecondaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbWinsSecondaryServer.setDescription('Sets up Secondary Server of Wins. Default is 0.0.0.0. ')
mltNetSmbPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2), )
if mibBuilder.loadTexts: mltNetSmbPrinterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbPrinterTable.setDescription('The table which has the information of Printer relation in SMB. ')
mltNetSmbPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmbPrinterIfIndex"), (0, "MC2350-MIB", "mltNetSmbPrinterIndex"))
if mibBuilder.loadTexts: mltNetSmbPrinterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbPrinterEntry.setDescription(' ')
mltNetSmbPrinterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbPrinterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbPrinterIfIndex.setDescription('The index for uniquely showing NetworkInterface. The value of index shall be the same value with mltNetGeneralIndex (ifIndex). ')
mltNetSmbPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbPrinterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbPrinterIndex.setDescription('Index for uniquely showing Printer in SMB. The number of indexes depends on an implementation. ')
mltNetSmbPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbPrinterName.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbPrinterName.setDescription('Printer name in SMB. Default is dependent on the implementation of a model. About the availability of Printer name change shall also be dependent on an implementation. ')
mltNetSmbPrinterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbPrinterDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mltNetSmbPrinterDescr.setDescription('Explanation of Printer. About the written contents is dependent on the implementation of a model; however, implementation of NullString is not accepted. At least input the character string which is same as Default Printer name. ')
mltJmMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmMibVersion.setDescription('The standardization version of MIB implemented in JobManagement relation. This indicates the version of the Private Job Management MIB that is implemented. There are some mib objects that indicate the Mib Version. (mltSysMibVersion, mltPrtMibVersion, mltScnMibVersion, mltNetMiIbVersion, mltJmMibVersion) But, the each mib version should be same version. Especially, the each major versions must be same. The version information of Standard MIB specification. General form is AA.BC. AA is indicating major revision, and B and C is minor revision. Decimal point is ASCII-coded period. ')
mltJmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2))
mltJmJob = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3))
mltJmReport = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4))
mltJmGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1), )
if mibBuilder.loadTexts: mltJmGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralTable.setDescription(' This table indicates the general information about Job Management. This table contains the number of active jobs, oldest/newest jobs, the number of preservation of a history, and so on. ')
mltJmGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltJmGeneralJobSetIndex"))
if mibBuilder.loadTexts: mltJmGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralEntry.setDescription(' ')
mltJmGeneralJobSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralJobSetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralJobSetIndex.setDescription(" A unique value for each job set in this MIB. JobSet shows the system of the serial number used for Job management. In managing a serial number to 1 by all the functions of a device according to 'Job management standard specifications', it sets the number of JobSets to 1. In managing a serial number for every functional classification, only the number of functional classifications shall have JobSet. ")
mltJmGeneralNumberOfActiveJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralNumberOfActiveJobs.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralNumberOfActiveJobs.setDescription(" The current number of 'active' jobs in the mltJmJobTable. when the device has no active jobs, this value should be 0. The device that cannot support to count active jobs should implement (-2) as fixed value. ")
mltJmGeneralOldestActiveJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralOldestActiveJobIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralOldestActiveJobIndex.setDescription(" The mltJmJobIndex of the oldest job that is still in one of the 'active' states. In other words, the index of the 'active' job that has been in the job tables the longest. If there are no active jobs, this value should be 0. The device that cannot support to count active jobs should implement (-2) as fixed value. ")
mltJmGeneralNewestActiveJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralNewestActiveJobIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralNewestActiveJobIndex.setDescription(" The mltJmJobIndex of the newest job that is in one of the 'active' states. In other words, the index of the 'active' job that has been most recently added to the job tables. If there are no active jobs, this value should be 0. The device that cannot support to count active jobs should implement (-2) as fixed value. ")
mltJmGeneralJobPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralJobPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralJobPersistence.setDescription("The number holding the information (Index) on Job is specified after an end of Job. About the number which should hold the history information on Job, it shall be dependent on implementation of a model. If a device can not support this, '-2'(Not Support) should be implemented. ")
mltJmGeneralJobSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mfpAll", 0), ("copy", 1), ("print", 2), ("receiveJob", 3), ("sendJob", 4), ("faxReceive", 5), ("faxSend", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralJobSetType.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmGeneralJobSetType.setDescription(' The type of JobSet. ')
mltJmJobTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: mltJmJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobTable.setDescription(' The table indicates the detailed information of jobs. ')
mltJmJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltJmJobJobSetIndex"), (0, "MC2350-MIB", "mltJmJobIndex"))
if mibBuilder.loadTexts: mltJmJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobEntry.setDescription(' ')
mltJmJobJobSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobJobSetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobJobSetIndex.setDescription(' A unique value for each job set in this MIB. JobSet shows the system of the serial number used for Job management. This index is the same as mltJmGeneralJobSetIndex. ')
mltJmJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobIndex.setDescription(' The sequential, monotonously increasing identifier index for the job generated by the device when that device accepted the job. [ This Index shall hold also in power supply On./Off. After attainment is automatically re-started from 1 to maximum. ')
mltJmJobFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("copy", 1), ("print", 2), ("receiveJob", 3), ("sendJob", 4), ("faxReceive", 5), ("faxSend", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobFunction.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobFunction.setDescription(' This value indicates the function of job sender. receiveJob(3) may include FAX and iFAX jobs. ')
mltJmJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 10, 11, 12, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("cancelRequest", 2), ("puaseRequest", 3), ("restartRequest", 4), ("pending", 10), ("pendingHeld", 11), ("pendingPaused", 12), ("processing", 20), ("sending", 21), ("receiving", 22), ("printing", 23), ("scanning", 24), ("processingStopped", 25), ("completed", 30), ("caution", 31), ("aborted", 32), ("canceled", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmJobStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobStatus.setDescription(' This value indicates the status of job. ')
mltJmJobReceivedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobReceivedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobReceivedTime.setDescription(' Registration time of Job. About TimeZone, it is not indispensable. When you cannot perform acquisition of time information, be referred to as Null (Zero-Length). ')
mltJmJobCompleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobCompleteTime.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobCompleteTime.setDescription('Completion time of Job. About TimeZone, it is not indispensable. When you await and completion time cannot be written by Job etc., be referred to as Null (Zero-Length). ')
mltJmJobPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 0), ("lowestPriority", 1), ("lowPriority", 2), ("normalPriority", 3), ("highPriority", 4), ("highestPriority", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmJobPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobPriority.setDescription(' It is used when controlling the priority of Job. When device cannot support to change of a priority, this value should be notSupported (0) as RO. When device support to change of a priority, it uses the value of 1 to 5. In this case, implementation as RW is mandatory. ')
mltJmJobDivNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDivNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobDivNumber.setDescription(' The division number of job. 0-999 is used. When the device does not perform division control, this value should be (-2). (-2) means unknown. ')
mltJmJobOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobOwner.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobOwner.setDescription(" The owner of job. If device cannot detect the name of owner , this value should be '-', of 'unknown'. The implementation of zero-length is not accepted. ")
mltJmJobType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 29, 31, 40, 51, 52))).clone(namedValues=NamedValues(("other", 0), ("eMail", 11), ("iFaxSend", 12), ("scanToServer", 13), ("scanToPC", 14), ("scanToHDD", 15), ("twain", 16), ("normalPrint", 20), ("ippPrint", 21), ("securePrint", 22), ("timerPrint", 23), ("printToHDD", 24), ("proofAndPrint", 25), ("reportPrint", 29), ("iFaxReceive", 31), ("normalCopy", 40), ("faxRecieved", 51), ("faxSend", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobType.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobType.setDescription(' The type of job. When the job type is not detected, this value should be other(0). ')
mltJmJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobName.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobName.setDescription(" The name of job. If device cannot detect job name, this value should be '-', of 'unknown'. The implementation of zero-length is not accepted. ")
mltJmJobDocPageNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDocPageNumbers.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobDocPageNumbers.setDescription(' The page numbers of job. When device cannot detect page numbers this value should be (-2). ')
mltJmJobDocCopyNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDocCopyNumbers.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobDocCopyNumbers.setDescription(' Number of copies of Job. When device cannot detect the number of copies, this value should be (-2). ')
mltJmJobPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 76, 83, 84, 93, 114, 115, 116, 117))).clone(namedValues=NamedValues(("otherPaperSize", 0), ("unknownPaperSize", 1), ("a0", 11), ("a1", 12), ("a2", 13), ("a3", 14), ("a4", 15), ("a5", 16), ("a6", 17), ("b0", 21), ("b1", 22), ("b2", 23), ("b3", 24), ("b4", 25), ("b5", 26), ("b6", 27), ("us12x14", 30), ("ledger", 31), ("us11x15", 32), ("us11x14", 33), ("comp", 34), ("us10x14", 35), ("us9-1by4x14", 36), ("legal", 37), ("us8-1by4x11-3by4", 38), ("letter", 39), ("govLetter", 40), ("quarto", 41), ("executive", 42), ("statement", 43), ("govRegal", 44), ("us3x5", 46), ("us4x6", 47), ("fls", 50), ("fls0", 51), ("fls1", 52), ("fls2", 53), ("fls3", 54), ("hagaki", 61), ("oufuku-Hagaki", 62), ("envelopeB5", 63), ("envelopeCom10", 64), ("envelopeC5", 65), ("envelopeDL", 66), ("envelopeMonarch", 67), ("envelopeC6", 68), ("youkei-0Gou", 70), ("youkei-1Gou", 71), ("youkei-4Gou", 74), ("youkei-6Gou", 76), ("choukei-3Gou", 83), ("choukei-4Gou", 84), ("kakugata-3Gou", 93), ("a3W", 114), ("a4W", 115), ("a5W", 116), ("a6W", 117)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobPageSize.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobPageSize.setDescription(' The paper/picture size of Job. In case of output job, this value shows output paper size. Incase of scanned job, this value shows the size of picture. In Job of mixed size, the last page should be displayed. ')
mltJmJobDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDestination.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobDestination.setDescription(" The destination of job. If destination is unknown, this value should be '-'. ")
mltJmJobDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDataSize.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobDataSize.setDescription(' The data size of job. A unit is KByte. In case of printing job, this value should be the size of printing date. In case of send job, this value should be not the size of picture but the size of transefered data. When the device cannot detect data size, this value should be (-2). ')
mltJmJobColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("color", 2), ("grayScale", 3), ("blackWhite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobColorMode.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobColorMode.setDescription(' The type of color mode. ')
mltJmJobFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("raw", 2), ("tiff", 3), ("tiff-MH", 4), ("tiff-MR", 5), ("tiff-MMR", 6), ("jpeg", 7), ("pdf", 8), ("pcl", 9), ("postScript", 10), ("gdi", 11), ("linePrinter", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobFormat.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobFormat.setDescription(' The data format of job. ')
mltJmJobXResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobXResolution.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobXResolution.setDescription(' Resolution of the X direction of Job. A unit is dpi. ')
mltJmJobYResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobYResolution.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobYResolution.setDescription(' Resolution of the Y direction of Job. A unit is dpi. ')
mltJmJobDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDuplex.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobDuplex.setDescription(' A duplex setting of job. ')
mltJmJobOutputPages = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobOutputPages.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobOutputPages.setDescription(" The page numbers which the output ended in Job. If a device can not recognize this information, '-2'(Not Support) should be implemented. ")
mltJmJobOutputSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobOutputSheets.setStatus('optional')
if mibBuilder.loadTexts: mltJmJobOutputSheets.setDescription(" The sheets numbers which the output ended in Job. If a device can not recognize this information, '-2'(Not Support) should be implemented. ")
mltJmJobMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(208, 209, 210, 211, 212, 214, 216, 222, 223, 224, 225, 226, 227, 230, 236, 240, 241, 242, 244, 246, 248))).clone(namedValues=NamedValues(("otherMediaType", 208), ("unknownMediaType", 209), ("plainPaper", 210), ("plainPaper2side", 211), ("plainPaperRecycled", 212), ("plainPaperExclusive", 214), ("plainPaperColor", 216), ("thick1", 222), ("thick1-2side", 223), ("thick2", 224), ("thick2-2side", 225), ("thick3", 226), ("thick3-2side", 227), ("ohp", 230), ("thin", 236), ("envelope", 240), ("envelope-2side", 241), ("label", 242), ("postCard", 244), ("letterHead", 246), ("tab", 248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmJobMediaType.setDescription(' The media type of job. ')
mltJmReportTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1), )
if mibBuilder.loadTexts: mltJmReportTable.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmReportTable.setDescription(' Table for setting up the report of job history management information. If a device does not support all this functions, this table needs not to be implemented. ')
mltJmReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltJmReportIndex"))
if mibBuilder.loadTexts: mltJmReportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmReportEntry.setDescription(' ')
mltJmReportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmReportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmReportIndex.setDescription(' A unique value for each report destinations. ')
mltJmReportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmReportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmReportAddress.setDescription(' E-mail address of report destination. ')
mltJmKeepAliveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmKeepAliveCount.setStatus('mandatory')
if mibBuilder.loadTexts: mltJmKeepAliveCount.setDescription(' The counter that controls existence of transmission to Job history information. Default shall set to 0 and, in 0, it shall not transmit to the specified address. A positive number is set when demanding transmission of Job history information. Transmission will be stopped, if it subtracts every 1 and is set to 0, whenever this counter will pass on the 1st. The side that demands transmission of Job history information makes transmission continue by rewriting this counter periodically. Moreover, when E-mail environment is not ready (grade to which the SMTP server is not set), display -1. When there is no transmitting control function, this value should be -3. ')
mltJmReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSend", 0), ("each1", 1), ("each10", 2), ("each50", 3), ("each100", 4), ("each250", 5), ("each500", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmReportInterval.setStatus('optional')
if mibBuilder.loadTexts: mltJmReportInterval.setDescription(' The number of cases that transmits Job history at once is set up. ')
mltJmReporIntervalSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSend", 0), ("each1", 1), ("each10", 2), ("each50", 3), ("each100", 4), ("each250", 5), ("each500", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmReporIntervalSelection.setStatus('optional')
if mibBuilder.loadTexts: mltJmReporIntervalSelection.setDescription(' The maximum of the number of cases to which once transmits Job history is shown. ')
mltJmReportRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmReportRequest.setStatus('optional')
if mibBuilder.loadTexts: mltJmReportRequest.setDescription(' The request command of reporting job history. default : 0 send request : 1 ')
mibBuilder.exportSymbols("MC2350-MIB", mltSysTonerLifeCounterTable=mltSysTonerLifeCounterTable, mltIppVersionIfIndex=mltIppVersionIfIndex, mltPrtFineArt=mltPrtFineArt, mltNetNwNPrinterNumber=mltNetNwNPrinterNumber, mltSysSizeFunctionIndex=mltSysSizeFunctionIndex, mltNetNwFrameEntry=mltNetNwFrameEntry, mltPrinterResolutionFeedDir=mltPrinterResolutionFeedDir, mltIppUriIndex=mltIppUriIndex, mltNetTcpipDnsServerIndex=mltNetTcpipDnsServerIndex, mltNetHttpdPort=mltNetHttpdPort, mltNetTcpipDnsHostName=mltNetTcpipDnsHostName, mltIppMediaIndex=mltIppMediaIndex, mltJmReportTable=mltJmReportTable, mltMgmt=mltMgmt, mltIppFinishingsType=mltIppFinishingsType, mltSysTonerLifeCounterEntry=mltSysTonerLifeCounterEntry, mltJmJobStatus=mltJmJobStatus, mltPrtPrintConfigTable=mltPrtPrintConfigTable, mltNetProtocolOnOff=mltNetProtocolOnOff, mltNetNwNPrinterTable=mltNetNwNPrinterTable, mltPrtCommandTable=mltPrtCommandTable, mltIppNaturalLangIndex=mltIppNaturalLangIndex, mltPaperSizeIndex=mltPaperSizeIndex, mltNetSnmpTrapEntry=mltNetSnmpTrapEntry, mltNetAppleTalk=mltNetAppleTalk, mltNetProtocolIndex=mltNetProtocolIndex, mltNetFtpd=mltNetFtpd, mltNetSnmpCommEntry=mltNetSnmpCommEntry, mltJmJobTable=mltJmJobTable, mltNetNwPsIfIndex=mltNetNwPsIfIndex, mltNetNwFrameIfIndex=mltNetNwFrameIfIndex, mltNetSmbIfIndex=mltNetSmbIfIndex, mltNetIppDefaultPortIndex=mltNetIppDefaultPortIndex, mltIppPrtMoreInfo=mltIppPrtMoreInfo, mltIppOperationSupportedTable=mltIppOperationSupportedTable, mltNetProtocolTable=mltNetProtocolTable, mltJmJobCompleteTime=mltJmJobCompleteTime, mltNetHttpd=mltNetHttpd, mltNetSmbPrinterName=mltNetSmbPrinterName, mltNetAtCurrentZone=mltNetAtCurrentZone, mltNetAtPrinterEntry=mltNetAtPrinterEntry, mltNetInterfaceType=mltNetInterfaceType, mltNetAtNodeNumber=mltNetAtNodeNumber, mltNetFtpdConfigEntry=mltNetFtpdConfigEntry, mltMib=mltMib, mltPrinterResolutionSupportedTable=mltPrinterResolutionSupportedTable, minolta=minolta, mltNetSnmp=mltNetSnmp, mltNetTcpipGateway=mltNetTcpipGateway, mltJmJobOutputPages=mltJmJobOutputPages, mltSysOutputTrayTable=mltSysOutputTrayTable, mltIppCompressionSupportedEntry=mltIppCompressionSupportedEntry, mltPrtPanelButtonPush=mltPrtPanelButtonPush, mltSysInputTraySpecialPaper=mltSysInputTraySpecialPaper, mltSysInputTrayIndex=mltSysInputTrayIndex, mltNetNwDefault=mltNetNwDefault, mltNetNwPsIndex=mltNetNwPsIndex, mltNetTcpipRawPortNumber=mltNetTcpipRawPortNumber, mltNetLpdQueueTable=mltNetLpdQueueTable, mltNetSmbGeneralTable=mltNetSmbGeneralTable, mltPrtSysConfigEntry=mltPrtSysConfigEntry, mltIppMediaColor=mltIppMediaColor, mltNetSlpPortNumber=mltNetSlpPortNumber, mltNetTcpipDnsEntry=mltNetTcpipDnsEntry, mltIppCompressionSupportedTable=mltIppCompressionSupportedTable, mltIppJobHoldUntilDefault=mltIppJobHoldUntilDefault, mltNetSmbHostName=mltNetSmbHostName, mltIppUriSupportedTable=mltIppUriSupportedTable, mltSysVersionIndex=mltSysVersionIndex, mltJobManagement=mltJobManagement, mltSysMibVersion=mltSysMibVersion, mltJmJobJobSetIndex=mltJmJobJobSetIndex, mltJmJobXResolution=mltJmJobXResolution, mltPrintQualityIfIndex=mltPrintQualityIfIndex, mltPrtSysConfigTable=mltPrtSysConfigTable, mltNetLpdGeneralTable=mltNetLpdGeneralTable, mltNetSnmpCommIndex=mltNetSnmpCommIndex, mltPrtPsFontSource=mltPrtPsFontSource, mltSysCorpURL=mltSysCorpURL, mltIppCharSetIndex=mltIppCharSetIndex, mltSysSystemCounter=mltSysSystemCounter, mltPrtPsErrorPrint=mltPrtPsErrorPrint, mltNetLpdGeneralEntry=mltNetLpdGeneralEntry, mltNetSlpBroadcastSupport=mltNetSlpBroadcastSupport, mltNetAtPrinterTable=mltNetAtPrinterTable, mltJmJobDataSize=mltJmJobDataSize, mltPrintQualitySupportedTable=mltPrintQualitySupportedTable, mltJmJobFormat=mltJmJobFormat, mltNetSmtpPurpose=mltNetSmtpPurpose, mltNetNwQueueEntry=mltNetNwQueueEntry, mltIppVersionsSupportedTable=mltIppVersionsSupportedTable, mltIppJobHoldUntilIfIndex=mltIppJobHoldUntilIfIndex, mltJmJobName=mltJmJobName, mltPrinterMib=mltPrinterMib, mltNetwork=mltNetwork, mltNetHttpdIfIndex=mltNetHttpdIfIndex, mltPrinterResolutionXFeedDir=mltPrinterResolutionXFeedDir, mltNetSlpConfigTable=mltNetSlpConfigTable, mltIppNumberUpIndex=mltIppNumberUpIndex, mltNetNwPserverTable=mltNetNwPserverTable, mltJmGeneralJobSetType=mltJmGeneralJobSetType, mltPrtPsFontEntry=mltPrtPsFontEntry, mltIppOperationSupportedEntry=mltIppOperationSupportedEntry, mltNetSnmpTrapCommunity=mltNetSnmpTrapCommunity, mltNetHttpdGeneralTable=mltNetHttpdGeneralTable, mltIppOrientationRequestedSupportedTable=mltIppOrientationRequestedSupportedTable, mltSysOutputTrayDefaultName=mltSysOutputTrayDefaultName, mltNetTcpipSubnet=mltNetTcpipSubnet, mltIppJobSheetsSupportedEntry=mltIppJobSheetsSupportedEntry, mltNetSnmpTrapIpAddress=mltNetSnmpTrapIpAddress, mltJmJobIndex=mltJmJobIndex, mltIppMediaIfIndex=mltIppMediaIfIndex, mltNetNwNPrinterIndex=mltNetNwNPrinterIndex, mltNetCommandReset=mltNetCommandReset, mltNetIppPortNumber=mltNetIppPortNumber, mltIppCompressionIndex=mltIppCompressionIndex, mltPrtPclFontIndex=mltPrtPclFontIndex, mltSysLargeSizeCount=mltSysLargeSizeCount, mltSysOutputTrayNickName=mltSysOutputTrayNickName, mltJmJobMediaType=mltJmJobMediaType, mltNetTcpipDnsIfIndex=mltNetTcpipDnsIfIndex, mltIppPrtStateReasonSuffix=mltIppPrtStateReasonSuffix, mltPrtPaperSource=mltPrtPaperSource, mltNetIppPortTable=mltNetIppPortTable, mltJmJobDocPageNumbers=mltJmJobDocPageNumbers, mltNetHttpdDescr=mltNetHttpdDescr, mltIppPrtLocation=mltIppPrtLocation, mltJmReportEntry=mltJmReportEntry, mltSysPrintFunctionIndex=mltSysPrintFunctionIndex, mltDevice=mltDevice, mltNetFtpdGeneralTable=mltNetFtpdGeneralTable, mltPrtPsFontNumber=mltPrtPsFontNumber, mltNetSnmpCommName=mltNetSnmpCommName, mltNetNwQueueStatus=mltNetNwQueueStatus, mltNetSnmpTrapIndex=mltNetSnmpTrapIndex, mltNetFtpdPort=mltNetFtpdPort, mltSysTotalJamCount=mltSysTotalJamCount, mltPrtPrintPageName=mltPrtPrintPageName, mltPrtPsFontIndex=mltPrtPsFontIndex, mltPrtPclFontSource=mltPrtPclFontSource, mltNetNwQueueName=mltNetNwQueueName, mltJmJobReceivedTime=mltJmJobReceivedTime, mltNetSnmpCommAccessRight=mltNetSnmpCommAccessRight, mltNetLpdQueueBanner=mltNetLpdQueueBanner, mltNetLpdQueueIndex=mltNetLpdQueueIndex, mltNetProtocolIfIndex=mltNetProtocolIfIndex, mltNetAtPrinterIfIndex=mltNetAtPrinterIfIndex, mltNetSlpService=mltNetSlpService, mltNetNwQueueRefIfIndex=mltNetNwQueueRefIfIndex, mltIppOrientationRequestedSupportedEntry=mltIppOrientationRequestedSupportedEntry, mltNetTcpipDnsServerAddress=mltNetTcpipDnsServerAddress, mltSysGeneralCounter=mltSysGeneralCounter, mltJmGeneralEntry=mltJmGeneralEntry, mltNetCommandStartupConfig=mltNetCommandStartupConfig, mltPrtPaperSize=mltPrtPaperSize, mltIppPrinterStateReason=mltIppPrinterStateReason, mltNetTcpipGeneral=mltNetTcpipGeneral, mltIppOperationType=mltIppOperationType, mltNetSlpTTL=mltNetSlpTTL, mltNetAtPrinterName=mltNetAtPrinterName, mltPrtFont=mltPrtFont, mltJmJobType=mltJmJobType, mltSysPrintFunctionCounterTable=mltSysPrintFunctionCounterTable, mltNetSmtpGeneralTable=mltNetSmtpGeneralTable, mltNetSmbPrinterIfIndex=mltNetSmbPrinterIfIndex, mltIppFinishingsIndex=mltIppFinishingsIndex, mltPrtSymbolSetIndex=mltPrtSymbolSetIndex, mltSysProductHelpURL=mltSysProductHelpURL, mltPrtPaperSizeEntry=mltPrtPaperSizeEntry, mltPrtCopies=mltPrtCopies, mltSysPrintFunctionDuplexCount=mltSysPrintFunctionDuplexCount, mltPrtPclFontNumber=mltPrtPclFontNumber, mltPrtCharSetID=mltPrtCharSetID, mltJmJobYResolution=mltJmJobYResolution, mltSysLargeSizeType=mltSysLargeSizeType, mltNetSmtpReplyAddress=mltNetSmtpReplyAddress, mltNetAtNetNumber=mltNetAtNetNumber, mltNetSmbGeneralEntry=mltNetSmbGeneralEntry, mltJmReportIndex=mltJmReportIndex, mltJmJobPageSize=mltJmJobPageSize, mltPrtAutoContinue=mltPrtAutoContinue, mltIppCopiesDefault=mltIppCopiesDefault, mltIppPrinterIsAcceptingJobs=mltIppPrinterIsAcceptingJobs, mltSysMib=mltSysMib, mltPrtCommandJobProceed=mltPrtCommandJobProceed, mltPrinterResolutionUnit=mltPrinterResolutionUnit, mltIppMediaName=mltIppMediaName, mltSysInputTrayName=mltSysInputTrayName, mltIppOperationIndex=mltIppOperationIndex, mltNetNwGeneralTable=mltNetNwGeneralTable, mltPrtJobLanguage=mltPrtJobLanguage, mltPrtCommandEntry=mltPrtCommandEntry, mltNetTcpipDnsTable=mltNetTcpipDnsTable, mltNetSlpGeneralTable=mltNetSlpGeneralTable, mltIppCharSetSupportedEntry=mltIppCharSetSupportedEntry, mltIppOrientationRequestedDefault=mltIppOrientationRequestedDefault, mltPrtCommandOnline=mltPrtCommandOnline, mltSysInputTrayRefIndex=mltSysInputTrayRefIndex, mltNetSlpConfigEntry=mltNetSlpConfigEntry, mltPrintQualityIndex=mltPrintQualityIndex, mltNetTcpipSupportService=mltNetTcpipSupportService, mltPrtPanelButtonDescr=mltPrtPanelButtonDescr, mltIppColorSupported=mltIppColorSupported, mltSysVersionTable=mltSysVersionTable, mltNetFtpdIfIndex=mltNetFtpdIfIndex, mltNetAtDefault=mltNetAtDefault, mltPrtPrintCommand=mltPrtPrintCommand, mltNetHttpdEnable=mltNetHttpdEnable, mltNetIppPortIndex=mltNetIppPortIndex, mltNetLpdQueueName=mltNetLpdQueueName, mltNetNwQueueIndex=mltNetNwQueueIndex, mltNetTcpipBootProtocolEnable=mltNetTcpipBootProtocolEnable, mltNetSmb=mltNetSmb, mltIppPrinterUpTime=mltIppPrinterUpTime, mltSysSizeTypeIndex=mltSysSizeTypeIndex, mltPrtRemotePanelButtonEntry=mltPrtRemotePanelButtonEntry, mltJmReportInterval=mltJmReportInterval, mltNetCommand=mltNetCommand, mltNetTcpipDnsSupport=mltNetTcpipDnsSupport, mltNetFtpdConfigIfIndex=mltNetFtpdConfigIfIndex, mltSysTotalTroubleCount=mltSysTotalTroubleCount, mltIppNumberUpIfIndex=mltIppNumberUpIfIndex, mltIppNumberUpType=mltIppNumberUpType, mltPrtPclFontName=mltPrtPclFontName, mltJmReportAddress=mltJmReportAddress, mltJmJob=mltJmJob, mltPrtMibInfo=mltPrtMibInfo, mltNetFtpdCapability=mltNetFtpdCapability, mltSysCompConfigID=mltSysCompConfigID, mltNetSnmpTrapIfIndex=mltNetSnmpTrapIfIndex, mltIppSidesSupportedEntry=mltIppSidesSupportedEntry, mltPrtSymbolSetTable=mltPrtSymbolSetTable, mltNetNwPsPrefContext=mltNetNwPsPrefContext, mltNetProtocolDescr=mltNetProtocolDescr, mltNetLpd=mltNetLpd, mltNetLpdQueueEnable=mltNetLpdQueueEnable, mltPrtSymbolSetEntry=mltPrtSymbolSetEntry, mltIppDocFormatName=mltIppDocFormatName, mltNetGeneralEntry=mltNetGeneralEntry, mltIppJobSheetsDefault=mltIppJobSheetsDefault, mltNetSmtpAccountEntry=mltNetSmtpAccountEntry, mltIppPrtState=mltIppPrtState, mltNetIppGeneral=mltNetIppGeneral, mltNetAppleTalkGeneralEntry=mltNetAppleTalkGeneralEntry, mltNetTcpipDnsDomainName=mltNetTcpipDnsDomainName, mltPrtPaper=mltPrtPaper, mltSysDuplexCount=mltSysDuplexCount, mltNetNwQueueRefPsIndex=mltNetNwQueueRefPsIndex, mltNetAppleTalkGeneralTable=mltNetAppleTalkGeneralTable, mltSysVersionCode=mltSysVersionCode, mltNetLpdEnable=mltNetLpdEnable, mltIppOrientationRequestedIndex=mltIppOrientationRequestedIndex, mltIppCompressionType=mltIppCompressionType, mltNetSmtpConnTimeout=mltNetSmtpConnTimeout)
mibBuilder.exportSymbols("MC2350-MIB", mltNetSpeedConfig=mltNetSpeedConfig, mltJmJobEntry=mltJmJobEntry, mltNetSerialNumber=mltNetSerialNumber, mltNetCommandDefault=mltNetCommandDefault, mltNetSmtpAccountTable=mltNetSmtpAccountTable, mltPrtMibVersion=mltPrtMibVersion, mltNetCommandTable=mltNetCommandTable, mltIppMediaDefault=mltIppMediaDefault, mltIppJobTemplateGeneralIfIndex=mltIppJobTemplateGeneralIfIndex, mltNetSmbPrinterTable=mltNetSmbPrinterTable, mltNetNwFrameIndex=mltNetNwFrameIndex, mltIppOrientationRequestedType=mltIppOrientationRequestedType, mltNetSmbWorkGroupName=mltNetSmbWorkGroupName, mltNetIppGeneralTable=mltNetIppGeneralTable, mltNetAtIfIndex=mltNetAtIfIndex, mltNetSmbDefault=mltNetSmbDefault, mltNetProtocol=mltNetProtocol, mltJmReporIntervalSelection=mltJmReporIntervalSelection, mltNetHttpdGeneralEntry=mltNetHttpdGeneralEntry, mltPrinterResolutionIndex=mltPrinterResolutionIndex, mltIppMediaType=mltIppMediaType, mltSysInputTrayTable=mltSysInputTrayTable, mltNetGeneralIndex=mltNetGeneralIndex, mltJmGeneralJobSetIndex=mltJmGeneralJobSetIndex, mltNetFtpdUserIndex=mltNetFtpdUserIndex, mltNetIppPortEntry=mltNetIppPortEntry, mltIppJobHoldUntilType=mltIppJobHoldUntilType, mltNetSlpIndex=mltNetSlpIndex, mltIppSidesSupportedTable=mltIppSidesSupportedTable, mltPrinterResolutionSupportedEntry=mltPrinterResolutionSupportedEntry, mltNetNwFrameType=mltNetNwFrameType, mltSysLargeDuplexCount=mltSysLargeDuplexCount, mltNetLpdPort=mltNetLpdPort, mltIppJobSheetsSupportedTable=mltIppJobSheetsSupportedTable, mltNetSlpMTU=mltNetSlpMTU, mltSysInputTrayPaperAttribute=mltSysInputTrayPaperAttribute, mltNetIppJobTemplateGeneralTable=mltNetIppJobTemplateGeneralTable, mltIppDocFormatIndex=mltIppDocFormatIndex, mltIppPrtStateReasonIfIndex=mltIppPrtStateReasonIfIndex, mltNetFtpdUserPassWd=mltNetFtpdUserPassWd, mltPrinter=mltPrinter, mltIppPrtStateReasonIndex=mltIppPrtStateReasonIndex, mltNetIppJobTemplateGeneralEntry=mltNetIppJobTemplateGeneralEntry, mltNetFtpdConfigTable=mltNetFtpdConfigTable, mltIppJobSheetsIndex=mltIppJobSheetsIndex, mltNetNwPsPrefTree=mltNetNwPsPrefTree, mltNetIppGeneralIfIndex=mltNetIppGeneralIfIndex, mltNetTcpipUseBootProtocol=mltNetTcpipUseBootProtocol, mltPaperFeedDir=mltPaperFeedDir, mltSysPrintFunctionLargeSizeCount=mltSysPrintFunctionLargeSizeCount, mltJmJobDestination=mltJmJobDestination, mltNetNwPsName=mltNetNwPsName, mltPrtPrintPageIndex=mltPrtPrintPageIndex, mltSysSupportedCounterType=mltSysSupportedCounterType, mltPaperSizeName=mltPaperSizeName, mltIppPrtStateReasonsTable=mltIppPrtStateReasonsTable, mltSysVersionEntry=mltSysVersionEntry, mltSysDuplexCountMode=mltSysDuplexCountMode, mltJmGeneral=mltJmGeneral, mltNetLpdQueueFilter=mltNetLpdQueueFilter, mltNetNwNPrinterEntry=mltNetNwNPrinterEntry, mltIppMediaSupportedEntry=mltIppMediaSupportedEntry, mltSysSuppliesInfo=mltSysSuppliesInfo, mltNetMibVersion=mltNetMibVersion, mltSysColorCountSupportType=mltSysColorCountSupportType, mltSysVerDescr=mltSysVerDescr, mltNetFtpdDescr=mltNetFtpdDescr, mltSysSendTotalCount=mltSysSendTotalCount, mltNetFirmVersion=mltNetFirmVersion, mltNetTcpipDefault=mltNetTcpipDefault, mltIppDocFormatDefaultIndex=mltIppDocFormatDefaultIndex, mltNetSmbWinsSupport=mltNetSmbWinsSupport, mltPrtConfig=mltPrtConfig, mltPrtPsFontTable=mltPrtPsFontTable, mltNetTcpipAddressServer=mltNetTcpipAddressServer, mltIppMediaSupportedTable=mltIppMediaSupportedTable, mltPrtPrintPageTable=mltPrtPrintPageTable, mltIppCharSetIfIndex=mltIppCharSetIfIndex, mltNetSmbPrinterEntry=mltNetSmbPrinterEntry, mltIppPageRangesSupported=mltIppPageRangesSupported, mltIppNaturalLanguageSupportedEntry=mltIppNaturalLanguageSupportedEntry, mltSysPriorityDevice=mltSysPriorityDevice, mltIppPrinterCurrentTime=mltIppPrinterCurrentTime, mltSysVerName=mltSysVerName, mltSysVersion=mltSysVersion, mltTonerTypeCount=mltTonerTypeCount, mltIppJobSheetsIfIndex=mltIppJobSheetsIfIndex, mltNetNwPsPrefFServer=mltNetNwPsPrefFServer, mltIppPrtDescGeneralIfIndex=mltIppPrtDescGeneralIfIndex, mltIppNaturalLangIfIndex=mltIppNaturalLangIfIndex, mltNetSmbWinsPrimaryServer=mltNetSmbWinsPrimaryServer, mltNetTcpipIfIndex=mltNetTcpipIfIndex, mltIppDocFormatIfIndex=mltIppDocFormatIfIndex, mltJmGeneralJobPersistence=mltJmGeneralJobPersistence, mltSysSizeType=mltSysSizeType, mltNetSmtpEnable=mltNetSmtpEnable, mltNetSmbWinsSecondaryServer=mltNetSmbWinsSecondaryServer, mltNetSmtpGeneralEntry=mltNetSmtpGeneralEntry, mltNetSmtpAccountIfIndex=mltNetSmtpAccountIfIndex, mltJmJobFunction=mltJmJobFunction, mltNetSmtpIfIndex=mltNetSmtpIfIndex, mltNetSmtpDescription=mltNetSmtpDescription, mltJmReport=mltJmReport, mltIppSidesType=mltIppSidesType, mltIppNaturalLanguageSupportedTable=mltIppNaturalLanguageSupportedTable, mltSysPrintFunctionTotalCount=mltSysPrintFunctionTotalCount, mltNetNwPserverEntry=mltNetNwPserverEntry, mltNetFtpdEnable=mltNetFtpdEnable, mltIppNaturalLanguageConfiguredIndex=mltIppNaturalLanguageConfiguredIndex, mltSysContact=mltSysContact, mltPrtPaperTimeOut=mltPrtPaperTimeOut, mltIppCharSetSupportedTable=mltIppCharSetSupportedTable, mltIppJobSheetsType=mltIppJobSheetsType, mltIppOperationEnable=mltIppOperationEnable, mltNetCommandEntry=mltNetCommandEntry, mltNetProtocolType=mltNetProtocolType, mltNetworkMib=mltNetworkMib, mltNetSmbPrinterIndex=mltNetSmbPrinterIndex, mltSysPrintFunctionLargeDuplexCount=mltSysPrintFunctionLargeDuplexCount, mltIppJobHoldUntilIndex=mltIppJobHoldUntilIndex, mltNetFtpdUser=mltNetFtpdUser, mltNetSlpGeneralEntry=mltNetSlpGeneralEntry, mltIppMediaInputTray=mltIppMediaInputTray, mltNetSlp=mltNetSlp, mltNetNwNPrinterName=mltNetNwNPrinterName, mltIppDocFormatSupportedEntry=mltIppDocFormatSupportedEntry, mltNetNwNPrinterIfIndex=mltNetNwNPrinterIfIndex, mltPrtRemotePanelButtonTable=mltPrtRemotePanelButtonTable, mltSysCounterConfig=mltSysCounterConfig, mltNetAtPrinterType=mltNetAtPrinterType, mltIppUriSupportedEntry=mltIppUriSupportedEntry, mltNetProtocolEntry=mltNetProtocolEntry, mltSysTonerTypeIndex=mltSysTonerTypeIndex, mltIppUriIfIndex=mltIppUriIfIndex, mltIppPrtName=mltIppPrtName, mltJmJobOwner=mltJmJobOwner, mltIppNumberUpDefault=mltIppNumberUpDefault, mltPrtPclFontTable=mltPrtPclFontTable, mltNetLpdQueueIfIndex=mltNetLpdQueueIfIndex, mltNetFtpdGeneralEntry=mltNetFtpdGeneralEntry, mltIppFinishingsSupportedTable=mltIppFinishingsSupportedTable, mltIppNaturalLangName=mltIppNaturalLangName, mltNetNwPrintMode=mltNetNwPrintMode, mltPrtPaperSizeTable=mltPrtPaperSizeTable, mltNetAtDesiredZone=mltNetAtDesiredZone, mltPrtCommand=mltPrtCommand, mltNetSnmpTrapTable=mltNetSnmpTrapTable, mltNetNetWare=mltNetNetWare, mltPrtPanelButtonIndex=mltPrtPanelButtonIndex, mltJmJobColorMode=mltJmJobColorMode, mltSysOutputTrayType=mltSysOutputTrayType, mltNetSlpConfigIfIndex=mltNetSlpConfigIfIndex, mltNetIppPrtDescrAttribute=mltNetIppPrtDescrAttribute, mltIppFinishingsSupportedEntry=mltIppFinishingsSupportedEntry, mltInterface=mltInterface, mltPrintQualityType=mltPrintQualityType, mltSysPrintFunctionType=mltSysPrintFunctionType, mltNetNwGeneralEntry=mltNetNwGeneralEntry, mltIppJobPriorityDefault=mltIppJobPriorityDefault, mltSysContactSiteName=mltSysContactSiteName, mltNetNwFrameTypeConfig=mltNetNwFrameTypeConfig, mltSysGeneralInfo=mltSysGeneralInfo, mltNetIfDescr=mltNetIfDescr, mltNetSmtpServerAddress=mltNetSmtpServerAddress, mltSysOutputTrayIndex=mltSysOutputTrayIndex, mltIppUriAuthentication=mltIppUriAuthentication, mltSysOutputTrayRefIndex=mltSysOutputTrayRefIndex, mltNetSupportedConnector=mltNetSupportedConnector, mltIppVersionsSupportedEntry=mltIppVersionsSupportedEntry, mltSysTonerType=mltSysTonerType, mltIppCopiesMaxSupported=mltIppCopiesMaxSupported, mltIppCharSetCode=mltIppCharSetCode, mltIppVersionType=mltIppVersionType, mltSysInputTrayCapacitySence=mltSysInputTrayCapacitySence, mltSysInputTrayEntry=mltSysInputTrayEntry, mltPrtRemotePanel=mltPrtRemotePanel, mltSysSizeCounterEntry=mltSysSizeCounterEntry, mltPrtPrintPageEntry=mltPrtPrintPageEntry, mltIppSidesIfIndex=mltIppSidesIfIndex, mltNetTcpipGeneralEntry=mltNetTcpipGeneralEntry, mltNetNwQueueTable=mltNetNwQueueTable, mltSystem=mltSystem, mltPrinterResolutionIfIndex=mltPrinterResolutionIfIndex, mltNetSlpLifetime=mltNetSlpLifetime, mltNetSmtpClient=mltNetSmtpClient, mltSysSizeFunction=mltSysSizeFunction, mltNetNwPsMode=mltNetNwPsMode, mltNetSlpEnable=mltNetSlpEnable, mltIppVersionIndex=mltIppVersionIndex, mltJmKeepAliveCount=mltJmKeepAliveCount, mltNetSnmpCommTable=mltNetSnmpCommTable, mltIppPdlOverrideSupported=mltIppPdlOverrideSupported, mltNetSnmpTrapIpxAddress=mltNetSnmpTrapIpxAddress, mltPrtSymbolSetName=mltPrtSymbolSetName, mltIppJobHoldUntilSupportedEntry=mltIppJobHoldUntilSupportedEntry, mltSysPrintFunctionColorType=mltSysPrintFunctionColorType, mltIppFinishingsDefault=mltIppFinishingsDefault, mltJmJobDivNumber=mltJmJobDivNumber, mltIppSidesDefault=mltIppSidesDefault, mltNetNwNetworkNumber=mltNetNwNetworkNumber, mltJmJobDocCopyNumbers=mltJmJobDocCopyNumbers, mltIppFinishingsIfIndex=mltIppFinishingsIfIndex, mltPrtPrintConfigEntry=mltPrtPrintConfigEntry, mltSysSizeCount=mltSysSizeCount, mltIppNumberUpSupportedTable=mltIppNumberUpSupportedTable, mltIppUri=mltIppUri, mltNetIppPrtDescGeneralEntry=mltNetIppPrtDescGeneralEntry, mltNetGeneral=mltNetGeneral, mltJmGeneralTable=mltJmGeneralTable, mltSysComponent=mltSysComponent, mltPrtPowerSave=mltPrtPowerSave, mltNetLpdIfIndex=mltNetLpdIfIndex, mltSysCounter=mltSysCounter, mltSysLargeSizeCountMode=mltSysLargeSizeCountMode, mltNetIppServiceEnable=mltNetIppServiceEnable, mltNetGeneralTable=mltNetGeneralTable, mltPrtPclFontEntry=mltPrtPclFontEntry, mltIppCharSetName=mltIppCharSetName, mltIppJobHoldUntilSupportedTable=mltIppJobHoldUntilSupportedTable, mltNetAtPrinterIndex=mltNetAtPrinterIndex, mltIppJobPrioritySupported=mltIppJobPrioritySupported, mltNetCommandDownLoad=mltNetCommandDownLoad, mltPrtPsFontName=mltPrtPsFontName, mltIppPrtStateReasonsEntry=mltIppPrtStateReasonsEntry, mltNetNwFrameTable=mltNetNwFrameTable, mltJmGeneralNewestActiveJobIndex=mltJmGeneralNewestActiveJobIndex, mltNetCommandIfIndex=mltNetCommandIfIndex, mltNetLpdQueueDescr=mltNetLpdQueueDescr, mltNetProtocolVer=mltNetProtocolVer, mltNetNwIfIndex=mltNetNwIfIndex, mltNetIpp=mltNetIpp, mltNetTcpipAddress=mltNetTcpipAddress, mltIppDocFormatSupportedTable=mltIppDocFormatSupportedTable, mltNetCommandPrintNicConfig=mltNetCommandPrintNicConfig, mltPrtCommandJobCancel=mltPrtCommandJobCancel, mltNetIppGeneralEntry=mltNetIppGeneralEntry, mltIppCompressionIfIndex=mltIppCompressionIfIndex, mltNetLpdQueueEntry=mltNetLpdQueueEntry, mltJmJobDuplex=mltJmJobDuplex, mltJmGeneralNumberOfActiveJobs=mltJmGeneralNumberOfActiveJobs, mltJmJobPriority=mltJmJobPriority, mltSysPrintFunctionColorIndex=mltSysPrintFunctionColorIndex, mltIppPrintQualityDefault=mltIppPrintQualityDefault, mltNetIppPortIfIndex=mltNetIppPortIfIndex, mltJmMibVersion=mltJmMibVersion, CodedCharSet=CodedCharSet, mltPrintQualitySupportedEntry=mltPrintQualitySupportedEntry, mltNetCurrentConnector=mltNetCurrentConnector, mltNetNwPsPasswd=mltNetNwPsPasswd, mltNetSnmpTrapOnOff=mltNetSnmpTrapOnOff, mltNetTcpipGeneralTable=mltNetTcpipGeneralTable, mltIppNumberUpSupportedEntry=mltIppNumberUpSupportedEntry, mltNetSmtpAccountIndex=mltNetSmtpAccountIndex, mltSysSizeCounterTable=mltSysSizeCounterTable)
mibBuilder.exportSymbols("MC2350-MIB", mltNetIppPrtDescGeneralTable=mltNetIppPrtDescGeneralTable, mltSysContactInfo=mltSysContactInfo, mltSysOutputTrayEntry=mltSysOutputTrayEntry, mltNetHardwareAddress=mltNetHardwareAddress, mltIppQueuedJobCount=mltIppQueuedJobCount, mltIppSidesIndex=mltIppSidesIndex, mltNetNwPsPollingRate=mltNetNwPsPollingRate, mltSysPrintFunctionCounterEntry=mltSysPrintFunctionCounterEntry, mltJmReportRequest=mltJmReportRequest, mltNetTcpip=mltNetTcpip, mltIppOrientationRequestedIfIndex=mltIppOrientationRequestedIfIndex, mltNetSmtpPort=mltNetSmtpPort, mltSysTotalCount=mltSysTotalCount, mltJmJobOutputSheets=mltJmJobOutputSheets, mltIppUriSecurity=mltIppUriSecurity, mltIppPrinterResolutionDefault=mltIppPrinterResolutionDefault, mltNetIppJobTemplateAttribute=mltNetIppJobTemplateAttribute, mltSysCurrentDateTime=mltSysCurrentDateTime, mltNetSmtpFromAddress=mltNetSmtpFromAddress, mltIppOperationIfIndex=mltIppOperationIfIndex, mltPrtTonerSave=mltPrtTonerSave, mltPrtPanelButtonName=mltPrtPanelButtonName, mltNetSlpScope=mltNetSlpScope, mltNetSlpIfIndex=mltNetSlpIfIndex, mltJob=mltJob, mltDirectory=mltDirectory, mltJmGeneralOldestActiveJobIndex=mltJmGeneralOldestActiveJobIndex, mltNetSmbPrinterDescr=mltNetSmbPrinterDescr, mltIppCharSetConfiguredIndex=mltIppCharSetConfiguredIndex)
