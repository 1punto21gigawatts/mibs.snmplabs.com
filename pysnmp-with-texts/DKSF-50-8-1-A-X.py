#
# PySNMP MIB module DKSF-50-8-1-A-X (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DKSF-50-8-1-A-X
# Produced by pysmi-0.3.4 at Wed May  1 12:47:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
Counter32, enterprises, MibIdentifier, Counter64, ModuleIdentity, mib_2, TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, NotificationType, iso, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "MibIdentifier", "Counter64", "ModuleIdentity", "mib-2", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "NotificationType", "iso", "Gauge32", "Bits")
TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
netPing = ModuleIdentity((1, 3, 6, 1, 4, 1, 25728, 50))
netPing.setRevisions(('2010-04-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netPing.setRevisionsDescriptions(('SMIv2-style rewrite',))
if mibBuilder.loadTexts: netPing.setLastUpdated('201004140000Z')
if mibBuilder.loadTexts: netPing.setOrganization('Alentis Electronics')
if mibBuilder.loadTexts: netPing.setContactInfo('developers@netping.ru')
if mibBuilder.loadTexts: netPing.setDescription('Generic MIB for NetPing remote sensing and control')
lightcom = MibIdentifier((1, 3, 6, 1, 4, 1, 25728))
npPwr = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 5800))
npPwrTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 5800, 3), )
if mibBuilder.loadTexts: npPwrTable.setStatus('current')
if mibBuilder.loadTexts: npPwrTable.setDescription('Watchdog and outlet/relay control table')
npPwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1), ).setIndexNames((0, "DKSF-50-8-1-A-X", "npPwrChannelN"))
if mibBuilder.loadTexts: npPwrEntry.setStatus('current')
if mibBuilder.loadTexts: npPwrEntry.setDescription('Watchdog and outlet/relay control table row')
npPwrChannelN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrChannelN.setStatus('current')
if mibBuilder.loadTexts: npPwrChannelN.setDescription('The id of watchdog/power channel')
npPwrStartReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npPwrStartReset.setStatus('current')
if mibBuilder.loadTexts: npPwrStartReset.setDescription('Write 1 to start reset On read: 0 - normal operation 1 - reset is active 2 - reboot pause is active')
npPwrManualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("watchdog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npPwrManualMode.setStatus('current')
if mibBuilder.loadTexts: npPwrManualMode.setDescription('Mode of power channel 0 - manual off 1 - manual on 2 - watchdog')
npPwrResetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npPwrResetsCounter.setStatus('current')
if mibBuilder.loadTexts: npPwrResetsCounter.setDescription('Counter of watchdog resets Write 0 to clear.')
npPwrRepeatingResetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrRepeatingResetsCounter.setStatus('current')
if mibBuilder.loadTexts: npPwrRepeatingResetsCounter.setDescription('Counter of continous failed watchdog resets')
npPwrMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrMemo.setStatus('current')
if mibBuilder.loadTexts: npPwrMemo.setDescription('Watchdog/power channel memo')
npThermo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800))
npThermoTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8800, 1), )
if mibBuilder.loadTexts: npThermoTable.setStatus('current')
if mibBuilder.loadTexts: npThermoTable.setDescription('Thermo Sensors Table')
npThermoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1), ).setIndexNames((0, "DKSF-50-8-1-A-X", "npThermoSensorN"))
if mibBuilder.loadTexts: npThermoEntry.setStatus('current')
if mibBuilder.loadTexts: npThermoEntry.setDescription('Thermo Sensors Table Row')
npThermoSensorN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoSensorN.setStatus('current')
if mibBuilder.loadTexts: npThermoSensorN.setDescription('The id of temperature sensor, 1 to 8')
npThermoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoValue.setStatus('current')
if mibBuilder.loadTexts: npThermoValue.setDescription('Temperature, deg.C')
npThermoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("failed", 0), ("low", 1), ("norm", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoStatus.setStatus('current')
if mibBuilder.loadTexts: npThermoStatus.setDescription('Temperature status (0=fault, 1=underheat, 2=normal, 3=overheat)')
npThermoLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoLow.setStatus('current')
if mibBuilder.loadTexts: npThermoLow.setDescription('Bottom margin of normal temperature range, deg.C')
npThermoHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoHigh.setStatus('current')
if mibBuilder.loadTexts: npThermoHigh.setDescription('Top margin of normal temperature range, deg.C')
npThermoMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoMemo.setStatus('current')
if mibBuilder.loadTexts: npThermoMemo.setDescription('T channel memo')
npIo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900))
npIoTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8900, 1), )
if mibBuilder.loadTexts: npIoTable.setStatus('current')
if mibBuilder.loadTexts: npIoTable.setDescription('Digital Input/output Table')
npIoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1), ).setIndexNames((0, "DKSF-50-8-1-A-X", "npIoLineN"))
if mibBuilder.loadTexts: npIoEntry.setStatus('current')
if mibBuilder.loadTexts: npIoEntry.setDescription('Digital Input/output Table Row')
npIoLineN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoLineN.setStatus('current')
if mibBuilder.loadTexts: npIoLineN.setDescription('Number of IO line, from 1 to max supported')
npIoLevelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoLevelIn.setStatus('current')
if mibBuilder.loadTexts: npIoLevelIn.setDescription('Input level, 0 or 1')
npIoLevelOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoLevelOut.setStatus('current')
if mibBuilder.loadTexts: npIoLevelOut.setDescription('Output level, 0 or 1')
npIoMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoMemo.setStatus('current')
if mibBuilder.loadTexts: npIoMemo.setDescription('IO line memo')
npCurLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8300))
npCurLoopTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8300, 1), )
if mibBuilder.loadTexts: npCurLoopTable.setStatus('current')
if mibBuilder.loadTexts: npCurLoopTable.setDescription('Current loop sensors Table')
npCurLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1), ).setIndexNames((0, "DKSF-50-8-1-A-X", "npCurLoopN"))
if mibBuilder.loadTexts: npCurLoopEntry.setStatus('current')
if mibBuilder.loadTexts: npCurLoopEntry.setDescription('Current loop sensors Table Row')
npCurLoopN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopN.setStatus('current')
if mibBuilder.loadTexts: npCurLoopN.setDescription('Index of current loop, 1 to max supported')
npCurLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("alert", 1), ("cut", 2), ("short", 3), ("notPowered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopStatus.setStatus('current')
if mibBuilder.loadTexts: npCurLoopStatus.setDescription('Status of the loop 0=Normal, 1=Alert, 2=Cut, 3=Short, 4=Not Powered')
npCurLoopI = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopI.setStatus('current')
if mibBuilder.loadTexts: npCurLoopI.setDescription('Loop current, mA')
npCurLoopV = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopV.setStatus('current')
if mibBuilder.loadTexts: npCurLoopV.setDescription('Voltage drop on the loop, mV')
npCurLoopR = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npCurLoopR.setStatus('current')
if mibBuilder.loadTexts: npCurLoopR.setDescription('Resistance of the loop, Ohm')
npCurLoopPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8300, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("cyclePower", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npCurLoopPower.setStatus('current')
if mibBuilder.loadTexts: npCurLoopPower.setDescription('Control of loop power 0=Off, 1=On, 2=reset by off/on power')
npRelHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400))
npRelHumSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 2))
npRelHumSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("error", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorStatus.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorStatus.setDescription("Status of the Rel.Humidity Sensor One 0=Normal, 1=Error or Sensor isn't connected")
npRelHumSensorValueH = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorValueH.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorValueH.setDescription('Relative humidity value, %')
npRelHumSensorValueT = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorValueT.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorValueT.setDescription('Sensor temperature, deg.C')
mibBuilder.exportSymbols("DKSF-50-8-1-A-X", npCurLoopN=npCurLoopN, npIoEntry=npIoEntry, npThermoEntry=npThermoEntry, npCurLoopR=npCurLoopR, npThermoTable=npThermoTable, lightcom=lightcom, npIoTable=npIoTable, npIoLineN=npIoLineN, npPwrChannelN=npPwrChannelN, npIo=npIo, npCurLoopV=npCurLoopV, npIoLevelOut=npIoLevelOut, npPwrResetsCounter=npPwrResetsCounter, npCurLoopEntry=npCurLoopEntry, npPwr=npPwr, npThermoStatus=npThermoStatus, npThermoMemo=npThermoMemo, npRelHumSensorValueH=npRelHumSensorValueH, npRelHumSensorValueT=npRelHumSensorValueT, npPwrRepeatingResetsCounter=npPwrRepeatingResetsCounter, npIoMemo=npIoMemo, npThermoValue=npThermoValue, npRelHumidity=npRelHumidity, npPwrMemo=npPwrMemo, npThermoSensorN=npThermoSensorN, npThermoLow=npThermoLow, npRelHumSensorStatus=npRelHumSensorStatus, npCurLoopStatus=npCurLoopStatus, PYSNMP_MODULE_ID=netPing, netPing=netPing, npPwrManualMode=npPwrManualMode, npCurLoop=npCurLoop, npCurLoopPower=npCurLoopPower, npPwrTable=npPwrTable, npCurLoopI=npCurLoopI, npIoLevelIn=npIoLevelIn, npThermoHigh=npThermoHigh, npRelHumSensor=npRelHumSensor, npCurLoopTable=npCurLoopTable, npPwrEntry=npPwrEntry, npPwrStartReset=npPwrStartReset, npThermo=npThermo)
