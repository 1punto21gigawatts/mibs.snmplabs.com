#
# PySNMP MIB module VTGW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VTGW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, iso, NotificationType, Counter64, ModuleIdentity, ObjectIdentity, enterprises, IpAddress, MibIdentifier, Bits, Integer32, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "iso", "NotificationType", "Counter64", "ModuleIdentity", "ObjectIdentity", "enterprises", "IpAddress", "MibIdentifier", "Bits", "Integer32", "Gauge32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vocaltec = MibIdentifier((1, 3, 6, 1, 4, 1, 2516))
vtg = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2))
tgw = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 1))
vnmvgk = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 2))
hasp = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 3))
audio = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 4))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 5))
ivr = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 6))
telephonyProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7))
stat = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 8))
trapParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 9))
analog = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7, 1))
enm = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2))
gc = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7, 3))
pri = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7, 4))
erbium = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7, 5))
iridium = MibIdentifier((1, 3, 6, 1, 4, 1, 2516, 2, 7, 7))
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: softwareVersion.setDescription('The VTGW software version number.')
cti2Service = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cti2Service.setStatus('mandatory')
if mibBuilder.loadTexts: cti2Service.setDescription('CTI2 service name.')
resloveMode = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gatekeeper", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resloveMode.setStatus('mandatory')
if mibBuilder.loadTexts: resloveMode.setDescription('Resolving mode of the destination gateway IP address: can be done by a gatekeeper or localy at the VTGW by dialing plan.')
telephonyProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("analog", 1), ("pri", 2), ("enm", 3), ("gc", 4), ("erbium", 5), ("carbon", 6), ("iridium", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: telephonyProtocol.setDescription('The telephony protocol used by VTGW.')
internetProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("classic", 1), ("h323", 2), ("dm3", 3), ("cobalt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: internetProtocol.setDescription('The Internet protocol used by VTGW.')
universalLinesNumber = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalLinesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: universalLinesNumber.setDescription('The maximum number of universal (vioce and fax capability) lines,that can be licensed on this VTGW.')
voiceLinesNumber = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLinesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: voiceLinesNumber.setDescription('The maximum number of voice lines,that can be licensed on this VTGW.')
faxLinesNumber = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxLinesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: faxLinesNumber.setDescription('The maximum number of fax lines,that can be licensed on this VTGW.')
sncLinesNumber = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncLinesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sncLinesNumber.setDescription('The maximum number of Surf & Call lines,that can be licensed on this VTGW.')
iPhoneLinesNumber = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneLinesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneLinesNumber.setDescription('The maximum number of iPhone lines,that can be licensed on this VTGW.')
dialerLinesNumber = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerLinesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dialerLinesNumber.setDescription('The maximum number of Dialer lines,that can be licensed on this VTGW.')
cti2ServicePollingQuantum = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cti2ServicePollingQuantum.setStatus('mandatory')
if mibBuilder.loadTexts: cti2ServicePollingQuantum.setDescription('CTI2 service polling quantum (sec).')
rcamPort = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcamPort.setStatus('mandatory')
if mibBuilder.loadTexts: rcamPort.setDescription('VNM (RCAM) port.')
id = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: id.setStatus('mandatory')
if mibBuilder.loadTexts: id.setDescription('VGK ID.')
alias = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alias.setStatus('mandatory')
if mibBuilder.loadTexts: alias.setDescription('VGK Alias.')
time2Live = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: time2Live.setStatus('mandatory')
if mibBuilder.loadTexts: time2Live.setDescription('Time in seconds to live acknowledge to VGK.')
loginSetAttempts = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginSetAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: loginSetAttempts.setDescription('Login attempts to VGK within a set.')
timeB4LoginAttempt = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeB4LoginAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: timeB4LoginAttempt.setDescription('Time in seconds before the next login attempt to VGK within a set.')
timeB4LoginSet = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeB4LoginSet.setStatus('mandatory')
if mibBuilder.loadTexts: timeB4LoginSet.setDescription('Time in seconds before the next login set to VGK.')
rasPort = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasPort.setStatus('mandatory')
if mibBuilder.loadTexts: rasPort.setDescription('The port for connecting the VGK.')
codecsPriorities = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codecsPriorities.setStatus('mandatory')
if mibBuilder.loadTexts: codecsPriorities.setDescription('Prioritized list of active codecs ex: 7 1 2 5 8 20')
preferredCodec = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferredCodec.setStatus('mandatory')
if mibBuilder.loadTexts: preferredCodec.setDescription('Preferred codec.')
outputGain = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputGain.setStatus('mandatory')
if mibBuilder.loadTexts: outputGain.setDescription('Output volume gain.')
inputGain = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputGain.setStatus('mandatory')
if mibBuilder.loadTexts: inputGain.setDescription('Input volume gain.')
codecsTable = MibTable((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5), )
if mibBuilder.loadTexts: codecsTable.setStatus('mandatory')
if mibBuilder.loadTexts: codecsTable.setDescription('codecs array of structures.')
codecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1), ).setIndexNames((0, "VTGW-MIB", "coder"))
if mibBuilder.loadTexts: codecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: codecEntry.setDescription('Codec entry.')
coder = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("g711a", 1), ("g711m", 2), ("g723", 3), ("g729", 4), ("gsm", 5), ("g726", 6), ("g727", 7), ("g728", 8), ("vsc", 9), ("vhqc4800", 10), ("vhqc5600", 11), ("vhqc6400", 12), ("vhqc7200", 13), ("vhqc8000", 14), ("vhqc8800", 15), ("vhqc9600", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coder.setStatus('mandatory')
if mibBuilder.loadTexts: coder.setDescription('Coder number.')
vadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vadEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vadEnable.setDescription('VAD enable.')
coderRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coderRate.setStatus('mandatory')
if mibBuilder.loadTexts: coderRate.setDescription('Coder Rate.')
framesPerPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: framesPerPkt.setStatus('mandatory')
if mibBuilder.loadTexts: framesPerPkt.setDescription('Frames Per Pkt.')
framesSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: framesSize.setStatus('mandatory')
if mibBuilder.loadTexts: framesSize.setDescription('Frames Size.')
jitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jitter.setStatus('mandatory')
if mibBuilder.loadTexts: jitter.setDescription('Jitter Min. Delay.')
jitterOptFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jitterOptFactor.setStatus('mandatory')
if mibBuilder.loadTexts: jitterOptFactor.setDescription('Jitter Opt Factor.')
coderRedundency = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 4, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coderRedundency.setStatus('mandatory')
if mibBuilder.loadTexts: coderRedundency.setDescription('CoderRedundency.')
portsTable = MibTable((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1), )
if mibBuilder.loadTexts: portsTable.setStatus('mandatory')
if mibBuilder.loadTexts: portsTable.setDescription('Ports array of structures.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1), ).setIndexNames((0, "VTGW-MIB", "portNumber"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('Port entry.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portNumber.setDescription('Port number.')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setStatus('mandatory')
if mibBuilder.loadTexts: portEnable.setDescription('Port enable.')
connectedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pbx", 1), ("pstn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectedTo.setStatus('mandatory')
if mibBuilder.loadTexts: connectedTo.setDescription('Connected to.')
boundDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("bidirectional", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boundDirection.setStatus('mandatory')
if mibBuilder.loadTexts: boundDirection.setDescription('Bound direction.')
dialingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dialing-dtmf", 1), ("dialing-pulse", 2), ("dialing-mf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingMode.setStatus('mandatory')
if mibBuilder.loadTexts: dialingMode.setDescription('Dialing mode.')
detectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("detection-dtmf", 1), ("detection-lpd", 2), ("detection-apd", 3), ("detection-mf", 4), ("detection-dpd", 5), ("detection-dpd2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: detectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: detectionMode.setDescription('Detection mode.')
ivrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("numberphone", 1), ("numberpin", 2), ("phonepin", 3), ("pbx", 4), ("ani", 5), ("dnis", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ivrMode.setStatus('mandatory')
if mibBuilder.loadTexts: ivrMode.setDescription('IVR mode.')
repeatIVR = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeatIVR.setStatus('mandatory')
if mibBuilder.loadTexts: repeatIVR.setDescription('Repeat IVR.')
overSilenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overSilenceTime.setStatus('mandatory')
if mibBuilder.loadTexts: overSilenceTime.setDescription('OverSilence time.')
comment = MibTableColumn((1, 3, 6, 1, 4, 1, 2516, 2, 5, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comment.setStatus('mandatory')
if mibBuilder.loadTexts: comment.setDescription('Comment.')
interDigitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interDigitTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: interDigitTimeout.setDescription('Inter digit timeout.')
digitsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitsTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: digitsTimeout.setDescription('Timeout for all digits.')
channelSelectionOrder = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSelectionOrder.setStatus('mandatory')
if mibBuilder.loadTexts: channelSelectionOrder.setDescription('Order in which the selection is done - Up (1) or Down (2) only.')
glareMode = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yield", 1), ("stand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: glareMode.setStatus('mandatory')
if mibBuilder.loadTexts: glareMode.setDescription('Glare mode selection - YIELD (1) or STAND (2) only.')
ringCount = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringCount.setStatus('mandatory')
if mibBuilder.loadTexts: ringCount.setDescription('Number of rings before returning the ring event.')
volume = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: volume.setStatus('mandatory')
if mibBuilder.loadTexts: volume.setDescription('Engine volume control.')
idle = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idle.setStatus('mandatory')
if mibBuilder.loadTexts: idle.setDescription('Idle bits, default=00--')
outOfService = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outOfService.setStatus('mandatory')
if mibBuilder.loadTexts: outOfService.setDescription('Out Of Service bits, default=1101')
seizeOutbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seizeOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: seizeOutbound.setDescription('Seize Outbound bits, default=11--')
seizeInbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seizeInbound.setStatus('mandatory')
if mibBuilder.loadTexts: seizeInbound.setDescription('Seize Inbound bits, default=11--')
seizeAckOutbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seizeAckOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: seizeAckOutbound.setDescription('Seize Acknowledge Outbound bits, default=W---')
seizeAckInbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seizeAckInbound.setStatus('mandatory')
if mibBuilder.loadTexts: seizeAckInbound.setDescription('Seize Acknowledge Inbound bits, default=W---')
answerOutbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: answerOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: answerOutbound.setDescription('Answer Outbound bits, default=11--')
answerInbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: answerInbound.setStatus('mandatory')
if mibBuilder.loadTexts: answerInbound.setDescription('Answer Inbound bits, default=11--')
dropOutbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dropOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: dropOutbound.setDescription('Drop Outbound bits, default=00--')
dropInbound = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dropInbound.setStatus('mandatory')
if mibBuilder.loadTexts: dropInbound.setDescription('Drop Inbound bits, , default=00--')
noAnswerSec = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noAnswerSec.setStatus('mandatory')
if mibBuilder.loadTexts: noAnswerSec.setDescription("Length of time to wait after first ring back before deciding that the call isn't answered, in 10 mSec, default=3000.")
continuesNoSignal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: continuesNoSignal.setStatus('mandatory')
if mibBuilder.loadTexts: continuesNoSignal.setDescription('The max. length of time that no ringback was returned, in 10 mSec, default=4000.')
helloEdge = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: helloEdge.setStatus('mandatory')
if mibBuilder.loadTexts: helloEdge.setDescription('When to tell the app. that the remote connected, 1=Rising Endge - Immediately when connect is detected, 2=Falling Endge - After the end of the solution.')
maxInterRing = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxInterRing.setStatus('mandatory')
if mibBuilder.loadTexts: maxInterRing.setDescription('The max time between ring backs to decide that the call connected, in 10 mSec, default=800.')
dialToneLocal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialToneLocal.setStatus('mandatory')
if mibBuilder.loadTexts: dialToneLocal.setDescription('Local Dial tone, default= .')
dialToneIntl = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialToneIntl.setStatus('mandatory')
if mibBuilder.loadTexts: dialToneIntl.setDescription('International Dial tone, default= .')
dialToneXtra = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialToneXtra.setStatus('mandatory')
if mibBuilder.loadTexts: dialToneXtra.setDescription('Extra Dial tone, default= .')
busy1Tone = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busy1Tone.setStatus('mandatory')
if mibBuilder.loadTexts: busy1Tone.setDescription('Busy 1 tone, default= .')
busy2Tone = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busy2Tone.setStatus('mandatory')
if mibBuilder.loadTexts: busy2Tone.setDescription('Busy 2 tone, default= .')
ringback1Tone = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringback1Tone.setStatus('mandatory')
if mibBuilder.loadTexts: ringback1Tone.setDescription('Ringback 1 tone, default= .')
ringback2Tone = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringback2Tone.setStatus('mandatory')
if mibBuilder.loadTexts: ringback2Tone.setDescription('Ringback 2 tone, default= .')
disconnect1Tone = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1Tone.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1Tone.setDescription('Disconnect 1 tone, default= .')
disconnect2Tone = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2Tone.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2Tone.setDescription('Disconnect 2 tone, default= .')
waitForDropAckTimer = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waitForDropAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: waitForDropAckTimer.setDescription('The time to wait for drop ack, in mSec, default=2000.')
waitForSiezeAckTimer = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waitForSiezeAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: waitForSiezeAckTimer.setDescription('The time to wait for sieze ack, in mSec, default=10000.')
digitsMode = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitsMode.setStatus('mandatory')
if mibBuilder.loadTexts: digitsMode.setDescription("The pormat of sending the digits - 'T'=DTMF, 'M'=MF, 'P'=PULSE, default='T'.")
isDnisBeforeAni = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDnisBeforeAni.setStatus('mandatory')
if mibBuilder.loadTexts: isDnisBeforeAni.setDescription('Does the ANI is previous to the DNIS, if 1(TRUE) - DNIS is before the ANI, default=1(TRUE).')
collectAni = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectAni.setStatus('mandatory')
if mibBuilder.loadTexts: collectAni.setDescription('Should the engine expect ANI. Default=1(TRUE)')
prewinkLength = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prewinkLength.setStatus('mandatory')
if mibBuilder.loadTexts: prewinkLength.setDescription('The max. length in 10mSec of the pre-wink. Default=0')
winkLength = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winkLength.setStatus('mandatory')
if mibBuilder.loadTexts: winkLength.setDescription('The max. length of the wink generation, in 10 mSec. Default=15')
minWinkDetection = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minWinkDetection.setStatus('mandatory')
if mibBuilder.loadTexts: minWinkDetection.setDescription('The min. time in the receiver for detecting the wink, in 10 mSec. Default=10')
maxWinkDetection = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxWinkDetection.setStatus('mandatory')
if mibBuilder.loadTexts: maxWinkDetection.setDescription('The max. time in the receiver for detecting the wink, in 10 mSec. Default=32')
maxDigitsDnis = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxDigitsDnis.setStatus('mandatory')
if mibBuilder.loadTexts: maxDigitsDnis.setDescription('The max. # of DNIS digits for the receiver/transmiter. The max. # of digits for the DNIS+ANI in hardware dependenc-31.')
maxDigitsAni = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxDigitsAni.setStatus('mandatory')
if mibBuilder.loadTexts: maxDigitsAni.setDescription('The max.# of ANI digits for the receiver/transmiter. The max.# of digits for the DNIS+ANI in hardware dependenc-31.')
minTimeToDetectTransition = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minTimeToDetectTransition.setStatus('mandatory')
if mibBuilder.loadTexts: minTimeToDetectTransition.setDescription('The min. time to detect transition from 0 to 1 and from 1 to 0, in 10mSec. Default=5 (max. value is 255)')
charBeforedigits = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charBeforedigits.setStatus('mandatory')
if mibBuilder.loadTexts: charBeforedigits.setDescription("the character before the digits, Default - '*', if there isnt any '' will be used")
charBetweenAniAndDnis = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charBetweenAniAndDnis.setStatus('mandatory')
if mibBuilder.loadTexts: charBetweenAniAndDnis.setDescription("If there is ANI - this is the char between the DNIS and the ANI, Default - '*', if there isnt any '' will be used")
charInTheEndOfDigits = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charInTheEndOfDigits.setStatus('mandatory')
if mibBuilder.loadTexts: charInTheEndOfDigits.setDescription("The char in the end of digits, Default - '*', if there isnt any '' will be used")
sendCharBeforeDigits = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendCharBeforeDigits.setStatus('mandatory')
if mibBuilder.loadTexts: sendCharBeforeDigits.setDescription("The char before the digits, Default - '*', if there isnt any '' will be used")
sendDnisbeforeAni = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendDnisbeforeAni.setStatus('mandatory')
if mibBuilder.loadTexts: sendDnisbeforeAni.setDescription('Does ANI is previous to the DNIS, if TRUE DNIS will be sent before the ANI, default DNIS before the ANI')
sendCharBetweenAniAndDnis = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendCharBetweenAniAndDnis.setStatus('mandatory')
if mibBuilder.loadTexts: sendCharBetweenAniAndDnis.setDescription("If there is ANI - this is the char between the DNIS and the ANI, Default - '*', if there isnt any '' will be used")
sendCharcharInTheEndOfDigits = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendCharcharInTheEndOfDigits.setStatus('mandatory')
if mibBuilder.loadTexts: sendCharcharInTheEndOfDigits.setDescription("The char in the end of the digits, Default - '*', if there isnt any '' will be used")
fileToPlay = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileToPlay.setStatus('mandatory')
if mibBuilder.loadTexts: fileToPlay.setDescription('Path+name of .WAV file to play to user in case of Clear-Back.')
repeatPlayFile = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 2, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeatPlayFile.setStatus('mandatory')
if mibBuilder.loadTexts: repeatPlayFile.setDescription("Loop the playing of the Clear-Back .WAV file - '0' or '1' only.")
protocolConfigFileIn = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolConfigFileIn.setStatus('mandatory')
if mibBuilder.loadTexts: protocolConfigFileIn.setDescription('Protocol config file in.')
protocolConfigFileOut = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolConfigFileOut.setStatus('mandatory')
if mibBuilder.loadTexts: protocolConfigFileOut.setDescription('Protocol config file out.')
listOfProtocolConfigFilesIn = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listOfProtocolConfigFilesIn.setStatus('mandatory')
if mibBuilder.loadTexts: listOfProtocolConfigFilesIn.setDescription('A list of the possible protocol config files in.')
listOfProtocolConfigFilesOut = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listOfProtocolConfigFilesOut.setStatus('mandatory')
if mibBuilder.loadTexts: listOfProtocolConfigFilesOut.setDescription('A list of the possible protocol config files out.')
protocolTrace = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolTrace.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrace.setDescription('Activating Dialogic PRI log tracer.')
hostID = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostID.setStatus('mandatory')
if mibBuilder.loadTexts: hostID.setDescription('SS#7 host ID can be from 0-31. Default = 0.')
sIUIPorID = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 7, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sIUIPorID.setStatus('mandatory')
if mibBuilder.loadTexts: sIUIPorID.setDescription('SIU IP address or ID.')
timeUpTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeUpTotal.setStatus('mandatory')
if mibBuilder.loadTexts: timeUpTotal.setDescription('Time up total.')
timeUpInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeUpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: timeUpInterval.setDescription('Time up interval.')
timeSpanTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeSpanTotal.setStatus('mandatory')
if mibBuilder.loadTexts: timeSpanTotal.setDescription('Time span total.')
timeSpanInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeSpanInterval.setStatus('mandatory')
if mibBuilder.loadTexts: timeSpanInterval.setDescription('Time span interval.')
vgkLoginAttemptTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLoginAttemptTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLoginAttemptTotal.setDescription('GateKeeper login attempt total.')
vgkLoginAttemptInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLoginAttemptInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLoginAttemptInterval.setDescription('GateKeeper login attempt interval.')
vgkLoginSuccessTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLoginSuccessTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLoginSuccessTotal.setDescription('GateKeeper login success total.')
vgkLoginSuccessInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLoginSuccessInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLoginSuccessInterval.setDescription('GateKeeper login success interval.')
vgkLoginFailureTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLoginFailureTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLoginFailureTotal.setDescription('GateKeeper login failure total.')
vgkLoginFailureInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLoginFailureInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLoginFailureInterval.setDescription('GateKeeper login failure interval.')
vgkLogoutAttemptTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLogoutAttemptTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLogoutAttemptTotal.setDescription('GateKeeper logout attempt total.')
vgkLogoutAttemptInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLogoutAttemptInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLogoutAttemptInterval.setDescription('GateKeeper logout attempt interval.')
vgkLogoutSuccessTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLogoutSuccessTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLogoutSuccessTotal.setDescription('GateKeeper logout success total.')
vgkLogoutSuccessInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLogoutSuccessInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLogoutSuccessInterval.setDescription('GateKeeper logout success interval.')
vgkLogoutFailureTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLogoutFailureTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLogoutFailureTotal.setDescription('GateKeeper logout failure total.')
vgkLogoutFailureInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkLogoutFailureInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkLogoutFailureInterval.setDescription('GateKeeper logout failure interval.')
vgkDisconnectionTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkDisconnectionTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkDisconnectionTotal.setDescription('GateKeeper disconnection failure total.')
vgkDisconnectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkDisconnectionInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkDisconnectionInterval.setDescription('GateKeeper disconnection failure interval.')
callValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callValue.setStatus('mandatory')
if mibBuilder.loadTexts: callValue.setDescription('Calls value.')
callInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callInterval.setStatus('mandatory')
if mibBuilder.loadTexts: callInterval.setDescription('Calls interval.')
callMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: callMaxTotal.setDescription('Calls max total.')
callMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: callMaxInterval.setDescription('Calls max interval.')
callAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: callAverageTotal.setDescription('Calls average total.')
callAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: callAverageInterval.setDescription('Calls average interval.')
callTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callTotal.setStatus('mandatory')
if mibBuilder.loadTexts: callTotal.setDescription('Calls total.')
universalCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallValue.setDescription('Universal calls value.')
universalCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallInterval.setDescription('Universal calls interval.')
universalCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallMaxTotal.setDescription('Universal calls max total.')
universalCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallMaxInterval.setDescription('Universal calls max interval.')
universalCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallAverageTotal.setDescription('Universal calls average total.')
universalCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallAverageInterval.setDescription('Universal calls average interval.')
universalCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: universalCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: universalCallTotal.setDescription('Universal calls total.')
voiceCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallValue.setDescription('Voice calls value.')
voiceCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallInterval.setDescription('Voice calls interval.')
voiceCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallMaxTotal.setDescription('Voice calls max total.')
voiceCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallMaxInterval.setDescription('Voice calls max interval.')
voiceCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallAverageTotal.setDescription('Voice calls average total.')
voiceCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallAverageInterval.setDescription('Voice calls average interval.')
voiceCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: voiceCallTotal.setDescription('Voice calls total.')
faxCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallValue.setDescription('Fax calls value.')
faxCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallInterval.setDescription('Fax calls interval.')
faxCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallMaxTotal.setDescription('Fax calls max total.')
faxCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallMaxInterval.setDescription('Fax calls max interval.')
faxCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallAverageTotal.setDescription('Fax calls average total.')
faxCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallAverageInterval.setDescription('Fax calls average interval.')
faxCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: faxCallTotal.setDescription('Fax calls total.')
sncCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallValue.setDescription('S&C calls value.')
sncCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallInterval.setDescription('S&C calls interval.')
sncCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallMaxTotal.setDescription('S&C calls max total.')
sncCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallMaxInterval.setDescription('S&C calls max interval.')
sncCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallAverageTotal.setDescription('S&C calls average total.')
sncCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallAverageInterval.setDescription('S&C calls average interval.')
sncCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: sncCallTotal.setDescription('S&C calls total.')
iPhoneCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallValue.setDescription('iPhone calls value.')
iPhoneCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallInterval.setDescription('iPhone calls interval.')
iPhoneCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallMaxTotal.setDescription('iPhone calls max total.')
iPhoneCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallMaxInterval.setDescription('iPhone calls max interval.')
iPhoneCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallAverageTotal.setDescription('iPhone calls average total.')
iPhoneCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallAverageInterval.setDescription('iPhone calls average interval.')
iPhoneCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPhoneCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: iPhoneCallTotal.setDescription('iPhone calls total.')
dialerCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallValue.setDescription('Dialer calls value.')
dialerCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallInterval.setDescription('Dialer calls interval.')
dialerCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallMaxTotal.setDescription('Dialer calls max total.')
dialerCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallMaxInterval.setDescription('Dialer calls max interval.')
dialerCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallAverageTotal.setDescription('Dialer calls average total.')
dialerCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallAverageInterval.setDescription('Dialer calls average interval.')
dialerCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCallTotal.setDescription('Dialer calls total.')
incorrectPasswordCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incorrectPasswordCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incorrectPasswordCallTotal.setDescription('incorrect password calls total.')
incorrectPasswordCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incorrectPasswordCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incorrectPasswordCallInterval.setDescription('incorrect password calls interval.')
notSupportedCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notSupportedCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: notSupportedCallTotal.setDescription('not supported calls total.')
notSupportedCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notSupportedCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: notSupportedCallInterval.setDescription('not supported calls interval.')
incomingInternetAttemptCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallValue.setDescription('.')
incomingInternetAttemptCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallInterval.setDescription('.')
incomingInternetAttemptCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallMaxTotal.setDescription('.')
incomingInternetAttemptCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallMaxInterval.setDescription('.')
incomingInternetAttemptCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallAverageTotal.setDescription('.')
incomingInternetAttemptCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallAverageInterval.setDescription('.')
incomingInternetAttemptCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetAttemptCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetAttemptCallTotal.setDescription('.')
incomingInternetSuccessCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallValue.setDescription('.')
incomingInternetSuccessCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallInterval.setDescription('.')
incomingInternetSuccessCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallMaxTotal.setDescription('.')
incomingInternetSuccessCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallMaxInterval.setDescription('.')
incomingInternetSuccessCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallAverageTotal.setDescription('.')
incomingInternetSuccessCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallAverageInterval.setDescription('.')
incomingInternetSuccessCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingInternetSuccessCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingInternetSuccessCallTotal.setDescription('.')
incomingTelephonyAttemptCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallValue.setDescription('.')
incomingTelephonyAttemptCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallInterval.setDescription('.')
incomingTelephonyAttemptCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallMaxTotal.setDescription('.')
incomingTelephonyAttemptCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallMaxInterval.setDescription('.')
incomingTelephonyAttemptCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallAverageTotal.setDescription('.')
incomingTelephonyAttemptCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallAverageInterval.setDescription('.')
incomingTelephonyAttemptCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonyAttemptCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonyAttemptCallTotal.setDescription('.')
incomingTelephonySuccessCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallValue.setDescription('.')
incomingTelephonySuccessCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallInterval.setDescription('.')
incomingTelephonySuccessCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallMaxTotal.setDescription('.')
incomingTelephonySuccessCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallMaxInterval.setDescription('.')
incomingTelephonySuccessCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallAverageTotal.setDescription('.')
incomingTelephonySuccessCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallAverageInterval.setDescription('.')
incomingTelephonySuccessCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingTelephonySuccessCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: incomingTelephonySuccessCallTotal.setDescription('.')
outgoingInternetCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallValue.setDescription('.')
outgoingInternetCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallInterval.setDescription('.')
outgoingInternetCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallMaxTotal.setDescription('.')
outgoingInternetCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallMaxInterval.setDescription('.')
outgoingInternetCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallAverageTotal.setDescription('.')
outgoingInternetCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallAverageInterval.setDescription('.')
outgoingInternetCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingInternetCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingInternetCallTotal.setDescription('.')
outgoingTelephonyCallValue = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallValue.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallValue.setDescription('.')
outgoingTelephonyCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallInterval.setDescription('.')
outgoingTelephonyCallMaxTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallMaxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallMaxTotal.setDescription('.')
outgoingTelephonyCallMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallMaxInterval.setDescription('.')
outgoingTelephonyCallAverageTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallAverageTotal.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallAverageTotal.setDescription('.')
outgoingTelephonyCallAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallAverageInterval.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallAverageInterval.setDescription('.')
outgoingTelephonyCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingTelephonyCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingTelephonyCallTotal.setDescription('.')
accountExpiredCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accountExpiredCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: accountExpiredCallTotal.setDescription('.')
accountExpiredCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accountExpiredCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: accountExpiredCallInterval.setDescription('.')
vgkNotAvailableCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkNotAvailableCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vgkNotAvailableCallTotal.setDescription('.')
vgkNotAvailableCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vgkNotAvailableCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vgkNotAvailableCallInterval.setDescription('.')
vtgShutDownCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgShutDownCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vtgShutDownCallTotal.setDescription('.')
vtgShutDownCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgShutDownCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vtgShutDownCallInterval.setDescription('.')
vtgOutOfHoursCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgOutOfHoursCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vtgOutOfHoursCallTotal.setDescription('.')
vtgOutOfHoursCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgOutOfHoursCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vtgOutOfHoursCallInterval.setDescription('.')
vtgBusyCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgBusyCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vtgBusyCallTotal.setDescription('.')
vtgBusyCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgBusyCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vtgBusyCallInterval.setDescription('.')
vtgNoAnswerCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgNoAnswerCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vtgNoAnswerCallTotal.setDescription('.')
vtgNoAnswerCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgNoAnswerCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vtgNoAnswerCallInterval.setDescription('.')
telephoneBusyCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephoneBusyCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: telephoneBusyCallTotal.setDescription('.')
telephoneBusyCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 129), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephoneBusyCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: telephoneBusyCallInterval.setDescription('.')
telephoneNoAnswerCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephoneNoAnswerCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: telephoneNoAnswerCallTotal.setDescription('.')
telephoneNoAnswerCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 131), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephoneNoAnswerCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: telephoneNoAnswerCallInterval.setDescription('.')
miscReasonDisconnectedCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 132), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscReasonDisconnectedCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: miscReasonDisconnectedCallTotal.setDescription('.')
miscReasonDisconnectedCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 133), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscReasonDisconnectedCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: miscReasonDisconnectedCallInterval.setDescription('.')
totalDisconnectedCallsTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 134), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDisconnectedCallsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: totalDisconnectedCallsTotal.setDescription('.')
totalDisconnectedCallsInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 135), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDisconnectedCallsInterval.setStatus('mandatory')
if mibBuilder.loadTexts: totalDisconnectedCallsInterval.setDescription('.')
vtgOutOfServiceCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 136), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgOutOfServiceCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vtgOutOfServiceCallTotal.setDescription('.')
vtgOutOfServiceCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 137), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtgOutOfServiceCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vtgOutOfServiceCallInterval.setDescription('.')
unauthorizedUserCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 138), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unauthorizedUserCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: unauthorizedUserCallTotal.setDescription('.')
unauthorizedUserCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 139), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unauthorizedUserCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: unauthorizedUserCallInterval.setDescription('.')
resolveFailureCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 140), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resolveFailureCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: resolveFailureCallTotal.setDescription('.')
resolveFailureCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 141), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resolveFailureCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: resolveFailureCallInterval.setDescription('.')
pstnFailureCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 142), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pstnFailureCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: pstnFailureCallTotal.setDescription('.')
pstnFailureCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 143), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pstnFailureCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pstnFailureCallInterval.setDescription('.')
abnormalTerminationCallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 144), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: abnormalTerminationCallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: abnormalTerminationCallTotal.setDescription('.')
abnormalTerminationCallInterval = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 8, 145), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: abnormalTerminationCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: abnormalTerminationCallInterval.setDescription('.')
telephonyErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 2516, 2, 9, 1), DisplayString())
if mibBuilder.loadTexts: telephonyErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: telephonyErrorDescription.setDescription('Detailed description of telephony protocol error occurs. Used with telephonyError enterprise trap.')
setParameterFailure = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,1))
if mibBuilder.loadTexts: setParameterFailure.setDescription('Setting parameter failed.')
haspExistance = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,2))
if mibBuilder.loadTexts: haspExistance.setDescription('HASP existance failed.')
cti2ServiceFailure = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,3))
if mibBuilder.loadTexts: cti2ServiceFailure.setDescription('CTI2 service failed.')
vgkLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,4))
if mibBuilder.loadTexts: vgkLoginFailure.setDescription('VTG has failed to login to VGK.')
vgkLogoutFailure = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,5))
if mibBuilder.loadTexts: vgkLogoutFailure.setDescription('VTG has failed to logout from VGK.')
vgkDisconnection = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,6))
if mibBuilder.loadTexts: vgkDisconnection.setDescription('VTG disconnected from VGK.')
telephonyError = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,7)).setObjects(("VTGW-MIB", "telephonyErrorDescription"))
if mibBuilder.loadTexts: telephonyError.setDescription('Telephony error.')
incorrectPasswordCalls = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,8))
if mibBuilder.loadTexts: incorrectPasswordCalls.setDescription('Incorrect password call.')
disconnectedCalls = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,9))
if mibBuilder.loadTexts: disconnectedCalls.setDescription('Disconnected call.')
notSupportedCalls = NotificationType((1, 3, 6, 1, 4, 1, 2516, 2) + (0,10))
if mibBuilder.loadTexts: notSupportedCalls.setDescription('Not supported Call.')
mibBuilder.exportSymbols("VTGW-MIB", outgoingInternetCallTotal=outgoingInternetCallTotal, coderRate=coderRate, time2Live=time2Live, incomingTelephonySuccessCallValue=incomingTelephonySuccessCallValue, disconnectedCalls=disconnectedCalls, accountExpiredCallTotal=accountExpiredCallTotal, pri=pri, gc=gc, callInterval=callInterval, sendDnisbeforeAni=sendDnisbeforeAni, outgoingTelephonyCallInterval=outgoingTelephonyCallInterval, listOfProtocolConfigFilesOut=listOfProtocolConfigFilesOut, timeSpanTotal=timeSpanTotal, vgkLoginFailureInterval=vgkLoginFailureInterval, audio=audio, vtgBusyCallInterval=vtgBusyCallInterval, incomingTelephonySuccessCallInterval=incomingTelephonySuccessCallInterval, telephonyError=telephonyError, iPhoneLinesNumber=iPhoneLinesNumber, incomingTelephonyAttemptCallAverageInterval=incomingTelephonyAttemptCallAverageInterval, cti2ServiceFailure=cti2ServiceFailure, dialingMode=dialingMode, vtg=vtg, timeUpInterval=timeUpInterval, dropOutbound=dropOutbound, faxCallAverageTotal=faxCallAverageTotal, incomingInternetAttemptCallInterval=incomingInternetAttemptCallInterval, faxCallMaxInterval=faxCallMaxInterval, resolveFailureCallInterval=resolveFailureCallInterval, hostID=hostID, faxCallMaxTotal=faxCallMaxTotal, pstnFailureCallTotal=pstnFailureCallTotal, sncCallInterval=sncCallInterval, disconnect1Tone=disconnect1Tone, answerInbound=answerInbound, dialerLinesNumber=dialerLinesNumber, maxWinkDetection=maxWinkDetection, faxCallTotal=faxCallTotal, outgoingInternetCallMaxTotal=outgoingInternetCallMaxTotal, continuesNoSignal=continuesNoSignal, busy1Tone=busy1Tone, digitsMode=digitsMode, dialerCallInterval=dialerCallInterval, outgoingInternetCallInterval=outgoingInternetCallInterval, universalCallMaxTotal=universalCallMaxTotal, rcamPort=rcamPort, minWinkDetection=minWinkDetection, vgkLogoutAttemptTotal=vgkLogoutAttemptTotal, incomingTelephonyAttemptCallTotal=incomingTelephonyAttemptCallTotal, telephoneBusyCallInterval=telephoneBusyCallInterval, incomingInternetSuccessCallInterval=incomingInternetSuccessCallInterval, winkLength=winkLength, charBeforedigits=charBeforedigits, vgkLoginAttemptInterval=vgkLoginAttemptInterval, coderRedundency=coderRedundency, callTotal=callTotal, sendCharBetweenAniAndDnis=sendCharBetweenAniAndDnis, waitForSiezeAckTimer=waitForSiezeAckTimer, incomingTelephonySuccessCallAverageTotal=incomingTelephonySuccessCallAverageTotal, incomingTelephonyAttemptCallMaxInterval=incomingTelephonyAttemptCallMaxInterval, portEnable=portEnable, overSilenceTime=overSilenceTime, universalLinesNumber=universalLinesNumber, incomingTelephonySuccessCallAverageInterval=incomingTelephonySuccessCallAverageInterval, outgoingTelephonyCallMaxTotal=outgoingTelephonyCallMaxTotal, coder=coder, cti2Service=cti2Service, voiceLinesNumber=voiceLinesNumber, sIUIPorID=sIUIPorID, telephonyErrorDescription=telephonyErrorDescription, dropInbound=dropInbound, jitterOptFactor=jitterOptFactor, sncCallMaxInterval=sncCallMaxInterval, enm=enm, incomingTelephonyAttemptCallValue=incomingTelephonyAttemptCallValue, outgoingInternetCallAverageTotal=outgoingInternetCallAverageTotal, vgkLoginAttemptTotal=vgkLoginAttemptTotal, incomingTelephonyAttemptCallMaxTotal=incomingTelephonyAttemptCallMaxTotal, ringCount=ringCount, unauthorizedUserCallInterval=unauthorizedUserCallInterval, vgkLoginFailureTotal=vgkLoginFailureTotal, ringback2Tone=ringback2Tone, voiceCallTotal=voiceCallTotal, incomingInternetSuccessCallValue=incomingInternetSuccessCallValue, maxDigitsAni=maxDigitsAni, voiceCallAverageInterval=voiceCallAverageInterval, timeB4LoginAttempt=timeB4LoginAttempt, dialerCallAverageTotal=dialerCallAverageTotal, incomingInternetAttemptCallTotal=incomingInternetAttemptCallTotal, incomingInternetSuccessCallMaxInterval=incomingInternetSuccessCallMaxInterval, callMaxInterval=callMaxInterval, softwareVersion=softwareVersion, fileToPlay=fileToPlay, incomingInternetSuccessCallAverageInterval=incomingInternetSuccessCallAverageInterval, disconnect2Tone=disconnect2Tone, portsTable=portsTable, seizeOutbound=seizeOutbound, sncCallMaxTotal=sncCallMaxTotal, dialerCallValue=dialerCallValue, dialerCallMaxTotal=dialerCallMaxTotal, notSupportedCallTotal=notSupportedCallTotal, telephoneBusyCallTotal=telephoneBusyCallTotal, callAverageInterval=callAverageInterval, totalDisconnectedCallsTotal=totalDisconnectedCallsTotal, faxCallValue=faxCallValue, timeSpanInterval=timeSpanInterval, protocolConfigFileIn=protocolConfigFileIn, incorrectPasswordCallTotal=incorrectPasswordCallTotal, vtgShutDownCallInterval=vtgShutDownCallInterval, vtgOutOfServiceCallInterval=vtgOutOfServiceCallInterval, timeUpTotal=timeUpTotal, voiceCallInterval=voiceCallInterval, notSupportedCallInterval=notSupportedCallInterval, setParameterFailure=setParameterFailure, outgoingInternetCallValue=outgoingInternetCallValue, haspExistance=haspExistance, portNumber=portNumber, protocolTrace=protocolTrace, vgkLogoutSuccessTotal=vgkLogoutSuccessTotal, dialToneLocal=dialToneLocal, cti2ServicePollingQuantum=cti2ServicePollingQuantum, vtgNoAnswerCallInterval=vtgNoAnswerCallInterval, pstnFailureCallInterval=pstnFailureCallInterval, iridium=iridium, vgkDisconnectionTotal=vgkDisconnectionTotal, vtgOutOfServiceCallTotal=vtgOutOfServiceCallTotal, dialerCallAverageInterval=dialerCallAverageInterval, iPhoneCallAverageInterval=iPhoneCallAverageInterval, accountExpiredCallInterval=accountExpiredCallInterval, alias=alias, dialerCallMaxInterval=dialerCallMaxInterval, incomingInternetAttemptCallMaxTotal=incomingInternetAttemptCallMaxTotal, incomingTelephonyAttemptCallAverageTotal=incomingTelephonyAttemptCallAverageTotal, callMaxTotal=callMaxTotal, framesPerPkt=framesPerPkt, sendCharBeforeDigits=sendCharBeforeDigits, universalCallInterval=universalCallInterval, voiceCallValue=voiceCallValue, volume=volume, telephonyProtocol=telephonyProtocol, vgkDisconnectionInterval=vgkDisconnectionInterval, universalCallAverageTotal=universalCallAverageTotal, idle=idle, vgkLogoutFailureTotal=vgkLogoutFailureTotal, interDigitTimeout=interDigitTimeout, iPhoneCallInterval=iPhoneCallInterval, maxInterRing=maxInterRing, vtgShutDownCallTotal=vtgShutDownCallTotal, resloveMode=resloveMode, seizeAckOutbound=seizeAckOutbound, repeatIVR=repeatIVR, glareMode=glareMode, incorrectPasswordCalls=incorrectPasswordCalls, portEntry=portEntry, universalCallMaxInterval=universalCallMaxInterval, sncCallAverageInterval=sncCallAverageInterval, maxDigitsDnis=maxDigitsDnis, jitter=jitter, faxCallAverageInterval=faxCallAverageInterval, iPhoneCallValue=iPhoneCallValue, connectedTo=connectedTo, vgkLoginFailure=vgkLoginFailure, vgkNotAvailableCallInterval=vgkNotAvailableCallInterval, notSupportedCalls=notSupportedCalls, collectAni=collectAni, incomingInternetAttemptCallAverageTotal=incomingInternetAttemptCallAverageTotal, listOfProtocolConfigFilesIn=listOfProtocolConfigFilesIn, vgkLogoutAttemptInterval=vgkLogoutAttemptInterval, busy2Tone=busy2Tone, codecsPriorities=codecsPriorities, outgoingInternetCallAverageInterval=outgoingInternetCallAverageInterval, tgw=tgw, telephonyProtocols=telephonyProtocols, incomingInternetAttemptCallMaxInterval=incomingInternetAttemptCallMaxInterval, faxLinesNumber=faxLinesNumber, universalCallValue=universalCallValue, charInTheEndOfDigits=charInTheEndOfDigits, incomingTelephonySuccessCallMaxTotal=incomingTelephonySuccessCallMaxTotal, incomingInternetSuccessCallMaxTotal=incomingInternetSuccessCallMaxTotal, incomingTelephonyAttemptCallInterval=incomingTelephonyAttemptCallInterval, comment=comment, timeB4LoginSet=timeB4LoginSet, hasp=hasp, outputGain=outputGain, detectionMode=detectionMode, outgoingTelephonyCallAverageTotal=outgoingTelephonyCallAverageTotal, voiceCallMaxInterval=voiceCallMaxInterval, vgkLogoutFailure=vgkLogoutFailure, boundDirection=boundDirection, stat=stat, helloEdge=helloEdge, faxCallInterval=faxCallInterval, vnmvgk=vnmvgk, vtgOutOfHoursCallTotal=vtgOutOfHoursCallTotal, universalCallAverageInterval=universalCallAverageInterval, vgkNotAvailableCallTotal=vgkNotAvailableCallTotal, preferredCodec=preferredCodec, codecsTable=codecsTable, vadEnable=vadEnable, dialToneIntl=dialToneIntl, sncCallValue=sncCallValue, voiceCallAverageTotal=voiceCallAverageTotal, incomingInternetAttemptCallValue=incomingInternetAttemptCallValue, waitForDropAckTimer=waitForDropAckTimer, vtgOutOfHoursCallInterval=vtgOutOfHoursCallInterval, minTimeToDetectTransition=minTimeToDetectTransition, vgkLoginSuccessTotal=vgkLoginSuccessTotal, vgkLogoutSuccessInterval=vgkLogoutSuccessInterval, sncCallAverageTotal=sncCallAverageTotal, inputGain=inputGain, universalCallTotal=universalCallTotal, incomingInternetAttemptCallAverageInterval=incomingInternetAttemptCallAverageInterval, loginSetAttempts=loginSetAttempts, outgoingTelephonyCallTotal=outgoingTelephonyCallTotal, vtgBusyCallTotal=vtgBusyCallTotal, vtgNoAnswerCallTotal=vtgNoAnswerCallTotal, outgoingTelephonyCallAverageInterval=outgoingTelephonyCallAverageInterval, internetProtocol=internetProtocol, telephoneNoAnswerCallInterval=telephoneNoAnswerCallInterval, isDnisBeforeAni=isDnisBeforeAni, seizeAckInbound=seizeAckInbound, sendCharcharInTheEndOfDigits=sendCharcharInTheEndOfDigits, incomingTelephonySuccessCallTotal=incomingTelephonySuccessCallTotal, telephoneNoAnswerCallTotal=telephoneNoAnswerCallTotal, vocaltec=vocaltec, callAverageTotal=callAverageTotal, codecEntry=codecEntry, framesSize=framesSize, miscReasonDisconnectedCallTotal=miscReasonDisconnectedCallTotal, outgoingInternetCallMaxInterval=outgoingInternetCallMaxInterval, answerOutbound=answerOutbound, incomingTelephonySuccessCallMaxInterval=incomingTelephonySuccessCallMaxInterval, rasPort=rasPort, iPhoneCallMaxTotal=iPhoneCallMaxTotal, seizeInbound=seizeInbound, sncLinesNumber=sncLinesNumber, voiceCallMaxTotal=voiceCallMaxTotal, abnormalTerminationCallTotal=abnormalTerminationCallTotal, resolveFailureCallTotal=resolveFailureCallTotal, vgkLogoutFailureInterval=vgkLogoutFailureInterval, channelSelectionOrder=channelSelectionOrder, outgoingTelephonyCallValue=outgoingTelephonyCallValue, iPhoneCallAverageTotal=iPhoneCallAverageTotal, vgkDisconnection=vgkDisconnection, outOfService=outOfService, dialToneXtra=dialToneXtra, repeatPlayFile=repeatPlayFile, erbium=erbium, iPhoneCallTotal=iPhoneCallTotal, unauthorizedUserCallTotal=unauthorizedUserCallTotal, iPhoneCallMaxInterval=iPhoneCallMaxInterval, prewinkLength=prewinkLength, incomingInternetSuccessCallAverageTotal=incomingInternetSuccessCallAverageTotal, id=id)
mibBuilder.exportSymbols("VTGW-MIB", callValue=callValue, incomingInternetSuccessCallTotal=incomingInternetSuccessCallTotal, totalDisconnectedCallsInterval=totalDisconnectedCallsInterval, miscReasonDisconnectedCallInterval=miscReasonDisconnectedCallInterval, outgoingTelephonyCallMaxInterval=outgoingTelephonyCallMaxInterval, ivr=ivr, trapParameters=trapParameters, sncCallTotal=sncCallTotal, digitsTimeout=digitsTimeout, incorrectPasswordCallInterval=incorrectPasswordCallInterval, ports=ports, dialerCallTotal=dialerCallTotal, ringback1Tone=ringback1Tone, analog=analog, vgkLoginSuccessInterval=vgkLoginSuccessInterval, abnormalTerminationCallInterval=abnormalTerminationCallInterval, ivrMode=ivrMode, protocolConfigFileOut=protocolConfigFileOut, noAnswerSec=noAnswerSec, charBetweenAniAndDnis=charBetweenAniAndDnis)
