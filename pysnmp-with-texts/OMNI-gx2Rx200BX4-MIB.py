#
# PySNMP MIB module OMNI-gx2Rx200BX4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Rx200BX4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
gx2Rx200BX4, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rx200BX4")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapPerceivedSeverity, trapNetworkElemSerialNum, trapNetworkElemOperState, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapNetworkElemAdminState, trapText, trapNETrapLastTrapTimeStamp, trapChangedObjectId, trapChangedValueInteger, trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapIdentifier = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity", "trapNetworkElemSerialNum", "trapNetworkElemOperState", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapNetworkElemAdminState", "trapText", "trapNETrapLastTrapTimeStamp", "trapChangedObjectId", "trapChangedValueInteger", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapIdentifier")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Counter32, Counter64, Bits, Gauge32, ObjectIdentity, ModuleIdentity, NotificationType, iso, IpAddress, TimeTicks, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Counter32", "Counter64", "Bits", "Gauge32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "iso", "IpAddress", "TimeTicks", "NotificationType", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

class U32Data(Counter32):
    pass

gx2Rx200BX4Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 1))
gx2Rx200BX4AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2), )
if mibBuilder.loadTexts: gx2Rx200BX4AnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4AnalogTable.setDescription('This table contains gx2Rx200BX4 specific parameters with nominal and current values.')
gx2Rx200BX4AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4AnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4AnalogEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2Rx200BX4DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3), )
if mibBuilder.loadTexts: gx2Rx200BX4DigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4DigitalTable.setDescription('This table contains gx2Rx200BX4 specific parameters with nominal and current values.')
gx2Rx200BX4DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4DigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4DigitalEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2Rx200BX4StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4), )
if mibBuilder.loadTexts: gx2Rx200BX4StatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4StatusTable.setDescription('This table contains gx2Rx200BX4 specific parameters with nominal and current values.')
gx2Rx200BX4StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4StatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4StatusEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2Rx200BX4FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5), )
if mibBuilder.loadTexts: gx2Rx200BX4FactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4FactoryTable.setDescription('This table contains gx2Rx200BX4 specific parameters with nominal and current values.')
gx2Rx200BX4FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4FactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4FactoryEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2Rx200BX4AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4AnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4AnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rx4labelOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptPowerOne.setDescription('The value of this object provides the label of the Optical Power Analog parameter.')
rx4uomOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerOne.setStatus('optional')
if mibBuilder.loadTexts: rx4uomOptPowerOne.setDescription('The value of this object provides the Unit of Measure of the Optical Power Analog parameter.')
rx4majorHighOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHighOptPowerOne.setDescription('The value of this object provides the Major High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLowOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLowOptPowerOne.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHighOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHighOptPowerOne.setDescription('The value of this object provides the Minor High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLowOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLowOptPowerOne.setDescription('The value of this object provides the Minor Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValueOptPowerOne.setDescription('The value of this object provides the Current value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlagOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagOptPowerOne.setDescription('The value of this object provides the state of the Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValueOptPowerOne.setDescription('The value of this object provides the minimum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValueOptPowerOne.setDescription('The value of this object provides the maximum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmStateOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmStateOptPowerOne.setDescription('The value of this object provides the curent alarm state of the Optical Power Analog parameter.')
rx4labelOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptPowerTwo.setDescription('The value of this object provides the label of the Optical Power Analog parameter.')
rx4uomOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4uomOptPowerTwo.setDescription('The value of this object provides the Unit of Measure of the Optical Power Analog parameter.')
rx4majorHighOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHighOptPowerTwo.setDescription('The value of this object provides the Major High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLowOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLowOptPowerTwo.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHighOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHighOptPowerTwo.setDescription('The value of this object provides the Minor High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLowOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLowOptPowerTwo.setDescription('The value of this object provides the Minor Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValueOptPowerTwo.setDescription('The value of this object provides the Current value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlagOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagOptPowerTwo.setDescription('The value of this object provides the state of the Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValueOptPowerTwo.setDescription('The value of this object provides the minimum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValueOptPowerTwo.setDescription('The value of this object provides the maximum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmStateOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmStateOptPowerTwo.setDescription('The value of this object provides the curent alarm state of the Optical Power Analog parameter.')
rx4labelOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptPowerThree.setDescription('The value of this object provides the label of the Optical Power Analog parameter.')
rx4uomOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerThree.setStatus('optional')
if mibBuilder.loadTexts: rx4uomOptPowerThree.setDescription('The value of this object provides the Unit of Measure of the Optical Power Analog parameter.')
rx4majorHighOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHighOptPowerThree.setDescription('The value of this object provides the Major High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLowOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLowOptPowerThree.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHighOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHighOptPowerThree.setDescription('The value of this object provides the Minor High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLowOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLowOptPowerThree.setDescription('The value of this object provides the Minor Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValueOptPowerThree.setDescription('The value of this object provides the Current value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlagOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagOptPowerThree.setDescription('The value of this object provides the state of the Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValueOptPowerThree.setDescription('The value of this object provides the minimum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValueOptPowerThree.setDescription('The value of this object provides the maximum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmStateOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmStateOptPowerThree.setDescription('The value of this object provides the curent alarm state of the Optical Power Analog parameter.')
rx4labelOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptPowerFour.setDescription('The value of this object provides the label of the Optical Power Analog parameter.')
rx4uomOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerFour.setStatus('optional')
if mibBuilder.loadTexts: rx4uomOptPowerFour.setDescription('The value of this object provides the Unit of Measure of the Optical Power Analog parameter.')
rx4majorHighOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHighOptPowerFour.setDescription('The value of this object provides the Major High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLowOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLowOptPowerFour.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHighOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHighOptPowerFour.setDescription('The value of this object provides the Minor High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLowOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLowOptPowerFour.setDescription('The value of this object provides the Minor Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValueOptPowerFour.setDescription('The value of this object provides the Current value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlagOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagOptPowerFour.setDescription('The value of this object provides the state of the Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValueOptPowerFour.setDescription('The value of this object provides the minimum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValueOptPowerFour.setDescription('The value of this object provides the maximum value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmStateOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmStateOptPowerFour.setDescription('The value of this object provides the curent alarm state of the Optical Power Analog parameter.')
rx4labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModTemp.setStatus('optional')
if mibBuilder.loadTexts: rx4labelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
rx4uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomModTemp.setStatus('optional')
if mibBuilder.loadTexts: rx4uomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
rx4majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValueModTemp.setDescription('The value of this object provides the minimum value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValueModTemp.setDescription('The value of this object provides the maximum value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
rx4labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: rx4labelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
rx4uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: rx4uomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
rx4majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHighFanCurrent.setDescription('The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLowFanCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValueFanCurrent.setDescription('The value of this object provides the minimum value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValueFanCurrent.setDescription('The value of this object provides the maximum value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
rx4label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4label12Volt.setStatus('optional')
if mibBuilder.loadTexts: rx4label12Volt.setDescription('The value of this object provides the label of the 12v Current Analog parameter.')
rx4uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uom12Volt.setStatus('optional')
if mibBuilder.loadTexts: rx4uom12Volt.setDescription('The value of this object provides the Unit of Measure of the 12v Current Analog parameter.')
rx4majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorHigh12Volt.setDescription('The value of this object provides the Major High alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4majorLow12Volt.setDescription('The value of this object provides the Major Low alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorHigh12Volt.setDescription('The value of this object provides the Minor High alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minorLow12Volt.setDescription('The value of this object provides the Minor Low alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4currentValue12Volt.setDescription('The value of this object provides the Current value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlag12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlag12Volt.setDescription('The value of this object provides the state of the 12v Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4minValue12Volt.setDescription('The value of this object provides the minimum value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4maxValue12Volt.setDescription('The value of this object provides the maximum value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rx4alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmState12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: rx4alarmState12Volt.setDescription('The value of this object provides the curent alarm state of the 12v Current Analog parameter.')
gx2Rx200BX4DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4DigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4DigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rx4labelModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelModeOne.setDescription("The value of this object provides the label of the Rx200BX4's Mode Digital parameter.")
rx4enumModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeOne.setStatus('optional')
if mibBuilder.loadTexts: rx4enumModeOne.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueModeOne.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagModeOne.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelWavelengthOne.setDescription("The value of this object provides the label of the Rx200BX4's Wavelength Digital parameter.")
rx4enumWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthOne.setStatus('optional')
if mibBuilder.loadTexts: rx4enumWavelengthOne.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueWavelengthOne.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagWavelengthOne.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelAttnSettingOne.setDescription("The value of this object provides the label of the Rx200BX4's AttnSetting Digital parameter.")
rx4enumAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingOne.setStatus('optional')
if mibBuilder.loadTexts: rx4enumAttnSettingOne.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueAttnSettingOne.setDescription('The value of this object is the current value of the parameter. It is an integer value from 0 to 40. Each increment represents 1/2 dB of attenuation from 0 to 20 dB. Where 0 = 0db and 40 = 20db')
rx4stateFlagAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagAttnSettingOne.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeSettingOne.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Setting Digital parameter.")
rx4enumSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingOne.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeSettingOne.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeSettingOne.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingOne.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeThresholdOne.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Threshold Digital parameter.")
rx4enumSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdOne.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeThresholdOne.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeThresholdOne.setDescription('The value of this object reflects the setting of the threshold at which the Optical Input Failed signal is sent. It is in 1 dB increments ranging from -2 to -17 dB. The user can enter a number from 0 to 15, where 0 = -2db and 15= -17db')
rx4stateFlagSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdOne.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelModeTwo.setDescription("The value of this object provides the label of the Rx200BX4's Mode Digital parameter.")
rx4enumModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4enumModeTwo.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueModeTwo.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagModeTwo.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelWavelengthTwo.setDescription("The value of this object provides the label of the Rx200BX4's Wavelength Digital parameter.")
rx4enumWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4enumWavelengthTwo.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueWavelengthTwo.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagWavelengthTwo.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelAttnSettingTwo.setDescription("The value of this object provides the label of the Rx200BX4's AttnSetting Digital parameter.")
rx4enumAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4enumAttnSettingTwo.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueAttnSettingTwo.setDescription('The value of this object is the current value of the parameter. It is an integer value from 0 to 40. Each increment represents 1/2 dB of attenuation from 0 to 20 dB. Where 0 = 0db and 40 = 20db')
rx4stateFlagAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagAttnSettingTwo.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeSettingTwo.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Setting Digital parameter.")
rx4enumSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeSettingTwo.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeSettingTwo.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingTwo.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeThresholdTwo.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Threshold Digital parameter.")
rx4enumSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeThresholdTwo.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeThresholdTwo.setDescription('The value of this object reflects the setting of the threshold at which the Optical Input Failed signal is sent. It is in 1 dB increments ranging from -2 to -17 dB. The user can enter a number from 0 to 15, where 0 = -2db and 15= -17db')
rx4stateFlagSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdTwo.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelModeThree.setDescription("The value of this object provides the label of the Rx200BX4's Mode Digital parameter.")
rx4enumModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeThree.setStatus('optional')
if mibBuilder.loadTexts: rx4enumModeThree.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueModeThree.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagModeThree.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelWavelengthThree.setDescription("The value of this object provides the label of the Rx200BX4's Wavelength Digital parameter.")
rx4enumWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthThree.setStatus('optional')
if mibBuilder.loadTexts: rx4enumWavelengthThree.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueWavelengthThree.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagWavelengthThree.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelAttnSettingThree.setDescription("The value of this object provides the label of the Rx200BX4's AttnSetting Digital parameter.")
rx4enumAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingThree.setStatus('optional')
if mibBuilder.loadTexts: rx4enumAttnSettingThree.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueAttnSettingThree.setDescription('The value of this object is the current value of the parameter. It is an integer value from 0 to 40. Each increment represents 1/2 dB of attenuation from 0 to 20 dB. Where 0 = 0db and 40 = 20db')
rx4stateFlagAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagAttnSettingThree.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeSettingThree.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Setting Digital parameter.")
rx4enumSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingThree.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeSettingThree.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeSettingThree.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingThree.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeThresholdThree.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Threshold Digital parameter.")
rx4enumSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdThree.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeThresholdThree.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeThresholdThree.setDescription('The value of this object reflects the setting of the threshold at which the Optical Input Failed signal is sent. It is in 1 dB increments ranging from -2 to -17 dB. The user can enter a number from 0 to 15, where 0 = -2db and 15= -17db')
rx4stateFlagSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdThree.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelModeFour.setDescription("The value of this object provides the label of the Rx200BX4's Mode Digital parameter.")
rx4enumModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeFour.setStatus('optional')
if mibBuilder.loadTexts: rx4enumModeFour.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueModeFour.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagModeFour.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelWavelengthFour.setDescription("The value of this object provides the label of the Rx200BX4's Wavelength Digital parameter.")
rx4enumWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthFour.setStatus('optional')
if mibBuilder.loadTexts: rx4enumWavelengthFour.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueWavelengthFour.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagWavelengthFour.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelAttnSettingFour.setDescription("The value of this object provides the label of the Rx200BX4's AttnSetting Digital parameter.")
rx4enumAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingFour.setStatus('optional')
if mibBuilder.loadTexts: rx4enumAttnSettingFour.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueAttnSettingFour.setDescription('The value of this object is the current value of the parameter. It is an integer value from 0 to 40. Each increment represents 1/2 dB of attenuation from 0 to 20 dB. Where 0 = 0db and 40 = 20db')
rx4stateFlagAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagAttnSettingFour.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeSettingFour.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Setting Digital parameter.")
rx4enumSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingFour.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeSettingFour.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeSettingFour.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingFour.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelSwModeThresholdFour.setDescription("The value of this object provides the label of the Rx200BX4's Switch Mode Threshold Digital parameter.")
rx4enumSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdFour.setStatus('optional')
if mibBuilder.loadTexts: rx4enumSwModeThresholdFour.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 80), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueSwModeThresholdFour.setDescription('The value of this object reflects the setting of the threshold at which the Optical Input Failed signal is sent. It is in 1 dB increments ranging from -2 to -17 dB. The user can enter a number from 0 to 15, where 0 = -2db and 15= -17db')
rx4stateFlagSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdFour.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModuleConfig.setStatus('optional')
if mibBuilder.loadTexts: rx4labelModuleConfig.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
rx4enumModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModuleConfig.setStatus('optional')
if mibBuilder.loadTexts: rx4enumModuleConfig.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("burst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModuleConfig.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueModuleConfig.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModuleConfig.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagModuleConfig.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelRevertTime.setStatus('optional')
if mibBuilder.loadTexts: rx4labelRevertTime.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
rx4enumRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumRevertTime.setStatus('optional')
if mibBuilder.loadTexts: rx4enumRevertTime.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one-sec", 1), ("ten-sec", 2), ("sixty-sec", 3), ("six-hundred-sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueRevertTime.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueRevertTime.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagRevertTime.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagRevertTime.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelTestPointSelect.setStatus('optional')
if mibBuilder.loadTexts: rx4labelTestPointSelect.setDescription('The value of this object provides the label of the Test point Select Digital parameter.')
rx4enumTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumTestPointSelect.setStatus('optional')
if mibBuilder.loadTexts: rx4enumTestPointSelect.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueTestPointSelect.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueTestPointSelect.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagTestPointSelect.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagTestPointSelect.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: rx4labelFactoryDefault.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
rx4enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: rx4enumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rx4valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueFactoryDefault.setDescription('The value of this object is the current value of the parameter.')
rx4stateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateFlagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Rx200BX4StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4StatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4StatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rx4labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelBoot.setStatus('optional')
if mibBuilder.loadTexts: rx4labelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
rx4valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFlash.setStatus('optional')
if mibBuilder.loadTexts: rx4labelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
rx4valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: rx4labelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
rx4valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAlarmDataCRC.setStatus('optional')
if mibBuilder.loadTexts: rx4labelAlarmDataCRC.setDescription('The value of this object provides the label of the Alarm Data CRC Status parameter.')
rx4valueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueAlarmDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueAlarmDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagAlarmDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagAlarmDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelCalibrationDataCRC.setStatus('optional')
if mibBuilder.loadTexts: rx4labelCalibrationDataCRC.setDescription('The value of this object provides the label of the Calibration Data CRC Status parameter.')
rx4valueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueCalibrationDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueCalibrationDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagCalibrationDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagCalibrationDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelHW.setStatus('optional')
if mibBuilder.loadTexts: rx4labelHW.setDescription('The value of this object provides the label of the Hardware Status parameter.')
rx4valueHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueHW.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueHW.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagHW.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagHW.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigOne.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptSigOne.setDescription('The value of this object provides the label of the Optical Signal Status parameter.')
rx4valueOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueOptSigOne.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigOne.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagOptSigOne.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigTwo.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptSigTwo.setDescription('The value of this object provides the label of the Optical Signal Status parameter.')
rx4valueOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueOptSigTwo.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigTwo.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagOptSigTwo.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigThree.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptSigThree.setDescription('The value of this object provides the label of the Optical Signal Status parameter.')
rx4valueOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueOptSigThree.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigThree.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagOptSigThree.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigFour.setStatus('optional')
if mibBuilder.loadTexts: rx4labelOptSigFour.setDescription('The value of this object provides the label of the Optical Signal Status parameter.')
rx4valueOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueOptSigFour.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigFour.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagOptSigFour.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rx4labelBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelBackupCable.setStatus('optional')
if mibBuilder.loadTexts: rx4labelBackupCable.setDescription('The value of this object provides the label of the Backup Cable Status parameter.')
rx4valueBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueBackupCable.setStatus('mandatory')
if mibBuilder.loadTexts: rx4valueBackupCable.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rx4stateflagBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagBackupCable.setStatus('mandatory')
if mibBuilder.loadTexts: rx4stateflagBackupCable.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Rx200BX4FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4FactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rx200BX4FactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rx4bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: rx4bootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
rx4bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: rx4bootStatusByte.setDescription('This object indicates the status of the last boot')
rx4bank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bank0CRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4bank0CRC.setDescription('This object provides the CRC code of bank 0.')
rx4bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4bank1CRC.setDescription('This object provides the CRC code of bank 1.')
rx4prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4prgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: rx4prgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
rx4factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4factoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4factoryCRC.setDescription('This object provides the CRC code for the Factory data.')
rx4calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarm", 3), ("tempComp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4calculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rx4calculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated.')
rx4hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4hourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: rx4hourMeter.setDescription('This object provides the hour meter reading of the module.')
rx4flashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4flashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: rx4flashPrgCntA.setDescription('This object provides the number of times the flash has been programmed on side A.')
rx4flashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4flashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: rx4flashPrgCntB.setDescription('This object provides the number of times the flash has been programmed on side B.')
rx4fwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4fwRev0.setStatus('mandatory')
if mibBuilder.loadTexts: rx4fwRev0.setDescription('This object provides the Revision of the firmware stores in bank 0.')
rx4fwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4fwRev1.setStatus('mandatory')
if mibBuilder.loadTexts: rx4fwRev1.setDescription('This object provides the Revision of the firmware stores in bank 1.')
trapRx200BX4ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4ConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapRx200BX4ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4ConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapRx200BX4OpticalPower1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OpticalPower1Alarm.setDescription("This trap is issued when the Receiver's channel 1 Optical Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4OpticalPower2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OpticalPower2Alarm.setDescription("This trap is issued when the Receiver's channel 2 Optical Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4OpticalPower3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OpticalPower3Alarm.setDescription("This trap is issued when the Receiver's channel 3 Optical Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4OpticalPower4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OpticalPower4Alarm.setDescription("This trap is issued when the Receiver's channel 4 Optical Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4ModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4ModuleTemperatureAlarm.setDescription('This trap is issued when the Rx200BX4 Modules Temperature goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4FanCurrentAlarm.setDescription('This trap is issued when the Rx200BX4 Modules Fan Currrent parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Plus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Plus12CurrentAlarm.setDescription('This trap is issued when the Rx200BX4 Modules positive 12 volt current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Boot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Boot0Alarm.setDescription('This trap is issued when the Rx200BX4 Modules Bank 0 Boot sequence has detected an error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Boot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Boot1Alarm.setDescription('This trap is issued when the Rx200BX4 Modules Bank 1 Boot sequence has detected an error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4FlashAlarm.setDescription('This trap is issued when the Rx200BX4 Modules boot or flash programming sequence has detected a Flash error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4AlarmDataCRCAlarm.setDescription('This trap is issued when the Rx200BX4 Module detects an error calculating the alarm limit CRC. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4FactoryDataCRCAlarm.setDescription('This trap is issued when the Rx200BX4 Module detects an error calculating the Factory data CRC. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4CalDataCRCAlarm.setDescription('This trap is issued when the Rx200BX4 Module detects an error calculating the Calibration data CRC. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4DefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4DefaultAlarm.setDescription("This trap is issued when the Rx200BX4 Module is reset to it's factory default state. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4Mode1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Mode1Alarm.setDescription('This trap is issued when the Rx200BX4 Modules receiver 1 mode is changed from manual or AGC to off and back. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Mode2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Mode2Alarm.setDescription('This trap is issued when the Rx200BX4 Modules receiver 1 mode is changed from manual or AGC to off and back. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Mode3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Mode3Alarm.setDescription('This trap is issued when the Rx200BX4 Modules receiver 1 mode is changed from manual or AGC to off and back. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Mode4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Mode4Alarm.setDescription('This trap is issued when the Rx200BX4 Modules receiver 1 mode is changed from manual or AGC to off and back. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRx200BX4Output1SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Output1SwitchedAlarm.setDescription("This trap is issued when the Rx200BX4 Module's receiver 1 output to the RF Switch Module changes state from good to bad or bad to good. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4Output2SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Output2SwitchedAlarm.setDescription("This trap is issued when the Rx200BX4 Module's receiver 2 output to the RF Switch Module changes state from good to bad or bad to good. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4Output3SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Output3SwitchedAlarm.setDescription("This trap is issued when the Rx200BX4 Module's receiver 3 output to the RF Switch Module changes state from good to bad or bad to good. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4Output4SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4Output4SwitchedAlarm.setDescription("This trap is issued when the Rx200BX4 Module's receiver 4 output to the RF Switch Module changes state from good to bad or bad to good. trapAdditionalInfoInteger variable contains current reading of the this parameter.")
trapRx200BX4RX1StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4RX1StatusAlarm.setDescription('This trap is issued when receiver 1 of the Rx200BX4 Module output is turned on or off.')
trapRx200BX4RX2StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4RX2StatusAlarm.setDescription('This trap is issued when receiver 2 of the Rx200BX4 Module output is turned on or off.')
trapRx200BX4RX3StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4RX3StatusAlarm.setDescription('This trap is issued when receiver 3 of the Rx200BX4 Module output is turned on or off.')
trapRx200BX4RX4StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4RX4StatusAlarm.setDescription('This trap is issued when receiver 4 of the Rx200BX4 Module output is turned on or off.')
trapRx200BX4BackupCableAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4BackupCableAlarm.setDescription('This trap is issued when the slave receiver loses connection to the master receiver.')
trapRx200BX4OptPwr1BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OptPwr1BadAlarm.setDescription('This trap is issued when the receiver 1 optical power level falls below the user set switching threshold.')
trapRx200BX4OptPwr2BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,31)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OptPwr2BadAlarm.setDescription('This trap is issued when the receiver 2 optical power level falls below the user set switching threshold.')
trapRx200BX4OptPwr3BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,32)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OptPwr3BadAlarm.setDescription('This trap is issued when the receiver 3 optical power level falls below the user set switching threshold.')
trapRx200BX4OptPwr4BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,33)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRx200BX4OptPwr4BadAlarm.setDescription('This trap is issued when the receiver 4 optical power level falls below the user set switching threshold.')
mibBuilder.exportSymbols("OMNI-gx2Rx200BX4-MIB", rx4enumAttnSettingOne=rx4enumAttnSettingOne, rx4currentValueModTemp=rx4currentValueModTemp, rx4labelWavelengthOne=rx4labelWavelengthOne, rx4stateflagOptSigOne=rx4stateflagOptSigOne, rx4labelRevertTime=rx4labelRevertTime, rx4currentValueOptPowerTwo=rx4currentValueOptPowerTwo, rx4minorLowModTemp=rx4minorLowModTemp, trapRx200BX4Mode3Alarm=trapRx200BX4Mode3Alarm, rx4valueSwModeThresholdThree=rx4valueSwModeThresholdThree, rx4valueSwModeThresholdFour=rx4valueSwModeThresholdFour, gx2Rx200BX4AnalogTableIndex=gx2Rx200BX4AnalogTableIndex, rx4labelHW=rx4labelHW, gx2Rx200BX4FactoryTableIndex=gx2Rx200BX4FactoryTableIndex, rx4labelSwModeSettingThree=rx4labelSwModeSettingThree, gx2Rx200BX4AnalogEntry=gx2Rx200BX4AnalogEntry, rx4bootStatusByte=rx4bootStatusByte, trapRx200BX4OpticalPower1Alarm=trapRx200BX4OpticalPower1Alarm, rx4enumWavelengthTwo=rx4enumWavelengthTwo, rx4labelFactoryDataCRC=rx4labelFactoryDataCRC, rx4maxValueOptPowerOne=rx4maxValueOptPowerOne, rx4stateFlagModeFour=rx4stateFlagModeFour, rx4enumSwModeSettingOne=rx4enumSwModeSettingOne, rx4valueAttnSettingOne=rx4valueAttnSettingOne, rx4bootControlByte=rx4bootControlByte, rx4labelModuleConfig=rx4labelModuleConfig, rx4valueBackupCable=rx4valueBackupCable, rx4labelSwModeSettingTwo=rx4labelSwModeSettingTwo, rx4stateFlagModuleConfig=rx4stateFlagModuleConfig, rx4alarmStateOptPowerThree=rx4alarmStateOptPowerThree, rx4majorHighOptPowerThree=rx4majorHighOptPowerThree, rx4stateFlagSwModeThresholdThree=rx4stateFlagSwModeThresholdThree, trapRx200BX4Mode1Alarm=trapRx200BX4Mode1Alarm, rx4minValueOptPowerTwo=rx4minValueOptPowerTwo, rx4majorHighOptPowerOne=rx4majorHighOptPowerOne, rx4stateFlagFactoryDefault=rx4stateFlagFactoryDefault, rx4label12Volt=rx4label12Volt, rx4enumSwModeSettingTwo=rx4enumSwModeSettingTwo, rx4labelModeOne=rx4labelModeOne, rx4flashPrgCntA=rx4flashPrgCntA, trapRx200BX4Output2SwitchedAlarm=trapRx200BX4Output2SwitchedAlarm, gx2Rx200BX4FactoryTable=gx2Rx200BX4FactoryTable, rx4uom12Volt=rx4uom12Volt, rx4enumSwModeThresholdFour=rx4enumSwModeThresholdFour, trapRx200BX4Mode2Alarm=trapRx200BX4Mode2Alarm, trapRx200BX4Mode4Alarm=trapRx200BX4Mode4Alarm, rx4maxValueOptPowerTwo=rx4maxValueOptPowerTwo, rx4enumTestPointSelect=rx4enumTestPointSelect, rx4labelFlash=rx4labelFlash, gx2Rx200BX4StatusEntry=gx2Rx200BX4StatusEntry, rx4stateFlagSwModeThresholdTwo=rx4stateFlagSwModeThresholdTwo, rx4valueWavelengthTwo=rx4valueWavelengthTwo, rx4stateFlagWavelengthThree=rx4stateFlagWavelengthThree, rx4stateFlagAttnSettingOne=rx4stateFlagAttnSettingOne, rx4labelBoot=rx4labelBoot, rx4enumModeThree=rx4enumModeThree, rx4stateflagOptSigTwo=rx4stateflagOptSigTwo, rx4labelModTemp=rx4labelModTemp, rx4labelModeFour=rx4labelModeFour, rx4enumSwModeThresholdThree=rx4enumSwModeThresholdThree, trapRx200BX4Boot1Alarm=trapRx200BX4Boot1Alarm, trapRx200BX4OptPwr1BadAlarm=trapRx200BX4OptPwr1BadAlarm, rx4minorLowOptPowerTwo=rx4minorLowOptPowerTwo, rx4valueFlash=rx4valueFlash, rx4valueOptSigThree=rx4valueOptSigThree, rx4stateFlagOptPowerOne=rx4stateFlagOptPowerOne, rx4labelSwModeThresholdFour=rx4labelSwModeThresholdFour, rx4labelAttnSettingTwo=rx4labelAttnSettingTwo, rx4enumFactoryDefault=rx4enumFactoryDefault, rx4stateFlagSwModeThresholdOne=rx4stateFlagSwModeThresholdOne, rx4stateflagBoot=rx4stateflagBoot, U32Data=U32Data, rx4valueSwModeSettingFour=rx4valueSwModeSettingFour, rx4valueWavelengthOne=rx4valueWavelengthOne, rx4enumModeTwo=rx4enumModeTwo, rx4labelAttnSettingOne=rx4labelAttnSettingOne, rx4enumAttnSettingFour=rx4enumAttnSettingFour, rx4labelOptPowerThree=rx4labelOptPowerThree, rx4labelWavelengthFour=rx4labelWavelengthFour, rx4labelBackupCable=rx4labelBackupCable, rx4minorLowOptPowerFour=rx4minorLowOptPowerFour, rx4majorHighFanCurrent=rx4majorHighFanCurrent, rx4minValueOptPowerThree=rx4minValueOptPowerThree, gx2Rx200BX4StatusTableIndex=gx2Rx200BX4StatusTableIndex, rx4uomFanCurrent=rx4uomFanCurrent, rx4stateflagAlarmDataCRC=rx4stateflagAlarmDataCRC, rx4labelAlarmDataCRC=rx4labelAlarmDataCRC, rx4labelAttnSettingThree=rx4labelAttnSettingThree, rx4valueWavelengthThree=rx4valueWavelengthThree, trapRx200BX4Output4SwitchedAlarm=trapRx200BX4Output4SwitchedAlarm, rx4majorLowOptPowerTwo=rx4majorLowOptPowerTwo, rx4bank1CRC=rx4bank1CRC, rx4minorHighOptPowerOne=rx4minorHighOptPowerOne, rx4maxValueOptPowerThree=rx4maxValueOptPowerThree, trapRx200BX4DefaultAlarm=trapRx200BX4DefaultAlarm, rx4labelOptSigThree=rx4labelOptSigThree, gx2Rx200BX4DigitalTableIndex=gx2Rx200BX4DigitalTableIndex, rx4labelCalibrationDataCRC=rx4labelCalibrationDataCRC, rx4labelWavelengthThree=rx4labelWavelengthThree, rx4stateflagOptSigThree=rx4stateflagOptSigThree, rx4valueSwModeSettingOne=rx4valueSwModeSettingOne, rx4stateFlagAttnSettingTwo=rx4stateFlagAttnSettingTwo, rx4stateFlagAttnSettingThree=rx4stateFlagAttnSettingThree, rx4stateFlagRevertTime=rx4stateFlagRevertTime, gx2Rx200BX4Descriptor=gx2Rx200BX4Descriptor, rx4valueAlarmDataCRC=rx4valueAlarmDataCRC, rx4valueHW=rx4valueHW, trapRx200BX4RX1StatusAlarm=trapRx200BX4RX1StatusAlarm, rx4alarmStateFanCurrent=rx4alarmStateFanCurrent, rx4stateFlagTestPointSelect=rx4stateFlagTestPointSelect, rx4minorLowOptPowerThree=rx4minorLowOptPowerThree, trapRx200BX4Output3SwitchedAlarm=trapRx200BX4Output3SwitchedAlarm, rx4stateFlagModTemp=rx4stateFlagModTemp, rx4alarmStateModTemp=rx4alarmStateModTemp, rx4currentValue12Volt=rx4currentValue12Volt, rx4alarmStateOptPowerOne=rx4alarmStateOptPowerOne, rx4valueSwModeThresholdTwo=rx4valueSwModeThresholdTwo, rx4stateflagOptSigFour=rx4stateflagOptSigFour, rx4labelWavelengthTwo=rx4labelWavelengthTwo, rx4factoryCRC=rx4factoryCRC, rx4stateFlagWavelengthOne=rx4stateFlagWavelengthOne, rx4minorLow12Volt=rx4minorLow12Volt, trapRx200BX4OptPwr4BadAlarm=trapRx200BX4OptPwr4BadAlarm, rx4valueSwModeSettingTwo=rx4valueSwModeSettingTwo, rx4labelOptSigOne=rx4labelOptSigOne, rx4stateFlagSwModeSettingOne=rx4stateFlagSwModeSettingOne, gx2Rx200BX4StatusTable=gx2Rx200BX4StatusTable, rx4enumWavelengthOne=rx4enumWavelengthOne, trapRx200BX4RX4StatusAlarm=trapRx200BX4RX4StatusAlarm, rx4labelSwModeSettingFour=rx4labelSwModeSettingFour, rx4minorHighOptPowerTwo=rx4minorHighOptPowerTwo, rx4majorLowOptPowerThree=rx4majorLowOptPowerThree, rx4stateFlag12Volt=rx4stateFlag12Volt, rx4valueBoot=rx4valueBoot, rx4majorLowFanCurrent=rx4majorLowFanCurrent, rx4currentValueOptPowerThree=rx4currentValueOptPowerThree, rx4stateFlagModeOne=rx4stateFlagModeOne, rx4stateFlagSwModeSettingThree=rx4stateFlagSwModeSettingThree, rx4valueModuleConfig=rx4valueModuleConfig, rx4maxValue12Volt=rx4maxValue12Volt, rx4majorHigh12Volt=rx4majorHigh12Volt, rx4stateflagFactoryDataCRC=rx4stateflagFactoryDataCRC, trapRx200BX4Boot0Alarm=trapRx200BX4Boot0Alarm, rx4enumModeFour=rx4enumModeFour, rx4valueOptSigOne=rx4valueOptSigOne, rx4majorHighModTemp=rx4majorHighModTemp, trapRx200BX4ConfigChangeDisplayString=trapRx200BX4ConfigChangeDisplayString, rx4enumAttnSettingTwo=rx4enumAttnSettingTwo, rx4valueWavelengthFour=rx4valueWavelengthFour, rx4enumModuleConfig=rx4enumModuleConfig, rx4minValueOptPowerOne=rx4minValueOptPowerOne, rx4currentValueOptPowerFour=rx4currentValueOptPowerFour, rx4maxValueModTemp=rx4maxValueModTemp, rx4valueRevertTime=rx4valueRevertTime, rx4valueOptSigFour=rx4valueOptSigFour, trapRx200BX4FlashAlarm=trapRx200BX4FlashAlarm, rx4labelTestPointSelect=rx4labelTestPointSelect, rx4enumSwModeThresholdTwo=rx4enumSwModeThresholdTwo, rx4alarmState12Volt=rx4alarmState12Volt, rx4valueAttnSettingTwo=rx4valueAttnSettingTwo, rx4valueSwModeSettingThree=rx4valueSwModeSettingThree, rx4minValue12Volt=rx4minValue12Volt, rx4stateFlagWavelengthTwo=rx4stateFlagWavelengthTwo, rx4enumSwModeSettingFour=rx4enumSwModeSettingFour, rx4minorLowOptPowerOne=rx4minorLowOptPowerOne, rx4valueModeOne=rx4valueModeOne, rx4enumAttnSettingThree=rx4enumAttnSettingThree, rx4labelOptSigTwo=rx4labelOptSigTwo, rx4labelOptSigFour=rx4labelOptSigFour, rx4stateFlagOptPowerFour=rx4stateFlagOptPowerFour, rx4labelOptPowerTwo=rx4labelOptPowerTwo, rx4labelSwModeSettingOne=rx4labelSwModeSettingOne, trapRx200BX4RX3StatusAlarm=trapRx200BX4RX3StatusAlarm, rx4valueSwModeThresholdOne=rx4valueSwModeThresholdOne, trapRx200BX4FanCurrentAlarm=trapRx200BX4FanCurrentAlarm, rx4stateFlagOptPowerThree=rx4stateFlagOptPowerThree, rx4valueModeThree=rx4valueModeThree, rx4majorLowModTemp=rx4majorLowModTemp, rx4alarmStateOptPowerTwo=rx4alarmStateOptPowerTwo, rx4minorHighOptPowerFour=rx4minorHighOptPowerFour, rx4bank0CRC=rx4bank0CRC, trapRx200BX4AlarmDataCRCAlarm=trapRx200BX4AlarmDataCRCAlarm, rx4uomOptPowerTwo=rx4uomOptPowerTwo, rx4valueOptSigTwo=rx4valueOptSigTwo, rx4minValueModTemp=rx4minValueModTemp, rx4valueModeFour=rx4valueModeFour, trapRx200BX4OptPwr2BadAlarm=trapRx200BX4OptPwr2BadAlarm, rx4labelSwModeThresholdOne=rx4labelSwModeThresholdOne, rx4valueFactoryDefault=rx4valueFactoryDefault, trapRx200BX4RX2StatusAlarm=trapRx200BX4RX2StatusAlarm, rx4labelOptPowerOne=rx4labelOptPowerOne, rx4labelModeTwo=rx4labelModeTwo, rx4stateFlagModeTwo=rx4stateFlagModeTwo, rx4labelSwModeThresholdTwo=rx4labelSwModeThresholdTwo, rx4valueFactoryDataCRC=rx4valueFactoryDataCRC, rx4stateflagCalibrationDataCRC=rx4stateflagCalibrationDataCRC, rx4labelModeThree=rx4labelModeThree, rx4majorHighOptPowerFour=rx4majorHighOptPowerFour, rx4uomOptPowerFour=rx4uomOptPowerFour, rx4stateFlagSwModeSettingFour=rx4stateFlagSwModeSettingFour, rx4enumModeOne=rx4enumModeOne, trapRx200BX4Output1SwitchedAlarm=trapRx200BX4Output1SwitchedAlarm, rx4minValueFanCurrent=rx4minValueFanCurrent, rx4maxValueOptPowerFour=rx4maxValueOptPowerFour, trapRx200BX4OpticalPower3Alarm=trapRx200BX4OpticalPower3Alarm, rx4calculateCRC=rx4calculateCRC, rx4labelFanCurrent=rx4labelFanCurrent, rx4labelSwModeThresholdThree=rx4labelSwModeThresholdThree, rx4minorHigh12Volt=rx4minorHigh12Volt, gx2Rx200BX4DigitalTable=gx2Rx200BX4DigitalTable, rx4valueCalibrationDataCRC=rx4valueCalibrationDataCRC, rx4minorLowFanCurrent=rx4minorLowFanCurrent, rx4maxValueFanCurrent=rx4maxValueFanCurrent, trapRx200BX4OptPwr3BadAlarm=trapRx200BX4OptPwr3BadAlarm, rx4majorHighOptPowerTwo=rx4majorHighOptPowerTwo, rx4currentValueOptPowerOne=rx4currentValueOptPowerOne, rx4minorHighOptPowerThree=rx4minorHighOptPowerThree, rx4enumWavelengthFour=rx4enumWavelengthFour, rx4stateflagFlash=rx4stateflagFlash, rx4majorLowOptPowerOne=rx4majorLowOptPowerOne, rx4uomOptPowerOne=rx4uomOptPowerOne, rx4minValueOptPowerFour=rx4minValueOptPowerFour, rx4enumSwModeThresholdOne=rx4enumSwModeThresholdOne, rx4valueAttnSettingFour=rx4valueAttnSettingFour, rx4uomOptPowerThree=rx4uomOptPowerThree, rx4minorHighFanCurrent=rx4minorHighFanCurrent, trapRx200BX4BackupCableAlarm=trapRx200BX4BackupCableAlarm, rx4prgEEPROMByte=rx4prgEEPROMByte, rx4stateFlagFanCurrent=rx4stateFlagFanCurrent, trapRx200BX4Plus12CurrentAlarm=trapRx200BX4Plus12CurrentAlarm, trapRx200BX4ConfigChangeInteger=trapRx200BX4ConfigChangeInteger, gx2Rx200BX4FactoryEntry=gx2Rx200BX4FactoryEntry, rx4enumRevertTime=rx4enumRevertTime, rx4stateflagBackupCable=rx4stateflagBackupCable, rx4labelFactoryDefault=rx4labelFactoryDefault, rx4enumSwModeSettingThree=rx4enumSwModeSettingThree, trapRx200BX4OpticalPower4Alarm=trapRx200BX4OpticalPower4Alarm, rx4fwRev0=rx4fwRev0, rx4fwRev1=rx4fwRev1, rx4stateFlagOptPowerTwo=rx4stateFlagOptPowerTwo, rx4labelOptPowerFour=rx4labelOptPowerFour, rx4majorLowOptPowerFour=rx4majorLowOptPowerFour, Float=Float, rx4stateFlagAttnSettingFour=rx4stateFlagAttnSettingFour, rx4valueModeTwo=rx4valueModeTwo, rx4alarmStateOptPowerFour=rx4alarmStateOptPowerFour, rx4uomModTemp=rx4uomModTemp, rx4labelAttnSettingFour=rx4labelAttnSettingFour, rx4valueTestPointSelect=rx4valueTestPointSelect, trapRx200BX4ModuleTemperatureAlarm=trapRx200BX4ModuleTemperatureAlarm, rx4stateflagHW=rx4stateflagHW, rx4stateFlagSwModeThresholdFour=rx4stateFlagSwModeThresholdFour, rx4valueAttnSettingThree=rx4valueAttnSettingThree, rx4majorLow12Volt=rx4majorLow12Volt, trapRx200BX4FactoryDataCRCAlarm=trapRx200BX4FactoryDataCRCAlarm)
mibBuilder.exportSymbols("OMNI-gx2Rx200BX4-MIB", trapRx200BX4CalDataCRCAlarm=trapRx200BX4CalDataCRCAlarm, rx4flashPrgCntB=rx4flashPrgCntB, rx4stateFlagSwModeSettingTwo=rx4stateFlagSwModeSettingTwo, gx2Rx200BX4DigitalEntry=gx2Rx200BX4DigitalEntry, trapRx200BX4OpticalPower2Alarm=trapRx200BX4OpticalPower2Alarm, rx4currentValueFanCurrent=rx4currentValueFanCurrent, rx4enumWavelengthThree=rx4enumWavelengthThree, rx4stateFlagWavelengthFour=rx4stateFlagWavelengthFour, rx4hourMeter=rx4hourMeter, gx2Rx200BX4AnalogTable=gx2Rx200BX4AnalogTable, rx4stateFlagModeThree=rx4stateFlagModeThree, rx4minorHighModTemp=rx4minorHighModTemp)
