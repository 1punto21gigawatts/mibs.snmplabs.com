#
# PySNMP MIB module HPR-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPR-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
SnaControlPointName, = mibBuilder.importSymbols("APPN-MIB", "SnaControlPointName")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
hprGroups, hprObjects, hprCompliances = mibBuilder.importSymbols("HPR-MIB", "hprGroups", "hprObjects", "hprCompliances")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, IpAddress, MibIdentifier, Counter64, Integer32, Counter32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "MibIdentifier", "Counter64", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "iso", "NotificationType", "TimeTicks")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hprIp = ModuleIdentity((1, 3, 6, 1, 2, 1, 34, 6, 1, 5))
hprIp.setRevisions(('1998-09-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hprIp.setRevisionsDescriptions(('Initial version, Published as RFC 2584',))
if mibBuilder.loadTexts: hprIp.setLastUpdated('9809240000Z')
if mibBuilder.loadTexts: hprIp.setOrganization('IETF SNA NAU MIB WG / AIW APPN MIBs SIG')
if mibBuilder.loadTexts: hprIp.setContactInfo(' Bob Clouston Cisco Systems 7025 Kit Creek Road P.O. Box 14987 Research Triangle Park, NC 27709, USA Tel: 1 919 472 2333 E-mail: clouston@cisco.com Bob Moore IBM Corporation 4205 S. Miami Boulevard BRQA/501 P.O. Box 12195 Research Triangle Park, NC 27709, USA Tel: 1 919 254 4436 E-mail: remoore@us.ibm.com ')
if mibBuilder.loadTexts: hprIp.setDescription('The MIB module for HPR over IP. This module contains two groups: - the HPR over IP Monitoring Group provides a count of the UDP packets sent by a link station for each APPN traffic type. - the HPR over IP Configuration Group provides for reading and setting the mappings between APPN traffic types and TOS Precedence settings in the IP header. These mappings are configured at the APPN port level, and are inherited by the APPN connection networks and link stations associated with an APPN port. A port-level mapping can, however, be overridden for a particular connection network or link station.')
class AppnTrafficType(TextualConvention, Integer32):
    description = 'APPN traffic type. The first four values correspond to APPN transmission priorities (network, high, medium and low), while the fifth is used for both LLC commands (XID, TEST, DISC, and DM) and function-routed NLPs (XID-DONE-RQ and XID-DONE-RSP).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4), ("llcAndFnRoutedNlp", 5))

class AppnTOSPrecedence(DisplayString):
    description = 'A DisplayString representing the setting of the three TOS Precedence bits in the IP Type of Service field for this APPN traffic type. The HPR over IP architecture specifies the following default mapping: APPN traffic type IP TOS Precedence bits ------------------ ---------------------- Network 110 High 100 Medium 010 Low 001 LLC commands, etc. 110 '
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

hprIpActiveLsTable = MibTable((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 1), )
if mibBuilder.loadTexts: hprIpActiveLsTable.setStatus('current')
if mibBuilder.loadTexts: hprIpActiveLsTable.setDescription('The HPR/IP active link station table. This table provides counts of the number of UDP packets sent for each APPN traffic type.')
hprIpActiveLsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 1, 1), ).setIndexNames((0, "HPR-IP-MIB", "hprIpActiveLsLsName"), (0, "HPR-IP-MIB", "hprIpActiveLsAppnTrafficType"))
if mibBuilder.loadTexts: hprIpActiveLsEntry.setStatus('current')
if mibBuilder.loadTexts: hprIpActiveLsEntry.setDescription('Entry of the HPR/IP link station table.')
hprIpActiveLsLsName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10)))
if mibBuilder.loadTexts: hprIpActiveLsLsName.setStatus('current')
if mibBuilder.loadTexts: hprIpActiveLsLsName.setDescription('Administratively assigned name for the link station. If this object has the same value as the appnLsName in the APPN MIB, then the two objects are referring to the same APPN link station.')
hprIpActiveLsAppnTrafficType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 1, 1, 2), AppnTrafficType())
if mibBuilder.loadTexts: hprIpActiveLsAppnTrafficType.setStatus('current')
if mibBuilder.loadTexts: hprIpActiveLsAppnTrafficType.setDescription('APPN traffic type being sent through the link station.')
hprIpActiveLsUdpPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hprIpActiveLsUdpPackets.setStatus('current')
if mibBuilder.loadTexts: hprIpActiveLsUdpPackets.setDescription('The count of outgoing UDP packets carrying this type of APPN traffic. A discontinuity in the counter is indicated by the appnLsCounterDisconTime object in the APPN MIB.')
hprIpAppnPortTable = MibTable((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 2), )
if mibBuilder.loadTexts: hprIpAppnPortTable.setStatus('current')
if mibBuilder.loadTexts: hprIpAppnPortTable.setDescription('The HPR/IP APPN port table. This table supports reading and setting the mapping between APPN traffic types and TOS Precedence settings for all the link stations at this APPN port. This mapping can be overridden for an individual link station or an individual connection network via, respectively, the hprIpLsTOSPrecedence and the hprIpCnTOSPrecedence objects.')
hprIpAppnPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 2, 1), ).setIndexNames((0, "HPR-IP-MIB", "hprIpAppnPortName"), (0, "HPR-IP-MIB", "hprIpAppnPortAppnTrafficType"))
if mibBuilder.loadTexts: hprIpAppnPortEntry.setStatus('current')
if mibBuilder.loadTexts: hprIpAppnPortEntry.setDescription('Entry of the HPR/IP APPN port table. Entries exist for every APPN port defined to support HPR over IP.')
hprIpAppnPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10)))
if mibBuilder.loadTexts: hprIpAppnPortName.setStatus('current')
if mibBuilder.loadTexts: hprIpAppnPortName.setDescription('Administratively assigned name for this APPN port. If this object has the same value as the appnPortName in the APPN MIB, then the two objects are referring to the same APPN port.')
hprIpAppnPortAppnTrafficType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 2, 1, 2), AppnTrafficType())
if mibBuilder.loadTexts: hprIpAppnPortAppnTrafficType.setStatus('current')
if mibBuilder.loadTexts: hprIpAppnPortAppnTrafficType.setDescription('APPN traffic type sent through the port.')
hprIpAppnPortTOSPrecedence = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 2, 1, 3), AppnTOSPrecedence()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hprIpAppnPortTOSPrecedence.setStatus('current')
if mibBuilder.loadTexts: hprIpAppnPortTOSPrecedence.setDescription('A setting for the three TOS Precedence bits in the IP Type of Service field for this APPN traffic type. When this value is changed via a Set operation, the new setting for the TOS Precedence bits takes effect immediately, rather than waiting for some event such as reinitialization of the port or of the APPN node itself.')
hprIpLsTable = MibTable((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 3), )
if mibBuilder.loadTexts: hprIpLsTable.setStatus('current')
if mibBuilder.loadTexts: hprIpLsTable.setDescription('The HPR/IP link station table. Values for TOS Precedence at the link station level override those at the level of the containing port. If there is no entry in this table for a given link station, then that link station inherits its TOS Precedence values from its port.')
hprIpLsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 3, 1), ).setIndexNames((0, "HPR-IP-MIB", "hprIpLsLsName"), (0, "HPR-IP-MIB", "hprIpLsAppnTrafficType"))
if mibBuilder.loadTexts: hprIpLsEntry.setStatus('current')
if mibBuilder.loadTexts: hprIpLsEntry.setDescription('Entry of the HPR/IP link station table.')
hprIpLsLsName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10)))
if mibBuilder.loadTexts: hprIpLsLsName.setStatus('current')
if mibBuilder.loadTexts: hprIpLsLsName.setDescription('Administratively assigned name for the link station. If this object has the same value as the appnLsName in the APPN MIB, then the two objects are referring to the same APPN link station.')
hprIpLsAppnTrafficType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 3, 1, 2), AppnTrafficType())
if mibBuilder.loadTexts: hprIpLsAppnTrafficType.setStatus('current')
if mibBuilder.loadTexts: hprIpLsAppnTrafficType.setDescription('APPN traffic type sent through the link station.')
hprIpLsTOSPrecedence = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 3, 1, 3), AppnTOSPrecedence()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hprIpLsTOSPrecedence.setStatus('current')
if mibBuilder.loadTexts: hprIpLsTOSPrecedence.setDescription('A setting for the three TOS Precedence bits in the IP Type of Service field for this APPN traffic type. When this value is changed via a Set operation, the new setting for the TOS Precedence bits takes effect immediately, rather than waiting for some event such as reinitialization of the port or of the APPN node itself.')
hprIpLsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hprIpLsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hprIpLsRowStatus.setDescription("This object allows entries to be created and deleted in the hprIpLsTable. As soon as an entry becomes active, the mapping between APPN traffic types and TOS Precedence settings that it specifies becomes effective. The value of the other accessible object in this entry, hprIpLsTOSPrecedence, can be changed via a Set operation when this object's value is active(1). An entry in this table is deleted by setting this object to destroy(6). Deleting an entry in this table causes the link station to revert to the default TOS Precedence mapping for its port.")
hprIpCnTable = MibTable((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 4), )
if mibBuilder.loadTexts: hprIpCnTable.setStatus('current')
if mibBuilder.loadTexts: hprIpCnTable.setDescription('The HPR/IP connection network table. Values for TOS Precedence at the connection network level override those at the level of the containing port. If there is no entry in this table for a given connection network, then that connection network inherits its TOS Precedence values from its port. A node may have connections to a given connection network through multiple ports. There is no provision in the HPR-IP architecture for variations in TOS Precedence values for a single connection network based on the port through which traffic is flowing to the connection network. Thus an entry in this table overrides the port-level settings for all the ports through which the node can reach the connection network.')
hprIpCnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 4, 1), ).setIndexNames((0, "HPR-IP-MIB", "hprIpCnVrnName"), (0, "HPR-IP-MIB", "hprIpCnAppnTrafficType"))
if mibBuilder.loadTexts: hprIpCnEntry.setStatus('current')
if mibBuilder.loadTexts: hprIpCnEntry.setDescription('Entry of the HPR/IP connection network table.')
hprIpCnVrnName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 4, 1, 1), SnaControlPointName())
if mibBuilder.loadTexts: hprIpCnVrnName.setStatus('current')
if mibBuilder.loadTexts: hprIpCnVrnName.setDescription('SNA control point name of the virtual routing node (VRN) that identifies the connection network in the APPN topology database. If this object has the same value as the appnVrnName in the APPN MIB, then the two objects are referring to the same APPN VRN.')
hprIpCnAppnTrafficType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 4, 1, 2), AppnTrafficType())
if mibBuilder.loadTexts: hprIpCnAppnTrafficType.setStatus('current')
if mibBuilder.loadTexts: hprIpCnAppnTrafficType.setDescription('APPN traffic type sent to this connection network.')
hprIpCnTOSPrecedence = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 4, 1, 3), AppnTOSPrecedence()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hprIpCnTOSPrecedence.setStatus('current')
if mibBuilder.loadTexts: hprIpCnTOSPrecedence.setDescription('A setting for the three TOS Precedence bits in the IP Type of Service field for this APPN traffic type. This setting applies to all traffic sent to this connection network by this node, regardless of the port through which the traffic is sent. When this value is changed via a Set operation, the new setting for the TOS Precedence bits takes effect immediately, rather than waiting for some event such as reinitialization of a port or of the APPN node itself.')
hprIpCnRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 6, 1, 5, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hprIpCnRowStatus.setStatus('current')
if mibBuilder.loadTexts: hprIpCnRowStatus.setDescription("This object allows entries to be created and deleted in the hprIpCnTable. As soon as an entry becomes active, the mapping between APPN traffic types and TOS Precedence settings that it specifies becomes effective. The value of the other accessible object in this entry, hprIpCnTOSPrecedence, can be changed via a Set operation when this object's value is active(1). An entry in this table is deleted by setting this object to destroy(6). Deleting an entry in this table causes the connection network to revert to the default TOS Precedence mapping for each port through which it is accessed.")
hprIpCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 34, 6, 2, 1, 2)).setObjects(("HPR-IP-MIB", "hprIpMonitoringGroup"), ("HPR-IP-MIB", "hprIpConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hprIpCompliance = hprIpCompliance.setStatus('current')
if mibBuilder.loadTexts: hprIpCompliance.setDescription('Compliance statement for the HPR over IP MIB module.')
hprIpMonitoringGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 6, 2, 2, 5)).setObjects(("HPR-IP-MIB", "hprIpActiveLsUdpPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hprIpMonitoringGroup = hprIpMonitoringGroup.setStatus('current')
if mibBuilder.loadTexts: hprIpMonitoringGroup.setDescription('An object for counting outgoing HPR/IP traffic for each APPN traffic type.')
hprIpConfigurationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 6, 2, 2, 6)).setObjects(("HPR-IP-MIB", "hprIpAppnPortTOSPrecedence"), ("HPR-IP-MIB", "hprIpLsTOSPrecedence"), ("HPR-IP-MIB", "hprIpLsRowStatus"), ("HPR-IP-MIB", "hprIpCnTOSPrecedence"), ("HPR-IP-MIB", "hprIpCnRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hprIpConfigurationGroup = hprIpConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: hprIpConfigurationGroup.setDescription('A collection of HPR/IP objects representing the mappings between APPN traffic types and TOS Precedence bits at the APPN port, APPN link station, and APPN connection network levels.')
mibBuilder.exportSymbols("HPR-IP-MIB", hprIpActiveLsLsName=hprIpActiveLsLsName, hprIpActiveLsAppnTrafficType=hprIpActiveLsAppnTrafficType, hprIpMonitoringGroup=hprIpMonitoringGroup, hprIpCnRowStatus=hprIpCnRowStatus, hprIpAppnPortName=hprIpAppnPortName, hprIpAppnPortTable=hprIpAppnPortTable, PYSNMP_MODULE_ID=hprIp, hprIpConfigurationGroup=hprIpConfigurationGroup, hprIpCnVrnName=hprIpCnVrnName, hprIpLsLsName=hprIpLsLsName, hprIpActiveLsEntry=hprIpActiveLsEntry, hprIp=hprIp, hprIpAppnPortEntry=hprIpAppnPortEntry, hprIpActiveLsTable=hprIpActiveLsTable, hprIpCnEntry=hprIpCnEntry, AppnTrafficType=AppnTrafficType, hprIpAppnPortAppnTrafficType=hprIpAppnPortAppnTrafficType, hprIpLsRowStatus=hprIpLsRowStatus, hprIpCompliance=hprIpCompliance, hprIpActiveLsUdpPackets=hprIpActiveLsUdpPackets, hprIpCnTable=hprIpCnTable, hprIpCnTOSPrecedence=hprIpCnTOSPrecedence, hprIpLsTOSPrecedence=hprIpLsTOSPrecedence, hprIpLsEntry=hprIpLsEntry, hprIpAppnPortTOSPrecedence=hprIpAppnPortTOSPrecedence, hprIpLsAppnTrafficType=hprIpLsAppnTrafficType, hprIpLsTable=hprIpLsTable, hprIpCnAppnTrafficType=hprIpCnAppnTrafficType, AppnTOSPrecedence=AppnTOSPrecedence)
