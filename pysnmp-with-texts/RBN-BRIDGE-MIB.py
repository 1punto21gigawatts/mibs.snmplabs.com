#
# PySNMP MIB module RBN-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dot1dStpPortState, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortState", "dot1dBasePortEntry")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Bits, Gauge32, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, Counter64, IpAddress, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Gauge32", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Counter64", "IpAddress", "Unsigned32", "Integer32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
rbnBridgeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 42))
rbnBridgeMib.setRevisions(('2008-08-27 00:00', '2008-02-25 00:00', '2007-06-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnBridgeMib.setRevisionsDescriptions(('Updated dot1dStpPortState in place of current port state, and changed rbnBridgePortPrevState to rbnBridgePortPreviousState for trap, and updated groups accordingly.', 'Add rbnBridgeCompliance2, rbnBridgeStateNotifyObjectGroup, rbnBridgeBaseObjectGroup, rbnBridgeStateNotifyGroup, rbnBridgeNewRootEvent, and rbnBridgeTopologyChangeEvent.', 'Initial Version.',))
if mibBuilder.loadTexts: rbnBridgeMib.setLastUpdated('200808270000Z')
if mibBuilder.loadTexts: rbnBridgeMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnBridgeMib.setContactInfo(' Redback Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnBridgeMib.setDescription('Defines the objects necessary to support the management of Bridge objects. Add rbnBridgeCircuitStateEvent notification along with the associated objects. Defined rbnBridgeNotifyObjectGroup and rbnBridgeNotifyGroup for compliance.')
rbnBridgeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 0))
rbnBridgeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1))
rbnBridgeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2))
rbnBridgeNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1))
rbnBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2))
rbnBridgeNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnBridgeNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeNotifyEnable.setDescription('This object will provide a mechanism for enabling and disabling bridge circuit state notifications. A value of 1 (true) indicates that bridge circuit state notifications are enabled. A value of 2 (false) indicates that bridge circuit state notifications are disabled.')
rbnBridgeGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnBridgeGroupName.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeGroupName.setDescription('Identifier for the bridge instance.')
rbnBridgeCircuitDescriptor = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnBridgeCircuitDescriptor.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeCircuitDescriptor.setDescription('A descriptor for identifying the Bridge circuit.')
rbnBridgeCircuitStatus = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("cleared", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnBridgeCircuitStatus.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeCircuitStatus.setDescription('The status of the circuit in the Bridge if it is blocked/cleared based on loop detection.')
rbnBridgeGroupContextName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnBridgeGroupContextName.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeGroupContextName.setDescription('The context in which the circuit is defined.')
rbnBridgePortPreviousState = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnBridgePortPreviousState.setStatus('current')
if mibBuilder.loadTexts: rbnBridgePortPreviousState.setDescription('This object contains the previous state of the same port as dot1dStpPortState in the same notification.')
rbnBridgeIdTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 1), )
if mibBuilder.loadTexts: rbnBridgeIdTable.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeIdTable.setDescription('A table contains Bridge identifier.')
rbnBridgeIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 1, 1), ).setIndexNames((0, "RBN-BRIDGE-MIB", "rbnBridgeName"))
if mibBuilder.loadTexts: rbnBridgeIdEntry.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeIdEntry.setDescription('Bridge ID table entry.')
rbnBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rbnBridgeName.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeName.setDescription('The Bridge name. It is the same as rbnBridgeGroupName.')
rbnBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnBridgeId.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeId.setDescription('The Bridge identifier referring to this Bridge.')
rbnBridgePortCctDescrTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 2), )
if mibBuilder.loadTexts: rbnBridgePortCctDescrTable.setStatus('current')
if mibBuilder.loadTexts: rbnBridgePortCctDescrTable.setDescription('A table contains Bridge port number and its circuit description.')
rbnBridgePortCctDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 2, 1), )
dot1dBasePortEntry.registerAugmentions(("RBN-BRIDGE-MIB", "rbnBridgePortCctDescrEntry"))
rbnBridgePortCctDescrEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: rbnBridgePortCctDescrEntry.setStatus('current')
if mibBuilder.loadTexts: rbnBridgePortCctDescrEntry.setDescription('Bridge port circuit description table entry.')
rbnBridgePortCctDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 42, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnBridgePortCctDescr.setStatus('current')
if mibBuilder.loadTexts: rbnBridgePortCctDescr.setDescription('The circuit description of this Bridge port.')
rbnBridgeCctStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 42, 0, 1)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeGroupName"), ("RBN-BRIDGE-MIB", "rbnBridgeCircuitDescriptor"), ("RBN-BRIDGE-MIB", "rbnBridgeCircuitStatus"), ("RBN-BRIDGE-MIB", "rbnBridgeGroupContextName"))
if mibBuilder.loadTexts: rbnBridgeCctStateEvent.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeCctStateEvent.setDescription('This notification signifies that a loop has been detected leading to the bridge circuit being blocked/cleared.')
rbnBridgeNewRootEvent = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 42, 0, 2)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeId"), ("BRIDGE-MIB", "dot1dStpPortState"))
if mibBuilder.loadTexts: rbnBridgeNewRootEvent.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeNewRootEvent.setDescription('This notification indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root.')
rbnBridgeTopologyChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 42, 0, 3)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeId"), ("BRIDGE-MIB", "dot1dStpPortState"), ("RBN-BRIDGE-MIB", "rbnBridgePortPreviousState"))
if mibBuilder.loadTexts: rbnBridgeTopologyChangeEvent.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeTopologyChangeEvent.setDescription('This notification is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state.')
rbnBridgeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 1))
rbnBridgeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 2))
rbnBridgeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 1, 1)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeNotifyObjectGroup"), ("RBN-BRIDGE-MIB", "rbnBridgeNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeCompliance = rbnBridgeCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: rbnBridgeCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback Bridge MIB.')
rbnBridgeCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 1, 2)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeNotifyObjectGroup"), ("RBN-BRIDGE-MIB", "rbnBridgeStateNotifyObjectGroup"), ("RBN-BRIDGE-MIB", "rbnBridgeNotifyGroup"), ("RBN-BRIDGE-MIB", "rbnBridgeStateNotifyGroup"), ("RBN-BRIDGE-MIB", "rbnBridgeBaseObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeCompliance2 = rbnBridgeCompliance2.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeCompliance2.setDescription('The compliance statement for SNMP entities which implement the Redback Bridge MIB.')
rbnBridgeNotifyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 2, 1)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeNotifyEnable"), ("RBN-BRIDGE-MIB", "rbnBridgeGroupName"), ("RBN-BRIDGE-MIB", "rbnBridgeCircuitDescriptor"), ("RBN-BRIDGE-MIB", "rbnBridgeCircuitStatus"), ("RBN-BRIDGE-MIB", "rbnBridgeGroupContextName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeNotifyObjectGroup = rbnBridgeNotifyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeNotifyObjectGroup.setDescription('The collection of objects related to Bridge notifications.')
rbnBridgeStateNotifyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 2, 2)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgePortPreviousState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeStateNotifyObjectGroup = rbnBridgeStateNotifyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeStateNotifyObjectGroup.setDescription('The collection of objects related to Bridge notifications.')
rbnBridgeNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 2, 3)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeCctStateEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeNotifyGroup = rbnBridgeNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeNotifyGroup.setDescription('Notification for tracking the bridge circuit blocked/cleared on detecting a loop.')
rbnBridgeStateNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 2, 4)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeNewRootEvent"), ("RBN-BRIDGE-MIB", "rbnBridgeTopologyChangeEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeStateNotifyGroup = rbnBridgeStateNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeStateNotifyGroup.setDescription('Notification for tracking the new root and topology changes in the bridge.')
rbnBridgeBaseObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 42, 2, 2, 5)).setObjects(("RBN-BRIDGE-MIB", "rbnBridgeId"), ("RBN-BRIDGE-MIB", "rbnBridgePortCctDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnBridgeBaseObjectGroup = rbnBridgeBaseObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnBridgeBaseObjectGroup.setDescription('The collection of objects related to Bridge base objects.')
mibBuilder.exportSymbols("RBN-BRIDGE-MIB", rbnBridgeGroupContextName=rbnBridgeGroupContextName, rbnBridgeBase=rbnBridgeBase, rbnBridgeCompliances=rbnBridgeCompliances, rbnBridgeNotifications=rbnBridgeNotifications, rbnBridgePortCctDescr=rbnBridgePortCctDescr, rbnBridgeStateNotifyObjectGroup=rbnBridgeStateNotifyObjectGroup, rbnBridgeNotifyGroup=rbnBridgeNotifyGroup, rbnBridgeIdEntry=rbnBridgeIdEntry, rbnBridgeCctStateEvent=rbnBridgeCctStateEvent, rbnBridgeStateNotifyGroup=rbnBridgeStateNotifyGroup, rbnBridgePortPreviousState=rbnBridgePortPreviousState, rbnBridgeGroupName=rbnBridgeGroupName, rbnBridgeCompliance2=rbnBridgeCompliance2, rbnBridgeCompliance=rbnBridgeCompliance, rbnBridgeIdTable=rbnBridgeIdTable, rbnBridgePortCctDescrTable=rbnBridgePortCctDescrTable, rbnBridgeCircuitDescriptor=rbnBridgeCircuitDescriptor, rbnBridgeNewRootEvent=rbnBridgeNewRootEvent, rbnBridgeTopologyChangeEvent=rbnBridgeTopologyChangeEvent, rbnBridgeConformance=rbnBridgeConformance, rbnBridgeNotify=rbnBridgeNotify, rbnBridgePortCctDescrEntry=rbnBridgePortCctDescrEntry, PYSNMP_MODULE_ID=rbnBridgeMib, rbnBridgeMib=rbnBridgeMib, rbnBridgeNotifyObjectGroup=rbnBridgeNotifyObjectGroup, rbnBridgeName=rbnBridgeName, rbnBridgeId=rbnBridgeId, rbnBridgeGroups=rbnBridgeGroups, rbnBridgeCircuitStatus=rbnBridgeCircuitStatus, rbnBridgeBaseObjectGroup=rbnBridgeBaseObjectGroup, rbnBridgeNotifyEnable=rbnBridgeNotifyEnable, rbnBridgeObjects=rbnBridgeObjects)
