#
# PySNMP MIB module PBC-GENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PBC-GENERIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
pbcModuleRegs, pbcManagement, pbcCaps = mibBuilder.importSymbols("PBC-ENT-MIB", "pbcModuleRegs", "pbcManagement", "pbcCaps")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, ModuleIdentity, Unsigned32, Counter32, Counter64, NotificationType, Gauge32, TimeTicks, IpAddress, Integer32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter32", "Counter64", "NotificationType", "Gauge32", "TimeTicks", "IpAddress", "Integer32", "ObjectIdentity", "iso")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
pbcGenericSystemMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5987, 1, 1, 1))
if mibBuilder.loadTexts: pbcGenericSystemMib.setLastUpdated('200106211620Z')
if mibBuilder.loadTexts: pbcGenericSystemMib.setOrganization('Pacific Broadband Communications')
if mibBuilder.loadTexts: pbcGenericSystemMib.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: pbcGenericSystemMib.setDescription('This module defines management objects which are common to all PBC chassis/system products.')
class PortType(TextualConvention, Integer32):
    description = 'The type of data port: 0 = Not Applicable 1 = cableDS (cable downstream) 2 = cableUS (cable upstream physical) 3 = Fast Ethernet 4 = Gigabit Ethernet 5 = 10 Gigabit Ethernet 6 = RS-232 7 = cableUsLogical (cable upstream logical) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notApplicable", 0), ("cableDS", 1), ("cableUS", 2), ("fastEthernet", 3), ("gigabitEthernet", 4), ("tenGigabitEthernet", 5), ("rs232", 6), ("cableUsLogical", 7))

class ChgHistoryDataPath(TextualConvention, Integer32):
    description = "Configuration change data's source or destination."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("erase", 1), ("cmdSource", 2), ("startup", 3), ("operational", 4), ("tftp", 5), ("local", 6))

pbcGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 1))
pbcChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1))
pbcChassisEntityIndex = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcChassisEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pbcChassisEntityIndex.setDescription("entPhysicalIndex of the chassis' entry in the Entity MIB's (RFC2737) entPhysicalTable or '0', if none.")
pbcChassisOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("operational", 1), ("disabled", 3), ("standby", 4), ("testing", 5), ("failure", 6), ("initializing", 7), ("unconfigured", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcChassisOperStatus.setStatus('current')
if mibBuilder.loadTexts: pbcChassisOperStatus.setDescription("Chassis' current operational status.")
pbcChassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcChassisSlots.setStatus('current')
if mibBuilder.loadTexts: pbcChassisSlots.setDescription("Number of slots in this chassis, or '0' if neither applicable nor determinable.")
pbcContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcContactInfo.setStatus('current')
if mibBuilder.loadTexts: pbcContactInfo.setDescription('Pacific Broadband contact information.')
pbcHostName = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcHostName.setStatus('current')
if mibBuilder.loadTexts: pbcHostName.setDescription('Name of this system.')
pbcDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcDomainName.setStatus('current')
if mibBuilder.loadTexts: pbcDomainName.setDescription('Domain name for this host.')
pbcDateTimeOfLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 7), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcDateTimeOfLastChange.setStatus('current')
if mibBuilder.loadTexts: pbcDateTimeOfLastChange.setDescription('Date and time of last change to either the configuration or the software.')
pbcCardIfIndexTableNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardIfIndexTableNumEntries.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfIndexTableNumEntries.setDescription('Number of entries currently in the pbcCardIfIndexTable. This should be the same number as there are entries in the ifTable.')
pbcCardIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9), )
if mibBuilder.loadTexts: pbcCardIfIndexTable.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfIndexTable.setDescription('For each ifIndex currently exposed by the system, this table will provide an association to the physical and logical objects which are related to it.')
pbcCardIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCardIfIndexEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfIndexEntry.setDescription('One ifIndex mapping entry.')
pbcCardIfCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardIfCardIndex.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfCardIndex.setDescription("Index of the card in the Chassis pbcCardTable which contains this interface or '0' if not applicable.")
pbcCardIfPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardIfPortNumber.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfPortNumber.setDescription("Chassis port number, unique per port on a given card for the same interface type. If pbcCardIfPortNumber is not applicable to the card, then the object instance won't be populated.")
pbcCardIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9, 1, 3), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardIfPortType.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfPortType.setDescription('The type of port associated with this ifIndex: 0 = Not Applicable 1 = Downstream 2 = Upstream 3 = Fast Ethernet 4 = Gigabit Ethernet 5 = 10 Gigabit Ethernet 6 = RS-232 ')
pbcCardIfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardIfSlotNumber.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfSlotNumber.setDescription("Chassis slot number, or '0' if neither applicable nor determinable.")
pbcCardIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardIfPortIndex.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfPortIndex.setDescription('The system unique port index number for the physical port associated with this ifIndex.')
pbcCardTableNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardTableNumEntries.setStatus('current')
if mibBuilder.loadTexts: pbcCardTableNumEntries.setDescription('Number of entries currently in the pbcCardTable.')
pbcCardTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11), )
if mibBuilder.loadTexts: pbcCardTable.setStatus('current')
if mibBuilder.loadTexts: pbcCardTable.setDescription('Chassis card table.')
pbcCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfCardIndex"))
if mibBuilder.loadTexts: pbcCardEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCardEntry.setDescription('Installed card types are enumerated here. These entries should not be removed when a card is ejected from the system. The pbcCardOperStatus of the ejected cards should be set to notPreset (8). ')
pbcCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardSlotNumber.setStatus('current')
if mibBuilder.loadTexts: pbcCardSlotNumber.setDescription("Slot number relative to the containing card or chassis, or '0' if neither applicable nor determinable.")
pbcCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pbcCardEntityIndex.setDescription("entPhysicalIndex of this card's entry in the Entity MIB's (RFC2737) entPhysicalTable or '0', if none.")
pbcCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCardAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pbcCardAdminStatus.setDescription('The desired state of the card. When a card/module initializes, its initial pbcCardAdminStatus is down(2). As a result of either explicit management action or per configuration information retained by the managed system, pbcCardAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state). If a management application writes reset(4) to this object, the card will initiate a full re-initialization.')
pbcCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unspecified", 1), ("operational", 2), ("disabled", 3), ("standby", 4), ("testing", 5), ("failure", 6), ("initializing", 7), ("notPresent", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardOperStatus.setStatus('current')
if mibBuilder.loadTexts: pbcCardOperStatus.setDescription('The operational status of the card. The pbcCardOperStatus is operational(2) when a card is recognized by the device and is enabled for operation. pbcCardOperStatus is disabled(3) if the card is not recognized by the device, or if it is not enabled for operation. pbcCardOperStatus is standby(4) if the card is enabled and acting as a standby/redundant slave. pbcCardOperStatus is testing (5) when the card is in the diagnostic mode. pbcCardOperStatus is failure (6) if a hardware or software failure is recognized. pbcCardOperStatus is initializing (7) when the card is booting up and not ready to accept any external c onfiguration. pbcCardOperStatus is notPresent (8) if the card has been removed from the system.')
pbcCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardUpTime.setStatus('current')
if mibBuilder.loadTexts: pbcCardUpTime.setDescription('The value of sysUpTime for this management entity, when this card was last (re-)initialized. ')
pbcCardnvRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardnvRAMSize.setStatus('current')
if mibBuilder.loadTexts: pbcCardnvRAMSize.setDescription('Amount of non-volatile RAM in bytes.')
pbcCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardNumPorts.setStatus('current')
if mibBuilder.loadTexts: pbcCardNumPorts.setDescription("Number of ports on this card, or '0' if no ports or not applicable or determinable.")
pbcCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccm", 1), ("dm", 2), ("nic", 3), ("rim", 4), ("sim", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardType.setStatus('current')
if mibBuilder.loadTexts: pbcCardType.setDescription('The card type of the card. Here are the various types of cards supported: ccm -Chassis Control Module dm - DOCSIS Module nic - Network Interface Module rim - Redundant Rear I/O Module sim - Switching Rear I/O Module There may be one or two cards in one slot - one in front and the other in the rear of the midplane. ')
pbcCardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("front", 1), ("rear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardPosition.setStatus('current')
if mibBuilder.loadTexts: pbcCardPosition.setDescription('The position of the card relative to the midplane. The pbcCardTable may contain one or two entry per slot. If there are two entries present per slot, then the pbcCardPosition of one should have the value front (2) and the other should have the value rear (2).')
pbcCardPortTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 12), )
if mibBuilder.loadTexts: pbcCardPortTable.setStatus('current')
if mibBuilder.loadTexts: pbcCardPortTable.setDescription('Describes the ports on a particular card and their current status.')
pbcCardPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 12, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfCardIndex"), (0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"))
if mibBuilder.loadTexts: pbcCardPortEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCardPortEntry.setDescription('Port characteristics comprising an entry in the table. These entries should not be removed when a card is ejected from the system. The pbcCardPortStatus of the ejected cards should be set to notPreset (5).')
pbcCardPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("standby", 3), ("disabled", 4), ("notPresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardPortStatus.setStatus('current')
if mibBuilder.loadTexts: pbcCardPortStatus.setDescription('The current operational status of this port. pbcCardPortStatus is active(2) when a port is enabled for operation. pbcCardPortStatus is disabled(3) if the port is not enabled for operation. pbcCardPortStatus is standby(4) if the port is on a card is acting as a standby. The pbcCardPortStatus is not-present(5) if the card containing the port has been removed from the system.')
pbcCardPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCardPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pbcCardPortEntityIndex.setDescription("entPhysicalIndex of this port's entry in the Entity MIB's (RFC2737) entPhysicalTable or '0', if none.")
pbcCardPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCardPortAlias.setStatus('current')
if mibBuilder.loadTexts: pbcCardPortAlias.setDescription('Alias name for the port as specified by a network manager. On the first instantiation of the interface, the value of the pbcCardPortAlias is zero-length string. When a value is written into an instance of the pbcCardPortAlias through a set operation, then the agent must retain the supplied value as long as the port remains instantiated, including across all re-initializations and reboots of the system.')
pbcPortIfTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 13), )
if mibBuilder.loadTexts: pbcPortIfTable.setStatus('current')
if mibBuilder.loadTexts: pbcPortIfTable.setDescription('Lists the interfaces (ifIndex values) associated with a specific port.')
pbcPortIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 13, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"), (0, "PBC-GENERIC-MIB", "pbcPortIfIndex"))
if mibBuilder.loadTexts: pbcPortIfEntry.setStatus('current')
if mibBuilder.loadTexts: pbcPortIfEntry.setDescription('An entry in the pbcPortIfEntry table. For each port number within the system, assigned by the chassis CCM, there is one entry for each IfIndex associated with that port. If no interfaces are associated with this port, then an entry with a portIfIndex value of -1 will appear in this table.')
pbcPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 1, 1, 13, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: pbcPortIfIndex.setDescription("ifIndex associated with this port or '-1', if none.")
pbcGenericConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 1, 2))
pbcGenericGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 1, 2, 1))
pbcChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 1, 2, 1, 1)).setObjects(("PBC-GENERIC-MIB", "pbcChassisEntityIndex"), ("PBC-GENERIC-MIB", "pbcChassisOperStatus"), ("PBC-GENERIC-MIB", "pbcChassisSlots"), ("PBC-GENERIC-MIB", "pbcContactInfo"), ("PBC-GENERIC-MIB", "pbcHostName"), ("PBC-GENERIC-MIB", "pbcDomainName"), ("PBC-GENERIC-MIB", "pbcDateTimeOfLastChange"), ("PBC-GENERIC-MIB", "pbcCardIfIndexTableNumEntries"), ("PBC-GENERIC-MIB", "pbcCardIfCardIndex"), ("PBC-GENERIC-MIB", "pbcCardIfPortNumber"), ("PBC-GENERIC-MIB", "pbcCardIfPortType"), ("PBC-GENERIC-MIB", "pbcCardIfSlotNumber"), ("PBC-GENERIC-MIB", "pbcCardAdminStatus"), ("PBC-GENERIC-MIB", "pbcCardTableNumEntries"), ("PBC-GENERIC-MIB", "pbcCardSlotNumber"), ("PBC-GENERIC-MIB", "pbcCardEntityIndex"), ("PBC-GENERIC-MIB", "pbcCardOperStatus"), ("PBC-GENERIC-MIB", "pbcCardUpTime"), ("PBC-GENERIC-MIB", "pbcCardnvRAMSize"), ("PBC-GENERIC-MIB", "pbcCardNumPorts"), ("PBC-GENERIC-MIB", "pbcCardPortStatus"), ("PBC-GENERIC-MIB", "pbcCardPortEntityIndex"), ("PBC-GENERIC-MIB", "pbcCardType"), ("PBC-GENERIC-MIB", "pbcCardPosition"), ("PBC-GENERIC-MIB", "pbcCardPortAlias"), ("PBC-GENERIC-MIB", "pbcPortIfIndex"), ("PBC-GENERIC-MIB", "pbcCardIfPortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcChassisGroup = pbcChassisGroup.setStatus('current')
if mibBuilder.loadTexts: pbcChassisGroup.setDescription('Objects associated with generic PBC chassis management.')
pbcGenericCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 1, 2, 2))
pbcGenericBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5987, 2, 1, 2, 2, 1)).setObjects(("PBC-GENERIC-MIB", "pbcChassisGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcGenericBasicCompliance = pbcGenericBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: pbcGenericBasicCompliance.setDescription('Group support required for basic level compliance.')
mibBuilder.exportSymbols("PBC-GENERIC-MIB", pbcCardIfIndexTableNumEntries=pbcCardIfIndexTableNumEntries, pbcCardIfPortNumber=pbcCardIfPortNumber, pbcCardNumPorts=pbcCardNumPorts, ChgHistoryDataPath=ChgHistoryDataPath, pbcDomainName=pbcDomainName, pbcCardPortAlias=pbcCardPortAlias, pbcCardAdminStatus=pbcCardAdminStatus, pbcCardSlotNumber=pbcCardSlotNumber, PYSNMP_MODULE_ID=pbcGenericSystemMib, pbcGenericConformance=pbcGenericConformance, pbcCardPortEntry=pbcCardPortEntry, pbcDateTimeOfLastChange=pbcDateTimeOfLastChange, pbcChassisOperStatus=pbcChassisOperStatus, pbcChassisSlots=pbcChassisSlots, pbcCardIfIndexEntry=pbcCardIfIndexEntry, pbcCardType=pbcCardType, pbcCardPortStatus=pbcCardPortStatus, pbcGenericBasicCompliance=pbcGenericBasicCompliance, pbcCardTableNumEntries=pbcCardTableNumEntries, pbcChassisGroup=pbcChassisGroup, pbcGeneric=pbcGeneric, pbcPortIfIndex=pbcPortIfIndex, pbcPortIfEntry=pbcPortIfEntry, pbcGenericSystemMib=pbcGenericSystemMib, pbcCardTable=pbcCardTable, pbcHostName=pbcHostName, pbcCardEntry=pbcCardEntry, pbcGenericGroups=pbcGenericGroups, pbcCardIfCardIndex=pbcCardIfCardIndex, pbcCardIfPortType=pbcCardIfPortType, pbcCardPortTable=pbcCardPortTable, pbcGenericCompliance=pbcGenericCompliance, pbcChassisEntityIndex=pbcChassisEntityIndex, pbcContactInfo=pbcContactInfo, pbcCardIfSlotNumber=pbcCardIfSlotNumber, pbcCardIfPortIndex=pbcCardIfPortIndex, pbcCardIfIndexTable=pbcCardIfIndexTable, pbcPortIfTable=pbcPortIfTable, pbcCardPortEntityIndex=pbcCardPortEntityIndex, pbcCardnvRAMSize=pbcCardnvRAMSize, pbcCardPosition=pbcCardPosition, pbcCardOperStatus=pbcCardOperStatus, pbcCardUpTime=pbcCardUpTime, pbcChassis=pbcChassis, pbcCardEntityIndex=pbcCardEntityIndex, PortType=PortType)
