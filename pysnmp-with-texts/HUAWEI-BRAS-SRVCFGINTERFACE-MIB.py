#
# PySNMP MIB module HUAWEI-BRAS-SRVCFGINTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BRAS-SRVCFGINTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hwBRASMib, = mibBuilder.importSymbols("HUAWEI-MIB", "hwBRASMib")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Gauge32, IpAddress, TimeTicks, ModuleIdentity, iso, NotificationType, Counter64, Unsigned32, ObjectIdentity, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Gauge32", "IpAddress", "TimeTicks", "ModuleIdentity", "iso", "NotificationType", "Counter64", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Integer32")
TruthValue, MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
hwBRASSrvcfgInterface = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1))
if mibBuilder.loadTexts: hwBRASSrvcfgInterface.setLastUpdated('200403041608Z')
if mibBuilder.loadTexts: hwBRASSrvcfgInterface.setOrganization(' Huawei Technologies Co., Ltd. ')
if mibBuilder.loadTexts: hwBRASSrvcfgInterface.setContactInfo(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwBRASSrvcfgInterface.setDescription('The MIB contains objects of module SRVCFG INTERFACE.')
hwSrvcfgInterfaceMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1))
hwBRASIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1), )
if mibBuilder.loadTexts: hwBRASIfCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgTable.setDescription(' BRASӿñ ')
hwBRASIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgIfIndex"))
if mibBuilder.loadTexts: hwBRASIfCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgEntry.setDescription(' Description. ')
hwBRASIfCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgIfIndex.setDescription(' BRASӿindex ')
hwBRASIfCfgAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6))).clone(namedValues=NamedValues(("interface", 0), ("l2subscriber", 1), ("l2leasedline", 2), ("l3leasedline", 3), ("l3subscriber", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAccessType.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAccessType.setDescription(' BRASӿڽû ')
hwBRASIfCfgBRASIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgBRASIfName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgBRASIfName.setDescription(' BRASӿname ')
hwBRASIfCfgPreAuthDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgPreAuthDomain.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgPreAuthDomain.setDescription(' ֤ǰĬ,--ʾָΪĬֵ ')
hwBRASIfCfgAuthDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAuthDomain.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAuthDomain.setDescription(' ֤ʱĬ,--ʾָΪĬֵ ')
hwBRASIfCfgForceAuthDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("force", 1), ("replace", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgForceAuthDomain.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgForceAuthDomain.setDescription(' 滻֤ʽ ')
hwBRASIfCfgAcctCpyRdSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAcctCpyRdSvr.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAcctCpyRdSvr.setDescription(' RADIUSƷѳͷ ')
hwBRASIfCfgAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAuthMethod.setDescription(' ֤ʽppp(1)dot1x(2)web(4)fast(8)bind(16) ')
hwBRASIfCfgNasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgNasPortType.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgNasPortType.setDescription(' ˿,μRFC2865NAS-PORT-TYPEԣ20ʾָΪdefault value ')
hwBRASIfCfgLeaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgLeaseName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgLeaseName.setDescription(' VLANרû ')
hwBRASIfCfgLeasePwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgLeasePwd.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgLeasePwd.setDescription(' VLANר ')
hwBRASIfCfgArpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 121)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgArpInterval.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgArpInterval.setDescription(' ARP̽,121ʾָΪȱʡֵ ')
hwBRASIfCfgArpFailTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 11)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgArpFailTimes.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgArpFailTimes.setDescription(' ARP̽ʧTimes,11ʾָΪȱʡֵ ')
hwBRASIfCfgArpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgArpProxy.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgArpProxy.setDescription(' ǷARP ')
hwBRASIfCfgRoamIsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgRoamIsp.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgRoamIsp.setDescription(' Ƿ ')
hwBRASIfCfgDhcpBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgDhcpBroadCast.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgDhcpBroadCast.setDescription(' DHCPǷù㲥ʽ ')
hwBRASIfCfgHostCar = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgHostCar.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgHostCar.setDescription(' CAR,16ʾָΪȱʡֵ ')
hwBRASIfCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgRowStatus.setDescription(' ')
hwBRASIfCfgEapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgEapTrigger.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgEapTrigger.setDescription(' ǷEAP֤ ')
hwBRASIfCfgWlanSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgWlanSwitch.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgWlanSwitch.setDescription(' WLAN ')
hwBRASIfCfgWlanAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgWlanAuthorization.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgWlanAuthorization.setDescription(' WLANӿûǷASȨ ')
hwBRASIfCfgDhcpShortLease = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 240)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgDhcpShortLease.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgDhcpShortLease.setDescription(' DHCP ')
hwBRASIfCfgRoamDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgRoamDomain.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgRoamDomain.setDescription(' ֤ʱ ')
hwBRASIfVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVsiName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVsiName.setDescription(' VSI Name ')
hwBRASIfCfgOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgOption82.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgOption82.setDescription(' option82 switch ')
hwBRASIfVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVpnInstance.setDescription(' vpn-instance name ')
hwBRASIfCopyMulticasePerUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCopyMulticasePerUser.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCopyMulticasePerUser.setDescription(' Ƿû鲥 ')
hwBRASIfCfgNDProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgNDProxy.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgNDProxy.setDescription(' ǷND ')
hwBRASIfCfgVBasMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgVBasMAC.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgVBasMAC.setDescription(' vbasMACַ ')
hwBRASIfCfgVBasAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ignore", 0), ("reject", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgVBasAuthMode.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgVBasAuthMode.setDescription(' vbas֤ģʽ ')
hwBRASIfCfgPermitDomain1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain1.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain1.setDescription(' ӿ1 ')
hwBRASIfCfgPermitDomain2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain2.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain2.setDescription(' ӿ2 ')
hwBRASIfCfgPermitDomain3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain3.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain3.setDescription(' ӿ3 ')
hwBRASIfCfgPermitDomain4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain4.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgPermitDomain4.setDescription(' ӿ4 ')
hwBRASIfCfgAccessDelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("termless", 1), ("according-ani", 2), ("according-mac", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAccessDelayType.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAccessDelayType.setDescription(' Ӧʱ ')
hwBRASIfCfgTermlessDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgTermlessDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgTermlessDelayTime.setDescription(' Ӧʱʱ ')
hwBRASIfCfgOddMacDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgOddMacDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgOddMacDelayTime.setDescription(' odd macӦʱʱ ')
hwBRASIfCfgEvenMacDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgEvenMacDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgEvenMacDelayTime.setDescription(' even macӦʱʱ ')
hwBRASIfCfgAccessNodeIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAccessNodeIdentify.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAccessNodeIdentify.setDescription(' ʶ ')
hwBRASIfCfgAniDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgAniDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgAniDelayTime.setDescription(' ݽʶӦʱʱ ')
hwBRASIfCfgRemoteBackupProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfCfgRemoteBackupProfile.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgRemoteBackupProfile.setDescription(' remote-backup-profile ')
hwBRASIfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2), )
if mibBuilder.loadTexts: hwBRASIfVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanTable.setDescription(' BRASӿVLAN ')
hwBRASIfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanIfIndex"), (0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanVlanId"), (0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfQinQVlanID"))
if mibBuilder.loadTexts: hwBRASIfVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanEntry.setDescription(' Description. ')
hwBRASIfVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanIfIndex.setDescription(' BRASӿindex ')
hwBRASIfVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanVlanId.setDescription(' VLAN,ֻӿڲָVLAN0 ')
hwBRASIfVlanVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVlanVlanNumber.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanVlanNumber.setDescription(' ʾVLAN number ')
hwBRASIfVlanAccessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49153)).clone(49152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVlanAccessLimit.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanAccessLimit.setDescription(' ,49153ʾָΪȱʡֵ ')
hwBRASIfVlanAccessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49152)).clone(49152)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfVlanAccessNumber.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanAccessNumber.setDescription(' ѽûnumber ')
hwBRASIfVlanBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVlanBlock.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanBlock.setDescription(' BRASӿڵVLAN ')
hwBRASIfVlanDevAccessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfVlanDevAccessNumber.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanDevAccessNumber.setDescription(' ѽ豸ûnumber ')
hwBRASIfVlanSchedulerVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVlanSchedulerVcName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanSchedulerVcName.setDescription(' scheduler vc name ')
hwBRASIfVlanSchedulerVcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVlanSchedulerVcGroupName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanSchedulerVcGroupName.setDescription(' scheduler vc-group name ')
hwBRASIfVlanSchedulerVpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfVlanSchedulerVpGroupName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanSchedulerVpGroupName.setDescription(' scheduler vp-group name ')
hwBRASIfQinQVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfQinQVlanID.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfQinQVlanID.setDescription(' QinQ VLAN ')
hwBRASIfPvcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3), )
if mibBuilder.loadTexts: hwBRASIfPvcTable.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcTable.setDescription(' BASӿPVC ')
hwBRASIfPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcIfIndex"), (0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcVpi"), (0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcVci"))
if mibBuilder.loadTexts: hwBRASIfPvcEntry.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcEntry.setDescription(' Description. ')
hwBRASIfPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfPvcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcIfIndex.setDescription(' BASӿindex ')
hwBRASIfPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfPvcVpi.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcVpi.setDescription(' PVCVPI,VPI/VCIͬʱΪ0 ')
hwBRASIfPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfPvcVci.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcVci.setDescription(' PVCVCI,VPI/VCIͬʱΪ0 ')
hwBRASIfPvcPvcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfPvcPvcNumber.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcPvcNumber.setDescription(' ʾPVC number ')
hwBRASIfPvcAccessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49153)).clone(49152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfPvcAccessLimit.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcAccessLimit.setDescription(' ,49153ʾָΪȱʡֵ ')
hwBRASIfPvcAccessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49152)).clone(49152)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfPvcAccessNumber.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcAccessNumber.setDescription(' ѽûnumber ')
hwBRASIfPvcBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfPvcBlock.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcBlock.setDescription(' BASӿڵPVC ')
hwBRASIfPvcDevAccessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfPvcDevAccessNumber.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcDevAccessNumber.setDescription(' ѽ豸ûnumber ')
hwBRASIfPvcSchedulerVcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfPvcSchedulerVcGroupName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcSchedulerVcGroupName.setDescription(' scheduler vc-group name ')
hwBRASIfPvcSchedulerVpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBRASIfPvcSchedulerVpGroupName.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcSchedulerVpGroupName.setDescription(' scheduler vp-group name ')
hwSTPRelayTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4), )
if mibBuilder.loadTexts: hwSTPRelayTable.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayTable.setDescription(' STP\u0378רû ')
hwSTPRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayIndex"))
if mibBuilder.loadTexts: hwSTPRelayEntry.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayEntry.setDescription(' Description. ')
hwSTPRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSTPRelayIndex.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayIndex.setDescription(' STP\u0378רindex ')
hwSTPRelayInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayInIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayInIfIndex.setDescription(' ӿindex ')
hwSTPRelayOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayOutIfIndex.setDescription(' ӿindex ')
hwSTPRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayRowStatus.setDescription(' ״̬ ')
hwSTPRelayInIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayInIfName.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayInIfName.setDescription(' ӿname ')
hwSTPRelayOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayOutIfName.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayOutIfName.setDescription(' ӿname ')
hwSTPRelayInMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayInMac.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayInMac.setDescription(' stp-relay-line mac-address of in side ')
hwSTPRelayOutMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 4, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSTPRelayOutMac.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayOutMac.setDescription(' stp-relay-line mac-address of in side ')
hwPortAccessLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 5), )
if mibBuilder.loadTexts: hwPortAccessLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitTable.setDescription(' ˿ڽƱ ')
hwPortAccessLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwPortAccessLimitIfIndex"))
if mibBuilder.loadTexts: hwPortAccessLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitEntry.setDescription(' Description. ')
hwPortAccessLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortAccessLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitIfIndex.setDescription(' ˿index ')
hwPortAccessLimitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49153))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortAccessLimitLimit.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitLimit.setDescription(' ˿ڽû,49153ʾָΪȱʡֵ ')
hwPortAccessLimitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49152))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortAccessLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitNumber.setDescription(' ˿ѽûnumber ')
hwPortAccessLimitDevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortAccessLimitDevNumber.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitDevNumber.setDescription(' ˿ѽ豸ûnumber ')
hwL3SubscriberIspTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6), )
if mibBuilder.loadTexts: hwL3SubscriberIspTable.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspTable.setDescription(' Layer 3 ֤ûñ ')
hwL3SubscriberIspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwL3SubscriberIspStartIp"), (0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwL3SubscriberIspVpnId"))
if mibBuilder.loadTexts: hwL3SubscriberIspEntry.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspEntry.setDescription(' Description. ')
hwL3SubscriberIspStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3SubscriberIspStartIp.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspStartIp.setDescription(' Layer 3 ֤ûʼIPַ ')
hwL3SubscriberIspVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3SubscriberIspVpnId.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspVpnId.setDescription(' Layer 3 ֤ûVPN instance name ')
hwL3SubscriberIspEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL3SubscriberIspEndIp.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspEndIp.setDescription(' Layer 3 ֤ûνIPַ ')
hwL3SubscriberIspDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL3SubscriberIspDomainName.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspDomainName.setDescription(' Layer 3 ֤ûεԤ֤ ')
hwL3SubscriberIspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL3SubscriberIspRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspRowStatus.setDescription(' ״̬ ')
srvcfgScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 8))
hwDhcpOption60DomainInclude = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpOption60DomainInclude.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOption60DomainInclude.setDescription(' ')
hwDhcpOption60PartialMatch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpOption60PartialMatch.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOption60PartialMatch.setDescription(' ')
hwConnTimeOutTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 9))
hwConnTimeOutTcp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnTimeOutTcp.setStatus('current')
if mibBuilder.loadTexts: hwConnTimeOutTcp.setDescription(' TCPϻʱ ')
hwConnTimeOutUdp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnTimeOutUdp.setStatus('current')
if mibBuilder.loadTexts: hwConnTimeOutUdp.setDescription(' UDPϻʱ ')
hwBRASIfVlanNumTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 10), )
if mibBuilder.loadTexts: hwBRASIfVlanNumTable.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanNumTable.setDescription(' VLANͳƱ ')
hwBRASIfVlanNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 10, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfSlot"))
if mibBuilder.loadTexts: hwBRASIfVlanNumEntry.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanNumEntry.setDescription(' Description. ')
hwBRASIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASIfSlot.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfSlot.setDescription(' λţ0Ϊtrunkλ ')
hwBRASSlotVlanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASSlotVlanNum.setStatus('current')
if mibBuilder.loadTexts: hwBRASSlotVlanNum.setDescription(' VLANͳ ')
hwBRASSLotStaticVlanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBRASSLotStaticVlanNum.setStatus('current')
if mibBuilder.loadTexts: hwBRASSLotStaticVlanNum.setDescription(' þ̬VLANͳ ')
hwServiceIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11), )
if mibBuilder.loadTexts: hwServiceIfCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgTable.setDescription(' ServiceӿµĸService ')
hwServiceIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgIfIndex"))
if mibBuilder.loadTexts: hwServiceIfCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgEntry.setDescription(' An entry of hwServiceIfCfgTable. ')
hwServiceIfCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwServiceIfCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgIfIndex.setDescription(' BRASӿindex ')
hwServiceIfCfgIdentificationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("location", 2), ("ceVlan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgIdentificationMode.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgIdentificationMode.setDescription(' ûıʶģʽ ӸýӿûõʶģʽQoSԴķͼƷ host(1)ipmacʶһû location(2)option82Ϣʶһû ce-vlan(3)ce-vlanϢʶһûQINQڲQʶûͬڲQһûӶaccessӿڽ룩 ȱʡֵhost(1) ýڵ㲻\u07b8 ')
hwServiceIfCfgDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgDomain.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgDomain.setDescription(' ȱʡֵ-- ȡֱ·-- û£ȡýڵá ')
hwServiceIfCfgUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgUserName.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgUserName.setDescription(' רû ȱʡֵ-- ֻеhwServiceIfCfgIdentificationModeѡl2-lease-line(4)l3-lease-line(5)ʱ ·ýڵұ· ·ýڵʱhwServiceIfCfgPasswordڵ· ͬʱ֮ ')
hwServiceIfCfgPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgPassword.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgPassword.setDescription(' ר ȱʡֵ-- Ľڵ ')
hwServiceIfCfgDetectNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgDetectNum.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgDetectNum.setDescription(' ̽number ȱʡֵ5 ֻеhwServiceIfCfgIdentificationModeΪl3-lease-line(5)ʱ ſ·ýڵ㣬Ϊѡڵ㣻 ')
hwServiceIfCfgDetectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgDetectInterval.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgDetectInterval.setDescription(' ֮̽ļ ȱʡֵ30 λS ֻеhwServiceIfCfgIdentificationModeΪl3-lease-line(5)ʱſ·ýڵ㣬Ϊѡڵ㣻 ')
hwServiceIfCfgOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgOption82.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgOption82.setDescription(' Ƿ֧Option82 True(1): False(2): ȱʡֵFalse(2): 豸οͻϱDHCP Option82Ϣ ֻеhwServiceIfCfgIdentificationModeΪl3-lease-line(5)ʱſ·ýڵ㣬Ϊѡڵ㣻 ')
hwServiceIfCfgAccessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgAccessLimit.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgAccessLimit.setDescription(' û ȱʡֵ16384 ӿûõƣʧܡ ')
hwServiceIfCfgOption60 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgOption60.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgOption60.setDescription(' Ƿ֧Option60 True(1): False(2): ȱʡֵFalse(2): 豸οͻϱDHCP Option60Ϣ ֻеhwServiceIfCfgIdentificationModeΪl3-lease-line(5)ʱſ·ýڵ㣬Ϊѡڵ㣻 ')
hwServiceIfCfgIpTriggerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 11), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgIpTriggerEnable.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgIpTriggerEnable.setDescription(' ʹIPĴû߹ ȱʡֵdisableȥʹ hwServiceIfCfgIdentificationModeΪl3-lease-line(5)£øýڵ ')
hwServiceIfCfgArpTriggerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 12), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgArpTriggerEnable.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgArpTriggerEnable.setDescription(' ʹarpĴû߹ ȱʡֵdisableȥʹ hwServiceIfCfgIdentificationModeΪl3-lease-line(5)£øýڵ ')
hwServiceIfCfgIfBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgIfBlock.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgIfBlock.setDescription(' Ƿ True(1): False(2): ȱʡֵFalse(2): ֻеhwServiceIfCfgIdentificationModeΪl3-lease-line(5)ʱſ·ýڵ㣬Ϊѡڵ㣻 ')
hwServiceIfCfgQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgQosProfile.setDescription(' QoSģ ȱʡֵ-- ѾQoSģ塣ӿѾ hwServiceIfCfgCarProfileҽӿû£ýڵ㲻ã ڽӿû\u07b8ĸýڵ㣬ֻӰߵûӰѾߵû ')
hwServiceIfCfgBindingUserPasswordMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("cipher", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgBindingUserPasswordMode.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgBindingUserPasswordMode.setDescription(' ðû뷽ʽĺ, 1 2 ')
hwServiceIfCfgBindingUserNameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgBindingUserNameFormat.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgBindingUserNameFormat.setDescription(' ɰûʽİ汾 mac(1)ʹûmacַû option82(2)ʹûoption82Ϣû sys-name(3): ʹ·û mac+option82 (4) mac+sys-name(5) option82+ sys-name(6) mac+option82+sys-name(7) ȱʡ£hostûʹmacַûcvlanûʹmacַûlocationʽûʹoption82macַû ')
hwServiceIfCfgBindingUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgBindingUserPassword.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgBindingUserPassword.setDescription(' ðû룬ĺ, :ִСдոʺŵרַ ģִСдոʺŵרַǳΪ116ַʱΪ롣ҲǳΪ24λַʱλܺ롣ʾʱ ȱʡ£ûΪvlan ')
hwServiceIfCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 1, 11, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceIfCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgRowStatus.setDescription(' ״̬ ')
hwSrvcfgInterfaceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2))
hwSrvcfgInterfaceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 1))
hwSrvcfgInterfaceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 1, 1)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayServerGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwPortAccessLimitGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwL3SubscriberIspGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwConnTimeOutGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSrvcfgScalarGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanNumGroup"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSrvcfgInterfaceCompliance = hwSrvcfgInterfaceCompliance.setStatus('current')
if mibBuilder.loadTexts: hwSrvcfgInterfaceCompliance.setDescription(' The compliance statement for systems supporting the this module. ')
hwSrvcfgInterfaceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2))
hwBRASIfCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 1)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAccessType"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgBRASIfName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgPreAuthDomain"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAuthDomain"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgForceAuthDomain"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAcctCpyRdSvr"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAuthMethod"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgNasPortType"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgLeaseName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgLeasePwd"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgArpInterval"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgArpFailTimes"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgArpProxy"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgRoamIsp"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgDhcpBroadCast"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgHostCar"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgRowStatus"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgEapTrigger"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgWlanSwitch"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgWlanAuthorization"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgDhcpShortLease"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgRoamDomain"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVsiName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgOption82"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVpnInstance"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCopyMulticasePerUser"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgNDProxy"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgVBasMAC"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgVBasAuthMode"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgPermitDomain1"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgPermitDomain2"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgPermitDomain3"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgPermitDomain4"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAccessDelayType"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgTermlessDelayTime"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgOddMacDelayTime"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgEvenMacDelayTime"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAccessNodeIdentify"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgAniDelayTime"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfCfgRemoteBackupProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBRASIfCfgGroup = hwBRASIfCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfCfgGroup.setDescription(' BRASӿñ ')
hwBRASIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 2)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanVlanNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanAccessLimit"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanAccessNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanBlock"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanDevAccessNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanSchedulerVcName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanSchedulerVcGroupName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfVlanSchedulerVpGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBRASIfVlanGroup = hwBRASIfVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanGroup.setDescription(' BRASӿVLAN ')
hwBRASIfPvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 3)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcPvcNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcAccessLimit"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcAccessNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcBlock"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcDevAccessNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcSchedulerVcGroupName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASIfPvcSchedulerVpGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBRASIfPvcGroup = hwBRASIfPvcGroup.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfPvcGroup.setDescription(' BASӿPVC ')
hwSTPRelayServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 4)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayInIfIndex"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayOutIfIndex"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayRowStatus"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayInIfName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayOutIfName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayInMac"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwSTPRelayOutMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSTPRelayServerGroup = hwSTPRelayServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwSTPRelayServerGroup.setDescription(' STP\u0378רû ')
hwPortAccessLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 5)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwPortAccessLimitLimit"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwPortAccessLimitNumber"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwPortAccessLimitDevNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortAccessLimitGroup = hwPortAccessLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortAccessLimitGroup.setDescription(' ˿ڽ ')
hwL3SubscriberIspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 6)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwL3SubscriberIspEndIp"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwL3SubscriberIspDomainName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwL3SubscriberIspRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3SubscriberIspGroup = hwL3SubscriberIspGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3SubscriberIspGroup.setDescription(' Layer 3 ֤û ')
hwConnTimeOutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 7)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwConnTimeOutTcp"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwConnTimeOutUdp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnTimeOutGroup = hwConnTimeOutGroup.setStatus('current')
if mibBuilder.loadTexts: hwConnTimeOutGroup.setDescription(' ')
hwSrvcfgScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 8)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwDhcpOption60DomainInclude"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwDhcpOption60PartialMatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSrvcfgScalarGroup = hwSrvcfgScalarGroup.setStatus('current')
if mibBuilder.loadTexts: hwSrvcfgScalarGroup.setDescription(' ')
hwBRASIfVlanNumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 9)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASSlotVlanNum"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwBRASSLotStaticVlanNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBRASIfVlanNumGroup = hwBRASIfVlanNumGroup.setStatus('current')
if mibBuilder.loadTexts: hwBRASIfVlanNumGroup.setDescription(' VLANͳ ')
hwServiceIfCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 1, 2, 2, 10)).setObjects(("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgIdentificationMode"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgDomain"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgUserName"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgPassword"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgDetectNum"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgDetectInterval"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgOption82"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgAccessLimit"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgOption60"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgIpTriggerEnable"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgArpTriggerEnable"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgIfBlock"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgQosProfile"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgBindingUserPasswordMode"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgBindingUserNameFormat"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgBindingUserPassword"), ("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", "hwServiceIfCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwServiceIfCfgGroup = hwServiceIfCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwServiceIfCfgGroup.setDescription(' ServiceӿµĸService ')
mibBuilder.exportSymbols("HUAWEI-BRAS-SRVCFGINTERFACE-MIB", hwBRASIfPvcAccessLimit=hwBRASIfPvcAccessLimit, hwBRASIfCfgEntry=hwBRASIfCfgEntry, hwSTPRelayOutIfName=hwSTPRelayOutIfName, hwBRASIfVlanGroup=hwBRASIfVlanGroup, hwServiceIfCfgEntry=hwServiceIfCfgEntry, hwBRASIfCfgPreAuthDomain=hwBRASIfCfgPreAuthDomain, hwBRASIfVlanSchedulerVcGroupName=hwBRASIfVlanSchedulerVcGroupName, hwBRASIfCfgOption82=hwBRASIfCfgOption82, hwServiceIfCfgQosProfile=hwServiceIfCfgQosProfile, hwSTPRelayOutMac=hwSTPRelayOutMac, hwBRASIfCfgWlanSwitch=hwBRASIfCfgWlanSwitch, hwBRASIfPvcSchedulerVcGroupName=hwBRASIfPvcSchedulerVcGroupName, hwServiceIfCfgArpTriggerEnable=hwServiceIfCfgArpTriggerEnable, hwDhcpOption60DomainInclude=hwDhcpOption60DomainInclude, hwBRASIfCfgIfIndex=hwBRASIfCfgIfIndex, hwServiceIfCfgIfBlock=hwServiceIfCfgIfBlock, hwBRASIfPvcAccessNumber=hwBRASIfPvcAccessNumber, hwBRASIfCfgArpInterval=hwBRASIfCfgArpInterval, hwBRASIfCfgRowStatus=hwBRASIfCfgRowStatus, srvcfgScalar=srvcfgScalar, hwServiceIfCfgBindingUserPasswordMode=hwServiceIfCfgBindingUserPasswordMode, hwBRASIfPvcEntry=hwBRASIfPvcEntry, hwServiceIfCfgIdentificationMode=hwServiceIfCfgIdentificationMode, hwBRASIfVlanAccessNumber=hwBRASIfVlanAccessNumber, hwBRASIfVlanSchedulerVpGroupName=hwBRASIfVlanSchedulerVpGroupName, hwBRASIfCfgAccessType=hwBRASIfCfgAccessType, hwBRASSrvcfgInterface=hwBRASSrvcfgInterface, hwBRASIfCfgHostCar=hwBRASIfCfgHostCar, hwBRASIfCfgVBasAuthMode=hwBRASIfCfgVBasAuthMode, hwBRASIfVlanIfIndex=hwBRASIfVlanIfIndex, hwBRASIfPvcDevAccessNumber=hwBRASIfPvcDevAccessNumber, hwServiceIfCfgDetectNum=hwServiceIfCfgDetectNum, hwServiceIfCfgBindingUserNameFormat=hwServiceIfCfgBindingUserNameFormat, hwBRASIfCfgRoamIsp=hwBRASIfCfgRoamIsp, hwBRASIfVlanSchedulerVcName=hwBRASIfVlanSchedulerVcName, hwBRASIfPvcBlock=hwBRASIfPvcBlock, hwBRASIfPvcPvcNumber=hwBRASIfPvcPvcNumber, hwBRASIfVlanNumEntry=hwBRASIfVlanNumEntry, hwServiceIfCfgGroup=hwServiceIfCfgGroup, hwBRASSlotVlanNum=hwBRASSlotVlanNum, hwBRASIfVlanDevAccessNumber=hwBRASIfVlanDevAccessNumber, hwBRASIfCfgRoamDomain=hwBRASIfCfgRoamDomain, hwConnTimeOutTcp=hwConnTimeOutTcp, PYSNMP_MODULE_ID=hwBRASSrvcfgInterface, hwBRASIfVlanTable=hwBRASIfVlanTable, hwSrvcfgInterfaceMibObjects=hwSrvcfgInterfaceMibObjects, hwPortAccessLimitDevNumber=hwPortAccessLimitDevNumber, hwBRASIfPvcGroup=hwBRASIfPvcGroup, hwServiceIfCfgUserName=hwServiceIfCfgUserName, hwBRASIfCfgAniDelayTime=hwBRASIfCfgAniDelayTime, hwBRASIfVlanVlanId=hwBRASIfVlanVlanId, hwPortAccessLimitIfIndex=hwPortAccessLimitIfIndex, hwBRASIfCfgPermitDomain3=hwBRASIfCfgPermitDomain3, hwBRASIfCfgEvenMacDelayTime=hwBRASIfCfgEvenMacDelayTime, hwL3SubscriberIspRowStatus=hwL3SubscriberIspRowStatus, hwDhcpOption60PartialMatch=hwDhcpOption60PartialMatch, hwL3SubscriberIspStartIp=hwL3SubscriberIspStartIp, hwConnTimeOutTable=hwConnTimeOutTable, hwBRASIfVlanNumGroup=hwBRASIfVlanNumGroup, hwBRASIfCfgAccessDelayType=hwBRASIfCfgAccessDelayType, hwBRASIfCfgEapTrigger=hwBRASIfCfgEapTrigger, hwBRASIfCfgDhcpBroadCast=hwBRASIfCfgDhcpBroadCast, hwL3SubscriberIspTable=hwL3SubscriberIspTable, hwBRASIfCfgBRASIfName=hwBRASIfCfgBRASIfName, hwBRASIfVpnInstance=hwBRASIfVpnInstance, hwBRASIfVlanBlock=hwBRASIfVlanBlock, hwBRASIfCfgArpProxy=hwBRASIfCfgArpProxy, hwServiceIfCfgDomain=hwServiceIfCfgDomain, hwServiceIfCfgDetectInterval=hwServiceIfCfgDetectInterval, hwSTPRelayServerGroup=hwSTPRelayServerGroup, hwBRASIfCfgArpFailTimes=hwBRASIfCfgArpFailTimes, hwSTPRelayInIfIndex=hwSTPRelayInIfIndex, hwL3SubscriberIspDomainName=hwL3SubscriberIspDomainName, hwSrvcfgInterfaceCompliances=hwSrvcfgInterfaceCompliances, hwBRASIfCfgPermitDomain1=hwBRASIfCfgPermitDomain1, hwBRASIfPvcVpi=hwBRASIfPvcVpi, hwBRASIfCfgWlanAuthorization=hwBRASIfCfgWlanAuthorization, hwServiceIfCfgOption82=hwServiceIfCfgOption82, hwBRASIfCfgLeaseName=hwBRASIfCfgLeaseName, hwBRASIfCfgAuthMethod=hwBRASIfCfgAuthMethod, hwPortAccessLimitLimit=hwPortAccessLimitLimit, hwServiceIfCfgOption60=hwServiceIfCfgOption60, hwSrvcfgScalarGroup=hwSrvcfgScalarGroup, hwBRASIfPvcSchedulerVpGroupName=hwBRASIfPvcSchedulerVpGroupName, hwBRASIfQinQVlanID=hwBRASIfQinQVlanID, hwPortAccessLimitTable=hwPortAccessLimitTable, hwSTPRelayInMac=hwSTPRelayInMac, hwSrvcfgInterfaceCompliance=hwSrvcfgInterfaceCompliance, hwL3SubscriberIspGroup=hwL3SubscriberIspGroup, hwSrvcfgInterfaceConformance=hwSrvcfgInterfaceConformance, hwBRASIfCfgAcctCpyRdSvr=hwBRASIfCfgAcctCpyRdSvr, hwBRASIfVlanEntry=hwBRASIfVlanEntry, hwBRASIfCfgDhcpShortLease=hwBRASIfCfgDhcpShortLease, hwServiceIfCfgIfIndex=hwServiceIfCfgIfIndex, hwPortAccessLimitNumber=hwPortAccessLimitNumber, hwBRASIfCfgForceAuthDomain=hwBRASIfCfgForceAuthDomain, hwBRASIfCfgOddMacDelayTime=hwBRASIfCfgOddMacDelayTime, hwServiceIfCfgIpTriggerEnable=hwServiceIfCfgIpTriggerEnable, hwServiceIfCfgBindingUserPassword=hwServiceIfCfgBindingUserPassword, hwBRASIfCfgTermlessDelayTime=hwBRASIfCfgTermlessDelayTime, hwPortAccessLimitEntry=hwPortAccessLimitEntry, hwBRASIfCfgLeasePwd=hwBRASIfCfgLeasePwd, hwBRASIfCfgNDProxy=hwBRASIfCfgNDProxy, hwBRASIfCfgRemoteBackupProfile=hwBRASIfCfgRemoteBackupProfile, hwBRASIfCfgVBasMAC=hwBRASIfCfgVBasMAC, hwL3SubscriberIspEntry=hwL3SubscriberIspEntry, hwSTPRelayInIfName=hwSTPRelayInIfName, hwSrvcfgInterfaceGroups=hwSrvcfgInterfaceGroups, hwServiceIfCfgPassword=hwServiceIfCfgPassword, hwBRASIfCfgAccessNodeIdentify=hwBRASIfCfgAccessNodeIdentify, hwBRASIfCfgGroup=hwBRASIfCfgGroup, hwBRASIfCfgPermitDomain2=hwBRASIfCfgPermitDomain2, hwConnTimeOutUdp=hwConnTimeOutUdp, hwSTPRelayTable=hwSTPRelayTable, hwBRASIfCfgNasPortType=hwBRASIfCfgNasPortType, hwBRASIfCfgTable=hwBRASIfCfgTable, hwBRASIfVlanNumTable=hwBRASIfVlanNumTable, hwBRASIfPvcVci=hwBRASIfPvcVci, hwPortAccessLimitGroup=hwPortAccessLimitGroup, hwBRASIfPvcTable=hwBRASIfPvcTable, hwL3SubscriberIspVpnId=hwL3SubscriberIspVpnId, hwServiceIfCfgAccessLimit=hwServiceIfCfgAccessLimit, hwConnTimeOutGroup=hwConnTimeOutGroup, hwSTPRelayEntry=hwSTPRelayEntry, hwSTPRelayOutIfIndex=hwSTPRelayOutIfIndex, hwBRASIfSlot=hwBRASIfSlot, hwSTPRelayRowStatus=hwSTPRelayRowStatus, hwSTPRelayIndex=hwSTPRelayIndex, hwBRASIfPvcIfIndex=hwBRASIfPvcIfIndex, hwBRASIfVlanVlanNumber=hwBRASIfVlanVlanNumber, hwBRASIfVsiName=hwBRASIfVsiName, hwBRASSLotStaticVlanNum=hwBRASSLotStaticVlanNum, hwServiceIfCfgRowStatus=hwServiceIfCfgRowStatus, hwL3SubscriberIspEndIp=hwL3SubscriberIspEndIp, hwServiceIfCfgTable=hwServiceIfCfgTable, hwBRASIfCfgAuthDomain=hwBRASIfCfgAuthDomain, hwBRASIfVlanAccessLimit=hwBRASIfVlanAccessLimit, hwBRASIfCopyMulticasePerUser=hwBRASIfCopyMulticasePerUser, hwBRASIfCfgPermitDomain4=hwBRASIfCfgPermitDomain4)
