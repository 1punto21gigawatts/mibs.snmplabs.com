#
# PySNMP MIB module StorageManagement-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/StorageManagement-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, ObjectIdentity, IpAddress, MibIdentifier, NotificationType, NotificationType, enterprises, Gauge32, Counter32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "MibIdentifier", "NotificationType", "NotificationType", "enterprises", "Gauge32", "Counter32", "Bits", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DellStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6))

dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1))
storageManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20))
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: softwareVersion.setDescription('Version number of the storage management component of the systems management software.')
globalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("normal", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: globalStatus.setDescription('Global health information for the subsystem managed by the Storage Management software. This global status is customized for HP OpenView. Other applications should refer to the agentSystemGlobalStatus entry in the globalData object group. Possible values: 1: Critical 2: Warning 3: Normal 4: Unknown')
softwareManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: softwareManufacturer.setDescription('Manufacturer information for the Storage Management software.')
softwareProduct = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareProduct.setStatus('mandatory')
if mibBuilder.loadTexts: softwareProduct.setDescription('Product information for the Storage Management software.')
softwareDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareDescription.setStatus('mandatory')
if mibBuilder.loadTexts: softwareDescription.setDescription('Product Description for the Storage Management software.')
storageManagementInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 100))
displayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: displayName.setStatus('mandatory')
if mibBuilder.loadTexts: displayName.setDescription('Name of this management software for display purposes.')
description = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 100, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: description.setStatus('mandatory')
if mibBuilder.loadTexts: description.setDescription('A short description of this management software.')
agentVendor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 100, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVendor.setStatus('mandatory')
if mibBuilder.loadTexts: agentVendor.setDescription('The name of the management software manufacturer.')
agentVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVersion.setStatus('obsolete')
if mibBuilder.loadTexts: agentVersion.setDescription('This entry is obsolete. Refer to softwareVersion.')
globalData = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110))
agentSystemGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("nonCriticalError", 3), ("failure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSystemGlobalStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentSystemGlobalStatus.setDescription('This entry is obsolete. Please use the value: agentGlobalSystemStatus. Note: Enumerated values have changed.')
agentLastGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("nonCriticalError", 3), ("failure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLastGlobalStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentLastGlobalStatus.setDescription('This entry is obsolete. Please use the value: agentLastGlobalSystemStatus. Note: Enumerated values have changed.')
agentTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: agentTimeStamp.setDescription('The last time that the agent values have been updated. Universal time in sec since UTC 1/1/70.')
agentGetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGetTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: agentGetTimeout.setDescription('Suggested timeout value in milliseconds for how long the SNMP getter should wait while attempting to poll the SNMP agent.')
agentModifiers = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentModifiers.setStatus('mandatory')
if mibBuilder.loadTexts: agentModifiers.setDescription('Agent functional modifiers, when set the modifier is active. Bit definitions: Bit 3: agent in debug mode. All other bits are product specific ')
agentRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentRefreshRate.setDescription('The rate, given in seconds, at which the cached data for SNMP is refreshed. The default value is 300 seconds, or 5 minutes.')
agentHostname = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHostname.setStatus('obsolete')
if mibBuilder.loadTexts: agentHostname.setDescription('This entry is obsolete for Storage Management.')
agentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentIPAddress.setDescription('This entry is obsolete for Storage Management.')
agentSoftwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databaseUp", 1), ("databaseDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSoftwareStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentSoftwareStatus.setDescription('This entry is obsolete for Storage Management.')
agentSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpVersion.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpVersion.setDescription('This entry is obsolete. Refer to softwareVersion.')
agentMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibVersion.setDescription('Version of the Storage Management MIB.')
agentManagementSoftwareURLName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentManagementSoftwareURLName.setStatus('mandatory')
if mibBuilder.loadTexts: agentManagementSoftwareURLName.setDescription('The Universal Resource Locator (URL) of the systems management software.')
agentGlobalSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 13), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGlobalSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentGlobalSystemStatus.setDescription('Global health information for the subsystem managed by the Storage Management software. This global status should be used by applications other than HP OpenView. HP OpenView should refer to the globalStatus in the root level object group. This is a rollup for the entire agent including any monitored devices. The status is intended to give initiative to a snmp monitor to get further data when this status is abnormal. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
agentLastGlobalSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 14), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLastGlobalSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentLastGlobalSystemStatus.setDescription('The previous global status of the system managed by the Storage Management software. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
agentSmartThermalShutdown = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 110, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSmartThermalShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: agentSmartThermalShutdown.setDescription('Indicates the status of smart thermal shutdown for PV220S and PV221S enclosures. Possible values: 1: Enabled 2: Disabled')
physicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130))
channelTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2), )
if mibBuilder.loadTexts: channelTable.setStatus('mandatory')
if mibBuilder.loadTexts: channelTable.setDescription('A table of controller channels. The number of entries is related to the number of channels supported by a RAID controller. Perc2 RAID controller supports a max of 4 channels per controller. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1), ).setIndexNames((0, "StorageManagement-MIB", "channelNumber"))
if mibBuilder.loadTexts: channelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: channelEntry.setDescription('An entry in the channel table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
channelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: channelNumber.setDescription('Instance number of this channel entry.')
channelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelName.setStatus('mandatory')
if mibBuilder.loadTexts: channelName.setDescription('The name of the channel as represented in Storage Management. The name will include the word channel and the instance. For example: Channel 1')
channelState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelState.setStatus('mandatory')
if mibBuilder.loadTexts: channelState.setDescription('The current condition of the channel. Possible states: 0: Unknown 1: Ready - The I/O has resumed. 2: Failed 3: Online 4: Offline - The I/O has paused. 6: Degraded ')
channelSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: channelSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
channelTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("notTerminated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTermination.setStatus('mandatory')
if mibBuilder.loadTexts: channelTermination.setDescription('The type of SCSI termination on this channel. Termination is required for proper operation of this channel. 1: Wide Termination (16 bit) 2: Narrow Termination (8 bit) 3: Not Terminated')
channelSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSCSIID.setStatus('mandatory')
if mibBuilder.loadTexts: channelSCSIID.setDescription('The SCSI ID of the controller to which the channel belongs.')
channelRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 7), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: channelRollUpStatus.setDescription('Severity of the channel state. This is the combined status of the channel and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
channelComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: channelComponentStatus.setDescription('The status of the channel itself with out without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
channelNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: channelNexusID.setDescription('Durable unique ID for this channel.')
channelDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: channelDataRate.setDescription('The data rate (SCSI speed) of the channel. Example: Ultra 320M SCSI')
channelBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("scsi", 1), ("ide", 2), ("fibreChannel", 3), ("ssa", 4), ("usb", 6), ("sata", 7), ("sas", 8), ("pcie", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBusType.setStatus('mandatory')
if mibBuilder.loadTexts: channelBusType.setDescription('The bus type of the channel. Possible values: 1: SCSI 2: IDE 3: Fibre Channel 4: SSA 6: USB 7: SATA 8: SAS 9: PCIe')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3), )
if mibBuilder.loadTexts: enclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTable.setDescription('A table of managed Enclosures. The number of entries is related to number of enclosures discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
enclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1), ).setIndexNames((0, "StorageManagement-MIB", "enclosureNumber"))
if mibBuilder.loadTexts: enclosureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureEntry.setDescription('An entry in the Enclosure table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
enclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNumber.setDescription('Instance number of the enclosure entry.')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureName.setDescription("The enclosure's name as represented in Storage Management.")
enclosureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureVendor.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureVendor.setDescription("The enclosure's (re)seller's name.")
enclosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureState.setDescription('The current condition of the enclosure (which includes any devices connected to it.) Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 4: Offline 6: Degraded')
enclosureSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
enclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureID.setDescription('Represents unique id for an enclosure.')
enclosureProcessorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProcessorVersion.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureProcessorVersion.setDescription('This entry is obsolete for Storage Management.')
enclosureServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureServiceTag.setDescription('Enclosure identification used when consulting customer support.')
enclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAssetTag.setDescription('User definable asset tag for the enclosure.')
enclosureAssetName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAssetName.setDescription('User definable asset name of the enclosure.')
enclosureSplitBusPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSplitBusPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSplitBusPartNumber.setDescription("The enclosure's split bus part number.")
enclosureProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProductID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureProductID.setDescription("The enclosure's product identification. This also corresponds to the enclosure type. ")
enclosureKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureKernelVersion.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureKernelVersion.setDescription('This entry is obsolete for Storage Management. Refer to enclosureFirmwareVersion for the firmware version of the enclosure.')
enclosureESM1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureESM1PartNumber.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureESM1PartNumber.setDescription('This entry is obsolete for Storage Management.')
enclosureESM2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureESM2PartNumber.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureESM2PartNumber.setDescription('This entry is obsolete for Storage Management.')
enclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("internal", 1), ("dELLPV200SPV201S", 2), ("dELLPV210SPV211S", 3), ("dELLPV220SPV221S", 4), ("dELLPV660F", 5), ("dELLPV224F", 6), ("dELLPV660F224F", 7), ("md1000", 8), ("md1120", 9), ("md1200", 10), ("md1220", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureType.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureType.setDescription('The type of this enclosure. Possible values: 1: Internal 2: Dell PV200S (PV201S) 3: Dell PV210S (PV211S) 4: Dell PV220S (PV221S) 5: Dell PV660F 6: Dell PV224F 7: Dell PV660F / PV224F 8: Dell MD1000 9: Dell MD1120 10: Dell MD1200 11: Dell MD1220')
enclosureProcessor2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProcessor2Version.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureProcessor2Version.setDescription('This entry is obsolete for Storage Management.')
enclosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("joined", 1), ("splitBus", 2), ("clustered", 3), ("unified", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureConfig.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureConfig.setDescription("The current configuration of the enclosure's backplane. Possible values: 1: Joined 2: Split Bus 3: Clustered 4: Unified")
enclosureChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureChannelNumber.setDescription('The channel number, or bus, to which the enclosure is connected.')
enclosureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAlarm.setDescription("The current status of the enclosure's alarm (PV220S, and PV221S only.) Possible values: 1: Disabled 2: Enabled")
enclosureBackplanePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureBackplanePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureBackplanePartNumber.setDescription("The part number of the enclosure's backplane.")
enclosureSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSCSIID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSCSIID.setDescription('The SCSI ID of the controller to which this enclosure is attached.')
enclosureRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 23), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureRollUpStatus.setDescription('Severity of the enclosure state. This is the combined status of the enclosure and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
enclosureComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 24), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureComponentStatus.setDescription('The status of the enclosure itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
enclosureNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNexusID.setDescription('Durable unique ID for this enclosure.')
enclosureFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFirmwareVersion.setDescription('The firmware version of the enclosure.')
enclosureSCSIRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSCSIRate.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSCSIRate.setDescription('Actual SCSI rate in the enclosure. ')
enclosurePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePartNumber.setDescription('The part number of the enclosure. ')
enclosureSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSerialNumber.setDescription('Serial number of the enclosure. ')
enclosureSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSASAddress.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSASAddress.setDescription('The specified SAS address if this is a SAS enclosure. ')
enclosureOccupiedSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureOccupiedSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureOccupiedSlotCount.setDescription('Shows the number of physical disk slots occupied in a storage enclosure. Note: A value of 9999 indicates feature not available.')
enclosureTotalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTotalSlots.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTotalSlots.setDescription('Shows the total number of physical slots in a storage enclosure; it includes total count of occupied and empty slots. Note: A value of 9999 indicates feature not available. ')
enclosureEmptySlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureEmptySlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureEmptySlotCount.setDescription('Shows the number of empty physical disk slots in a storage enclosure. Note: A value of 9999 indicates feature not available. ')
enclosureExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 3, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureExpressServiceCode.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureExpressServiceCode.setDescription('Express Service Code (ESC) is base10 converted numerical value of service tag.')
arrayDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4), )
if mibBuilder.loadTexts: arrayDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskTable.setDescription('A table of managed Array Disks. The number of entries is related to number of Array Disks discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
arrayDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1), ).setIndexNames((0, "StorageManagement-MIB", "arrayDiskNumber"))
if mibBuilder.loadTexts: arrayDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEntry.setDescription('An entry in the Array Disk table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
arrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNumber.setDescription('Instance number of this array disk entry.')
arrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskName.setDescription('The name of the array disk as represented in Storage Management.')
arrayDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskVendor.setDescription("The array disk's manufacturer's name.")
arrayDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 11, 13, 14, 15, 22, 23, 24, 25, 26, 28, 34, 35, 39, 40, 41, 53, 56))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("recovering", 7), ("removed", 11), ("non-raid", 13), ("notReady", 14), ("resynching", 15), ("replacing", 22), ("spinningDown", 23), ("rebuild", 24), ("noMedia", 25), ("formatting", 26), ("diagnostics", 28), ("predictiveFailure", 34), ("initializing", 35), ("foreign", 39), ("clear", 40), ("unsupported", 41), ("incompatible", 53), ("readOnly", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskState.setDescription('The current condition of the array disk. Possible states: 0: Unknown 1: Ready - Available for use, but no RAID configuration has been assigned. 2: Failed - Not operational. 3: Online - Operational. RAID configuration has been assigned. 4: Offline - The drive is not available to the RAID controller. 6: Degraded - Refers to a fault-tolerant array/virtual disk that has a failed disk. 7: Recovering - Refers to state of recovering from bad blocks on disks. 11: Removed - Indicates that array disk has been removed. 13: Non-RAID - Indicates that array disk is not a RAID capable disk 14: Not Ready - Applicable for PCIeSSD devices indicating that the device is in locked state 15: Resynching - Indicates one of the following types of disk operations: Transform Type, Reconfiguration, and Check Consistency. 22: Replacing - Indicates copyback operation is in progress. 23: Spinning Down - Transit state when the physical disk is spinning down for physical disk power management. 24: Rebuild 25: No Media - CD-ROM or removable disk has no media. 26: Formatting - In the process of formatting. 28: Diagnostics - Diagnostics are running. 34: Predictive failure 35: Initializing: Applies only to virtual disks on PERC, PERC 2/SC, and PERC 2/DC controllers. 39: Foreign 40: Clear 41: Unsupported 53: Incompatible 56: Read Only - Applicable for PCIeSSD devices. Indicates that device has reached read-only state ')
arrayDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: arrayDiskSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
arrayDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskProductID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskProductID.setDescription('The model number of the array disk.')
arrayDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSerialNo.setDescription("The array disk's unique identification number from the manufacturer. ")
arrayDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskRevision.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskRevision.setDescription('The firmware version of the array disk.')
arrayDiskEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureID.setDescription('The SCSI ID of the enclosure processor to which this array disk belongs.')
arrayDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannel.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannel.setDescription('The bus to which this array disk is connected.')
arrayDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLengthInMB.setDescription('The size in megabytes of the array disk. If this size is 0, it is smaller than a megabyte.')
arrayDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLengthInBytes.setDescription('The size of the array disk in bytes that is less than a megabyte. This size plus the arrayDiskLengthInMB is the total size of the array disk.')
arrayDiskLargestContiguousFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInMB.setDescription('The size in megabytes of the largest contiguous free space on the array disk. If this size is 0, it is less than a megabyte.')
arrayDiskLargestContiguousFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInBytes.setDescription('The size of the largest contiguous free space on this array disk in bytes that is less than a megabyte. This size plus the arrayDiskLargestContiguousFreeSpaceInMB is the total size of the largest contiguous free space on the array disk.')
arrayDiskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskTargetID.setDescription('The SCSI target ID which this array disk is assigned. ')
arrayDiskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLunID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLunID.setDescription("The array disk's logical unit number. ")
arrayDiskUsedSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskUsedSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskUsedSpaceInMB.setDescription('The amount in megabytes of the used space on the array disk. If this size is 0, it is smaller than a megabyte.')
arrayDiskUsedSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskUsedSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskUsedSpaceInBytes.setDescription('The size in bytes of the used space on the array disk that is smaller than a megabyte. This size plus the arrayDiskUsedSpaceInMB is the total amount of used space on the array disk.')
arrayDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskFreeSpaceInMB.setDescription('The amount in megabytes of the free space on the array disk. If this size is 0, it is smaller than a megabyte.')
arrayDiskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskFreeSpaceInBytes.setDescription('The size in bytes of the free space on the array disk that is smaller than a megabyte. This size plus the arrayDiskFreeSpaceInMB is the total amount of free space on the array disk.')
arrayDiskBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("scsi", 1), ("ide", 2), ("fibre", 3), ("ssa", 4), ("usb", 6), ("sata", 7), ("sas", 8), ("pcie", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskBusType.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskBusType.setDescription('The bus type of the array disk. Possible values: 1: SCSI 2: IDE 3: Fibre Channel 4: SSA 6: USB 7: SATA 8: SAS 9: PCIe')
arrayDiskSpareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("memberVD", 1), ("memberDG", 2), ("globalHotSpare", 3), ("dedicatedHotSpare", 4), ("notASpare", 5), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSpareState.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSpareState.setDescription('The status of the array disk as a spare. Possible states: 1 : disk is a member of a virtual disk 2 : disk is a member of a disk group 3 : disk is a global hot spare 4 : disk is a dedicated hot spare 5 : not a spare 99: not applicable')
arrayDiskRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 23), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskRollUpStatus.setDescription('Severity of the array disk state. This is the combined status of the array disk and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
arrayDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 24), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskComponentStatus.setDescription('The status of the array disk itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
arrayDiskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskDeviceName.setDescription('The operating system device name for this disk. This property is only applicable to array disks attached to a RAID controller.')
arrayDiskNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNexusID.setDescription('Durable unique ID for this array disk.')
arrayDiskPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskPartNumber.setDescription('The part number of the disk. ')
arrayDiskSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSASAddress.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSASAddress.setDescription('The specified SAS address if this is a SAS disk. ')
arrayDiskNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNegotiatedSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNegotiatedSpeed.setDescription('The speed at which the drive is actually running in MPS (megabytes per second). ')
arrayDiskCapableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskCapableSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskCapableSpeed.setDescription('The maximum speed at which the drive is capable of negotiating in MPS (megabytes per second). ')
arrayDiskSmartAlertIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSmartAlertIndication.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSmartAlertIndication.setDescription('Indicated whether the disk has received a predictive failure. Possible values: 1: No - disk has not received a predictive failure alert 2: Yes - disk has received a predictive failure alert')
arrayDiskManufactureDay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskManufactureDay.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskManufactureDay.setDescription('The day of the week (1=Sunday thru 7=Saturday) on which this disk was manufactured.')
arrayDiskManufactureWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskManufactureWeek.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskManufactureWeek.setDescription('The week (1 thru 53) in which this disk was manufactured.')
arrayDiskManufactureYear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskManufactureYear.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskManufactureYear.setDescription('The four digit year in which this disk was manufactured.')
arrayDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hdd", 2), ("ssd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskMediaType.setDescription('The Media type of the array disk. Possible Values: 1:unknown 2:hdd 3:ssd')
arrayDiskDellCertified = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskDellCertified.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskDellCertified.setDescription('Indicates if array disk is certified by Dell. Value: 1 - Certified, 0 - Not Certified, 99 - Unknown')
arrayDiskAltaVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskAltaVendorId.setStatus('obsolete')
if mibBuilder.loadTexts: arrayDiskAltaVendorId.setDescription('Provides vendor information for Alta interposer.')
arrayDiskAltaProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskAltaProductId.setStatus('obsolete')
if mibBuilder.loadTexts: arrayDiskAltaProductId.setDescription('Provides product id for Alta interposer.')
arrayDiskAltaRevisionId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskAltaRevisionId.setStatus('obsolete')
if mibBuilder.loadTexts: arrayDiskAltaRevisionId.setDescription('Provides revision id for Alta interposer.')
arrayDiskEncryptionCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEncryptionCapable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEncryptionCapable.setDescription('Indicates if physical disk is Encryption capable. Value: 1 - Capable, 0 - Not Capable, 99 - Not Applicable')
arrayDiskEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEncrypted.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEncrypted.setDescription('Indicates if the physical disk has encryption enabled. Value: 1 - Yes, 0 - No, 99 - Not Applicable')
arrayDiskPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskPowerState.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskPowerState.setDescription('Indicates power state of a physical drive. Value: 0 - Spun up, 1- Spun down, 255 - Transition, 99 - Not Applicable')
arrayDiskDriveWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskDriveWriteCache.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskDriveWriteCache.setDescription('Indicates drive write cache capability for PCIe SSD devices. Value: 1 - Enabled, 0 - Disabled, 99 - Undetermined/Not Applicable')
arrayDiskModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskModelNumber.setDescription('Provides PCIe SSD device model number.')
arrayDiskLifeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLifeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLifeRemaining.setDescription('Provides PCIe SSD device life remaining in percentage. Value: 0..100, 999 - Undetermined/Not Applicable ')
arrayDiskDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskDriverVersion.setDescription('Provides PCIe SSD device driver version.')
arrayDiskDeviceLifeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskDeviceLifeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskDeviceLifeStatus.setDescription('Provides PCIe SSD device life status. Possible Values: -1: Not Available / Not Applicable 1: Drive Health Good 2: Approaching Warranty Coverage Expiry 3: Warranty Coverage Expired 4: Approaching Read Only 5: Read Only')
arrayDiskReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskReadOnly.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskReadOnly.setDescription("Provides PCIe SSD's Read Only attribute. Possible Values: Yes, No, Not Applicable ")
arrayDiskRemainingRatedWriteEndurance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskRemainingRatedWriteEndurance.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskRemainingRatedWriteEndurance.setDescription('Provides PCIe SSD device Remaining Rated Write Endurance Possible Values: 0-100% ,Not Available/Not Applicable ')
arrayDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSectorSize.setDescription('Provides the information regarding sector size of array disk. Possible values are: 512 or 4096.')
arrayDiskPICapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskPICapable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskPICapable.setDescription('Provides the information regarding T10 PI capability of Array disk. Possible values are: 0 (T10 PI incapable) or 1 (T10 PI capable).')
arrayDiskMaxLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskMaxLinkWidth.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskMaxLinkWidth.setDescription('Provides the information regarding Max Link Width of Array disk. Possible values are: 0 - 8.')
arrayDiskNegotiatedLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 4, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNegotiatedLinkWidth.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNegotiatedLinkWidth.setDescription('Provides the information regarding Negtioated Link Width of Array disk. Possible values are: 0 - 8.')
arrayDiskEnclosureConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5), )
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionTable.setDescription('A table of the connections between array disks, their enclosure, and their associated controller. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found. Note: Only array disks that are part of an enclosure will be listed in this table. Backplanes are considered enclosures by Storage Management.')
arrayDiskEnclosureConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1), ).setIndexNames((0, "StorageManagement-MIB", "arrayDiskEnclosureConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEntry.setDescription('An entry in the Array Disk Enclosure Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
arrayDiskEnclosureConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionNumber.setDescription('Instance number of this array disk connection entry. This table shows the array disk to enclosure relationship.')
arrayDiskEnclosureConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskName.setDescription('The name of the array disk in this connection as represented in Storage Management.')
arrayDiskEnclosureConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskNumber.setDescription('The instance number of the array disk in the arrayDiskTable in this connection.')
arrayDiskEnclosureConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureName.setDescription('The name of the enclosure as represented in Storage Management to which this array disk belongs. ')
arrayDiskEnclosureConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureNumber.setDescription('The instance number in the enclosureTable of the enclosure to which this array disk belongs.')
arrayDiskEnclosureConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerName.setDescription('The name of the controller as represented in Storage Management to which this array disk is connected.')
arrayDiskEnclosureConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerNumber.setDescription('The instance number in the controllerTable of the controller to which this array disk is connected.')
arrayDiskChannelConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6), )
if mibBuilder.loadTexts: arrayDiskChannelConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionTable.setDescription('A table of the connections between array disks, their channel, and their associated controller. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found. Note: Only array disks that are NOT part of an enclosure will be listed in this table. Backplanes are considered enclosures by Storage Management.')
arrayDiskChannelConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1), ).setIndexNames((0, "StorageManagement-MIB", "arrayDiskChannelConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskChannelConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionEntry.setDescription('An entry in the Array Disk Channel Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
arrayDiskChannelConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionNumber.setDescription('Instance number of this array disk connection entry. This table shows the array disk to SCSI channel relationship. There is no enclosure service processor associated with these array disks.')
arrayDiskChannelConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskName.setDescription('The name of the array disk in this connection as represented in Storage Management.')
arrayDiskChannelConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskNumber.setDescription('The instance number of the array disk in the arrayDiskTable in this connection.')
arrayDiskChannelConnectionChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelName.setDescription('The name of the channel as represented in Storage Management to which is array disk is connected.')
arrayDiskChannelConnectionChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelNumber.setDescription('The instance number of the channel in the channelTable to which this array disk is connected.')
arrayDiskChannelConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerName.setDescription('The name of the controller as represented in Storage Management to which this array disk is connected.')
arrayDiskChannelConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerNumber.setDescription('The instance number in the controllerTable of the controller to which this array disk is connected.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7), )
if mibBuilder.loadTexts: fanTable.setStatus('mandatory')
if mibBuilder.loadTexts: fanTable.setDescription('A table of managed Fans. The number of entries is related to number of Fans discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1), ).setIndexNames((0, "StorageManagement-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fanEntry.setDescription('An entry in the Fan table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanNumber.setDescription('Instance number of this fan entry.')
fanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanName.setStatus('mandatory')
if mibBuilder.loadTexts: fanName.setDescription("The fan's name as represented in Storage Management.")
fanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanVendor.setStatus('mandatory')
if mibBuilder.loadTexts: fanVendor.setDescription("The fan's (re)seller's name.")
fanState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 11, 21))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("degraded", 6), ("removed", 11), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanState.setStatus('mandatory')
if mibBuilder.loadTexts: fanState.setDescription('The current condition of the fan. Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 4: Offline 6: Degraded 21: Missing')
fanSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: fanSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
fanProbeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeUnit.setStatus('obsolete')
if mibBuilder.loadTexts: fanProbeUnit.setDescription('This entry is obsolete for Storage Management.')
fanProbeMinWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMinWarning.setStatus('obsolete')
if mibBuilder.loadTexts: fanProbeMinWarning.setDescription('This entry is obsolete. This setting is not supported by fans managed under Storage Management.')
fanProbeMinCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMinCritical.setStatus('obsolete')
if mibBuilder.loadTexts: fanProbeMinCritical.setDescription('This entry is obsolete. This setting is not supported by fans managed under Storage Management.')
fanProbeMaxWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMaxWarning.setStatus('obsolete')
if mibBuilder.loadTexts: fanProbeMaxWarning.setDescription('This entry is obsolete. This setting is not supported by fans managed under Storage Management.')
fanProbeMaxCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMaxCritical.setStatus('obsolete')
if mibBuilder.loadTexts: fanProbeMaxCritical.setDescription('This entry is obsolete. This setting is not supported by fans managed under Storage Management.')
fanProbeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeCurrValue.setStatus('mandatory')
if mibBuilder.loadTexts: fanProbeCurrValue.setDescription('The current speed of the fan. ')
fan1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fan1PartNumber.setDescription('The part number of the fan in the enclosure.')
fan2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2PartNumber.setStatus('obsolete')
if mibBuilder.loadTexts: fan2PartNumber.setDescription('This entry is obsolete. This setting is not supported by fans managed under Storage Management.')
fanRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 14), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanRollUpStatus.setDescription('Severity of the fan state. This is the combined status of the fan and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
fanComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 15), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanComponentStatus.setDescription('The status of the fan itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
fanNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: fanNexusID.setDescription('Durable unique ID for this fan.')
fanRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRevision.setStatus('mandatory')
if mibBuilder.loadTexts: fanRevision.setDescription('The revision number of the fan in the enclosure.')
fanConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8), )
if mibBuilder.loadTexts: fanConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionTable.setDescription('A table of the connections between each fan on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
fanConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8, 1), ).setIndexNames((0, "StorageManagement-MIB", "fanConnectionNumber"))
if mibBuilder.loadTexts: fanConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionEntry.setDescription('An entry in the Fan Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
fanConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionNumber.setDescription('Instance number of this fan connection entry.')
fanConnectionFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionFanName.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionFanName.setDescription('The name of the fan in this connection as represented in Storage Management.')
fanConnectionFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionFanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionFanNumber.setDescription('The instance number of the fan in the fanTable in this connection.')
fanConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionEnclosureName.setDescription('The name of the enclosure as represented in Storage Management to which this fan belongs.')
fanConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this fan belongs.')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('A table of managed Power Supplies. The number of entries is related to number of Power Supplies discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1), ).setIndexNames((0, "StorageManagement-MIB", "powerSupplyNumber"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('An entry in the Power Supply table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
powerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyNumber.setDescription('Instance number of this power supply entry.')
powerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyName.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyName.setDescription("The power supply's name as represented in Storage Management.")
powerSupplyVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyVendor.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyVendor.setDescription("The power supply's (re)seller's name.")
powerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 11, 21))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("notInstalled", 5), ("degraded", 6), ("removed", 11), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyState.setDescription('The current condition of the power supply. Possible states: 0 : Unknown 1 : Ready 2 : Failed 5 : Not Installed 6 : Degraded 11: Removed 21: Missing')
powerSupplySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySeverity.setStatus('obsolete')
if mibBuilder.loadTexts: powerSupplySeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
powerSupply1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply1PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupply1PartNumber.setDescription('The part number of the power supply of the enclosure.')
powerSupply2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply2PartNumber.setStatus('obsolete')
if mibBuilder.loadTexts: powerSupply2PartNumber.setDescription('This entry is obsolete. This setting is not supported by power supplies managed under Storage Management.')
powerSupplyRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyRollUpStatus.setDescription('Severity of the power supply state. This is the combined status of the power supply and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
powerSupplyComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 9), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyComponentStatus.setDescription('The status of the power supply itself without the propegation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
powerSupplyNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyNexusID.setDescription('Durable unique ID for this power supply.')
powerSupplyRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRevision.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyRevision.setDescription('The revision number of the power supply in the enclosure.')
powerSupplyConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10), )
if mibBuilder.loadTexts: powerSupplyConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionTable.setDescription('A table of the connections between each power supply on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
powerSupplyConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1), ).setIndexNames((0, "StorageManagement-MIB", "powerSupplyConnectionNumber"))
if mibBuilder.loadTexts: powerSupplyConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionEntry.setDescription('An entry in the Power Supply Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
powerSupplyConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionNumber.setDescription('Instance number of this power supply connection entry.')
powerSupplyConnectionPowersupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConnectionPowersupplyName.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionPowersupplyName.setDescription('The name of the power supply in this connection as represented in Storage Management.')
powerSupplyConnectionPowersupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConnectionPowersupplyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionPowersupplyNumber.setDescription('This instance number in the powersupplyTable of the power supply in this connection.')
powerSupplyConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionEnclosureName.setDescription('The name of the enclosure to which this power supply is connected as represented in Storage Management.')
powerSupplyConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this power supply is connected.')
powerSupplyConnectionFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConnectionFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConnectionFirmwareVersion.setDescription('Displays power supply connection firmware version. Note: Available above 1.04 firmware version')
temperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11), )
if mibBuilder.loadTexts: temperatureProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTable.setDescription('A table of managed Temperature Probes. The number of entries is related to number of Temperature Probes discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
temperatureProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1), ).setIndexNames((0, "StorageManagement-MIB", "temperatureProbeNumber"))
if mibBuilder.loadTexts: temperatureProbeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeEntry.setDescription('An entry in the Temperature Probe table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
temperatureProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeNumber.setDescription('Instance number of this temperature probe entry.')
temperatureProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeName.setDescription('Name of this temperature probe as represented in Storage Management.')
temperatureProbeVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeVendor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeVendor.setDescription("Temperature probe's (re)seller's name.")
temperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 9, 21))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("offline", 4), ("degraded", 6), ("inactive", 9), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeState.setDescription('The current condition of the temperature probe. Possible states: 0: Unknown 1: Ready 2: Failed (Minimum Failure Threshold Exceeded, Maximum Failure Threshold Exceeded) 4: Offline 6: Degraded (Minimum Warning Threshold Exceeded, Maximum Warning Threshold Exceeded) 9: Inactive 21: Missing')
temperatureProbeSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: temperatureProbeSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
temperatureProbeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUnit.setDescription('The units that will be used to display temperatures for this temperature probe.')
temperatureProbeMinWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMinWarning.setDescription('The minimum temperature that will force the probe into a warning state.')
temperatureProbeMinCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMinCritical.setDescription('The minimum temperature that will force the probe into an error state.')
temperatureProbeMaxWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaxWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMaxWarning.setDescription('The maximum temperature that will force the probe into a warning state.')
temperatureProbeMaxCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaxCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMaxCritical.setDescription('The maximum temperature that will force the probe into an error state.')
temperatureProbeCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeCurValue.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeCurValue.setDescription('The current temperature of this probe.')
temperatureProbeRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 12), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeRollUpStatus.setDescription('Severity of the temperature probe state. This is the combined status of the temperature probe and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
temperatureProbeComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 13), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeComponentStatus.setDescription('The status of the temperature probe itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
temperatureProbeNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 11, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeNexusID.setDescription('Durable unique ID for this temperature probe.')
temperatureConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12), )
if mibBuilder.loadTexts: temperatureConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionTable.setDescription('A table of the connections between each temperature probe on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
temperatureConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12, 1), ).setIndexNames((0, "StorageManagement-MIB", "temperatureConnectionNumber"))
if mibBuilder.loadTexts: temperatureConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionEntry.setDescription('An entry in the Temperature Probe Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
temperatureConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionNumber.setDescription('Instance number of this temperature probe connection entry.')
temperatureConnectionTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionTemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionTemperatureName.setDescription('The name of the temperature probe in this connection as represented in Storage Management.')
temperatureConnectionTemperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionTemperatureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionTemperatureNumber.setDescription('The instance number in the temperatureTable of the temperature probe in this connection.')
temperatureConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionEnclosureName.setDescription('The name of the enclosure as represented in Storage Management to which this temperature probe belongs.')
temperatureConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this temperature probe belongs. ')
enclosureManagementModuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13), )
if mibBuilder.loadTexts: enclosureManagementModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleTable.setDescription('A table of managed Enclosure Management Modules. The number of entries is related to number of Enclosure Management Modules discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
enclosureManagementModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1), ).setIndexNames((0, "StorageManagement-MIB", "enclosureManagementModuleNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleEntry.setDescription('An entry in the Enclosure Management Module table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
enclosureManagementModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setDescription('Instance number of this enclosure memory module entry.')
enclosureManagementModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleName.setDescription('Name of this enclosure memory module as represented in Storage Management.')
enclosureManagementModuleVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleVendor.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleVendor.setDescription("The management module's (re)seller's name.")
enclosureManagementModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 21))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("notInstalled", 5), ("degraded", 6), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleState.setDescription('The current condition of the enclosure management module. Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 4: Offline 5: Not Installed 6: Degraded 21: Missing')
enclosureManagementModuleSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureManagementModuleSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
enclosureManagementModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setDescription('The part number of the enclosure memory module.')
enclosureManagementModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eMM", 1), ("terminationCard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleType.setDescription('The type of the enclosure management module. Possible values: 0: Unknown 1: EMM 2: Termination Card')
enclosureManagementModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setDescription('Firmware version of the enclosure memory module.')
enclosureManagementModuleMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleMaxSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleMaxSpeed.setDescription('The maximum bus speed of the enclosure management module.')
enclosureManagementModuleRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 10), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleRollUpStatus.setDescription('Severity of the enclosure management module state. This is the combined status of the EMM and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
enclosureManagementModuleComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 11), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleComponentStatus.setDescription('The status of the enclosure management module itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
enclosureManagementModuleNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleNexusID.setDescription('Durable unique ID for this EMM.')
enclosureManagementModuleRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleRevision.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleRevision.setDescription('The revision number of the enclosure management module.')
enclosureManagementModuleConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14), )
if mibBuilder.loadTexts: enclosureManagementModuleConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionTable.setDescription('A table of the connections between each enclosure management module on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
enclosureManagementModuleConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14, 1), ).setIndexNames((0, "StorageManagement-MIB", "enclosureManagementModuleConnectionNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEntry.setDescription('An entry in the Enclosure Management Module Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
enclosureManagementModuleConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionNumber.setDescription('Instance number of this enclosure management module connection entry.')
enclosureManagementModuleConnectionEMMName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMName.setDescription('The name of the enclosure management module in this connection as represented in Storage Management.')
enclosureManagementModuleConnectionEMMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMNumber.setDescription('The instance number of the enclosure management module in the enclosureManagementModuleTable in this connection.')
enclosureManagementModuleConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureName.setDescription('The name of the enclosure as represented in Storage Management to which this enclosure management module belongs.')
enclosureManagementModuleConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this enclosure management module belongs.')
batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15), )
if mibBuilder.loadTexts: batteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTable.setDescription('A table of managed Batteries. The number of entries is related to number of Batteries discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
batteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1), ).setIndexNames((0, "StorageManagement-MIB", "batteryNumber"))
if mibBuilder.loadTexts: batteryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: batteryEntry.setDescription('An entry in the Battery table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
batteryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: batteryNumber.setDescription('Instance number of this battery entry.')
batteryName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryName.setStatus('mandatory')
if mibBuilder.loadTexts: batteryName.setDescription("The battery's name as represented in Storage Management.")
batteryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVendor.setStatus('mandatory')
if mibBuilder.loadTexts: batteryVendor.setDescription("The battery's (re)seller's name.")
batteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 9, 10, 12, 21, 36))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("degraded", 6), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21), ("learning", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryState.setStatus('mandatory')
if mibBuilder.loadTexts: batteryState.setDescription('Current state of battery. Possible values: 0: Unknown 1: Ready 2: Failed 6: Degraded 7: Reconditioning 9: High 10: Low Power 12: Charging 21: Missing 36: Learning ')
batteryRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryRollUpStatus.setDescription('Severity of the battery state. This is the combined status of the battery and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
batteryComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 6), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryComponentStatus.setDescription('The status of the battery itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
batteryChargeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargeCount.setStatus('mandatory')
if mibBuilder.loadTexts: batteryChargeCount.setDescription('The number of charges that have been applied to the battery.')
batteryMaxChargeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMaxChargeCount.setStatus('mandatory')
if mibBuilder.loadTexts: batteryMaxChargeCount.setDescription('The maximum number of charges that can be applied to the battery.')
batteryNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: batteryNexusID.setDescription('Durable unique ID for this battery.')
batteryPredictedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("failed", 1), ("ready", 2), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryPredictedCapacity.setStatus('obsolete')
if mibBuilder.loadTexts: batteryPredictedCapacity.setDescription("This property displays the battery's ability to be charged. Possible values: 1: Failed - The battery cannot be charged and needs to be replaced. 2: Ready - The battery can be charged to full capacity. 4: Unknown - The battery is completing a Learn cycle. The charge capacity of the battery cannot be determined until the Learn cycle is complete. ")
batteryNextLearnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNextLearnTime.setStatus('deprecated')
if mibBuilder.loadTexts: batteryNextLearnTime.setDescription('Time next learn cycle must be executed (in hours.) ')
batteryLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("failed", 1), ("active", 2), ("timedOut", 4), ("requested", 8), ("idle", 16), ("due", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLearnState.setStatus('deprecated')
if mibBuilder.loadTexts: batteryLearnState.setDescription('Specifies the learn state activity of the battery. Possible values: 1 : Failed 2 : Active 4 : Timed out 8 : Requested 16: Idle 32: Due')
batteryID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryID.setStatus('mandatory')
if mibBuilder.loadTexts: batteryID.setDescription('Represents unique id for battery.')
batteryMaxLearnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMaxLearnDelay.setStatus('deprecated')
if mibBuilder.loadTexts: batteryMaxLearnDelay.setDescription('The maximum amount of time (in hours) that the battery learn cycle can be delayed.')
batteryLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", 1), ("warn", 2), ("autowarn", 4), ("unknown", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLearnMode.setStatus('deprecated')
if mibBuilder.loadTexts: batteryLearnMode.setDescription('Indicates current learn mode of the battery. Possible values: 1: Auto 2: Warn 4: Autowarn 8: Unknown ')
batteryConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16), )
if mibBuilder.loadTexts: batteryConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionTable.setDescription('A table of the connections between each battery on the managed node and its controller. Each controller number in the table corresponds to that controller instance in the Controller Table.')
batteryConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16, 1), ).setIndexNames((0, "StorageManagement-MIB", "batteryConnectionNumber"))
if mibBuilder.loadTexts: batteryConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionEntry.setDescription('An entry in the Battery Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
batteryConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionNumber.setDescription('Instance number of this battery connection entry.')
batteryConnectionBatteryName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryConnectionBatteryName.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionBatteryName.setDescription('The name of the battery in this connection as represented in Storage Management.')
batteryConnectionBatteryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryConnectionBatteryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionBatteryNumber.setDescription('The instance number in the batteryTable of the battery in this connection.')
batteryConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryConnectionControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionControllerName.setDescription('The name of the controller as represented in Storage Management to which this battery belongs.')
batteryConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryConnectionControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: batteryConnectionControllerNumber.setDescription('The instance number of the controller in the controllerTable to which this battery belongs.')
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerTable.setDescription('A table of managed RAID controllers. The number of entries is related to number of RAID controllers discovered in the system. Note: The properties in this table may not be applicable to all entries.')
controllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1), ).setIndexNames((0, "StorageManagement-MIB", "controllerNumber"))
if mibBuilder.loadTexts: controllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEntry.setDescription('An entry in the table of RAID controllers. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
controllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNumber.setDescription('Instance number of this controller entry.')
controllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
if mibBuilder.loadTexts: controllerName.setDescription('The name of the controller in this subsystem as represented in Storage Management. Includes the controller type and instance. For example: Perc3/QC 1.')
controllerVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerVendor.setStatus('mandatory')
if mibBuilder.loadTexts: controllerVendor.setDescription("The controller's (re)seller's name.")
controllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("scsi", 1), ("pv660F", 2), ("pv662F", 3), ("ide", 4), ("sata", 5), ("sas", 6), ("pciessd", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerType.setStatus('mandatory')
if mibBuilder.loadTexts: controllerType.setDescription('The type of this controller: 1: SCSI 2: PV660F 3: PV662F 4: IDE (Integrated/Intelligent Drive Electronics) 5: SATA (Serial Advanced Technology Attachment) 6: SAS (Serial Attached SCSI) 9: PCIe SSD')
controllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerState.setDescription("The current condition of the controller's subsystem (which includes any devices connected to it.) Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 4: Offline 6: Degraded")
controllerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: controllerSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
controllerRebuildRateInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRebuildRateInPercent.setStatus('mandatory')
if mibBuilder.loadTexts: controllerRebuildRateInPercent.setDescription('The percent of the compute cycles dedicated to rebuilding failed array disks. ')
controllerFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerFWVersion.setDescription("The controller's current firmware version.")
controllerCacheSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCacheSizeInMB.setDescription("The controller's current amount of cache memory in megabytes. If this size is 0, it is less than a megabyte.")
controllerCacheSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCacheSizeInBytes.setDescription("The controller's current amount of cache memory that is less than a megabyte. This combined with the controllerCacheSizeInMB will be the total amount of memory.")
controllerPhysicalDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPhysicalDeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPhysicalDeviceCount.setDescription('Number of physical devices on the controller channel including both disks and the controller.')
controllerLogicalDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerLogicalDeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerLogicalDeviceCount.setDescription('Number of virtual disks on the controller.')
controllerPartnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPartnerStatus.setStatus('obsolete')
if mibBuilder.loadTexts: controllerPartnerStatus.setDescription('This entry is obsolete for Storage Management.')
controllerHostPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerHostPortCount.setStatus('obsolete')
if mibBuilder.loadTexts: controllerHostPortCount.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerMemorySizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMemorySizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMemorySizeInMB.setDescription('Size of memory in megabytes on the controller. If this size is 0, it is less than a megabyte. This attribute is only supported on Adaptec controllers. ')
controllerMemorySizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMemorySizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMemorySizeInBytes.setDescription('Size of memory on the controller that is less than a megabyte. This combined with the controllerMemorySizeInMB will be the total size of the memory. This attribute is only supported on Adaptec controllers.')
controllerDriveChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriveChannelCount.setStatus('obsolete')
if mibBuilder.loadTexts: controllerDriveChannelCount.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerFaultTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFaultTolerant.setStatus('mandatory')
if mibBuilder.loadTexts: controllerFaultTolerant.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0Port0WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0WWN.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0Port0WWN.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0Port0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0Name.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0Port0Name.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0Port0ID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0ID.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0Port0ID.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0Target = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Target.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0Target.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management. ')
controllerC0Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Channel.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0Channel.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0OSController = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0OSController.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0OSController.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0BatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 9, 10, 12, 21))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0BatteryState.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0BatteryState.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management. ')
controllerC1Port0WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0WWN.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1Port0WWN.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1Port0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0Name.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1Port0Name.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1Port0ID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0ID.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1Port0ID.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1Target = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Target.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1Target.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Channel.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1Channel.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1OSController = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1OSController.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1OSController.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1BatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 9, 10, 12, 21))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1BatteryState.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1BatteryState.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management. ')
controllerNodeWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNodeWWN.setStatus('obsolete')
if mibBuilder.loadTexts: controllerNodeWWN.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC0Port1WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port1WWN.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC0Port1WWN.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerC1Port1WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port1WWN.setStatus('obsolete')
if mibBuilder.loadTexts: controllerC1Port1WWN.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerBatteryChargeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBatteryChargeCount.setStatus('obsolete')
if mibBuilder.loadTexts: controllerBatteryChargeCount.setDescription('This entry is obsolete. Fibre channel is not supported in Storage Management.')
controllerRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 37), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controllerRollUpStatus.setDescription('Severity of the controller state. This is the combined status of the controller and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
controllerComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 38), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controllerComponentStatus.setDescription('The status of the controller itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
controllerNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNexusID.setDescription('Durable unique ID for this controller.')
controllerAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerAlarmState.setDescription("State, or setting for the controller's alarm. Possible values: 1: Enabled 2: Disabled 3: Not Applicable")
controllerDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerDriverVersion.setDescription('Currently installed driver version for this controller.')
controllerPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPCISlot.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPCISlot.setDescription('The PCI slot number or embedded number for controllers on the motherboard. ')
controllerClusterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("active", 3), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerClusterMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerClusterMode.setDescription('Identifies if the controller is in cluster mode. Possible values: 1 : Enabled 2 : Disabled 3 : Active (enabled and active) 99: Not Applicable ')
controllerMinFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMinFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMinFWVersion.setDescription('The minimum firmware version for Storage Management to support the controller. ')
controllerMinDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMinDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMinDriverVersion.setDescription('The minimum driver version for Storage Management to support the controller. ')
controllerSCSIInitiatorID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSCSIInitiatorID.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSCSIInitiatorID.setDescription('The SCSI ID of the initiator.')
controllerChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerChannelCount.setDescription('Number of channels on the controller.')
controllerReconstructRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerReconstructRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerReconstructRate.setDescription('The rate for reconstruct on the controller. ')
controllerPatrolReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadRate.setDescription('The rate for patrol read on the controller. ')
controllerBGIRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBGIRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerBGIRate.setDescription('The rate for background initialization on the controller. ')
controllerCheckConsistencyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCheckConsistencyRate.setDescription('The rate for check consistency on the controller. ')
controllerPatrolReadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadMode.setDescription('Identifies the patrol read mode. Possible values: 1: Automatic (enabled) 2: Manual (enabled) 3: Disabled ')
controllerPatrolReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("stopped", 1), ("ready", 2), ("active", 4), ("aborted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadState.setDescription('The state of the patrol read. 1: Stopped - not running 2: Ready - ready to start 4: Active - is running 8: Aborted - has aborted ')
controllerPatrolReadIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadIterations.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadIterations.setDescription('The number of times Patrol Read has been run on this controller.')
controllerStorportDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerStorportDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerStorportDriverVersion.setDescription('Provide current Windows OS storport driver version. Not applicable for Linux.')
controllerMinRequiredStorportVer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMinRequiredStorportVer.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMinRequiredStorportVer.setDescription('Provides minimum required storport driver version for Windows OS only. ')
controllerEncryptionCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionCapable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEncryptionCapable.setDescription('Indicates Encryption capability of the controller. Value: 1 - Capable, 99 - NotApplicable')
controllerEncryptionKeyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controllerEncryptionKeyPresent.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEncryptionKeyPresent.setDescription('Indicates presence of Encryption Key for the controller. Value: 1 - Yes, 0 - No, 99 - NotApplicable')
controllerPersistentHotSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPersistentHotSpare.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPersistentHotSpare.setDescription('Indicates Persistent Hot Spare capability of the controller Value: 1 - Enabled, 0 - Disabled, 99 - Undetermined / Not applicable')
controllerSpinDownUnconfiguredDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownUnconfiguredDrives.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownUnconfiguredDrives.setDescription('Indicates controller capability to put unconfigured drives in power save mode. Value: 1 - Enabled, 0 - Disabled, 99 - Undetermined / Not applicable')
controllerSpinDownHotSpareDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownHotSpareDrives.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownHotSpareDrives.setDescription('Indicates controller capability to put hot spare drives in power save mode. Value: 1 - Enabled, 0 - Disabled, 99 - Undetermined / Not applicable')
controllerSpinDownTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controllerSpinDownTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownTimeInterval.setDescription('Shows the duration in minutes after which, the unconfigured or hot spare drives will be spun down to power save mode. Value: 30 to 1440 Note: A value of 9999 indicates feature not available.')
controllerEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEncryptionMode.setDescription('Indicates the current encryption mode of the controller. Value: 0 - No Encryption, 1 - Local Key Management (LKM), 2 - Dell Key Management (DKM), 99 - Not Applicable ')
controllerCacheCade = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheCade.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCacheCade.setDescription('Indicates if the controller is CacheCade capable or not. Value: 1 - Capable, 0 - Not Capable, 99 - Undetermined')
controllerSpinDownConfiguredDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownConfiguredDrives.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownConfiguredDrives.setDescription('Indicates controller capability to spin down configured physical disks. Value: 0 - Disabled, 1 - Enabled, 99 - Undetermined ')
controllerAutomaticPowerSaving = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerAutomaticPowerSaving.setStatus('mandatory')
if mibBuilder.loadTexts: controllerAutomaticPowerSaving.setDescription('Indicates controller capability for automatic power saving. Value: 0 - Disabled, 1 - Enabled, 99 - Undetermined')
controllerConfiguredDrivesSpinUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerConfiguredDrivesSpinUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: controllerConfiguredDrivesSpinUpTime.setDescription('Indicates configured drives spin up start time. Value: 1:00 AM to 12:59 PM, 9999 - Undetermined')
controllerConfiguredDrivesSpinUpTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerConfiguredDrivesSpinUpTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: controllerConfiguredDrivesSpinUpTimeInterval.setDescription('Indicates configured drives spin up time interval in hours. This value is added with configured drives start time to arrive at time window in which configured drives are always spin up. Value: 1 .. 24, 9999 - Undetermined')
controllerPreservedCache = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPreservedCache.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPreservedCache.setDescription('Indicates if preserved cache is present on the controller. Values: 1- Yes, 0 - No, 99 - Not available / Not applicable')
controllerPIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPIEnable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPIEnable.setDescription('Indicates if T10 PI is enabled on a controller. Value can be either 0 (T10 PI disabled) or 1 (T10 PI enabled).')
tapeDriveTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17), )
if mibBuilder.loadTexts: tapeDriveTable.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveTable.setDescription('A table of listed Tape Drives The number of entries is related to number of Tape Drives discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
tapeDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1), ).setIndexNames((0, "StorageManagement-MIB", "tapeDriveNumber"))
if mibBuilder.loadTexts: tapeDriveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveEntry.setDescription('An entry in the Tape Library table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
tapeDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveNumber.setDescription('Instance number of this tape drive entry.')
tapeDriveName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveName.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveName.setDescription('The name of the tape drive as represented in Storage Management.')
tapeDriveVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveVendor.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveVendor.setDescription("The tape drive's manufacturer's name.")
tapeDriveProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveProductID.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveProductID.setDescription('The model number of the tape drive')
tapeDriveNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveNexusID.setDescription('Durable unique ID for this tape drive')
tapeDriveBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("sas", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveBusType.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveBusType.setDescription('The bus type of the tape drive. Possible values: 8. SAS')
tapeDriveSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveSASAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveSASAddress.setDescription('The specified SAS address if this is a SAS tape drive. ')
tapeDriveMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 130, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("tape", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDriveMediaType.setDescription('The Media type of the tape drive. Possible Values: 4:Tape')
logicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140))
arrayDiskLogicalConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3), )
if mibBuilder.loadTexts: arrayDiskLogicalConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionTable.setDescription('A table of the connections between array disks, the virtual disk to which they belong, and their associated logical disk. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found. ')
arrayDiskLogicalConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1), ).setIndexNames((0, "StorageManagement-MIB", "arrayDiskLogicalConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskLogicalConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionEntry.setDescription('An entry in the Array Disk Logical Connection table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
arrayDiskLogicalConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionNumber.setDescription('Instance number of this array disk logical connection entry.')
arrayDiskLogicalConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskName.setDescription('The name of the array disk in this logical connection.')
arrayDiskLogicalConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskNumber.setDescription('The instance number of the array disk in this logical connection.')
arrayDiskLogicalConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskName.setDescription('The name of the virtual disk to which this array disk belongs.')
arrayDiskLogicalConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskNumber.setDescription('The instance number of the virtual disk to which this array disk belongs.')
arrayDiskLogicalConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskName.setDescription('The name of the disk group to with this array disk belongs. This property is currently not supported.')
arrayDiskLogicalConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskNumber.setDescription('This instance number of the disk group to with this array disk belongs. This property is currently not supported.')
virtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1), )
if mibBuilder.loadTexts: virtualDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskTable.setDescription('A table of managed Virtual Disks. The number of entries is related to number of Virtual Disks discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
virtualDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1), ).setIndexNames((0, "StorageManagement-MIB", "virtualDiskNumber"))
if mibBuilder.loadTexts: virtualDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskEntry.setDescription('An entry in the Virtual Disk table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
virtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNumber.setDescription('Instance number of this virtual disk entry.')
virtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskName.setDescription("The virtual disk's label generated by Storage Management or entered by the user.")
virtualDiskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskDeviceName.setDescription("Device name used by this virtual disk's member disks.")
virtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 15, 16, 18, 24, 26, 32, 35, 36, 52))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("verifying", 7), ("resynching", 15), ("regenerating", 16), ("failedRedundancy", 18), ("rebuilding", 24), ("formatting", 26), ("reconstructing", 32), ("initializing", 35), ("backgroundInit", 36), ("permanentlyDegraded", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskState.setDescription('The current condition of this virtual disk (which includes any member array disks.) Possible states: 0: Unknown 1: Ready - The disk is accessible and has no known problems. 2: Failed - Access has been lost to the data or is about to be lost. 3: Online 4: Offline - The disk is not accessible. The disk may be corrupted or intermittently unavailable. 6: Degraded - The data on the virtual disk is no longer fault tolerant because one of the underlying disks is not online. 15: Resynching 16: Regenerating 24: Rebuilding 26: Formatting 32: Reconstructing 35: Initializing 36: Background Initialization 38: Resynching Paused 52: Permanently Degraded 54: Degraded Redundancy')
virtualDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: virtualDiskSeverity.setDescription('This entry is obsolete for Storage Management. It was replaced with RollUpStatus and ComponentStatus for each device.')
virtualDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLengthInMB.setDescription('The size of this virtual disk in megabytes. If this size is 0, it is smaller than a megabyte.')
virtualDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLengthInBytes.setDescription('The portion of the virtual disk in bytes that is smaller than a megabyte. This size plus the virtualDiskLengthInMB is the total size of the virtual disk.')
virtualDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFreeSpaceInMB.setStatus('obsolete')
if mibBuilder.loadTexts: virtualDiskFreeSpaceInMB.setDescription('This entry is obsolete. This property is not supported for virtual disks managed under Storage Management.')
virtualDiskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFreeSpaceInBytes.setStatus('obsolete')
if mibBuilder.loadTexts: virtualDiskFreeSpaceInBytes.setDescription('This entry is obsolete. This property is not supported for virtual disks managed under Storage Management.')
virtualDiskWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("writeBack", 3), ("writeThrough", 4), ("enabledAlways", 5), ("enabledAlwaysSAS", 6), ("notApplicable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskWritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskWritePolicy.setDescription("Indicates whether the controller's write cache will be used when writing to a virtual disk. Possible values: 1: Enabled - Adaptec Write Cache Enabled Protected 2: Disabled - Adaptec Write Cache Disabled 3: LSI Write Back 4: LSI Write Through 5: Enabled Always - Adaptec only 6: Enabled Always - SAS only 9: Not Applicable")
virtualDiskReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("readAhead", 3), ("adaptiveReadAhead", 4), ("noReadAhead", 5), ("notApplicable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskReadPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskReadPolicy.setDescription("Indicates whether the controller's read cache will be used when reading from a virtual disk. Possible values: 1: Enabled - Adaptec Read Cache Enabled 2: Disabled - Adaptec Read Cache Disabled 3: LSI Read Ahead 4: LSI Adaptive Read Ahead 5: LSI No Read Ahead 9: Not Applicable")
virtualDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("directIO", 1), ("cachedIO", 2), ("not-applicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCachePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskCachePolicy.setDescription("Indicates whether the controller's cache is used when reading from or writing to a virtual disk. Possible values: 1: Direct I/O (LSI) 2: Cached I/O (LSI) 99: Not applicable")
virtualDiskLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("concatenated", 1), ("raid-0", 2), ("raid-1", 3), ("raid-2", 4), ("raid-3", 5), ("raid-4", 6), ("raid-5", 7), ("raid-6", 8), ("raid-7", 9), ("raid-10", 10), ("raid-30", 11), ("raid-50", 12), ("addSpares", 13), ("deleteLogical", 14), ("transformLogical", 15), ("raid-0-plus-1", 18), ("concatRaid-1", 19), ("concatRaid-5", 20), ("noRaid", 21), ("volume", 22), ("raidMorph", 23), ("raid-60", 24), ("cacheCade", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLayout.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLayout.setDescription("The virtual disk's RAID type. Currently supported types: 1: Concatenated 2: RAID-0 3: RAID-1 7: RAID-5 8: RAID-6 10: RAID-10 12: RAID-50 19: Concatenated RAID 1 24: RAID-60 25: CacheCade ")
virtualDiskCurStripeSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInMB.setDescription('The stripe size of this virtual disk in megabytes. If this size is 0, it is either smaller than a megabyte or not applicable. ')
virtualDiskCurStripeSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInBytes.setDescription('The portion of the stripe size in bytes that is smaller than a megabyte. This size plus the virtualDiskCurStripeSizeInMB is the total stripe size on the virtual disk. If this size is 0, either the entire size is whole megabytes or it is not applicable.')
virtualDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskChannel.setStatus('obsolete')
if mibBuilder.loadTexts: virtualDiskChannel.setDescription('This entry is obsolete. This property is not supported by virtual disks managed under Storage Management.')
virtualDiskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskTargetID.setDescription('Unique ID for the virtual disk.')
virtualDiskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLunID.setStatus('obsolete')
if mibBuilder.loadTexts: virtualDiskLunID.setDescription('This entry is obsolete. This property is not supported by virtual disks managed under Storage Management.')
virtualDiskRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 19), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskRollUpStatus.setDescription('Severity of the virtual disk state. This is the combined status of the virtual disk and its components. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
virtualDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 20), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskComponentStatus.setDescription('The status of the virtual disk itself without the propagation of any contained component status. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
virtualDiskNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNexusID.setDescription('Durable unique ID for this virtual disk.')
virtualDiskArrayDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("sas", 1), ("sata", 2), ("scsi", 3), ("ide", 4), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskArrayDiskType.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskArrayDiskType.setDescription('Identifies the type of array (physical) disks used to create the virtual disk. Possible values: 1: SAS 2: SATA 3: SCSI 4: IDE 99: Unknown ')
virtualDiskBadBlocksDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBadBlocksDetected.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskBadBlocksDetected.setDescription('Indicates if virtual disk has bad blocks. Value: 0 - No, 1 - Yes, 2 - Not Applicable, 99 - Unknown')
virtualDiskEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskEncrypted.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskEncrypted.setDescription('Indicates if virtual disk is encrypted. Value: 0 - No, 1 - Yes, 99 - Unknown.')
virtualDiskIsCacheCade = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskIsCacheCade.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskIsCacheCade.setDescription('Indicates if this virtual disk is configured as CacheCade. Value: 1 - Yes, 0 - No, 99 - Undetermined')
virtualDiskDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDiskCachePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskDiskCachePolicy.setDescription('Indicates disk cache policy of the logical device. Value: 1 - Enabled, 2 - Disabled, 99 - Undetermined')
virtualDiskAssociatedFluidCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskAssociatedFluidCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskAssociatedFluidCacheStatus.setDescription('Indicates the status of the associated fluid cache status')
virtualDiskPIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPIEnable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPIEnable.setDescription('Indicates if T10 PI is enabled on a virtual disk. Possible values are: 0 (T10 PI disabled) or 1 (T10 PI enabled). ')
virtualDiskPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2), )
if mibBuilder.loadTexts: virtualDiskPartitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionTable.setDescription('A table of managed Virtual Disk Partitions. The number of entries is related to number of partitions discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries.')
virtualDiskPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1), ).setIndexNames((0, "StorageManagement-MIB", "virtualDiskPartitionNumber"))
if mibBuilder.loadTexts: virtualDiskPartitionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionEntry.setDescription('An entry in the Virtual Disk Partition table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
virtualDiskPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPartitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionNumber.setDescription('Instance number of this partition entry')
virtualDiskPartitionDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPartitionDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionDeviceName.setDescription('Device name of the partition given by the operating system.')
virtualDiskPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("no", 2), ("removing", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPartitionState.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionState.setDescription('State of the partition. This is mapped stated of the associate virtual disk. 1: Active - Mapped cache disk is working fine 2: No - Fluid caching is not enabled 3: Removing - This is a transient stage duing the process of disabling the cache 4: Failed - Mapped cache disk has failed.')
virtualDiskPartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPartitionSize.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionSize.setDescription('Size of the Partition in GB.')
virtualDiskPartitionFluidCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPartitionFluidCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionFluidCacheStatus.setDescription('Indicates if the partition has associated fluidcache ')
virtualDiskPartitionNexusID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskPartitionNexusID.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskPartitionNexusID.setDescription('Durable unique ID for this partition. This comprises the controllerID, virtualDisk ID and hash mapped WWN number of this partition')
fluidCacheTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4), )
if mibBuilder.loadTexts: fluidCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheTable.setDescription('A table of managed FluidCache. The number of entries is related to FluidCache discovered in the system. The maximum number of entries is implementation dependent. Note: The properties in this table may not be applicable to all entries. ')
fluidCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1), ).setIndexNames((0, "StorageManagement-MIB", "fluidCacheNumber"))
if mibBuilder.loadTexts: fluidCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheEntry.setDescription('An entry in the Fluid Cache table. A row in this table cannot be created or deleted by SNMP operations on columns of the table. ')
fluidCacheNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheNumber.setDescription('Instance number of this fluid cache entry')
fluidCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheName.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheName.setDescription('The name of the fluidcache in this subsystem as represented in Storage Management. ')
fluidCacheLicenseState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseState.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseState.setDescription('License state of the associated fluid cache subsystem')
fluidCacheLicenseValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseValidity.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseValidity.setDescription("This entry displays the number of days the fluid cache license is valid. It has to be read in parallel to license type. Incase of site wide license, value '0' should be read as 'Not Applicable'")
fluidCacheLicenseEntitlementID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseEntitlementID.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseEntitlementID.setDescription('Indiactes the Entitlement Identifier for the license of the fluid cache subsystem')
fluidCacheLicenseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseDuration.setDescription('Indicates the duration of the the license validity')
fluidCacheLicenseCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseCapacity.setDescription('Indicates the capacity of the license of fluidcache subsystem')
fluidCacheLicenseRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fluidCacheLicenseRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseRemaining.setDescription('Indicates the remaining days of the license validity')
fluidCacheLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseType.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseType.setDescription('Indicates the type of the license of the fluidcache subsystem')
fluidCacheLicenseVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseVendor.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseVendor.setDescription('Indicates the license vendor for the fluidcache subsystem')
fluidCacheLicenseProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseProductId.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseProductId.setDescription('Indicates the product ID of the license of the fluidcache susbsytem')
fluidCacheLicenseDateSold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseDateSold.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseDateSold.setDescription('Indicates the date on which the license for the fluidcache subsystem is sold')
fluidCacheLicenseGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseGeneration.setDescription('Indicates the generation of the license for the fluidcache subsystem')
fluidCacheLicenseFeatureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseFeatureID.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseFeatureID.setDescription('Indicates the license feature ID of the fluidcache subsystem')
fluidCacheLicenseFeatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheLicenseFeatureDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheLicenseFeatureDescription.setDescription('Provides the description of the license feature of fluidcache subsystem')
fluidCacheNexus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheNexus.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheNexus.setDescription('Indicates the unique ID of the fludicache component')
fluidCacheDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5), )
if mibBuilder.loadTexts: fluidCacheDiskTable.setStatus('mandatory')
fluidCacheDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1), ).setIndexNames((0, "StorageManagement-MIB", "fluidCacheDiskNumber"))
if mibBuilder.loadTexts: fluidCacheDiskEntry.setStatus('mandatory')
fluidCacheDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskNumber.setDescription('Instance number of the fluidCacheDisk entry')
fluidCacheDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskName.setDescription('Name of the Fluid Cache Disk Name as seen by storage management')
fluidCacheDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskState.setDescription('State of the FluidCacheDisk entry Valid values are 2 - Active, otherwise Inactive ')
fluidCacheDiskBackendDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskBackendDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskBackendDeviceType.setDescription('This displays the type of the backend device beneath the fluid cache disk. Values are as below 773 denotes VirtualDisk 791 denotes Partition')
fluidCacheDiskBackendDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskBackendDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskBackendDeviceName.setDescription('Device name of the backend device as seen by the operating system')
fluidCacheDiskBackendDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskBackendDeviceSize.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskBackendDeviceSize.setDescription('Size of the Backend device. Size is indicated in GB')
fluidCacheDiskOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskOperatingMode.setDescription('Operating mode of the FluidCache. Values are 0 - Writeback mode 1 - Writethrough mode 2 - PassThrough mode ')
fluidCacheDiskConfiguredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskConfiguredMode.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskConfiguredMode.setDescription('Configured Mode of the FluidCache. The values are 0 - Writeback mode 1 - Writethrough mode 2 - PassThrough mode ')
fluidCacheDiskNexus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fluidCacheDiskNexus.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskNexus.setDescription('Durable Unique ID of the fluidcache disk')
fluidCacheDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCacheDiskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCacheDiskStatus.setDescription('Severity of the fluid cache disk state. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
fluidCachePoolTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6), )
if mibBuilder.loadTexts: fluidCachePoolTable.setStatus('mandatory')
fluidCachePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1), ).setIndexNames((0, "StorageManagement-MIB", "fluidCachePoolNumber"))
if mibBuilder.loadTexts: fluidCachePoolEntry.setStatus('mandatory')
fluidCachePoolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolNumber.setDescription('Instance number of the fluid cachepool entry')
fluidCachePoolStoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolStoreCount.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolStoreCount.setDescription('Number of flash devices that are part of the fluidcache pool')
fluidCachePoolUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolUUID.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolUUID.setDescription('UUID of the fluidcache pool')
fluidCachePoolLicenseState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolLicenseState.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolLicenseState.setDescription('State of the fluid cache license. Possible values: Valid, Evaluation, Expired ')
fluidCachePoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolSize.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolSize.setDescription('Size of the fluidcache pool in GiB')
fluidCachePoolHighAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolHighAvailabilityState.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolHighAvailabilityState.setDescription('Indicates if the fluidcache pool is operating in high availability mode.')
fluidCachePoolNexus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolNexus.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolNexus.setDescription('Durable unique ID of the fluidcache pool entry')
fluidCachePoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 140, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fluidCachePoolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fluidCachePoolStatus.setDescription('Severity of the fluid cache pool table state. Possible values: 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable')
storageManagementEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200))
messageIDEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageIDEvent.setStatus('mandatory')
if mibBuilder.loadTexts: messageIDEvent.setDescription('0200.0001 Storage Management alert (event) message number.')
descriptionEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: descriptionEvent.setStatus('mandatory')
if mibBuilder.loadTexts: descriptionEvent.setDescription('0200.0002 Storage Management event message text describing the alert.')
locationEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationEvent.setStatus('mandatory')
if mibBuilder.loadTexts: locationEvent.setDescription('0200.0003 Additional information identifying the location of the object causing the alert.')
objectNameEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectNameEvent.setStatus('mandatory')
if mibBuilder.loadTexts: objectNameEvent.setDescription('0200.0004 Name of the object as represented in Storage Management causing the alert.')
objectOIDEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectOIDEvent.setStatus('mandatory')
if mibBuilder.loadTexts: objectOIDEvent.setDescription('0200.0005 MIB OID of the object causing the alert.')
objectNexusEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectNexusEvent.setStatus('mandatory')
if mibBuilder.loadTexts: objectNexusEvent.setDescription('0200.0006 Durable, unique ID of the object causing the alert.')
currentStatusEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 7), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStatusEvent.setStatus('mandatory')
if mibBuilder.loadTexts: currentStatusEvent.setDescription('0200.0007 Current status of object causing the alert, if applicable.')
previousStatusEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: previousStatusEvent.setStatus('mandatory')
if mibBuilder.loadTexts: previousStatusEvent.setDescription('0200.0008 Previous status of object causing the alert if applicable.')
enhancedMessageIDEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enhancedMessageIDEvent.setStatus('mandatory')
if mibBuilder.loadTexts: enhancedMessageIDEvent.setDescription('0200.0001 Enhanced Storage Management Message ID.')
systemFQDNEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFQDNEvent.setStatus('mandatory')
if mibBuilder.loadTexts: systemFQDNEvent.setDescription('0200.0008 System FQDN of object causing the alert if applicable.')
serviceTagEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceTagEvent.setStatus('mandatory')
if mibBuilder.loadTexts: serviceTagEvent.setDescription('0200.0008 Service Tag of object causing the alert if applicable.')
chassisServiceTagEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTagEvent.setStatus('mandatory')
if mibBuilder.loadTexts: chassisServiceTagEvent.setDescription('0200.0008 Chassis Service Tag of object causing the alert if applicable.')
alertStorageManagementInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,101)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"))
if mibBuilder.loadTexts: alertStorageManagementInformation.setDescription('Storage Management Information There is no global status change associated with this trap.')
alertStorageManagementNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,102)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"))
if mibBuilder.loadTexts: alertStorageManagementNormal.setDescription('There is no global status change associated with this trap.')
alertStorageManagementWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,103)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"))
if mibBuilder.loadTexts: alertStorageManagementWarning.setDescription('Storage Management has detected a device independent warning condition. There is no global status change associated with this trap.')
alertStorageManagementFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,104)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"))
if mibBuilder.loadTexts: alertStorageManagementFailure.setDescription('Storage Management has detected a device independent error condition. There is no global status change associated with this trap.')
alertStorageManagementNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,105)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"))
if mibBuilder.loadTexts: alertStorageManagementNonRecoverable.setDescription('Storage Management has detected a device independent non-recoverable condition. There is no global status change associated with this trap.')
alertControllerInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,751)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertControllerInformation.setDescription('Controller information.')
alertControllerNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,752)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertControllerNormal.setDescription('Controller has returned to normal.')
alertControllerWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,753)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertControllerWarning.setDescription('Controller warning.')
alertControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,754)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertControllerFailure.setDescription('Controller failure.')
alertControllerNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,755)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertControllerNonRecoverable.setDescription('Controller is non-recoverable.')
alertChannelInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,801)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertChannelInformation.setDescription('Channel information.')
alertChannelNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,802)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertChannelNormal.setDescription('Channel has returned to normal.')
alertChannelWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,803)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertChannelWarning.setDescription('Channel warning.')
alertChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,804)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertChannelFailure.setDescription('Channel failure.')
alertChannelNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,805)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertChannelNonRecoverable.setDescription('Channel is non-recoverable.')
alertEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,851)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEnclosureInformation.setDescription('Enclosure information.')
alertEnclosureNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,852)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEnclosureNormal.setDescription('Enclosure has returned to normal.')
alertEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,853)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEnclosureWarning.setDescription('Enclosure warning.')
alertEnclosureFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,854)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEnclosureFailure.setDescription('Enclosure failure.')
alertEnclosureNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,855)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEnclosureNonRecoverable.setDescription('Enclosure is non-recoverable.')
alertArrayDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,901)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertArrayDiskInformation.setDescription('Array disk information.')
alertArrayDiskNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,902)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertArrayDiskNormal.setDescription('Array disk has returned to normal.')
alertArrayDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,903)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertArrayDiskWarning.setDescription('Array disk warning.')
alertArrayDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,904)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertArrayDiskFailure.setDescription('Array disk failure.')
alertArrayDiskNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,905)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertArrayDiskNonRecoverable.setDescription('Array disk is non-recoverable.')
alertEMMInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,951)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEMMInformation.setDescription('EMM information.')
alertEMMNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,952)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEMMNormal.setDescription('EMM has returned to normal.')
alertEMMWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,953)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEMMWarning.setDescription('EMM warning.')
alertEMMFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,954)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEMMFailure.setDescription('EMM failure.')
alertEMMNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,955)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertEMMNonRecoverable.setDescription('EMM is non-recoverable.')
alertPowerSupplyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1001)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertPowerSupplyInformation.setDescription('Power supply information.')
alertPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1002)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertPowerSupplyNormal.setDescription('Power supply has returned to normal.')
alertPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1003)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertPowerSupplyWarning.setDescription('Power supply warning.')
alertPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1004)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertPowerSupplyFailure.setDescription('Power supply failure.')
alertPowerSupplyNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1005)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertPowerSupplyNonRecoverable.setDescription('Power supply is non-recoverable.')
alertTemperatureProbeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1051)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertTemperatureProbeInformation.setDescription('Temperature probe information.')
alertTemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1052)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertTemperatureProbeNormal.setDescription('Temperature probe has returned to normal.')
alertTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1053)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertTemperatureProbeWarning.setDescription('Temperature probe warning.')
alertTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1054)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertTemperatureProbeFailure.setDescription('Temperature probe failure.')
alertTemperatureProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1055)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertTemperatureProbeNonRecoverable.setDescription('Temperature probe is non-recoverable.')
alertFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1101)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFanInformation.setDescription('Fan information.')
alertFanNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1102)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFanNormal.setDescription('Fan has returned to normal.')
alertFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1103)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFanWarning.setDescription('Fan warning.')
alertFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1104)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFanFailure.setDescription('Fan failure.')
alertFanNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1105)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFanNonRecoverable.setDescription('Fan is non-recoverable.')
alertBatteryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1151)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertBatteryInformation.setDescription('Battery information.')
alertBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1152)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertBatteryNormal.setDescription('Battery has returned to normal.')
alertBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1153)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertBatteryWarning.setDescription('Battery warning.')
alertBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1154)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertBatteryFailure.setDescription('Battery failure.')
alertBatteryNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1155)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertBatteryNonRecoverable.setDescription('Battery is non-recoverable.')
alertVirtualDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1201)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskInformation.setDescription('Virtual disk information.')
alertVirtualDiskNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1202)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskNormal.setDescription('Virtual disk has returned to normal.')
alertVirtualDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1203)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskWarning.setDescription('Virtual disk warning.')
alertVirtualDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1204)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskFailure.setDescription('Virtual disk failure.')
alertVirtualDiskNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1205)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskNonRecoverable.setDescription('Virtual disk is non-recoverable.')
alertRedundancyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1304)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertRedundancyNormal.setDescription('Redundancy has returned to normal.')
alertRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1305)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertRedundancyDegraded.setDescription('Redundancy has been degraded.')
alertRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1306)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertRedundancyLost.setDescription('Redundancy has been lost.')
alertFluidCacheDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1401)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFluidCacheDiskInformation.setDescription('Fluid Cache Disk Information')
alertfluidCacheDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1403)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertfluidCacheDiskWarning.setDescription('Fluid Cache Disk warning.')
alertFluidCacheDisklFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1404)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFluidCacheDisklFailure.setDescription('Fluid Cache Disk failure.')
alertVirtualDiskPartitionInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1501)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskPartitionInformation.setDescription('Virtual Disk Partition Information')
alertVirtualDiskPartitionWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1503)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskPartitionWarning.setDescription('Virtual Disk Partition warning.')
alertVirtualDiskPartitionFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1504)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertVirtualDiskPartitionFailure.setDescription('Virtual Disk Partition failure.')
alertFluidCacheInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1601)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFluidCacheInformation.setDescription('Fluid Cache Information')
alertfluidCacheWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1603)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertfluidCacheWarning.setDescription('Fluid Cache warning.')
alertFluidCacheFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1604)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFluidCacheFailure.setDescription('Fluid Cache failure.')
alertFluidCachePoolInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1701)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFluidCachePoolInformation.setDescription('Fluid Cache Pool Information')
alertfluidCachePoolWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1703)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertfluidCachePoolWarning.setDescription('Fluid Cache Pool warning.')
alertFluidCachePoolFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,1704)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"))
if mibBuilder.loadTexts: alertFluidCachePoolFailure.setDescription('Fluid Cache Pool failure.')
alertEEMIStorageManagementInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,10100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIStorageManagementInformation.setDescription('Storage Management Information There is no global status change associated with this trap.')
alertEEMIStorageManagementNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,10200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIStorageManagementNormal.setDescription('There is no global status change associated with this trap.')
alertEEMIStorageManagementWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,10300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIStorageManagementWarning.setDescription('Storage Management has detected a device independent warning condition. There is no global status change associated with this trap.')
alertEEMIStorageManagementFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,10400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIStorageManagementFailure.setDescription('Storage Management has detected a device independent error condition. There is no global status change associated with this trap.')
alertEEMIStorageManagementNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,10500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIStorageManagementNonRecoverable.setDescription('Storage Management has detected a device independent non-recoverable condition. There is no global status change associated with this trap.')
alertEEMIControllerInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,75100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIControllerInformation.setDescription('Controller information.')
alertEEMIControllerNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,75200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIControllerNormal.setDescription('Controller has returned to normal.')
alertEEMIControllerWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,75300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIControllerWarning.setDescription('Controller warning.')
alertEEMIControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,75400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIControllerFailure.setDescription('Controller failure.')
alertEEMIControllerNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,75500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIControllerNonRecoverable.setDescription('Controller is non-recoverable.')
alertEEMIChannelInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,80100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIChannelInformation.setDescription('Channel information.')
alertEEMIChannelNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,80200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIChannelNormal.setDescription('Channel has returned to normal.')
alertEEMIChannelWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,80300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIChannelWarning.setDescription('Channel warning.')
alertEEMIChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,80400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIChannelFailure.setDescription('Channel failure.')
alertEEMIChannelNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,80500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIChannelNonRecoverable.setDescription('Channel is non-recoverable.')
alertEEMIEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,85100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEnclosureInformation.setDescription('Enclosure information.')
alertEEMIEnclosureNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,85200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEnclosureNormal.setDescription('Enclosure has returned to normal.')
alertEEMIEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,85300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEnclosureWarning.setDescription('Enclosure warning.')
alertEEMIEnclosureFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,85400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEnclosureFailure.setDescription('Enclosure failure.')
alertEEMIEnclosureNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,85500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEnclosureNonRecoverable.setDescription('Enclosure is non-recoverable.')
alertEEMIArrayDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,90100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIArrayDiskInformation.setDescription('Array disk information.')
alertEEMIArrayDiskNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,90200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIArrayDiskNormal.setDescription('Array disk has returned to normal.')
alertEEMIArrayDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,90300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIArrayDiskWarning.setDescription('Array disk warning.')
alertEEMIArrayDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,90400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIArrayDiskFailure.setDescription('Array disk failure.')
alertEEMIArrayDiskNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,90500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIArrayDiskNonRecoverable.setDescription('Array disk is non-recoverable.')
alertEMMEMMInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,95100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEMMEMMInformation.setDescription('EMM information.')
alertEEMIEMMNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,95200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEMMNormal.setDescription('EMM has returned to normal.')
alertEEMIEMMWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,95300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEMMWarning.setDescription('EMM warning.')
alertEEMIEMMFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,95400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEMMFailure.setDescription('EMM failure.')
alertEEMIEMMNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,95500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIEMMNonRecoverable.setDescription('EMM is non-recoverable.')
alertEEMIPowerSupplyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,100100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIPowerSupplyInformation.setDescription('Power supply information.')
alertEEMIPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,100200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIPowerSupplyNormal.setDescription('Power supply has returned to normal.')
alertEEMIPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,100300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIPowerSupplyWarning.setDescription('Power supply warning.')
alertEEMIPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,100400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIPowerSupplyFailure.setDescription('Power supply failure.')
alertEEMIPowerSupplyNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,100500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIPowerSupplyNonRecoverable.setDescription('Power supply is non-recoverable.')
alertEEMITemperatureProbeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,105100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMITemperatureProbeInformation.setDescription('Temperature probe information.')
alertEEMITemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,105200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMITemperatureProbeNormal.setDescription('Temperature probe has returned to normal.')
alertEEMITemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,105300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMITemperatureProbeWarning.setDescription('Temperature probe warning.')
alertEEMITemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,105400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMITemperatureProbeFailure.setDescription('Temperature probe failure.')
alertEEMITemperatureProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,105500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMITemperatureProbeNonRecoverable.setDescription('Temperature probe is non-recoverable.')
alertEEMIFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,110100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFanInformation.setDescription('Fan information.')
alertEEMIFanNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,110200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFanNormal.setDescription('Fan has returned to normal.')
alertEEMIFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,110300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFanWarning.setDescription('Fan warning.')
alertEEMIFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,110400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFanFailure.setDescription('Fan failure.')
alertEEMIFanNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,110500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFanNonRecoverable.setDescription('Fan is non-recoverable.')
alertEEMIBatteryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,115100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIBatteryInformation.setDescription('Battery information.')
alertEEMIBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,115200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIBatteryNormal.setDescription('Battery has returned to normal.')
alertEEMIBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,115300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIBatteryWarning.setDescription('Battery warning.')
alertEEMIBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,115400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIBatteryFailure.setDescription('Battery failure.')
alertEEMIBatteryNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,115500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIBatteryNonRecoverable.setDescription('Battery is non-recoverable.')
alertEEMIVirtualDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,120100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskInformation.setDescription('Virtual disk information.')
alertEEMIVirtualDiskNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,120200)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskNormal.setDescription('Virtual disk has returned to normal.')
alertEEMIVirtualDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,120300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskWarning.setDescription('Virtual disk warning.')
alertEEMIVirtualDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,120400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskFailure.setDescription('Virtual disk failure.')
alertEEMIVirtualDiskNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,120500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskNonRecoverable.setDescription('Virtual disk is non-recoverable.')
alertEEMIRedundancyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,130400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIRedundancyNormal.setDescription('Redundancy has returned to normal.')
alertEEMIRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,130500)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIRedundancyDegraded.setDescription('Redundancy has been degraded.')
alertEEMIRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,130600)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIRedundancyLost.setDescription('Redundancy has been lost.')
alertEEMIFluidCacheDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,140100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFluidCacheDiskInformation.setDescription('Fluid Cache Disk Information')
alertEEMIfluidCacheDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,140300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIfluidCacheDiskWarning.setDescription('Fluid Cache Disk warning.')
alertEEMIFluidCacheDisklFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,140400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFluidCacheDisklFailure.setDescription('Fluid Cache Disk failure.')
alertEEMIVirtualDiskPartitionInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,150100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskPartitionInformation.setDescription('Virtual Disk Partition Information')
alertEEMIVirtualDiskPartitionWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,150300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskPartitionWarning.setDescription('Virtual Disk Partition warning.')
alertEEMIVirtualDiskPartitionFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,150400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIVirtualDiskPartitionFailure.setDescription('Virtual Disk Partition failure.')
alertEEMIFluidCacheInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,160100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFluidCacheInformation.setDescription('Fluid Cache Information')
alertEEMIfluidCacheWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,160300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIfluidCacheWarning.setDescription('Fluid Cache warning.')
alertEEMIFluidCacheFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,160400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFluidCacheFailure.setDescription('Fluid Cache failure.')
alertEEMIFluidCachePoolInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,170100)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFluidCachePoolInformation.setDescription('Fluid Cache Pool Information')
alertEEMIfluidCachePoolWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,170300)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIfluidCachePoolWarning.setDescription('Fluid Cache Pool warning.')
alertEEMIFluidCachePoolFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 20, 200) + (0,170400)).setObjects(("StorageManagement-MIB", "messageIDEvent"), ("StorageManagement-MIB", "descriptionEvent"), ("StorageManagement-MIB", "locationEvent"), ("StorageManagement-MIB", "objectNameEvent"), ("StorageManagement-MIB", "objectOIDEvent"), ("StorageManagement-MIB", "objectNexusEvent"), ("StorageManagement-MIB", "currentStatusEvent"), ("StorageManagement-MIB", "previousStatusEvent"), ("StorageManagement-MIB", "enhancedMessageIDEvent"), ("StorageManagement-MIB", "systemFQDNEvent"), ("StorageManagement-MIB", "serviceTagEvent"), ("StorageManagement-MIB", "chassisServiceTagEvent"))
if mibBuilder.loadTexts: alertEEMIFluidCachePoolFailure.setDescription('Fluid Cache Pool failure.')
mibBuilder.exportSymbols("StorageManagement-MIB", powerSupplyConnectionPowersupplyNumber=powerSupplyConnectionPowersupplyNumber, alertFluidCacheInformation=alertFluidCacheInformation, fanComponentStatus=fanComponentStatus, virtualDiskPartitionNexusID=virtualDiskPartitionNexusID, virtualDiskCurStripeSizeInMB=virtualDiskCurStripeSizeInMB, virtualDiskPartitionSize=virtualDiskPartitionSize, arrayDiskLengthInBytes=arrayDiskLengthInBytes, controllerC0Target=controllerC0Target, arrayDiskFreeSpaceInBytes=arrayDiskFreeSpaceInBytes, virtualDiskFreeSpaceInMB=virtualDiskFreeSpaceInMB, channelEntry=channelEntry, alertEEMIStorageManagementNormal=alertEEMIStorageManagementNormal, temperatureConnectionEnclosureNumber=temperatureConnectionEnclosureNumber, arrayDiskLogicalConnectionNumber=arrayDiskLogicalConnectionNumber, controllerCacheCade=controllerCacheCade, enclosureOccupiedSlotCount=enclosureOccupiedSlotCount, controllerC1Port0ID=controllerC1Port0ID, arrayDiskEnclosureConnectionTable=arrayDiskEnclosureConnectionTable, controllerPatrolReadIterations=controllerPatrolReadIterations, temperatureProbeSeverity=temperatureProbeSeverity, batteryNextLearnTime=batteryNextLearnTime, alertEEMIPowerSupplyFailure=alertEEMIPowerSupplyFailure, temperatureConnectionTemperatureNumber=temperatureConnectionTemperatureNumber, fanTable=fanTable, controllerSeverity=controllerSeverity, virtualDiskLunID=virtualDiskLunID, virtualDiskPartitionNumber=virtualDiskPartitionNumber, enclosureAlarm=enclosureAlarm, fluidCachePoolSize=fluidCachePoolSize, batteryNumber=batteryNumber, softwareProduct=softwareProduct, fluidCacheNexus=fluidCacheNexus, virtualDiskPartitionState=virtualDiskPartitionState, channelName=channelName, arrayDiskRevision=arrayDiskRevision, alertRedundancyDegraded=alertRedundancyDegraded, enclosureSplitBusPartNumber=enclosureSplitBusPartNumber, enclosureBackplanePartNumber=enclosureBackplanePartNumber, alertFanWarning=alertFanWarning, arrayDiskTable=arrayDiskTable, controllerEncryptionKeyPresent=controllerEncryptionKeyPresent, alertEEMIEnclosureFailure=alertEEMIEnclosureFailure, fluidCacheLicenseState=fluidCacheLicenseState, enclosureAssetName=enclosureAssetName, arrayDiskBusType=arrayDiskBusType, alertTemperatureProbeFailure=alertTemperatureProbeFailure, alertPowerSupplyNonRecoverable=alertPowerSupplyNonRecoverable, virtualDiskNumber=virtualDiskNumber, alertEEMIChannelInformation=alertEEMIChannelInformation, temperatureProbeState=temperatureProbeState, globalData=globalData, fanName=fanName, arrayDiskLengthInMB=arrayDiskLengthInMB, alertEEMIEMMNormal=alertEEMIEMMNormal, enclosureProcessor2Version=enclosureProcessor2Version, alertfluidCachePoolWarning=alertfluidCachePoolWarning, alertEMMNonRecoverable=alertEMMNonRecoverable, objectNexusEvent=objectNexusEvent, enclosureName=enclosureName, controllerLogicalDeviceCount=controllerLogicalDeviceCount, alertRedundancyNormal=alertRedundancyNormal, alertEEMIFluidCacheDisklFailure=alertEEMIFluidCacheDisklFailure, alertEEMIChannelNonRecoverable=alertEEMIChannelNonRecoverable, arrayDiskEnclosureConnectionArrayDiskName=arrayDiskEnclosureConnectionArrayDiskName, DellStatus=DellStatus, arrayDiskFreeSpaceInMB=arrayDiskFreeSpaceInMB, alertEEMIRedundancyLost=alertEEMIRedundancyLost, arrayDiskDeviceName=arrayDiskDeviceName, alertVirtualDiskPartitionWarning=alertVirtualDiskPartitionWarning, arrayDiskDellCertified=arrayDiskDellCertified, channelTable=channelTable, controllerState=controllerState, tapeDriveBusType=tapeDriveBusType, fluidCacheLicenseVendor=fluidCacheLicenseVendor, arrayDiskManufactureDay=arrayDiskManufactureDay, batteryLearnMode=batteryLearnMode, temperatureProbeMaxWarning=temperatureProbeMaxWarning, alertVirtualDiskNormal=alertVirtualDiskNormal, alertEEMIPowerSupplyNormal=alertEEMIPowerSupplyNormal, virtualDiskLayout=virtualDiskLayout, controllerPersistentHotSpare=controllerPersistentHotSpare, arrayDiskLogicalConnectionEntry=arrayDiskLogicalConnectionEntry, arrayDiskRollUpStatus=arrayDiskRollUpStatus, alertBatteryNormal=alertBatteryNormal, arrayDiskChannelConnectionChannelNumber=arrayDiskChannelConnectionChannelNumber, alertEEMITemperatureProbeNormal=alertEEMITemperatureProbeNormal, alertFluidCachePoolInformation=alertFluidCachePoolInformation, temperatureProbeCurValue=temperatureProbeCurValue, controllerAlarmState=controllerAlarmState, controllerC0BatteryState=controllerC0BatteryState, arrayDiskVendor=arrayDiskVendor, alertVirtualDiskWarning=alertVirtualDiskWarning, systemFQDNEvent=systemFQDNEvent, batteryMaxChargeCount=batteryMaxChargeCount, arrayDiskNegotiatedLinkWidth=arrayDiskNegotiatedLinkWidth, alertPowerSupplyFailure=alertPowerSupplyFailure, fanConnectionEntry=fanConnectionEntry, powerSupplyConnectionTable=powerSupplyConnectionTable, fluidCacheDiskOperatingMode=fluidCacheDiskOperatingMode, alertfluidCacheDiskWarning=alertfluidCacheDiskWarning, alertEEMIPowerSupplyWarning=alertEEMIPowerSupplyWarning, controllerSpinDownTimeInterval=controllerSpinDownTimeInterval, alertEMMFailure=alertEMMFailure, batteryID=batteryID, alertTemperatureProbeWarning=alertTemperatureProbeWarning, alertEEMIChannelNormal=alertEEMIChannelNormal, fluidCachePoolStoreCount=fluidCachePoolStoreCount, enclosureType=enclosureType, temperatureConnectionTable=temperatureConnectionTable, controllerEncryptionCapable=controllerEncryptionCapable, alertTemperatureProbeNormal=alertTemperatureProbeNormal, alertEEMIFluidCacheFailure=alertEEMIFluidCacheFailure, temperatureConnectionEntry=temperatureConnectionEntry, controllerC0Port0ID=controllerC0Port0ID, controllerNexusID=controllerNexusID, alertEEMIEnclosureNonRecoverable=alertEEMIEnclosureNonRecoverable, fluidCacheLicenseRemaining=fluidCacheLicenseRemaining, enclosureManagementModuleConnectionEMMName=enclosureManagementModuleConnectionEMMName, alertPowerSupplyNormal=alertPowerSupplyNormal, batteryChargeCount=batteryChargeCount, enclosureNumber=enclosureNumber, alertEEMIControllerNonRecoverable=alertEEMIControllerNonRecoverable, powerSupplyConnectionFirmwareVersion=powerSupplyConnectionFirmwareVersion, alertBatteryFailure=alertBatteryFailure, enclosureState=enclosureState, powerSupplySeverity=powerSupplySeverity, fluidCacheLicenseType=fluidCacheLicenseType, alertEMMNormal=alertEMMNormal, batteryPredictedCapacity=batteryPredictedCapacity, physicalDevices=physicalDevices, alertEEMIEMMNonRecoverable=alertEEMIEMMNonRecoverable, fluidCacheDiskBackendDeviceSize=fluidCacheDiskBackendDeviceSize, alertEEMITemperatureProbeWarning=alertEEMITemperatureProbeWarning, virtualDiskRollUpStatus=virtualDiskRollUpStatus, enclosureProductID=enclosureProductID, objectOIDEvent=objectOIDEvent, powerSupplyComponentStatus=powerSupplyComponentStatus, agentHostname=agentHostname, displayName=displayName, fluidCacheDiskBackendDeviceType=fluidCacheDiskBackendDeviceType, controllerBGIRate=controllerBGIRate, powerSupplyTable=powerSupplyTable, virtualDiskIsCacheCade=virtualDiskIsCacheCade, tapeDriveName=tapeDriveName, controllerDriveChannelCount=controllerDriveChannelCount, channelTermination=channelTermination, fluidCacheDiskName=fluidCacheDiskName, software=software, alertControllerWarning=alertControllerWarning, enclosureManagementModuleNumber=enclosureManagementModuleNumber, alertFanNormal=alertFanNormal, batteryMaxLearnDelay=batteryMaxLearnDelay, storageManagementEvent=storageManagementEvent, enclosureManagementModuleVendor=enclosureManagementModuleVendor, tapeDriveVendor=tapeDriveVendor, fanVendor=fanVendor, controllerTable=controllerTable, virtualDiskNexusID=virtualDiskNexusID, temperatureProbeTable=temperatureProbeTable, alertFluidCacheDiskInformation=alertFluidCacheDiskInformation, controllerVendor=controllerVendor, controllerChannelCount=controllerChannelCount, agentVendor=agentVendor, alertTemperatureProbeNonRecoverable=alertTemperatureProbeNonRecoverable, enclosureManagementModuleName=enclosureManagementModuleName, alertStorageManagementNormal=alertStorageManagementNormal, enclosureManagementModuleConnectionEnclosureName=enclosureManagementModuleConnectionEnclosureName, alertEEMIFanNormal=alertEEMIFanNormal, alertEEMIFanWarning=alertEEMIFanWarning, controllerType=controllerType, fanProbeCurrValue=fanProbeCurrValue, arrayDiskNegotiatedSpeed=arrayDiskNegotiatedSpeed, virtualDiskState=virtualDiskState, virtualDiskPartitionDeviceName=virtualDiskPartitionDeviceName, fluidCachePoolStatus=fluidCachePoolStatus, powerSupplyConnectionEntry=powerSupplyConnectionEntry, agentSystemGlobalStatus=agentSystemGlobalStatus, controllerEntry=controllerEntry, fanConnectionFanName=fanConnectionFanName, fanConnectionEnclosureName=fanConnectionEnclosureName, channelDataRate=channelDataRate, descriptionEvent=descriptionEvent, alertEnclosureFailure=alertEnclosureFailure, arrayDiskEnclosureConnectionControllerName=arrayDiskEnclosureConnectionControllerName, alertEEMIArrayDiskWarning=alertEEMIArrayDiskWarning, arrayDiskLogicalConnectionDiskNumber=arrayDiskLogicalConnectionDiskNumber, alertEEMIEnclosureWarning=alertEEMIEnclosureWarning, alertStorageManagementNonRecoverable=alertStorageManagementNonRecoverable, alertBatteryWarning=alertBatteryWarning, alertEEMIVirtualDiskNonRecoverable=alertEEMIVirtualDiskNonRecoverable, enclosureSerialNumber=enclosureSerialNumber, controllerC1Port1WWN=controllerC1Port1WWN, batteryEntry=batteryEntry, alertEEMIArrayDiskFailure=alertEEMIArrayDiskFailure, batteryNexusID=batteryNexusID, agentSmartThermalShutdown=agentSmartThermalShutdown, agentManagementSoftwareURLName=agentManagementSoftwareURLName, virtualDiskPIEnable=virtualDiskPIEnable, alertEEMIFluidCacheDiskInformation=alertEEMIFluidCacheDiskInformation, fanRevision=fanRevision, alertRedundancyLost=alertRedundancyLost, arrayDiskEnclosureConnectionEntry=arrayDiskEnclosureConnectionEntry, virtualDiskPartitionTable=virtualDiskPartitionTable, virtualDiskPartitionEntry=virtualDiskPartitionEntry, messageIDEvent=messageIDEvent, enclosureManagementModuleConnectionNumber=enclosureManagementModuleConnectionNumber, fluidCacheDiskNexus=fluidCacheDiskNexus, batteryConnectionTable=batteryConnectionTable, fluidCacheLicenseGeneration=fluidCacheLicenseGeneration, arrayDiskUsedSpaceInMB=arrayDiskUsedSpaceInMB, temperatureProbeNexusID=temperatureProbeNexusID, controllerNumber=controllerNumber, fluidCachePoolHighAvailabilityState=fluidCachePoolHighAvailabilityState, arrayDiskSmartAlertIndication=arrayDiskSmartAlertIndication, enclosureManagementModuleRevision=enclosureManagementModuleRevision, agentSnmpVersion=agentSnmpVersion, arrayDiskSectorSize=arrayDiskSectorSize, controllerC1BatteryState=controllerC1BatteryState, alertChannelNormal=alertChannelNormal, controllerFWVersion=controllerFWVersion, controllerName=controllerName, temperatureProbeName=temperatureProbeName, alertEEMIfluidCachePoolWarning=alertEEMIfluidCachePoolWarning, alertControllerFailure=alertControllerFailure, fluidCacheLicenseValidity=fluidCacheLicenseValidity, tapeDriveSASAddress=tapeDriveSASAddress, controllerC1Channel=controllerC1Channel, powerSupply1PartNumber=powerSupply1PartNumber, controllerRollUpStatus=controllerRollUpStatus, fluidCachePoolNexus=fluidCachePoolNexus, arrayDiskSeverity=arrayDiskSeverity, controllerConfiguredDrivesSpinUpTimeInterval=controllerConfiguredDrivesSpinUpTimeInterval, batteryConnectionBatteryNumber=batteryConnectionBatteryNumber, arrayDiskPowerState=arrayDiskPowerState, batteryConnectionControllerNumber=batteryConnectionControllerNumber, alertEnclosureNormal=alertEnclosureNormal, previousStatusEvent=previousStatusEvent, fanConnectionFanNumber=fanConnectionFanNumber, agentGetTimeout=agentGetTimeout, controllerCheckConsistencyRate=controllerCheckConsistencyRate, alertStorageManagementInformation=alertStorageManagementInformation, enclosureSASAddress=enclosureSASAddress, alertEEMIArrayDiskInformation=alertEEMIArrayDiskInformation, alertChannelInformation=alertChannelInformation, agentVersion=agentVersion, fluidCacheDiskState=fluidCacheDiskState, alertEEMIFluidCachePoolInformation=alertEEMIFluidCachePoolInformation, batteryConnectionControllerName=batteryConnectionControllerName, channelNumber=channelNumber, alertFluidCacheDisklFailure=alertFluidCacheDisklFailure, alertEEMIBatteryInformation=alertEEMIBatteryInformation, alertBatteryNonRecoverable=alertBatteryNonRecoverable, enclosureTable=enclosureTable, arrayDiskAltaVendorId=arrayDiskAltaVendorId)
mibBuilder.exportSymbols("StorageManagement-MIB", powerSupplyName=powerSupplyName, enclosureKernelVersion=enclosureKernelVersion, fluidCachePoolNumber=fluidCachePoolNumber, fluidCachePoolUUID=fluidCachePoolUUID, fanSeverity=fanSeverity, channelComponentStatus=channelComponentStatus, virtualDiskComponentStatus=virtualDiskComponentStatus, temperatureProbeMaxCritical=temperatureProbeMaxCritical, alertFanInformation=alertFanInformation, alertEEMIEMMWarning=alertEEMIEMMWarning, alertVirtualDiskFailure=alertVirtualDiskFailure, fanProbeMaxCritical=fanProbeMaxCritical, fanConnectionEnclosureNumber=fanConnectionEnclosureNumber, fluidCacheLicenseFeatureDescription=fluidCacheLicenseFeatureDescription, controllerStorportDriverVersion=controllerStorportDriverVersion, storageManagementInfo=storageManagementInfo, softwareManufacturer=softwareManufacturer, powerSupplyConnectionEnclosureNumber=powerSupplyConnectionEnclosureNumber, alertEEMIFanNonRecoverable=alertEEMIFanNonRecoverable, virtualDiskCachePolicy=virtualDiskCachePolicy, alertBatteryInformation=alertBatteryInformation, fluidCacheDiskNumber=fluidCacheDiskNumber, temperatureProbeComponentStatus=temperatureProbeComponentStatus, powerSupplyConnectionEnclosureName=powerSupplyConnectionEnclosureName, enclosureServiceTag=enclosureServiceTag, arrayDiskLogicalConnectionDiskName=arrayDiskLogicalConnectionDiskName, batteryConnectionNumber=batteryConnectionNumber, dell=dell, fanProbeMinCritical=fanProbeMinCritical, enclosureManagementModuleRollUpStatus=enclosureManagementModuleRollUpStatus, fluidCacheName=fluidCacheName, alertVirtualDiskPartitionFailure=alertVirtualDiskPartitionFailure, powerSupply2PartNumber=powerSupply2PartNumber, virtualDiskLengthInBytes=virtualDiskLengthInBytes, alertArrayDiskInformation=alertArrayDiskInformation, alertEnclosureWarning=alertEnclosureWarning, controllerPartnerStatus=controllerPartnerStatus, enclosureRollUpStatus=enclosureRollUpStatus, agentMibVersion=agentMibVersion, arrayDiskComponentStatus=arrayDiskComponentStatus, alertPowerSupplyInformation=alertPowerSupplyInformation, enclosureManagementModuleState=enclosureManagementModuleState, alertControllerNonRecoverable=alertControllerNonRecoverable, batteryComponentStatus=batteryComponentStatus, alertEEMIEnclosureNormal=alertEEMIEnclosureNormal, batteryState=batteryState, arrayDiskLogicalConnectionVirtualDiskNumber=arrayDiskLogicalConnectionVirtualDiskNumber, alertEEMIRedundancyNormal=alertEEMIRedundancyNormal, temperatureConnectionEnclosureName=temperatureConnectionEnclosureName, arrayDiskChannelConnectionArrayDiskName=arrayDiskChannelConnectionArrayDiskName, fluidCacheDiskBackendDeviceName=fluidCacheDiskBackendDeviceName, enclosureNexusID=enclosureNexusID, alertEEMIStorageManagementFailure=alertEEMIStorageManagementFailure, controllerC0Port0WWN=controllerC0Port0WWN, temperatureProbeUnit=temperatureProbeUnit, controllerC1Target=controllerC1Target, enclosureExpressServiceCode=enclosureExpressServiceCode, alertEEMIVirtualDiskInformation=alertEEMIVirtualDiskInformation, controllerC1OSController=controllerC1OSController, enclosureEntry=enclosureEntry, alertChannelWarning=alertChannelWarning, logicalDevices=logicalDevices, controllerClusterMode=controllerClusterMode, arrayDiskSerialNo=arrayDiskSerialNo, currentStatusEvent=currentStatusEvent, batteryConnectionBatteryName=batteryConnectionBatteryName, batteryTable=batteryTable, controllerSCSIInitiatorID=controllerSCSIInitiatorID, alertEEMIFanFailure=alertEEMIFanFailure, arrayDiskUsedSpaceInBytes=arrayDiskUsedSpaceInBytes, channelRollUpStatus=channelRollUpStatus, enclosureManagementModuleConnectionEnclosureNumber=enclosureManagementModuleConnectionEnclosureNumber, arrayDiskSASAddress=arrayDiskSASAddress, enclosureComponentStatus=enclosureComponentStatus, batteryConnectionEntry=batteryConnectionEntry, virtualDiskAssociatedFluidCacheStatus=virtualDiskAssociatedFluidCacheStatus, alertEEMIVirtualDiskWarning=alertEEMIVirtualDiskWarning, alertEEMITemperatureProbeInformation=alertEEMITemperatureProbeInformation, alertEEMIVirtualDiskPartitionInformation=alertEEMIVirtualDiskPartitionInformation, controllerConfiguredDrivesSpinUpTime=controllerConfiguredDrivesSpinUpTime, controllerMemorySizeInBytes=controllerMemorySizeInBytes, fluidCacheLicenseDuration=fluidCacheLicenseDuration, alertStorageManagementWarning=alertStorageManagementWarning, controllerDriverVersion=controllerDriverVersion, alertVirtualDiskInformation=alertVirtualDiskInformation, controllerReconstructRate=controllerReconstructRate, virtualDiskTable=virtualDiskTable, virtualDiskLengthInMB=virtualDiskLengthInMB, virtualDiskEncrypted=virtualDiskEncrypted, alertEEMIFluidCacheInformation=alertEEMIFluidCacheInformation, powerSupplyNexusID=powerSupplyNexusID, powerSupplyRevision=powerSupplyRevision, arrayDiskEnclosureConnectionControllerNumber=arrayDiskEnclosureConnectionControllerNumber, fluidCacheLicenseEntitlementID=fluidCacheLicenseEntitlementID, agentGlobalSystemStatus=agentGlobalSystemStatus, arrayDiskNexusID=arrayDiskNexusID, arrayDiskLifeRemaining=arrayDiskLifeRemaining, controllerSpinDownHotSpareDrives=controllerSpinDownHotSpareDrives, controllerPreservedCache=controllerPreservedCache, fluidCachePoolLicenseState=fluidCachePoolLicenseState, channelState=channelState, channelSeverity=channelSeverity, enclosurePartNumber=enclosurePartNumber, alertEEMITemperatureProbeNonRecoverable=alertEEMITemperatureProbeNonRecoverable, alertEEMIFanInformation=alertEEMIFanInformation, arrayDiskMediaType=arrayDiskMediaType, arrayDiskChannelConnectionControllerNumber=arrayDiskChannelConnectionControllerNumber, fanState=fanState, enclosureManagementModuleTable=enclosureManagementModuleTable, arrayDiskChannelConnectionNumber=arrayDiskChannelConnectionNumber, arrayDiskMaxLinkWidth=arrayDiskMaxLinkWidth, alertVirtualDiskNonRecoverable=alertVirtualDiskNonRecoverable, alertFluidCachePoolFailure=alertFluidCachePoolFailure, enclosureManagementModuleNexusID=enclosureManagementModuleNexusID, controllerComponentStatus=controllerComponentStatus, alertEEMIPowerSupplyInformation=alertEEMIPowerSupplyInformation, controllerC0OSController=controllerC0OSController, enclosureManagementModulePartNumber=enclosureManagementModulePartNumber, alertEEMIFluidCachePoolFailure=alertEEMIFluidCachePoolFailure, alertVirtualDiskPartitionInformation=alertVirtualDiskPartitionInformation, alertEEMIRedundancyDegraded=alertEEMIRedundancyDegraded, enclosureManagementModuleSeverity=enclosureManagementModuleSeverity, arrayDiskLunID=arrayDiskLunID, locationEvent=locationEvent, alertEEMIStorageManagementWarning=alertEEMIStorageManagementWarning, alertEEMIControllerInformation=alertEEMIControllerInformation, temperatureProbeMinWarning=temperatureProbeMinWarning, enclosureID=enclosureID, controllerPhysicalDeviceCount=controllerPhysicalDeviceCount, tapeDriveNumber=tapeDriveNumber, virtualDiskDeviceName=virtualDiskDeviceName, alertEEMIVirtualDiskPartitionWarning=alertEEMIVirtualDiskPartitionWarning, arrayDiskChannel=arrayDiskChannel, temperatureProbeNumber=temperatureProbeNumber, arrayDiskLogicalConnectionArrayDiskName=arrayDiskLogicalConnectionArrayDiskName, fluidCacheLicenseProductId=fluidCacheLicenseProductId, alertEEMIArrayDiskNormal=alertEEMIArrayDiskNormal, temperatureConnectionNumber=temperatureConnectionNumber, fluidCacheTable=fluidCacheTable, virtualDiskReadPolicy=virtualDiskReadPolicy, controllerAutomaticPowerSaving=controllerAutomaticPowerSaving, arrayDiskLogicalConnectionArrayDiskNumber=arrayDiskLogicalConnectionArrayDiskNumber, arrayDiskModelNumber=arrayDiskModelNumber, alertEEMIBatteryNonRecoverable=alertEEMIBatteryNonRecoverable, temperatureProbeVendor=temperatureProbeVendor, controllerMemorySizeInMB=controllerMemorySizeInMB, channelSCSIID=channelSCSIID, virtualDiskEntry=virtualDiskEntry, alertEEMIEMMFailure=alertEEMIEMMFailure, enclosureSCSIRate=enclosureSCSIRate, controllerNodeWWN=controllerNodeWWN, fanConnectionNumber=fanConnectionNumber, enclosureManagementModuleConnectionEMMNumber=enclosureManagementModuleConnectionEMMNumber, controllerEncryptionMode=controllerEncryptionMode, fluidCacheLicenseDateSold=fluidCacheLicenseDateSold, arrayDiskChannelConnectionArrayDiskNumber=arrayDiskChannelConnectionArrayDiskNumber, channelBusType=channelBusType, batteryVendor=batteryVendor, enclosureSeverity=enclosureSeverity, fluidCachePoolTable=fluidCachePoolTable, fluidCacheNumber=fluidCacheNumber, arrayDiskManufactureWeek=arrayDiskManufactureWeek, arrayDiskState=arrayDiskState, enclosureConfig=enclosureConfig, enclosureManagementModuleMaxSpeed=enclosureManagementModuleMaxSpeed, enhancedMessageIDEvent=enhancedMessageIDEvent, alertEMMInformation=alertEMMInformation, enclosureProcessorVersion=enclosureProcessorVersion, controllerPCISlot=controllerPCISlot, batteryName=batteryName, tapeDriveNexusID=tapeDriveNexusID, alertEEMIVirtualDiskNormal=alertEEMIVirtualDiskNormal, fanEntry=fanEntry, powerSupplyConnectionPowersupplyName=powerSupplyConnectionPowersupplyName, controllerPatrolReadRate=controllerPatrolReadRate, batteryLearnState=batteryLearnState, softwareDescription=softwareDescription, fan1PartNumber=fan1PartNumber, enclosureManagementModuleConnectionTable=enclosureManagementModuleConnectionTable, alertEEMIPowerSupplyNonRecoverable=alertEEMIPowerSupplyNonRecoverable, alertEEMIVirtualDiskPartitionFailure=alertEEMIVirtualDiskPartitionFailure, arrayDiskAltaRevisionId=arrayDiskAltaRevisionId, powerSupplyEntry=powerSupplyEntry, controllerHostPortCount=controllerHostPortCount, controllerC0Port0Name=controllerC0Port0Name, temperatureProbeRollUpStatus=temperatureProbeRollUpStatus, alertControllerNormal=alertControllerNormal, enclosureSCSIID=enclosureSCSIID, arrayDiskRemainingRatedWriteEndurance=arrayDiskRemainingRatedWriteEndurance, controllerC1Port0WWN=controllerC1Port0WWN, fanProbeMinWarning=fanProbeMinWarning, alertEEMIControllerNormal=alertEEMIControllerNormal, agentSoftwareStatus=agentSoftwareStatus, alertfluidCacheWarning=alertfluidCacheWarning, enclosureFirmwareVersion=enclosureFirmwareVersion, alertEEMIArrayDiskNonRecoverable=alertEEMIArrayDiskNonRecoverable, virtualDiskDiskCachePolicy=virtualDiskDiskCachePolicy, alertEEMIControllerFailure=alertEEMIControllerFailure, tapeDriveEntry=tapeDriveEntry, fluidCacheDiskTable=fluidCacheDiskTable, powerSupplyConnectionNumber=powerSupplyConnectionNumber, arrayDiskEncryptionCapable=arrayDiskEncryptionCapable, controllerCacheSizeInBytes=controllerCacheSizeInBytes, powerSupplyRollUpStatus=powerSupplyRollUpStatus, fluidCacheEntry=fluidCacheEntry, agentRefreshRate=agentRefreshRate, storage=storage, batteryRollUpStatus=batteryRollUpStatus, alertArrayDiskWarning=alertArrayDiskWarning, agentIPAddress=agentIPAddress, agentLastGlobalSystemStatus=agentLastGlobalSystemStatus, alertEEMIChannelWarning=alertEEMIChannelWarning, controllerSpinDownConfiguredDrives=controllerSpinDownConfiguredDrives, fanRollUpStatus=fanRollUpStatus, controllerRebuildRateInPercent=controllerRebuildRateInPercent, tapeDriveProductID=tapeDriveProductID, alertEEMIStorageManagementNonRecoverable=alertEEMIStorageManagementNonRecoverable, arrayDiskCapableSpeed=arrayDiskCapableSpeed, tapeDriveTable=tapeDriveTable, arrayDiskEntry=arrayDiskEntry, alertChannelNonRecoverable=alertChannelNonRecoverable, enclosureESM1PartNumber=enclosureESM1PartNumber, controllerPatrolReadMode=controllerPatrolReadMode, alertStorageManagementFailure=alertStorageManagementFailure, enclosureManagementModuleConnectionEntry=enclosureManagementModuleConnectionEntry, fluidCachePoolEntry=fluidCachePoolEntry, alertEEMITemperatureProbeFailure=alertEEMITemperatureProbeFailure, virtualDiskPartitionFluidCacheStatus=virtualDiskPartitionFluidCacheStatus, fanNexusID=fanNexusID, alertEEMIfluidCacheWarning=alertEEMIfluidCacheWarning, virtualDiskName=virtualDiskName, softwareVersion=softwareVersion, arrayDiskChannelConnectionControllerName=arrayDiskChannelConnectionControllerName, temperatureProbeEntry=temperatureProbeEntry, alertEEMIBatteryFailure=alertEEMIBatteryFailure, controllerC0Channel=controllerC0Channel, fanProbeMaxWarning=fanProbeMaxWarning, alertFanFailure=alertFanFailure, enclosureManagementModuleFWVersion=enclosureManagementModuleFWVersion, arrayDiskChannelConnectionChannelName=arrayDiskChannelConnectionChannelName, arrayDiskNumber=arrayDiskNumber, chassisServiceTagEvent=chassisServiceTagEvent, arrayDiskTargetID=arrayDiskTargetID, virtualDiskFreeSpaceInBytes=virtualDiskFreeSpaceInBytes, enclosureVendor=enclosureVendor, arrayDiskChannelConnectionEntry=arrayDiskChannelConnectionEntry, arrayDiskDriverVersion=arrayDiskDriverVersion, fluidCacheDiskStatus=fluidCacheDiskStatus, arrayDiskName=arrayDiskName, alertEMMEMMInformation=alertEMMEMMInformation, alertEnclosureNonRecoverable=alertEnclosureNonRecoverable, temperatureProbeMinCritical=temperatureProbeMinCritical, channelNexusID=channelNexusID, powerSupplyVendor=powerSupplyVendor)
mibBuilder.exportSymbols("StorageManagement-MIB", fluidCacheDiskConfiguredMode=fluidCacheDiskConfiguredMode, powerSupplyState=powerSupplyState, agentLastGlobalStatus=agentLastGlobalStatus, alertEEMIVirtualDiskFailure=alertEEMIVirtualDiskFailure, enclosureESM2PartNumber=enclosureESM2PartNumber, alertEEMIControllerWarning=alertEEMIControllerWarning, controllerMinRequiredStorportVer=controllerMinRequiredStorportVer, objectNameEvent=objectNameEvent, arrayDiskChannelConnectionTable=arrayDiskChannelConnectionTable, alertPowerSupplyWarning=alertPowerSupplyWarning, virtualDiskArrayDiskType=virtualDiskArrayDiskType, serviceTagEvent=serviceTagEvent, arrayDiskReadOnly=arrayDiskReadOnly, alertArrayDiskFailure=alertArrayDiskFailure, arrayDiskEnclosureConnectionEnclosureNumber=arrayDiskEnclosureConnectionEnclosureNumber, controllerMinDriverVersion=controllerMinDriverVersion, fanConnectionTable=fanConnectionTable, enclosureTotalSlots=enclosureTotalSlots, fluidCacheLicenseFeatureID=fluidCacheLicenseFeatureID, arrayDiskEncrypted=arrayDiskEncrypted, virtualDiskWritePolicy=virtualDiskWritePolicy, virtualDiskChannel=virtualDiskChannel, description=description, globalStatus=globalStatus, arrayDiskPartNumber=arrayDiskPartNumber, tapeDriveMediaType=tapeDriveMediaType, fanProbeUnit=fanProbeUnit, alertEnclosureInformation=alertEnclosureInformation, alertFluidCacheFailure=alertFluidCacheFailure, alertEEMIfluidCacheDiskWarning=alertEEMIfluidCacheDiskWarning, arrayDiskEnclosureConnectionNumber=arrayDiskEnclosureConnectionNumber, controllerCacheSizeInMB=controllerCacheSizeInMB, controllerPIEnable=controllerPIEnable, alertFanNonRecoverable=alertFanNonRecoverable, arrayDiskEnclosureConnectionArrayDiskNumber=arrayDiskEnclosureConnectionArrayDiskNumber, alertArrayDiskNonRecoverable=alertArrayDiskNonRecoverable, fanNumber=fanNumber, controllerSpinDownUnconfiguredDrives=controllerSpinDownUnconfiguredDrives, agentModifiers=agentModifiers, enclosureManagementModuleComponentStatus=enclosureManagementModuleComponentStatus, arrayDiskLargestContiguousFreeSpaceInMB=arrayDiskLargestContiguousFreeSpaceInMB, storageManagement=storageManagement, virtualDiskCurStripeSizeInBytes=virtualDiskCurStripeSizeInBytes, alertEEMIEnclosureInformation=alertEEMIEnclosureInformation, alertEMMWarning=alertEMMWarning, enclosureManagementModuleEntry=enclosureManagementModuleEntry, arrayDiskLogicalConnectionVirtualDiskName=arrayDiskLogicalConnectionVirtualDiskName, fluidCacheLicenseCapacity=fluidCacheLicenseCapacity, arrayDiskEnclosureID=arrayDiskEnclosureID, arrayDiskLogicalConnectionTable=arrayDiskLogicalConnectionTable, virtualDiskBadBlocksDetected=virtualDiskBadBlocksDetected, controllerMinFWVersion=controllerMinFWVersion, agentTimeStamp=agentTimeStamp, arrayDiskDriveWriteCache=arrayDiskDriveWriteCache, arrayDiskEnclosureConnectionEnclosureName=arrayDiskEnclosureConnectionEnclosureName, alertEEMIBatteryWarning=alertEEMIBatteryWarning, virtualDiskSeverity=virtualDiskSeverity, arrayDiskAltaProductId=arrayDiskAltaProductId, alertControllerInformation=alertControllerInformation, virtualDiskTargetID=virtualDiskTargetID, arrayDiskDeviceLifeStatus=arrayDiskDeviceLifeStatus, alertChannelFailure=alertChannelFailure, arrayDiskManufactureYear=arrayDiskManufactureYear, controllerBatteryChargeCount=controllerBatteryChargeCount, controllerPatrolReadState=controllerPatrolReadState, fluidCacheDiskEntry=fluidCacheDiskEntry, powerSupplyNumber=powerSupplyNumber, arrayDiskSpareState=arrayDiskSpareState, temperatureConnectionTemperatureName=temperatureConnectionTemperatureName, alertEEMIChannelFailure=alertEEMIChannelFailure, fan2PartNumber=fan2PartNumber, controllerC0Port1WWN=controllerC0Port1WWN, arrayDiskProductID=arrayDiskProductID, alertEEMIBatteryNormal=alertEEMIBatteryNormal, arrayDiskLargestContiguousFreeSpaceInBytes=arrayDiskLargestContiguousFreeSpaceInBytes, controllerFaultTolerant=controllerFaultTolerant, enclosureManagementModuleType=enclosureManagementModuleType, enclosureEmptySlotCount=enclosureEmptySlotCount, enclosureAssetTag=enclosureAssetTag, alertEEMIStorageManagementInformation=alertEEMIStorageManagementInformation, arrayDiskPICapable=arrayDiskPICapable, alertArrayDiskNormal=alertArrayDiskNormal, alertTemperatureProbeInformation=alertTemperatureProbeInformation, enclosureChannelNumber=enclosureChannelNumber, controllerC1Port0Name=controllerC1Port0Name)
