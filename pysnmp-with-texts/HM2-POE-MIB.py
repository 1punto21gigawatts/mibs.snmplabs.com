#
# PySNMP MIB module HM2-POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-POE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hm2IfacePhysIndex, = mibBuilder.importSymbols("HM2-DEVMGMT-MIB", "hm2IfacePhysIndex")
HmTimeHHMM24, hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "HmTimeHHMM24", "hm2ConfigurationMibs", "HmEnabledStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, Unsigned32, Integer32, TimeTicks, ObjectIdentity, Counter32, Counter64, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Unsigned32", "Integer32", "TimeTicks", "ObjectIdentity", "Counter32", "Counter64", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hm2PoeMgmtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 12))
hm2PoeMgmtMib.setRevisions(('2011-10-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PoeMgmtMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PoeMgmtMib.setLastUpdated('201110310000Z')
if mibBuilder.loadTexts: hm2PoeMgmtMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PoeMgmtMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PoeMgmtMib.setDescription('Hirschmann Power over Ethernet Management MIB. This MIB contains the private extensions to the RFC 3621. Copyright (C) 2011. All Rights Reserved.')
hm2PoeMgmtMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 12, 0))
hm2PoeMgmtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 12, 1))
hm2PoeMgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1))
hm2PoeMgmtGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 1))
hm2PoeMgmtAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtAdminStatus.setDescription('Enables/disables Power over Ethernet management on this device.')
hm2PoeMgmtReservedPower = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtReservedPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtReservedPower.setDescription('Reserved system power for active Power over Ethernet ports in Watts.')
hm2PoeMgmtPsuTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 2), )
if mibBuilder.loadTexts: hm2PoeMgmtPsuTable.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPsuTable.setDescription('This table contains objects for each power supply type of the device (internal or external power supply).')
hm2PoeMgmtPsuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 2, 1), ).setIndexNames((0, "HM2-POE-MIB", "hm2PoeMgmtModulePowerSource"))
if mibBuilder.loadTexts: hm2PoeMgmtPsuEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPsuEntry.setDescription('The entries of the hm2PoeMgmtPsuTable.')
hm2PoeMgmtPsuPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPsuPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPsuPower.setDescription('The power budget per psu type expressed in Watts. Psu types could be internal or external.')
hm2PoeMgmtPsuReservedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPsuReservedPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPsuReservedPower.setDescription('The reserved power (depending on actual power classes) per psu type expressed in Watts.')
hm2PoeMgmtPsuDeliveredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPsuDeliveredPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPsuDeliveredPower.setDescription('The measured usage power per psu type expressed in Watts.')
hm2PoeMgmtPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3), )
if mibBuilder.loadTexts: hm2PoeMgmtPortTable.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortTable.setDescription('This table contains objects for each Power over Ethernet interface of the device.')
hm2PoeMgmtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2IfacePhysIndex"))
if mibBuilder.loadTexts: hm2PoeMgmtPortEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortEntry.setDescription('The entry of the hm2PoeMgmtPortTable.')
hm2PoeMgmtPortAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortAdminEnable.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortAdminEnable.setDescription('enable (1) An interface which can provide the PSE functions. disable(2) The interface will act - as it would - if it had no PSE function.')
hm2PoeMgmtPortConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPortConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortConsumptionPower.setDescription('Measured usage power per interface expressed in Milliwatts.')
hm2PoeMgmtPortDetectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("deliveringPower", 3), ("fault", 4), ("test", 5), ("otherFault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPortDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortDetectionStatus.setDescription('Describes the operational status of the port PD detection. A value of disabled(1)- indicates that the PSE State diagram is in the state DISABLED. A value of deliveringPower(3) - indicates that the PSE State diagram is in the state POWER_ON. A value of fault(4) - indicates that the PSE State diagram is in the state TEST_ERROR. A value of test(5) - indicates that the PSE State diagram is in the state TEST_MODE. A value of otherFault(6) - indicates that the PSE State diagram is in the state IDLE due to the variable error_conditions. A value of searching(2)- indicates the PSE State diagram is in a state other than those listed above.')
hm2PoeMgmtPortPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortPowerPriority.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortPowerPriority.setDescription('This object controls the priority of the port from the point of view of a power management algorithm. The priority that is set by this variable could be used by a control mechanism that prevents over current situations by disconnecting first ports with lower power priority. Ports that connect devices critical to the operation of the network - like the E911 telephones ports - should be set to higher priority.')
hm2PoeMgmtPortPowerClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5))).clone('class0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPortPowerClassification.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortPowerClassification.setDescription('Classification is a way to tag different terminals on the Power over LAN network according to their power consumption. Devices such as IP telephones, WLAN access points and others, will be classified according to their power requirements. The meaning of the classification labels is defined in the IEEE specification. This variable is valid only while a PD is being powered, that is, while the attribute hm2PoeMgmtPortDetectionStatus is reporting the enumeration deliveringPower.')
hm2PoeMgmtPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone(' ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortName.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortName.setDescription('A manager will set the value of this variable to indicate the type of powered device that is connected to the port. The default value supplied by the agent if no value has ever been set should be a zero-length octet string.')
hm2PoeMgmtPortAllowedClassBits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 7), Bits().clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortAllowedClassBits.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortAllowedClassBits.setDescription('Bit mask which defines allowed classes per interface.')
hm2PoeMgmtPortAutoShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 8), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortAutoShutdown.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortAutoShutdown.setDescription('Enables/disables automatic shutdown functionality per interface.')
hm2PoeMgmtPortAutoShutdownTimeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 9), HmTimeHHMM24().clone('00:00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortAutoShutdownTimeStart.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortAutoShutdownTimeStart.setDescription('Start time for the automatic shutdown functionality per interface.')
hm2PoeMgmtPortAutoShutdownTimeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 10), HmTimeHHMM24().clone('00:00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortAutoShutdownTimeEnd.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortAutoShutdownTimeEnd.setDescription('End time for the automatic shutdown functionality per interface.')
hm2PoeMgmtPortClassValid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPortClassValid.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortClassValid.setDescription('Evaluates if class represented through pethPsePortPowerClassifications is valid or not. Class is valid if PD is delivered with power or in case of power exceeding through a connected device.')
hm2PoeMgmtPortFastStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortFastStartup.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortFastStartup.setDescription("Enables/disables Power over Ethernet fast startup mode on given port. The default value is 'disable'.")
hm2PoeMgmtPortMaxConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtPortMaxConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortMaxConsumptionPower.setDescription('The maximum observed power consumption (hm2PoeMgmtPortMaxConsumptionPower) value expressed in milliwatts used by the PD. The value is reset to 0 if the PoE admin state is set to disable or if a disconnect of the PD is detected.')
hm2PoeMgmtPortPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtPortPowerLimit.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortPowerLimit.setDescription('The power limit per port expressed in milliwatts. If set to zero the power consumption limitation is disabled.')
hm2PoeMgmtModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4), )
if mibBuilder.loadTexts: hm2PoeMgmtModuleTable.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleTable.setDescription('This table contains objects for each plugged PoE module of the device. If the device is non-modular and supports PoE it contains only one entry.')
hm2PoeMgmtModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1), ).setIndexNames((0, "HM2-POE-MIB", "hm2PoeMgmtModuleUnitIndex"), (0, "HM2-POE-MIB", "hm2PoeMgmtModuleSlotIndex"))
if mibBuilder.loadTexts: hm2PoeMgmtModuleEntry.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleEntry.setDescription('The entries of the hm2PoeMgmtModuleTable.')
hm2PoeMgmtModuleUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2PoeMgmtModuleUnitIndex.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleUnitIndex.setDescription('Unit number - for stacking devices.')
hm2PoeMgmtModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: hm2PoeMgmtModuleSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleSlotIndex.setDescription('Slot number of the plugged PoE module.')
hm2PoeMgmtModulePower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtModulePower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModulePower.setDescription('Configurable power budget per module expressed in Watts. The default value is hm2PoeMgmtModuleMaximumPower and depends on the hardware.')
hm2PoeMgmtModuleMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtModuleMaximumPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleMaximumPower.setDescription('Maximum available power budget per module expressed in Watts. This value depends on the device or module.')
hm2PoeMgmtModuleReservedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtModuleReservedPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleReservedPower.setDescription('The reserved power (depending on actual power classes) per module expressed in Watts.')
hm2PoeMgmtModuleDeliveredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtModuleDeliveredPower.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleDeliveredPower.setDescription('The measured usage power per module expressed in Watts.')
hm2PoeMgmtModulePowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("external", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PoeMgmtModulePowerSource.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModulePowerSource.setDescription('This object displays the type of the PoE power source. internal (0) means that the PoE power is used from the internal PSU and external (1) means that a external PoE PSU must be installed and connected to this module.')
hm2PoeMgmtModuleUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtModuleUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleUsageThreshold.setDescription('The usage power threshold per module expressed in percent. If this threshold is exceeded a alarm is initiated.')
hm2PoeMgmtModuleNotificationControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 12, 1, 1, 4, 1, 9), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PoeMgmtModuleNotificationControlEnable.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModuleNotificationControlEnable.setDescription('This object controls, on a per-module basis, whether or not notifications from the agent are enabled. ')
hm2PoeMgmtModulePowerUsageOnNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 12, 0, 1)).setObjects(("HM2-POE-MIB", "hm2PoeMgmtModuleDeliveredPower"))
if mibBuilder.loadTexts: hm2PoeMgmtModulePowerUsageOnNotification.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModulePowerUsageOnNotification.setDescription('This Notification indicate PSE Threshold usage indication is on, the usage power is above the threshold. At least 500 msec must elapse between notifications being emitted by the same object instance.')
hm2PoeMgmtModulePowerUsageOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 12, 0, 2)).setObjects(("HM2-POE-MIB", "hm2PoeMgmtModuleDeliveredPower"))
if mibBuilder.loadTexts: hm2PoeMgmtModulePowerUsageOffNotification.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtModulePowerUsageOffNotification.setDescription('This Notification indicate PSE Threshold usage indication is on, the usage power is below the threshold. At least 500 msec must elapse between notifications being emitted by the same object instance.')
hm2PoeMgmtPortMaxConfiguredPowerLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 12, 0, 3)).setObjects(("HM2-DEVMGMT-MIB", "hm2IfacePhysIndex"), ("HM2-POE-MIB", "hm2PoeMgmtPortMaxConsumptionPower"), ("HM2-POE-MIB", "hm2PoeMgmtPortPowerLimit"))
if mibBuilder.loadTexts: hm2PoeMgmtPortMaxConfiguredPowerLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: hm2PoeMgmtPortMaxConfiguredPowerLimitExceeded.setDescription('This trap reports an exceeding of the configured power limit. This notification indicates that a PD consumes more power that the maximum configured on the port and the system reserved the maximum power required for the negotiated class.')
mibBuilder.exportSymbols("HM2-POE-MIB", hm2PoeMgmtPortAutoShutdownTimeStart=hm2PoeMgmtPortAutoShutdownTimeStart, hm2PoeMgmtPortAutoShutdownTimeEnd=hm2PoeMgmtPortAutoShutdownTimeEnd, hm2PoeMgmtPortEntry=hm2PoeMgmtPortEntry, hm2PoeMgmtModuleEntry=hm2PoeMgmtModuleEntry, hm2PoeMgmtPsuTable=hm2PoeMgmtPsuTable, hm2PoeMgmtPortAutoShutdown=hm2PoeMgmtPortAutoShutdown, hm2PoeMgmtReservedPower=hm2PoeMgmtReservedPower, hm2PoeMgmtPortDetectionStatus=hm2PoeMgmtPortDetectionStatus, hm2PoeMgmtMibObjects=hm2PoeMgmtMibObjects, hm2PoeMgmtModuleUnitIndex=hm2PoeMgmtModuleUnitIndex, hm2PoeMgmtMib=hm2PoeMgmtMib, hm2PoeMgmtPortClassValid=hm2PoeMgmtPortClassValid, hm2PoeMgmtPortPowerLimit=hm2PoeMgmtPortPowerLimit, hm2PoeMgmtGlobalGroup=hm2PoeMgmtGlobalGroup, hm2PoeMgmtPortFastStartup=hm2PoeMgmtPortFastStartup, hm2PoeMgmtModulePowerUsageOffNotification=hm2PoeMgmtModulePowerUsageOffNotification, hm2PoeMgmtGroup=hm2PoeMgmtGroup, hm2PoeMgmtAdminStatus=hm2PoeMgmtAdminStatus, hm2PoeMgmtModuleNotificationControlEnable=hm2PoeMgmtModuleNotificationControlEnable, hm2PoeMgmtModulePower=hm2PoeMgmtModulePower, hm2PoeMgmtPsuDeliveredPower=hm2PoeMgmtPsuDeliveredPower, hm2PoeMgmtModuleDeliveredPower=hm2PoeMgmtModuleDeliveredPower, hm2PoeMgmtPortConsumptionPower=hm2PoeMgmtPortConsumptionPower, hm2PoeMgmtModulePowerSource=hm2PoeMgmtModulePowerSource, PYSNMP_MODULE_ID=hm2PoeMgmtMib, hm2PoeMgmtPsuReservedPower=hm2PoeMgmtPsuReservedPower, hm2PoeMgmtPortAllowedClassBits=hm2PoeMgmtPortAllowedClassBits, hm2PoeMgmtPortAdminEnable=hm2PoeMgmtPortAdminEnable, hm2PoeMgmtPortPowerClassification=hm2PoeMgmtPortPowerClassification, hm2PoeMgmtModuleMaximumPower=hm2PoeMgmtModuleMaximumPower, hm2PoeMgmtModuleTable=hm2PoeMgmtModuleTable, hm2PoeMgmtModuleUsageThreshold=hm2PoeMgmtModuleUsageThreshold, hm2PoeMgmtModuleReservedPower=hm2PoeMgmtModuleReservedPower, hm2PoeMgmtPortTable=hm2PoeMgmtPortTable, hm2PoeMgmtModuleSlotIndex=hm2PoeMgmtModuleSlotIndex, hm2PoeMgmtPsuEntry=hm2PoeMgmtPsuEntry, hm2PoeMgmtModulePowerUsageOnNotification=hm2PoeMgmtModulePowerUsageOnNotification, hm2PoeMgmtMibNotifications=hm2PoeMgmtMibNotifications, hm2PoeMgmtPortPowerPriority=hm2PoeMgmtPortPowerPriority, hm2PoeMgmtPortName=hm2PoeMgmtPortName, hm2PoeMgmtPortMaxConfiguredPowerLimitExceeded=hm2PoeMgmtPortMaxConfiguredPowerLimitExceeded, hm2PoeMgmtPsuPower=hm2PoeMgmtPsuPower, hm2PoeMgmtPortMaxConsumptionPower=hm2PoeMgmtPortMaxConsumptionPower)
