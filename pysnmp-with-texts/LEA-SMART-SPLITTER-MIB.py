#
# PySNMP MIB module LEA-SMART-SPLITTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEA-SMART-SPLITTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
leaSplitters, = mibBuilder.importSymbols("LEA-MIB", "leaSplitters")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Counter64, TimeTicks, ObjectIdentity, Unsigned32, iso, MibIdentifier, IpAddress, Bits, ModuleIdentity, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Counter64", "TimeTicks", "ObjectIdentity", "Unsigned32", "iso", "MibIdentifier", "IpAddress", "Bits", "ModuleIdentity", "Gauge32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
leaSmartSplitter = ModuleIdentity((1, 3, 6, 1, 4, 1, 14841, 1, 1))
leaSmartSplitter.setRevisions(('2002-09-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: leaSmartSplitter.setRevisionsDescriptions(('Beta 1',))
if mibBuilder.loadTexts: leaSmartSplitter.setLastUpdated('200210040000Z')
if mibBuilder.loadTexts: leaSmartSplitter.setOrganization('www.leacom.fr')
if mibBuilder.loadTexts: leaSmartSplitter.setContactInfo('postal: Regis Urvoy 52/54 rue du capitaine Guynemer 92415 Courbevoie Cedex France email: regis.urvoy@leacom.fr')
if mibBuilder.loadTexts: leaSmartSplitter.setDescription('LEA Smart Splitter Management Information Base')
splitterRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1))
relayActiveDuration = MibScalar((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayActiveDuration.setStatus('current')
if mibBuilder.loadTexts: relayActiveDuration.setDescription('Duration that a bypass relay is active in seconds. As a fail-safe mechanism, the relay will automatically return a line back to normal operational mode when this timer has expired. The same relay timer value will be used for every port.')
numberOfActiveRelays = MibScalar((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfActiveRelays.setStatus('current')
if mibBuilder.loadTexts: numberOfActiveRelays.setDescription('Total count of active relays. The agent controls the number of active relays so that the maximum is not exceeded in order to keep power consumption down.')
heartBeat = MibScalar((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: heartBeat.setStatus('current')
if mibBuilder.loadTexts: heartBeat.setDescription('This parameter returns a simply acknowledge following a request from the manager. ')
relayTable = MibTable((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 4), )
if mibBuilder.loadTexts: relayTable.setStatus('current')
if mibBuilder.loadTexts: relayTable.setDescription('Table of relay status')
relayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 4, 1), ).setIndexNames((0, "LEA-SMART-SPLITTER-MIB", "relayIndex"))
if mibBuilder.loadTexts: relayTableEntry.setStatus('current')
if mibBuilder.loadTexts: relayTableEntry.setDescription('A row describing a relay status')
relayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: relayIndex.setStatus('current')
if mibBuilder.loadTexts: relayIndex.setDescription('The index of the table. Its value is (relaySlot-1)*24+relayPort')
relaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("Slot-1", 1), ("Slot-2", 2), ("Slot-3", 3), ("Slot-4", 4), ("Slot-5", 5), ("Slot-6", 6), ("Slot-7", 7), ("Slot-8", 8), ("Slot-9", 9), ("Slot-10", 10), ("Slot-11", 11), ("Slot-12", 12), ("Slot-13", 13), ("Slot-14", 14), ("Slot-15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaySlot.setStatus('current')
if mibBuilder.loadTexts: relaySlot.setDescription('The slot being addressed')
relayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("Port-1", 1), ("Port-2", 2), ("Port-3", 3), ("Port-4", 4), ("Port-5", 5), ("Port-6", 6), ("Port-7", 7), ("Port-8", 8), ("Port-9", 9), ("Port-10", 10), ("Port-11", 11), ("Port-12", 12), ("Port-13", 13), ("Port-14", 14), ("Port-15", 15), ("Port-16", 16), ("Port-17", 17), ("Port-18", 18), ("Port-19", 19), ("Port-20", 20), ("Port-21", 21), ("Port-22", 22), ("Port-23", 23), ("Port-24", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayPort.setStatus('current')
if mibBuilder.loadTexts: relayPort.setDescription('The port being addressed')
relayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("closed", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayStatus.setStatus('current')
if mibBuilder.loadTexts: relayStatus.setDescription('This parameter describes whether a particular POTS line is in a normal or closed loop condition. By setting this parameter, the manager can switch the relays in order to bypass the LPF (Low Pass Filter) for POTS closed loop testing (closed) or force a relay back to normal operation mode before the Relay Active Duration timer times out (normal)')
relayResetAll = MibScalar((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unchanged", 1), ("reset", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayResetAll.setStatus('current')
if mibBuilder.loadTexts: relayResetAll.setDescription('This parameter would allow the operator to force a relay back to normal operation for all ports.')
relayChangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 14841, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: relayChangeNotification.setStatus('current')
if mibBuilder.loadTexts: relayChangeNotification.setDescription('This notification is sent to the manager after a line status (or relay) change. It takes three parameters : the slot (relaySlot) and port (relayPort) of the line, and its new status (relayStatus)')
mibBuilder.exportSymbols("LEA-SMART-SPLITTER-MIB", relayIndex=relayIndex, relayTableEntry=relayTableEntry, heartBeat=heartBeat, relayTable=relayTable, leaSmartSplitter=leaSmartSplitter, relayResetAll=relayResetAll, relaySlot=relaySlot, splitterRelay=splitterRelay, relayChangeNotification=relayChangeNotification, relayActiveDuration=relayActiveDuration, relayPort=relayPort, numberOfActiveRelays=numberOfActiveRelays, PYSNMP_MODULE_ID=leaSmartSplitter, relayStatus=relayStatus)
