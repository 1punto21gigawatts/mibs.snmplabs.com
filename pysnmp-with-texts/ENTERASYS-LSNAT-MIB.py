#
# PySNMP MIB module ENTERASYS-LSNAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-LSNAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetPortNumber, InetAddressPrefixLength, InetAddress, InetVersion = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddressPrefixLength", "InetAddress", "InetVersion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Bits, ModuleIdentity, TimeTicks, MibIdentifier, Counter64, IpAddress, NotificationType, Gauge32, ObjectIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Counter64", "IpAddress", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DateAndTime, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "RowStatus", "TruthValue")
etsysLsnatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74))
etsysLsnatMIB.setRevisions(('2010-06-01 14:40',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysLsnatMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: etsysLsnatMIB.setLastUpdated('201006011440Z')
if mibBuilder.loadTexts: etsysLsnatMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysLsnatMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysLsnatMIB.setDescription('The Enterasys Networks Proprietary MIB module for entities implementing LSNAT.')
etsysLsnatGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1))
etsysLsnatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1))
etsysLsnatGlobalIpv4Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 2))
etsysLsnatTables = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2))
etsysLsnatConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3))
etsysLsnatStatsRealsUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsRealsUsed.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsRealsUsed.setDescription('This object contains the number of Real servers currently configured.')
etsysLsnatStatsServerfarmsUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsServerfarmsUsed.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsServerfarmsUsed.setDescription('This object contains the number of Server farms currently configured.')
etsysLsnatStatsVserversUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsVserversUsed.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsVserversUsed.setDescription('This object contains the number of Virtual servers currently configured.')
etsysLsnatStatsVserversIPsUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsVserversIPsUsed.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsVserversIPsUsed.setDescription('This object contains the number of Virtual IP addresses currently configured.')
etsysLsnatStatsBindingsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsCurrent.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsCurrent.setDescription('This object contains the current number of active LSNAT bindings.')
etsysLsnatStatsBindingsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsHigh.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsHigh.setDescription('This object contains the highest number of active LSNAT bindings at one time.')
etsysLsnatStatsBindingsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsDeleted.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsDeleted.setDescription('This object contains the total number of LSNAT bindings that have been deleted.')
etsysLsnatStatsBindingsTotal = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsTotal.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsTotal.setDescription('This object contains the total number of LSNAT bindings created.')
etsysLsnatStatsBindingsExhausted = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsExhausted.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsExhausted.setDescription('This object contains the number of times a request to create a LSNAT binding failed because there were no available free entries.')
etsysLsnatStatsBindingsNoReals = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsNoReals.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsNoReals.setDescription('This object contains the number of times a request to create a LSNAT binding failed because there were no available Real servers to establish a binding.')
etsysLsnatStatsBindingsNoPortmapPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsNoPortmapPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsNoPortmapPort.setDescription('This object contains the number of times a request to create a LSNAT binding failed because there were no available Port Map Port entries to establish a binding.')
etsysLsnatStatsBindingsNoFtpALG = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsNoFtpALG.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsNoFtpALG.setDescription("This object contains the number of times a request to create a LSNAT binding failed because there were no available FTP ALG's to establish a binding.")
etsysLsnatStatsBindingsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsBindingsPerSecond.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsBindingsPerSecond.setDescription('This object contains the average number of LSNAT bindings created per second. Normalized for 5 seconds.')
etsysLsnatStatsVserverActive = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsVserverActive.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsVserverActive.setDescription('This object contains the number of active Virtual server entries.')
etsysLsnatStatsVserverHigh = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsVserverHigh.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsVserverHigh.setDescription('This object contains the highest number of active Virtual server entries at one time.')
etsysLsnatStatsServerfarmActive = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsServerfarmActive.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsServerfarmActive.setDescription('This object contains the number of active Server farm entries.')
etsysLsnatStatsServerfarmHigh = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsServerfarmHigh.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsServerfarmHigh.setDescription('This object contains the highest number of active Server farm entries at one time.')
etsysLsnatStatsRealActive = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsRealActive.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsRealActive.setDescription('This object contains the number of active Real server entries.')
etsysLsnatStatsRealHigh = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsRealHigh.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsRealHigh.setDescription('This object contains the highest number of active Real server entries at one time.')
etsysLsnatStatsStickyEntriesTotal = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsStickyEntriesTotal.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsStickyEntriesTotal.setDescription('This object contains the total number of LSNAT Sticky entries created.')
etsysLsnatStatsStickyBindingsStuckTotal = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsStickyBindingsStuckTotal.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsStickyBindingsStuckTotal.setDescription('This object contains the total number LSNAT stuck bindings since this counter was last cleared, see etsysLsnatStatsClear.')
etsysLsnatStatsStickyBindingsStuckCurrent = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsStickyBindingsStuckCurrent.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsStickyBindingsStuckCurrent.setDescription('This object contains the current number LSNAT stuck bindings.')
etsysLsnatStatsStickyActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsStickyActiveEntries.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsStickyActiveEntries.setDescription('This object contains the current number of active LSNAT Sticky entries.')
etsysLsnatStatsStickyActiveEntriesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsStickyActiveEntriesHigh.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsStickyActiveEntriesHigh.setDescription('This object contains the highest number of active LSNAT Sticky entries at one time.')
etsysLsnatStatsStickyEntriesExhausted = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsStickyEntriesExhausted.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsStickyEntriesExhausted.setDescription('This object contains the number of times a request to create an LSNAT Sticky entry failed because there were no free Sticky entries.')
etsysLsnatStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatStatsClear.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsClear.setDescription('Setting this object to a value of true(1) will clear LSNAT statistics and cause the following objects to be reset to zero and new values generated: etsysLsnatStatsBindingsDeleted etsysLsnatStatsBindingsTotal etsysLsnatStatsBindingsExhausted etsysLsnatStatsBindingsNoReals etsysLsnatStatsBindingsNoPortmapPort etsysLsnatStatsBindingsNoFtpALG etsysLsnatStatsBindingsPerSecond etsysLsnatStatsStickyEntriesTotal etsysLsnatStatsStickyBindingsStuckTotal etsysLsnatStatsStickyEntriesExhausted etsysLsnatServerfarmHits etsysLsnatServerfarmStateChanges etsysLsnatRealServerHits etsysLsnatRealServerStateChanges etsysLsnatVserverConns etsysLsnatVserverStateChanges The following objects will be reset to the current active counts: etsysLsnatStatsBindingsHigh etsysLsnatStatsVserverHigh etsysLsnatStatsServerfarmHigh etsysLsnatStatsRealHigh etsysLsnatStatsStickyActiveEntriesHigh Setting this object to a value of false(2) has no effect. This object will always return a value of false(2).')
etsysLsnatStatsClearDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsClearDateAndTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsClearDateAndTime.setDescription('The date / time the LSNAT statistics were cleared.')
etsysLsnatStatsRealServerAccessClientsCount = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsRealServerAccessClientsCount.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsRealServerAccessClientsCount.setDescription('The number of etsysLsnatRealServerAccessClientEntry in the etsysLsnatRealServerAccessClientTable')
etsysLsnatStatsMinTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 29), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsMinTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsMinTimeoutValue.setDescription('The minimum timeout value allowable for LSNAT timeouts.')
etsysLsnatStatsMaxTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 1, 30), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStatsMaxTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStatsMaxTimeoutValue.setDescription('The maximum timeout value allowable for LSNAT timeouts.')
etsysLsnatIpv4ConfigFTPCtrlPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 2, 1), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigFTPCtrlPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigFTPCtrlPort.setDescription('This object contains the IPv4 FTP Control Port used by LSNAT.')
etsysLsnatIpv4ConfigTFTPCtrlPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 2, 2), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(69)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigTFTPCtrlPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigTFTPCtrlPort.setDescription('This object contains the IPv4 TFTP Control Port used by LSNAT.')
etsysLsnatIpv4ConfigRealServerAccess = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2))).clone('restricted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigRealServerAccess.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigRealServerAccess.setDescription("This object controls IPv4 Client access to Real Servers. - `restricted', indicates direct user access to LSNAT configured Real servers using destination ports configured by the Real servers, will not be allowed for any user. - `unrestricted', indicates direct access to all services on LSNAT configured Real servers will be allowed for all users.")
etsysLsnatIpv4ConfigFinRstTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 2, 4), Unsigned32().clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigFinRstTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigFinRstTimeout.setDescription("The timeout value after TCP FIN/RST observed on IPv4 NAT bindings. Setting a value of '0' results in this feature being disabled.")
etsysLsnatIpv4ConfigFinRstTimeoutHalfClosedStatus = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigFinRstTimeoutHalfClosedStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatIpv4ConfigFinRstTimeoutHalfClosedStatus.setDescription("This object indicates if the IPv4 TCP FIN/RST timeout will apply to bindings only when the hardware connections have aged out. - `disabled', indicates the IPv4 TCP FIN/RST timeout does not apply to half closed bindings. - `enabled', indicates the IPv4 TCP FIN/RST timeout applies to half closed bindings.")
etsysLsnatRealServerAccessClientTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 1), )
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientTable.setDescription('A table of entries defining a subnet of Client IP addresses that will be allowed direct access to all Real servers.')
etsysLsnatRealServerAccessClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 1, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerAccessClientAddressType"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerAccessClientIp"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerAccessClientPrefixLen"))
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientEntry.setDescription('An entry in the etsysLsnatRealServerAccessClientTable defining a subnet of Client IP addresses for this Client Access Table entry. The Real Server Access Client Table entry defines a subnet of Client IP addresses that will be allowed direct access to all Real servers.')
etsysLsnatRealServerAccessClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientAddressType.setDescription('The value of this property affects the size and format of etsysLsnatRealServerAccessClientIp.')
etsysLsnatRealServerAccessClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientIp.setDescription('The IP address for this subnet of IP addresses defining this LSNAT Real Server Access Client entry.')
etsysLsnatRealServerAccessClientPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 1, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientPrefixLen.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientPrefixLen.setDescription('The length of the IP network mask for this LSNAT Real Server Access Client entry. The values for the index objects etsysLsnatRealServerAccessClientIp and etsysLsnatRealServerAccessClientPrefixLen must be consistent.')
etsysLsnatRealServerAccessClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAccessClientRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The Real Server Access Client entry is available for use in LSNAT operations. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. Errors resulting from invalid etsysLsnatRealServerAccessClientIp and etsysLsnatRealServerAccessClientPrefixLen when creating the LSNAT entry will result in the row not being created. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysLsnatRealServerAccessClientEntry from the etsysLsnatRealServerAccessClientTable and make it unavailable for LSNAT operations.')
etsysLsnatServerfarmTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2), )
if mibBuilder.loadTexts: etsysLsnatServerfarmTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmTable.setDescription('A table containing objects defining the configuration parameters, operational state and runtime statistics of LSNAT Server farms.')
etsysLsnatServerfarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmInetVersion"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmName"))
if mibBuilder.loadTexts: etsysLsnatServerfarmEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmEntry.setDescription('An entry in the etsysLsnatServerfarmTable containing the operational characteristics of an LSNAT Server farm. An LSNAT Server farm contains a grouping of Real servers (etsysLsnatRealServerEntry) that load balancing requests will use to distribute the request load.')
etsysLsnatServerfarmInetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 1), InetVersion())
if mibBuilder.loadTexts: etsysLsnatServerfarmInetVersion.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmInetVersion.setDescription('The Internet address version of the LSNAT Server farm.')
etsysLsnatServerfarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: etsysLsnatServerfarmName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmName.setDescription('This object contains the unique name of the LSNAT Server farm.')
etsysLsnatServerfarmPredictor = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("roundrobin", 1), ("leastconns", 2))).clone('roundrobin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatServerfarmPredictor.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmPredictor.setDescription("This object contains the Predictor value. The predictor value defines the method of selecting the appropriate Real server when a new binding request is generated. - `roundrobin', indicates the Real server will be selected using a round robin algorithm. - `leastconns', indicates the Real server will be selected based on the fewest active connections on the Real servers.")
etsysLsnatServerfarmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatServerfarmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmAdminStatus.setDescription("This object contains the Administrative state of the Server farm. - `disabled', indicates the Server farm is administratively disabled. - `enabled', indicates the Server farm is administratively enabled.")
etsysLsnatServerfarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmOperStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmOperStatus.setDescription("This object contains the Operational state of the LSNAT Server farm. The state of the LSNAT Server farm will be deemed 'up' when the row is 'active', the etsysLsnatServerfarmAdminStatus is 'enabled' and at least one etsysLsnatRealServerEntry has been associated with this entry and the etsysLsnatRealServerOperStatus is 'up'. - `up', indicates the LSNAT Server farm is operationally ready. - `down', indicates the LSNAT Server farm is operationally unavailable.")
etsysLsnatServerfarmConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmConns.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmConns.setDescription('The current number of active LSNAT connections established on this LSNAT Server farm.')
etsysLsnatServerfarmHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmHits.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmHits.setDescription('The total number of hits this LSNAT Server farm has received.')
etsysLsnatServerfarmStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmStateChanges.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmStateChanges.setDescription('The total number of operational state changes (see etsysLsnatServerfarmOperStatus) for this LSNAT Server farm.')
etsysLsnatServerfarmLastStateChangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmLastStateChangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmLastStateChangeDateAndTime.setDescription('The date / time the last LSNAT Server farm state change.')
etsysLsnatServerfarmRealsCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmRealsCfg.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmRealsCfg.setDescription('The total number of Real servers (etsysLsnatRealServerEntry) currently configured on this LSNAT Server farm.')
etsysLsnatServerfarmRealsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmRealsUp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmRealsUp.setDescription("The total number of Real servers (etsysLsnatRealServerEntry) currently configured on this LSNAT Server farm with a etsysLsnatRealServerOperStatus of 'up'.")
etsysLsnatServerfarmVserversCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatServerfarmVserversCfg.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmVserversCfg.setDescription('The total number of Virtual servers (etsysLsnatVserversEntry) currently configured using this LSNAT Server farm (etsysLsnatVserverServerfarmName).')
etsysLsnatServerfarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatServerfarmRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatServerfarmRowStatus.setDescription("This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The Server farm entry is available for use by LSNAT operations. Other writable leaves in this table MAY be modified while the row is in the active state. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid createAndGo requires a unique etsysLsnatServerfarmName, errors resulting from existing etsysLsnatServerfarmName's will result in the row not being created. All writable leaves have default values so a valid createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysLsnatServerfarmEntry from the etsysLsnatServerfarmTable and make it unavailable for LSNAT operations. This will result in all associated LSNAT Real Server Table entries (etsysLsnatRealServerEntry) to also be deleted. In addition deleting this entry will result in the etsysLsnatVserverServerfarmName leaf of any associated etsysLsnatVserverEntry's to be set to the unassigned value and if the Virtual server had been in a state (etsysLsnatVserverOperStatus) of 'up' it would result in the Virtual server transitioning it's state to 'down'.")
etsysLsnatRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3), )
if mibBuilder.loadTexts: etsysLsnatRealServerTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerTable.setDescription('A table containing objects defining the configuration parameters, operational states and runtime statistics of LSNAT Real servers.')
etsysLsnatRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerAddressType"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmName"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerIp"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerPort"))
if mibBuilder.loadTexts: etsysLsnatRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerEntry.setDescription('An entry in the etsysLsnatRealServerTable containing the operational characteristics of an LSNAT Real server and its association with an LSNAT Server farm. An LSNAT Real server is a local server on which Virtual server requests will be directed for services defined by the Virtual server.')
etsysLsnatRealServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysLsnatRealServerAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAddressType.setDescription('The value of this property affects the size and format of etsysLsnatRealServerIp. This value must be consistent with the value set in the etsysLsnatServerfarmInetVersion for the Server farm defined by etsysLsnatServerfarmName.')
etsysLsnatRealServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: etsysLsnatRealServerIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerIp.setDescription('The assigned IP addresses identifying this Real server.')
etsysLsnatRealServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 3), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )))
if mibBuilder.loadTexts: etsysLsnatRealServerPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerPort.setDescription('The service port used when accessing this Real server. A value of zero indicates that all ports can be used by Virtual servers accessing this Real server.')
etsysLsnatRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 155)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerWeight.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerWeight.setDescription("A weight assigned to this Real server to be used in selecting this Real server over other created Real servers for LSNAT connections. This value is only significant when the etsysLsnatServerfarmPredictor for the associated LSNAT Server farm is set to 'roundrobin'.")
etsysLsnatRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerMaxConns.setDescription('The maximum number of LSNAT connections allowed for this Real server at any one time. While the current number of connections (etsysLsnatRealServerConns) equals this value this Real server will no longer be considered for new LSNAT connections. A value of zero indicates that there is no limit.')
etsysLsnatRealServerFailDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("probe", 2))).clone('probe')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerFailDetectType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerFailDetectType.setDescription("This object contains the fail detect type assigned to this Real server. - `none', indicates there is no fail detection used to verify the operational state of the Real Server. - `probe', indicates that probes are used to verify the operational state or the Real server.")
etsysLsnatRealServerFailDetectProbeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerFailDetectProbeOne.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerFailDetectProbeOne.setDescription('The name of probe one assigned to the Real Server. Probes are used to verify the operational state of the Real Server. A null string indicates that probe one is not assigned.')
etsysLsnatRealServerFailDetectProbeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerFailDetectProbeTwo.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerFailDetectProbeTwo.setDescription('The name of probe two assigned to the Real Server. Probes are used to verify the operational state of the Real Server. A null string indicates that probe two is not assigned.')
etsysLsnatRealServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerAdminStatus.setDescription("This object contains the administrative state of the Real server. - `disabled', indicates the Real server is administratively disabled. - `enabled', indicates the Real server is administratively enabled.")
etsysLsnatRealServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatRealServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerOperStatus.setDescription("This object contains the operational state of the Real server. The state of the Real server will be deemed 'up' when the row is 'active', the etsysLsnatRealServerAdminStatus is 'enabled' and a positive response is received from the configured fail detect request. - `up', indicates the Real server is operationally ready. - `down', indicates the Real server is operationally unavailable.")
etsysLsnatRealServerConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatRealServerConns.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerConns.setDescription('The current number of active LSNAT connections established using this Real server.')
etsysLsnatRealServerHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatRealServerHits.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerHits.setDescription('The total number of hits this Real server has received.')
etsysLsnatRealServerStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatRealServerStateChanges.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerStateChanges.setDescription('The total number of state changes (see etsysLsnatRealServerOperStatus) for this Real server.')
etsysLsnatRealServerLastStateChangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatRealServerLastStateChangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerLastStateChangeDateAndTime.setDescription('The date / time the last LSNAT Real server state change.')
etsysLsnatRealServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatRealServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatRealServerRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The Real server entry is available for use by LSNAT operations. Other writable leaves in this table MAY be modified while the row is in the active state. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid server farm identified by etsysLsnatServerfarmName must be present. Also errors resulting from an invalid etsysLsnatRealServerIp or etsysLsnatRealServerPort when creating the LSNAT entry will result in the row not being created. All writable leaves have default values so a valid createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysLsnatRealServerEntry from the etsysLsnatRealServerTable and make it unavailable for LSNAT operations.')
etsysLsnatVserverTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4), )
if mibBuilder.loadTexts: etsysLsnatVserverTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverTable.setDescription('A table containing objects defining the configuration parameters, operational states and runtime statistics of LSNAT Virtual servers.')
etsysLsnatVserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverInetVersion"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverName"))
if mibBuilder.loadTexts: etsysLsnatVserverEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverEntry.setDescription('An entry in the etsysLsnatVserverTable containing the operational characteristics of a Virtual server. A Virtual server provides load sharing between multiple servers grouped into Server farms that can be tailored to an individual service or all services, without requiring any modification to clients or servers.')
etsysLsnatVserverInetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 1), InetVersion())
if mibBuilder.loadTexts: etsysLsnatVserverInetVersion.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverInetVersion.setDescription('The Internet address version of the LSNAT Virtual server.')
etsysLsnatVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: etsysLsnatVserverName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverName.setDescription('This object contains the unique name of the LSNAT Virtual server.')
etsysLsnatVserverServerfarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverServerfarmName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverServerfarmName.setDescription("The Server farm name (etsysLsnatServerfarmName) specifying the Server farm to be assigned to this Virtual server entry. The value of etsysLsnatVserverInetVersion must be consistent with the value of etsysLsnatServerfarmInetVersion defined by this etsysLsnatVserverServerfarmName. Setting this value requires etsysLsnatVserverAdminStatus to be set to 'disabled'. A null string results in no Virtual server Server farm entry being assigned to this Virtual server.")
etsysLsnatVserverIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 4), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverIdleTimeout.setDescription('The idle timeout value for bindings created using this Virtual server.')
etsysLsnatVserverStickyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sip", 2), ("sipDipDport", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverStickyType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverStickyType.setDescription("This object contains the type of 'sticky' entry created when accessing this LSNAT Virtual server. - `none', indicates no LSNAT sticky entries will be created. - `sip', indicates that LSNAT sticky entries will be created based on the source IP address. - `sipDipDport', indicates that LSNAT sticky entries will be created based on source IP address, destination IP address and the destination port.")
etsysLsnatVserverStickyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 6), Unsigned32().clone(7200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverStickyTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverStickyTimeout.setDescription('The timeout value for sticky entries created using this Virtual server.')
etsysLsnatVserverUDPOneShot = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverUDPOneShot.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverUDPOneShot.setDescription("This object enables the UDP One Shot feature for this LSNAT Virtual server. - `disabled', UDP One Shot is disabled. - `enabled', UDP One Shot is enabled.")
etsysLsnatVserverVrrpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverVrrpInterface.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVrrpInterface.setDescription("The ifIndex used in conjunction with the Virtual Router Index (VRID) etsysLsnatVserverVrrpVrid to describe the associated VRRP. A properly configured entry will also include a non-default entry for the VRID (etsysLsnatVserverVrrpVrid). A transitioning of the VRRP defined by this entry and etsysLsnatVserverVrrpVrid to a state of anything but 'master' will result in the Virtual server etsysLsnatVserverOperStatus transitioning to a state of 'down'. A non zero value must also be set in etsysLsnatVserverVrrpVrid for this entry to be configured properly. A value of '0' in etsysLsnatVserverVrrpInterface and etsysLsnatVserverVrrpVrid indicates that there is no VRRP associated with this Virtual server.")
etsysLsnatVserverVrrpVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverVrrpVrid.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVrrpVrid.setDescription("The Virtual Router Index (VRID) used in conjunction with the (ifIndex) etsysLsnatVserverVrrpInterface to describe the associated VRRP. A properly configured entry will include a non-default entry for the VLAN interface (etsysLsnatVserverVrrpInterface). A non zero value must also be set in etsysLsnatVserverVrrpVrid for this entry to be configured properly. A value of '0' in etsysLsnatVserverVrrpInterface and etsysLsnatVserverVrrpVrid indicates that there is no VRRP associated with this Virtual server.")
etsysLsnatVserverSourceNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverSourceNatPoolName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverSourceNatPoolName.setDescription('The NAT pool name (etsysNatPoolName) defined as part of the etsysNatMIB specifying the NAT pool to be assigned to this Virtual server entry. A null string results in no Virtual server Source NAT Pool entry being assigned to this Virtual server. ')
etsysLsnatVserverAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverAdminStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverAdminStatus.setDescription("This object contains the administrative state of the Virtual server. - `disabled', indicates the Virtual server is administratively disabled. - `enabled', indicates the Virtual server is administratively enabled. An entry must exist in the etsysLsnatVserverVirtualAddressTable associated to this Virtual server for this leaf to be set to 'enabled'.")
etsysLsnatVserverOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverOperStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverOperStatus.setDescription("This object contains the operational state of this Virtual server. The state of this Virtual server will be deemed 'up' when the row is 'active', the etsysLsnatVserverAdminStatus is 'enabled', a Server farm has been assigned with the etsysLsnatVserverServerfarmName leaf and that etsysLsnatServerfarmEntry has a state (etsysLsnatServerfarmOperStatus) of 'up' and the VRRP defined by etsysLsnatVserverVrrpInterface and etsysLsnatVserverVrrpVrid is returning a state of 'master'. - `up', indicates the Virtual server is operationally ready. - `down', indicates the Virtual server is operationally unavailable.")
etsysLsnatVserverLastStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverLastStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverLastStateChangeReason.setDescription('This object indicates the reason for the last Virtual server state (etsysLsnatVserverOperStatus) change.')
etsysLsnatVserverLastStateChangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverLastStateChangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverLastStateChangeDateAndTime.setDescription('The date / time the last LSNAT Virtual server state change.')
etsysLsnatVserverConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverConns.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverConns.setDescription('The current number of active LSNAT connections established on this Virtual server.')
etsysLsnatVserverHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverHits.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverHits.setDescription('The total number of hits this LSNAT Virtual server has received.')
etsysLsnatVserverStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverStateChanges.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverStateChanges.setDescription('The total number of state changes (see etsysLsnatVserverOperStatus) for this Virtual server.')
etsysLsnatVserverVirtualAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressStatus.setDescription("This object contains the state of the vserver's virtual address info. See etsysLsnatVserverVirtualAddressTable - `invalid', indicates the Vserver does not have a valid virtual address - `valid', indicates the Vserver has a valid virtual address")
etsysLsnatVserverClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatVserverClientCount.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientCount.setDescription('The number of clients configured to the vserver. See etsysLsnatVserverClientTable')
etsysLsnatVserverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The Virtual server entry is available for use by LSNAT operations. Other writable leaves in this table MAY be modified while the row is in the active state. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid createAndGo requires a unique etsysLsnatVserverName, errors resulting from existing etsysLsnatVserverNames will result in the row not being created. All writable leaves have default values so a valid createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysLsnatVserverEntry from the etsysLsnatVserverTable and make it unavailable for LSNAT operations. This will result in any associated LSNAT Virtual server Virtual Address Table entries (etsysLsnatVserverVirtualAddressEntry) and LSNAT Client Access Table entries (etsysLsnatClientAccessEntry) to also be deleted.')
etsysLsnatVserverBindingMatchSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exact", 1), ("any", 2))).clone('exact')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverBindingMatchSourcePort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverBindingMatchSourcePort.setDescription("This object modifies the mode in which a vserver creates bindings. - `exact', creates bindings that match the client UDP/TCP source port. - `any', creates bindings that match any client UDP/TCP source port.")
etsysLsnatVserverVirtualAddressTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5), )
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressTable.setDescription('A table of entries defining the Virtual configuration associated with the Virtual server identified by etsysLsnatVserverName.')
etsysLsnatVserverVirtualAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressType"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverName"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressFirstIp"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressLastIp"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressProtocol"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressPort"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressServiceType"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressAllVrfs"))
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressEntry.setDescription("An entry in the etsysLsnatVserverVirtualAddressTable defining Virtual configuration for this Virtual server Virtual Table entry. The Virtual server Virtual Table entry defines IP addresses, protocol, port and access for the Virtual server identified by etsysLsnatVserverName. An entry must exist for (etsysLsnatVserverAdminStatus) of the associated Virtual server (etsysLsnatVserverName) to be set to 'enabled'.")
etsysLsnatVserverVirtualAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressType.setDescription('The value of this property affects the size and format of etsysLsnatVserverVirtualAddressFirstIp and etsysLsnatVserverVirtualAddressLastIp. This value must be consistent with the etsysLsnatVserverInetVersion defined by etsysLsnatVserverName.')
etsysLsnatVserverVirtualAddressFirstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressFirstIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressFirstIp.setDescription('The starting IP address for this range of IP addresses defining this LSNAT Virtual configuration.')
etsysLsnatVserverVirtualAddressLastIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 3), InetAddress())
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressLastIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressLastIp.setDescription('The ending IP address for this range of IP addresses defining this LSNAT Virtual configuration. A value identical to etsysLsnatVserverVirtualFirstIp will indicate a range of one address.')
etsysLsnatVserverVirtualAddressProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2))))
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressProtocol.setDescription("This object contains the protocol type for this Virtual configuration. - `tcp', indicates that the Virtual configuration will use TCP protocol. - `udp', indicates that the Virtual configuration will use UDP protocol.")
etsysLsnatVserverVirtualAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 5), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )))
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressPort.setDescription("The port used when accessing this Virtual configuration. A value of '0' indicates that all ports are usable.")
etsysLsnatVserverVirtualAddressServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ftp", 1), ("tftp", 2))))
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressServiceType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressServiceType.setDescription("This object contains the optional service allowed for this Virtual configuration. - 'none', there is no optional service provided. - `ftp', indicates that the Virtual configuration service type is FTP. The service type can only be set to 'ftp' if the etsysLsnatVserverVirtualProtocol type is set to 'tcp'. - `tftp', indicates that the Virtual configuration service type is TFTP. The service type can only be set to 'tftp' if the etsysLsnatVserverVirtualProtocol type is set to 'udp'.")
etsysLsnatVserverVirtualAddressAllVrfs = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))))
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressAllVrfs.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressAllVrfs.setDescription("This object defines if this Virtual configuration will be reachable via all VRFs. - 'disabled', the Virtual server identified by etsysLsnatVserverName will not be reachable from all VRFs. - 'enabled', the Virtual server identified by etsysLsnatVserverName will be reachable from all VRFs.")
etsysLsnatVserverVirtualAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverVirtualAddressRowStatus.setDescription("This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The Virtual server Virtual configuration entry is available for use in LSNAT operations and is associated with the Virtual server defined by etsysLsnatVserverName. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid etsysLsnatVserverName must be present. Also errors resulting from: - Invalid etsysLsnatVserverVirtualAddressFirstIp and etsysLsnatVserverVirtualAddressLastIp combinations. - etsysLsnatVserverVirtualAddressType inconsistencies with the etsysLsnatVserverInetVersion associated with the etsysLsnatVserverName. - Inconsistent values assigned to etsysLsnatVserverVirtualAddressProtocol and etsysLsnatVserverVirtualAddressServiceType. when creating the LSNAT entry will result in the row not being created. Creating this entry requires the associated Virtual server etsysLsnatVserverAdminStatus, identified by etsysLsnatVserverName, to have a status of 'disabled'. Already existing etsysLsnatVserverVirtualAddressEntrys associated with the Virtual Server identified by etsysLsnatVserverName will result in the original entry being deleted and a new entry created. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysLsnatVserverVirtualAddressEntry from the etsysLsnatVserverVirtualAddressTable and make it unavailable for LSNAT operations. Deleting this entry requires the associated Virtual server etsysLsnatVserverAdminStatus, identified by etsysLsnatVserverName, to have a status of 'disabled'.")
etsysLsnatVserverClientTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 6), )
if mibBuilder.loadTexts: etsysLsnatVserverClientTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientTable.setDescription('A table of entries defining a subnet of Client IP addresses that will be allowed direct access to the Real servers associated with the Virtual server identified by etsysLsnatVserverName.')
etsysLsnatVserverClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 6, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverClientAddressType"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverName"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverClientIp"), (0, "ENTERASYS-LSNAT-MIB", "etsysLsnatVserverClientPrefixLen"))
if mibBuilder.loadTexts: etsysLsnatVserverClientEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientEntry.setDescription('An entry in the etsysLsnatVserverClientTable defining a subnet of Client IP addresses for this Virtual server Client Access Table entry. The Virtual server Client Access Table entry defines a subnet of Client IP addresses that will be allowed direct access to the Real servers associated with this Virtual server while this Virtual server is active.')
etsysLsnatVserverClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysLsnatVserverClientAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientAddressType.setDescription('The value of this property affects the size and format of etsysLsnatVserverClientIp. This value must be consistent with the etsysLsnatVserverInetVersion defined by etsysLsnatVserverName.')
etsysLsnatVserverClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: etsysLsnatVserverClientIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientIp.setDescription('The IP address for this subnet of IP addresses defining this LSNAT Virtual server Client Access entry.')
etsysLsnatVserverClientPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 6, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: etsysLsnatVserverClientPrefixLen.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientPrefixLen.setDescription('The length of the IP network mask for this LSNAT Virtual server Client Access entry. The values for the index objects etsysLsnatVserverClientIp and etsysLsnatVserverClientPrefixLen must be consistent.')
etsysLsnatVserverClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysLsnatVserverClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatVserverClientRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The Virtual server Client Access entry is available for use in LSNAT operations. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid etsysLsnatVserverName must be present. Also errors resulting from invalid etsysLsnatVserverClientIp and etsysLsnatVserverClientPrefixLen when creating the LSNAT entry will result in the row not being created. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysLsnatClientAccessEntry from the etsysLsnatVserverClientTable and make it unavailable for LSNAT operations.')
etsysLsnatBindingTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7), )
if mibBuilder.loadTexts: etsysLsnatBindingTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingTable.setDescription('A table of entries defining active LSNAT bindings.')
etsysLsnatBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatBindingId"))
if mibBuilder.loadTexts: etsysLsnatBindingEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingEntry.setDescription('An entry in the etsysLsnatBindingTable defining an active LSNAT binding. The etsysLsnatBindingEntry defines the runtime characteristics of an LSNAT binding.')
etsysLsnatBindingId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysLsnatBindingId.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingId.setDescription('This value is a unique LSNAT binding identifier assigned by LSNAT during binding creation.')
etsysLsnatBindingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("syncing", 2), ("established", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingState.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingState.setDescription("This object contains the state of the binding. - `init', indicates this binding is initializing. - `syncing', indicates this binding is syncing. - `established', indicates this binding is established.")
etsysLsnatBindingAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingAddressType.setDescription('The value of this property affects the size and format of: etsysLsnatBindingForwardSrcIp, etsysLsnatBindingForwardDstIp, etsysLsnatBindingReverseSrcIp, etsysLsnatBindingReverseDstIp and etsysLsnatBindingRealIp objects.')
etsysLsnatBindingForwardSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingForwardSrcIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingForwardSrcIp.setDescription('The forward source IP address for this LSNAT binding entry.')
etsysLsnatBindingForwardSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 5), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingForwardSrcPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingForwardSrcPort.setDescription('The forward source port for this LSNAT binding entry.')
etsysLsnatBindingForwardDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingForwardDstIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingForwardDstIp.setDescription('The forward destination IP address for this LSNAT binding entry.')
etsysLsnatBindingForwardDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 7), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingForwardDstPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingForwardDstPort.setDescription('The forward destination port for this LSNAT binding entry.')
etsysLsnatBindingReverseSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingReverseSrcIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingReverseSrcIp.setDescription('The reverse source IP address for this LSNAT binding entry.')
etsysLsnatBindingReverseSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 9), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingReverseSrcPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingReverseSrcPort.setDescription('The reverse source port for this LSNAT binding entry.')
etsysLsnatBindingReverseDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingReverseDstIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingReverseDstIp.setDescription('The reverse destination IP address for this LSNAT binding entry.')
etsysLsnatBindingReverseDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 11), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingReverseDstPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingReverseDstPort.setDescription('The reverse destination port for this LSNAT binding entry.')
etsysLsnatBindingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingProtocol.setDescription("This object contains the Binding protocol type. - `tcp', indicates that the binding is TCP protocol. - `udp', indicates that the binding is UDP protocol.")
etsysLsnatBindingAlgType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ftpctrl", 2), ("ftpdata", 3), ("tftpctrl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingAlgType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingAlgType.setDescription("This object contains the ALG Binding type. - `none', indicates that this binding is not an ALG binding. - `ftpctrl', indicates that this binding is a FTP control binding. - `ftpdata', indicates that this binding is a FTP data binding. - `tftpctrl', indicates that this binding is a TFTP control binding.")
etsysLsnatBindingFtpDataBindingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingFtpDataBindingCount.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingFtpDataBindingCount.setDescription('This object contains the number of associated FTP data channel bindings. This value is only significant if the etsysLsnatBindingAlgType is ftpctrl(2).')
etsysLsnatBindingSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingSticky.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingSticky.setDescription("This object identifies if this binding is associated with a sticky entry. - `no', indicates that this binding is not associated with a sticky entry. - `yes', indicates that this binding is associated with a sticky entry.")
etsysLsnatBindingHWConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingHWConns.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingHWConns.setDescription('This object contains the total number of hardware connections currently active on this LSNAT binding.')
etsysLsnatBindingVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingVserverName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingVserverName.setDescription('This object contains the name of the LSNAT Virtual server (etsysLsnatVserverName) associated with this LSNAT binding.')
etsysLsnatBindingServerfarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingServerfarmName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingServerfarmName.setDescription('This object contains the name of the LSNAT Server farm (etsysLsnatServerfarmName) associated with this LSNAT binding.')
etsysLsnatBindingRealIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 19), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingRealIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingRealIp.setDescription('The Real IP address for this LSNAT binding entry.')
etsysLsnatBindingRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 20), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingRealPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingRealPort.setDescription('The Real server port for this LSNAT binding entry.')
etsysLsnatBindingCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingCreationDate.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingCreationDate.setDescription('The creation date / time for this LSNAT binding entry.')
etsysLsnatBindingExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingExpirationDate.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingExpirationDate.setDescription('The expiration date / time for this LSNAT binding entry.')
etsysLsnatBindingIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingIdleTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingIdleTime.setDescription('The consecutive number of seconds this LSNAT binding entry has been idle.')
etsysLsnatBindingExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatBindingExpireTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingExpireTime.setDescription('The number of idle seconds left before this LSNAT binding entry will age out.')
etsysLsnatBindingClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 7, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatBindingClear.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatBindingClear.setDescription('Setting this object to a value of true(1) will cause this etsysLsnatBindingEntry to be deleted from the etsysLsnatBindingTable. Setting this object to a value of false(2) has no effect. This object will always return a value of false(2).')
etsysLsnatStickyTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8), )
if mibBuilder.loadTexts: etsysLsnatStickyTable.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyTable.setDescription('A table of entries defining active LSNAT sticky entries.')
etsysLsnatStickyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1), ).setIndexNames((0, "ENTERASYS-LSNAT-MIB", "etsysLsnatStickyId"))
if mibBuilder.loadTexts: etsysLsnatStickyEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyEntry.setDescription('An entry in the etsysLsnatStickyTable defining an active LSNAT sticky entry. The etsysLsnatStickyEntry defines the runtime characteristics of an LSNAT sticky entry.')
etsysLsnatStickyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysLsnatStickyId.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyId.setDescription('This value is a unique LSNAT sticky entry identifier assigned by LSNAT during sticky entry creation.')
etsysLsnatStickyType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("sipDipDport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyType.setDescription("This object contains the state of the binding. - `sip', indicates that this sticky entry is based on the source IP. - `sipDipDport', indicates that this sticky entry is based on the source IP, the destination IP and the destination port.")
etsysLsnatStickyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyAddressType.setDescription('The value of this property affects the size and format of: etsysLsnatStickySrcIp, etsysLsnatStickyDstIp and etsysLsnatStickyRealIp objects.')
etsysLsnatStickySrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickySrcIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickySrcIp.setDescription('The source IP address for this LSNAT sticky entry.')
etsysLsnatStickyDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyDstIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyDstIp.setDescription('The destination IP address for this LSNAT sticky entry.')
etsysLsnatStickyDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 6), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyDstPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyDstPort.setDescription('The destination port for this LSNAT sticky entry.')
etsysLsnatStickyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyHits.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyHits.setDescription('This object contains the total number of hits this LSNAT sticky entry has received.')
etsysLsnatStickyBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyBindings.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyBindings.setDescription('This object contains the total number of active bindings associated with this LSNAT sticky entry.')
etsysLsnatStickyVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyVserverName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyVserverName.setDescription('This object contains the name of the LSNAT Virtual server (etsysLsnatVserverName) associated with this LSNAT sticky entry.')
etsysLsnatStickyServerfarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyServerfarmName.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyServerfarmName.setDescription('This object contains the name of the LSNAT Server farm (etsysLsnatServerfarmName) associated with this LSNAT sticky entry.')
etsysLsnatStickyRealIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyRealIp.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyRealIp.setDescription('The Real server IP address for this LSNAT sticky entry.')
etsysLsnatStickyRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 12), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyRealPort.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyRealPort.setDescription('The Real server port for this LSNAT sticky entry.')
etsysLsnatStickyCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyCreationDate.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyCreationDate.setDescription('The creation date / time for this LSNAT sticky entry.')
etsysLsnatStickyExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyExpirationDate.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyExpirationDate.setDescription('The expiration date / time for this LSNAT sticky entry.')
etsysLsnatStickyIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyIdleTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyIdleTime.setDescription('The consecutive number of seconds this LSNAT sticky entry has been idle.')
etsysLsnatStickyExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLsnatStickyExpireTime.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyExpireTime.setDescription('The number of idle seconds left before this LSNAT sticky entry will age out.')
etsysLsnatStickyClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 2, 8, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLsnatStickyClear.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatStickyClear.setDescription('Setting this object to a value of true(1) will cause this etsysLsnatStickyEntry to be deleted from the etsysLsnatStickyTable. Setting this object to a value of false(2) has no effect. This object will always return a value of false(2).')
etsysLsnatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1))
etsysLsnatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 2))
etsysLsnatMIBGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 1)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsRealsUsed"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsServerfarmsUsed"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsVserversUsed"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsVserversIPsUsed"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsCurrent"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsHigh"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsDeleted"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsTotal"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsExhausted"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsNoReals"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsNoPortmapPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsNoFtpALG"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsBindingsPerSecond"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsVserverActive"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsVserverHigh"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsServerfarmActive"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsServerfarmHigh"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsRealActive"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsRealHigh"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsStickyEntriesTotal"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsStickyBindingsStuckTotal"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsStickyBindingsStuckCurrent"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsStickyActiveEntries"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsStickyActiveEntriesHigh"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsStickyEntriesExhausted"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsClear"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStatsClearDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBGlobalStatsGroup = etsysLsnatMIBGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBGlobalStatsGroup.setDescription('The statistics group for LSNAT global statistical and configuration information.')
etsysLsnatMIBGlobalIpv4ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 2)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatIpv4ConfigFTPCtrlPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatIpv4ConfigTFTPCtrlPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatIpv4ConfigRealServerAccess"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatIpv4ConfigFinRstTimeout"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatIpv4ConfigFinRstTimeoutHalfClosedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBGlobalIpv4ConfigGroup = etsysLsnatMIBGlobalIpv4ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBGlobalIpv4ConfigGroup.setDescription('The information group for LSNAT global IPv4 configuration.')
etsysLsnatMIBRealServerAccessClientTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 3)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerAccessClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBRealServerAccessClientTableGroup = etsysLsnatMIBRealServerAccessClientTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBRealServerAccessClientTableGroup.setDescription('The Real Server Access Client group for LSNAT Real Server Access Client configurations.')
etsysLsnatMIBServerfarmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 4)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmPredictor"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmAdminStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmOperStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmConns"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmHits"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmStateChanges"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmLastStateChangeDateAndTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmRealsCfg"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmRealsUp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmVserversCfg"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatServerfarmRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBServerfarmTableGroup = etsysLsnatMIBServerfarmTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBServerfarmTableGroup.setDescription('The Server Farm group for LSNAT Server farm configuration and state operations.')
etsysLsnatMIBRealServerTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 5)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerWeight"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerMaxConns"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerFailDetectType"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerFailDetectProbeOne"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerFailDetectProbeTwo"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerAdminStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerOperStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerConns"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerHits"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerStateChanges"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerLastStateChangeDateAndTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatRealServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBRealServerTableGroup = etsysLsnatMIBRealServerTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBRealServerTableGroup.setDescription('The Real server group for LSNAT Real server configuration and state operations.')
etsysLsnatMIBVserverTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 6)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverServerfarmName"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverIdleTimeout"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverStickyType"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverStickyTimeout"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverUDPOneShot"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVrrpInterface"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVrrpVrid"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverSourceNatPoolName"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverAdminStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverOperStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverLastStateChangeReason"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverLastStateChangeDateAndTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverConns"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverHits"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverStateChanges"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverClientCount"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverRowStatus"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverBindingMatchSourcePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBVserverTableGroup = etsysLsnatMIBVserverTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBVserverTableGroup.setDescription('The Virtual server group for LSNAT Virtual server configuration and state operations.')
etsysLsnatMIBVserverVirtualAddressTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 7)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverVirtualAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBVserverVirtualAddressTableGroup = etsysLsnatMIBVserverVirtualAddressTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBVserverVirtualAddressTableGroup.setDescription('The Virtual server Virtual group for LSNAT Virtual configurations.')
etsysLsnatMIBVserverClientTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 8)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatVserverClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBVserverClientTableGroup = etsysLsnatMIBVserverClientTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBVserverClientTableGroup.setDescription('The Virtual server Client Access group for LSNAT Client Access configurations.')
etsysLsnatMIBBindingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 9)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingState"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingAddressType"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingForwardSrcIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingForwardSrcPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingForwardDstIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingForwardDstPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingReverseSrcIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingReverseSrcPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingReverseDstIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingReverseDstPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingProtocol"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingAlgType"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingFtpDataBindingCount"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingSticky"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingHWConns"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingVserverName"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingServerfarmName"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingRealIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingRealPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingCreationDate"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingExpirationDate"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingIdleTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingExpireTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatBindingClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBBindingTableGroup = etsysLsnatMIBBindingTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBBindingTableGroup.setDescription('The Bindings group for LSNAT Binding information.')
etsysLsnatMIBStickyTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 1, 10)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyType"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyAddressType"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickySrcIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyDstIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyDstPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyHits"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyBindings"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyVserverName"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyServerfarmName"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyRealIp"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyRealPort"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyCreationDate"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyExpirationDate"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyIdleTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyExpireTime"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatStickyClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBStickyTableGroup = etsysLsnatMIBStickyTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBStickyTableGroup.setDescription('The Sticky entry group for LSNAT Sticky entry information.')
etsysLsnatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 74, 3, 2, 1)).setObjects(("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBGlobalStatsGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBGlobalIpv4ConfigGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBRealServerAccessClientTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBServerfarmTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBRealServerTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBVserverTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBVserverVirtualAddressTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBVserverClientTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBBindingTableGroup"), ("ENTERASYS-LSNAT-MIB", "etsysLsnatMIBStickyTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLsnatMIBCompliance = etsysLsnatMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysLsnatMIBCompliance.setDescription('The compliance statement for implementation of the Router Application Services LSNAT functionality.')
mibBuilder.exportSymbols("ENTERASYS-LSNAT-MIB", etsysLsnatVserverClientAddressType=etsysLsnatVserverClientAddressType, etsysLsnatTables=etsysLsnatTables, etsysLsnatBindingState=etsysLsnatBindingState, etsysLsnatServerfarmLastStateChangeDateAndTime=etsysLsnatServerfarmLastStateChangeDateAndTime, etsysLsnatBindingRealPort=etsysLsnatBindingRealPort, etsysLsnatMIBVserverClientTableGroup=etsysLsnatMIBVserverClientTableGroup, etsysLsnatBindingReverseSrcIp=etsysLsnatBindingReverseSrcIp, etsysLsnatBindingSticky=etsysLsnatBindingSticky, etsysLsnatGlobalIpv4Config=etsysLsnatGlobalIpv4Config, etsysLsnatStatsServerfarmHigh=etsysLsnatStatsServerfarmHigh, etsysLsnatVserverLastStateChangeReason=etsysLsnatVserverLastStateChangeReason, etsysLsnatServerfarmRealsCfg=etsysLsnatServerfarmRealsCfg, etsysLsnatStatsBindingsNoPortmapPort=etsysLsnatStatsBindingsNoPortmapPort, etsysLsnatStickyId=etsysLsnatStickyId, etsysLsnatServerfarmName=etsysLsnatServerfarmName, etsysLsnatBindingIdleTime=etsysLsnatBindingIdleTime, etsysLsnatRealServerPort=etsysLsnatRealServerPort, etsysLsnatGlobalStats=etsysLsnatGlobalStats, etsysLsnatBindingVserverName=etsysLsnatBindingVserverName, etsysLsnatMIBGroups=etsysLsnatMIBGroups, etsysLsnatServerfarmInetVersion=etsysLsnatServerfarmInetVersion, etsysLsnatVserverServerfarmName=etsysLsnatVserverServerfarmName, etsysLsnatRealServerAccessClientAddressType=etsysLsnatRealServerAccessClientAddressType, etsysLsnatVserverVirtualAddressLastIp=etsysLsnatVserverVirtualAddressLastIp, etsysLsnatMIBGlobalStatsGroup=etsysLsnatMIBGlobalStatsGroup, etsysLsnatRealServerAddressType=etsysLsnatRealServerAddressType, etsysLsnatStatsBindingsTotal=etsysLsnatStatsBindingsTotal, etsysLsnatStickyServerfarmName=etsysLsnatStickyServerfarmName, etsysLsnatRealServerWeight=etsysLsnatRealServerWeight, etsysLsnatStatsBindingsPerSecond=etsysLsnatStatsBindingsPerSecond, etsysLsnatStickyDstPort=etsysLsnatStickyDstPort, etsysLsnatVserverVirtualAddressTable=etsysLsnatVserverVirtualAddressTable, etsysLsnatVserverEntry=etsysLsnatVserverEntry, etsysLsnatStatsStickyEntriesExhausted=etsysLsnatStatsStickyEntriesExhausted, etsysLsnatStatsServerfarmsUsed=etsysLsnatStatsServerfarmsUsed, etsysLsnatRealServerFailDetectProbeOne=etsysLsnatRealServerFailDetectProbeOne, etsysLsnatBindingEntry=etsysLsnatBindingEntry, etsysLsnatBindingExpirationDate=etsysLsnatBindingExpirationDate, etsysLsnatBindingRealIp=etsysLsnatBindingRealIp, etsysLsnatMIB=etsysLsnatMIB, etsysLsnatBindingCreationDate=etsysLsnatBindingCreationDate, etsysLsnatStickyEntry=etsysLsnatStickyEntry, etsysLsnatStatsRealHigh=etsysLsnatStatsRealHigh, etsysLsnatVserverSourceNatPoolName=etsysLsnatVserverSourceNatPoolName, etsysLsnatVserverAdminStatus=etsysLsnatVserverAdminStatus, etsysLsnatBindingReverseSrcPort=etsysLsnatBindingReverseSrcPort, etsysLsnatVserverHits=etsysLsnatVserverHits, etsysLsnatIpv4ConfigFinRstTimeout=etsysLsnatIpv4ConfigFinRstTimeout, etsysLsnatStatsClear=etsysLsnatStatsClear, etsysLsnatVserverVirtualAddressProtocol=etsysLsnatVserverVirtualAddressProtocol, etsysLsnatVserverClientEntry=etsysLsnatVserverClientEntry, etsysLsnatStatsMinTimeoutValue=etsysLsnatStatsMinTimeoutValue, etsysLsnatServerfarmOperStatus=etsysLsnatServerfarmOperStatus, etsysLsnatServerfarmStateChanges=etsysLsnatServerfarmStateChanges, etsysLsnatStickyClear=etsysLsnatStickyClear, etsysLsnatStickyDstIp=etsysLsnatStickyDstIp, etsysLsnatBindingForwardSrcPort=etsysLsnatBindingForwardSrcPort, etsysLsnatBindingFtpDataBindingCount=etsysLsnatBindingFtpDataBindingCount, etsysLsnatRealServerRowStatus=etsysLsnatRealServerRowStatus, etsysLsnatBindingProtocol=etsysLsnatBindingProtocol, etsysLsnatStatsMaxTimeoutValue=etsysLsnatStatsMaxTimeoutValue, etsysLsnatStickyHits=etsysLsnatStickyHits, etsysLsnatServerfarmRealsUp=etsysLsnatServerfarmRealsUp, etsysLsnatMIBRealServerAccessClientTableGroup=etsysLsnatMIBRealServerAccessClientTableGroup, etsysLsnatServerfarmConns=etsysLsnatServerfarmConns, etsysLsnatStatsStickyActiveEntries=etsysLsnatStatsStickyActiveEntries, etsysLsnatRealServerConns=etsysLsnatRealServerConns, etsysLsnatRealServerFailDetectType=etsysLsnatRealServerFailDetectType, etsysLsnatStickyExpirationDate=etsysLsnatStickyExpirationDate, etsysLsnatMIBGlobalIpv4ConfigGroup=etsysLsnatMIBGlobalIpv4ConfigGroup, etsysLsnatIpv4ConfigRealServerAccess=etsysLsnatIpv4ConfigRealServerAccess, etsysLsnatStickySrcIp=etsysLsnatStickySrcIp, etsysLsnatBindingForwardDstIp=etsysLsnatBindingForwardDstIp, etsysLsnatStatsRealServerAccessClientsCount=etsysLsnatStatsRealServerAccessClientsCount, etsysLsnatVserverVirtualAddressPort=etsysLsnatVserverVirtualAddressPort, etsysLsnatStatsStickyActiveEntriesHigh=etsysLsnatStatsStickyActiveEntriesHigh, etsysLsnatBindingReverseDstPort=etsysLsnatBindingReverseDstPort, etsysLsnatStatsStickyBindingsStuckCurrent=etsysLsnatStatsStickyBindingsStuckCurrent, etsysLsnatStickyExpireTime=etsysLsnatStickyExpireTime, etsysLsnatServerfarmEntry=etsysLsnatServerfarmEntry, etsysLsnatBindingAddressType=etsysLsnatBindingAddressType, etsysLsnatVserverOperStatus=etsysLsnatVserverOperStatus, etsysLsnatRealServerEntry=etsysLsnatRealServerEntry, etsysLsnatBindingServerfarmName=etsysLsnatBindingServerfarmName, etsysLsnatServerfarmAdminStatus=etsysLsnatServerfarmAdminStatus, etsysLsnatVserverStateChanges=etsysLsnatVserverStateChanges, etsysLsnatMIBStickyTableGroup=etsysLsnatMIBStickyTableGroup, etsysLsnatMIBVserverVirtualAddressTableGroup=etsysLsnatMIBVserverVirtualAddressTableGroup, etsysLsnatRealServerAccessClientTable=etsysLsnatRealServerAccessClientTable, etsysLsnatIpv4ConfigFinRstTimeoutHalfClosedStatus=etsysLsnatIpv4ConfigFinRstTimeoutHalfClosedStatus, etsysLsnatVserverVrrpVrid=etsysLsnatVserverVrrpVrid, etsysLsnatStatsServerfarmActive=etsysLsnatStatsServerfarmActive, etsysLsnatBindingForwardDstPort=etsysLsnatBindingForwardDstPort, etsysLsnatStatsVserversIPsUsed=etsysLsnatStatsVserversIPsUsed, etsysLsnatVserverVirtualAddressType=etsysLsnatVserverVirtualAddressType, etsysLsnatVserverIdleTimeout=etsysLsnatVserverIdleTimeout, etsysLsnatRealServerTable=etsysLsnatRealServerTable, etsysLsnatStatsVserverActive=etsysLsnatStatsVserverActive, etsysLsnatVserverRowStatus=etsysLsnatVserverRowStatus, etsysLsnatStickyAddressType=etsysLsnatStickyAddressType, etsysLsnatMIBServerfarmTableGroup=etsysLsnatMIBServerfarmTableGroup, etsysLsnatMIBCompliance=etsysLsnatMIBCompliance, etsysLsnatBindingForwardSrcIp=etsysLsnatBindingForwardSrcIp, etsysLsnatVserverStickyType=etsysLsnatVserverStickyType, etsysLsnatRealServerAccessClientRowStatus=etsysLsnatRealServerAccessClientRowStatus, etsysLsnatVserverClientCount=etsysLsnatVserverClientCount, etsysLsnatVserverBindingMatchSourcePort=etsysLsnatVserverBindingMatchSourcePort, etsysLsnatVserverVirtualAddressFirstIp=etsysLsnatVserverVirtualAddressFirstIp, etsysLsnatStickyType=etsysLsnatStickyType, etsysLsnatStatsBindingsDeleted=etsysLsnatStatsBindingsDeleted, etsysLsnatBindingAlgType=etsysLsnatBindingAlgType, etsysLsnatBindingClear=etsysLsnatBindingClear, etsysLsnatBindingTable=etsysLsnatBindingTable, etsysLsnatVserverLastStateChangeDateAndTime=etsysLsnatVserverLastStateChangeDateAndTime, etsysLsnatMIBBindingTableGroup=etsysLsnatMIBBindingTableGroup, etsysLsnatBindingExpireTime=etsysLsnatBindingExpireTime, etsysLsnatServerfarmRowStatus=etsysLsnatServerfarmRowStatus, etsysLsnatGlobal=etsysLsnatGlobal, etsysLsnatVserverConns=etsysLsnatVserverConns, etsysLsnatVserverVirtualAddressAllVrfs=etsysLsnatVserverVirtualAddressAllVrfs, etsysLsnatVserverUDPOneShot=etsysLsnatVserverUDPOneShot, etsysLsnatVserverVrrpInterface=etsysLsnatVserverVrrpInterface, etsysLsnatVserverClientRowStatus=etsysLsnatVserverClientRowStatus, etsysLsnatMIBCompliances=etsysLsnatMIBCompliances, etsysLsnatMIBRealServerTableGroup=etsysLsnatMIBRealServerTableGroup, etsysLsnatStatsStickyBindingsStuckTotal=etsysLsnatStatsStickyBindingsStuckTotal, etsysLsnatConformance=etsysLsnatConformance, etsysLsnatRealServerLastStateChangeDateAndTime=etsysLsnatRealServerLastStateChangeDateAndTime, etsysLsnatRealServerAccessClientEntry=etsysLsnatRealServerAccessClientEntry, etsysLsnatStickyTable=etsysLsnatStickyTable, etsysLsnatVserverStickyTimeout=etsysLsnatVserverStickyTimeout, etsysLsnatBindingReverseDstIp=etsysLsnatBindingReverseDstIp, etsysLsnatIpv4ConfigFTPCtrlPort=etsysLsnatIpv4ConfigFTPCtrlPort, etsysLsnatVserverVirtualAddressServiceType=etsysLsnatVserverVirtualAddressServiceType, etsysLsnatVserverClientTable=etsysLsnatVserverClientTable, etsysLsnatVserverTable=etsysLsnatVserverTable, etsysLsnatRealServerOperStatus=etsysLsnatRealServerOperStatus, etsysLsnatStickyIdleTime=etsysLsnatStickyIdleTime, etsysLsnatStatsBindingsNoReals=etsysLsnatStatsBindingsNoReals, etsysLsnatServerfarmVserversCfg=etsysLsnatServerfarmVserversCfg, etsysLsnatStatsStickyEntriesTotal=etsysLsnatStatsStickyEntriesTotal, etsysLsnatRealServerAccessClientIp=etsysLsnatRealServerAccessClientIp, etsysLsnatVserverInetVersion=etsysLsnatVserverInetVersion, etsysLsnatStatsVserverHigh=etsysLsnatStatsVserverHigh, etsysLsnatStickyBindings=etsysLsnatStickyBindings, etsysLsnatVserverVirtualAddressEntry=etsysLsnatVserverVirtualAddressEntry, etsysLsnatVserverName=etsysLsnatVserverName, etsysLsnatStatsRealsUsed=etsysLsnatStatsRealsUsed, PYSNMP_MODULE_ID=etsysLsnatMIB, etsysLsnatIpv4ConfigTFTPCtrlPort=etsysLsnatIpv4ConfigTFTPCtrlPort, etsysLsnatStickyVserverName=etsysLsnatStickyVserverName, etsysLsnatMIBVserverTableGroup=etsysLsnatMIBVserverTableGroup, etsysLsnatVserverClientPrefixLen=etsysLsnatVserverClientPrefixLen, etsysLsnatStatsBindingsCurrent=etsysLsnatStatsBindingsCurrent, etsysLsnatStickyRealPort=etsysLsnatStickyRealPort, etsysLsnatStickyRealIp=etsysLsnatStickyRealIp, etsysLsnatStatsVserversUsed=etsysLsnatStatsVserversUsed, etsysLsnatRealServerFailDetectProbeTwo=etsysLsnatRealServerFailDetectProbeTwo, etsysLsnatRealServerStateChanges=etsysLsnatRealServerStateChanges, etsysLsnatServerfarmHits=etsysLsnatServerfarmHits, etsysLsnatRealServerAccessClientPrefixLen=etsysLsnatRealServerAccessClientPrefixLen, etsysLsnatStatsBindingsHigh=etsysLsnatStatsBindingsHigh, etsysLsnatStatsRealActive=etsysLsnatStatsRealActive, etsysLsnatServerfarmTable=etsysLsnatServerfarmTable, etsysLsnatBindingHWConns=etsysLsnatBindingHWConns, etsysLsnatStickyCreationDate=etsysLsnatStickyCreationDate, etsysLsnatRealServerMaxConns=etsysLsnatRealServerMaxConns, etsysLsnatRealServerAdminStatus=etsysLsnatRealServerAdminStatus, etsysLsnatServerfarmPredictor=etsysLsnatServerfarmPredictor, etsysLsnatVserverVirtualAddressRowStatus=etsysLsnatVserverVirtualAddressRowStatus, etsysLsnatStatsClearDateAndTime=etsysLsnatStatsClearDateAndTime, etsysLsnatRealServerHits=etsysLsnatRealServerHits, etsysLsnatBindingId=etsysLsnatBindingId, etsysLsnatStatsBindingsNoFtpALG=etsysLsnatStatsBindingsNoFtpALG, etsysLsnatRealServerIp=etsysLsnatRealServerIp, etsysLsnatStatsBindingsExhausted=etsysLsnatStatsBindingsExhausted, etsysLsnatVserverClientIp=etsysLsnatVserverClientIp, etsysLsnatVserverVirtualAddressStatus=etsysLsnatVserverVirtualAddressStatus)
