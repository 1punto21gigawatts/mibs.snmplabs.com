#
# PySNMP MIB module SINGLE-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SINGLE-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, Unsigned32, iso, ModuleIdentity, TimeTicks, NotificationType, Counter64, ObjectIdentity, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Unsigned32", "iso", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter64", "ObjectIdentity", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits")
DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
swSingleIPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 8))
if mibBuilder.loadTexts: swSingleIPMIB.setLastUpdated('9911220000Z')
if mibBuilder.loadTexts: swSingleIPMIB.setOrganization(' ')
if mibBuilder.loadTexts: swSingleIPMIB.setContactInfo(' ')
if mibBuilder.loadTexts: swSingleIPMIB.setDescription('The Single IP management MIB.')
swSingleIPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 8, 1))
swSingleIPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 1))
swSingleIPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 2))
swSingleIPVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPVersion.setStatus('current')
if mibBuilder.loadTexts: swSingleIPVersion.setDescription('This object indicates the version of single IP management supported in the system.')
swSingleIPCapability = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCapability.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCapability.setDescription('This object indicates the capability of the switch system.')
swSingleIPPlatform = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPPlatform.setStatus('current')
if mibBuilder.loadTexts: swSingleIPPlatform.setDescription('This object indicates the platform of the switch system.')
swSingleIPAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSingleIPAdmin.setStatus('current')
if mibBuilder.loadTexts: swSingleIPAdmin.setDescription('This object indicates Single IP management is enabled or disabled on the system.')
swSingleIPRoleState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cs", 1), ("cas", 2), ("ms", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSingleIPRoleState.setStatus('current')
if mibBuilder.loadTexts: swSingleIPRoleState.setDescription('This object indicates the role state of the switch system.')
swSingleIPHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSingleIPHoldtime.setStatus('current')
if mibBuilder.loadTexts: swSingleIPHoldtime.setDescription('This object indicate the holdtime of the switch in second . default value is 180 , maximum value is 255 , minimum value is 100. ')
swSingleIPTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 90)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSingleIPTimeInterval.setStatus('current')
if mibBuilder.loadTexts: swSingleIPTimeInterval.setDescription('This object indicate the time interval of the switch in second to periodical send out Single IP protocol control packet. default value is 60 , maximum value is 120 , minimum value is 30 . The swSingleIPTimeInterval will always <= swSingleIPHoldtime/2 ')
swSingleIPMSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3), )
if mibBuilder.loadTexts: swSingleIPMSTable.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSTable.setDescription('This table contain information of member switchs which belong to the single IP management group . A member will be joined into the group by row creation . Before a switch joined into a group as a member switch , it must exist in the candidate table list . ')
swSingleIPMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1), ).setIndexNames((0, "SINGLE-IP-MIB", "swSingleIPMSID"))
if mibBuilder.loadTexts: swSingleIPMSEntry.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSEntry.setDescription('A list of information about member switchs belongs to the single IP management group.')
swSingleIPMSID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSID.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSID.setDescription('The ID of the member switch. When create a SwSingleIPMSEntry entry, this object should fill a value between 1 to 32, but will not be used during create process(Note: The MS-ID is assigned by SingleIP engine). The value of this object will be the correct member ID when query/read.')
swSingleIPMSDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSDeviceName.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSDeviceName.setDescription('Specifies that the name of switch .')
swSingleIPMSMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSMacAddr.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSMacAddr.setDescription('This object Specifies the MAC address of the member switch.')
swSingleIPMSFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSFirmwareVer.setDescription('Specifies the firmware version of the switch .')
swSingleIPMSCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSCapability.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSCapability.setDescription('Specifies the Capability of the switch .')
swSingleIPMSPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSPlatform.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSPlatform.setDescription('Specifies the platform of the switch .')
swSingleIPMSHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSHoldtime.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSHoldtime.setDescription('Specifies the holdtime of Single IP management ptotocol send by this member switch . ')
swSingleIPMSCasSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSingleIPMSCasSource.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSCasSource.setDescription('Specifies the CaS id when create MS entry. The object is used only when create swSingleIPMSEntry. The value always shows 0.')
swSingleIPMSPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSingleIPMSPassword.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSPassword.setDescription('Specifies the Cas password when create MS entry. The object is used only when create swSingleIPMSEntry. The value always shows zero length string.')
swSingleIPMSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSingleIPMSRowStatus.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSRowStatus.setDescription('This object indicates the status of this entry. Create means set CaS to MS, and DESTROY means set MS to CaS')
swSingleIPCaSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4), )
if mibBuilder.loadTexts: swSingleIPCaSTable.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSTable.setDescription('This table contain information of candidate switchs. This table is a read only table list ,all information about candidate switchs will maintain automatically by Single IP topology discovery protocol . ')
swSingleIPCaSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1), ).setIndexNames((0, "SINGLE-IP-MIB", "swSingleIPCaSID"))
if mibBuilder.loadTexts: swSingleIPCaSEntry.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSEntry.setDescription('A list of information about candidate switchs belongs to the single IP management group.')
swSingleIPCaSID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSID.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSID.setDescription('The ID of the candidate switchs in the LAN learned by the command switch .')
swSingleIPCaSDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSDeviceName.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSDeviceName.setDescription('Specifies that the name of switch .')
swSingleIPCaSMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSMacAddr.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSMacAddr.setDescription('This object Specifies the MAC address of the candidate switch.')
swSingleIPCaSFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSFirmwareVer.setDescription('Specifies the firmware version of the switch .')
swSingleIPCaSCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSCapability.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSCapability.setDescription('Specifies the Capability of the switch .')
swSingleIPCaSPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSPlatform.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSPlatform.setDescription('Specifies the platform of the switch .')
swSingleIPCaSHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPCaSHoldtime.setStatus('current')
if mibBuilder.loadTexts: swSingleIPCaSHoldtime.setDescription('Specifies the holdtime of Single IP management ptotocol send by this candidate switch . ')
swSingleIPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5), )
if mibBuilder.loadTexts: swSingleIPGroupTable.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupTable.setDescription('This table contain information of Single IP manaement groups learned by the Command switch . This table is a read only table list ,all information about Single IP groups will maintain automatically by Single IP topology discovery protocol . ')
swSingleIPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1), ).setIndexNames((0, "SINGLE-IP-MIB", "swSingleIPGroupMacAddr"))
if mibBuilder.loadTexts: swSingleIPGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupEntry.setDescription('A list of information about single IP management groups.')
swSingleIPGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupMacAddr.setDescription('This object Specifies the MAC address of the command switch.')
swSingleIPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupName.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupName.setDescription('Specifies that the name of the Single IP management group .')
swSingleIPGroupDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupDeviceName.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupDeviceName.setDescription('Specifies that the name of command switch of the group .')
swSingleIPGroupMSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupMSNumber.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupMSNumber.setDescription('Specifies the member switch number of the group . ')
swSingleIPGroupFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupFirmwareVer.setDescription('Specifies the firmware version of the switch .')
swSingleIPGroupCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupCapability.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupCapability.setDescription('Specifies the Capability of the switch .')
swSingleIPGroupPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupPlatform.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupPlatform.setDescription('Specifies the platform of the switch .')
swSingleIPGroupHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPGroupHoldtime.setStatus('current')
if mibBuilder.loadTexts: swSingleIPGroupHoldtime.setDescription('Specifies the holdtime of Single IP management ptotocol send by this command switch . ')
swSingleIPNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 6), )
if mibBuilder.loadTexts: swSingleIPNeighborTable.setStatus('current')
if mibBuilder.loadTexts: swSingleIPNeighborTable.setDescription('This table contain information of Single IP manaement Neighbors learned by the switch . This table is a read only table list ,all information about Single IP Neighbors will maintain automatically by Single IP topology protocol . ')
swSingleIPNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 6, 1), ).setIndexNames((0, "SINGLE-IP-MIB", "swSingleIPNBReceivedPort"), (0, "SINGLE-IP-MIB", "swSingleIPNBMacAddr"))
if mibBuilder.loadTexts: swSingleIPNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: swSingleIPNeighborEntry.setDescription('A list of information about single IP management Neighbors.')
swSingleIPNBReceivedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPNBReceivedPort.setStatus('current')
if mibBuilder.loadTexts: swSingleIPNBReceivedPort.setDescription('Specifies the received port of the Neighbor switch.')
swSingleIPNBMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPNBMacAddr.setStatus('current')
if mibBuilder.loadTexts: swSingleIPNBMacAddr.setDescription('This object Specifies the MAC address of the Neighbor switch.')
swSingleIPNBRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 8, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commander", 1), ("candidate", 2), ("member", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPNBRoleState.setStatus('current')
if mibBuilder.loadTexts: swSingleIPNBRoleState.setDescription('This object Specifies the role state of the Neighbor switch.')
singleIPMSNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 8, 6))
singleIPMSNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0))
swSingleIPMSColdStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 11)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSColdStart.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSColdStart.setDescription('Commander switch will send swSingleIPMSColdStart notification to indicated host when its Member generate cold start notification.')
swSingleIPMSWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 12)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSWarmStart.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSWarmStart.setDescription('Commander switch will send swSingleIPMSWarmStart notification to indicated host when its Member generate warm start notification.')
swSingleIPMSLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 13)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swSingleIPMSLinkDown.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSLinkDown.setDescription('Commander switch will send swSingleIPMSLinkDown notification to indicated host when its Member generate link down notification.')
swSingleIPMSLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 14)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swSingleIPMSLinkUp.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSLinkUp.setDescription('If Commander switch will send swSingleIPMSLinkUp notification to indicated host when its Member generate link up notification.')
swSingleIPMSAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 15)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSAuthFail.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSAuthFail.setDescription('Commander switch will send swSingleIPMSAuthFail notification to indicated host when it Member generate authentation failure notification.')
swSingleIPMSnewRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 16)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSnewRoot.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSnewRoot.setDescription('Commander switch will send swSingleIPMSnewRoot notification to indicated host when it Member generate new root notification.')
swSingleIPMSTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 17)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSTopologyChange.setDescription('Commander switch will send swSingleIPMSTopologyChange notification to indicated host when it Member generate topology chnage notification.')
swSingleIPMSrisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 18)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSrisingAlarm.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSrisingAlarm.setDescription('Commander switch will send swSingleIPMSrisingAlarm notification to indicated host when it Member generate rising Alarm notification.')
swSingleIPMSfallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 19)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"))
if mibBuilder.loadTexts: swSingleIPMSfallingAlarm.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSfallingAlarm.setDescription('Commander switch will send swSingleIPMSfallingAlarm notification to indicated host when it Member generate falling Alarm notification.')
swSingleIPMSmacNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 20)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("SINGLE-IP-MIB", "swSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: swSingleIPMSmacNotification.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSmacNotification.setDescription('Commander switch will send swSingleIPMSmacNotification notification to indicated host when it Member generate mac addresses variation notification.')
swSingleIPMSPortTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 21)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("IF-MIB", "ifIndex"), ("SINGLE-IP-MIB", "swSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: swSingleIPMSPortTypeChange.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSPortTypeChange.setDescription('Commander switch will send swSingleIPMSPortTypeChange notification to indicated host when it Member generate port type change notification.')
swSingleIPMSPowerStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 22)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("SINGLE-IP-MIB", "swSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: swSingleIPMSPowerStatusChg.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSPowerStatusChg.setDescription('Commander switch will send swSingleIPMSPowerStatusChg notification to indicated host when it Member generate Power Status change notification.')
swSingleIPMSPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 23)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("SINGLE-IP-MIB", "swSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: swSingleIPMSPowerFailure.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSPowerFailure.setDescription('Commander switch will send swSingleIPMSPowerFailure notification to indicated host when it Member generate Power Failure notification.')
swSingleIPMSPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 0, 24)).setObjects(("SINGLE-IP-MIB", "swSingleIPMSID"), ("SINGLE-IP-MIB", "swSingleIPMSMacAddr"), ("SINGLE-IP-MIB", "swSingleIPMSTrapMessage"))
if mibBuilder.loadTexts: swSingleIPMSPowerRecover.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSPowerRecover.setDescription('Commander switch will send swSingleIPMSPowerRecover notification to indicated host when it Member generate Power Recover notification.')
singleIPNotifyBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 1))
swSingleIPMSTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 8, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSingleIPMSTrapMessage.setStatus('current')
if mibBuilder.loadTexts: swSingleIPMSTrapMessage.setDescription('The string that member switch sent.')
mibBuilder.exportSymbols("SINGLE-IP-MIB", swSingleIPVersion=swSingleIPVersion, swSingleIPMgmt=swSingleIPMgmt, swSingleIPMSnewRoot=swSingleIPMSnewRoot, swSingleIPMSTrapMessage=swSingleIPMSTrapMessage, swSingleIPAdmin=swSingleIPAdmin, swSingleIPMSColdStart=swSingleIPMSColdStart, swSingleIPCaSFirmwareVer=swSingleIPCaSFirmwareVer, swSingleIPMSPowerFailure=swSingleIPMSPowerFailure, swSingleIPGroupHoldtime=swSingleIPGroupHoldtime, swSingleIPCaSTable=swSingleIPCaSTable, swSingleIPCaSDeviceName=swSingleIPCaSDeviceName, swSingleIPMSPassword=swSingleIPMSPassword, swSingleIPGroupMSNumber=swSingleIPGroupMSNumber, swSingleIPGroupPlatform=swSingleIPGroupPlatform, swSingleIPMSLinkDown=swSingleIPMSLinkDown, swSingleIPMSCasSource=swSingleIPMSCasSource, swSingleIPMSCapability=swSingleIPMSCapability, swSingleIPInfo=swSingleIPInfo, swSingleIPMSMacAddr=swSingleIPMSMacAddr, swSingleIPGroupEntry=swSingleIPGroupEntry, swSingleIPGroupMacAddr=swSingleIPGroupMacAddr, swSingleIPGroupCapability=swSingleIPGroupCapability, swSingleIPMSTopologyChange=swSingleIPMSTopologyChange, swSingleIPCaSEntry=swSingleIPCaSEntry, swSingleIPMSRowStatus=swSingleIPMSRowStatus, swSingleIPCaSHoldtime=swSingleIPCaSHoldtime, swSingleIPMSDeviceName=swSingleIPMSDeviceName, swSingleIPMSPowerRecover=swSingleIPMSPowerRecover, swSingleIPCaSMacAddr=swSingleIPCaSMacAddr, swSingleIPGroupName=swSingleIPGroupName, swSingleIPNeighborEntry=swSingleIPNeighborEntry, singleIPMSNotify=singleIPMSNotify, swSingleIPCaSID=swSingleIPCaSID, swSingleIPNeighborTable=swSingleIPNeighborTable, singleIPMSNotifyPrefix=singleIPMSNotifyPrefix, swSingleIPMSPlatform=swSingleIPMSPlatform, swSingleIPMSTable=swSingleIPMSTable, swSingleIPPlatform=swSingleIPPlatform, swSingleIPMSmacNotification=swSingleIPMSmacNotification, swSingleIPMSID=swSingleIPMSID, swSingleIPMSWarmStart=swSingleIPMSWarmStart, swSingleIPMSPowerStatusChg=swSingleIPMSPowerStatusChg, PYSNMP_MODULE_ID=swSingleIPMIB, swSingleIPMSAuthFail=swSingleIPMSAuthFail, swSingleIPGroupTable=swSingleIPGroupTable, swSingleIPNBRoleState=swSingleIPNBRoleState, swSingleIPMSPortTypeChange=swSingleIPMSPortTypeChange, swSingleIPCapability=swSingleIPCapability, swSingleIPCtrl=swSingleIPCtrl, swSingleIPCaSCapability=swSingleIPCaSCapability, swSingleIPMSfallingAlarm=swSingleIPMSfallingAlarm, swSingleIPMSrisingAlarm=swSingleIPMSrisingAlarm, swSingleIPMIB=swSingleIPMIB, swSingleIPTimeInterval=swSingleIPTimeInterval, swSingleIPHoldtime=swSingleIPHoldtime, swSingleIPNBMacAddr=swSingleIPNBMacAddr, singleIPNotifyBidings=singleIPNotifyBidings, swSingleIPGroupDeviceName=swSingleIPGroupDeviceName, swSingleIPMSFirmwareVer=swSingleIPMSFirmwareVer, swSingleIPCaSPlatform=swSingleIPCaSPlatform, swSingleIPRoleState=swSingleIPRoleState, swSingleIPMSEntry=swSingleIPMSEntry, swSingleIPNBReceivedPort=swSingleIPNBReceivedPort, swSingleIPMSHoldtime=swSingleIPMSHoldtime, swSingleIPMSLinkUp=swSingleIPMSLinkUp, swSingleIPGroupFirmwareVer=swSingleIPGroupFirmwareVer)
