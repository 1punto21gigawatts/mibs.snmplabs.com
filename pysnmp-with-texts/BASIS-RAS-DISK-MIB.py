#
# PySNMP MIB module BASIS-RAS-DISK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BASIS-RAS-DISK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
axisDiagnostics, = mibBuilder.importSymbols("BASIS-MIB", "axisDiagnostics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Unsigned32, IpAddress, ObjectIdentity, Counter32, iso, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Unsigned32", "IpAddress", "ObjectIdentity", "Counter32", "iso", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Counter64", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rasDsk = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 6, 2))
rasDskStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasDskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rasDskStatus.setDescription('Indicates whether the RAS Disk diagnostics has been Enabled or not. ')
dskHealth = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("unknown", 3), ("testInProgress", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskHealth.setStatus('mandatory')
if mibBuilder.loadTexts: dskHealth.setDescription('Shows the Status of the Hard Disk, which depends on the number of corrupted files and number of Bad sectors in the ASC. The Status is PASS if there are no Corrupted files in the Disk AND the number of Bad Sectors is within the threshold value. If the Disk has one or more Corrupted files OR if the Number of Bad Sectors exceeds the threshold value, the Status is FAIL. If Diagnostics is going on, the Status is TestInProgress. Status will be UNKNOWN until the diagnostics starts for the first time. ')
standbyDskHealth = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("unknown", 3), ("testInProgress", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDskHealth.setStatus('mandatory')
if mibBuilder.loadTexts: standbyDskHealth.setDescription('Shows the Status of the Standby ASC Hard Disk, which depends on the number of corrupted files and number of Bad sectors in the Standby ASC. The Status is UNKNOWN, if there is no Standby ASC in the shelf. ')
wakeupInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 168)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wakeupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wakeupInterval.setDescription('Indicates the RAS Disk diagnostics task Wake up time period, in HOURS. This Interval is configurable between 12 hours and 7 days. If RAS Disk diagnostics is Enabled, the diagnostics starts whenever the wakeupInterval is elapsed. If RAS Disk diagnostics is Enabled AND if the CLI cnfrasdsk is executed, then the Disk diagnostics starts immediately. ')
lastTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTime.setStatus('mandatory')
if mibBuilder.loadTexts: lastTime.setDescription('Shows the Time when the RAS Disk diagnostics was Last done. The format is DD MONTH HH:MM:SS. ')
numBadSectors = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBadSectors.setStatus('mandatory')
if mibBuilder.loadTexts: numBadSectors.setDescription('Indicates the Number of Bad Sectors found in the Disk. ')
crptdPRIfiles = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crptdPRIfiles.setStatus('mandatory')
if mibBuilder.loadTexts: crptdPRIfiles.setDescription('Indicates the Number of SM configuration files, corrupted. ')
crptdFWfiles = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crptdFWfiles.setStatus('mandatory')
if mibBuilder.loadTexts: crptdFWfiles.setDescription('Indicates the Number of FirmWare files, corrupted. ')
mibBuilder.exportSymbols("BASIS-RAS-DISK-MIB", standbyDskHealth=standbyDskHealth, numBadSectors=numBadSectors, wakeupInterval=wakeupInterval, crptdFWfiles=crptdFWfiles, rasDskStatus=rasDskStatus, rasDsk=rasDsk, crptdPRIfiles=crptdPRIfiles, dskHealth=dskHealth, lastTime=lastTime)
