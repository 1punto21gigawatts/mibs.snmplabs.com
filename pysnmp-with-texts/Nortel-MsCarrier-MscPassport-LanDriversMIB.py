#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-LanDriversMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-LanDriversMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
mscLpIndex, mscLp = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex", "mscLp")
FddiTimeNano, FddiMACLongAddressType, InterfaceIndex, StorageType, MacAddress, Unsigned32, DisplayString, Gauge32, FddiTimeMilli, Integer32, Counter32, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "FddiTimeNano", "FddiMACLongAddressType", "InterfaceIndex", "StorageType", "MacAddress", "Unsigned32", "DisplayString", "Gauge32", "FddiTimeMilli", "Integer32", "Counter32", "RowStatus")
AsciiString, PassportCounter64, EnterpriseDateAndTime, NonReplicated, Link = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "AsciiString", "PassportCounter64", "EnterpriseDateAndTime", "NonReplicated", "Link")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, TimeTicks, iso, NotificationType, Unsigned32, Counter64, MibIdentifier, IpAddress, ModuleIdentity, Gauge32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "TimeTicks", "iso", "NotificationType", "Unsigned32", "Counter64", "MibIdentifier", "IpAddress", "ModuleIdentity", "Gauge32", "Counter32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lanDriversMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30))
mscLpEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3))
mscLpEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 1), )
if mibBuilder.loadTexts: mscLpEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnet components.')
mscLpEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnet component.')
mscLpEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnet components. These components can be added and deleted.')
mscLpEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetStorageType.setDescription('This variable represents the storage type value for the mscLpEnet tables.')
mscLpEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: mscLpEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetIndex.setDescription('This variable represents the index for the mscLpEnet tables.')
mscLpEnetCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 10), )
if mibBuilder.loadTexts: mscLpEnetCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscLpEnetCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetCidDataEntry.setDescription('An entry in the mscLpEnetCidDataTable.')
mscLpEnetCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscLpEnetIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 11), )
if mibBuilder.loadTexts: mscLpEnetIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLpEnetIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetIfEntryEntry.setDescription('An entry in the mscLpEnetIfEntryTable.')
mscLpEnetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLpEnetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLpEnetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 12), )
if mibBuilder.loadTexts: mscLpEnetProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetProvTable.setDescription('This group contains provisioned attributes for the Ethernet component.')
mscLpEnetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetProvEntry.setDescription('An entry in the mscLpEnetProvTable.')
mscLpEnetHeartbeatPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetHeartbeatPacket.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetHeartbeatPacket.setDescription('The heartbeat packet feature is used to select whether or not the station will generate a heartbeat packet. If enabled, the station will generate one heartbeat packet every second. If disabled, the station will not generate any heartbeat packets.')
mscLpEnetApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 12, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Ethernet component. This link is used by the component administration system (CAS) to identify which card the application component (associated with the Framer component) is to be created.')
mscLpEnetAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 13), )
if mibBuilder.loadTexts: mscLpEnetAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
mscLpEnetAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetAdminInfoEntry.setDescription('An entry in the mscLpEnetAdminInfoTable.')
mscLpEnetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetVendor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetVendor.setDescription('This is the name of the vendor supplying the facility.')
mscLpEnetCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetCommentText.setDescription('Any miscellaneous text about the facility.')
mscLpEnetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 15), )
if mibBuilder.loadTexts: mscLpEnetStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLpEnetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetStateEntry.setDescription('An entry in the mscLpEnetStateTable.')
mscLpEnetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLpEnetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLpEnetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLpEnetOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 16), )
if mibBuilder.loadTexts: mscLpEnetOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpEnetOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetOperStatusEntry.setDescription('An entry in the mscLpEnetOperStatusTable.')
mscLpEnetSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpEnetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 17), )
if mibBuilder.loadTexts: mscLpEnetOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetOperTable.setDescription('This group contains the operational attributes of the Ethernet component.')
mscLpEnetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetOperEntry.setDescription('An entry in the mscLpEnetOperTable.')
mscLpEnetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 17, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetMacAddress.setDescription('The medium access controller (MAC) address is an address that is only recognized by one station on the network The value of this attribute will be assigned by the system. MAC address is displayed in canonical format.')
mscLpEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18), )
if mibBuilder.loadTexts: mscLpEnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetStatsTable.setDescription('This group contains statistical attributes for the Ethernet component.')
mscLpEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetStatsEntry.setDescription('An entry in the mscLpEnetStatsTable.')
mscLpEnetAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetAlignmentErrors.setDescription('The alignmentErrors counter indicates the number of frames received which were not an integral number of octets in length. Frames will be checked for alignmentErrors before they are checked for Frame Check Sequence (FCS) errors. If there is an alignment error, the error will only be counted here and not in fcsErrors. This counter wraps around after it exceeds its maximum value.')
mscLpEnetFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetFcsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetFcsErrors.setDescription('The fcsErrors, Frame Check Sequence (FCS) error, counter indicates the number of frames received which were an integral number of octets in length and did not pass the FCS check. This counter wraps around after it exceeds its maximum value.')
mscLpEnetSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetSingleCollisionFrames.setDescription('The singleCollisionFrames counter indicates the number of frames successfully transmitted which experienced exactly one collision. This counter wraps around after it exceeds its maximum value.')
mscLpEnetMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetMultipleCollisionFrames.setDescription('The multipleCollisionFrames counter indicates the number of frames successfully transmitted which experienced more than one collision. This counter wraps around after it exceeds its maximum value.')
mscLpEnetSqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetSqeTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetSqeTestErrors.setDescription("The sqeTestErrors, Signal Quality Error (SQE) Test errors, counter indicates the number of times the 'SQE Test Error' message has been generated for the station. This counter wraps around after it exceeds its maximum value.")
mscLpEnetDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetDeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetDeferredTransmissions.setDescription('The deferredTransmissions counter indicates the number of frames which experienced a transmission delay because the medium was busy. This counter wraps around after it exceeds its maximum value.')
mscLpEnetLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLateCollisions.setDescription('The lateCollisions counter indicates the number of times a collision was detected later than 512 bit-times into the transmission of a packet. This counter wraps around after it exceeds its maximum value.')
mscLpEnetExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetExcessiveCollisions.setDescription('The excessiveCollisions counter indicates the number of frames which failed to get transmitted due to excessive collisions. This counter wraps around after it exceeds its maximum value.')
mscLpEnetMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetMacTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetMacTransmitErrors.setDescription('The Medium Access Controller (MAC) transmit error counter indicates the number of times that a transmission failed due to internal MAC transmit errors. This counter wraps around after it exceeds its maximum value.')
mscLpEnetCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetCarrierSenseErrors.setDescription('The carrier sense error counter indicates the number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame. This counter wraps around after it exceeds its maximum value.')
mscLpEnetFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetFrameTooLongs.setDescription('The frame too long counter indicates the number of frames received which exceeded the maximum frame size. This counter wraps around after it exceeds its maximum value.')
mscLpEnetMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetMacReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetMacReceiveErrors.setDescription('The Medium Access Controller (MAC) receive error counter indicates the number of times a receive failed due to internal MAC receive errors. This counter wraps around after it exceeds its maximum value.')
mscLpEnetLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2))
mscLpEnetLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 1), )
if mibBuilder.loadTexts: mscLpEnetLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLt components.')
mscLpEnetLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"))
if mibBuilder.loadTexts: mscLpEnetLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLt component.')
mscLpEnetLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLt components. These components cannot be added nor deleted.')
mscLpEnetLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLt tables.')
mscLpEnetLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtIndex.setDescription('This variable represents the index for the mscLpEnetLt tables.')
mscLpEnetLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 20), )
if mibBuilder.loadTexts: mscLpEnetLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"))
if mibBuilder.loadTexts: mscLpEnetLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtTopEntry.setDescription('An entry in the mscLpEnetLtTopTable.')
mscLpEnetLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2))
mscLpEnetLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFrmCmp components.')
mscLpEnetLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFrmCmp component.')
mscLpEnetLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFrmCmp components. These components cannot be added nor deleted.')
mscLpEnetLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFrmCmp tables.')
mscLpEnetLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpIndex.setDescription('This variable represents the index for the mscLpEnetLtFrmCmp tables.')
mscLpEnetLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpTopEntry.setDescription('An entry in the mscLpEnetLtFrmCmpTopTable.')
mscLpEnetLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3))
mscLpEnetLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFrmCpy components.')
mscLpEnetLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFrmCpy component.')
mscLpEnetLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFrmCpy components. These components cannot be added nor deleted.')
mscLpEnetLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFrmCpy tables.')
mscLpEnetLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyIndex.setDescription('This variable represents the index for the mscLpEnetLtFrmCpy tables.')
mscLpEnetLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyTopEntry.setDescription('An entry in the mscLpEnetLtFrmCpyTopTable.')
mscLpEnetLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4))
mscLpEnetLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtPrtCfg components.')
mscLpEnetLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtPrtCfg component.')
mscLpEnetLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtPrtCfg components. These components cannot be added nor deleted.')
mscLpEnetLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtPrtCfg tables.')
mscLpEnetLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgIndex.setDescription('This variable represents the index for the mscLpEnetLtPrtCfg tables.')
mscLpEnetLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgTopEntry.setDescription('An entry in the mscLpEnetLtPrtCfgTopTable.')
mscLpEnetLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5))
mscLpEnetLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFb components.')
mscLpEnetLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFb component.')
mscLpEnetLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFb components. These components cannot be added nor deleted.')
mscLpEnetLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFb tables.')
mscLpEnetLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIndex.setDescription('This variable represents the index for the mscLpEnetLtFb tables.')
mscLpEnetLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 20), )
if mibBuilder.loadTexts: mscLpEnetLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTopEntry.setDescription('An entry in the mscLpEnetLtFbTopTable.')
mscLpEnetLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2))
mscLpEnetLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbTxInfo components.')
mscLpEnetLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbTxInfo component.')
mscLpEnetLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbTxInfo components. These components cannot be added nor deleted.')
mscLpEnetLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbTxInfo tables.')
mscLpEnetLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoIndex.setDescription('This variable represents the index for the mscLpEnetLtFbTxInfo tables.')
mscLpEnetLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoTopEntry.setDescription('An entry in the mscLpEnetLtFbTxInfoTopTable.')
mscLpEnetLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3))
mscLpEnetLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbFddiMac components.')
mscLpEnetLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbFddiMac component.')
mscLpEnetLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbFddiMac components. These components cannot be added nor deleted.')
mscLpEnetLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbFddiMac tables.')
mscLpEnetLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacIndex.setDescription('This variable represents the index for the mscLpEnetLtFbFddiMac tables.')
mscLpEnetLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacTopEntry.setDescription('An entry in the mscLpEnetLtFbFddiMacTopTable.')
mscLpEnetLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4))
mscLpEnetLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbMacEnet components.')
mscLpEnetLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbMacEnet component.')
mscLpEnetLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbMacEnet components. These components cannot be added nor deleted.')
mscLpEnetLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbMacEnet tables.')
mscLpEnetLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetIndex.setDescription('This variable represents the index for the mscLpEnetLtFbMacEnet tables.')
mscLpEnetLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetTopEntry.setDescription('An entry in the mscLpEnetLtFbMacEnetTopTable.')
mscLpEnetLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5))
mscLpEnetLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbMacTr components.')
mscLpEnetLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbMacTr component.')
mscLpEnetLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbMacTr components. These components cannot be added nor deleted.')
mscLpEnetLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbMacTr tables.')
mscLpEnetLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrIndex.setDescription('This variable represents the index for the mscLpEnetLtFbMacTr tables.')
mscLpEnetLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrTopEntry.setDescription('An entry in the mscLpEnetLtFbMacTrTopTable.')
mscLpEnetLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6))
mscLpEnetLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbData components.')
mscLpEnetLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbData component.')
mscLpEnetLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbData components. These components cannot be added nor deleted.')
mscLpEnetLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbData tables.')
mscLpEnetLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataIndex.setDescription('This variable represents the index for the mscLpEnetLtFbData tables.')
mscLpEnetLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataTopEntry.setDescription('An entry in the mscLpEnetLtFbDataTopTable.')
mscLpEnetLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7))
mscLpEnetLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbIpH components.')
mscLpEnetLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbIpH component.')
mscLpEnetLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbIpH components. These components cannot be added nor deleted.')
mscLpEnetLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbIpH tables.')
mscLpEnetLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHIndex.setDescription('This variable represents the index for the mscLpEnetLtFbIpH tables.')
mscLpEnetLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHTopEntry.setDescription('An entry in the mscLpEnetLtFbIpHTopTable.')
mscLpEnetLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8))
mscLpEnetLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbLlch components.')
mscLpEnetLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbLlch component.')
mscLpEnetLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbLlch components. These components cannot be added nor deleted.')
mscLpEnetLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbLlch tables.')
mscLpEnetLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchIndex.setDescription('This variable represents the index for the mscLpEnetLtFbLlch tables.')
mscLpEnetLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchTopEntry.setDescription('An entry in the mscLpEnetLtFbLlchTopTable.')
mscLpEnetLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9))
mscLpEnetLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbAppleH components.')
mscLpEnetLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbAppleH component.')
mscLpEnetLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbAppleH components. These components cannot be added nor deleted.')
mscLpEnetLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbAppleH tables.')
mscLpEnetLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHIndex.setDescription('This variable represents the index for the mscLpEnetLtFbAppleH tables.')
mscLpEnetLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHTopEntry.setDescription('An entry in the mscLpEnetLtFbAppleHTopTable.')
mscLpEnetLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10))
mscLpEnetLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 1), )
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtFbIpxH components.')
mscLpEnetLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtFbIpxH component.')
mscLpEnetLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtFbIpxH components. These components cannot be added nor deleted.')
mscLpEnetLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtFbIpxH tables.')
mscLpEnetLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHIndex.setDescription('This variable represents the index for the mscLpEnetLtFbIpxH tables.')
mscLpEnetLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 10), )
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHTopEntry.setDescription('An entry in the mscLpEnetLtFbIpxHTopTable.')
mscLpEnetLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6))
mscLpEnetLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 1), )
if mibBuilder.loadTexts: mscLpEnetLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetLtCntl components.')
mscLpEnetLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtCntlIndex"))
if mibBuilder.loadTexts: mscLpEnetLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetLtCntl component.')
mscLpEnetLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetLtCntl components. These components cannot be added nor deleted.')
mscLpEnetLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlStorageType.setDescription('This variable represents the storage type value for the mscLpEnetLtCntl tables.')
mscLpEnetLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlIndex.setDescription('This variable represents the index for the mscLpEnetLtCntl tables.')
mscLpEnetLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 10), )
if mibBuilder.loadTexts: mscLpEnetLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEnetLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetLtCntlIndex"))
if mibBuilder.loadTexts: mscLpEnetLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlTopEntry.setDescription('An entry in the mscLpEnetLtCntlTopTable.')
mscLpEnetLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetLtCntlTData.setDescription('This attribute is used to display and set attributes.')
mscLpEnetTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5))
mscLpEnetTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 1), )
if mibBuilder.loadTexts: mscLpEnetTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEnetTest components.')
mscLpEnetTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetTestIndex"))
if mibBuilder.loadTexts: mscLpEnetTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEnetTest component.')
mscLpEnetTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEnetTest components. These components cannot be added nor deleted.')
mscLpEnetTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEnetTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestStorageType.setDescription('This variable represents the storage type value for the mscLpEnetTest tables.')
mscLpEnetTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEnetTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestIndex.setDescription('This variable represents the index for the mscLpEnetTest tables.')
mscLpEnetTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 10), )
if mibBuilder.loadTexts: mscLpEnetTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
mscLpEnetTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetTestIndex"))
if mibBuilder.loadTexts: mscLpEnetTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestPTOEntry.setDescription('An entry in the mscLpEnetTestPTOTable.')
mscLpEnetTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
mscLpEnetTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
mscLpEnetTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEnetTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
mscLpEnetTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11), )
if mibBuilder.loadTexts: mscLpEnetTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
mscLpEnetTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEnetTestIndex"))
if mibBuilder.loadTexts: mscLpEnetTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestResultsEntry.setDescription('An entry in the mscLpEnetTestResultsTable.')
mscLpEnetTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
mscLpEnetTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
mscLpEnetTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
mscLpEnetTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
mscLpEnetTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
mscLpEnetTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpEnetTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpEnetTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 3, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEnetTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEnetTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpFi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4))
mscLpFiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 1), )
if mibBuilder.loadTexts: mscLpFiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFi components.')
mscLpFiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFi component.')
mscLpFiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFi components. These components can be added and deleted.')
mscLpFiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiStorageType.setDescription('This variable represents the storage type value for the mscLpFi tables.')
mscLpFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpFiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiIndex.setDescription('This variable represents the index for the mscLpFi tables.')
mscLpFiCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 10), )
if mibBuilder.loadTexts: mscLpFiCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscLpFiCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiCidDataEntry.setDescription('An entry in the mscLpFiCidDataTable.')
mscLpFiCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscLpFiIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 11), )
if mibBuilder.loadTexts: mscLpFiIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLpFiIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiIfEntryEntry.setDescription('An entry in the mscLpFiIfEntryTable.')
mscLpFiIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLpFiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLpFiSmtProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12), )
if mibBuilder.loadTexts: mscLpFiSmtProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiSmtProvTable.setDescription('This group contains the provisionable Station Management (SMT) attributes of the Fddi component.')
mscLpFiSmtProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiSmtProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiSmtProvEntry.setDescription('An entry in the mscLpFiSmtProvTable.')
mscLpFiUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="46444449")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiUserData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiUserData.setDescription('The user data field is used to identify the FDDI interface on the ring. The user data contains a message with a maximum of 32 characters.')
mscLpFiAcceptAa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiAcceptAa.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAcceptAa.setDescription('The acceptAa attribute defines the station type A to station type A connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
mscLpFiAcceptBb = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiAcceptBb.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAcceptBb.setDescription('The acceptBb attribute defines the station type B to station type B connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
mscLpFiAcceptAs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiAcceptAs.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAcceptAs.setDescription('The acceptAs attribute defines the station type A to station type S connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
mscLpFiAcceptBs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiAcceptBs.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAcceptBs.setDescription('The acceptBs attribute defines the station type B to station type S connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
mscLpFiAcceptAm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiAcceptAm.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAcceptAm.setDescription('The acceptAm attribute defines the station type A to station type M connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
mscLpFiAcceptBm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiAcceptBm.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAcceptBm.setDescription('The acceptBm attribute defines the station type B to station type M connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
mscLpFiUseThruBa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiUseThruBa.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiUseThruBa.setDescription('The useThruBa attribute is used to configure the requested path of the associated station. If enabled, only the secondary preferred path is permitted. If disabled, only the primary preferred path is permitted.')
mscLpFiNeighborNotifyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiNeighborNotifyInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNeighborNotifyInterval.setDescription('The neighborNotifyInterval attribute contains the amount of time, expressed in seconds, between neighbor notification frames.')
mscLpFiStatusReportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiStatusReportPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiStatusReportPolicy.setDescription('The statusReportPolicy attribute indicates whether or not the station will generate status reporting frames for its implemented events and conditions. If true, the station will generate the status frames. If false, the station will not generate the status frames.')
mscLpFiTraceMaxExpirationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 12), FddiTimeMilli().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(7000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiTraceMaxExpirationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTraceMaxExpirationTimer.setDescription('The traceMaxExpirationTimer attribute is used to configure the maximum propagation time, expressed in milliseconds, for a trace on a FDDI topology. This value places a lower bound on the detection time for an unrecovered ring.')
mscLpFiApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 12, 1, 13), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Fddi component. This defines which LanApplication/n Framer will be using this Fddi interface.')
mscLpFiMacProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 13), )
if mibBuilder.loadTexts: mscLpFiMacProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacProvTable.setDescription('This group contains the provisionable MAC attributes of the Fddi component.')
mscLpFiMacProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiMacProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacProvEntry.setDescription('An entry in the mscLpFiMacProvTable.')
mscLpFiTokenRequestTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 13, 1, 1), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(20480, 1340000000)).clone(165290000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiTokenRequestTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTokenRequestTimer.setDescription('The tokenRequestTimer value contains the token request value assigned to the associated medium access controller (MAC). Warning: Changes to this attribute can have adverse effects on the performance of the FDDI ring. Therefore it is recommended that this parameter only be modified by personnel with a thorough understanding of the consequences that may result from changes to this attribute.')
mscLpFiTokenMaxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 13, 1, 2), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(40960, 1342200000)).clone(167770000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiTokenMaxTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTokenMaxTimer.setDescription('The tokenMaxTimer value is the maximum timer value the negotiated token rotation time may assume. Warning: Changes to this attribute can have adverse effects on the performance of the FDDI ring. Therefore it is recommended that this parameter only be modified by personnel with a thorough understanding of the consequences that may result from changes to this attribute.')
mscLpFiValidTransmissionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 13, 1, 3), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(40960, 1342200000)).clone(2621400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiValidTransmissionTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiValidTransmissionTimer.setDescription('The validTransmissionTimer (Tvx) value specifies the amount of time required for a valid transmission. The station must receive a valid transmission once every Tvx. Warning: Changes to this attribute can have adverse effects on the performance of the FDDI ring. Therefore it is recommended that this parameter only be modified by personnel with a thorough understanding of the consequences that may result from changes to this attribute.')
mscLpFiAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 14), )
if mibBuilder.loadTexts: mscLpFiAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
mscLpFiAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAdminInfoEntry.setDescription('An entry in the mscLpFiAdminInfoTable.')
mscLpFiVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 14, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiVendor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiVendor.setDescription('This is the name of the vendor supplying the facility.')
mscLpFiCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 14, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiCommentText.setDescription('Any miscellaneous text about the facility.')
mscLpFiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 16), )
if mibBuilder.loadTexts: mscLpFiStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLpFiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiStateEntry.setDescription('An entry in the mscLpFiStateTable.')
mscLpFiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLpFiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLpFiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLpFiOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 17), )
if mibBuilder.loadTexts: mscLpFiOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpFiOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiOperStatusEntry.setDescription('An entry in the mscLpFiOperStatusTable.')
mscLpFiSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpFiSmtOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 18), )
if mibBuilder.loadTexts: mscLpFiSmtOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiSmtOperTable.setDescription('This group contains the operational station management (SMT) attributes of the Fddi component.')
mscLpFiSmtOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiSmtOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiSmtOperEntry.setDescription('An entry in the mscLpFiSmtOperTable.')
mscLpFiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 18, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiVersion.setDescription('The version attribute contains a copy of the currently supported version numbers of the management information base (MIB) and the station management (SMT).')
mscLpFiBypassPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiBypassPresent.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiBypassPresent.setDescription('The bypassPresent attribute indicates whether the optical bypass switch is present on its AB port pair. If true, the optical bypass switch is present. If false, it is not present.')
mscLpFiEcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("out", 1), ("in", 2), ("trace", 3), ("leave", 4), ("pathTest", 5), ("insert", 6), ("check", 7), ("deinsert", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiEcmState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiEcmState.setDescription('The ecmState, Entity Coordination Manager (ECM), state indicates the current state of the ECM state machine.')
mscLpFiCfState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("isolated", 1), ("localA", 2), ("localB", 3), ("localAB", 4), ("localS", 5), ("wrapA", 6), ("wrapB", 7), ("wrapAB", 8), ("wrapS", 9), ("cWrapA", 10), ("cWrapB", 11), ("cWrapS", 12), ("thru", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiCfState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiCfState.setDescription('The cfState attribute indicates the current state of the configuration management (CFM) state machine.')
mscLpFiMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19), )
if mibBuilder.loadTexts: mscLpFiMacOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacOperTable.setDescription('This group contains the operational Medium Access Controller (MAC) attributes of the of the Fddi component.')
mscLpFiMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiMacOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacOperEntry.setDescription('An entry in the mscLpFiMacOperTable.')
mscLpFiRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1342000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiRingLatency.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiRingLatency.setDescription('The ringLatency attribute contains the measured ring latency of the ring the station is attached to.')
mscLpFiMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 10), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacAddress.setDescription('The medium access controller (MAC) address is an address that is recognized by only one station on the attached ring. The value of this attribute is assigned by the system. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncMacAddress.')
mscLpFiUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 11), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiUpstreamNeighbor.setDescription('The upstreamNeighbor attribute contains the MAC address associated with the upstream neighbor station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncUpstreamNeighbor.')
mscLpFiDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 12), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiDownstreamNeighbor.setDescription('The downstreamNeighbor attribute contains the MAC address associated with the downstream station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncDownstreamNeighbor.')
mscLpFiOldUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 13), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiOldUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiOldUpstreamNeighbor.setDescription('The oldUpstreamNeighbor attribute contains the previous value of the MAC address associated with the upstream station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncOldUpstreamNeighbor.')
mscLpFiOldDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 14), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiOldDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiOldDownstreamNeighbor.setDescription('The oldDownstreamNeighbor attribute contains the previous value of the MAC address associated with the downstream station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncOldDownstreamNeighbor.')
mscLpFiDupAddressTest = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDone", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiDupAddressTest.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiDupAddressTest.setDescription('The dupAddressTest attribute indicates the condition results of the duplicate address test. If notDone, the test has not been executed. If pass, the test has successfully executed. If fail, the test has failed.')
mscLpFiTokenNegotiatedTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 18), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(80, 1340000000)).clone(167772000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTokenNegotiatedTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTokenNegotiatedTimer.setDescription('The tokenNegotiatedTimer specifies the negotiated token rotation time.')
mscLpFiFrameCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiFrameCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiFrameCounts.setDescription('The frameCounts attribute contains the number of frames that have been received by the station. This counter will wrap around after it reaches its maximum value.')
mscLpFiCopiedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiCopiedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiCopiedCounts.setDescription("The copiedCounts attribute contains the number of frames successfully copied into this station's receive buffers, not including MAC control frames. This counter will wrap around after it reaches its maximum value.")
mscLpFiTransmitCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTransmitCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTransmitCounts.setDescription('The transmitCounts attribute contains the number of frames transmitted by this station, not including MAC control frames. This counter will wrap around after it reaches its maximum value.')
mscLpFiErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiErrorCounts.setDescription('The errorCounts attribute contains the number of error frames first detected by this station. This counter will wrap around after it reaches its maximum value.')
mscLpFiLostCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLostCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLostCounts.setDescription('The lostCounts attribute contains the number of instances that the station has detected a format error during frame reception such that the frame was stripped. This counter will wrap around after it reaches its maximum value.')
mscLpFiRmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 1), ("nonOp", 2), ("ringOp", 3), ("detect", 4), ("nonOpDup", 5), ("ringOpDup", 6), ("directed", 7), ("trace", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiRmtState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiRmtState.setDescription('The rmtState, ring management (RMT), state indicates the current state of the RMT state machine.')
mscLpFiFrameErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 19, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiFrameErrorFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiFrameErrorFlag.setDescription('The frameErrorFlag attribute indicates the MAC frame error condition status. If true, a MAC frame error is present. If false, a MAC frame error condition is not present.')
mscLpFiMacCOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20), )
if mibBuilder.loadTexts: mscLpFiMacCOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacCOperTable.setDescription('This group contains the operational attributes of the Medium Access Controller (MAC) Counters Table of the Fddi component.')
mscLpFiMacCOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiMacCOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiMacCOperEntry.setDescription('An entry in the mscLpFiMacCOperTable.')
mscLpFiTokenCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTokenCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTokenCounts.setDescription('The tokenCounts attribute contains the number of times the station has received a token. This counter will wrap around after it reaches its maximum value.')
mscLpFiTvxExpiredCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTvxExpiredCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTvxExpiredCounts.setDescription('The tvxExpiredCounts, Transmission Valid eXpired (TVX), attribute contains the number of times that TVX timer has expired. This counter may increment as stations go on and off the ring. A rapidly increasing value may indicate a problem. This counter will wrap around after it reaches its maximum value.')
mscLpFiNotCopiedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiNotCopiedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNotCopiedCounts.setDescription('The notCopiedCounts attribute contains the number of times that the station has detected a frame addressed to itself but did not copy it due to local buffer congestion. This counter will wrap around after it reaches its maximum value.')
mscLpFiLateCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLateCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLateCounts.setDescription('The lateCounts attribute contains the number of token rotation time (TRT) expirations since the station was reset or a token was received. This counter may increment as stations go on and off the ring. A rapidly increasing value may indicate a problem. This counter will wrap around after it reaches its maximum value.')
mscLpFiRingOpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiRingOpCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiRingOpCounts.setDescription('The ringOpCounts attribute contains the number of times the station has made the transition from the ring not operational state to the ring operational state.')
mscLpFiNcMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26), )
if mibBuilder.loadTexts: mscLpFiNcMacOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcMacOperTable.setDescription('This group contains the operational attributes of the Fddi component related to non-canonical MAC addresses.')
mscLpFiNcMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"))
if mibBuilder.loadTexts: mscLpFiNcMacOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcMacOperEntry.setDescription('An entry in the mscLpFiNcMacOperTable.')
mscLpFiNcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiNcMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcMacAddress.setDescription('The medium access controller (MAC) address is an address that is recognized by only one station on the attached ring. The value of this attribute is assigned by the system. This attribute is displayed in non- canonical format. The canonical version of this address is indicated in macAddress.')
mscLpFiNcUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiNcUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcUpstreamNeighbor.setDescription('The ncUpstreamNeighbor attribute contains the MAC address associated with the upstream neighbor station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in upstreamNeighbor.')
mscLpFiNcDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiNcDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcDownstreamNeighbor.setDescription('The ncDownstreamNeighbor attribute contains the MAC address associated with the downstream station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in downstreamNeighbor')
mscLpFiNcOldUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiNcOldUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcOldUpstreamNeighbor.setDescription('The ncOldUpstreamNeighbor attribute contains the previous value of the MAC address associated with the upstream station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in oldUpstreamNeighbor.')
mscLpFiNcOldDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 26, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiNcOldDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiNcOldDownstreamNeighbor.setDescription('The ncOldDownstreamNeighbor attribute contains the previous value of the MAC address associated with the downstream station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in oldDownstreamNeighbor.')
mscLpFiLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2))
mscLpFiLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 1), )
if mibBuilder.loadTexts: mscLpFiLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLt components.')
mscLpFiLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"))
if mibBuilder.loadTexts: mscLpFiLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLt component.')
mscLpFiLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLt components. These components cannot be added nor deleted.')
mscLpFiLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtStorageType.setDescription('This variable represents the storage type value for the mscLpFiLt tables.')
mscLpFiLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtIndex.setDescription('This variable represents the index for the mscLpFiLt tables.')
mscLpFiLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 20), )
if mibBuilder.loadTexts: mscLpFiLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"))
if mibBuilder.loadTexts: mscLpFiLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtTopEntry.setDescription('An entry in the mscLpFiLtTopTable.')
mscLpFiLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2))
mscLpFiLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpFiLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFrmCmp components.')
mscLpFiLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpFiLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFrmCmp component.')
mscLpFiLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFrmCmp components. These components cannot be added nor deleted.')
mscLpFiLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFrmCmp tables.')
mscLpFiLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpIndex.setDescription('This variable represents the index for the mscLpFiLtFrmCmp tables.')
mscLpFiLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpFiLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpFiLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpTopEntry.setDescription('An entry in the mscLpFiLtFrmCmpTopTable.')
mscLpFiLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3))
mscLpFiLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpFiLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFrmCpy components.')
mscLpFiLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpFiLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFrmCpy component.')
mscLpFiLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFrmCpy components. These components cannot be added nor deleted.')
mscLpFiLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFrmCpy tables.')
mscLpFiLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyIndex.setDescription('This variable represents the index for the mscLpFiLtFrmCpy tables.')
mscLpFiLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpFiLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpFiLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyTopEntry.setDescription('An entry in the mscLpFiLtFrmCpyTopTable.')
mscLpFiLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4))
mscLpFiLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpFiLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtPrtCfg components.')
mscLpFiLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpFiLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtPrtCfg component.')
mscLpFiLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtPrtCfg components. These components cannot be added nor deleted.')
mscLpFiLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtPrtCfg tables.')
mscLpFiLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgIndex.setDescription('This variable represents the index for the mscLpFiLtPrtCfg tables.')
mscLpFiLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpFiLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpFiLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgTopEntry.setDescription('An entry in the mscLpFiLtPrtCfgTopTable.')
mscLpFiLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5))
mscLpFiLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFb components.')
mscLpFiLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFb component.')
mscLpFiLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFb components. These components cannot be added nor deleted.')
mscLpFiLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFb tables.')
mscLpFiLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIndex.setDescription('This variable represents the index for the mscLpFiLtFb tables.')
mscLpFiLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 20), )
if mibBuilder.loadTexts: mscLpFiLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTopEntry.setDescription('An entry in the mscLpFiLtFbTopTable.')
mscLpFiLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2))
mscLpFiLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbTxInfo components.')
mscLpFiLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbTxInfo component.')
mscLpFiLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbTxInfo components. These components cannot be added nor deleted.')
mscLpFiLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbTxInfo tables.')
mscLpFiLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoIndex.setDescription('This variable represents the index for the mscLpFiLtFbTxInfo tables.')
mscLpFiLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoTopEntry.setDescription('An entry in the mscLpFiLtFbTxInfoTopTable.')
mscLpFiLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3))
mscLpFiLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbFddiMac components.')
mscLpFiLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbFddiMac component.')
mscLpFiLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbFddiMac components. These components cannot be added nor deleted.')
mscLpFiLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbFddiMac tables.')
mscLpFiLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacIndex.setDescription('This variable represents the index for the mscLpFiLtFbFddiMac tables.')
mscLpFiLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacTopEntry.setDescription('An entry in the mscLpFiLtFbFddiMacTopTable.')
mscLpFiLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4))
mscLpFiLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbMacEnet components.')
mscLpFiLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbMacEnet component.')
mscLpFiLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbMacEnet components. These components cannot be added nor deleted.')
mscLpFiLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbMacEnet tables.')
mscLpFiLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetIndex.setDescription('This variable represents the index for the mscLpFiLtFbMacEnet tables.')
mscLpFiLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetTopEntry.setDescription('An entry in the mscLpFiLtFbMacEnetTopTable.')
mscLpFiLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5))
mscLpFiLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbMacTr components.')
mscLpFiLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbMacTr component.')
mscLpFiLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbMacTr components. These components cannot be added nor deleted.')
mscLpFiLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbMacTr tables.')
mscLpFiLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrIndex.setDescription('This variable represents the index for the mscLpFiLtFbMacTr tables.')
mscLpFiLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrTopEntry.setDescription('An entry in the mscLpFiLtFbMacTrTopTable.')
mscLpFiLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6))
mscLpFiLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbData components.')
mscLpFiLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbData component.')
mscLpFiLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbData components. These components cannot be added nor deleted.')
mscLpFiLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbData tables.')
mscLpFiLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataIndex.setDescription('This variable represents the index for the mscLpFiLtFbData tables.')
mscLpFiLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataTopEntry.setDescription('An entry in the mscLpFiLtFbDataTopTable.')
mscLpFiLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7))
mscLpFiLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbIpH components.')
mscLpFiLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbIpH component.')
mscLpFiLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbIpH components. These components cannot be added nor deleted.')
mscLpFiLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbIpH tables.')
mscLpFiLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHIndex.setDescription('This variable represents the index for the mscLpFiLtFbIpH tables.')
mscLpFiLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHTopEntry.setDescription('An entry in the mscLpFiLtFbIpHTopTable.')
mscLpFiLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8))
mscLpFiLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbLlch components.')
mscLpFiLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbLlch component.')
mscLpFiLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbLlch components. These components cannot be added nor deleted.')
mscLpFiLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbLlch tables.')
mscLpFiLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchIndex.setDescription('This variable represents the index for the mscLpFiLtFbLlch tables.')
mscLpFiLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchTopEntry.setDescription('An entry in the mscLpFiLtFbLlchTopTable.')
mscLpFiLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9))
mscLpFiLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbAppleH components.')
mscLpFiLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbAppleH component.')
mscLpFiLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbAppleH components. These components cannot be added nor deleted.')
mscLpFiLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbAppleH tables.')
mscLpFiLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHIndex.setDescription('This variable represents the index for the mscLpFiLtFbAppleH tables.')
mscLpFiLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHTopEntry.setDescription('An entry in the mscLpFiLtFbAppleHTopTable.')
mscLpFiLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10))
mscLpFiLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 1), )
if mibBuilder.loadTexts: mscLpFiLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtFbIpxH components.')
mscLpFiLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtFbIpxH component.')
mscLpFiLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtFbIpxH components. These components cannot be added nor deleted.')
mscLpFiLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtFbIpxH tables.')
mscLpFiLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHIndex.setDescription('This variable represents the index for the mscLpFiLtFbIpxH tables.')
mscLpFiLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 10), )
if mibBuilder.loadTexts: mscLpFiLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpFiLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHTopEntry.setDescription('An entry in the mscLpFiLtFbIpxHTopTable.')
mscLpFiLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6))
mscLpFiLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 1), )
if mibBuilder.loadTexts: mscLpFiLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiLtCntl components.')
mscLpFiLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtCntlIndex"))
if mibBuilder.loadTexts: mscLpFiLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiLtCntl component.')
mscLpFiLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiLtCntl components. These components cannot be added nor deleted.')
mscLpFiLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlStorageType.setDescription('This variable represents the storage type value for the mscLpFiLtCntl tables.')
mscLpFiLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlIndex.setDescription('This variable represents the index for the mscLpFiLtCntl tables.')
mscLpFiLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 10), )
if mibBuilder.loadTexts: mscLpFiLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpFiLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiLtCntlIndex"))
if mibBuilder.loadTexts: mscLpFiLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlTopEntry.setDescription('An entry in the mscLpFiLtCntlTopTable.')
mscLpFiLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiLtCntlTData.setDescription('This attribute is used to display and set attributes.')
mscLpFiPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3))
mscLpFiPhyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 1), )
if mibBuilder.loadTexts: mscLpFiPhyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiPhy components.')
mscLpFiPhyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiPhyFddiPhyTypeIndex"))
if mibBuilder.loadTexts: mscLpFiPhyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiPhy component.')
mscLpFiPhyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiPhyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiPhy components. These components can be added.')
mscLpFiPhyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiPhyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyStorageType.setDescription('This variable represents the storage type value for the mscLpFiPhy tables.')
mscLpFiPhyFddiPhyTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("a", 0), ("b", 1))))
if mibBuilder.loadTexts: mscLpFiPhyFddiPhyTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyFddiPhyTypeIndex.setDescription('This variable represents the index for the mscLpFiPhy tables.')
mscLpFiPhyProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 10), )
if mibBuilder.loadTexts: mscLpFiPhyProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyProvTable.setDescription('This group contains the provisionable attributes of the Fddi Phy component.')
mscLpFiPhyProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiPhyFddiPhyTypeIndex"))
if mibBuilder.loadTexts: mscLpFiPhyProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyProvEntry.setDescription('An entry in the mscLpFiPhyProvTable.')
mscLpFiPhyLerCutoff = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiPhyLerCutoff.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLerCutoff.setDescription('The lerCutoff attribute contains the link error rate estimate at which a link connection will be broken. The values will range from 10**-4 to 10**-15. Only the absolute value of the base 10 log is reported.')
mscLpFiPhyLerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiPhyLerAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLerAlarm.setDescription('The lerAlarm attribute contains the link error rate estimate at which a link connection will generate an alarm. The values will range from 10**-4 to 10**-15. Only the absolute value of the base 10 log is reported')
mscLpFiPhyLinkErrorMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiPhyLinkErrorMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLinkErrorMonitor.setDescription('The linkErrorMonitor attribute is used to select the state of the link error monitor for the associated Phy component. If enabled, the link error monitor will send the correct test status to the neighboring station. If disabled, the link error monitor will always send a test passed status to the neighboring station.')
mscLpFiPhyOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11), )
if mibBuilder.loadTexts: mscLpFiPhyOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyOperTable.setDescription('This group contains the operational attributes of the Fddi Phy component.')
mscLpFiPhyOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiPhyFddiPhyTypeIndex"))
if mibBuilder.loadTexts: mscLpFiPhyOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyOperEntry.setDescription('An entry in the mscLpFiPhyOperTable.')
mscLpFiPhyNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyNeighborType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyNeighborType.setDescription('This attribute indicates the neighbor type of the neighbor physical layer.')
mscLpFiPhyLctFailCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyLctFailCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLctFailCounts.setDescription('The lctFailCounts attribute contains the number of consecutive times the Link Confidence Test (LCT) has failed. This counter will wrap around after it reaches its maximum value.')
mscLpFiPhyLerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyLerEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLerEstimate.setDescription('The lerEstimate attribute contains a long term average link error rate. The values will range from 10**-4 to 10**-15. Only the absolute value of the base 10 log is reported')
mscLpFiPhyLemRejectCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyLemRejectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLemRejectCounts.setDescription('The lemRejectCounts attribute contains the number of times that a link has been rejected. This counter will wrap around after it reaches its maximum value.')
mscLpFiPhyLemCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyLemCounts.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLemCounts.setDescription('The lemCounts attribute contains the aggregate link error monitor error count. This counter is set to zero only on station initialization. This counter will wrap around after it reaches its maximum value.')
mscLpFiPhyPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("off", 1), ("break", 2), ("trace", 3), ("connect", 4), ("next", 5), ("signal", 6), ("join", 7), ("verify", 8), ("active", 9), ("maint", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyPcmState.setDescription('The pcmState, physical connection manager (PCM), state indicates the current state of the PCM state machine.')
mscLpFiPhyLerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhyLerFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhyLerFlag.setDescription('The lerFlag attribute indicates when the link error rate estimate is less than or equal to the link error rate alarm. If true, the value of the link error rate estimate is less than or equal to the link error rate alarm. If false, the value of the link error rate estimate is greater than the link error rate alarm.')
mscLpFiPhySignalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("escape", 0), ("phyTypeL", 1), ("phyTypeH", 2), ("accept", 3), ("lctLengthL", 4), ("lctLengthH", 5), ("macAvail", 6), ("lctResult", 7), ("macLoop", 8), ("macOnPhy", 9), ("signalingDone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhySignalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhySignalState.setDescription('The signalState attribute contains the current physical connection manager (PCM) signal bit being transmitted, or was transmitted, during the PCM signal state.')
mscLpFiPhySignalBitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhySignalBitsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhySignalBitsRcvd.setDescription('The signalBitsRcvd attribute contains the current physical connection manager (PCM) signal bits received. Description of bits: escape(0) phyTypeL(1) phyTypeH(2) accept(3) lctLengthL(4) lctLengthH(5) macAvail(6) lctResult(7) macLoop(8) macOnPhy(9)')
mscLpFiPhySignalBitsTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 3, 11, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiPhySignalBitsTxmt.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiPhySignalBitsTxmt.setDescription('The signalBitsTxmt attribute contains the current physical connection manager (PCM) signal bits transmitted. Description of bits: escape(0) phyTypeL(1) phyTypeH(2) accept(3) lctLengthL(4) lctLengthH(5) macAvail(6) lctResult(7) macLoop(8) macOnPhy(9)')
mscLpFiTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5))
mscLpFiTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 1), )
if mibBuilder.loadTexts: mscLpFiTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpFiTest components.')
mscLpFiTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiTestIndex"))
if mibBuilder.loadTexts: mscLpFiTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestRowStatusEntry.setDescription('A single entry in the table represents a single mscLpFiTest component.')
mscLpFiTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpFiTest components. These components cannot be added nor deleted.')
mscLpFiTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpFiTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestStorageType.setDescription('This variable represents the storage type value for the mscLpFiTest tables.')
mscLpFiTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpFiTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestIndex.setDescription('This variable represents the index for the mscLpFiTest tables.')
mscLpFiTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 10), )
if mibBuilder.loadTexts: mscLpFiTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
mscLpFiTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiTestIndex"))
if mibBuilder.loadTexts: mscLpFiTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestPTOEntry.setDescription('An entry in the mscLpFiTestPTOTable.')
mscLpFiTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
mscLpFiTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
mscLpFiTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpFiTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
mscLpFiTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11), )
if mibBuilder.loadTexts: mscLpFiTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
mscLpFiTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpFiTestIndex"))
if mibBuilder.loadTexts: mscLpFiTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestResultsEntry.setDescription('An entry in the mscLpFiTestResultsTable.')
mscLpFiTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
mscLpFiTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
mscLpFiTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
mscLpFiTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
mscLpFiTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
mscLpFiTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpFiTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpFiTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 4, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpFiTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpFiTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13))
mscLpTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 1), )
if mibBuilder.loadTexts: mscLpTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTr components.')
mscLpTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTr component.')
mscLpTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTr components. These components can be added and deleted.')
mscLpTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrStorageType.setDescription('This variable represents the storage type value for the mscLpTr tables.')
mscLpTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: mscLpTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrIndex.setDescription('This variable represents the index for the mscLpTr tables.')
mscLpTrCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 10), )
if mibBuilder.loadTexts: mscLpTrCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscLpTrCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrCidDataEntry.setDescription('An entry in the mscLpTrCidDataTable.')
mscLpTrCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscLpTrIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 11), )
if mibBuilder.loadTexts: mscLpTrIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLpTrIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrIfEntryEntry.setDescription('An entry in the mscLpTrIfEntryTable.')
mscLpTrIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLpTrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLpTrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12), )
if mibBuilder.loadTexts: mscLpTrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrProvTable.setDescription('This group contains the provisionable attributes of the Token Ring port.')
mscLpTrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrProvEntry.setDescription('An entry in the mscLpTrProvTable.')
mscLpTrRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("fourMegabit", 3), ("sixteenMegabit", 4))).clone('sixteenMegabit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRingSpeed.setDescription('This attribute indicates the ring speed at the next insertion into the ring. Note that all the interfaces on a ring must operate at the same speed.')
mscLpTrMonitorParticipate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrMonitorParticipate.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrMonitorParticipate.setDescription('This attribute determines whether the interface will participate in the active monitor selection process.')
mscLpTrFunctionalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="0300feff8f01")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrFunctionalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrFunctionalAddress.setDescription('This attribute contains a bit mask of all token ring functional addresses for which this interface will accept frames. The address is displayed in canonical form.')
mscLpTrNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrNodeAddress.setDescription('This attribute identifies the primary, node specific address recognized by this interface. If an operator does not provision a MAC address, the interface will use a predefined, permanently assigned address. A valid node address must not be any of the following: a broadcast address, a group address, a functional address or a null address. A node address should be entered in the canonical form.')
mscLpTrGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="030001000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrGroupAddress.setDescription('This attribute identifies the group address for which this interface will accept frames. The address is displayed in canonical form. For a valid group address, the least significant bit of the first octet should be set to 1. Currently, only one group address can be provisioned for one interface.')
mscLpTrProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 18)).clone(hexValue="4c414e20546f6b656e2052696e67")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrProductId.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrProductId.setDescription('This attribute is used to identify the host system attached to this interface. This information is transmitted in response to Request Station Attachment MAC frames.')
mscLpTrApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 12, 1, 7), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Tr component.')
mscLpTrAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 13), )
if mibBuilder.loadTexts: mscLpTrAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
mscLpTrAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrAdminInfoEntry.setDescription('An entry in the mscLpTrAdminInfoTable.')
mscLpTrVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrVendor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrVendor.setDescription('This is the name of the vendor supplying the facility.')
mscLpTrCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrCommentText.setDescription('Any miscellaneous text about the facility.')
mscLpTrStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 15), )
if mibBuilder.loadTexts: mscLpTrStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLpTrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrStateEntry.setDescription('An entry in the mscLpTrStateTable.')
mscLpTrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLpTrOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLpTrUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLpTrOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 16), )
if mibBuilder.loadTexts: mscLpTrOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpTrOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrOperStatusEntry.setDescription('An entry in the mscLpTrOperStatusTable.')
mscLpTrSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpTrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17), )
if mibBuilder.loadTexts: mscLpTrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrOperTable.setDescription('This group contains the operational attributes of the Token Ring component.')
mscLpTrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrOperEntry.setDescription('An entry in the mscLpTrOperTable.')
mscLpTrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrMacAddress.setDescription('This attribute contains the actual MAC address. The value is assigned by the system if nodeAddress is not provisioned. This address is displayed in canonical form. The non-canonical version of this address is indicated in ncMacAddress.')
mscLpTrRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openFailure", 5), ("ringFailure", 6))).clone('ringFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrRingState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRingState.setDescription('This attribute contains the value of the current interface state with respect to entering or leaving the ring.')
mscLpTrRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000040")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRingStatus.setDescription('This attribute contains the value of the current interface status after the station has entered the ring. The value is a sum of values, one for each currently applicable condition. Before the station attempts an open this attribute has the value of noStatus. noProblems = 0, ringRecovery = 32, singleStation = 64, removeReceived = 256, reserved = 512, autoRemovalError = 1024, lobeWireFault = 2048, transmitBeacon = 4096, softError = 8192, hardError = 16384, signalLoss = 32768, noStatus = 131072 Description of bits: noProblems(0) notused1(1) notused2(2) notused3(3) notused4(4) ringRecovery(5) singleStation(6) notused7(7) removeReceived(8) reserved(9) autoRemovalError(10) lobeWireFault(11) transmitBeacon(12) softError(13) hardError(14) signalLoss(15) notused16(16) noStatus(17)')
mscLpTrRingOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMac", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11))).clone('noOpen')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrRingOpenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRingOpenStatus.setDescription('This attribute indicates what happened the last time the station attempted to enter into the ring.')
mscLpTrUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 7), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrUpStream.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrUpStream.setDescription("This attribute is the MAC address of the station's up-stream neighbor. This address is displayed in canonical form. The non- canonical version of this address is indicated in ncUpStream.")
mscLpTrChipSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ibm16", 1), ("titms380", 2), ("titms380c16", 3), ("titms380c26", 4))).clone('titms380c16')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrChipSet.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrChipSet.setDescription('This attribute identifies the hardware chip set in use by an interface.')
mscLpTrLastTimeBeaconSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 17, 1, 10), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLastTimeBeaconSent.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLastTimeBeaconSent.setDescription('This attribute indicates the time at which a Beacon frame was last transmitted on this interface.')
mscLpTrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18), )
if mibBuilder.loadTexts: mscLpTrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrStatsTable.setDescription('This group contains statistical information for the Token Ring port.')
mscLpTrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrStatsEntry.setDescription('An entry in the mscLpTrStatsTable.')
mscLpTrLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLineErrors.setDescription('This attribute contains the number of frames or tokens copied or repeated by a station where there is a non-data bit or a FCS error. This counter wraps around when the maximum value is reached.')
mscLpTrBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrBurstErrors.setDescription('This attribute contains the number of times the station detects the absence of transitions for five consecutive half-bit times. This counter wraps around when the maximum value is reached.')
mscLpTrAcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrAcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrAcErrors.setDescription('This attribute contains the number of times that a station can not set the AC bits properly. This counter wraps around when the maximum value is reached.')
mscLpTrAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrAbortTransErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrAbortTransErrors.setDescription('This attribute contains the number of aborted frames. This counter wraps around when the maximum value is reached.')
mscLpTrInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrInternalErrors.setDescription('This attribute contains the number of internal errors. When the value of the counter soars up quickly, it indicates a potential hardware problem. This counter wraps around when the maximum value is reached.')
mscLpTrLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLostFrameErrors.setDescription('This attribute contains the number of times a station is transmitting and its TRR timer expires. This counter wraps around when the maximum value is reached.')
mscLpTrReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrReceiveCongestions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrReceiveCongestions.setDescription('This attribute contains the number of times a station is supposed to receive a frame but cannot due to lack of buffer space. This counter wraps around when the maximum value is reached.')
mscLpTrFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrFrameCopiedErrors.setDescription('This attribute contains the number of times a station receives a frame addressed to its specific address and detects that the A bit is set. This counter wraps around when the maximum value is reached.')
mscLpTrTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTokenErrors.setDescription('This attribute contains the number of times a station acting as the active monitor recognizes an error condition that needs a token transmission. This counter wraps around when the maximum value is reached.')
mscLpTrSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrSoftErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrSoftErrors.setDescription('This attribute contains the number of soft errors or the number of Report Error Mac frames the station has transmitted. This counter wraps around when the maximum value is reached.')
mscLpTrHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrHardErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrHardErrors.setDescription('This attribute contains the number of times this interface has detected an immediately recoverable fatal error. This counter wraps around when the maximum value is reached.')
mscLpTrSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrSignalLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrSignalLoss.setDescription('This attribute contains the number of times signal condition has been lost. This counter wraps around when the maximum value is reached.')
mscLpTrTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTransmitBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTransmitBeacons.setDescription('This attribute contains the number of beacon frames transmitted. This counter wraps around when the maximum value is reached.')
mscLpTrRingRecoverys = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrRingRecoverys.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRingRecoverys.setDescription('This attribute contains the number of times the ring has been purged. This counter wraps around when the maximum value is reached.')
mscLpTrLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLobeWires.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLobeWires.setDescription('This attribute contains the number of times the interface has detected a short circuit in the lobe data path. This counter wraps around when the maximum value is reached.')
mscLpTrRemoveRings = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrRemoveRings.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrRemoveRings.setDescription('This attribute contains the number of Remove Ring Station Mac frames received. This counter wraps around when the maximum value is reached.')
mscLpTrSingleStation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrSingleStation.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrSingleStation.setDescription('This attribute contains the number of times the station has determined it is the only one on the ring. This is not necessarily an error. This counter wraps around when the maximum value is reached.')
mscLpTrFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrFreqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrFreqErrors.setDescription('This attribute contains the number of signal frequency errors detected. This counter wraps around when the maximum value is reached.')
mscLpTrNcMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 20), )
if mibBuilder.loadTexts: mscLpTrNcMacOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrNcMacOperTable.setDescription('This group contains the operational attributes of the TokenRing port component related to non-canonical MAC addresses.')
mscLpTrNcMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"))
if mibBuilder.loadTexts: mscLpTrNcMacOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrNcMacOperEntry.setDescription('An entry in the mscLpTrNcMacOperTable.')
mscLpTrNcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 20, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrNcMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrNcMacAddress.setDescription('This attribute contains the actual MAC address. The value is assigned by the system if nodeAddress is not provisioned. This address is displayed in non-canonical form. The canonical version of this address is indicated in macAddress.')
mscLpTrNcUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 20, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrNcUpStream.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrNcUpStream.setDescription("This attribute is the MAC address of the station's up-stream neighbor. This address is displayed in non-canonical form. The canonical version of this address is indicated in upStream.")
mscLpTrLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2))
mscLpTrLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 1), )
if mibBuilder.loadTexts: mscLpTrLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLt components.')
mscLpTrLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"))
if mibBuilder.loadTexts: mscLpTrLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLt component.')
mscLpTrLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLt components. These components cannot be added nor deleted.')
mscLpTrLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtStorageType.setDescription('This variable represents the storage type value for the mscLpTrLt tables.')
mscLpTrLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtIndex.setDescription('This variable represents the index for the mscLpTrLt tables.')
mscLpTrLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 20), )
if mibBuilder.loadTexts: mscLpTrLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"))
if mibBuilder.loadTexts: mscLpTrLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtTopEntry.setDescription('An entry in the mscLpTrLtTopTable.')
mscLpTrLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2))
mscLpTrLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpTrLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFrmCmp components.')
mscLpTrLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpTrLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFrmCmp component.')
mscLpTrLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFrmCmp components. These components cannot be added nor deleted.')
mscLpTrLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFrmCmp tables.')
mscLpTrLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpIndex.setDescription('This variable represents the index for the mscLpTrLtFrmCmp tables.')
mscLpTrLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpTrLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpTrLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpTopEntry.setDescription('An entry in the mscLpTrLtFrmCmpTopTable.')
mscLpTrLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3))
mscLpTrLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpTrLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFrmCpy components.')
mscLpTrLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpTrLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFrmCpy component.')
mscLpTrLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFrmCpy components. These components cannot be added nor deleted.')
mscLpTrLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFrmCpy tables.')
mscLpTrLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyIndex.setDescription('This variable represents the index for the mscLpTrLtFrmCpy tables.')
mscLpTrLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpTrLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpTrLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyTopEntry.setDescription('An entry in the mscLpTrLtFrmCpyTopTable.')
mscLpTrLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4))
mscLpTrLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpTrLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtPrtCfg components.')
mscLpTrLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpTrLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtPrtCfg component.')
mscLpTrLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtPrtCfg components. These components cannot be added nor deleted.')
mscLpTrLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtPrtCfg tables.')
mscLpTrLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgIndex.setDescription('This variable represents the index for the mscLpTrLtPrtCfg tables.')
mscLpTrLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpTrLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpTrLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgTopEntry.setDescription('An entry in the mscLpTrLtPrtCfgTopTable.')
mscLpTrLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5))
mscLpTrLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFb components.')
mscLpTrLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFb component.')
mscLpTrLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFb components. These components cannot be added nor deleted.')
mscLpTrLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFb tables.')
mscLpTrLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIndex.setDescription('This variable represents the index for the mscLpTrLtFb tables.')
mscLpTrLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 20), )
if mibBuilder.loadTexts: mscLpTrLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTopEntry.setDescription('An entry in the mscLpTrLtFbTopTable.')
mscLpTrLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2))
mscLpTrLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbTxInfo components.')
mscLpTrLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbTxInfo component.')
mscLpTrLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbTxInfo components. These components cannot be added nor deleted.')
mscLpTrLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbTxInfo tables.')
mscLpTrLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoIndex.setDescription('This variable represents the index for the mscLpTrLtFbTxInfo tables.')
mscLpTrLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoTopEntry.setDescription('An entry in the mscLpTrLtFbTxInfoTopTable.')
mscLpTrLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3))
mscLpTrLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbFddiMac components.')
mscLpTrLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbFddiMac component.')
mscLpTrLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbFddiMac components. These components cannot be added nor deleted.')
mscLpTrLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbFddiMac tables.')
mscLpTrLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacIndex.setDescription('This variable represents the index for the mscLpTrLtFbFddiMac tables.')
mscLpTrLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacTopEntry.setDescription('An entry in the mscLpTrLtFbFddiMacTopTable.')
mscLpTrLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4))
mscLpTrLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbMacEnet components.')
mscLpTrLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbMacEnet component.')
mscLpTrLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbMacEnet components. These components cannot be added nor deleted.')
mscLpTrLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbMacEnet tables.')
mscLpTrLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetIndex.setDescription('This variable represents the index for the mscLpTrLtFbMacEnet tables.')
mscLpTrLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetTopEntry.setDescription('An entry in the mscLpTrLtFbMacEnetTopTable.')
mscLpTrLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5))
mscLpTrLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbMacTr components.')
mscLpTrLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbMacTr component.')
mscLpTrLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbMacTr components. These components cannot be added nor deleted.')
mscLpTrLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbMacTr tables.')
mscLpTrLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrIndex.setDescription('This variable represents the index for the mscLpTrLtFbMacTr tables.')
mscLpTrLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrTopEntry.setDescription('An entry in the mscLpTrLtFbMacTrTopTable.')
mscLpTrLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6))
mscLpTrLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbData components.')
mscLpTrLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbData component.')
mscLpTrLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbData components. These components cannot be added nor deleted.')
mscLpTrLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbData tables.')
mscLpTrLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataIndex.setDescription('This variable represents the index for the mscLpTrLtFbData tables.')
mscLpTrLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataTopEntry.setDescription('An entry in the mscLpTrLtFbDataTopTable.')
mscLpTrLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7))
mscLpTrLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbIpH components.')
mscLpTrLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbIpH component.')
mscLpTrLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbIpH components. These components cannot be added nor deleted.')
mscLpTrLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbIpH tables.')
mscLpTrLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHIndex.setDescription('This variable represents the index for the mscLpTrLtFbIpH tables.')
mscLpTrLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHTopEntry.setDescription('An entry in the mscLpTrLtFbIpHTopTable.')
mscLpTrLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8))
mscLpTrLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbLlch components.')
mscLpTrLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbLlch component.')
mscLpTrLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbLlch components. These components cannot be added nor deleted.')
mscLpTrLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbLlch tables.')
mscLpTrLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchIndex.setDescription('This variable represents the index for the mscLpTrLtFbLlch tables.')
mscLpTrLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchTopEntry.setDescription('An entry in the mscLpTrLtFbLlchTopTable.')
mscLpTrLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9))
mscLpTrLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbAppleH components.')
mscLpTrLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbAppleH component.')
mscLpTrLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbAppleH components. These components cannot be added nor deleted.')
mscLpTrLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbAppleH tables.')
mscLpTrLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHIndex.setDescription('This variable represents the index for the mscLpTrLtFbAppleH tables.')
mscLpTrLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHTopEntry.setDescription('An entry in the mscLpTrLtFbAppleHTopTable.')
mscLpTrLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10))
mscLpTrLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 1), )
if mibBuilder.loadTexts: mscLpTrLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtFbIpxH components.')
mscLpTrLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtFbIpxH component.')
mscLpTrLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtFbIpxH components. These components cannot be added nor deleted.')
mscLpTrLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtFbIpxH tables.')
mscLpTrLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHIndex.setDescription('This variable represents the index for the mscLpTrLtFbIpxH tables.')
mscLpTrLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 10), )
if mibBuilder.loadTexts: mscLpTrLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpTrLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHTopEntry.setDescription('An entry in the mscLpTrLtFbIpxHTopTable.')
mscLpTrLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6))
mscLpTrLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 1), )
if mibBuilder.loadTexts: mscLpTrLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrLtCntl components.')
mscLpTrLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtCntlIndex"))
if mibBuilder.loadTexts: mscLpTrLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrLtCntl component.')
mscLpTrLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrLtCntl components. These components cannot be added nor deleted.')
mscLpTrLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlStorageType.setDescription('This variable represents the storage type value for the mscLpTrLtCntl tables.')
mscLpTrLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlIndex.setDescription('This variable represents the index for the mscLpTrLtCntl tables.')
mscLpTrLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 10), )
if mibBuilder.loadTexts: mscLpTrLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpTrLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrLtCntlIndex"))
if mibBuilder.loadTexts: mscLpTrLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlTopEntry.setDescription('An entry in the mscLpTrLtCntlTopTable.')
mscLpTrLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrLtCntlTData.setDescription('This attribute is used to display and set attributes.')
mscLpTrTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5))
mscLpTrTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 1), )
if mibBuilder.loadTexts: mscLpTrTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpTrTest components.')
mscLpTrTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrTestIndex"))
if mibBuilder.loadTexts: mscLpTrTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestRowStatusEntry.setDescription('A single entry in the table represents a single mscLpTrTest component.')
mscLpTrTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpTrTest components. These components cannot be added nor deleted.')
mscLpTrTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpTrTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestStorageType.setDescription('This variable represents the storage type value for the mscLpTrTest tables.')
mscLpTrTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpTrTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestIndex.setDescription('This variable represents the index for the mscLpTrTest tables.')
mscLpTrTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 10), )
if mibBuilder.loadTexts: mscLpTrTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
mscLpTrTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrTestIndex"))
if mibBuilder.loadTexts: mscLpTrTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestPTOEntry.setDescription('An entry in the mscLpTrTestPTOTable.')
mscLpTrTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
mscLpTrTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
mscLpTrTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpTrTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
mscLpTrTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11), )
if mibBuilder.loadTexts: mscLpTrTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
mscLpTrTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpTrTestIndex"))
if mibBuilder.loadTexts: mscLpTrTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestResultsEntry.setDescription('An entry in the mscLpTrTestResultsTable.')
mscLpTrTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
mscLpTrTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
mscLpTrTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
mscLpTrTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
mscLpTrTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
mscLpTrTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpTrTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpTrTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 13, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTrTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpTrTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpIlsFwdr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21))
mscLpIlsFwdrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdr components.')
mscLpIlsFwdrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdr component.')
mscLpIlsFwdrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdr components. These components can be added and deleted.')
mscLpIlsFwdrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdr tables.')
mscLpIlsFwdrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpIlsFwdrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrIndex.setDescription('This variable represents the index for the mscLpIlsFwdr tables.')
mscLpIlsFwdrIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 11), )
if mibBuilder.loadTexts: mscLpIlsFwdrIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLpIlsFwdrIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrIfEntryEntry.setDescription('An entry in the mscLpIlsFwdrIfEntryTable.')
mscLpIlsFwdrIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLpIlsFwdrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLpIlsFwdrStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 12), )
if mibBuilder.loadTexts: mscLpIlsFwdrStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLpIlsFwdrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrStateEntry.setDescription('An entry in the mscLpIlsFwdrStateTable.')
mscLpIlsFwdrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLpIlsFwdrOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLpIlsFwdrUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLpIlsFwdrOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 13), )
if mibBuilder.loadTexts: mscLpIlsFwdrOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpIlsFwdrOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrOperStatusEntry.setDescription('An entry in the mscLpIlsFwdrOperStatusTable.')
mscLpIlsFwdrSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpIlsFwdrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 14), )
if mibBuilder.loadTexts: mscLpIlsFwdrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrStatsTable.setDescription('This group contains the operational frame statistics related attributes of the IlsForwarder component.')
mscLpIlsFwdrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrStatsEntry.setDescription('An entry in the mscLpIlsFwdrStatsTable.')
mscLpIlsFwdrFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrFramesReceived.setDescription('This attribute counts the total number of frames that have been received by this card. This counter will wrap around after it reaches its maximum value.')
mscLpIlsFwdrProcessedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrProcessedCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrProcessedCount.setDescription('This attribute counts the number of frames successfully processed by this card. This counter will wrap around after it reaches its maximum value.')
mscLpIlsFwdrErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 14, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrErrorCount.setDescription('This attribute counts the number of internal errors detected in transferring frames from an ATM card to this card. A continuous increment of this count indicates that the hardware may probably be defective. This counter will wrap around after it reaches its maximum value.')
mscLpIlsFwdrFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 14, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrFramesDiscarded.setDescription('This attribute counts the number of frames which are discarded due to local buffer congestion. This counter will wrap around after it reaches its maximum value.')
mscLpIlsFwdrLinkToTrafficSourceTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 312), )
if mibBuilder.loadTexts: mscLpIlsFwdrLinkToTrafficSourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLinkToTrafficSourceTable.setDescription('This attribute contains a list of components that are using this IlsForwarder.')
mscLpIlsFwdrLinkToTrafficSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 312, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLinkToTrafficSourceValue"))
if mibBuilder.loadTexts: mscLpIlsFwdrLinkToTrafficSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLinkToTrafficSourceEntry.setDescription('An entry in the mscLpIlsFwdrLinkToTrafficSourceTable.')
mscLpIlsFwdrLinkToTrafficSourceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 312, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLinkToTrafficSourceValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLinkToTrafficSourceValue.setDescription('This variable represents both the value and the index for the mscLpIlsFwdrLinkToTrafficSourceTable.')
mscLpIlsFwdrLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2))
mscLpIlsFwdrLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLt components.')
mscLpIlsFwdrLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLt component.')
mscLpIlsFwdrLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLt components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLt tables.')
mscLpIlsFwdrLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLt tables.')
mscLpIlsFwdrLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 20), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtTopEntry.setDescription('An entry in the mscLpIlsFwdrLtTopTable.')
mscLpIlsFwdrLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2))
mscLpIlsFwdrLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFrmCmp components.')
mscLpIlsFwdrLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFrmCmp component.')
mscLpIlsFwdrLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFrmCmp components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFrmCmp tables.')
mscLpIlsFwdrLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFrmCmp tables.')
mscLpIlsFwdrLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFrmCmpTopTable.')
mscLpIlsFwdrLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3))
mscLpIlsFwdrLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFrmCpy components.')
mscLpIlsFwdrLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFrmCpy component.')
mscLpIlsFwdrLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFrmCpy components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFrmCpy tables.')
mscLpIlsFwdrLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFrmCpy tables.')
mscLpIlsFwdrLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFrmCpyTopTable.')
mscLpIlsFwdrLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4))
mscLpIlsFwdrLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtPrtCfg components.')
mscLpIlsFwdrLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtPrtCfg component.')
mscLpIlsFwdrLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtPrtCfg components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtPrtCfg tables.')
mscLpIlsFwdrLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtPrtCfg tables.')
mscLpIlsFwdrLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgTopEntry.setDescription('An entry in the mscLpIlsFwdrLtPrtCfgTopTable.')
mscLpIlsFwdrLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5))
mscLpIlsFwdrLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFb components.')
mscLpIlsFwdrLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFb component.')
mscLpIlsFwdrLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFb components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFb tables.')
mscLpIlsFwdrLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFb tables.')
mscLpIlsFwdrLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 20), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbTopTable.')
mscLpIlsFwdrLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2))
mscLpIlsFwdrLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbTxInfo components.')
mscLpIlsFwdrLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbTxInfo component.')
mscLpIlsFwdrLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbTxInfo components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbTxInfo tables.')
mscLpIlsFwdrLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbTxInfo tables.')
mscLpIlsFwdrLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbTxInfoTopTable.')
mscLpIlsFwdrLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3))
mscLpIlsFwdrLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbFddiMac components.')
mscLpIlsFwdrLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbFddiMac component.')
mscLpIlsFwdrLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbFddiMac components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbFddiMac tables.')
mscLpIlsFwdrLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbFddiMac tables.')
mscLpIlsFwdrLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbFddiMacTopTable.')
mscLpIlsFwdrLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4))
mscLpIlsFwdrLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbMacEnet components.')
mscLpIlsFwdrLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbMacEnet component.')
mscLpIlsFwdrLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbMacEnet components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbMacEnet tables.')
mscLpIlsFwdrLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbMacEnet tables.')
mscLpIlsFwdrLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbMacEnetTopTable.')
mscLpIlsFwdrLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5))
mscLpIlsFwdrLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbMacTr components.')
mscLpIlsFwdrLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbMacTr component.')
mscLpIlsFwdrLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbMacTr components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbMacTr tables.')
mscLpIlsFwdrLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbMacTr tables.')
mscLpIlsFwdrLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbMacTrTopTable.')
mscLpIlsFwdrLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6))
mscLpIlsFwdrLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbData components.')
mscLpIlsFwdrLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbData component.')
mscLpIlsFwdrLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbData components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbData tables.')
mscLpIlsFwdrLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbData tables.')
mscLpIlsFwdrLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbDataIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbDataTopTable.')
mscLpIlsFwdrLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7))
mscLpIlsFwdrLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbIpH components.')
mscLpIlsFwdrLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbIpH component.')
mscLpIlsFwdrLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbIpH components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbIpH tables.')
mscLpIlsFwdrLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbIpH tables.')
mscLpIlsFwdrLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbIpHTopTable.')
mscLpIlsFwdrLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8))
mscLpIlsFwdrLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbLlch components.')
mscLpIlsFwdrLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbLlch component.')
mscLpIlsFwdrLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbLlch components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbLlch tables.')
mscLpIlsFwdrLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbLlch tables.')
mscLpIlsFwdrLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbLlchTopTable.')
mscLpIlsFwdrLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9))
mscLpIlsFwdrLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbAppleH components.')
mscLpIlsFwdrLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbAppleH component.')
mscLpIlsFwdrLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbAppleH components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbAppleH tables.')
mscLpIlsFwdrLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbAppleH tables.')
mscLpIlsFwdrLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbAppleHTopTable.')
mscLpIlsFwdrLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10))
mscLpIlsFwdrLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtFbIpxH components.')
mscLpIlsFwdrLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtFbIpxH component.')
mscLpIlsFwdrLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtFbIpxH components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtFbIpxH tables.')
mscLpIlsFwdrLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtFbIpxH tables.')
mscLpIlsFwdrLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHTopEntry.setDescription('An entry in the mscLpIlsFwdrLtFbIpxHTopTable.')
mscLpIlsFwdrLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6))
mscLpIlsFwdrLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrLtCntl components.')
mscLpIlsFwdrLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtCntlIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrLtCntl component.')
mscLpIlsFwdrLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrLtCntl components. These components cannot be added nor deleted.')
mscLpIlsFwdrLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrLtCntl tables.')
mscLpIlsFwdrLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlIndex.setDescription('This variable represents the index for the mscLpIlsFwdrLtCntl tables.')
mscLpIlsFwdrLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpIlsFwdrLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrLtCntlIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlTopEntry.setDescription('An entry in the mscLpIlsFwdrLtCntlTopTable.')
mscLpIlsFwdrLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrLtCntlTData.setDescription('This attribute is used to display and set attributes.')
mscLpIlsFwdrTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5))
mscLpIlsFwdrTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 1), )
if mibBuilder.loadTexts: mscLpIlsFwdrTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpIlsFwdrTest components.')
mscLpIlsFwdrTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrTestIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestRowStatusEntry.setDescription('A single entry in the table represents a single mscLpIlsFwdrTest component.')
mscLpIlsFwdrTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpIlsFwdrTest components. These components cannot be added nor deleted.')
mscLpIlsFwdrTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpIlsFwdrTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestStorageType.setDescription('This variable represents the storage type value for the mscLpIlsFwdrTest tables.')
mscLpIlsFwdrTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpIlsFwdrTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestIndex.setDescription('This variable represents the index for the mscLpIlsFwdrTest tables.')
mscLpIlsFwdrTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 10), )
if mibBuilder.loadTexts: mscLpIlsFwdrTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
mscLpIlsFwdrTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrTestIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestPTOEntry.setDescription('An entry in the mscLpIlsFwdrTestPTOTable.')
mscLpIlsFwdrTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
mscLpIlsFwdrTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
mscLpIlsFwdrTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpIlsFwdrTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
mscLpIlsFwdrTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11), )
if mibBuilder.loadTexts: mscLpIlsFwdrTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
mscLpIlsFwdrTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpIlsFwdrTestIndex"))
if mibBuilder.loadTexts: mscLpIlsFwdrTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestResultsEntry.setDescription('An entry in the mscLpIlsFwdrTestResultsTable.')
mscLpIlsFwdrTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
mscLpIlsFwdrTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
mscLpIlsFwdrTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
mscLpIlsFwdrTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
mscLpIlsFwdrTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
mscLpIlsFwdrTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpIlsFwdrTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpIlsFwdrTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 21, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpIlsFwdrTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpIlsFwdrTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpEth100 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25))
mscLpEth100RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 1), )
if mibBuilder.loadTexts: mscLpEth100RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100RowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100 components.')
mscLpEth100RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100RowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100 component.')
mscLpEth100RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100RowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100 components. These components can be added and deleted.')
mscLpEth100ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100StorageType.setDescription('This variable represents the storage type value for the mscLpEth100 tables.')
mscLpEth100Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: mscLpEth100Index.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100Index.setDescription('This variable represents the index for the mscLpEth100 tables.')
mscLpEth100CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 10), )
if mibBuilder.loadTexts: mscLpEth100CidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100CidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscLpEth100CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100CidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100CidDataEntry.setDescription('An entry in the mscLpEth100CidDataTable.')
mscLpEth100CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100CustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100CustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscLpEth100IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 11), )
if mibBuilder.loadTexts: mscLpEth100IfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100IfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLpEth100IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100IfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100IfEntryEntry.setDescription('An entry in the mscLpEth100IfEntryTable.')
mscLpEth100IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100IfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100IfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLpEth100IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100IfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLpEth100ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 12), )
if mibBuilder.loadTexts: mscLpEth100ProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ProvTable.setDescription('This group contains the provisionable attributes of the Eth100BaseT component.')
mscLpEth100ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100ProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ProvEntry.setDescription('An entry in the mscLpEth100ProvTable.')
mscLpEth100DuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2))).clone('half')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100DuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100DuplexMode.setDescription('This attribute specifies the duplex mode of the port. This attribute is ignored if auto negotiation is successful.')
mscLpEth100LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LineSpeed.setDescription('This attribute sets the operating speed for the Ethernet 100BaseT port. This attribute is ignored if auto negotiation is successful.')
mscLpEth100AutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100AutoNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100AutoNegotiation.setDescription('This attribute is used to select whether or not the port does auto negotiation. The provisionable values of duplexMode and lineSpeed are ignored if auto negotiation is successful. Refer to the operational attribute autoNegStatus for auto negotiation results.')
mscLpEth100ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 12, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100ApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Eth100BaseT component. This defines which Lan Application will be using this Eth100BaseT interface.')
mscLpEth100AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 13), )
if mibBuilder.loadTexts: mscLpEth100AdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100AdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
mscLpEth100AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100AdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100AdminInfoEntry.setDescription('An entry in the mscLpEth100AdminInfoTable.')
mscLpEth100Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100Vendor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100Vendor.setDescription('This is the name of the vendor supplying the facility.')
mscLpEth100CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100CommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100CommentText.setDescription('Any miscellaneous text about the facility.')
mscLpEth100StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 15), )
if mibBuilder.loadTexts: mscLpEth100StateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100StateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLpEth100StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100StateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100StateEntry.setDescription('An entry in the mscLpEth100StateTable.')
mscLpEth100AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100AdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100AdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLpEth100OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLpEth100UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100UsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLpEth100OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 16), )
if mibBuilder.loadTexts: mscLpEth100OperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpEth100OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100OperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OperStatusEntry.setDescription('An entry in the mscLpEth100OperStatusTable.')
mscLpEth100SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100SnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100SnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpEth100OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 17), )
if mibBuilder.loadTexts: mscLpEth100OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OperTable.setDescription('This group contains the Port operational attributes of the Eth100BaseT component.')
mscLpEth100OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OperEntry.setDescription('An entry in the mscLpEth100OperTable.')
mscLpEth100MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 17, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100MacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100MacAddress.setDescription('This attribute indicates the medium access controller (MAC) address. The MAC address is displayed in canonical format.')
mscLpEth100AutoNegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100AutoNegStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100AutoNegStatus.setDescription('This attribute displays the status of the auto negotiation at the Phy level.')
mscLpEth100ActualLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100ActualLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ActualLineSpeed.setDescription('This attribute indicates the line speed of the Eth100BaseT port.')
mscLpEth100ActualDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100ActualDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ActualDuplexMode.setDescription('This attribute indicates whether the hardware is in half duplex or full duplex mode.')
mscLpEth100Eth100StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18), )
if mibBuilder.loadTexts: mscLpEth100Eth100StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100Eth100StatsTable.setDescription('This group contains the statistical attributes for the Eth100BaseT component.')
mscLpEth100Eth100StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100Eth100StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100Eth100StatsEntry.setDescription('An entry in the mscLpEth100Eth100StatsTable.')
mscLpEth100FramesTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100FramesTransmittedOk.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100FramesTransmittedOk.setDescription('This attribute counts the number of frames which were transmitted without errors. This counter wraps to zero after it reaches its maximum value.')
mscLpEth100FramesReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100FramesReceivedOk.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100FramesReceivedOk.setDescription('This attribute counts the number of frames which were received without errors. This counter wraps to zero after it reaches its maximum value.')
mscLpEth100OctetsTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100OctetsTransmittedOk.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OctetsTransmittedOk.setDescription('This attribute counts the number of octets which were transmitted without errors. This counter wraps to zero after it reaches its maximum value.')
mscLpEth100OctetsReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100OctetsReceivedOk.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100OctetsReceivedOk.setDescription('This attribute counts the number of octets which were received without errors. This counter wraps to zero after it reaches its maximum value.')
mscLpEth100UndersizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100UndersizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100UndersizeFrames.setDescription('This attribute counts the number of frames that were received but were less than the minimum size (64 bytes). This counter wraps to zero after it reaches its maximum value.')
mscLpEth100ReceivedOctetsIntoRouterBr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100ReceivedOctetsIntoRouterBr.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ReceivedOctetsIntoRouterBr.setDescription('This attribute counts the number of octets that were not hardware switched but were passed the Router or Bridge software. This counter wraps to zero after it reaches its maximum value.')
mscLpEth100ReceivedFramesIntoRouterBr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100ReceivedFramesIntoRouterBr.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ReceivedFramesIntoRouterBr.setDescription('This attribute counts the number of frames which were not hardware switched but were passed to the Router or Bridge software. This counter wraps to zero after it reaches its maximum value.')
mscLpEth100StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19), )
if mibBuilder.loadTexts: mscLpEth100StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100StatsTable.setDescription('This group contains statistical attributes for the Ethernet component.')
mscLpEth100StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"))
if mibBuilder.loadTexts: mscLpEth100StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100StatsEntry.setDescription('An entry in the mscLpEth100StatsTable.')
mscLpEth100AlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100AlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100AlignmentErrors.setDescription('The alignmentErrors counter indicates the number of frames received which were not an integral number of octets in length. Frames will be checked for alignmentErrors before they are checked for Frame Check Sequence (FCS) errors. If there is an alignment error, the error will only be counted here and not in fcsErrors. This counter wraps around after it exceeds its maximum value.')
mscLpEth100FcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100FcsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100FcsErrors.setDescription('The fcsErrors, Frame Check Sequence (FCS) error, counter indicates the number of frames received which were an integral number of octets in length and did not pass the FCS check. This counter wraps around after it exceeds its maximum value.')
mscLpEth100SingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100SingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100SingleCollisionFrames.setDescription('The singleCollisionFrames counter indicates the number of frames successfully transmitted which experienced exactly one collision. This counter wraps around after it exceeds its maximum value.')
mscLpEth100MultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100MultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100MultipleCollisionFrames.setDescription('The multipleCollisionFrames counter indicates the number of frames successfully transmitted which experienced more than one collision. This counter wraps around after it exceeds its maximum value.')
mscLpEth100SqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100SqeTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100SqeTestErrors.setDescription("The sqeTestErrors, Signal Quality Error (SQE) Test errors, counter indicates the number of times the 'SQE Test Error' message has been generated for the station. This counter wraps around after it exceeds its maximum value.")
mscLpEth100DeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100DeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100DeferredTransmissions.setDescription('The deferredTransmissions counter indicates the number of frames which experienced a transmission delay because the medium was busy. This counter wraps around after it exceeds its maximum value.')
mscLpEth100LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LateCollisions.setDescription('The lateCollisions counter indicates the number of times a collision was detected later than 512 bit-times into the transmission of a packet. This counter wraps around after it exceeds its maximum value.')
mscLpEth100ExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100ExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100ExcessiveCollisions.setDescription('The excessiveCollisions counter indicates the number of frames which failed to get transmitted due to excessive collisions. This counter wraps around after it exceeds its maximum value.')
mscLpEth100MacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100MacTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100MacTransmitErrors.setDescription('The Medium Access Controller (MAC) transmit error counter indicates the number of times that a transmission failed due to internal MAC transmit errors. This counter wraps around after it exceeds its maximum value.')
mscLpEth100CarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100CarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100CarrierSenseErrors.setDescription('The carrier sense error counter indicates the number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame. This counter wraps around after it exceeds its maximum value.')
mscLpEth100FrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100FrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100FrameTooLongs.setDescription('The frame too long counter indicates the number of frames received which exceeded the maximum frame size. This counter wraps around after it exceeds its maximum value.')
mscLpEth100MacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100MacReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100MacReceiveErrors.setDescription('The Medium Access Controller (MAC) receive error counter indicates the number of times a receive failed due to internal MAC receive errors. This counter wraps around after it exceeds its maximum value.')
mscLpEth100Lt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2))
mscLpEth100LtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 1), )
if mibBuilder.loadTexts: mscLpEth100LtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100Lt components.')
mscLpEth100LtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"))
if mibBuilder.loadTexts: mscLpEth100LtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100Lt component.')
mscLpEth100LtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100Lt components. These components cannot be added nor deleted.')
mscLpEth100LtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtStorageType.setDescription('This variable represents the storage type value for the mscLpEth100Lt tables.')
mscLpEth100LtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtIndex.setDescription('This variable represents the index for the mscLpEth100Lt tables.')
mscLpEth100LtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 20), )
if mibBuilder.loadTexts: mscLpEth100LtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"))
if mibBuilder.loadTexts: mscLpEth100LtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtTopEntry.setDescription('An entry in the mscLpEth100LtTopTable.')
mscLpEth100LtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2))
mscLpEth100LtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFrmCmp components.')
mscLpEth100LtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFrmCmp component.')
mscLpEth100LtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFrmCmp components. These components cannot be added nor deleted.')
mscLpEth100LtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFrmCmp tables.')
mscLpEth100LtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpIndex.setDescription('This variable represents the index for the mscLpEth100LtFrmCmp tables.')
mscLpEth100LtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFrmCmpIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpTopEntry.setDescription('An entry in the mscLpEth100LtFrmCmpTopTable.')
mscLpEth100LtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3))
mscLpEth100LtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFrmCpy components.')
mscLpEth100LtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFrmCpy component.')
mscLpEth100LtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFrmCpy components. These components cannot be added nor deleted.')
mscLpEth100LtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFrmCpy tables.')
mscLpEth100LtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyIndex.setDescription('This variable represents the index for the mscLpEth100LtFrmCpy tables.')
mscLpEth100LtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFrmCpyIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyTopEntry.setDescription('An entry in the mscLpEth100LtFrmCpyTopTable.')
mscLpEth100LtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4))
mscLpEth100LtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtPrtCfg components.')
mscLpEth100LtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtPrtCfg component.')
mscLpEth100LtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtPrtCfg components. These components cannot be added nor deleted.')
mscLpEth100LtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtPrtCfg tables.')
mscLpEth100LtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgIndex.setDescription('This variable represents the index for the mscLpEth100LtPrtCfg tables.')
mscLpEth100LtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtPrtCfgIndex"))
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgTopEntry.setDescription('An entry in the mscLpEth100LtPrtCfgTopTable.')
mscLpEth100LtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5))
mscLpEth100LtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFb components.')
mscLpEth100LtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFb component.')
mscLpEth100LtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFb components. These components cannot be added nor deleted.')
mscLpEth100LtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFb tables.')
mscLpEth100LtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIndex.setDescription('This variable represents the index for the mscLpEth100LtFb tables.')
mscLpEth100LtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 20), )
if mibBuilder.loadTexts: mscLpEth100LtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTopEntry.setDescription('An entry in the mscLpEth100LtFbTopTable.')
mscLpEth100LtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2))
mscLpEth100LtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbTxInfo components.')
mscLpEth100LtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbTxInfo component.')
mscLpEth100LtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbTxInfo components. These components cannot be added nor deleted.')
mscLpEth100LtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbTxInfo tables.')
mscLpEth100LtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoIndex.setDescription('This variable represents the index for the mscLpEth100LtFbTxInfo tables.')
mscLpEth100LtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbTxInfoIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoTopEntry.setDescription('An entry in the mscLpEth100LtFbTxInfoTopTable.')
mscLpEth100LtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3))
mscLpEth100LtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbFddiMac components.')
mscLpEth100LtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbFddiMac component.')
mscLpEth100LtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbFddiMac components. These components cannot be added nor deleted.')
mscLpEth100LtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbFddiMac tables.')
mscLpEth100LtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacIndex.setDescription('This variable represents the index for the mscLpEth100LtFbFddiMac tables.')
mscLpEth100LtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbFddiMacIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacTopEntry.setDescription('An entry in the mscLpEth100LtFbFddiMacTopTable.')
mscLpEth100LtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4))
mscLpEth100LtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbMacEnet components.')
mscLpEth100LtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbMacEnet component.')
mscLpEth100LtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbMacEnet components. These components cannot be added nor deleted.')
mscLpEth100LtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbMacEnet tables.')
mscLpEth100LtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetIndex.setDescription('This variable represents the index for the mscLpEth100LtFbMacEnet tables.')
mscLpEth100LtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbMacEnetIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetTopEntry.setDescription('An entry in the mscLpEth100LtFbMacEnetTopTable.')
mscLpEth100LtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5))
mscLpEth100LtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbMacTr components.')
mscLpEth100LtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbMacTr component.')
mscLpEth100LtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbMacTr components. These components cannot be added nor deleted.')
mscLpEth100LtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbMacTr tables.')
mscLpEth100LtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrIndex.setDescription('This variable represents the index for the mscLpEth100LtFbMacTr tables.')
mscLpEth100LtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbMacTrIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrTopEntry.setDescription('An entry in the mscLpEth100LtFbMacTrTopTable.')
mscLpEth100LtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6))
mscLpEth100LtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbData components.')
mscLpEth100LtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbDataIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbData component.')
mscLpEth100LtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbData components. These components cannot be added nor deleted.')
mscLpEth100LtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbData tables.')
mscLpEth100LtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataIndex.setDescription('This variable represents the index for the mscLpEth100LtFbData tables.')
mscLpEth100LtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbDataIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataTopEntry.setDescription('An entry in the mscLpEth100LtFbDataTopTable.')
mscLpEth100LtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbDataTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7))
mscLpEth100LtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbIpH components.')
mscLpEth100LtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbIpH component.')
mscLpEth100LtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbIpH components. These components cannot be added nor deleted.')
mscLpEth100LtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbIpH tables.')
mscLpEth100LtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHIndex.setDescription('This variable represents the index for the mscLpEth100LtFbIpH tables.')
mscLpEth100LtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIpHIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHTopEntry.setDescription('An entry in the mscLpEth100LtFbIpHTopTable.')
mscLpEth100LtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8))
mscLpEth100LtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbLlch components.')
mscLpEth100LtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbLlch component.')
mscLpEth100LtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbLlch components. These components cannot be added nor deleted.')
mscLpEth100LtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbLlch tables.')
mscLpEth100LtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchIndex.setDescription('This variable represents the index for the mscLpEth100LtFbLlch tables.')
mscLpEth100LtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbLlchIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchTopEntry.setDescription('An entry in the mscLpEth100LtFbLlchTopTable.')
mscLpEth100LtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9))
mscLpEth100LtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbAppleH components.')
mscLpEth100LtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbAppleH component.')
mscLpEth100LtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbAppleH components. These components cannot be added nor deleted.')
mscLpEth100LtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbAppleH tables.')
mscLpEth100LtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHIndex.setDescription('This variable represents the index for the mscLpEth100LtFbAppleH tables.')
mscLpEth100LtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbAppleHIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHTopEntry.setDescription('An entry in the mscLpEth100LtFbAppleHTopTable.')
mscLpEth100LtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10))
mscLpEth100LtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 1), )
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtFbIpxH components.')
mscLpEth100LtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtFbIpxH component.')
mscLpEth100LtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtFbIpxH components. These components cannot be added nor deleted.')
mscLpEth100LtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtFbIpxH tables.')
mscLpEth100LtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHIndex.setDescription('This variable represents the index for the mscLpEth100LtFbIpxH tables.')
mscLpEth100LtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 10), )
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtFbIpxHIndex"))
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHTopEntry.setDescription('An entry in the mscLpEth100LtFbIpxHTopTable.')
mscLpEth100LtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100LtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6))
mscLpEth100LtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 1), )
if mibBuilder.loadTexts: mscLpEth100LtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100LtCntl components.')
mscLpEth100LtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtCntlIndex"))
if mibBuilder.loadTexts: mscLpEth100LtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100LtCntl component.')
mscLpEth100LtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100LtCntl components. These components cannot be added nor deleted.')
mscLpEth100LtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100LtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100LtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlStorageType.setDescription('This variable represents the storage type value for the mscLpEth100LtCntl tables.')
mscLpEth100LtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100LtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlIndex.setDescription('This variable represents the index for the mscLpEth100LtCntl tables.')
mscLpEth100LtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 10), )
if mibBuilder.loadTexts: mscLpEth100LtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
mscLpEth100LtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100LtCntlIndex"))
if mibBuilder.loadTexts: mscLpEth100LtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlTopEntry.setDescription('An entry in the mscLpEth100LtCntlTopTable.')
mscLpEth100LtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100LtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100LtCntlTData.setDescription('This attribute is used to display and set attributes.')
mscLpEth100Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3))
mscLpEth100TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 1), )
if mibBuilder.loadTexts: mscLpEth100TestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEth100Test components.')
mscLpEth100TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100TestIndex"))
if mibBuilder.loadTexts: mscLpEth100TestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestRowStatusEntry.setDescription('A single entry in the table represents a single mscLpEth100Test component.')
mscLpEth100TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEth100Test components. These components cannot be added nor deleted.')
mscLpEth100TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEth100TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestStorageType.setDescription('This variable represents the storage type value for the mscLpEth100Test tables.')
mscLpEth100TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEth100TestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestIndex.setDescription('This variable represents the index for the mscLpEth100Test tables.')
mscLpEth100TestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 10), )
if mibBuilder.loadTexts: mscLpEth100TestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
mscLpEth100TestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100TestIndex"))
if mibBuilder.loadTexts: mscLpEth100TestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestPTOEntry.setDescription('An entry in the mscLpEth100TestPTOTable.')
mscLpEth100TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100TestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
mscLpEth100TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100TestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
mscLpEth100TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEth100TestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
mscLpEth100TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11), )
if mibBuilder.loadTexts: mscLpEth100TestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
mscLpEth100TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100Index"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLpEth100TestIndex"))
if mibBuilder.loadTexts: mscLpEth100TestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestResultsEntry.setDescription('An entry in the mscLpEth100TestResultsTable.')
mscLpEth100TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
mscLpEth100TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
mscLpEth100TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
mscLpEth100TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
mscLpEth100TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
mscLpEth100TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpEth100TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLpEth100TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 25, 3, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEth100TestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEth100TestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
mscLa = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105))
mscLaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 1), )
if mibBuilder.loadTexts: mscLaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaRowStatusTable.setDescription('This entry controls the addition and deletion of mscLa components.')
mscLaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"))
if mibBuilder.loadTexts: mscLaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaRowStatusEntry.setDescription('A single entry in the table represents a single mscLa component.')
mscLaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLa components. These components can be added and deleted.')
mscLaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaStorageType.setDescription('This variable represents the storage type value for the mscLa tables.')
mscLaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: mscLaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaIndex.setDescription('This variable represents the index for the mscLa tables.')
mscLaCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 10), )
if mibBuilder.loadTexts: mscLaCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscLaCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"))
if mibBuilder.loadTexts: mscLaCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaCidDataEntry.setDescription('An entry in the mscLaCidDataTable.')
mscLaCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLaCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscLaMediaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 11), )
if mibBuilder.loadTexts: mscLaMediaProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaMediaProvTable.setDescription('This group contains the base provisioning data for the Media Application component.')
mscLaMediaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"))
if mibBuilder.loadTexts: mscLaMediaProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaMediaProvEntry.setDescription('An entry in the mscLaMediaProvTable.')
mscLaLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLaLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaLinkToProtocolPort.setDescription('This attribute contains a protocol port component name. The attribute associates the application with a protocol port.')
mscLaIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 12), )
if mibBuilder.loadTexts: mscLaIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLaIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"))
if mibBuilder.loadTexts: mscLaIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaIfEntryEntry.setDescription('An entry in the mscLaIfEntryTable.')
mscLaIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLaIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLaStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 13), )
if mibBuilder.loadTexts: mscLaStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"))
if mibBuilder.loadTexts: mscLaStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaStateEntry.setDescription('An entry in the mscLaStateTable.')
mscLaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLaOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLaUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLaOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 14), )
if mibBuilder.loadTexts: mscLaOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLaOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"))
if mibBuilder.loadTexts: mscLaOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaOperStatusEntry.setDescription('An entry in the mscLaOperStatusTable.')
mscLaSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLaFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2))
mscLaFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 1), )
if mibBuilder.loadTexts: mscLaFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerRowStatusTable.setDescription('This entry controls the addition and deletion of mscLaFramer components.')
mscLaFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaFramerIndex"))
if mibBuilder.loadTexts: mscLaFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerRowStatusEntry.setDescription('A single entry in the table represents a single mscLaFramer component.')
mscLaFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLaFramer components. These components cannot be added nor deleted.')
mscLaFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLaFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLaFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerStorageType.setDescription('This variable represents the storage type value for the mscLaFramer tables.')
mscLaFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLaFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerIndex.setDescription('This variable represents the index for the mscLaFramer tables.')
mscLaFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 10), )
if mibBuilder.loadTexts: mscLaFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerProvTable.setDescription('This group contains the link to the Lan interface such as Ethernet, Fddi, or TokenRing.')
mscLaFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaFramerIndex"))
if mibBuilder.loadTexts: mscLaFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerProvEntry.setDescription('An entry in the mscLaFramerProvTable.')
mscLaFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLaFramerInterfaceName.setStatus('obsolete')
if mibBuilder.loadTexts: mscLaFramerInterfaceName.setDescription("This attribute associates the LanApplication with a specific Lan interface such as Ethernet, Fddi, or TokenRing. This also defines the LogicalProcessor on which Framer's parent component (as well as Framer itself) will run. This attribute is OBSOLETED and is redefined above as InterfaceName. The new attribute type is a LIST OF LINK with a maximum of two (2) HW components in a list. DESCRIPTION")
mscLaFramerInterfaceNamesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 431), )
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesTable.setDescription("This attribute associates the LanApplication with a specific Lan interface such as Ethernet, Fddi, or TokenRing. This also defines the LogicalProcessor on which Framer's parent component (as well as Framer itself) will run. Only one (1) LAN interface can be linked to a Framer except for Ethernet100BaseT LAN interface, for which up to two (2) interfaces residing on the same LogicalProcessor can be linked. DESCRIPTION")
mscLaFramerInterfaceNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 431, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-LanDriversMIB", "mscLaFramerInterfaceNamesValue"))
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesEntry.setDescription('An entry in the mscLaFramerInterfaceNamesTable.')
mscLaFramerInterfaceNamesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 431, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesValue.setDescription('This variable represents both the value and the index for the mscLaFramerInterfaceNamesTable.')
mscLaFramerInterfaceNamesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 105, 2, 431, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLaFramerInterfaceNamesRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscLaFramerInterfaceNamesTable.')
lanDriversGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 1))
lanDriversGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 1, 1))
lanDriversGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 1, 1, 3))
lanDriversGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 1, 1, 3, 2))
lanDriversCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 3))
lanDriversCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 3, 1))
lanDriversCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 3, 1, 3))
lanDriversCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 30, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LanDriversMIB", mscLpEnetOperStatusEntry=mscLpEnetOperStatusEntry, mscLpTrLtFrmCmpRowStatusTable=mscLpTrLtFrmCmpRowStatusTable, mscLpFiLtFrmCpyTopEntry=mscLpFiLtFrmCpyTopEntry, mscLpEth100Index=mscLpEth100Index, mscLpEnetLtFbIpxHIndex=mscLpEnetLtFbIpxHIndex, mscLpTrLtFbIpH=mscLpTrLtFbIpH, mscLpEth100LtFrmCmp=mscLpEth100LtFrmCmp, mscLpEnetLtRowStatusEntry=mscLpEnetLtRowStatusEntry, mscLpTrLtFrmCmpRowStatusEntry=mscLpTrLtFrmCmpRowStatusEntry, mscLpEnetLtFbDataTopTable=mscLpEnetLtFbDataTopTable, mscLpTrLtFrmCmpTData=mscLpTrLtFrmCmpTData, mscLpTrCommentText=mscLpTrCommentText, mscLpTrLtFbLlchRowStatusEntry=mscLpTrLtFbLlchRowStatusEntry, mscLpTrLtFbTxInfoRowStatus=mscLpTrLtFbTxInfoRowStatus, lanDriversCapabilitiesCA02=lanDriversCapabilitiesCA02, mscLpEnetDeferredTransmissions=mscLpEnetDeferredTransmissions, mscLpFiRowStatus=mscLpFiRowStatus, mscLpEnetLtStorageType=mscLpEnetLtStorageType, mscLpEnetLtFrmCmpTopEntry=mscLpEnetLtFrmCmpTopEntry, mscLpTrLtCntlRowStatusTable=mscLpTrLtCntlRowStatusTable, mscLpIlsFwdrRowStatusTable=mscLpIlsFwdrRowStatusTable, mscLpIlsFwdrLtFbAppleHComponentName=mscLpIlsFwdrLtFbAppleHComponentName, mscLpEnetLtFbFddiMacStorageType=mscLpEnetLtFbFddiMacStorageType, mscLpFiLt=mscLpFiLt, mscLpFiLtFbFddiMacTData=mscLpFiLtFbFddiMacTData, mscLaFramerInterfaceName=mscLaFramerInterfaceName, mscLpEth100LtFbMacEnetTData=mscLpEth100LtFbMacEnetTData, mscLpFiLtFbMacTrComponentName=mscLpFiLtFbMacTrComponentName, mscLpFiTestTimeRemaining=mscLpFiTestTimeRemaining, mscLpEth100TestDuration=mscLpEth100TestDuration, mscLpEnetLtFbFddiMacTopEntry=mscLpEnetLtFbFddiMacTopEntry, mscLpTrLtFbRowStatusEntry=mscLpTrLtFbRowStatusEntry, mscLpTrLtFbAppleHTData=mscLpTrLtFbAppleHTData, mscLpEth100LtFbMacEnetTopTable=mscLpEth100LtFbMacEnetTopTable, mscLpEnetTestPTOTable=mscLpEnetTestPTOTable, mscLpEnetAdminState=mscLpEnetAdminState, mscLpEnetLtPrtCfgStorageType=mscLpEnetLtPrtCfgStorageType, mscLpEnetLtFbAppleHTData=mscLpEnetLtFbAppleHTData, mscLpEth100StatsEntry=mscLpEth100StatsEntry, mscLpEth100LtFbLlchRowStatusTable=mscLpEth100LtFbLlchRowStatusTable, mscLpEth100TestRowStatus=mscLpEth100TestRowStatus, mscLpFiLtTData=mscLpFiLtTData, mscLpTrLtFbFddiMacComponentName=mscLpTrLtFbFddiMacComponentName, mscLpFiSmtProvTable=mscLpFiSmtProvTable, mscLpEth100LtFbFddiMacTData=mscLpEth100LtFbFddiMacTData, mscLpIlsFwdrLtPrtCfgTData=mscLpIlsFwdrLtPrtCfgTData, mscLpIlsFwdrLtFrmCmpStorageType=mscLpIlsFwdrLtFrmCmpStorageType, mscLpFiTokenRequestTimer=mscLpFiTokenRequestTimer, mscLpEth100LtFbFddiMacIndex=mscLpEth100LtFbFddiMacIndex, mscLpEnetStatsEntry=mscLpEnetStatsEntry, mscLpTrLtPrtCfgRowStatus=mscLpTrLtPrtCfgRowStatus, mscLpTrLtCntlRowStatus=mscLpTrLtCntlRowStatus, mscLpFiLtFbTxInfoStorageType=mscLpFiLtFbTxInfoStorageType, mscLpFiLtTopTable=mscLpFiLtTopTable, mscLpEth100CidDataTable=mscLpEth100CidDataTable, mscLpTrLtFrmCmpStorageType=mscLpTrLtFrmCmpStorageType, mscLpEnetLtFrmCpy=mscLpEnetLtFrmCpy, mscLpFiPhyOperEntry=mscLpFiPhyOperEntry, mscLpFiVersion=mscLpFiVersion, mscLpFiPhyRowStatusTable=mscLpFiPhyRowStatusTable, mscLpEth100LtFbIpHIndex=mscLpEth100LtFbIpHIndex, mscLpIlsFwdrLtFbTxInfoRowStatusTable=mscLpIlsFwdrLtFbTxInfoRowStatusTable, mscLpTrIfAdminStatus=mscLpTrIfAdminStatus, mscLpEnetLtFbIpHTopEntry=mscLpEnetLtFbIpHTopEntry, mscLpTrLtIndex=mscLpTrLtIndex, mscLpTrLineErrors=mscLpTrLineErrors, mscLpFiPhyFddiPhyTypeIndex=mscLpFiPhyFddiPhyTypeIndex, mscLpFiLtFbTxInfoIndex=mscLpFiLtFbTxInfoIndex, mscLpIlsFwdrLtFrmCmpIndex=mscLpIlsFwdrLtFrmCmpIndex, mscLpTrLtFbMacTrTData=mscLpTrLtFbMacTrTData, mscLpIlsFwdrLtFbMacTrStorageType=mscLpIlsFwdrLtFbMacTrStorageType, mscLpIlsFwdrLtFbDataStorageType=mscLpIlsFwdrLtFbDataStorageType, mscLpIlsFwdrLtFbAppleHTData=mscLpIlsFwdrLtFbAppleHTData, mscLpEth100LtFbMacEnetComponentName=mscLpEth100LtFbMacEnetComponentName, mscLaMediaProvTable=mscLaMediaProvTable, mscLpFiCfState=mscLpFiCfState, mscLpFiStateEntry=mscLpFiStateEntry, mscLpEnetTestRowStatus=mscLpEnetTestRowStatus, mscLpFiTest=mscLpFiTest, mscLpEnetLtFbIpHRowStatusTable=mscLpEnetLtFbIpHRowStatusTable, mscLpFiLtFbMacEnetIndex=mscLpFiLtFbMacEnetIndex, mscLpEth100SingleCollisionFrames=mscLpEth100SingleCollisionFrames, mscLpEnetLtFbMacTrStorageType=mscLpEnetLtFbMacTrStorageType, mscLpFiLtFbAppleHRowStatusTable=mscLpFiLtFbAppleHRowStatusTable, mscLpFiLtFbAppleHTData=mscLpFiLtFbAppleHTData, mscLpFiLtFrmCmpRowStatusEntry=mscLpFiLtFrmCmpRowStatusEntry, mscLpTrTestTimeRemaining=mscLpTrTestTimeRemaining, mscLpEth100LtFbAppleH=mscLpEth100LtFbAppleH, mscLpFiLtCntlStorageType=mscLpFiLtCntlStorageType, mscLpFiLtFbMacTr=mscLpFiLtFbMacTr, mscLpEnetLtPrtCfgRowStatusEntry=mscLpEnetLtPrtCfgRowStatusEntry, mscLpFiAcceptAa=mscLpFiAcceptAa, mscLpFiLtFbIpxHTData=mscLpFiLtFbIpxHTData, mscLpEth100LtTopEntry=mscLpEth100LtTopEntry, mscLpEth100TestResultsEntry=mscLpEth100TestResultsEntry, mscLpEth100FramesReceivedOk=mscLpEth100FramesReceivedOk, mscLpEnetLtFbTxInfo=mscLpEnetLtFbTxInfo, mscLpFiLtFrmCmpTData=mscLpFiLtFrmCmpTData, mscLpIlsFwdrLtFbMacTrComponentName=mscLpIlsFwdrLtFbMacTrComponentName, mscLpTrTestFrmRx=mscLpTrTestFrmRx, mscLpTrComponentName=mscLpTrComponentName, mscLpTrLtPrtCfgIndex=mscLpTrLtPrtCfgIndex, mscLpIlsFwdrUsageState=mscLpIlsFwdrUsageState, mscLpEnetLtFbAppleHRowStatusEntry=mscLpEnetLtFbAppleHRowStatusEntry, mscLpEth100OctetsReceivedOk=mscLpEth100OctetsReceivedOk, mscLpTrFunctionalAddress=mscLpTrFunctionalAddress, mscLpTrAdminState=mscLpTrAdminState, mscLpTrLtFbIpHRowStatusTable=mscLpTrLtFbIpHRowStatusTable, mscLpEnetLtFbRowStatusEntry=mscLpEnetLtFbRowStatusEntry, mscLpFiLtFbIpxHComponentName=mscLpFiLtFbIpxHComponentName, mscLpFiLtFrmCpyComponentName=mscLpFiLtFrmCpyComponentName, mscLpTrTestBitsRx=mscLpTrTestBitsRx, mscLpIlsFwdrLtFbIpxH=mscLpIlsFwdrLtFbIpxH, mscLpEth100LtRowStatusTable=mscLpEth100LtRowStatusTable, mscLpEnetLtFrmCmpRowStatus=mscLpEnetLtFrmCmpRowStatus, mscLpEth100OperStatusTable=mscLpEth100OperStatusTable, mscLpTrLtFbDataTData=mscLpTrLtFbDataTData, mscLpFiLtFbIpxHTopEntry=mscLpFiLtFbIpxHTopEntry, mscLpEth100LtPrtCfgRowStatusEntry=mscLpEth100LtPrtCfgRowStatusEntry, mscLpEth100LtFbIpH=mscLpEth100LtFbIpH, mscLpEth100AlignmentErrors=mscLpEth100AlignmentErrors, mscLpEnetLtFbIpHTData=mscLpEnetLtFbIpHTData, mscLpEnetOperationalState=mscLpEnetOperationalState, mscLpEth100DeferredTransmissions=mscLpEth100DeferredTransmissions, mscLpFiCidDataEntry=mscLpFiCidDataEntry, mscLpEth100LtFbMacTr=mscLpEth100LtFbMacTr, mscLpEnetLtFbTxInfoTopEntry=mscLpEnetLtFbTxInfoTopEntry, mscLpTrLtFbMacEnetStorageType=mscLpTrLtFbMacEnetStorageType, mscLpTrLtFbIndex=mscLpTrLtFbIndex, mscLaLinkToProtocolPort=mscLaLinkToProtocolPort, mscLpIlsFwdrTestBitsTx=mscLpIlsFwdrTestBitsTx, mscLpFiLtFrmCpyTopTable=mscLpFiLtFrmCpyTopTable, mscLpFiLtFbMacEnetRowStatus=mscLpFiLtFbMacEnetRowStatus, mscLpFiDupAddressTest=mscLpFiDupAddressTest, mscLpTrLtFbIpxHIndex=mscLpTrLtFbIpxHIndex, mscLpEth100LtFrmCmpTopTable=mscLpEth100LtFrmCmpTopTable, mscLpIlsFwdrLtFrmCmpTData=mscLpIlsFwdrLtFrmCmpTData, mscLpEnetLtFrmCpyRowStatusTable=mscLpEnetLtFrmCpyRowStatusTable, mscLpIlsFwdrLtFbMacEnetComponentName=mscLpIlsFwdrLtFbMacEnetComponentName, mscLpTrRingState=mscLpTrRingState, mscLpEth100LtFbIpHTData=mscLpEth100LtFbIpHTData, mscLpEnetTestErroredFrmRx=mscLpEnetTestErroredFrmRx, mscLpFiLtFbMacTrTopEntry=mscLpFiLtFbMacTrTopEntry, mscLpFiLtCntlComponentName=mscLpFiLtCntlComponentName, mscLpTrLtFbFddiMacRowStatus=mscLpTrLtFbFddiMacRowStatus, mscLpEnetApplicationFramerName=mscLpEnetApplicationFramerName, mscLpEnetLtFbAppleHTopTable=mscLpEnetLtFbAppleHTopTable, mscLpEth100LtFrmCpyIndex=mscLpEth100LtFrmCpyIndex, mscLpEnetAdminInfoEntry=mscLpEnetAdminInfoEntry, mscLpEnetSnmpOperStatus=mscLpEnetSnmpOperStatus, mscLpFiPhyLctFailCounts=mscLpFiPhyLctFailCounts, mscLpEnetRowStatusTable=mscLpEnetRowStatusTable, mscLpEnetLtFbFddiMac=mscLpEnetLtFbFddiMac, mscLpFiLtStorageType=mscLpFiLtStorageType, mscLpEnetLtFbTxInfoRowStatus=mscLpEnetLtFbTxInfoRowStatus, mscLpEnetLtFbMacTr=mscLpEnetLtFbMacTr, mscLpFiLtFrmCmpRowStatusTable=mscLpFiLtFrmCmpRowStatusTable, mscLpFiLtFbAppleH=mscLpFiLtFbAppleH, mscLpTrLtCntlStorageType=mscLpTrLtCntlStorageType, mscLpIlsFwdrLtTData=mscLpIlsFwdrLtTData, mscLpEth100LtFbTData=mscLpEth100LtFbTData, mscLaFramerRowStatusEntry=mscLaFramerRowStatusEntry, mscLpFiAcceptBb=mscLpFiAcceptBb, mscLpTrHardErrors=mscLpTrHardErrors, mscLpIlsFwdrLtFbDataComponentName=mscLpIlsFwdrLtFbDataComponentName, mscLpEnetTestBitsTx=mscLpEnetTestBitsTx, mscLpFiTestPTOTable=mscLpFiTestPTOTable, mscLpEth100LtFrmCpyRowStatusTable=mscLpEth100LtFrmCpyRowStatusTable, lanDriversGroupCA02A=lanDriversGroupCA02A, mscLpTrLtFrmCpyRowStatus=mscLpTrLtFrmCpyRowStatus, mscLpIlsFwdrLtFbLlchTopTable=mscLpIlsFwdrLtFbLlchTopTable, mscLpFiLtFbAppleHTopTable=mscLpFiLtFbAppleHTopTable, mscLpFiLtFbDataStorageType=mscLpFiLtFbDataStorageType, mscLpIlsFwdrLtCntlTopEntry=mscLpIlsFwdrLtCntlTopEntry, mscLpIlsFwdrLtRowStatusEntry=mscLpIlsFwdrLtRowStatusEntry, mscLpTrLtFbIpxHStorageType=mscLpTrLtFbIpxHStorageType, mscLpFiLtFbAppleHRowStatus=mscLpFiLtFbAppleHRowStatus, mscLpEnetLtFbIpxHTData=mscLpEnetLtFbIpxHTData, mscLpIlsFwdrLtFbTopTable=mscLpIlsFwdrLtFbTopTable, mscLpIlsFwdrLtFbMacTrTopEntry=mscLpIlsFwdrLtFbMacTrTopEntry, mscLpIlsFwdrLinkToTrafficSourceTable=mscLpIlsFwdrLinkToTrafficSourceTable, mscLpEnetVendor=mscLpEnetVendor, mscLpEth100LtFrmCmpTData=mscLpEth100LtFrmCmpTData, mscLpEnetLtFbMacEnet=mscLpEnetLtFbMacEnet, mscLpFiLtFrmCpyRowStatus=mscLpFiLtFrmCpyRowStatus, mscLpIlsFwdrLtFbFddiMacTopTable=mscLpIlsFwdrLtFbFddiMacTopTable, mscLpEth100LtFbTopTable=mscLpEth100LtFbTopTable, mscLpEth100LtFbAppleHTopEntry=mscLpEth100LtFbAppleHTopEntry, mscLpEnetLtFbMacEnetStorageType=mscLpEnetLtFbMacEnetStorageType, mscLpEnetTestRowStatusEntry=mscLpEnetTestRowStatusEntry, mscLpTrProvEntry=mscLpTrProvEntry, mscLpEnetLtFbIpHTopTable=mscLpEnetLtFbIpHTopTable, mscLpEnetFrameTooLongs=mscLpEnetFrameTooLongs, mscLpFiLtPrtCfgIndex=mscLpFiLtPrtCfgIndex, mscLpEnetLtFbLlchTopEntry=mscLpEnetLtFbLlchTopEntry, mscLpEnetLtFbTxInfoTopTable=mscLpEnetLtFbTxInfoTopTable, mscLpFiLtFbIpxHRowStatusEntry=mscLpFiLtFbIpxHRowStatusEntry, mscLpTrLtFbMacEnetTopTable=mscLpTrLtFbMacEnetTopTable, mscLpTrLtFbMacTrRowStatus=mscLpTrLtFbMacTrRowStatus, mscLpEnetLtRowStatusTable=mscLpEnetLtRowStatusTable, mscLpIlsFwdrLtFbIpHTData=mscLpIlsFwdrLtFbIpHTData, mscLpFiVendor=mscLpFiVendor, mscLpEth100LtFbIpxH=mscLpEth100LtFbIpxH, mscLpEnetStateTable=mscLpEnetStateTable, mscLpEth100MacTransmitErrors=mscLpEth100MacTransmitErrors, mscLpEth100LtPrtCfgTopEntry=mscLpEth100LtPrtCfgTopEntry, mscLpIlsFwdrLtFbFddiMacStorageType=mscLpIlsFwdrLtFbFddiMacStorageType, mscLpIlsFwdrLtFbAppleHRowStatusTable=mscLpIlsFwdrLtFbAppleHRowStatusTable, mscLpEth100TestPTOEntry=mscLpEth100TestPTOEntry, mscLpIlsFwdrLtFbDataIndex=mscLpIlsFwdrLtFbDataIndex, lanDriversCapabilitiesCA02A=lanDriversCapabilitiesCA02A, mscLpEnetTestCauseOfTermination=mscLpEnetTestCauseOfTermination, mscLpEnetTestBitsRx=mscLpEnetTestBitsRx, mscLpEnetLtComponentName=mscLpEnetLtComponentName, mscLpTrLtFbMacTrStorageType=mscLpTrLtFbMacTrStorageType, mscLa=mscLa, mscLpIlsFwdrStatsEntry=mscLpIlsFwdrStatsEntry, mscLpTrLtFbIpHTopEntry=mscLpTrLtFbIpHTopEntry, mscLpTrLtFbLlchIndex=mscLpTrLtFbLlchIndex, mscLpIlsFwdrLtIndex=mscLpIlsFwdrLtIndex, mscLpIlsFwdrLtFbMacEnetTopEntry=mscLpIlsFwdrLtFbMacEnetTopEntry, mscLpFiLtFbMacEnetTData=mscLpFiLtFbMacEnetTData, mscLpTrLtFbMacEnetRowStatusEntry=mscLpTrLtFbMacEnetRowStatusEntry, mscLpEnetHeartbeatPacket=mscLpEnetHeartbeatPacket, mscLpTrOperStatusTable=mscLpTrOperStatusTable, mscLpEth100LtFbMacTrTData=mscLpEth100LtFbMacTrTData, mscLpFiLtFbMacTrRowStatusEntry=mscLpFiLtFbMacTrRowStatusEntry, mscLpEnetLtFbIpxHStorageType=mscLpEnetLtFbIpxHStorageType, mscLpTrLtFrmCmp=mscLpTrLtFrmCmp, mscLpEth100LtFbTxInfoTData=mscLpEth100LtFbTxInfoTData, mscLpEnetCidDataTable=mscLpEnetCidDataTable, mscLpFiPhyLerCutoff=mscLpFiPhyLerCutoff, mscLpEnetLtPrtCfgIndex=mscLpEnetLtPrtCfgIndex, mscLpEnetMacReceiveErrors=mscLpEnetMacReceiveErrors, mscLpIlsFwdrIndex=mscLpIlsFwdrIndex, mscLpTrStorageType=mscLpTrStorageType, mscLpIlsFwdrComponentName=mscLpIlsFwdrComponentName, mscLpIlsFwdrLtCntlIndex=mscLpIlsFwdrLtCntlIndex, mscLpFiLtFbDataTopEntry=mscLpFiLtFbDataTopEntry, mscLpEnetLtFbDataRowStatusEntry=mscLpEnetLtFbDataRowStatusEntry, mscLpEth100LtStorageType=mscLpEth100LtStorageType, mscLpEth100LtCntlRowStatusEntry=mscLpEth100LtCntlRowStatusEntry, mscLpFiLtFbMacEnetTopTable=mscLpFiLtFbMacEnetTopTable, mscLpFiLtFbIpHRowStatus=mscLpFiLtFbIpHRowStatus, mscLpIlsFwdrStateTable=mscLpIlsFwdrStateTable, mscLpFiAcceptAs=mscLpFiAcceptAs, mscLpFiLtFbMacTrTopTable=mscLpFiLtFbMacTrTopTable, mscLpEnetTestPTOEntry=mscLpEnetTestPTOEntry, mscLpFiLtFbFddiMacRowStatusTable=mscLpFiLtFbFddiMacRowStatusTable, mscLpEth100LtFbIndex=mscLpEth100LtFbIndex, mscLpEth100TestIndex=mscLpEth100TestIndex, mscLpTrLtFbFddiMacIndex=mscLpTrLtFbFddiMacIndex, mscLpEnetLtFbLlchIndex=mscLpEnetLtFbLlchIndex, mscLpFiLtFbRowStatus=mscLpFiLtFbRowStatus)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LanDriversMIB", mscLpIlsFwdrLtTopEntry=mscLpIlsFwdrLtTopEntry, mscLpFiTestType=mscLpFiTestType, mscLpIlsFwdrLtFbLlchRowStatusTable=mscLpIlsFwdrLtFbLlchRowStatusTable, mscLpTrLtPrtCfgStorageType=mscLpTrLtPrtCfgStorageType, mscLpEth100LtFbMacEnetTopEntry=mscLpEth100LtFbMacEnetTopEntry, mscLpTrLtFbTxInfoTopTable=mscLpTrLtFbTxInfoTopTable, mscLpEth100AutoNegStatus=mscLpEth100AutoNegStatus, mscLpTrLtFbStorageType=mscLpTrLtFbStorageType, mscLpEnetLtFrmCpyIndex=mscLpEnetLtFrmCpyIndex, mscLpTrOperStatusEntry=mscLpTrOperStatusEntry, mscLpEnetLtCntlTopTable=mscLpEnetLtCntlTopTable, mscLpFiPhyPcmState=mscLpFiPhyPcmState, mscLpIlsFwdrLtFbTxInfoRowStatusEntry=mscLpIlsFwdrLtFbTxInfoRowStatusEntry, mscLpTrLtFbIpHRowStatus=mscLpTrLtFbIpHRowStatus, mscLpTrLastTimeBeaconSent=mscLpTrLastTimeBeaconSent, mscLpEnetOperTable=mscLpEnetOperTable, mscLpEnetLtFbMacTrTopEntry=mscLpEnetLtFbMacTrTopEntry, mscLpIlsFwdrLtPrtCfgComponentName=mscLpIlsFwdrLtPrtCfgComponentName, mscLpEnetLtFbAppleHRowStatus=mscLpEnetLtFbAppleHRowStatus, mscLpTrNcMacOperEntry=mscLpTrNcMacOperEntry, mscLpTrLtFbComponentName=mscLpTrLtFbComponentName, mscLpIlsFwdrLtComponentName=mscLpIlsFwdrLtComponentName, mscLpIlsFwdrLtFbFddiMac=mscLpIlsFwdrLtFbFddiMac, mscLpFiUsageState=mscLpFiUsageState, mscLpIlsFwdrLtFbIpHIndex=mscLpIlsFwdrLtFbIpHIndex, mscLpTrLtPrtCfgTData=mscLpTrLtPrtCfgTData, mscLpFiNeighborNotifyInterval=mscLpFiNeighborNotifyInterval, mscLpEnetLtFbAppleHComponentName=mscLpEnetLtFbAppleHComponentName, mscLpIlsFwdrLtFbIpxHRowStatusTable=mscLpIlsFwdrLtFbIpxHRowStatusTable, mscLpEth100LtFbAppleHRowStatus=mscLpEth100LtFbAppleHRowStatus, mscLpTrChipSet=mscLpTrChipSet, mscLpEnetAlignmentErrors=mscLpEnetAlignmentErrors, mscLpEth100LtFbLlchTData=mscLpEth100LtFbLlchTData, mscLpEnetLtFrmCpyTData=mscLpEnetLtFrmCpyTData, mscLpIlsFwdrLtFbFddiMacIndex=mscLpIlsFwdrLtFbFddiMacIndex, mscLpEth100LtFrmCmpTopEntry=mscLpEth100LtFrmCmpTopEntry, mscLaAdminState=mscLaAdminState, mscLpEth100LtCntlTopEntry=mscLpEth100LtCntlTopEntry, mscLpFiUpstreamNeighbor=mscLpFiUpstreamNeighbor, mscLpEth100LtCntlTopTable=mscLpEth100LtCntlTopTable, mscLpEth100SnmpOperStatus=mscLpEth100SnmpOperStatus, mscLpIlsFwdrLtFbFddiMacTopEntry=mscLpIlsFwdrLtFbFddiMacTopEntry, mscLpEnetLtFbMacTrRowStatus=mscLpEnetLtFbMacTrRowStatus, mscLpTrLtFbFddiMacStorageType=mscLpTrLtFbFddiMacStorageType, mscLpTrLtFbDataRowStatusTable=mscLpTrLtFbDataRowStatusTable, mscLpTrTransmitBeacons=mscLpTrTransmitBeacons, mscLpIlsFwdrStateEntry=mscLpIlsFwdrStateEntry, mscLpEnetLtFbMacTrRowStatusTable=mscLpEnetLtFbMacTrRowStatusTable, mscLpTrSnmpOperStatus=mscLpTrSnmpOperStatus, mscLpEnetLtFbFddiMacTData=mscLpEnetLtFbFddiMacTData, mscLpTrLtComponentName=mscLpTrLtComponentName, mscLpIlsFwdrLtFbFddiMacRowStatus=mscLpIlsFwdrLtFbFddiMacRowStatus, mscLpEnetCidDataEntry=mscLpEnetCidDataEntry, mscLpEth100TestResultsTable=mscLpEth100TestResultsTable, mscLaIfIndex=mscLaIfIndex, mscLpFiTestRowStatusTable=mscLpFiTestRowStatusTable, mscLpIlsFwdrTestElapsedTime=mscLpIlsFwdrTestElapsedTime, mscLaMediaProvEntry=mscLaMediaProvEntry, mscLpEth100FrameTooLongs=mscLpEth100FrameTooLongs, mscLpEnetLtPrtCfgComponentName=mscLpEnetLtPrtCfgComponentName, mscLpEth100AdminState=mscLpEth100AdminState, mscLpFiTestBitsTx=mscLpFiTestBitsTx, mscLpEnetLtFbMacTrIndex=mscLpEnetLtFbMacTrIndex, mscLpTrMonitorParticipate=mscLpTrMonitorParticipate, mscLpEnetLtFbMacEnetRowStatusEntry=mscLpEnetLtFbMacEnetRowStatusEntry, mscLpIlsFwdrLtCntlTopTable=mscLpIlsFwdrLtCntlTopTable, mscLpFiAdminInfoEntry=mscLpFiAdminInfoEntry, mscLpEnetLtFrmCpyStorageType=mscLpEnetLtFrmCpyStorageType, mscLpEnetLtCntlStorageType=mscLpEnetLtCntlStorageType, mscLpEth100LtIndex=mscLpEth100LtIndex, mscLpEth100MacReceiveErrors=mscLpEth100MacReceiveErrors, mscLpFiIfIndex=mscLpFiIfIndex, mscLpEnetMacAddress=mscLpEnetMacAddress, mscLpIlsFwdrLtFbFddiMacComponentName=mscLpIlsFwdrLtFbFddiMacComponentName, mscLpEth100IfEntryTable=mscLpEth100IfEntryTable, mscLpFiNcOldDownstreamNeighbor=mscLpFiNcOldDownstreamNeighbor, mscLpFiLtFbTxInfoRowStatus=mscLpFiLtFbTxInfoRowStatus, mscLpFiLtFbIpxHIndex=mscLpFiLtFbIpxHIndex, mscLaCustomerIdentifier=mscLaCustomerIdentifier, mscLpEth100LtFbStorageType=mscLpEth100LtFbStorageType, mscLpFiLtCntlTopEntry=mscLpFiLtCntlTopEntry, mscLpFiLtFrmCmpStorageType=mscLpFiLtFrmCmpStorageType, mscLpTrLtCntl=mscLpTrLtCntl, mscLpIlsFwdrLtFbDataTopEntry=mscLpIlsFwdrLtFbDataTopEntry, mscLpFiTestFrmSize=mscLpFiTestFrmSize, mscLpEth100OperationalState=mscLpEth100OperationalState, mscLpFiLtFbMacEnetRowStatusEntry=mscLpFiLtFbMacEnetRowStatusEntry, mscLpFiAcceptAm=mscLpFiAcceptAm, mscLpEnetFcsErrors=mscLpEnetFcsErrors, mscLpEth100AdminInfoTable=mscLpEth100AdminInfoTable, mscLpFiNcDownstreamNeighbor=mscLpFiNcDownstreamNeighbor, mscLpEnetLtFbTxInfoStorageType=mscLpEnetLtFbTxInfoStorageType, mscLpFiLtTopEntry=mscLpFiLtTopEntry, mscLpEth100TestFrmRx=mscLpEth100TestFrmRx, mscLpTrLtFbMacTrRowStatusTable=mscLpTrLtFbMacTrRowStatusTable, mscLpEth100LtFrmCpy=mscLpEth100LtFrmCpy, mscLpTrLtFbTopTable=mscLpTrLtFbTopTable, mscLpIlsFwdrLtFbIpxHRowStatusEntry=mscLpIlsFwdrLtFbIpxHRowStatusEntry, mscLpTrLtCntlTData=mscLpTrLtCntlTData, mscLpFiLtPrtCfgRowStatusEntry=mscLpFiLtPrtCfgRowStatusEntry, mscLpIlsFwdrLtFbAppleHStorageType=mscLpIlsFwdrLtFbAppleHStorageType, mscLpEnetLtFbStorageType=mscLpEnetLtFbStorageType, mscLpTrCidDataEntry=mscLpTrCidDataEntry, mscLpFiLtFbLlchRowStatus=mscLpFiLtFbLlchRowStatus, mscLpEth100LtPrtCfgRowStatusTable=mscLpEth100LtPrtCfgRowStatusTable, mscLpTrLtFbIpxHTopEntry=mscLpTrLtFbIpxHTopEntry, mscLpFiLtFbLlchIndex=mscLpFiLtFbLlchIndex, mscLpIlsFwdrLtFbIpxHTopTable=mscLpIlsFwdrLtFbIpxHTopTable, mscLpFiTvxExpiredCounts=mscLpFiTvxExpiredCounts, mscLpEth100LtComponentName=mscLpEth100LtComponentName, mscLpEth100LtFbDataComponentName=mscLpEth100LtFbDataComponentName, mscLpEth100LtFbAppleHTopTable=mscLpEth100LtFbAppleHTopTable, mscLaIndex=mscLaIndex, mscLpEnetLtFrmCmp=mscLpEnetLtFrmCmp, mscLpEnetLtFbAppleH=mscLpEnetLtFbAppleH, mscLpIlsFwdrLtFrmCpy=mscLpIlsFwdrLtFrmCpy, mscLpIlsFwdrLtFbComponentName=mscLpIlsFwdrLtFbComponentName, mscLpFiPhyNeighborType=mscLpFiPhyNeighborType, mscLpIlsFwdrTestResultsTable=mscLpIlsFwdrTestResultsTable, mscLpTrTestFrmSize=mscLpTrTestFrmSize, mscLpEnetUsageState=mscLpEnetUsageState, mscLpEth100LtFbMacEnetIndex=mscLpEth100LtFbMacEnetIndex, mscLpEth100LtFbIpxHTopEntry=mscLpEth100LtFbIpxHTopEntry, mscLpFiTestResultsEntry=mscLpFiTestResultsEntry, mscLpEth100LtFbMacTrComponentName=mscLpEth100LtFbMacTrComponentName, mscLpFiLtFbFddiMac=mscLpFiLtFbFddiMac, mscLpEth100OperEntry=mscLpEth100OperEntry, mscLpFiMacOperEntry=mscLpFiMacOperEntry, mscLpFiMacCOperTable=mscLpFiMacCOperTable, mscLpEnetLtFbTopTable=mscLpEnetLtFbTopTable, mscLpEnetLtFbMacTrComponentName=mscLpEnetLtFbMacTrComponentName, mscLpFiTestIndex=mscLpFiTestIndex, mscLpTrProductId=mscLpTrProductId, mscLpEnetStatsTable=mscLpEnetStatsTable, mscLpEnetComponentName=mscLpEnetComponentName, mscLpEnetLtFbFddiMacTopTable=mscLpEnetLtFbFddiMacTopTable, mscLpEnetLtFbMacEnetRowStatus=mscLpEnetLtFbMacEnetRowStatus, mscLpIlsFwdrLtFrmCmpRowStatusTable=mscLpIlsFwdrLtFrmCmpRowStatusTable, mscLpIlsFwdrLtFbLlchIndex=mscLpIlsFwdrLtFbLlchIndex, mscLpIlsFwdrLtFbAppleHTopTable=mscLpIlsFwdrLtFbAppleHTopTable, mscLpFiAdminState=mscLpFiAdminState, mscLpIlsFwdrLtStorageType=mscLpIlsFwdrLtStorageType, mscLpEth100LtFrmCmpRowStatusTable=mscLpEth100LtFrmCmpRowStatusTable, mscLpEth100TestCauseOfTermination=mscLpEth100TestCauseOfTermination, mscLaFramerInterfaceNamesTable=mscLaFramerInterfaceNamesTable, mscLpFiLtFbLlchTopTable=mscLpFiLtFbLlchTopTable, mscLpTrLtStorageType=mscLpTrLtStorageType, mscLpIlsFwdrOperationalState=mscLpIlsFwdrOperationalState, mscLpEth100LtFbRowStatusEntry=mscLpEth100LtFbRowStatusEntry, mscLpIlsFwdrLtFbAppleHRowStatusEntry=mscLpIlsFwdrLtFbAppleHRowStatusEntry, mscLpFiLtPrtCfgRowStatus=mscLpFiLtPrtCfgRowStatus, mscLpTrLtFbMacEnetTData=mscLpTrLtFbMacEnetTData, mscLpEnetLtFrmCmpTopTable=mscLpEnetLtFrmCmpTopTable, mscLpEnetLtTopEntry=mscLpEnetLtTopEntry, mscLpFiRowStatusEntry=mscLpFiRowStatusEntry, mscLpIlsFwdrLtFbMacTrIndex=mscLpIlsFwdrLtFbMacTrIndex, mscLpEth100LineSpeed=mscLpEth100LineSpeed, mscLaIfEntryEntry=mscLaIfEntryEntry, mscLpFiIfEntryEntry=mscLpFiIfEntryEntry, mscLpEnetLtFbIpxHRowStatusTable=mscLpEnetLtFbIpxHRowStatusTable, mscLpEth100LtFbDataRowStatus=mscLpEth100LtFbDataRowStatus, mscLpTrLtFrmCmpRowStatus=mscLpTrLtFrmCmpRowStatus, mscLpEth100LtFbIpHRowStatus=mscLpEth100LtFbIpHRowStatus, mscLpFiPhySignalBitsTxmt=mscLpFiPhySignalBitsTxmt, mscLpFiLtFbMacTrStorageType=mscLpFiLtFbMacTrStorageType, mscLpEnetProvTable=mscLpEnetProvTable, mscLpFiNcOldUpstreamNeighbor=mscLpFiNcOldUpstreamNeighbor, mscLpTrMacAddress=mscLpTrMacAddress, mscLpEnetLtPrtCfgTopTable=mscLpEnetLtPrtCfgTopTable, mscLpEnetCommentText=mscLpEnetCommentText, mscLpTrLtPrtCfgComponentName=mscLpTrLtPrtCfgComponentName, mscLpTrLtFbAppleHIndex=mscLpTrLtFbAppleHIndex, mscLpEth100AdminInfoEntry=mscLpEth100AdminInfoEntry, mscLpEth100LtFbTxInfo=mscLpEth100LtFbTxInfo, lanDriversGroupCA=lanDriversGroupCA, mscLpEnetTestFrmRx=mscLpEnetTestFrmRx, mscLpFiLtPrtCfgComponentName=mscLpFiLtPrtCfgComponentName, mscLpFiLtFrmCpyIndex=mscLpFiLtFrmCpyIndex, mscLpEth100Vendor=mscLpEth100Vendor, mscLpFiTestResultsTable=mscLpFiTestResultsTable, mscLpEth100ActualDuplexMode=mscLpEth100ActualDuplexMode, mscLpEth100LtFbIpxHComponentName=mscLpEth100LtFbIpxHComponentName, mscLpTrLtFbLlchRowStatusTable=mscLpTrLtFbLlchRowStatusTable, mscLpEnetLtFbFddiMacRowStatusTable=mscLpEnetLtFbFddiMacRowStatusTable, mscLpFiRmtState=mscLpFiRmtState, mscLpTrTestFrmTx=mscLpTrTestFrmTx, mscLpEth100LtFbMacEnetRowStatusEntry=mscLpEth100LtFbMacEnetRowStatusEntry, mscLpIlsFwdrLtFbMacTrRowStatusTable=mscLpIlsFwdrLtFbMacTrRowStatusTable, mscLaFramerComponentName=mscLaFramerComponentName, mscLpTrRingSpeed=mscLpTrRingSpeed, mscLpEnetLtFb=mscLpEnetLtFb, mscLpTrLtCntlTopTable=mscLpTrLtCntlTopTable, mscLpIlsFwdrLtCntlRowStatusEntry=mscLpIlsFwdrLtCntlRowStatusEntry, mscLpIlsFwdrTestFrmSize=mscLpIlsFwdrTestFrmSize, mscLpTr=mscLpTr, mscLpTrTestRowStatusEntry=mscLpTrTestRowStatusEntry, mscLpFiOldDownstreamNeighbor=mscLpFiOldDownstreamNeighbor, mscLpIlsFwdrLtFbDataTopTable=mscLpIlsFwdrLtFbDataTopTable, mscLpTrLtFbFddiMacRowStatusTable=mscLpTrLtFbFddiMacRowStatusTable, lanDriversGroupCA02=lanDriversGroupCA02, mscLpFiLtFbMacTrRowStatusTable=mscLpFiLtFbMacTrRowStatusTable, mscLpEnetLtFrmCmpRowStatusTable=mscLpEnetLtFrmCmpRowStatusTable, mscLpTrTestStorageType=mscLpTrTestStorageType, mscLpTrAdminInfoEntry=mscLpTrAdminInfoEntry, mscLpEnetLtFbIpxHComponentName=mscLpEnetLtFbIpxHComponentName, mscLpFiPhyRowStatusEntry=mscLpFiPhyRowStatusEntry, mscLpEth100LtFbFddiMacRowStatusTable=mscLpEth100LtFbFddiMacRowStatusTable, mscLpFiLtFrmCpyTData=mscLpFiLtFrmCpyTData, mscLpEnetStateEntry=mscLpEnetStateEntry, mscLpTrLtFbTxInfoComponentName=mscLpTrLtFbTxInfoComponentName, mscLpEth100CidDataEntry=mscLpEth100CidDataEntry, mscLpFiLtCntlRowStatusTable=mscLpFiLtCntlRowStatusTable, mscLpIlsFwdrLtFbMacEnet=mscLpIlsFwdrLtFbMacEnet, mscLpIlsFwdrLtFbLlchComponentName=mscLpIlsFwdrLtFbLlchComponentName, mscLpEnetLtFbFddiMacComponentName=mscLpEnetLtFbFddiMacComponentName, mscLpFiLtRowStatus=mscLpFiLtRowStatus, mscLpEth100StatsTable=mscLpEth100StatsTable, mscLpEnetLtFbLlchTData=mscLpEnetLtFbLlchTData, mscLpEth100LtFrmCpyTData=mscLpEth100LtFrmCpyTData, mscLpFiIndex=mscLpFiIndex, mscLpTrLtFbAppleHTopEntry=mscLpTrLtFbAppleHTopEntry, mscLpEnetLtFbDataStorageType=mscLpEnetLtFbDataStorageType, mscLpFiLtFbMacEnetStorageType=mscLpFiLtFbMacEnetStorageType, mscLpTrTokenErrors=mscLpTrTokenErrors, mscLpIlsFwdrLtFbData=mscLpIlsFwdrLtFbData, mscLpEth100LtFbMacEnetRowStatus=mscLpEth100LtFbMacEnetRowStatus, mscLpEth100LtFbIpxHStorageType=mscLpEth100LtFbIpxHStorageType, mscLpEth100ActualLineSpeed=mscLpEth100ActualLineSpeed, mscLpFiLtCntl=mscLpFiLtCntl, mscLpEth100LtFbMacEnetRowStatusTable=mscLpEth100LtFbMacEnetRowStatusTable, mscLpTrTestPTOEntry=mscLpTrTestPTOEntry, mscLpFiOldUpstreamNeighbor=mscLpFiOldUpstreamNeighbor, mscLpEth100LtFbIpxHRowStatusTable=mscLpEth100LtFbIpxHRowStatusTable, mscLpEnetTestStorageType=mscLpEnetTestStorageType, mscLpFiLtFrmCpy=mscLpFiLtFrmCpy, mscLpFiLtFbLlchComponentName=mscLpFiLtFbLlchComponentName, mscLpIlsFwdrLtPrtCfgIndex=mscLpIlsFwdrLtPrtCfgIndex, mscLpEnetLtFbIpxHRowStatus=mscLpEnetLtFbIpxHRowStatus, mscLpTrLtFbIpHComponentName=mscLpTrLtFbIpHComponentName, mscLpTrLtFbDataRowStatus=mscLpTrLtFbDataRowStatus, mscLpIlsFwdrLtFbTxInfoTopEntry=mscLpIlsFwdrLtFbTxInfoTopEntry, mscLpEth100LtFbIpxHRowStatus=mscLpEth100LtFbIpxHRowStatus, mscLpTrSignalLoss=mscLpTrSignalLoss, mscLpFiLtFbLlchTData=mscLpFiLtFbLlchTData, mscLpIlsFwdrLtFrmCmpTopEntry=mscLpIlsFwdrLtFrmCmpTopEntry, mscLpIlsFwdrLtFbIpxHComponentName=mscLpIlsFwdrLtFbIpxHComponentName, mscLpEth100StateEntry=mscLpEth100StateEntry, mscLpEth100LtFrmCpyRowStatusEntry=mscLpEth100LtFrmCpyRowStatusEntry, mscLaIfAdminStatus=mscLaIfAdminStatus, mscLpEnetLtCntlComponentName=mscLpEnetLtCntlComponentName, mscLpFiSmtProvEntry=mscLpFiSmtProvEntry, mscLpFiLtFbData=mscLpFiLtFbData, mscLaStateTable=mscLaStateTable, mscLpTrLtFbAppleHComponentName=mscLpTrLtFbAppleHComponentName)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LanDriversMIB", mscLpEth100LtFbAppleHRowStatusEntry=mscLpEth100LtFbAppleHRowStatusEntry, mscLpEth100OperTable=mscLpEth100OperTable, mscLpEth100LtFbLlchComponentName=mscLpEth100LtFbLlchComponentName, mscLpEnetOperStatusTable=mscLpEnetOperStatusTable, mscLpEth100LtCntlStorageType=mscLpEth100LtCntlStorageType, mscLpEth100StateTable=mscLpEth100StateTable, mscLpEnetLtFrmCpyTopTable=mscLpEnetLtFrmCpyTopTable, mscLpEth100ApplicationFramerName=mscLpEth100ApplicationFramerName, mscLpEth100TestElapsedTime=mscLpEth100TestElapsedTime, mscLpIlsFwdrLtFbIpHRowStatusTable=mscLpIlsFwdrLtFbIpHRowStatusTable, mscLpEth100LtFbTxInfoRowStatusEntry=mscLpEth100LtFbTxInfoRowStatusEntry, mscLpFiLtFbAppleHIndex=mscLpFiLtFbAppleHIndex, mscLpTrLtFbAppleHRowStatus=mscLpTrLtFbAppleHRowStatus, mscLpEnetTestElapsedTime=mscLpEnetTestElapsedTime, mscLpEnetLtFbIpxHTopEntry=mscLpEnetLtFbIpxHTopEntry, mscLpFiNotCopiedCounts=mscLpFiNotCopiedCounts, mscLpEth100LtFbFddiMacStorageType=mscLpEth100LtFbFddiMacStorageType, mscLpEth100LtFbIpHTopEntry=mscLpEth100LtFbIpHTopEntry, mscLpTrLtFbAppleHRowStatusTable=mscLpTrLtFbAppleHRowStatusTable, mscLpTrLtFbAppleHStorageType=mscLpTrLtFbAppleHStorageType, mscLaRowStatusEntry=mscLaRowStatusEntry, mscLpTrAbortTransErrors=mscLpTrAbortTransErrors, mscLpTrLtFrmCmpTopTable=mscLpTrLtFrmCmpTopTable, mscLpTrTestElapsedTime=mscLpTrTestElapsedTime, mscLpTrIfEntryEntry=mscLpTrIfEntryEntry, mscLpEnetLtCntlRowStatusEntry=mscLpEnetLtCntlRowStatusEntry, mscLpIlsFwdrLtRowStatusTable=mscLpIlsFwdrLtRowStatusTable, mscLpEnetLtFbTxInfoRowStatusEntry=mscLpEnetLtFbTxInfoRowStatusEntry, mscLpEth100StorageType=mscLpEth100StorageType, mscLpTrLtFbIpxHTopTable=mscLpTrLtFbIpxHTopTable, mscLpEnetLtFbLlchComponentName=mscLpEnetLtFbLlchComponentName, mscLpIlsFwdrLtFbLlch=mscLpIlsFwdrLtFbLlch, mscLpIlsFwdrLtFbIpxHTData=mscLpIlsFwdrLtFbIpxHTData, mscLpTrSoftErrors=mscLpTrSoftErrors, mscLpTrLtRowStatusTable=mscLpTrLtRowStatusTable, mscLpEth100LtCntlComponentName=mscLpEth100LtCntlComponentName, mscLpFiMacCOperEntry=mscLpFiMacCOperEntry, mscLpEth100LtFbMacTrTopEntry=mscLpEth100LtFbMacTrTopEntry, mscLpFiTraceMaxExpirationTimer=mscLpFiTraceMaxExpirationTimer, mscLpFiPhyLerFlag=mscLpFiPhyLerFlag, mscLpTrLtFbTxInfoRowStatusEntry=mscLpTrLtFbTxInfoRowStatusEntry, mscLpEth100LtFbRowStatusTable=mscLpEth100LtFbRowStatusTable, mscLpIlsFwdrSnmpOperStatus=mscLpIlsFwdrSnmpOperStatus, mscLpTrLtFbMacTrIndex=mscLpTrLtFbMacTrIndex, mscLpIlsFwdrLtFbMacEnetTData=mscLpIlsFwdrLtFbMacEnetTData, mscLpIlsFwdrLtFbTData=mscLpIlsFwdrLtFbTData, mscLpFiTokenNegotiatedTimer=mscLpFiTokenNegotiatedTimer, mscLpEth100CustomerIdentifier=mscLpEth100CustomerIdentifier, mscLpEnetLtFbAppleHTopEntry=mscLpEnetLtFbAppleHTopEntry, mscLpTrAcErrors=mscLpTrAcErrors, mscLaCidDataTable=mscLaCidDataTable, mscLpIlsFwdrLtFbTxInfoTopTable=mscLpIlsFwdrLtFbTxInfoTopTable, mscLpEth100LtTData=mscLpEth100LtTData, mscLpFiLtFbDataComponentName=mscLpFiLtFbDataComponentName, mscLpEnetLtFrmCpyTopEntry=mscLpEnetLtFrmCpyTopEntry, mscLpIlsFwdrOperStatusTable=mscLpIlsFwdrOperStatusTable, mscLpEnetLtRowStatus=mscLpEnetLtRowStatus, mscLpEnetLtFbIpHRowStatus=mscLpEnetLtFbIpHRowStatus, mscLpIlsFwdrTestErroredFrmRx=mscLpIlsFwdrTestErroredFrmRx, mscLpTrLtFbIpHRowStatusEntry=mscLpTrLtFbIpHRowStatusEntry, mscLpIlsFwdrLtFbMacEnetRowStatus=mscLpIlsFwdrLtFbMacEnetRowStatus, mscLpFiTestDuration=mscLpFiTestDuration, mscLpIlsFwdrLtFbMacTr=mscLpIlsFwdrLtFbMacTr, mscLpIlsFwdrLtFbMacTrTData=mscLpIlsFwdrLtFbMacTrTData, mscLpEth100LtFbIpxHTopTable=mscLpEth100LtFbIpxHTopTable, mscLpTrLtFrmCpyIndex=mscLpTrLtFrmCpyIndex, mscLpFiLtFbTxInfo=mscLpFiLtFbTxInfo, mscLpFiLtFbMacTrTData=mscLpFiLtFbMacTrTData, mscLpTrLtFbIpxHRowStatusEntry=mscLpTrLtFbIpxHRowStatusEntry, mscLpEnetLtFbIpxHRowStatusEntry=mscLpEnetLtFbIpxHRowStatusEntry, mscLpFiTestPTOEntry=mscLpFiTestPTOEntry, mscLpEnetLtFrmCpyComponentName=mscLpEnetLtFrmCpyComponentName, mscLpEnetTestFrmTx=mscLpEnetTestFrmTx, mscLpTrLtFbDataIndex=mscLpTrLtFbDataIndex, mscLpEth100LtFbIpxHRowStatusEntry=mscLpEth100LtFbIpxHRowStatusEntry, mscLpFiLtCntlTopTable=mscLpFiLtCntlTopTable, mscLpEth100CommentText=mscLpEth100CommentText, mscLpFiLtFbRowStatusEntry=mscLpFiLtFbRowStatusEntry, mscLpIlsFwdrLtFbAppleH=mscLpIlsFwdrLtFbAppleH, mscLpEth100LtFbTxInfoTopTable=mscLpEth100LtFbTxInfoTopTable, mscLpIlsFwdrLinkToTrafficSourceEntry=mscLpIlsFwdrLinkToTrafficSourceEntry, mscLpFiNcUpstreamNeighbor=mscLpFiNcUpstreamNeighbor, mscLpFiPhyStorageType=mscLpFiPhyStorageType, mscLpTrNcMacOperTable=mscLpTrNcMacOperTable, mscLpTrLtPrtCfgRowStatusTable=mscLpTrLtPrtCfgRowStatusTable, mscLpEnetLtFbMacEnetTopEntry=mscLpEnetLtFbMacEnetTopEntry, mscLpTrLtFbLlchComponentName=mscLpTrLtFbLlchComponentName, mscLpTrTestErroredFrmRx=mscLpTrTestErroredFrmRx, mscLpFiIfAdminStatus=mscLpFiIfAdminStatus, mscLpIlsFwdrLtFbTopEntry=mscLpIlsFwdrLtFbTopEntry, mscLpTrLtFbIpHTData=mscLpTrLtFbIpHTData, mscLpEth100FramesTransmittedOk=mscLpEth100FramesTransmittedOk, mscLpEnetIfEntryTable=mscLpEnetIfEntryTable, mscLpEnetLtCntlIndex=mscLpEnetLtCntlIndex, mscLpEth100LtFbMacTrRowStatus=mscLpEth100LtFbMacTrRowStatus, mscLpFiLtFbIpxHStorageType=mscLpFiLtFbIpxHStorageType, mscLpFiDownstreamNeighbor=mscLpFiDownstreamNeighbor, mscLpFiLtFbComponentName=mscLpFiLtFbComponentName, mscLpTrLtFrmCpy=mscLpTrLtFrmCpy, mscLpEnetLtFrmCmpIndex=mscLpEnetLtFrmCmpIndex, mscLpEnetLtFbIndex=mscLpEnetLtFbIndex, mscLpFiTokenCounts=mscLpFiTokenCounts, mscLpTrTestResultsEntry=mscLpTrTestResultsEntry, mscLpEth100LtCntl=mscLpEth100LtCntl, mscLaFramerProvEntry=mscLaFramerProvEntry, mscLpFiAcceptBm=mscLpFiAcceptBm, mscLaRowStatus=mscLaRowStatus, mscLpIlsFwdrLtFbMacTrTopTable=mscLpIlsFwdrLtFbMacTrTopTable, mscLpEnetLtPrtCfgRowStatusTable=mscLpEnetLtPrtCfgRowStatusTable, mscLpFiLtRowStatusTable=mscLpFiLtRowStatusTable, mscLpTrLtFbDataStorageType=mscLpTrLtFbDataStorageType, mscLpEth100FcsErrors=mscLpEth100FcsErrors, mscLpEth100LtFbMacTrTopTable=mscLpEth100LtFbMacTrTopTable, mscLpTrLtFbLlchTopTable=mscLpTrLtFbLlchTopTable, mscLpFiLtPrtCfgTopTable=mscLpFiLtPrtCfgTopTable, mscLpEth100LtFbMacTrRowStatusTable=mscLpEth100LtFbMacTrRowStatusTable, mscLpIlsFwdrTestFrmTx=mscLpIlsFwdrTestFrmTx, mscLpFiCustomerIdentifier=mscLpFiCustomerIdentifier, mscLpTrTestType=mscLpTrTestType, mscLpIlsFwdrLtFbTxInfo=mscLpIlsFwdrLtFbTxInfo, mscLpTrLtFrmCpyTopEntry=mscLpTrLtFrmCpyTopEntry, mscLpEth100TestErroredFrmRx=mscLpEth100TestErroredFrmRx, mscLpEnetLtTData=mscLpEnetLtTData, mscLpIlsFwdrLtFrmCpyTopTable=mscLpIlsFwdrLtFrmCpyTopTable, mscLpTrCustomerIdentifier=mscLpTrCustomerIdentifier, mscLpTrLtFb=mscLpTrLtFb, mscLpIlsFwdrLtFbAppleHTopEntry=mscLpIlsFwdrLtFbAppleHTopEntry, mscLpFiLtFbIpxHRowStatus=mscLpFiLtFbIpxHRowStatus, mscLpTrRingOpenStatus=mscLpTrRingOpenStatus, mscLpTrLtCntlIndex=mscLpTrLtCntlIndex, mscLpIlsFwdrLtFbTxInfoStorageType=mscLpIlsFwdrLtFbTxInfoStorageType, mscLpFiLtFbIpHRowStatusTable=mscLpFiLtFbIpHRowStatusTable, mscLpEnetTestType=mscLpEnetTestType, mscLpTrLtFbLlchTopEntry=mscLpTrLtFbLlchTopEntry, mscLpTrLtFbTxInfoTData=mscLpTrLtFbTxInfoTData, mscLpTrLtFbTData=mscLpTrLtFbTData, mscLpFiLtFrmCmpComponentName=mscLpFiLtFrmCmpComponentName, mscLpTrTestPTOTable=mscLpTrTestPTOTable, mscLpIlsFwdrStorageType=mscLpIlsFwdrStorageType, mscLpFi=mscLpFi, mscLpIlsFwdrLtFbIpxHRowStatus=mscLpIlsFwdrLtFbIpxHRowStatus, mscLpEth100IfAdminStatus=mscLpEth100IfAdminStatus, mscLpTrLtFbMacEnetIndex=mscLpTrLtFbMacEnetIndex, mscLpTrLtPrtCfgTopTable=mscLpTrLtPrtCfgTopTable, mscLpTrRemoveRings=mscLpTrRemoveRings, mscLpIlsFwdrTestPTOEntry=mscLpIlsFwdrTestPTOEntry, mscLpEth100OperStatusEntry=mscLpEth100OperStatusEntry, mscLpEth100TestBitsTx=mscLpEth100TestBitsTx, mscLpFiEcmState=mscLpFiEcmState, mscLpFiLtFrmCmpTopEntry=mscLpFiLtFrmCmpTopEntry, mscLpTrBurstErrors=mscLpTrBurstErrors, mscLpTrLtFrmCpyRowStatusTable=mscLpTrLtFrmCpyRowStatusTable, mscLpFiLtFbFddiMacTopEntry=mscLpFiLtFbFddiMacTopEntry, mscLpFiLtFbRowStatusTable=mscLpFiLtFbRowStatusTable, mscLpFiPhyComponentName=mscLpFiPhyComponentName, mscLpEnetLtFbFddiMacIndex=mscLpEnetLtFbFddiMacIndex, mscLpIlsFwdrRowStatusEntry=mscLpIlsFwdrRowStatusEntry, mscLpTrStatsTable=mscLpTrStatsTable, mscLpTrLtFbFddiMacTData=mscLpTrLtFbFddiMacTData, mscLpFiLtFbFddiMacStorageType=mscLpFiLtFbFddiMacStorageType, mscLpTrLtFbMacTrComponentName=mscLpTrLtFbMacTrComponentName, mscLpIlsFwdrLtPrtCfg=mscLpIlsFwdrLtPrtCfg, mscLpEnetLtPrtCfgTopEntry=mscLpEnetLtPrtCfgTopEntry, mscLpIlsFwdrLtFbAppleHRowStatus=mscLpIlsFwdrLtFbAppleHRowStatus, mscLpIlsFwdrLtFbIpxHIndex=mscLpIlsFwdrLtFbIpxHIndex, mscLpEth100RowStatusEntry=mscLpEth100RowStatusEntry, mscLpEth100ExcessiveCollisions=mscLpEth100ExcessiveCollisions, mscLpEth100LtFbAppleHRowStatusTable=mscLpEth100LtFbAppleHRowStatusTable, lanDriversCapabilities=lanDriversCapabilities, mscLpTrLtFbLlchRowStatus=mscLpTrLtFbLlchRowStatus, mscLpEth100LtFrmCpyStorageType=mscLpEth100LtFrmCpyStorageType, mscLpEth100LtRowStatusEntry=mscLpEth100LtRowStatusEntry, mscLpEnetLtFbAppleHIndex=mscLpEnetLtFbAppleHIndex, mscLpTrApplicationFramerName=mscLpTrApplicationFramerName, mscLpFiComponentName=mscLpFiComponentName, mscLpIlsFwdrTestDuration=mscLpIlsFwdrTestDuration, mscLpEth100Lt=mscLpEth100Lt, mscLpEth100LtPrtCfgStorageType=mscLpEth100LtPrtCfgStorageType, mscLpIlsFwdrLtFbMacTrRowStatus=mscLpIlsFwdrLtFbMacTrRowStatus, mscLpFiPhySignalBitsRcvd=mscLpFiPhySignalBitsRcvd, mscLpEnetIfAdminStatus=mscLpEnetIfAdminStatus, mscLpIlsFwdrLinkToTrafficSourceValue=mscLpIlsFwdrLinkToTrafficSourceValue, mscLpEnetRowStatus=mscLpEnetRowStatus, mscLpFiLateCounts=mscLpFiLateCounts, mscLaOperationalState=mscLaOperationalState, mscLpTrLtCntlRowStatusEntry=mscLpTrLtCntlRowStatusEntry, mscLpEnetLtFrmCmpTData=mscLpEnetLtFrmCmpTData, mscLpEnetLtFbDataRowStatusTable=mscLpEnetLtFbDataRowStatusTable, mscLpEnetMacTransmitErrors=mscLpEnetMacTransmitErrors, mscLpTrTestDuration=mscLpTrTestDuration, mscLpFiApplicationFramerName=mscLpFiApplicationFramerName, mscLpEth100=mscLpEth100, mscLpTrLtFbDataRowStatusEntry=mscLpTrLtFbDataRowStatusEntry, mscLpEnetLtFbDataComponentName=mscLpEnetLtFbDataComponentName, mscLpFiLtFrmCmp=mscLpFiLtFrmCmp, mscLpFiTestFrmTx=mscLpFiTestFrmTx, mscLpTrLtFrmCpyTData=mscLpTrLtFrmCpyTData, mscLpTrLtFbTxInfoStorageType=mscLpTrLtFbTxInfoStorageType, mscLpEth100ReceivedFramesIntoRouterBr=mscLpEth100ReceivedFramesIntoRouterBr, mscLpTrIfEntryTable=mscLpTrIfEntryTable, mscLpFiNcMacAddress=mscLpFiNcMacAddress, mscLpEth100LtFbAppleHComponentName=mscLpEth100LtFbAppleHComponentName, mscLpFiStatusReportPolicy=mscLpFiStatusReportPolicy, mscLaComponentName=mscLaComponentName, mscLpTrNodeAddress=mscLpTrNodeAddress, mscLpFiLtFbIpxHTopTable=mscLpFiLtFbIpxHTopTable, mscLpTrLtFbAppleHRowStatusEntry=mscLpTrLtFbAppleHRowStatusEntry, mscLpEnetIndex=mscLpEnetIndex, mscLpFiLostCounts=mscLpFiLostCounts, mscLpEnetLtFbDataTData=mscLpEnetLtFbDataTData, mscLpTrLtFbData=mscLpTrLtFbData, mscLpFiMacOperTable=mscLpFiMacOperTable, mscLpEnetLtFbRowStatus=mscLpEnetLtFbRowStatus, mscLpFiPhyOperTable=mscLpFiPhyOperTable, mscLpTrUpStream=mscLpTrUpStream, mscLpFiLtFbTxInfoTData=mscLpFiLtFbTxInfoTData, mscLpFiLtFbTData=mscLpFiLtFbTData, mscLpIlsFwdrLtFrmCmpComponentName=mscLpIlsFwdrLtFrmCmpComponentName, mscLpIlsFwdrLtCntl=mscLpIlsFwdrLtCntl, mscLpFiUseThruBa=mscLpFiUseThruBa, mscLpIlsFwdrIfAdminStatus=mscLpIlsFwdrIfAdminStatus, mscLpFiLtFbMacEnetRowStatusTable=mscLpFiLtFbMacEnetRowStatusTable, mscLpIlsFwdrLtPrtCfgRowStatusTable=mscLpIlsFwdrLtPrtCfgRowStatusTable, mscLpTrTestRowStatus=mscLpTrTestRowStatus, mscLpEth100LtPrtCfg=mscLpEth100LtPrtCfg, mscLpEth100LtCntlRowStatus=mscLpEth100LtCntlRowStatus, mscLpFiLtFbLlchRowStatusTable=mscLpFiLtFbLlchRowStatusTable, mscLpIlsFwdrLt=mscLpIlsFwdrLt, mscLpEnetCustomerIdentifier=mscLpEnetCustomerIdentifier, mscLpFiTestRowStatus=mscLpFiTestRowStatus, mscLpFiUserData=mscLpFiUserData, mscLpTrLtFbDataComponentName=mscLpTrLtFbDataComponentName, mscLpIlsFwdrOperStatusEntry=mscLpIlsFwdrOperStatusEntry, mscLpEth100LtFbTxInfoTopEntry=mscLpEth100LtFbTxInfoTopEntry, mscLpTrLtCntlComponentName=mscLpTrLtCntlComponentName, mscLpEth100LtFbComponentName=mscLpEth100LtFbComponentName, mscLpIlsFwdrLtFbIndex=mscLpIlsFwdrLtFbIndex, mscLpEth100LtFbMacEnetStorageType=mscLpEth100LtFbMacEnetStorageType, mscLpEth100LtFbIpHTopTable=mscLpEth100LtFbIpHTopTable, mscLpIlsFwdrLtFbLlchRowStatusEntry=mscLpIlsFwdrLtFbLlchRowStatusEntry, mscLpFiLtCntlRowStatus=mscLpFiLtCntlRowStatus, mscLpEth100LtCntlTData=mscLpEth100LtCntlTData, mscLpTrLtFbMacEnet=mscLpTrLtFbMacEnet, mscLpFiSnmpOperStatus=mscLpFiSnmpOperStatus, mscLpEth100LtFbLlchRowStatus=mscLpEth100LtFbLlchRowStatus, mscLpFiLtCntlRowStatusEntry=mscLpFiLtCntlRowStatusEntry, mscLpTrStateTable=mscLpTrStateTable, mscLpIlsFwdrLtFbTxInfoTData=mscLpIlsFwdrLtFbTxInfoTData, mscLpEth100UndersizeFrames=mscLpEth100UndersizeFrames, mscLpTrUsageState=mscLpTrUsageState, mscLpEth100LtFrmCmpStorageType=mscLpEth100LtFrmCmpStorageType, mscLpEth100LtFbIpHRowStatusTable=mscLpEth100LtFbIpHRowStatusTable, mscLpTrLt=mscLpTrLt, mscLpTrNcUpStream=mscLpTrNcUpStream)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LanDriversMIB", mscLpFiFrameCounts=mscLpFiFrameCounts, mscLpTrAdminInfoTable=mscLpTrAdminInfoTable, mscLpEth100TestRowStatusTable=mscLpEth100TestRowStatusTable, mscLpFiLtFrmCpyStorageType=mscLpFiLtFrmCpyStorageType, mscLpFiLtFrmCmpIndex=mscLpFiLtFrmCmpIndex, mscLpEth100SqeTestErrors=mscLpEth100SqeTestErrors, mscLpFiTestComponentName=mscLpFiTestComponentName, mscLpEnetLtFbLlchTopTable=mscLpEnetLtFbLlchTopTable, mscLpIlsFwdrLtFrmCpyComponentName=mscLpIlsFwdrLtFrmCpyComponentName, mscLpEth100DuplexMode=mscLpEth100DuplexMode, mscLpEth100LtFbAppleHTData=mscLpEth100LtFbAppleHTData, mscLpFiLtRowStatusEntry=mscLpFiLtRowStatusEntry, mscLpFiCommentText=mscLpFiCommentText, mscLpTrLtPrtCfgTopEntry=mscLpTrLtPrtCfgTopEntry, mscLpEnetLtPrtCfg=mscLpEnetLtPrtCfg, mscLpTrIndex=mscLpTrIndex, mscLpTrLtFrmCpyRowStatusEntry=mscLpTrLtFrmCpyRowStatusEntry, mscLpTrLtFbTxInfoRowStatusTable=mscLpTrLtFbTxInfoRowStatusTable, mscLaFramerRowStatus=mscLaFramerRowStatus, mscLpEnetSingleCollisionFrames=mscLpEnetSingleCollisionFrames, mscLpEnetLt=mscLpEnetLt, mscLpEnetLtFbTxInfoComponentName=mscLpEnetLtFbTxInfoComponentName, mscLpFiLtFbTxInfoTopEntry=mscLpFiLtFbTxInfoTopEntry, mscLpFiTestBitsRx=mscLpFiTestBitsRx, mscLpTrLtFrmCmpIndex=mscLpTrLtFrmCmpIndex, mscLpFiAcceptBs=mscLpFiAcceptBs, mscLpFiLtComponentName=mscLpFiLtComponentName, mscLpIlsFwdrLtFrmCmpRowStatus=mscLpIlsFwdrLtFrmCmpRowStatus, mscLpEth100LtRowStatus=mscLpEth100LtRowStatus, mscLpEnetSqeTestErrors=mscLpEnetSqeTestErrors, mscLpFiCopiedCounts=mscLpFiCopiedCounts, mscLpTrLtFbIpxH=mscLpTrLtFbIpxH, mscLpIlsFwdrFramesReceived=mscLpIlsFwdrFramesReceived, mscLpEth100LtFrmCmpComponentName=mscLpEth100LtFrmCmpComponentName, mscLpEth100LtPrtCfgIndex=mscLpEth100LtPrtCfgIndex, mscLpEth100LtFbMacTrStorageType=mscLpEth100LtFbMacTrStorageType, mscLpEth100LtFbMacTrIndex=mscLpEth100LtFbMacTrIndex, mscLpEth100LtFbDataRowStatusTable=mscLpEth100LtFbDataRowStatusTable, mscLpTrLtFbLlch=mscLpTrLtFbLlch, mscLpEth100TestStorageType=mscLpEth100TestStorageType, mscLaFramerRowStatusTable=mscLaFramerRowStatusTable, mscLpFiLtFbAppleHTopEntry=mscLpFiLtFbAppleHTopEntry, mscLpFiPhyProvTable=mscLpFiPhyProvTable, mscLpTrLtFbMacEnetRowStatus=mscLpTrLtFbMacEnetRowStatus, mscLpEth100LtFb=mscLpEth100LtFb, mscLpEth100LtFbRowStatus=mscLpEth100LtFbRowStatus, mscLpIlsFwdrStatsTable=mscLpIlsFwdrStatsTable, mscLpEth100LtPrtCfgRowStatus=mscLpEth100LtPrtCfgRowStatus, mscLpEnetIfEntryEntry=mscLpEnetIfEntryEntry, mscLpEnetLtFbAppleHStorageType=mscLpEnetLtFbAppleHStorageType, mscLpEnetLtCntlRowStatus=mscLpEnetLtCntlRowStatus, mscLpFiLtFbDataRowStatusEntry=mscLpFiLtFbDataRowStatusEntry, mscLpIlsFwdrLtCntlStorageType=mscLpIlsFwdrLtCntlStorageType, mscLaFramerIndex=mscLaFramerIndex, mscLpEnetTestDuration=mscLpEnetTestDuration, mscLpIlsFwdrTestStorageType=mscLpIlsFwdrTestStorageType, mscLpTrLtFbIpxHComponentName=mscLpTrLtFbIpxHComponentName, mscLpEth100LtPrtCfgTopTable=mscLpEth100LtPrtCfgTopTable, mscLpEnet=mscLpEnet, mscLpEth100LtFbFddiMacTopTable=mscLpEth100LtFbFddiMacTopTable, mscLpFiLtFbLlchRowStatusEntry=mscLpFiLtFbLlchRowStatusEntry, mscLpTrLtFbMacTrTopTable=mscLpTrLtFbMacTrTopTable, mscLpIlsFwdrLtFbMacEnetRowStatusEntry=mscLpIlsFwdrLtFbMacEnetRowStatusEntry, mscLpFiTestElapsedTime=mscLpFiTestElapsedTime, mscLpIlsFwdrLtCntlRowStatusTable=mscLpIlsFwdrLtCntlRowStatusTable, mscLpEth100LtFrmCpyTopTable=mscLpEth100LtFrmCpyTopTable, mscLpFiTestFrmRx=mscLpFiTestFrmRx, mscLpIlsFwdrTestRowStatusTable=mscLpIlsFwdrTestRowStatusTable, mscLpEth100LtFbFddiMacRowStatus=mscLpEth100LtFbFddiMacRowStatus, mscLpFiLtFrmCpyRowStatusTable=mscLpFiLtFrmCpyRowStatusTable, mscLpTrLtFbMacTrRowStatusEntry=mscLpTrLtFbMacTrRowStatusEntry, mscLpTrOperEntry=mscLpTrOperEntry, mscLpFiPhyLerEstimate=mscLpFiPhyLerEstimate, mscLpEnetLtFbLlchRowStatus=mscLpEnetLtFbLlchRowStatus, mscLpTrLtTData=mscLpTrLtTData, mscLpTrLtFbIpHIndex=mscLpTrLtFbIpHIndex, mscLpEth100LtFbTxInfoStorageType=mscLpEth100LtFbTxInfoStorageType, mscLpEnetLtFbIpH=mscLpEnetLtFbIpH, mscLpEth100LtFbDataIndex=mscLpEth100LtFbDataIndex, mscLpEth100RowStatusTable=mscLpEth100RowStatusTable, mscLpFiLtFbFddiMacTopTable=mscLpFiLtFbFddiMacTopTable, mscLpEnetLtFbFddiMacRowStatus=mscLpEnetLtFbFddiMacRowStatus, mscLpEnetLtFbIpHComponentName=mscLpEnetLtFbIpHComponentName, mscLpFiOperStatusTable=mscLpFiOperStatusTable, mscLpEth100UsageState=mscLpEth100UsageState, mscLpEth100Eth100StatsEntry=mscLpEth100Eth100StatsEntry, mscLpFiLtFbAppleHRowStatusEntry=mscLpFiLtFbAppleHRowStatusEntry, mscLpIlsFwdrLtFbMacEnetTopTable=mscLpIlsFwdrLtFbMacEnetTopTable, mscLpEth100LtFrmCmpIndex=mscLpEth100LtFrmCmpIndex, mscLpEth100LtFrmCmpRowStatusEntry=mscLpEth100LtFrmCmpRowStatusEntry, mscLpFiLtPrtCfgRowStatusTable=mscLpFiLtPrtCfgRowStatusTable, mscLpTrLtCntlTopEntry=mscLpTrLtCntlTopEntry, mscLpFiNcMacOperEntry=mscLpFiNcMacOperEntry, mscLpFiLtFbTxInfoRowStatusTable=mscLpFiLtFbTxInfoRowStatusTable, mscLpEth100LtFbFddiMacRowStatusEntry=mscLpEth100LtFbFddiMacRowStatusEntry, mscLpIlsFwdrTestFrmRx=mscLpIlsFwdrTestFrmRx, mscLpFiLtFbLlchTopEntry=mscLpFiLtFbLlchTopEntry, mscLpFiCidDataTable=mscLpFiCidDataTable, mscLpTrLtFbIpxHRowStatusTable=mscLpTrLtFbIpxHRowStatusTable, mscLpEth100LtFbDataTopTable=mscLpEth100LtFbDataTopTable, mscLpFiPhyLinkErrorMonitor=mscLpFiPhyLinkErrorMonitor, mscLpFiErrorCounts=mscLpFiErrorCounts, mscLpEth100AutoNegotiation=mscLpEth100AutoNegotiation, mscLpEnetLtFbTxInfoIndex=mscLpEnetLtFbTxInfoIndex, mscLpEnetLtFrmCmpRowStatusEntry=mscLpEnetLtFrmCmpRowStatusEntry, mscLpFiRingLatency=mscLpFiRingLatency, mscLaOperStatusEntry=mscLaOperStatusEntry, mscLpTrLtFbRowStatus=mscLpTrLtFbRowStatus, mscLpEth100LtFbIpHRowStatusEntry=mscLpEth100LtFbIpHRowStatusEntry, mscLpEnetLtFbMacTrRowStatusEntry=mscLpEnetLtFbMacTrRowStatusEntry, mscLpIlsFwdrLtFbIpHRowStatus=mscLpIlsFwdrLtFbIpHRowStatus, mscLpEth100LtFbTxInfoRowStatus=mscLpEth100LtFbTxInfoRowStatus, mscLpIlsFwdrLtFrmCpyTopEntry=mscLpIlsFwdrLtFrmCpyTopEntry, mscLpFiNcMacOperTable=mscLpFiNcMacOperTable, mscLpIlsFwdrLtFbMacTrRowStatusEntry=mscLpIlsFwdrLtFbMacTrRowStatusEntry, mscLpEnetTest=mscLpEnetTest, mscLpEth100LtFbFddiMacTopEntry=mscLpEth100LtFbFddiMacTopEntry, mscLpEth100LtFbMacTrRowStatusEntry=mscLpEth100LtFbMacTrRowStatusEntry, mscLpEth100Test=mscLpEth100Test, mscLpFiLtFbMacEnetComponentName=mscLpFiLtFbMacEnetComponentName, mscLpFiLtFbFddiMacRowStatusEntry=mscLpFiLtFbFddiMacRowStatusEntry, mscLpTrLtPrtCfg=mscLpTrLtPrtCfg, mscLpIlsFwdrLtFbTxInfoIndex=mscLpIlsFwdrLtFbTxInfoIndex, mscLpIlsFwdrLtFbDataTData=mscLpIlsFwdrLtFbDataTData, mscLpEth100RowStatus=mscLpEth100RowStatus, mscLpEnetCarrierSenseErrors=mscLpEnetCarrierSenseErrors, mscLpTrLtFrmCpyTopTable=mscLpTrLtFrmCpyTopTable, mscLpIlsFwdrLtFbIpxHStorageType=mscLpIlsFwdrLtFbIpxHStorageType, mscLpEth100LtFbLlchIndex=mscLpEth100LtFbLlchIndex, mscLpTrTestResultsTable=mscLpTrTestResultsTable, mscLpIlsFwdrLtFbTxInfoRowStatus=mscLpIlsFwdrLtFbTxInfoRowStatus, mscLpEth100LtFbAppleHStorageType=mscLpEth100LtFbAppleHStorageType, mscLpIlsFwdrLtPrtCfgStorageType=mscLpIlsFwdrLtPrtCfgStorageType, mscLpEnetLtFbTopEntry=mscLpEnetLtFbTopEntry, mscLpTrLtFbDataTopTable=mscLpTrLtFbDataTopTable, mscLpIlsFwdrLtPrtCfgRowStatus=mscLpIlsFwdrLtPrtCfgRowStatus, mscLpIlsFwdrIfIndex=mscLpIlsFwdrIfIndex, mscLpTrLtTopEntry=mscLpTrLtTopEntry, mscLpFiOperStatusEntry=mscLpFiOperStatusEntry, mscLpFiStorageType=mscLpFiStorageType, mscLpTrVendor=mscLpTrVendor, mscLpIlsFwdrLtFbIpHRowStatusEntry=mscLpIlsFwdrLtFbIpHRowStatusEntry, mscLpIlsFwdrLtFbLlchRowStatus=mscLpIlsFwdrLtFbLlchRowStatus, mscLpTrLtFbMacEnetRowStatusTable=mscLpTrLtFbMacEnetRowStatusTable, mscLpTrCidDataTable=mscLpTrCidDataTable, mscLpIlsFwdrLtTopTable=mscLpIlsFwdrLtTopTable, mscLpIlsFwdrLtFbIpHTopTable=mscLpIlsFwdrLtFbIpHTopTable, mscLpEth100LtCntlRowStatusTable=mscLpEth100LtCntlRowStatusTable, mscLaSnmpOperStatus=mscLaSnmpOperStatus, mscLpEth100LtFbIpHComponentName=mscLpEth100LtFbIpHComponentName, mscLpIlsFwdrLtFrmCmp=mscLpIlsFwdrLtFrmCmp, mscLpEth100LtFbTxInfoComponentName=mscLpEth100LtFbTxInfoComponentName, mscLpTrStatsEntry=mscLpTrStatsEntry, mscLpTrLtFbTopEntry=mscLpTrLtFbTopEntry, mscLpIlsFwdrProcessedCount=mscLpIlsFwdrProcessedCount, mscLpFiLtFbTxInfoComponentName=mscLpFiLtFbTxInfoComponentName, mscLpEth100LtFbData=mscLpEth100LtFbData, mscLpIlsFwdrLtFbDataRowStatusTable=mscLpIlsFwdrLtFbDataRowStatusTable, mscLpEnetIfIndex=mscLpEnetIfIndex, mscLpIlsFwdrLtFbMacEnetRowStatusTable=mscLpIlsFwdrLtFbMacEnetRowStatusTable, mscLpIlsFwdrIfEntryEntry=mscLpIlsFwdrIfEntryEntry, mscLpEth100MacAddress=mscLpEth100MacAddress, mscLpTrLtFbFddiMacRowStatusEntry=mscLpTrLtFbFddiMacRowStatusEntry, mscLpEnetLtFrmCpyRowStatusEntry=mscLpEnetLtFrmCpyRowStatusEntry, mscLpTrLtFbTxInfoTopEntry=mscLpTrLtFbTxInfoTopEntry, mscLpFiLtFb=mscLpFiLtFb, mscLpFiLtFbMacEnet=mscLpFiLtFbMacEnet, mscLpTrIfIndex=mscLpTrIfIndex, mscLpEth100LtFbMacEnet=mscLpEth100LtFbMacEnet, mscLpEnetProvEntry=mscLpEnetProvEntry, mscLpTrLtFrmCpyComponentName=mscLpTrLtFrmCpyComponentName, mscLpTrLtFbDataTopEntry=mscLpTrLtFbDataTopEntry, mscLpEnetLtFbData=mscLpEnetLtFbData, mscLpEth100TestRowStatusEntry=mscLpEth100TestRowStatusEntry, lanDriversGroup=lanDriversGroup, mscLpEth100TestComponentName=mscLpEth100TestComponentName, mscLpFiLtFbDataRowStatus=mscLpFiLtFbDataRowStatus, mscLpEth100ReceivedOctetsIntoRouterBr=mscLpEth100ReceivedOctetsIntoRouterBr, mscLpEth100LateCollisions=mscLpEth100LateCollisions, mscLpEth100LtFrmCpyRowStatus=mscLpEth100LtFrmCpyRowStatus, mscLpEnetLtFbIpHStorageType=mscLpEnetLtFbIpHStorageType, mscLpFiLtFbDataIndex=mscLpFiLtFbDataIndex, mscLaFramer=mscLaFramer, mscLpIlsFwdrLtCntlTData=mscLpIlsFwdrLtCntlTData, mscLpEnetLtFbLlch=mscLpEnetLtFbLlch, mscLpTrLtFbTxInfoIndex=mscLpTrLtFbTxInfoIndex, mscLpTrNcMacAddress=mscLpTrNcMacAddress, mscLpFiLtFbMacEnetTopEntry=mscLpFiLtFbMacEnetTopEntry, mscLpEnetLtFbMacTrTopTable=mscLpEnetLtFbMacTrTopTable, mscLpFiLtFbFddiMacRowStatus=mscLpFiLtFbFddiMacRowStatus, mscLpEnetTestIndex=mscLpEnetTestIndex, mscLpTrLostFrameErrors=mscLpTrLostFrameErrors, mscLpEnetLtTopTable=mscLpEnetLtTopTable, mscLpIlsFwdrRowStatus=mscLpIlsFwdrRowStatus, mscLpIlsFwdrTestComponentName=mscLpIlsFwdrTestComponentName, mscLpEth100ProvTable=mscLpEth100ProvTable, mscLpFiLtPrtCfg=mscLpFiLtPrtCfg, mscLpFiLtFbIndex=mscLpFiLtFbIndex, mscLpIlsFwdrTestCauseOfTermination=mscLpIlsFwdrTestCauseOfTermination, mscLpIlsFwdrLtFrmCpyTData=mscLpIlsFwdrLtFrmCpyTData, mscLpFiLtFbIpH=mscLpFiLtFbIpH, mscLpIlsFwdrLtFbLlchTData=mscLpIlsFwdrLtFbLlchTData, mscLpFiPhyLemCounts=mscLpFiPhyLemCounts, mscLpEnetMultipleCollisionFrames=mscLpEnetMultipleCollisionFrames, mscLpEth100LtFbLlchTopTable=mscLpEth100LtFbLlchTopTable, mscLpEnetLtFbMacEnetTData=mscLpEnetLtFbMacEnetTData, mscLpEth100CarrierSenseErrors=mscLpEth100CarrierSenseErrors, mscLaUsageState=mscLaUsageState, mscLpEnetLtIndex=mscLpEnetLtIndex, mscLpFiLtFbIpHStorageType=mscLpFiLtFbIpHStorageType, mscLpTrLtFbMacTr=mscLpTrLtFbMacTr, mscLpEth100LtFbFddiMac=mscLpEth100LtFbFddiMac, mscLpFiLtFbFddiMacIndex=mscLpFiLtFbFddiMacIndex, mscLpFiLtIndex=mscLpFiLtIndex, mscLpTrLtFbFddiMac=mscLpTrLtFbFddiMac, mscLaFramerInterfaceNamesRowStatus=mscLaFramerInterfaceNamesRowStatus, mscLpEth100LtFrmCpyComponentName=mscLpEth100LtFrmCpyComponentName, mscLpIlsFwdrLtFbDataRowStatusEntry=mscLpIlsFwdrLtFbDataRowStatusEntry, mscLpTrTestRowStatusTable=mscLpTrTestRowStatusTable, mscLpTrLtFbTxInfo=mscLpTrLtFbTxInfo, mscLpEnetLtFrmCpyRowStatus=mscLpEnetLtFrmCpyRowStatus, mscLpFiLtFbTopTable=mscLpFiLtFbTopTable, mscLaCidDataEntry=mscLaCidDataEntry, mscLpEnetLtFbDataRowStatus=mscLpEnetLtFbDataRowStatus, mscLpFiSmtOperTable=mscLpFiSmtOperTable, mscLpEnetLtFbLlchRowStatusEntry=mscLpEnetLtFbLlchRowStatusEntry, mscLpEth100TestFrmTx=mscLpEth100TestFrmTx, mscLpEnetLtFbComponentName=mscLpEnetLtFbComponentName, mscLpEnetLtFbMacTrTData=mscLpEnetLtFbMacTrTData, mscLpFiLtFbFddiMacComponentName=mscLpFiLtFbFddiMacComponentName, mscLpFiMacProvTable=mscLpFiMacProvTable, mscLpTrTestComponentName=mscLpTrTestComponentName, mscLpIlsFwdrLtCntlComponentName=mscLpIlsFwdrLtCntlComponentName, mscLpIlsFwdrLtPrtCfgTopTable=mscLpIlsFwdrLtPrtCfgTopTable, mscLpEth100ProvEntry=mscLpEth100ProvEntry, mscLpFiLtFbMacTrIndex=mscLpFiLtFbMacTrIndex, mscLpTrRowStatusEntry=mscLpTrRowStatusEntry, mscLpTrLtFbIpHStorageType=mscLpTrLtFbIpHStorageType, mscLpIlsFwdrLtCntlRowStatus=mscLpIlsFwdrLtCntlRowStatus, mscLpFiStateTable=mscLpFiStateTable, mscLpFiTestRowStatusEntry=mscLpFiTestRowStatusEntry, mscLpTrLobeWires=mscLpTrLobeWires, mscLpEnetLtFbDataIndex=mscLpEnetLtFbDataIndex, mscLpFiPhyLerAlarm=mscLpFiPhyLerAlarm, mscLpTrLtFbIpxHTData=mscLpTrLtFbIpxHTData, mscLpIlsFwdrLtPrtCfgRowStatusEntry=mscLpIlsFwdrLtPrtCfgRowStatusEntry, mscLpEth100LtFbLlch=mscLpEth100LtFbLlch, mscLpEth100TestTimeRemaining=mscLpEth100TestTimeRemaining, mscLpEnetLtFbIpHIndex=mscLpEnetLtFbIpHIndex, mscLpFiLtFbTxInfoRowStatusEntry=mscLpFiLtFbTxInfoRowStatusEntry, mscLpTrLtFbFddiMacTopTable=mscLpTrLtFbFddiMacTopTable, mscLpFiSmtOperEntry=mscLpFiSmtOperEntry, mscLpEnetAdminInfoTable=mscLpEnetAdminInfoTable, mscLpFiLtFbTxInfoTopTable=mscLpFiLtFbTxInfoTopTable)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LanDriversMIB", mscLpEth100LtFbDataStorageType=mscLpEth100LtFbDataStorageType, mscLpTrLtFbFddiMacTopEntry=mscLpTrLtFbFddiMacTopEntry, mscLpIlsFwdrErrorCount=mscLpIlsFwdrErrorCount, mscLpIlsFwdrLtFrmCpyStorageType=mscLpIlsFwdrLtFrmCpyStorageType, mscLpTrLtFbLlchStorageType=mscLpTrLtFbLlchStorageType, mscLpIlsFwdrLtFbStorageType=mscLpIlsFwdrLtFbStorageType, mscLpFiPhySignalState=mscLpFiPhySignalState, mscLpFiLtFbStorageType=mscLpFiLtFbStorageType, mscLpEnetLtFbIpHRowStatusEntry=mscLpEnetLtFbIpHRowStatusEntry, mscLpIlsFwdrTestBitsRx=mscLpIlsFwdrTestBitsRx, mscLpTrTestBitsTx=mscLpTrTestBitsTx, mscLpEth100LtFbIpxHIndex=mscLpEth100LtFbIpxHIndex, mscLpFiLtFbIpHTopEntry=mscLpFiLtFbIpHTopEntry, mscLpIlsFwdrAdminState=mscLpIlsFwdrAdminState, mscLpFiTestCauseOfTermination=mscLpFiTestCauseOfTermination, mscLpEnetLtFbTxInfoRowStatusTable=mscLpEnetLtFbTxInfoRowStatusTable, mscLpTrReceiveCongestions=mscLpTrReceiveCongestions, mscLpTrLtFrmCmpComponentName=mscLpTrLtFrmCmpComponentName, mscLpFiLtFbTopEntry=mscLpFiLtFbTopEntry, mscLpFiOperationalState=mscLpFiOperationalState, mscLpEth100LtCntlIndex=mscLpEth100LtCntlIndex, mscLpFiRingOpCounts=mscLpFiRingOpCounts, mscLpEnetLtFbIpxHTopTable=mscLpEnetLtFbIpxHTopTable, mscLpFiLtFbDataRowStatusTable=mscLpFiLtFbDataRowStatusTable, mscLpFiLtFbIpHTData=mscLpFiLtFbIpHTData, mscLpTrLtFbAppleH=mscLpTrLtFbAppleH, mscLpIlsFwdrTestResultsEntry=mscLpIlsFwdrTestResultsEntry, mscLpEnetLateCollisions=mscLpEnetLateCollisions, mscLpEnetLtFbRowStatusTable=mscLpEnetLtFbRowStatusTable, mscLpEnetTestResultsEntry=mscLpEnetTestResultsEntry, mscLpTrLtFrmCmpTopEntry=mscLpTrLtFrmCmpTopEntry, mscLpIlsFwdrLtFbIpH=mscLpIlsFwdrLtFbIpH, mscLpFiAdminInfoTable=mscLpFiAdminInfoTable, mscLpIlsFwdrLtFbRowStatusEntry=mscLpIlsFwdrLtFbRowStatusEntry, mscLpEth100LtFbDataRowStatusEntry=mscLpEth100LtFbDataRowStatusEntry, mscLaIfEntryTable=mscLaIfEntryTable, mscLpIlsFwdrLtPrtCfgTopEntry=mscLpIlsFwdrLtPrtCfgTopEntry, mscLpIlsFwdrLtFbIpxHTopEntry=mscLpIlsFwdrLtFbIpxHTopEntry, mscLpEth100LtFbTopEntry=mscLpEth100LtFbTopEntry, mscLpFiLtFbIpHTopTable=mscLpFiLtFbIpHTopTable, mscLpIlsFwdrTest=mscLpIlsFwdrTest, mscLpEnetLtFbMacEnetRowStatusTable=mscLpEnetLtFbMacEnetRowStatusTable, mscLaStorageType=mscLaStorageType, mscLpIlsFwdrLtFbMacEnetIndex=mscLpIlsFwdrLtFbMacEnetIndex, mscLpEnetLtCntlRowStatusTable=mscLpEnetLtCntlRowStatusTable, mscLpFiLtFbLlch=mscLpFiLtFbLlch, mscLpEth100ComponentName=mscLpEth100ComponentName, mscLpEth100MultipleCollisionFrames=mscLpEth100MultipleCollisionFrames, mscLpFiLtFbMacTrRowStatus=mscLpFiLtFbMacTrRowStatus, mscLaFramerInterfaceNamesValue=mscLaFramerInterfaceNamesValue, mscLpTrTestCauseOfTermination=mscLpTrTestCauseOfTermination, mscLpTrRingStatus=mscLpTrRingStatus, mscLpTrStateEntry=mscLpTrStateEntry, mscLpFiLtFbIpHComponentName=mscLpFiLtFbIpHComponentName, mscLpEnetExcessiveCollisions=mscLpEnetExcessiveCollisions, mscLpIlsFwdrLtFbIpHComponentName=mscLpIlsFwdrLtFbIpHComponentName, mscLpEth100IfIndex=mscLpEth100IfIndex, lanDriversCapabilitiesCA=lanDriversCapabilitiesCA, mscLpFiLtFbIpxH=mscLpFiLtFbIpxH, mscLpIlsFwdrLtFbRowStatus=mscLpIlsFwdrLtFbRowStatus, mscLpFiLtFbLlchStorageType=mscLpFiLtFbLlchStorageType, mscLpEth100TestType=mscLpEth100TestType, mscLpEnetLtFrmCmpStorageType=mscLpEnetLtFrmCmpStorageType, mscLpEth100Eth100StatsTable=mscLpEth100Eth100StatsTable, mscLpFiLtPrtCfgStorageType=mscLpFiLtPrtCfgStorageType, mscLpIlsFwdrTestRowStatusEntry=mscLpIlsFwdrTestRowStatusEntry, mscLpIlsFwdrTestPTOTable=mscLpIlsFwdrTestPTOTable, mscLpEth100LtFbLlchStorageType=mscLpEth100LtFbLlchStorageType, mscLpEnetLtFbMacEnetIndex=mscLpEnetLtFbMacEnetIndex, mscLaFramerStorageType=mscLaFramerStorageType, mscLpFiLtFrmCmpTopTable=mscLpFiLtFrmCmpTopTable, mscLpFiLtFbIpHIndex=mscLpFiLtFbIpHIndex, mscLaFramerProvTable=mscLaFramerProvTable, mscLpEnetStorageType=mscLpEnetStorageType, mscLpTrLtFbRowStatusTable=mscLpTrLtFbRowStatusTable, mscLpEth100LtPrtCfgTData=mscLpEth100LtPrtCfgTData, mscLpIlsFwdrLtFbRowStatusTable=mscLpIlsFwdrLtFbRowStatusTable, mscLpFiRowStatusTable=mscLpFiRowStatusTable, mscLpEnetTestComponentName=mscLpEnetTestComponentName, mscLpFiLtFbDataTopTable=mscLpFiLtFbDataTopTable, mscLpEth100LtFbDataTopEntry=mscLpEth100LtFbDataTopEntry, mscLpFiPhyLemRejectCounts=mscLpFiPhyLemRejectCounts, mscLpTrProvTable=mscLpTrProvTable, mscLpIlsFwdrLtFbIpHTopEntry=mscLpIlsFwdrLtFbIpHTopEntry, mscLpEnetLtFbMacEnetTopTable=mscLpEnetLtFbMacEnetTopTable, mscLpEnetTestResultsTable=mscLpEnetTestResultsTable, mscLpFiLtFbDataTData=mscLpFiLtFbDataTData, mscLpTrFreqErrors=mscLpTrFreqErrors, mscLpFiPhyProvEntry=mscLpFiPhyProvEntry, mscLpFiLtCntlIndex=mscLpFiLtCntlIndex, mscLpIlsFwdrLtFrmCpyIndex=mscLpIlsFwdrLtFrmCpyIndex, mscLpIlsFwdrTestType=mscLpIlsFwdrTestType, mscLpFiValidTransmissionTimer=mscLpFiValidTransmissionTimer, mscLpFiPhyRowStatus=mscLpFiPhyRowStatus, mscLpIlsFwdrIfEntryTable=mscLpIlsFwdrIfEntryTable, mscLpEth100LtFbDataTData=mscLpEth100LtFbDataTData, mscLpEth100LtFbIpHStorageType=mscLpEth100LtFbIpHStorageType, mscLpTrOperTable=mscLpTrOperTable, mscLpFiMacProvEntry=mscLpFiMacProvEntry, mscLpIlsFwdrLtFrmCmpTopTable=mscLpIlsFwdrLtFrmCmpTopTable, mscLpEnetLtFbDataTopEntry=mscLpEnetLtFbDataTopEntry, mscLpFiLtFbAppleHStorageType=mscLpFiLtFbAppleHStorageType, mscLpTrLtFbMacTrTopEntry=mscLpTrLtFbMacTrTopEntry, mscLpEth100IfEntryEntry=mscLpEth100IfEntryEntry, mscLpFiTestStorageType=mscLpFiTestStorageType, mscLpTrFrameCopiedErrors=mscLpTrFrameCopiedErrors, mscLpEnetLtCntl=mscLpEnetLtCntl, mscLpFiLtFbIpHRowStatusEntry=mscLpFiLtFbIpHRowStatusEntry, mscLpTrLtRowStatus=mscLpTrLtRowStatus, mscLpIlsFwdrTestRowStatus=mscLpIlsFwdrTestRowStatus, mscLpEth100LtFbLlchTopEntry=mscLpEth100LtFbLlchTopEntry, mscLpEnetLtCntlTData=mscLpEnetLtCntlTData, mscLpEth100LtFbAppleHIndex=mscLpEth100LtFbAppleHIndex, mscLpTrLtFrmCpyStorageType=mscLpTrLtFrmCpyStorageType, mscLpTrLtFbIpxHRowStatus=mscLpTrLtFbIpxHRowStatus, mscLpEnetLtFbAppleHRowStatusTable=mscLpEnetLtFbAppleHRowStatusTable, lanDriversMIB=lanDriversMIB, mscLpIlsFwdrLtFbDataRowStatus=mscLpIlsFwdrLtFbDataRowStatus, mscLpEth100OctetsTransmittedOk=mscLpEth100OctetsTransmittedOk, mscLpEth100LtFbTxInfoRowStatusTable=mscLpEth100LtFbTxInfoRowStatusTable, mscLpEnetLtPrtCfgRowStatus=mscLpEnetLtPrtCfgRowStatus, mscLpIlsFwdrTestIndex=mscLpIlsFwdrTestIndex, mscLpEth100LtFbLlchRowStatusEntry=mscLpEth100LtFbLlchRowStatusEntry, mscLpEnetOperEntry=mscLpEnetOperEntry, mscLpEnetLtFbTxInfoTData=mscLpEnetLtFbTxInfoTData, mscLpEnetTestTimeRemaining=mscLpEnetTestTimeRemaining, mscLpTrGroupAddress=mscLpTrGroupAddress, mscLpTrLtFbMacEnetComponentName=mscLpTrLtFbMacEnetComponentName, mscLpTrLtFbLlchTData=mscLpTrLtFbLlchTData, mscLpEnetRowStatusEntry=mscLpEnetRowStatusEntry, mscLpFiTransmitCounts=mscLpFiTransmitCounts, mscLpEnetLtFbLlchStorageType=mscLpEnetLtFbLlchStorageType, mscLpEth100LtFbTxInfoIndex=mscLpEth100LtFbTxInfoIndex, mscLpIlsFwdrLtFrmCmpRowStatusEntry=mscLpIlsFwdrLtFrmCmpRowStatusEntry, mscLpFiBypassPresent=mscLpFiBypassPresent, mscLaFramerInterfaceNamesEntry=mscLaFramerInterfaceNamesEntry, mscLpIlsFwdrLtFbAppleHIndex=mscLpIlsFwdrLtFbAppleHIndex, mscLpFiLtPrtCfgTopEntry=mscLpFiLtPrtCfgTopEntry, mscLpIlsFwdrLtFbTxInfoComponentName=mscLpIlsFwdrLtFbTxInfoComponentName, mscLpIlsFwdrLtFb=mscLpIlsFwdrLtFb, mscLpEth100LtFrmCpyTopEntry=mscLpEth100LtFrmCpyTopEntry, mscLpIlsFwdrLtFbMacEnetStorageType=mscLpIlsFwdrLtFbMacEnetStorageType, mscLpTrRingRecoverys=mscLpTrRingRecoverys, mscLpIlsFwdrFramesDiscarded=mscLpIlsFwdrFramesDiscarded, mscLpFiLtCntlTData=mscLpFiLtCntlTData, mscLpTrLtFbIpHTopTable=mscLpTrLtFbIpHTopTable, mscLpEnetLtFrmCmpComponentName=mscLpEnetLtFrmCmpComponentName, mscLpEnetLtFbIpxH=mscLpEnetLtFbIpxH, mscLpEth100TestFrmSize=mscLpEth100TestFrmSize, mscLpFiTokenMaxTimer=mscLpFiTokenMaxTimer, mscLaStateEntry=mscLaStateEntry, mscLpIlsFwdrLtFbLlchTopEntry=mscLpIlsFwdrLtFbLlchTopEntry, mscLpEth100LtFbFddiMacComponentName=mscLpEth100LtFbFddiMacComponentName, mscLpEnetLtFbMacEnetComponentName=mscLpEnetLtFbMacEnetComponentName, mscLpTrLtFbAppleHTopTable=mscLpTrLtFbAppleHTopTable, mscLpEth100TestBitsRx=mscLpEth100TestBitsRx, mscLaRowStatusTable=mscLaRowStatusTable, mscLpEnetLtPrtCfgTData=mscLpEnetLtPrtCfgTData, mscLpEnetLtFbLlchRowStatusTable=mscLpEnetLtFbLlchRowStatusTable, mscLpEnetTestFrmSize=mscLpEnetTestFrmSize, mscLpEnetLtCntlTopEntry=mscLpEnetLtCntlTopEntry, mscLpTrLtPrtCfgRowStatusEntry=mscLpTrLtPrtCfgRowStatusEntry, mscLpIlsFwdrTestTimeRemaining=mscLpIlsFwdrTestTimeRemaining, mscLpIlsFwdrLtFbLlchStorageType=mscLpIlsFwdrLtFbLlchStorageType, mscLpEth100LtFbIpxHTData=mscLpEth100LtFbIpxHTData, mscLpTrTest=mscLpTrTest, mscLpIlsFwdrLtFrmCpyRowStatus=mscLpIlsFwdrLtFrmCpyRowStatus, mscLpEnetTestRowStatusTable=mscLpEnetTestRowStatusTable, mscLpFiMacAddress=mscLpFiMacAddress, mscLpIlsFwdrLtFrmCpyRowStatusEntry=mscLpIlsFwdrLtFrmCpyRowStatusEntry, mscLpFiPhy=mscLpFiPhy, mscLpIlsFwdrLtFbFddiMacRowStatusEntry=mscLpIlsFwdrLtFbFddiMacRowStatusEntry, mscLpIlsFwdr=mscLpIlsFwdr, mscLpTrRowStatusTable=mscLpTrRowStatusTable, mscLpIlsFwdrLtFbIpHStorageType=mscLpIlsFwdrLtFbIpHStorageType, mscLpTrLtTopTable=mscLpTrLtTopTable, mscLpIlsFwdrLtFbFddiMacTData=mscLpIlsFwdrLtFbFddiMacTData, mscLpFiFrameErrorFlag=mscLpFiFrameErrorFlag, mscLpTrOperationalState=mscLpTrOperationalState, mscLpTrLtFbMacEnetTopEntry=mscLpTrLtFbMacEnetTopEntry, mscLpFiLtFrmCmpRowStatus=mscLpFiLtFrmCmpRowStatus, mscLpEth100LtTopTable=mscLpEth100LtTopTable, mscLpFiLtFrmCpyRowStatusEntry=mscLpFiLtFrmCpyRowStatusEntry, mscLpFiLtPrtCfgTData=mscLpFiLtPrtCfgTData, mscLpTrSingleStation=mscLpTrSingleStation, mscLpEth100LtPrtCfgComponentName=mscLpEth100LtPrtCfgComponentName, mscLpFiLtFbAppleHComponentName=mscLpFiLtFbAppleHComponentName, mscLpIlsFwdrLtFrmCpyRowStatusTable=mscLpIlsFwdrLtFrmCpyRowStatusTable, mscLpIlsFwdrLtFbFddiMacRowStatusTable=mscLpIlsFwdrLtFbFddiMacRowStatusTable, mscLpTrRowStatus=mscLpTrRowStatus, mscLpFiTestErroredFrmRx=mscLpFiTestErroredFrmRx, mscLpEth100TestPTOTable=mscLpEth100TestPTOTable, mscLpEth100LtFrmCmpRowStatus=mscLpEth100LtFrmCmpRowStatus, mscLpTrTestIndex=mscLpTrTestIndex, mscLpEnetLtFbTData=mscLpEnetLtFbTData, mscLpFiLtFbIpxHRowStatusTable=mscLpFiLtFbIpxHRowStatusTable, mscLpEnetLtFbFddiMacRowStatusEntry=mscLpEnetLtFbFddiMacRowStatusEntry, mscLpTrLtRowStatusEntry=mscLpTrLtRowStatusEntry, mscLpIlsFwdrLtRowStatus=mscLpIlsFwdrLtRowStatus, mscLaOperStatusTable=mscLaOperStatusTable, mscLpTrInternalErrors=mscLpTrInternalErrors, mscLpFiIfEntryTable=mscLpFiIfEntryTable)
