#
# PySNMP MIB module CISCO-NPORT-VIRTUALIZATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NPORT-VIRTUALIZATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexList, = mibBuilder.importSymbols("CISCO-IF-EXTENSION-MIB", "InterfaceIndexList")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, iso, Integer32, IpAddress, Bits, ModuleIdentity, Counter32, TimeTicks, Gauge32, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Integer32", "IpAddress", "Bits", "ModuleIdentity", "Counter32", "TimeTicks", "Gauge32", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64")
TruthValue, RowStatus, TextualConvention, StorageType, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "StorageType", "TimeStamp", "DisplayString")
ciscoNportVirtualizationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 660))
ciscoNportVirtualizationMIB.setRevisions(('2008-06-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoNportVirtualizationMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoNportVirtualizationMIB.setLastUpdated('200806130000Z')
if mibBuilder.loadTexts: ciscoNportVirtualizationMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoNportVirtualizationMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoNportVirtualizationMIB.setDescription("The MIB module for the management of N_port Virtualization or NPV within the framework of Cisco's N_port virtualization (NPV) Architecture. N_Port virtualization reduces the number of Fibre Channel domain IDs in SANs. Switches operating in the NPV mode do not join a fabric; rather, they pass traffic between NPV core switch links and end-devices, which eliminates the domain IDs for these edge switches. Glossary of terms Used in this MIB: ---------------------------------- SAN - Storage Area Network VSAN - Virtual Storage Area Network, Similar to a VLAN. NPV - N Port Virtualization, a technique using which the number of domain IDs in fibre channel fabric can be reduced, leading to easier management. When operating in this mode, a fibre channel switch (typically, a fabric/blade switch) acts as a HBA with respect to the fibre channel fabric and as a switch with respect to the connected devices. NPV Device - A fibre channel switch working in NPV special mode. NPV Core Switch - A fibre channel edge switch connected to one or more NPV devices. Server - Host connected to the NPV device. Typically, a Blade Server connected to Blade switch in NPV mode in a Blade Chassis. Server Interface - Interface on the NPV Device that connects to end devices(hosts/disks). Also, known as F-port, as it operates in F port mode. External Interface - Interface on the NPV Device that connects to the NPV Core Switch. Also known as NP-port as it operates in NP port mode. Traffic Map - Traffic map is a way to restrict traffic flow from an interface to only a set of interfaces. In NPV device, traffic map can be used to present a server interface to the fibre channel fabric only through one of the valid external interfaces specified in the set of interfaces.")
ciscoNportVirtualizationMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 0))
ciscoNportVirtualizationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 1))
ciscoNportVirtualizationMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 2))
cnpvConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1))
cnpvGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 1))
cnpvTrafficMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2))
cnpvTrafficAutoLoadbalance = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnpvTrafficAutoLoadbalance.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficAutoLoadbalance.setDescription('This object enables/disables automatic rebalancing of the server to external interface assignments such that number of server interface assigned to the external interfaces are evenly distributed as much as possible. Redistribution of the server interfaces are done with the constraints of VSANs assigned to the interfaces and traffic maps specifying which external interface a server interface can take. When this feature is enabled or when an external interface comes up, then the switch reevaluates the current distribution and determines if a rebalancing is required. During the move of server interface from one external interface to another, there is a temporary traffic disruption for that server interface.')
cnpvTrafficMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cnpvTrafficMapTable.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapTable.setDescription('A table containing information on the assignment of traffic map interfaces to an interface.')
cnpvTrafficMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficMapFromIfIndex"))
if mibBuilder.loadTexts: cnpvTrafficMapEntry.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapEntry.setDescription("An entry (conceptual row) in the cnpvTrafficMapTable. This table contains entries for each of the interfaces which has been assigned a set of interfaces for traffic mapping. Traffic mapping is a technique used in NPV device to restrict the usage of external interface(s) for forwarding the traffic from server interface to the fibre channel fabric. If an interface comes up as a server interface and finds a corresponding entry in this table, then the switch software will assign a valid external interface from this list, if any. Once assigned, that assigned external interface will be used for forwarding the traffic from the server interface to the fibre channel fabric. If an interface comes up as a server interface and finds an entry in this table, but with no valid list of external interfaces, then the switch software keeps the server interface in operationally down state until at least one of the interface in the list becomes a valid external interface. If an interface comes up as a server interface and it can not find an entry in this table, then any of the available external interfaces can be assigned to that server interface. Entries can be created and destroyed to this table via cnpvTrafficMapRowStatus object. Columnar objects can be modified when the corresponding cnpvTrafficMapRowStatus is 'active'.")
cnpvTrafficMapFromIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cnpvTrafficMapFromIfIndex.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapFromIfIndex.setDescription('The ifIndex of the interface for the traffic to be mapped from.')
cnpvTrafficMapToIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1, 1, 2), InterfaceIndexList().subtype(subtypeSpec=ValueSizeConstraint(4, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpvTrafficMapToIfIndexList.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapToIfIndexList.setDescription('The list of interfaces to which the traffic needs to be mapped to. This object is a list of interfaces presented as an Octet string of interface indices or ifindex-es. The list should contain at least one interface and at most all the interfaces in the switch up to 64 interfaces. The 64 interfaces max-limit is due to the size of this object. Specifying this object is mandatory for the creation of a row in cnpvTrafficMapTable.')
cnpvTrafficMapLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpvTrafficMapLastChange.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapLastChange.setDescription('The value of sysUpTime at the time of the last change to this traffic map entry. When there has not been any change to the traffic map entry, the value of this field will be that of the entry creation time.')
cnpvTrafficMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpvTrafficMapStorageType.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapStorageType.setDescription('The storage type for this conceptual row.')
cnpvTrafficMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 660, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpvTrafficMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapRowStatus.setDescription("The status of this conceptual row. The row can be made 'active' only if value of corresponding instance of cnpvTrafficMapToIfIndexList is provided.")
ciscoNportVirtualizationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 2, 1))
ciscoNportVirtualizationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 660, 2, 2))
ciscoNportVirtualizationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 660, 2, 1, 1)).setObjects(("CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNportVirtualizationMIBCompliance = ciscoNportVirtualizationMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoNportVirtualizationMIBCompliance.setDescription('The compliance statement for entities which implement the NPV feature.')
cnpvTrafficMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 660, 2, 2, 1)).setObjects(("CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficAutoLoadbalance"), ("CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficMapToIfIndexList"), ("CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficMapStorageType"), ("CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficMapRowStatus"), ("CISCO-NPORT-VIRTUALIZATION-MIB", "cnpvTrafficMapLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpvTrafficMapGroup = cnpvTrafficMapGroup.setStatus('current')
if mibBuilder.loadTexts: cnpvTrafficMapGroup.setDescription('A collection of objects for displaying and configuring NPV.')
mibBuilder.exportSymbols("CISCO-NPORT-VIRTUALIZATION-MIB", cnpvTrafficMapTable=cnpvTrafficMapTable, ciscoNportVirtualizationMIBObjects=ciscoNportVirtualizationMIBObjects, ciscoNportVirtualizationMIBConform=ciscoNportVirtualizationMIBConform, cnpvTrafficMapStorageType=cnpvTrafficMapStorageType, cnpvTrafficAutoLoadbalance=cnpvTrafficAutoLoadbalance, cnpvConfiguration=cnpvConfiguration, ciscoNportVirtualizationMIBGroups=ciscoNportVirtualizationMIBGroups, PYSNMP_MODULE_ID=ciscoNportVirtualizationMIB, cnpvGlobal=cnpvGlobal, cnpvTrafficMapFromIfIndex=cnpvTrafficMapFromIfIndex, ciscoNportVirtualizationMIBNotifs=ciscoNportVirtualizationMIBNotifs, ciscoNportVirtualizationMIB=ciscoNportVirtualizationMIB, cnpvTrafficMap=cnpvTrafficMap, cnpvTrafficMapRowStatus=cnpvTrafficMapRowStatus, cnpvTrafficMapToIfIndexList=cnpvTrafficMapToIfIndexList, cnpvTrafficMapEntry=cnpvTrafficMapEntry, ciscoNportVirtualizationMIBCompliance=ciscoNportVirtualizationMIBCompliance, cnpvTrafficMapLastChange=cnpvTrafficMapLastChange, ciscoNportVirtualizationMIBCompliances=ciscoNportVirtualizationMIBCompliances, cnpvTrafficMapGroup=cnpvTrafficMapGroup)
