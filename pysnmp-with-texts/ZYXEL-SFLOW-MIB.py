#
# PySNMP MIB module ZYXEL-SFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-SFLOW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, MibIdentifier, iso, Integer32, ObjectIdentity, Gauge32, Unsigned32, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "MibIdentifier", "iso", "Integer32", "ObjectIdentity", "Gauge32", "Unsigned32", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelSflow = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75))
if mibBuilder.loadTexts: zyxelSflow.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelSflow.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelSflow.setContactInfo('')
if mibBuilder.loadTexts: zyxelSflow.setDescription('The subtree for sFlow')
zyxelSflowSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1))
zySflowState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySflowState.setStatus('current')
if mibBuilder.loadTexts: zySflowState.setDescription('Enable/Disable sflow on the switch. sFlow (RFC 3176) is a standard technology for monitoring switched networks. An sFlow agent embedded on a switch or router gets sample data and packet statistics from traffic forwarded through its ports. The sFlow agent then creates sFlow data and sends it to an sFlow collector. The sFlow collector is a server that collects and analyzes sFlow datagram. An sFlow datagram includes packet header, input and output interface, sampling process parameters and forwarding information. sFlow minimizes impact on CPU load of the switch as it analyzes sample data only. sFlow can continuously monitor network traffic and create reports for network performance analysis and troubleshooting. For example, you can use it to know which IP address or which type of traffic caused network congestion.')
zySflowMaxNumberOfCollectors = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySflowMaxNumberOfCollectors.setStatus('current')
if mibBuilder.loadTexts: zySflowMaxNumberOfCollectors.setDescription('The maximum number of sFlow collectors entries that can be created.')
zyxelSflowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 3), )
if mibBuilder.loadTexts: zyxelSflowCollectorTable.setStatus('current')
if mibBuilder.loadTexts: zyxelSflowCollectorTable.setDescription('The table contains sFlow collector configuration.')
zyxelSflowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 3, 1), ).setIndexNames((0, "ZYXEL-SFLOW-MIB", "zySflowCollectorIpAddressType"), (0, "ZYXEL-SFLOW-MIB", "zySflowCollectorIpAddress"))
if mibBuilder.loadTexts: zyxelSflowCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelSflowCollectorEntry.setDescription('An entry contains sFlow collector configuration.')
zySflowCollectorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: zySflowCollectorIpAddressType.setStatus('current')
if mibBuilder.loadTexts: zySflowCollectorIpAddressType.setDescription('The Type of IP address for sflow collector entry.')
zySflowCollectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: zySflowCollectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: zySflowCollectorIpAddress.setDescription('The IP address of the sFlow collector.')
zySflowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySflowCollectorUdpPort.setStatus('current')
if mibBuilder.loadTexts: zySflowCollectorUdpPort.setDescription('Enter a UDP port number the Switch uses to send sFlow datagram to the collector. If you change the port here, make sure you change it on the collector, too. The default port is 6343.')
zySflowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zySflowCollectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: zySflowCollectorRowStatus.setDescription('This object allow entry to be create and deleted a sFlow collector entry.')
zyxelSflowPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 4), )
if mibBuilder.loadTexts: zyxelSflowPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelSflowPortTable.setDescription('The table contains sFlow port configuration.')
zyxelSflowPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelSflowPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelSflowPortEntry.setDescription('An entry contains sFlow port configuration.')
zySflowPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 4, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySflowPortState.setStatus('current')
if mibBuilder.loadTexts: zySflowPortState.setDescription('Enable/Disable sflow on the port.')
zySflowMaxNumberOfPortCollectors = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySflowMaxNumberOfPortCollectors.setStatus('current')
if mibBuilder.loadTexts: zySflowMaxNumberOfPortCollectors.setDescription('The maximum number of sFlow port collectors entries that can be created.')
zyxelSflowPortCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6), )
if mibBuilder.loadTexts: zyxelSflowPortCollectorTable.setStatus('current')
if mibBuilder.loadTexts: zyxelSflowPortCollectorTable.setDescription('The table contains sFlow port collector configuration.')
zyxelSflowPortCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-SFLOW-MIB", "zySflowPortCollectorIpAddressType"), (0, "ZYXEL-SFLOW-MIB", "zySflowPortCollectorIpAddress"))
if mibBuilder.loadTexts: zyxelSflowPortCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelSflowPortCollectorEntry.setDescription('An entry contains sFlow port collector configuration.')
zySflowPortCollectorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: zySflowPortCollectorIpAddressType.setStatus('current')
if mibBuilder.loadTexts: zySflowPortCollectorIpAddressType.setDescription('The Type of IP address for sflow port collector entry.')
zySflowPortCollectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: zySflowPortCollectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: zySflowPortCollectorIpAddress.setDescription('The IP address of the sFlow port collector.')
zySflowPortCollectorSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySflowPortCollectorSampleRate.setStatus('current')
if mibBuilder.loadTexts: zySflowPortCollectorSampleRate.setDescription('Enter a number (N) from 256 to 65535. The switch captures every one out of N packets for this port and creates sFlow datagram.')
zySflowPortCollectorPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySflowPortCollectorPollInterval.setStatus('current')
if mibBuilder.loadTexts: zySflowPortCollectorPollInterval.setDescription('Specify a time interval (from 20 to 120 in seconds) the switch waits before sending the sFlow datagram and packet counters for this port to the collector.')
zySflowPortCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 75, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zySflowPortCollectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: zySflowPortCollectorRowStatus.setDescription('This object allows a sFlow port collector entry to be created and deleted.')
mibBuilder.exportSymbols("ZYXEL-SFLOW-MIB", zyxelSflowPortEntry=zyxelSflowPortEntry, zyxelSflowPortCollectorEntry=zyxelSflowPortCollectorEntry, zyxelSflowSetup=zyxelSflowSetup, zySflowPortCollectorIpAddress=zySflowPortCollectorIpAddress, zySflowPortState=zySflowPortState, PYSNMP_MODULE_ID=zyxelSflow, zySflowMaxNumberOfPortCollectors=zySflowMaxNumberOfPortCollectors, zySflowPortCollectorRowStatus=zySflowPortCollectorRowStatus, zySflowCollectorRowStatus=zySflowCollectorRowStatus, zyxelSflowCollectorTable=zyxelSflowCollectorTable, zySflowCollectorIpAddressType=zySflowCollectorIpAddressType, zySflowPortCollectorIpAddressType=zySflowPortCollectorIpAddressType, zySflowCollectorIpAddress=zySflowCollectorIpAddress, zyxelSflowPortCollectorTable=zyxelSflowPortCollectorTable, zyxelSflow=zyxelSflow, zyxelSflowCollectorEntry=zyxelSflowCollectorEntry, zySflowMaxNumberOfCollectors=zySflowMaxNumberOfCollectors, zyxelSflowPortTable=zyxelSflowPortTable, zySflowState=zySflowState, zySflowPortCollectorSampleRate=zySflowPortCollectorSampleRate, zySflowCollectorUdpPort=zySflowCollectorUdpPort, zySflowPortCollectorPollInterval=zySflowPortCollectorPollInterval)
