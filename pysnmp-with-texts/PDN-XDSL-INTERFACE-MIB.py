#
# PySNMP MIB module PDN-XDSL-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-XDSL-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_xdsl, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-xdsl")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, Integer32, Counter32, ObjectIdentity, Unsigned32, Counter64, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64", "IpAddress", "MibIdentifier")
TAddress, RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
xdslIfConfigMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2))
xdslIfConfigMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 4))
xdslDevGenericIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1))
xdslDevRADSLSpecificIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2))
xdslDevMVLSpecificIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 3))
xdslDevSDSLSpecificIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4))
xdslDevIDSLSpecificIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 5))
xdslDevGenericIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1), )
if mibBuilder.loadTexts: xdslDevGenericIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigTable.setDescription("The xdslDevGenericIfConfigTable provides config information generic to a xDSL device, or system. The table is indexed by an object which corresponds to ifIndex. These ifIndex entries, themselves, denote and identify specific xdsl interfaces on the board or module. Also the configuration parameters are grouped into two broad categories, 'up' and 'down'. 'up' reflects the upstream direction (from the customer premises to the central office). 'Down' reflects the downstream direction (from the central office to the customer premises)")
xdslDevGenericIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslDevGenericIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigEntry.setDescription('Describes a specific xDSL interface entry.')
xdslDevGenericIfConfigPortSpeedBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevGenericIfConfigPortSpeedBehaviour.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigPortSpeedBehaviour.setDescription('The value of this object corresponds to the behaviour of the specified port. The default value for this object is fixed (1). ')
xdslDevGenericIfConfigMarginThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevGenericIfConfigMarginThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigMarginThreshold.setDescription('The value of this object corresponds to the offset from the startup margin. The threshold margin is calculated by subtracting the offset from the startup margin. Permissible range of values are between -7 and 14. A value of -9999 disables the threshold check. The default value of this object is 3')
xdslDevGenericIfConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevGenericIfConfigPortID.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigPortID.setDescription('The value of this object corresponds to 40 character information only field that identifies what the DSL port is connected to (Circuit ID, MDF location, Customer name, etc.)')
xdslDevGenericIfConfigLinkUpDownTransitionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevGenericIfConfigLinkUpDownTransitionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigLinkUpDownTransitionThreshold.setDescription("The value of this object corresponds to the threshold value for link up-down transitions. If link up-down's exceed this threshold value a xdslLinkupDownTransitions trap is generated. This value would represent the number of link up-down transitions in a 15 minute interval. A value of -9999 disables the threshold check. The default value for this object is 0")
xdslDevGenericIfConfigLineEncodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("cap", 2), ("twoB1q", 3), ("mvl", 4), ("g-lite", 5), ("dmt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevGenericIfConfigLineEncodeType.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigLineEncodeType.setDescription('The value of this object corresponds to the line encoding technology used for data transmission over the the dsl link.')
xdslDevGenericIfConfigLineRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("nx128", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevGenericIfConfigLineRateMode.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevGenericIfConfigLineRateMode.setDescription('The value of this object is used to choose the line rate list for data transmission over the dsl link. The default value is standard(1). ')
xdslDevRADSLSpecificIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1), )
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigTable.setDescription("The xdslDevRADSLSpecificIfConfigTable provides config information specific to a xDSL device, or system. The table is indexed by an object which corresponds to ifIndex. These ifIndex entries, themselves, denote and identify specific xdsl interfaces on the board or module. Also the configuration parameters are grouped into two broad categories, 'up' and 'down'. 'up' reflects the upstream direction (from the customer premises to the central office). 'Down' reflects the downstream direction (from the central office to the customer premises)")
xdslDevRADSLSpecificIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigEntry.setDescription('Describes a specific xDSL interface entry.')
xdslDevRADSLSpecificIfConfigUpFixedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigUpFixedPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigUpFixedPortSpeed.setDescription('The value of this object corresponds to the upstream speed of the specified port for fixed port speed behaviour. All the speeds are in kbps. If the port speed behaviour is adaptive an error of noSuchName will be returned by the agent.')
xdslDevRADSLSpecificIfConfigDownFixedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigDownFixedPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigDownFixedPortSpeed.setDescription('The value of this object corresponds to the downstream speed of the specified port for fixed port speed behaviour. All the speeds are in kbps. If the port speed behaviour is adaptive an error of noSuchName will be returned by the agent. ')
xdslDevRADSLSpecificIfConfigUpAdaptiveUpperBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigUpAdaptiveUpperBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigUpAdaptiveUpperBoundPortSpeed.setDescription('The value of this object corresponds to the upper bound for the upstream port speed of the specified port for adaptive port speed behaviour. The speeds are measured in kbps. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent.')
xdslDevRADSLSpecificIfConfigUpAdaptiveLowerBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigUpAdaptiveLowerBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigUpAdaptiveLowerBoundPortSpeed.setDescription('The value of this object corresponds to the lower bound for the upstream port speed of the specified port for adaptive port speed behaviour in kbps. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent. The value -9999 should be used to disable the lower bound threshold check. The default value for this object is -9999 ')
xdslDevRADSLSpecificIfConfigDownAdaptiveUpperBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigDownAdaptiveUpperBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigDownAdaptiveUpperBoundPortSpeed.setDescription('The value of this object corresponds to the upper bound allowed for the downstream port speed of the specified port for adaptive port speed behaviour. The speeds are measured in kbps. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent.')
xdslDevRADSLSpecificIfConfigDownAdaptiveLowerBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigDownAdaptiveLowerBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigDownAdaptiveLowerBoundPortSpeed.setDescription('The value of this object corresponds to the Minimum lower bound allowed for the downstream port speed of the specified port for adaptive port speed behaviour. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent. The speeds are measured in kbps. The value -9999 is used to disable the lower bound threshold check.The default value for this object is -9999')
xdslDevRADSLSpecificIfConfigReedSolomonDownFwdErrCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minimizeError", 1), ("minimizeDelay", 2), ("reedSolomonNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigReedSolomonDownFwdErrCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigReedSolomonDownFwdErrCorrection.setDescription('The value of this object corresponds to the Reed-Solomon forward error correction in the downstream direction. The default value of this object should be minimizeError (1).')
xdslDevRADSLSpecificIfConfigStartUpMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigStartUpMargin.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigStartUpMargin.setDescription(' The value of this object corresponds to the startup value of the margin for a DSL interface (specified by ifIndex). The unit is db (decibels. The higher the margin the better the quality of the line. The default value of this object is 3.')
xdslDevRADSLSpecificIfConfigTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigTxPowerAttenuation.setDescription(' This value corresponds to the Transmitt Power Attenuation in dB for the access node. This value represents the downstream power level in dB. Permissible values are -6, -3 and 0. The default value of this object is 0 dB. The power levels +3 and +6 may be used in future.')
xdslDevRADSLSpecificIfConfigSnTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigSnTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevRADSLSpecificIfConfigSnTxPowerAttenuation.setDescription(' This value corresponds to the Transmitt Power Attenuation in dB for the service node. This value represents the upstream power level in dB. Permissible values are -9, -6, -3 and 0. The default value of this object is -6 dB.')
xdslDevMVLSpecificIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 3, 1), )
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigTable.setDescription('The xdslDevMVLSpecificIfConfigTable provides config information specific to a xDSL(MVL) device, or system. The table is indexed by an object which corresponds to ifIndex. These ifIndex entries, themselves, denote and identify specific xdsl(Mvl) interfaces on the board or module. ')
xdslDevMVLSpecificIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigEntry.setDescription('Describes a specific xDSL(MVL) interface entry.')
xdslDevMVLSpecificIfConfigMaxPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigMaxPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigMaxPortSpeed.setDescription('The value of this object corresponds to the upper bound port speed of the specified port. The speeds are measured in kbps.')
xdslDevMVLSpecificIfConfigOnHookTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigOnHookTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigOnHookTxPowerAttenuation.setDescription(' This value corresponds to the On-hook Transmitt Power Attenuation in dB for the access node and the service node. This value represents both downstream and upstream power level in dB while the phone is On-hook. Permissible values are -2, 1, 4, 7, and +10. The default value of this object is 10 dB.')
xdslDevMVLSpecificIfConfigOffHookTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigOffHookTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMVLSpecificIfConfigOffHookTxPowerAttenuation.setDescription(' This value corresponds to the Off-hook Transmitt Power Attenuation in dB for the access node and the service node. This value represents both downstream and upstream power level in dB while the phone is Off-hook. Permissible values are -11, -8, -5, -2, 1, 4, -2, 1, 4 and +7. The default value of this object is 7 dB. ')
xdslDevSDSLSpecificIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4, 1), )
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigTable.setDescription('The xdslDevSDSLSpecificIfConfigTable provides configuration specific to the SDSL link.')
xdslDevSDSLSpecificIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigEntry.setDescription('Describes a specific SDSL configuration entry.')
xdslDevSDSLSpecificIfConfigFixedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigFixedPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigFixedPortSpeed.setDescription('The value of this object corresponds to both upstream and downstream speed of the specified port. All the speeds are in kbps. The value of this object is used only when the port behaviour is fixed.')
xdslDevSDSLSpecificIfConfigMaxPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigMaxPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigMaxPortSpeed.setDescription('The value of this object corresponds to the upper bound port speed of the specified port when the port behaviour is adaptive. The speeds are measured in kbps.')
xdslDevSDSLSpecificIfConfigFixedPortSpeedNx128Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigFixedPortSpeedNx128Mode.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigFixedPortSpeedNx128Mode.setDescription("The value of this object applies to both upstream and downstream speed of the specified port when the line rate mode is configured as Nx128 mode. All the speeds are in kbps. The value of this object is used only when the port behaviour is fixed and the line rate is Nx128 mode, and doesn't take effect in the standard mode.")
xdslDevSDSLSpecificIfConfigMaxPortSpeedNx128Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigMaxPortSpeedNx128Mode.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevSDSLSpecificIfConfigMaxPortSpeedNx128Mode.setDescription("The value of this object corresponds to the upper bound port speed of the specified port when the port behaviour is adaptive and the line rate is Nx128 mode, and doesn't take effect in the standard mode. The speeds are measured in kbps.")
xdslDevIDSLSpecificIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 5, 1), )
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigTable.setDescription('The xdslDevIDSLSpecificIfConfigTable provides configuration specific to the IDSL link.')
xdslDevIDSLSpecificIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigEntry.setDescription('Describes a specific IDSL configuration entry.')
xdslDevIDSLSpecificIfConfigPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigPortSpeed.setDescription('The value of this object corresponds to both upstream and downstream speed of the specified port. All the speeds are in kbps. Allowed speeds are 64, 128 and 144 kbps. The default value for this object is 128 kbps.')
xdslDevIDSLSpecificIfConfigTimingPortTransceiverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("networkTiming", 1), ("localTiming", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigTimingPortTransceiverMode.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLSpecificIfConfigTimingPortTransceiverMode.setDescription('The transceiver mode selected on the timing source port. Only one IDSL port can be set to NT mode. This timing will then be distributed to all other IDSL ports in the chassis that are set to LT. The selected xdslDevIDSLPrimaryTimingSourcePort provides clocking signals to the DSLAM when the transceiver mode is set to Network timing. The port selected for Network Timing mode will probably not used for customer data, but will receive a 2.048 Mhz Network clocking signal from a central office timing source and distribute this timing to other IDSL port cards.')
mibBuilder.exportSymbols("PDN-XDSL-INTERFACE-MIB", xdslDevGenericIfConfigEntry=xdslDevGenericIfConfigEntry, xdslDevSDSLSpecificIfConfigMaxPortSpeed=xdslDevSDSLSpecificIfConfigMaxPortSpeed, xdslDevRADSLSpecificIfConfigDownAdaptiveUpperBoundPortSpeed=xdslDevRADSLSpecificIfConfigDownAdaptiveUpperBoundPortSpeed, xdslIfConfigMIBTraps=xdslIfConfigMIBTraps, xdslDevIDSLSpecificIfConfigTimingPortTransceiverMode=xdslDevIDSLSpecificIfConfigTimingPortTransceiverMode, xdslDevRADSLSpecificIfConfigDownAdaptiveLowerBoundPortSpeed=xdslDevRADSLSpecificIfConfigDownAdaptiveLowerBoundPortSpeed, xdslDevSDSLSpecificIfConfigFixedPortSpeedNx128Mode=xdslDevSDSLSpecificIfConfigFixedPortSpeedNx128Mode, xdslDevMVLSpecificIfConfigOnHookTxPowerAttenuation=xdslDevMVLSpecificIfConfigOnHookTxPowerAttenuation, xdslDevMVLSpecificIfConfigTable=xdslDevMVLSpecificIfConfigTable, xdslDevGenericIfConfigTable=xdslDevGenericIfConfigTable, xdslDevRADSLSpecificIfConfigUpAdaptiveLowerBoundPortSpeed=xdslDevRADSLSpecificIfConfigUpAdaptiveLowerBoundPortSpeed, xdslDevGenericIfConfigLinkUpDownTransitionThreshold=xdslDevGenericIfConfigLinkUpDownTransitionThreshold, xdslDevSDSLSpecificIfConfigEntry=xdslDevSDSLSpecificIfConfigEntry, xdslDevMVLSpecificIfConfig=xdslDevMVLSpecificIfConfig, xdslDevMVLSpecificIfConfigOffHookTxPowerAttenuation=xdslDevMVLSpecificIfConfigOffHookTxPowerAttenuation, xdslDevGenericIfConfigPortSpeedBehaviour=xdslDevGenericIfConfigPortSpeedBehaviour, xdslDevRADSLSpecificIfConfigReedSolomonDownFwdErrCorrection=xdslDevRADSLSpecificIfConfigReedSolomonDownFwdErrCorrection, xdslDevRADSLSpecificIfConfigTable=xdslDevRADSLSpecificIfConfigTable, xdslDevRADSLSpecificIfConfigUpFixedPortSpeed=xdslDevRADSLSpecificIfConfigUpFixedPortSpeed, xdslDevMVLSpecificIfConfigMaxPortSpeed=xdslDevMVLSpecificIfConfigMaxPortSpeed, xdslDevSDSLSpecificIfConfigFixedPortSpeed=xdslDevSDSLSpecificIfConfigFixedPortSpeed, xdslDevIDSLSpecificIfConfig=xdslDevIDSLSpecificIfConfig, xdslDevGenericIfConfigLineEncodeType=xdslDevGenericIfConfigLineEncodeType, xdslDevRADSLSpecificIfConfigUpAdaptiveUpperBoundPortSpeed=xdslDevRADSLSpecificIfConfigUpAdaptiveUpperBoundPortSpeed, xdslDevRADSLSpecificIfConfigSnTxPowerAttenuation=xdslDevRADSLSpecificIfConfigSnTxPowerAttenuation, xdslDevGenericIfConfigMarginThreshold=xdslDevGenericIfConfigMarginThreshold, xdslDevGenericIfConfig=xdslDevGenericIfConfig, xdslDevIDSLSpecificIfConfigPortSpeed=xdslDevIDSLSpecificIfConfigPortSpeed, xdslDevMVLSpecificIfConfigEntry=xdslDevMVLSpecificIfConfigEntry, xdslDevIDSLSpecificIfConfigTable=xdslDevIDSLSpecificIfConfigTable, xdslDevRADSLSpecificIfConfigStartUpMargin=xdslDevRADSLSpecificIfConfigStartUpMargin, xdslDevSDSLSpecificIfConfigMaxPortSpeedNx128Mode=xdslDevSDSLSpecificIfConfigMaxPortSpeedNx128Mode, xdslDevIDSLSpecificIfConfigEntry=xdslDevIDSLSpecificIfConfigEntry, xdslDevRADSLSpecificIfConfig=xdslDevRADSLSpecificIfConfig, xdslIfConfigMIBObjects=xdslIfConfigMIBObjects, xdslDevSDSLSpecificIfConfigTable=xdslDevSDSLSpecificIfConfigTable, xdslDevRADSLSpecificIfConfigTxPowerAttenuation=xdslDevRADSLSpecificIfConfigTxPowerAttenuation, xdslDevRADSLSpecificIfConfigDownFixedPortSpeed=xdslDevRADSLSpecificIfConfigDownFixedPortSpeed, xdslDevSDSLSpecificIfConfig=xdslDevSDSLSpecificIfConfig, xdslDevGenericIfConfigLineRateMode=xdslDevGenericIfConfigLineRateMode, xdslDevRADSLSpecificIfConfigEntry=xdslDevRADSLSpecificIfConfigEntry, xdslDevGenericIfConfigPortID=xdslDevGenericIfConfigPortID)
