#
# PySNMP MIB module RIP-IP-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIP-IP-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, Integer32, Counter32, Counter64, NotificationType, Bits, ModuleIdentity, iso, ObjectIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Integer32", "Counter32", "Counter64", "NotificationType", "Bits", "ModuleIdentity", "iso", "ObjectIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
cjnRip = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10))
if mibBuilder.loadTexts: cjnRip.setLastUpdated('9902110000Z')
if mibBuilder.loadTexts: cjnRip.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnRip.setContactInfo('Erick Crowell -- ecrowell@lucent.com Raj Duggal (Group Leader) -- rduggal@lucent.com Kalpesh Sheth (sheth@lucent.com) Ira Steckler -- isteckler@lucent.com')
if mibBuilder.loadTexts: cjnRip.setDescription('Cajun Private RIP MIB')
cjnIpRipGblGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 1))
cjnIpRipIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipIsEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIsEnabled.setDescription('Enables IP RIP services on this device.')
cjnIpRipUpdateTimer = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipUpdateTimer.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipUpdateTimer.setDescription('RIP route Advertisement Interval (sec) ')
cjnIpRipPurgeTTL = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipPurgeTTL.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipPurgeTTL.setDescription('TTL for purged RIP routes')
cjnIpRipTriggeredUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipTriggeredUpdates.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipTriggeredUpdates.setDescription('Enable/Disable Triggered RIP updates')
cjnIpRipInterPktDelay = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipInterPktDelay.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipInterPktDelay.setDescription('Delay between two successive RIP route Advertisements (sec)')
cjnIpRipStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 2))
cjnIpRipIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3))
cjnIpRipIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1), )
if mibBuilder.loadTexts: cjnIpRipIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfTable.setDescription('A list of interface specific RIP Entries')
cjnIpRipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1), ).setIndexNames((0, "RIP-IP-PRIVATE-MIB", "cjnIpRipIfIpAddr"))
if mibBuilder.loadTexts: cjnIpRipIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfEntry.setDescription('An cajun RIP Interface instance')
cjnIpRipIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpRipIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfIpAddr.setDescription('The globally unique IP Address identifier for this interface. This number MUST exist in the cjnIpIfTable to be valid.')
cjnIpRipIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnIpRipIfSendRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("talkOnly", 1), ("listenOnly", 2), ("talkAndListen", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfSendRcvMode.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfSendRcvMode.setDescription('RIP Send & Receive mode setting.')
cjnIpRipIfSendVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v1v2", 3), ("off", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfSendVersion.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfSendVersion.setDescription('RIP version to adhere to, while sending updates')
cjnIpRipIfRcvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v1v2", 3), ("off", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfRcvVersion.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfRcvVersion.setDescription('RIP version to adhere to, while receiving updates')
cjnIpRipIfDefaultRouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("talkOnly", 1), ("listenOnly", 2), ("talkAndListen", 3), ("disable", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfDefaultRouteMode.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfDefaultRouteMode.setDescription('RIP default route characteristics. If this MIB Object is set to talkOnly(1) then the known default route is advertised in RIP updates but ignored on incoming neighbor updates. Is this MIB object is set to listenOnly(2) then the known default route is supressed from outgoing RIP updates but accepted on incoming neighbor updates.')
cjnIpRipIfPoisonMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("splitHorizon", 1), ("splitHorizonWithPoisonReverse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfPoisonMethod.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfPoisonMethod.setDescription('RIP Poison Reverse Mode.')
cjnIpRipIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simplePassword", 2), ("mD5", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfAuthType.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfAuthType.setDescription('RIP authentication type')
cjnIpRipIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfAuthKey.setDescription('RIP authentication key-valid only when cjnIpRipIfAuthType is not set to NONE')
cjnIpRipIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2), )
if mibBuilder.loadTexts: cjnIpRipIfStatTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfStatTable.setDescription('A list of interface specific RIP Statictics Entries')
cjnIpRipIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1), ).setIndexNames((0, "RIP-IP-PRIVATE-MIB", "cjnIpRipIfStatIpAddr"))
if mibBuilder.loadTexts: cjnIpRipIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfStatEntry.setDescription('An cajun RIP Interface Statistics instance')
cjnIpRipIfStatIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpRipIfStatIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfStatIpAddr.setDescription('The globally unique IP Address identifier for this interface. This number MUST exist in the cjnIpIfTable to be valid.')
cjnIpRipIfUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipIfUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfUpdatesSent.setDescription('Total# of RIP updates sent on this if')
cjnIpRipIfUpdatesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipIfUpdatesRcvd.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfUpdatesRcvd.setDescription('Total# of RIP updates received on this if')
cjnIpRipIfTrigUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipIfTrigUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfTrigUpdatesSent.setDescription('Total# of RIP triggered updates sent on this if')
cjnIpRipIfBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipIfBadPktRcvd.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfBadPktRcvd.setDescription('Total# of RIP packets received in error on this if')
cjnIpRipIfBadRoutesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpRipIfBadRoutesRcvd.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipIfBadRoutesRcvd.setDescription('Total# of bad RIP network routes received in error on this if')
cjnIpRipNeighborGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 4))
cjnIpRipNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 4, 1), )
if mibBuilder.loadTexts: cjnIpRipNeighborTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipNeighborTable.setDescription('A list of RIP Trusted Neighbors')
cjnIpRipNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 4, 1, 1), ).setIndexNames((0, "RIP-IP-PRIVATE-MIB", "cjnIpRipNeighborIpAddr"))
if mibBuilder.loadTexts: cjnIpRipNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipNeighborEntry.setDescription('A RIP Trusted Neighbor Entry')
cjnIpRipNeighborIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpRipNeighborIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipNeighborIpAddr.setDescription('The IP Address identifier for this neighbor.')
cjnIpRipNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 10, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpRipNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpRipNeighborRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
mibBuilder.exportSymbols("RIP-IP-PRIVATE-MIB", cjnIpRipNeighborGroup=cjnIpRipNeighborGroup, cjnIpRipIfStatTable=cjnIpRipIfStatTable, cjnIpRipUpdateTimer=cjnIpRipUpdateTimer, cjnIpRipIfIpAddr=cjnIpRipIfIpAddr, cjnIpRipPurgeTTL=cjnIpRipPurgeTTL, cjnIpRipTriggeredUpdates=cjnIpRipTriggeredUpdates, cjnIpRipIfStatEntry=cjnIpRipIfStatEntry, cjnIpRipNeighborTable=cjnIpRipNeighborTable, cjnIpRipIfStatIpAddr=cjnIpRipIfStatIpAddr, PYSNMP_MODULE_ID=cjnRip, cjnIpRipIfEntry=cjnIpRipIfEntry, cjnIpRipIfSendRcvMode=cjnIpRipIfSendRcvMode, cjnIpRipIfRcvVersion=cjnIpRipIfRcvVersion, cjnIpRipIfAuthType=cjnIpRipIfAuthType, cjnIpRipNeighborEntry=cjnIpRipNeighborEntry, cjnIpRipInterPktDelay=cjnIpRipInterPktDelay, cjnIpRipIfPoisonMethod=cjnIpRipIfPoisonMethod, cjnIpRipIfTrigUpdatesSent=cjnIpRipIfTrigUpdatesSent, cjnIpRipNeighborIpAddr=cjnIpRipNeighborIpAddr, cjnIpRipIfGroup=cjnIpRipIfGroup, cjnIpRipIfSendVersion=cjnIpRipIfSendVersion, cjnIpRipIfTable=cjnIpRipIfTable, cjnIpRipIfDefaultRouteMode=cjnIpRipIfDefaultRouteMode, cjnIpRipGblGroup=cjnIpRipGblGroup, cjnIpRipIfBadRoutesRcvd=cjnIpRipIfBadRoutesRcvd, cjnIpRipStatGroup=cjnIpRipStatGroup, cjnIpRipIfUpdatesSent=cjnIpRipIfUpdatesSent, cjnIpRipIfAuthKey=cjnIpRipIfAuthKey, cjnIpRipIfUpdatesRcvd=cjnIpRipIfUpdatesRcvd, cjnIpRipIsEnabled=cjnIpRipIsEnabled, cjnIpRipIfBadPktRcvd=cjnIpRipIfBadPktRcvd, cjnIpRipNeighborRowStatus=cjnIpRipNeighborRowStatus, cjnIpRipIfRowStatus=cjnIpRipIfRowStatus, cjnRip=cjnRip)
