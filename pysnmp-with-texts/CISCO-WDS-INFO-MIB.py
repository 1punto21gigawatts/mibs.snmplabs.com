#
# PySNMP MIB module CISCO-WDS-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WDS-INFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
CDot11IfVlanIdOrZero, = mibBuilder.importSymbols("CISCO-DOT11-IF-MIB", "CDot11IfVlanIdOrZero")
CDot11SecAuthKeyMgmtType, CDot11SsidString = mibBuilder.importSymbols("CISCO-DOT11-SSID-SECURITY-MIB", "CDot11SecAuthKeyMgmtType", "CDot11SsidString")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, IpAddress, MibIdentifier, NotificationType, Unsigned32, iso, Bits, ObjectIdentity, TimeTicks, Integer32, ModuleIdentity, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibIdentifier", "NotificationType", "Unsigned32", "iso", "Bits", "ObjectIdentity", "TimeTicks", "Integer32", "ModuleIdentity", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, DateAndTime, MacAddress, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "MacAddress", "TimeStamp")
ciscoWdsInfoMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 509))
ciscoWdsInfoMIB.setRevisions(('2005-09-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWdsInfoMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWdsInfoMIB.setLastUpdated('200509150000Z')
if mibBuilder.loadTexts: ciscoWdsInfoMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoWdsInfoMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoWdsInfoMIB.setDescription('This MIB is intended to be implemented on all Cisco network entities that provide Wireless Domain Services (WDS). The WDS provides a control mechanism for wireless devices that roam between Access Points residing on different layer 3 subnets. When WDS is in the Wireless LAN Services Module(WLSM), the access points providing Layer 3 mobility must register with the WDS before wireless devices are given access to the mobility network. The location of the WDS is specified in each Access Point along with LEAP device credentials that are required for authentication with the WDS. Once the Access Point and the Mobile Node are authenticated with the WDS, those are considered registered. This MIB reports the information about the Wireless Domain Servers, Access Points, Mobile Nodes, and their roaming patterns. GLOSSARY AAA Authentication, Authorization, Accounting Access Point (AP) An entity that contains an 802.11 medium access control (MAC) and physical layer (PHY) interface and provides access to the distribution services via the wireless medium for associated devices. BSSID Basic Service Set Identification, where the basic service set is defined as the set of data transfer rates that all the stations in a BSS will be capable of using to receive frames from the wireless medium. CCKM Cisco Central Key Management. Context The mobility context for a Mobile Node includes its current mobility bindings with the Access Points, IP/802 address bindings, cached configuration parameters, QoS state, IP group membership, authentication state, accounting statistics, and other dynamically derived protocol state information. EAP Extensible Authentication Protocol. Hot Standby Router Protocol (HSRP) Cisco Hot Standby Router Protocol as defined in RFC2281 L3MM Layer-3 Mobility Manager (L3MM) is a new software entity residing on Central Switch (CS). L3MM maintains the mobility database and manages mGRE tunnels and tunnel paths to provide L3 Mobility for wireless clients. Layer 3 Mobility Control Protocol (LCP) A simple protocol to exchange control message between WDS and L3MM to achieve layer 3 seamless mobility for wireless devices. mGRE Tunnels Multipoint Generic Routing Encapsulation tunnels. This tunnel is used to tunnel wireless traffic and used to transfer wireless traffic between AP and CS. MIC Message Integrity Check. A MIC can, optionally, be added to WEP-encrypted 802.11 frames. Mobile Node (MN) A roaming 802.11 wireless device in a wireless network associated with an Access Point. SSID Service Set Identification, where the station service is defined as the set of services that support transport of medium access control (MAC) service data units (MSDUs) between stations within a basic service set. TKIP WPA Temporal Key encryption. Wireless Domain Services (WDS) The set of services being offered at a particular broadcast domain that may be an IP subnet or a particular VLAN, or across the L3 cloud. The services include the following. 1. Fast Secure Roaming with CCKM. 2. Layer 3 seamless mobility. 3. Radio Management aggregation for 802.11 wireless clients . WDS Entity The logical entity that resides in an infrastructure node and offers WDS to the descendants of that infrastructure node in the wireless services hierarchy. WEP Wired Equivalent Privacy. This is generally used to refer to 802.11 legacy encryption. WLSM Wireless LAN Services Module Wireless Network Manager (WNM) The network management system that manages the entire hierarchy of devices providing WDS. WPA WiFi Protected Access.')
ciscoWdsInfoMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 0))
ciscoWdsInfoMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1))
ciscoWdsInfoMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 2))
ciscoWdsInfoMacAuthCache = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 1))
ciscoWdsInfoAccessPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2))
ciscoWdsInfoMobileNode = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3))
ciscoWdsInfoNetworkManager = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4))
ciscoWdsInfoStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5))
ciscoWdsInfoMobility = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6))
ciscoWdsInfoRoamStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7))
class CWdsClientTrackingStatus(TextualConvention, Integer32):
    description = 'These are the Client Tracking statuses on WDS. The Client Tracking feature expands the radio management information gathered from Access Points to include information on Mobile Node authentication and roaming events. The WDS collects those data and sends to Network Manager. This feature provides near-real-time tracking of Mobile Node associations via the Network Manger. active - Enabled and collecting the data, inactive - Enabled but not collection the data, disabled - The Client Tracking is disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("inactive", 2), ("disabled", 3))

class CWdsDeviceAuthType(TextualConvention, Bits):
    description = 'These are the IEEE 802.11 supported authentication methods for WDS devices such as Access Points, Mobile Nodes and Wireless Network Managers: open - Open System authentication, shared - Shared authentication, leap - Cisco Light-weight EAP, eap - EAP authentication, mac - MAC authentication, macOrEap - MAC or EAP authentication, macOrLeap - MAC or LEAP authentication, eapOptional - Eap Optional.'
    status = 'current'
    namedValues = NamedValues(("open", 0), ("shared", 1), ("leap", 2), ("eap", 3), ("mac", 4), ("macOrEap", 5), ("macOrLeap", 6), ("eapOptional", 7))

class CWdsDeviceState(TextualConvention, Integer32):
    description = 'The registration state of the network entities requiring the WDS services. unknown - Unknown state, initial - Initial state, authInProgress - Authentication is in progress, authFailed - Authentication is failed, authenticated - Authentication is successful, securityKeysSetup - Security keys are set, registered - Registration is completed, detached - The device is detached.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("initial", 2), ("authInProgress", 3), ("authFailed", 4), ("authenticated", 5), ("securityKeysSetup", 6), ("registered", 7), ("detached", 8))

cwdsiMacAuthCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 1, 1), )
if mibBuilder.loadTexts: cwdsiMacAuthCacheTable.setStatus('current')
if mibBuilder.loadTexts: cwdsiMacAuthCacheTable.setDescription('This table provides the information about the MAC addresses cached in the WDS for MAC authentication. MAC authentication caching reduces overhead because the WDS authenticates devices in its MAC-address cache without sending the request to the authentication server. An entry is added to this table when a Mobile Node completes MAC authentication to the authentication server. An entry is removed if the MAC address is not flushed before timeout.')
cwdsiMacAuthCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WDS-INFO-MIB", "cwdsiMacAuthCacheMacAddr"))
if mibBuilder.loadTexts: cwdsiMacAuthCacheEntry.setStatus('current')
if mibBuilder.loadTexts: cwdsiMacAuthCacheEntry.setDescription('Each entry is a set of a MAC address and age for fast MAC authentication.')
cwdsiMacAuthCacheMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cwdsiMacAuthCacheMacAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiMacAuthCacheMacAddr.setDescription('This object specifies the MAC address of the device which is cached in the WDS for MAC authentication.')
cwdsiMacAuthCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 1, 1, 1, 2), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMacAuthCacheAge.setStatus('current')
if mibBuilder.loadTexts: cwdsiMacAuthCacheAge.setDescription('This object specifies the elapsed time since the MAC address has been cached. If the MAC address is not flushed within the specific time(default 30 minutes), the entry with cwdsiMacAuthCacheMacAddr is removed.')
cwdsiApTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1), )
if mibBuilder.loadTexts: cwdsiApTable.setStatus('current')
if mibBuilder.loadTexts: cwdsiApTable.setDescription('This table provides the information about the Access Points registered with WDS. An entry is added to this table when a Access Point register with WDS and the entry is removed after the lifetime of the Access Point expires.')
cwdsiApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WDS-INFO-MIB", "cwdsiApMacAddr"))
if mibBuilder.loadTexts: cwdsiApEntry.setStatus('current')
if mibBuilder.loadTexts: cwdsiApEntry.setDescription('Each entry is a set of attributes of an Access Point currently registered with WDS.')
cwdsiApMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cwdsiApMacAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiApMacAddr.setDescription('The MAC address of the Access Point.')
cwdsiApAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiApAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiApAddr.')
cwdsiApAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiApAddr.setDescription('The Internet address of the Access Point.')
cwdsiApName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApName.setStatus('current')
if mibBuilder.loadTexts: cwdsiApName.setDescription('This object specifies the hostname of the Access Point.')
cwdsiApState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 5), CWdsDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApState.setStatus('current')
if mibBuilder.loadTexts: cwdsiApState.setDescription('This object specifies the registration state of the Access Point with the WDS.')
cwdsiApLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApLifeTime.setStatus('current')
if mibBuilder.loadTexts: cwdsiApLifeTime.setDescription('This object specifies the maximum time after which the registration of the Access Point with WDS expires. The Access Point must re-register before the lifetime is exhausted, otherwise it will be deleted from the table.')
cwdsiApNeighborAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApNeighborAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiApNeighborAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiApNeighborAddr.')
cwdsiApNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApNeighborAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiApNeighborAddr.setDescription('The Internet address of the network entity with which the Ethernet port of the Access Point is directly connected.')
cwdsiApNeighborName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApNeighborName.setStatus('current')
if mibBuilder.loadTexts: cwdsiApNeighborName.setDescription('This object specifies the hostname of the network entity with which the Ethernet port of the Access Point is directly connected.')
cwdsiApNeighborPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 2, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApNeighborPortName.setStatus('current')
if mibBuilder.loadTexts: cwdsiApNeighborPortName.setDescription("This object specifies the port name of the network entity with which the Ethernet port of the Access Point is directly connected. This will typically be the value of the ifName object (e.g., 'Ethernet0').")
cwdsiMnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1), )
if mibBuilder.loadTexts: cwdsiMnTable.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnTable.setDescription('This table provides the information about the Mobile Nodes registered with WDS. An entry is added to this table when a Mobile Node registers with WDS and the entry is removed after the lifetime of the Mobile Node expires.')
cwdsiMnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WDS-INFO-MIB", "cwdsiMnMacAddr"))
if mibBuilder.loadTexts: cwdsiMnEntry.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnEntry.setDescription('Each entry is a set of attributes of a Mobile Node currently registered with WDS.')
cwdsiMnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cwdsiMnMacAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnMacAddr.setDescription('The MAC address of the Mobile Node.')
cwdsiMnAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiMnAddr.')
cwdsiMnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnAddr.setDescription('The Internet address of the Mobile Node.')
cwdsiMnApMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnApMacAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnApMacAddr.setDescription('The MAC address of the Access Point with which the Mobile Node is associated.')
cwdsiMnApAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnApAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnApAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiMnApAddr.')
cwdsiMnApAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnApAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnApAddr.setDescription('The Internet address of the Access Point with which the Mobile Node has associated.')
cwdsiMnMobilityNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnMobilityNetworkId.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnMobilityNetworkId.setDescription('This object specifies the mobility network-id of the Mobile Node.')
cwdsiMnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 8), CWdsDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnState.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnState.setDescription('This object specifies the registration state of the Mobile Node with WDS.')
cwdsiMnSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 9), CDot11SsidString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnSsid.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnSsid.setDescription('This object specifies the SSID with which the Mobile Node has associated with the Access Point.')
cwdsiMnBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnBssid.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnBssid.setDescription('This object specifies the BSSID used by the Mobile Node to communicate with the Access Point.')
cwdsiMnVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 11), CDot11IfVlanIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnVlan.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnVlan.setDescription('This object specifies the VLAN ID used by Access Point to bridge trunk that carries the traffic, when the Mobile Node associates with Access Point specified by cwdsiMnApAddr, using SSID specified by cwdsiMnSsid.')
cwdsiMnKeyMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 12), CDot11SecAuthKeyMgmtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnKeyMgmt.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnKeyMgmt.setDescription('This object specifies the type of authenticated key management. If none of the bit is set, no key management is used.')
cwdsiMnAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 13), CWdsDeviceAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnAuthType.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnAuthType.setDescription("This object specifies one of the pre-defined authentication algorithms and additional authentication procedures for the Mobile Node. When the cwdsiMnState is 'registered', the valid combination of the authentications are: - open(0), - shared(1), - leap(2), - eap(3), - mac(4), - open(0) and eap(3), - open(0) and mac(4), - open(0), eap(3) and mac(4), - open(0) and macOrEap(5), - shared(1) and eap(3), - shared(1) and mac(4), - shared(1), eap(3) and mac(4), - mac(4) and leap(2). Otherwise, the valid combination of the authentications are: - eap(3), - mac(4), - eap(3) and mac(4), - macOrEap(5), - leap(2), - mac(4) and leap(2), - macOrLeap(6), - eapOptional(7). If none of the bits are set, there is no run-time authentication.")
cwdsiMnUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnUptime.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnUptime.setDescription('This object specifies the value of sysUpTime at the time this Mobile Node registered with WDS.')
cwdsiMnLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 3, 1, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnLifetime.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnLifetime.setDescription('This object specifies the maximum time after which the registration of the Mobile Node with its WDS expires. The Mobile Node must re-register before the time expires, otherwise it will be deleted from the table.')
cwdsiWnmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1), )
if mibBuilder.loadTexts: cwdsiWnmTable.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmTable.setDescription('This table provides the information about the Wireless Network Managers configured on WDS. WDS provides an aggregation point of all radio management traffic from participating Access Points to the registered Wireless Network Manager. The entry also provides the statistics between WDS and Wireless Network Manager. An entry is added to this table when a Wireless Network Manager is configured on WDS. Currently WDS supports just one Wireless Network Manger.')
cwdsiWnmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WDS-INFO-MIB", "cwdsiWnmAddrType"), (0, "CISCO-WDS-INFO-MIB", "cwdsiWnmAddr"))
if mibBuilder.loadTexts: cwdsiWnmEntry.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmEntry.setDescription('Each entry is a set of attributes of a Wireless Network Manger and statistics. The statistics is gathered since the Wireless Network Manager has been registered with WDS.')
cwdsiWnmAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cwdsiWnmAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiWnmAddr.')
cwdsiWnmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: cwdsiWnmAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmAddr.setDescription('The Internet address of the Wireless Network Manager.')
cwdsiWnmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 3), CWdsDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmState.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmState.setDescription('This object specifies the registration state of the Wireless Network Manger with WDS.')
cwdsiWnmLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmLinkStatus.setDescription('This object specifies the link status between WDS and Wireless Network Manager.')
cwdsiWnmClientTracking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 5), CWdsClientTrackingStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmClientTracking.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmClientTracking.setDescription('This object specifies the status of Client Tracking on WDS.')
cwdsiWnmReqMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmReqMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmReqMsgCount.setDescription('This object specifies the number of messages that are supposed to be sent to Wireless Network Manger. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmSentMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmSentMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmSentMsgCount.setDescription('This object specifies the number of sent messages by WDS to Network Manger. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmRetryTxMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmRetryTxMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmRetryTxMsgCount.setDescription('This object specifies the number of transmitted messages by WDS to Network Manger after more than one retransmission. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmWaitingAckMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmWaitingAckMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmWaitingAckMsgCount.setDescription('This object specifies the number of sent messages by WDS and waiting for acknowledge response from Wireless Network Manger. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmDropMicTxMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmDropMicTxMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmDropMicTxMsgCount.setDescription('This object specifies the number of dropped messages by WDS because of Message Integrity Check (MIC) failure before sending the messages to Wireless Network Manger. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmDropUmdTxMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmDropUmdTxMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmDropUmdTxMsgCount.setDescription('This object specifies the number of dropped messages by WDS because of the Unacknowledged Message Descriptor (UMD) allocation problem before sending the messages to Wireless Network Manger. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmIndicatedMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmIndicatedMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmIndicatedMsgCount.setDescription('This object specifies the number of indicated messages to WDS before receiving the messages from Wireless Network Manager. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmRxMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmRxMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmRxMsgCount.setDescription('This object specifies the number of received messages by WDS after receiving the messages from Wireless Network Manager. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmDropRxMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmDropRxMsgCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmDropRxMsgCount.setDescription('This object specifies the number of messages dropped by WDS received from Wireless Network Manager. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiWnmDiscontinuityTime.')
cwdsiWnmDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 4, 1, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWnmDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cwdsiWnmDiscontinuityTime.setDescription('This object specifies the vaule of sysUpTime on the most recent occassion when the WNM is registered with WDS.')
cwdsiApNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 1), Gauge32()).setUnits('access-points').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiApNum.setStatus('current')
if mibBuilder.loadTexts: cwdsiApNum.setDescription('This object specifies the number of Access Points currently registered with this WDS.')
cwdsiMnNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 2), Gauge32()).setUnits('mobile-nodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMnNum.setStatus('current')
if mibBuilder.loadTexts: cwdsiMnNum.setDescription('This object specifies the number of Mobile Nodes currently registered with this WDS.')
cwdsiAaaAuthAttemptCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiAaaAuthAttemptCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiAaaAuthAttemptCount.setDescription('This object specifies the number of AAA authentication attempts (such as LEAP) made by WDS to authenticate Access Points and Mobile Nodes. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiAaaAuthSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiAaaAuthSuccessCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiAaaAuthSuccessCount.setDescription('This object specifies the number of successful AAA authentication successes made by WDS to authenticate Access Points and Mobile Nodes. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiAaaAuthFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiAaaAuthFailureCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiAaaAuthFailureCount.setDescription('This object specifies the number of failed AAA authentication attempts made by WDS to authenticate Access Points and Mobile Nodes. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiMacSpoofingBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMacSpoofingBlockCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiMacSpoofingBlockCount.setDescription('This object specifies the number of MAC Spoofing attempts detected and blocked by WDS. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiRoamsWithoutAaaAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamsWithoutAaaAuthCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamsWithoutAaaAuthCount.setDescription('This object specifies the number of roams not involving AAA authentication. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiRoamsWithFullAaaAuthCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamsWithFullAaaAuthCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamsWithFullAaaAuthCount.setDescription('This object specifies the number of roams involving full AAA authentication. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiRoamsFastSecuredCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamsFastSecuredCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamsFastSecuredCount.setDescription('This object specifies the number of fast and secured roams with CCKM. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiMscMismatchCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMscMismatchCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiMscMismatchCount.setDescription('This object specifies the number of Message Sequence Counter (MSC) mismatches. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiKscFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiKscFailureCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiKscFailureCount.setDescription('This object specifies the number of failures for Key Sequence (KSC) with which WDS authenticates the Mobile Node for Fast Secure Roaming. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiMicFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMicFailureCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiMicFailureCount.setDescription('This object specifies the number of Message Integrity Check (MIC) failures detected by WDS. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiRnMismatchCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRnMismatchCount.setStatus('current')
if mibBuilder.loadTexts: cwdsiRnMismatchCount.setDescription('This object specifies the number of mismatches for ReKey Number (RN) with which WDS authenticates the Mobile Node for Fast Secure Roaming. Discontinuities in the value of this counter can occur at re-initialization of the WDS.')
cwdsiLcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("inTransition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiLcpStatus.setStatus('current')
if mibBuilder.loadTexts: cwdsiLcpStatus.setDescription('This object indicates the LCP link status. LCP is a communication protocol between WDS residing on WLSM and L3MM on RP to provide L3MM with up-to-date information about current location of Mobile Node and also to propagate tunnel end point and other configuration information from RP to WDS/AP. down(1) - The LCP link status is down, up(2) - The LCP link status is up, inTransition(3) - The LCP link status is in transition from up(2) to down(1) or from down(1) to up(2).')
cwdsiCsMgmtAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiCsMgmtAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiCsMgmtAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiCsMgmtAddr.')
cwdsiCsMgmtAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiCsMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiCsMgmtAddr.setDescription('The Internet address of the Central Switch Management.')
cwdsiWdsAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWdsAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiWdsAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiWdsAddr.')
cwdsiWdsAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWdsAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiWdsAddr.setDescription('The Internet address of the network device in which WDS resides.')
cwdsiWdsHsrpVirtualAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWdsHsrpVirtualAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiWdsHsrpVirtualAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiWdsHsrpVirtualAddr.')
cwdsiWdsHsrpVirtualAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 7), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiWdsHsrpVirtualAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiWdsHsrpVirtualAddr.setDescription('The vitrual Internet address of the WLSM when the HSRP is enabled.')
cwdsiHsrpState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("initial", 3), ("learn", 4), ("backup", 5), ("speak", 6), ("standby", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiHsrpState.setStatus('current')
if mibBuilder.loadTexts: cwdsiHsrpState.setDescription("This object indicates the state of HSRP. unknown(1) - The state is unknown. disabled(2) - The HSRP is disabled. initial(3) - This is the starting state and indicates that HSRP is not running. learn(4) - The router is still waiting to hear from the active router. backup(5) - The router monitors the availability and state of the Master Router. speak(6) - The router sends periodic Hello messages and is actively participating in the election of the active and/or standby router. standby(7) - The router is a candidate to become the next active router and sends periodic Hello messages. active(8) - The router is currently forwarding packets that are sent to the group's virtual MAC address. The router sends periodic Hello messages.")
cwdsiMobilityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9), )
if mibBuilder.loadTexts: cwdsiMobilityGroupTable.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGroupTable.setDescription('This table provides the information about mobility network-id. When a Mobile Node associates with a mobility enabled SSID, the Mobile Node registers with the network and is assigned to a particular mobility group. At the system level, a mobility network-id internally defines this mobility group. The mobility network-id is the mechanism the system uses to associate the user with a particular Fast Secure Roaming Tunnel. As the Mobile Node roams, the system tracks user movement, making sure that the user maintains association with the same mobility group.')
cwdsiMobilityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1), ).setIndexNames((0, "CISCO-WDS-INFO-MIB", "cwdsiMobilityGrpNetworkId"))
if mibBuilder.loadTexts: cwdsiMobilityGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGroupEntry.setDescription('Each entry is a set of attributes of a Mobility network-id currently configured in WDS.')
cwdsiMobilityGrpNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cwdsiMobilityGrpNetworkId.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGrpNetworkId.setDescription('This objects specifies the mobility network-id which uniquely defines a mobility group.')
cwdsiMobilityGrpTunnelAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMobilityGrpTunnelAddrType.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGrpTunnelAddrType.setDescription('Represents the type of Internet address stored in the corresponding instance of the cwdsiMobilityGrpTunnelAddr.')
cwdsiMobilityGrpTunnelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMobilityGrpTunnelAddr.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGrpTunnelAddr.setDescription('This object specifies the Internet address of the Mobility tunnel, which is the tunnel source address of the mGRE tunnel on RP. Access Point uses this address to tunnel Mobile Node traffic.')
cwdsiMobilityGrpTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMobilityGrpTunnelMtu.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGrpTunnelMtu.setDescription('This object specifies the maximum transmission unit of IP packet for the Mobility tunnel.')
cwdsiMobilityGrpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1, 5), Bits().clone(namedValues=NamedValues(("none", 0), ("trusted", 1), ("broadcast", 2), ("tcpMssAdjust", 3), ("dynamic", 4), ("multicast", 5), ("ipDiscovery", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMobilityGrpFlags.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGrpFlags.setDescription("This object specifies the attributes of the mobility tunnel. none(0) - The mobility network-id is not supported on L3MM. trusted(1) - By default, a mobility network is considered 'untrusted'. In an untrusted network, Mobile Nodes are required to use a DHCP-obtained IP address. In a 'trusted' network, Mobile Nodes are allowed to use static IP addresses. On an untrusted network, data forwarding path for a Mobile Node is established and updated by snooping DHCP packets between the Mobile Node and the DHCP server. On the other hand, a trusted network data path establishment and update is achieved by snooping IP packets generated by the Mobile Node. broadcast(2) - IP broadcast is allowed on the mobility network-id corresponding to this tunnel. tcpMssAdjust(3)- The Access Point should do a TCP Maximum Segment Size (MSS) adjustment for the tunnel corresponding to the mobility network-id. dynamic(4) - Wireless broadcast domain corresponding to mobility network-id is dynamically created on an Access Point. multicast(5) - IP multicast is allowed on the mobility network-id corresponding to this tunnel. ipDiscovery(6) - IP broadcast pings will be generated to discover the IP address of the wireless client.")
cwdsiMobilityGrpMnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 6, 9, 1, 6), Gauge32()).setUnits('mobile-nodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiMobilityGrpMnNum.setStatus('current')
if mibBuilder.loadTexts: cwdsiMobilityGrpMnNum.setDescription('This object specifies the number of Mobile Nodes of which the mobility network-id is cwdsiMobilityGrpNetworkId.')
cwdsiRoamStatsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamStatsStartTime.setDescription('This object specifies the start time and date since the statistics has been gathered.')
cwdsiRoamStatsAvgFiveSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 2), Gauge32()).setUnits('roams-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamStatsAvgFiveSeconds.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamStatsAvgFiveSeconds.setDescription('This object specifies the system-wide average number of roams per second for the previous 5 seconds interval.')
cwdsiRoamStatsAvgOneMinute = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 3), Gauge32()).setUnits('roams-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamStatsAvgOneMinute.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamStatsAvgOneMinute.setDescription('This object specifies the system-wide average number of roams per second for the previous 1 minute interval.')
cwdsiRoamStatsAvgFiveMinutes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 4), Gauge32()).setUnits('roams-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamStatsAvgFiveMinutes.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamStatsAvgFiveMinutes.setDescription('This object specifies the system-wide average number of roams per second for the previous 5 minutes interval.')
cwdsiRoamMblGrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5), )
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsTable.setDescription("This table provides the information about the roaming statistics per the mobility network-id. Roams per second statistics will have averages for 5 seconds, one minute and five minutes. These data will be separated by the mobility network-id and differentiated by roams with 'no AAA authentications', 'AAA authentications', and 'Fast Secured Authentications'.")
cwdsiRoamMblGrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1), ).setIndexNames((0, "CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsNetworkId"))
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsEntry.setDescription('Each entry is a set of roaming statistics.')
cwdsiRoamMblGrpStatsNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsNetworkId.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsNetworkId.setDescription('This object specifies the mobility network-id of the roaming Mobile Nodes.')
cwdsiRoamMblGrpStatsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsTotal.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsTotal.setDescription('This object specifies the count of total roams within the mobility network-id. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiRoamStatsStartTime.')
cwdsiRoamMblGrpStatsNoAuthAaa = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsNoAuthAaa.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsNoAuthAaa.setDescription('This object specifies the count of roams without AAA authentications within the mobility network-id. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiRoamStatsStartTime.')
cwdsiRoamMblGrpStatsAuthAaa = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsAuthAaa.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsAuthAaa.setDescription('This object specifies the count of roams with AAA authentications within the mobility network-id. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiRoamStatsStartTime.')
cwdsiRoamMblGrpStatsFastSecured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsFastSecured.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsFastSecured.setDescription('This object specifies the count of roams with Fast Secured authentications within the mobility network-id. Discontinuities in the value of this counter can occur at re-initialization of the WDS, and at other times as indicated by the value of cwdsiRoamStatsStartTime.')
cwdsiRoamMblGrpStatsFiveSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 6), Gauge32()).setUnits('roams-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsFiveSeconds.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsFiveSeconds.setDescription('This object specifies the average number of roams per second for the previous 5 seconds interval within the mobility network-id.')
cwdsiRoamMblGrpStatsOneMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 7), Gauge32()).setUnits('roams-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsOneMinute.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsOneMinute.setDescription('This object specifies the average number of roams per second for the previous 1 minute interval within the mobility network-id.')
cwdsiRoamMblGrpStatsFiveMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 509, 1, 7, 5, 1, 8), Gauge32()).setUnits('roams-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsFiveMinutes.setStatus('current')
if mibBuilder.loadTexts: cwdsiRoamMblGrpStatsFiveMinutes.setDescription('This object specifies the average number of roams per second for the previous 5 minutes interval within the mobility network-id.')
cwdsiLcpStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 509, 0, 1)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiLcpStatus"))
if mibBuilder.loadTexts: cwdsiLcpStatusChange.setStatus('current')
if mibBuilder.loadTexts: cwdsiLcpStatusChange.setDescription("This notification will be sent when a LCP status changes from 'down' to 'up' or from 'up' to 'down'.")
cwdsiHsrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 509, 0, 2)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiHsrpState"))
if mibBuilder.loadTexts: cwdsiHsrpStateChange.setStatus('current')
if mibBuilder.loadTexts: cwdsiHsrpStateChange.setDescription("This notification will be sent when HSRP state changes from 'standby' to 'active' or from 'active' to 'standby'.")
ciscoWdsInfoMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 1))
ciscoWdsInfoMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2))
ciscoWdsInfoMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 1, 1)).setObjects(("CISCO-WDS-INFO-MIB", "ciscoWdsInfoMacAuthCacheGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoAccessPointGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoMobileNodeGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoNetworkManagerGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoStatisticsGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoMobilityGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoRoamStatisticsGroup"), ("CISCO-WDS-INFO-MIB", "ciscoWdsInfoNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoMIBCompliance = ciscoWdsInfoMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the cwdsiInformationMIB module.')
ciscoWdsInfoMacAuthCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 1)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiMacAuthCacheAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoMacAuthCacheGroup = ciscoWdsInfoMacAuthCacheGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoMacAuthCacheGroup.setDescription('This collection of objects provide the information about MAC addresses and ages for MAC authentication of the device station.')
ciscoWdsInfoAccessPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 2)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiApAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiApAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiApName"), ("CISCO-WDS-INFO-MIB", "cwdsiApState"), ("CISCO-WDS-INFO-MIB", "cwdsiApLifeTime"), ("CISCO-WDS-INFO-MIB", "cwdsiApNeighborAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiApNeighborAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiApNeighborName"), ("CISCO-WDS-INFO-MIB", "cwdsiApNeighborPortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoAccessPointGroup = ciscoWdsInfoAccessPointGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoAccessPointGroup.setDescription('This collection of objects provide the information about entities of a Access Point registered with WDS.')
ciscoWdsInfoMobileNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 3)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiMnAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiMnAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiMnApMacAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiMnApAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiMnApAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiMnMobilityNetworkId"), ("CISCO-WDS-INFO-MIB", "cwdsiMnState"), ("CISCO-WDS-INFO-MIB", "cwdsiMnBssid"), ("CISCO-WDS-INFO-MIB", "cwdsiMnVlan"), ("CISCO-WDS-INFO-MIB", "cwdsiMnSsid"), ("CISCO-WDS-INFO-MIB", "cwdsiMnKeyMgmt"), ("CISCO-WDS-INFO-MIB", "cwdsiMnAuthType"), ("CISCO-WDS-INFO-MIB", "cwdsiMnUptime"), ("CISCO-WDS-INFO-MIB", "cwdsiMnLifetime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoMobileNodeGroup = ciscoWdsInfoMobileNodeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoMobileNodeGroup.setDescription('This collection of objects provide the information about entities of Mobile Node registered with WDS.')
ciscoWdsInfoNetworkManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 4)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiWnmState"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmLinkStatus"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmClientTracking"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmReqMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmSentMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmRetryTxMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmWaitingAckMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmDropMicTxMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmDropUmdTxMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmIndicatedMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmRxMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmDropRxMsgCount"), ("CISCO-WDS-INFO-MIB", "cwdsiWnmDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoNetworkManagerGroup = ciscoWdsInfoNetworkManagerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoNetworkManagerGroup.setDescription('This collection of objects provide the information about the configuration status and statistics data between WDS and Network Manager. ')
ciscoWdsInfoStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 5)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiApNum"), ("CISCO-WDS-INFO-MIB", "cwdsiMnNum"), ("CISCO-WDS-INFO-MIB", "cwdsiAaaAuthAttemptCount"), ("CISCO-WDS-INFO-MIB", "cwdsiAaaAuthSuccessCount"), ("CISCO-WDS-INFO-MIB", "cwdsiAaaAuthFailureCount"), ("CISCO-WDS-INFO-MIB", "cwdsiMacSpoofingBlockCount"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamsWithoutAaaAuthCount"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamsWithFullAaaAuthCount"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamsFastSecuredCount"), ("CISCO-WDS-INFO-MIB", "cwdsiMscMismatchCount"), ("CISCO-WDS-INFO-MIB", "cwdsiKscFailureCount"), ("CISCO-WDS-INFO-MIB", "cwdsiMicFailureCount"), ("CISCO-WDS-INFO-MIB", "cwdsiRnMismatchCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoStatisticsGroup = ciscoWdsInfoStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoStatisticsGroup.setDescription('This collection of objects provide the information about the statistics of Access Points and Mobile Nodes registered with WDS.')
ciscoWdsInfoMobilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 6)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiLcpStatus"), ("CISCO-WDS-INFO-MIB", "cwdsiCsMgmtAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiCsMgmtAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiWdsAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiWdsAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiWdsHsrpVirtualAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiWdsHsrpVirtualAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiHsrpState"), ("CISCO-WDS-INFO-MIB", "cwdsiMobilityGrpTunnelAddrType"), ("CISCO-WDS-INFO-MIB", "cwdsiMobilityGrpTunnelAddr"), ("CISCO-WDS-INFO-MIB", "cwdsiMobilityGrpTunnelMtu"), ("CISCO-WDS-INFO-MIB", "cwdsiMobilityGrpFlags"), ("CISCO-WDS-INFO-MIB", "cwdsiMobilityGrpMnNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoMobilityGroup = ciscoWdsInfoMobilityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoMobilityGroup.setDescription('This collection of objects provide the information about entities of the Mobility Network.')
ciscoWdsInfoRoamStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 7)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiRoamStatsStartTime"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamStatsAvgFiveSeconds"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamStatsAvgOneMinute"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamStatsAvgFiveMinutes"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsTotal"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsNoAuthAaa"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsAuthAaa"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsFastSecured"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsFiveSeconds"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsOneMinute"), ("CISCO-WDS-INFO-MIB", "cwdsiRoamMblGrpStatsFiveMinutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoRoamStatisticsGroup = ciscoWdsInfoRoamStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoRoamStatisticsGroup.setDescription('This collection of objects provide the information about the Roaming statistics.')
ciscoWdsInfoNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 509, 2, 2, 8)).setObjects(("CISCO-WDS-INFO-MIB", "cwdsiLcpStatusChange"), ("CISCO-WDS-INFO-MIB", "cwdsiHsrpStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsInfoNotifGroup = ciscoWdsInfoNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsInfoNotifGroup.setDescription('This collection of objects provide the notifications about the LCP status and HSRP state.')
mibBuilder.exportSymbols("CISCO-WDS-INFO-MIB", cwdsiWnmLinkStatus=cwdsiWnmLinkStatus, cwdsiRoamMblGrpStatsFastSecured=cwdsiRoamMblGrpStatsFastSecured, ciscoWdsInfoNetworkManager=ciscoWdsInfoNetworkManager, cwdsiWnmDiscontinuityTime=cwdsiWnmDiscontinuityTime, cwdsiMobilityGrpTunnelMtu=cwdsiMobilityGrpTunnelMtu, cwdsiApNeighborAddrType=cwdsiApNeighborAddrType, cwdsiMnState=cwdsiMnState, cwdsiMnApAddr=cwdsiMnApAddr, ciscoWdsInfoMacAuthCache=ciscoWdsInfoMacAuthCache, ciscoWdsInfoAccessPointGroup=ciscoWdsInfoAccessPointGroup, ciscoWdsInfoRoamStatistics=ciscoWdsInfoRoamStatistics, cwdsiMscMismatchCount=cwdsiMscMismatchCount, cwdsiRoamsWithoutAaaAuthCount=cwdsiRoamsWithoutAaaAuthCount, cwdsiMacSpoofingBlockCount=cwdsiMacSpoofingBlockCount, ciscoWdsInfoMIBObjects=ciscoWdsInfoMIBObjects, ciscoWdsInfoMIB=ciscoWdsInfoMIB, cwdsiLcpStatus=cwdsiLcpStatus, cwdsiMnEntry=cwdsiMnEntry, cwdsiWnmAddr=cwdsiWnmAddr, cwdsiWnmDropMicTxMsgCount=cwdsiWnmDropMicTxMsgCount, cwdsiMobilityGrpMnNum=cwdsiMobilityGrpMnNum, cwdsiMacAuthCacheAge=cwdsiMacAuthCacheAge, ciscoWdsInfoMobilityGroup=ciscoWdsInfoMobilityGroup, cwdsiApTable=cwdsiApTable, cwdsiWnmReqMsgCount=cwdsiWnmReqMsgCount, cwdsiRnMismatchCount=cwdsiRnMismatchCount, cwdsiHsrpState=cwdsiHsrpState, cwdsiWnmEntry=cwdsiWnmEntry, cwdsiMnMacAddr=cwdsiMnMacAddr, cwdsiApNeighborAddr=cwdsiApNeighborAddr, cwdsiMobilityGroupEntry=cwdsiMobilityGroupEntry, cwdsiWnmAddrType=cwdsiWnmAddrType, cwdsiRoamStatsAvgOneMinute=cwdsiRoamStatsAvgOneMinute, cwdsiAaaAuthSuccessCount=cwdsiAaaAuthSuccessCount, cwdsiApLifeTime=cwdsiApLifeTime, ciscoWdsInfoMIBCompliance=ciscoWdsInfoMIBCompliance, cwdsiMacAuthCacheMacAddr=cwdsiMacAuthCacheMacAddr, cwdsiApState=cwdsiApState, cwdsiApAddr=cwdsiApAddr, cwdsiMnUptime=cwdsiMnUptime, cwdsiApName=cwdsiApName, cwdsiWnmDropUmdTxMsgCount=cwdsiWnmDropUmdTxMsgCount, cwdsiWnmState=cwdsiWnmState, cwdsiMacAuthCacheEntry=cwdsiMacAuthCacheEntry, cwdsiMobilityGroupTable=cwdsiMobilityGroupTable, cwdsiWdsAddrType=cwdsiWdsAddrType, cwdsiKscFailureCount=cwdsiKscFailureCount, cwdsiHsrpStateChange=cwdsiHsrpStateChange, cwdsiCsMgmtAddrType=cwdsiCsMgmtAddrType, cwdsiAaaAuthAttemptCount=cwdsiAaaAuthAttemptCount, cwdsiWdsHsrpVirtualAddr=cwdsiWdsHsrpVirtualAddr, cwdsiRoamMblGrpStatsOneMinute=cwdsiRoamMblGrpStatsOneMinute, cwdsiApMacAddr=cwdsiApMacAddr, cwdsiWnmWaitingAckMsgCount=cwdsiWnmWaitingAckMsgCount, cwdsiMnTable=cwdsiMnTable, ciscoWdsInfoMIBConform=ciscoWdsInfoMIBConform, cwdsiMnKeyMgmt=cwdsiMnKeyMgmt, cwdsiCsMgmtAddr=cwdsiCsMgmtAddr, cwdsiRoamsFastSecuredCount=cwdsiRoamsFastSecuredCount, cwdsiMnAuthType=cwdsiMnAuthType, CWdsDeviceState=CWdsDeviceState, cwdsiMnBssid=cwdsiMnBssid, cwdsiMobilityGrpNetworkId=cwdsiMobilityGrpNetworkId, CWdsClientTrackingStatus=CWdsClientTrackingStatus, cwdsiMnNum=cwdsiMnNum, cwdsiRoamStatsAvgFiveMinutes=cwdsiRoamStatsAvgFiveMinutes, PYSNMP_MODULE_ID=ciscoWdsInfoMIB, cwdsiRoamStatsAvgFiveSeconds=cwdsiRoamStatsAvgFiveSeconds, cwdsiRoamMblGrpStatsTable=cwdsiRoamMblGrpStatsTable, cwdsiRoamMblGrpStatsFiveSeconds=cwdsiRoamMblGrpStatsFiveSeconds, cwdsiWdsAddr=cwdsiWdsAddr, cwdsiWnmRxMsgCount=cwdsiWnmRxMsgCount, cwdsiMobilityGrpTunnelAddrType=cwdsiMobilityGrpTunnelAddrType, cwdsiMnAddrType=cwdsiMnAddrType, cwdsiMnApMacAddr=cwdsiMnApMacAddr, ciscoWdsInfoStatisticsGroup=ciscoWdsInfoStatisticsGroup, cwdsiMicFailureCount=cwdsiMicFailureCount, cwdsiRoamMblGrpStatsNetworkId=cwdsiRoamMblGrpStatsNetworkId, cwdsiWnmTable=cwdsiWnmTable, cwdsiRoamMblGrpStatsFiveMinutes=cwdsiRoamMblGrpStatsFiveMinutes, cwdsiMobilityGrpFlags=cwdsiMobilityGrpFlags, cwdsiRoamMblGrpStatsEntry=cwdsiRoamMblGrpStatsEntry, cwdsiMnAddr=cwdsiMnAddr, ciscoWdsInfoMIBGroups=ciscoWdsInfoMIBGroups, ciscoWdsInfoStatistics=ciscoWdsInfoStatistics, ciscoWdsInfoRoamStatisticsGroup=ciscoWdsInfoRoamStatisticsGroup, cwdsiApNeighborPortName=cwdsiApNeighborPortName, cwdsiRoamMblGrpStatsAuthAaa=cwdsiRoamMblGrpStatsAuthAaa, cwdsiWnmIndicatedMsgCount=cwdsiWnmIndicatedMsgCount, cwdsiApEntry=cwdsiApEntry, cwdsiApNum=cwdsiApNum, cwdsiMacAuthCacheTable=cwdsiMacAuthCacheTable, ciscoWdsInfoAccessPoint=ciscoWdsInfoAccessPoint, cwdsiWdsHsrpVirtualAddrType=cwdsiWdsHsrpVirtualAddrType, cwdsiMnVlan=cwdsiMnVlan, cwdsiApAddrType=cwdsiApAddrType, cwdsiRoamStatsStartTime=cwdsiRoamStatsStartTime, ciscoWdsInfoMIBCompliances=ciscoWdsInfoMIBCompliances, ciscoWdsInfoMIBNotifs=ciscoWdsInfoMIBNotifs, ciscoWdsInfoMacAuthCacheGroup=ciscoWdsInfoMacAuthCacheGroup, ciscoWdsInfoNotifGroup=ciscoWdsInfoNotifGroup, cwdsiWnmClientTracking=cwdsiWnmClientTracking, cwdsiMnLifetime=cwdsiMnLifetime, cwdsiRoamsWithFullAaaAuthCount=cwdsiRoamsWithFullAaaAuthCount, cwdsiWnmSentMsgCount=cwdsiWnmSentMsgCount, cwdsiLcpStatusChange=cwdsiLcpStatusChange, ciscoWdsInfoMobility=ciscoWdsInfoMobility, cwdsiMnApAddrType=cwdsiMnApAddrType, cwdsiMnSsid=cwdsiMnSsid, ciscoWdsInfoNetworkManagerGroup=ciscoWdsInfoNetworkManagerGroup, cwdsiAaaAuthFailureCount=cwdsiAaaAuthFailureCount, cwdsiApNeighborName=cwdsiApNeighborName, ciscoWdsInfoMobileNode=ciscoWdsInfoMobileNode, cwdsiMobilityGrpTunnelAddr=cwdsiMobilityGrpTunnelAddr, cwdsiRoamMblGrpStatsTotal=cwdsiRoamMblGrpStatsTotal, cwdsiRoamMblGrpStatsNoAuthAaa=cwdsiRoamMblGrpStatsNoAuthAaa, cwdsiWnmRetryTxMsgCount=cwdsiWnmRetryTxMsgCount, cwdsiMnMobilityNetworkId=cwdsiMnMobilityNetworkId, ciscoWdsInfoMobileNodeGroup=ciscoWdsInfoMobileNodeGroup, CWdsDeviceAuthType=CWdsDeviceAuthType, cwdsiWnmDropRxMsgCount=cwdsiWnmDropRxMsgCount)
