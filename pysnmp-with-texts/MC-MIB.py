#
# PySNMP MIB module MC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:10:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
MmGatekeeperID, MmGlobalIdentifier, MmEndpointID, MmTAddressTag = mibBuilder.importSymbols("MULTI-MEDIA-MIB-TC", "MmGatekeeperID", "MmGlobalIdentifier", "MmEndpointID", "MmTAddressTag")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, ObjectIdentity, Unsigned32, enterprises, TimeTicks, Integer32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Counter32, Bits, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Unsigned32", "enterprises", "TimeTicks", "Integer32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Counter32", "Bits", "Counter64", "ModuleIdentity")
DisplayString, DateAndTime, TAddress, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TAddress", "RowStatus", "TruthValue", "TextualConvention")
media = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2))
h323MC = ModuleIdentity((1, 3, 6, 1, 4, 1, 3011, 2, 2))
if mibBuilder.loadTexts: h323MC.setLastUpdated('9807202253Z')
if mibBuilder.loadTexts: h323MC.setOrganization('VideoServer')
if mibBuilder.loadTexts: h323MC.setContactInfo(' Irina Suconick Postal: Video Server 63 Third st. Burlington, MA 01803 Tel: (781)505-2155 E-Mail: isuconick@videoserver.com ')
if mibBuilder.loadTexts: h323MC.setDescription(' ')
mcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2, 2, 1))
mcConference = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2))
mcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2, 2, 3))
mcEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2, 2, 4))
mcConfigMcCallSignalingTag = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 1, 1), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConfigMcCallSignalingTag.setStatus('current')
if mibBuilder.loadTexts: mcConfigMcCallSignalingTag.setDescription('The MC call signaling address tag.')
mcConfigMcCallSignalingAddress = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 1, 2), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConfigMcCallSignalingAddress.setStatus('current')
if mibBuilder.loadTexts: mcConfigMcCallSignalingAddress.setDescription('The MC call signaling address.')
mcConfigGatekeeperAddressTag = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 1, 3), MmTAddressTag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcConfigGatekeeperAddressTag.setStatus('current')
if mibBuilder.loadTexts: mcConfigGatekeeperAddressTag.setDescription('The GK address tag.')
mcConfigGatekeeperAddress = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 1, 4), TAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcConfigGatekeeperAddress.setStatus('current')
if mibBuilder.loadTexts: mcConfigGatekeeperAddress.setDescription('The address of the gatekeeper that MC is registered with. The network manager may request MC to register with a particular GK by setting the GK address.')
mcConfigIsRegisteredWithGatekeeper = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcConfigIsRegisteredWithGatekeeper.setStatus('current')
if mibBuilder.loadTexts: mcConfigIsRegisteredWithGatekeeper.setDescription('This value indicates if MC is registered with the gatekeeper.')
mcConferenceTable = MibTable((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mcConferenceTable.setStatus('current')
if mibBuilder.loadTexts: mcConferenceTable.setDescription('This table contains information about running conferences. It is a list of conference entries. The number of entries equals to the number of running conferences.')
mcConferenceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1), ).setIndexNames((0, "MC-MIB", "mcConferenceConferenceId"))
if mibBuilder.loadTexts: mcConferenceTableEntry.setStatus('current')
if mibBuilder.loadTexts: mcConferenceTableEntry.setDescription('It contains objects that describe the conferences.')
mcConferenceConferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1, 1), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceConferenceId.setStatus('current')
if mibBuilder.loadTexts: mcConferenceConferenceId.setDescription('The conference identifier.')
mcConferenceConferenceStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceConferenceStartTime.setStatus('current')
if mibBuilder.loadTexts: mcConferenceConferenceStartTime.setDescription('The conference start time.')
mcConferenceConferenceEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceConferenceEndTime.setStatus('current')
if mibBuilder.loadTexts: mcConferenceConferenceEndTime.setDescription('The conference end time.')
mcConferenceCentralizedOrDistributed = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centralized", 1), ("distributed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceCentralizedOrDistributed.setStatus('current')
if mibBuilder.loadTexts: mcConferenceCentralizedOrDistributed.setDescription('This value indicates rather the conference is centralized or distributed.')
mcConferenceUniOrMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceUniOrMulticast.setStatus('current')
if mibBuilder.loadTexts: mcConferenceUniOrMulticast.setDescription('This value indicates rather the conference is unicast or multicast.')
mcConferenceActiveMcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 1, 1, 6), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceActiveMcAddress.setStatus('current')
if mibBuilder.loadTexts: mcConferenceActiveMcAddress.setDescription("The address of active MC. In case of cascading this value is different than MC's own address.")
mcConferenceParticipantsTable = MibTable((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2), )
if mibBuilder.loadTexts: mcConferenceParticipantsTable.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsTable.setDescription('This table contains information about conference participants. It is a list of participant entries. The number of entries equals to the sum of all participants for all conferences.')
mcConferenceParticipantsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1), ).setIndexNames((0, "MC-MIB", "mcConferenceConferenceId"), (0, "MC-MIB", "mcConferenceParticipantsTableIndex"))
if mibBuilder.loadTexts: mcConferenceParticipantsTableEntry.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsTableEntry.setDescription('It contains objects that describe a conference participant.')
mcConferenceParticipantsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsTableIndex.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsTableIndex.setDescription('An orbitrary index to this table. This index is one for the first participant for every given conference. It is incremented by one for each subsequent participant of the same conference. The last index for a particular conference is equal to the number of participants for that conference.')
mcConferenceParticipantsTerminalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsTerminalLabel.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsTerminalLabel.setDescription('The terminal label of this terminal.')
mcConferenceParticipantsCallSignalingtAddressTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 3), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsCallSignalingtAddressTag.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsCallSignalingtAddressTag.setDescription('The terminal call signaling address type.')
mcConferenceParticipantsCallSignalingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 4), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsCallSignalingAddress.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsCallSignalingAddress.setDescription('The terminal call signaling address.')
mcConferenceParticipantsCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 5), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsCallId.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsCallId.setDescription('The call identifier.')
mcConferenceParticipantsControlChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsControlChannelIndex.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsControlChannelIndex.setDescription('The index to the control channel table in H.245 MIB. ')
mcConferenceParticipantsNumberOfLogicalChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsNumberOfLogicalChannels.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsNumberOfLogicalChannels.setDescription('The number of logical channels that are used by this participant.')
mcConferenceParticipantsRtpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3011, 2, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcConferenceParticipantsRtpSessionIndex.setStatus('current')
if mibBuilder.loadTexts: mcConferenceParticipantsRtpSessionIndex.setDescription('The index to the RTP session table in RTP MIB')
mcStatsTotalConferences = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcStatsTotalConferences.setStatus('current')
if mibBuilder.loadTexts: mcStatsTotalConferences.setDescription('The total number of conferences since system start up time.')
mcStatsSuccessfullyCompletedConferences = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcStatsSuccessfullyCompletedConferences.setStatus('current')
if mibBuilder.loadTexts: mcStatsSuccessfullyCompletedConferences.setDescription('The number of conferences that completed successfully.')
mcStatsAbnormalyTerminatedConferences = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcStatsAbnormalyTerminatedConferences.setStatus('current')
if mibBuilder.loadTexts: mcStatsAbnormalyTerminatedConferences.setDescription('The number of conferences that were terminated abnormaly.')
lastConferenceTerminationReason = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTermination", 1), ("administrativelyTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastConferenceTerminationReason.setStatus('current')
if mibBuilder.loadTexts: lastConferenceTerminationReason.setDescription('This value identifys the reason for the conference termination.')
lastTerminatedConferenceId = MibScalar((1, 3, 6, 1, 4, 1, 3011, 2, 2, 4, 2), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTerminatedConferenceId.setStatus('current')
if mibBuilder.loadTexts: lastTerminatedConferenceId.setDescription('The number of conferences that were terminated abnormaly.')
conferenceTermination = NotificationType((1, 3, 6, 1, 4, 1, 3011, 2, 2, 4, 3)).setObjects(("MC-MIB", "lastTerminatedConferenceId"), ("MC-MIB", "lastConferenceTerminationReason"))
if mibBuilder.loadTexts: conferenceTermination.setStatus('current')
if mibBuilder.loadTexts: conferenceTermination.setDescription('This message will be sent on conference termination for the following reasons: 1 - normaly terminataed 2 - administratively terminated ')
mcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5))
mcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5, 1))
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5, 1, 1)).setObjects(("MC-MIB", "mcConfigMcCallSignalingTag"), ("MC-MIB", "mcConfigMcCallSignalingAddress"), ("MC-MIB", "mcConfigGatekeeperAddressTag"), ("MC-MIB", "mcConfigGatekeeperAddress"), ("MC-MIB", "mcConfigIsRegisteredWithGatekeeper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configGroup = configGroup.setStatus('current')
if mibBuilder.loadTexts: configGroup.setDescription('.')
conferenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5, 1, 2)).setObjects(("MC-MIB", "mcConferenceConferenceId"), ("MC-MIB", "mcConferenceConferenceStartTime"), ("MC-MIB", "mcConferenceConferenceEndTime"), ("MC-MIB", "mcConferenceCentralizedOrDistributed"), ("MC-MIB", "mcConferenceUniOrMulticast"), ("MC-MIB", "mcConferenceActiveMcAddress"), ("MC-MIB", "mcConferenceParticipantsTerminalLabel"), ("MC-MIB", "mcConferenceParticipantsCallSignalingtAddressTag"), ("MC-MIB", "mcConferenceParticipantsCallSignalingAddress"), ("MC-MIB", "mcConferenceParticipantsCallId"), ("MC-MIB", "mcConferenceParticipantsControlChannelIndex"), ("MC-MIB", "mcConferenceParticipantsNumberOfLogicalChannels"), ("MC-MIB", "mcConferenceParticipantsRtpSessionIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    conferenceGroup = conferenceGroup.setStatus('current')
if mibBuilder.loadTexts: conferenceGroup.setDescription('.')
mcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5, 1, 4)).setObjects(("MC-MIB", "mcStatsTotalConferences"), ("MC-MIB", "mcStatsSuccessfullyCompletedConferences"), ("MC-MIB", "mcStatsAbnormalyTerminatedConferences"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcStatsGroup = mcStatsGroup.setStatus('current')
if mibBuilder.loadTexts: mcStatsGroup.setDescription('.')
mcEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5, 1, 5)).setObjects(("MC-MIB", "lastConferenceTerminationReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcEventsGroup = mcEventsGroup.setStatus('current')
if mibBuilder.loadTexts: mcEventsGroup.setDescription('.')
mcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3011, 2, 2, 5, 2)).setObjects(("MC-MIB", "configGroup"), ("MC-MIB", "mcConferenceGroup"), ("MC-MIB", "mcStatsGroup"), ("MC-MIB", "mcEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcMIBCompliance = mcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mcMIBCompliance.setDescription('The set of objects required for compliance.')
mibBuilder.exportSymbols("MC-MIB", mcConfigIsRegisteredWithGatekeeper=mcConfigIsRegisteredWithGatekeeper, mcConfigMcCallSignalingTag=mcConfigMcCallSignalingTag, mcConferenceParticipantsCallId=mcConferenceParticipantsCallId, lastConferenceTerminationReason=lastConferenceTerminationReason, mcMIBCompliance=mcMIBCompliance, conferenceGroup=conferenceGroup, mcConferenceParticipantsTable=mcConferenceParticipantsTable, mcConferenceConferenceStartTime=mcConferenceConferenceStartTime, mcConferenceParticipantsCallSignalingAddress=mcConferenceParticipantsCallSignalingAddress, mcStatsSuccessfullyCompletedConferences=mcStatsSuccessfullyCompletedConferences, mcEventsGroup=mcEventsGroup, mcConferenceParticipantsCallSignalingtAddressTag=mcConferenceParticipantsCallSignalingtAddressTag, mcConfig=mcConfig, mcConferenceParticipantsNumberOfLogicalChannels=mcConferenceParticipantsNumberOfLogicalChannels, mcMIBGroups=mcMIBGroups, mcConferenceUniOrMulticast=mcConferenceUniOrMulticast, mcConference=mcConference, mcConferenceParticipantsTableEntry=mcConferenceParticipantsTableEntry, mcConferenceTable=mcConferenceTable, mcMIBConformance=mcMIBConformance, mcConfigGatekeeperAddress=mcConfigGatekeeperAddress, mcStatsTotalConferences=mcStatsTotalConferences, conferenceTermination=conferenceTermination, mcConferenceParticipantsControlChannelIndex=mcConferenceParticipantsControlChannelIndex, mcStatsAbnormalyTerminatedConferences=mcStatsAbnormalyTerminatedConferences, mcConferenceCentralizedOrDistributed=mcConferenceCentralizedOrDistributed, configGroup=configGroup, h323MC=h323MC, mcConferenceParticipantsRtpSessionIndex=mcConferenceParticipantsRtpSessionIndex, mcConferenceConferenceEndTime=mcConferenceConferenceEndTime, mcStatsGroup=mcStatsGroup, mcConfigMcCallSignalingAddress=mcConfigMcCallSignalingAddress, mcConfigGatekeeperAddressTag=mcConfigGatekeeperAddressTag, mcConferenceActiveMcAddress=mcConferenceActiveMcAddress, mcEvents=mcEvents, mcConferenceParticipantsTableIndex=mcConferenceParticipantsTableIndex, mcConferenceConferenceId=mcConferenceConferenceId, PYSNMP_MODULE_ID=h323MC, mcConferenceParticipantsTerminalLabel=mcConferenceParticipantsTerminalLabel, lastTerminatedConferenceId=lastTerminatedConferenceId, mcConferenceTableEntry=mcConferenceTableEntry, mcStats=mcStats, media=media)
