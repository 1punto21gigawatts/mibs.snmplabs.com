#
# PySNMP MIB module ASCEND-CALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-CALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
callStatusGroup, = mibBuilder.importSymbols("ASCEND-MIB", "callStatusGroup")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, ObjectIdentity, Counter32, ModuleIdentity, TimeTicks, Bits, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Counter32", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
callStatusMaximumEntries = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusMaximumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusMaximumEntries.setDescription('The maximum number of entries that can exist in the call status table.')
callStatusTable = MibTable((1, 3, 6, 1, 4, 1, 529, 11, 2), )
if mibBuilder.loadTexts: callStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusTable.setDescription('A list of call status entries.')
callStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 11, 2, 1), ).setIndexNames((0, "ASCEND-CALL-MIB", "callStatusIndex"))
if mibBuilder.loadTexts: callStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusEntry.setDescription("An entry containing object variables to describe a call's status.")
callStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusIndex.setDescription("The index number for this call status entry. Its value ranges from 1 to 'callStatusMaximumEntries'.")
callStatusValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusValidFlag.setDescription("Value indicates whether this entry indexed by 'callStatusIndex' contains valid information or not.")
callStatusStartingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusStartingTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusStartingTimeStamp.setDescription("The starting time for this call in seconds since startup. A value of 0 is returned if entry is invalid (ie. 'callStatusValidFlag' is invalid(1)).")
callStatusCallReferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusCallReferenceNum.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusCallReferenceNum.setDescription('The unique number identifying the session for which this call is associated. A value of 0 is returned if entry is invalid.')
callStatusDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusDataRate.setDescription('The receive rate for ISDN calls or the baud rate for modem calls. A value of 0 is returned if entry is invalid.')
callStatusSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusSlotNumber.setDescription("Identifies the slot of the line being used. It's value ranges between 1 and the value 'slotNumber' in Ascend's slots group. This variable is equivalent to 'slotIndex' in the slot group. A value of 0 is returned if entry is invalid.")
callStatusSlotLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusSlotLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusSlotLineNumber.setDescription("Identifies the line for network slots. This variable is equivalent to 'slotItemIndex' in Ascend's slot group. A value of 0 is returned if entry is invalid.")
callStatusSlotChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusSlotChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusSlotChannelNumber.setDescription("Identifies the channel for the particular line identified by 'callStatusSlotLineNumber'. A value of 0 is returned if entry is invalid.")
callStatusModemSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusModemSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusModemSlotNumber.setDescription("Identifies the slot on the device. It's value ranges between 1 and the value 'slotNumber' in Ascend's slot group. A value of 0 is returned if entry is invalid.")
callStatusModemOnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusModemOnSlot.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusModemOnSlot.setDescription('It identifies the particular port within a slot. A value of 0 is returned if entry is invalid.')
callStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusIfIndex.setDescription('The interface index, ranging from 1 to the number of interfaces specified in the MIB-II variable ifNumber. The interface identified by a particular value of this index is the same interface as identified by the same value if ifIndex. A value of 0 is returned if entry is invalid.')
callSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callSessionIndex.setDescription("The index of the associated session entry. Value ranges from 1 to 'ssnStatusMaximumSessions'. A value of 0 is returned if entry is invalid.")
callStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("callOutgoing", 1), ("callIncoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusType.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusType.setDescription('A value of 0 is returned if entry is invalid.')
callStatusXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusXmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusXmitRate.setDescription('The transmit rate for ISDN calls or the baud rate for modem calls. A value of 0 is returned if entry is invalid.')
callStatusPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("callPortUnknown", 1), ("callPortAsync", 2), ("callPortSync", 3), ("callPortISDNSync", 4), ("callPortISDNAsyncV120", 5), ("callPortISDNAsyncV110", 6), ("callPortVirtual", 7), ("callPortISDNAsyncV32", 8), ("callPortISDNAsyncVDSP", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusPortType.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusPortType.setDescription('The port type associated with the call.')
callStatusCalledParyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusCalledParyID.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusCalledParyID.setDescription('The called party Number. In case of incoming calls this is set to the DNIS, in the case of outgoing calls this is set to the number dialed.')
callStatusCallingPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusCallingPartyID.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusCallingPartyID.setDescription('The calling party Number. In the case of incoming calls this variable is set to the CLID ( calling Line Identification ) received. This variable is set to the empty string for outgoing calls.')
callStatusMultiLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusMultiLinkID.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusMultiLinkID.setDescription('This is applicable only when the call is part of an MPP bundle, for other cases it is 0.')
callStatusHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callStatusHighWaterMark.setStatus('mandatory')
if mibBuilder.loadTexts: callStatusHighWaterMark.setDescription('The highest number of channels ever used on the wide area network since power up. Nailed channels, if any, are also included in this count. Its value can be set to zero with a SET command.')
callCurrentAnalogOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentAnalogOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: callCurrentAnalogOutgoing.setDescription('The number of current analog outgoing calls is returned.')
callCurrentAnalogIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentAnalogIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: callCurrentAnalogIncoming.setDescription('The number of current analog incoming calls is returned.')
callCurrentDigitalOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentDigitalOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: callCurrentDigitalOutgoing.setDescription('The number of current digital outgoing calls is returned.')
callCurrentDigitalIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentDigitalIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: callCurrentDigitalIncoming.setDescription('The number of current digital incoming calls is returned.')
callCurrentFROutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentFROutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: callCurrentFROutgoing.setDescription('The number of current frame relay outgoing calls is returned.')
callCurrentFRIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentFRIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: callCurrentFRIncoming.setDescription('The number of current frame relay incoming calls is returned.')
callTotalAnalogOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalAnalogOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: callTotalAnalogOutgoing.setDescription('The total number of analog outgoing calls since system bootup or last clear of the variable is returned.')
callTotalAnalogIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalAnalogIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: callTotalAnalogIncoming.setDescription('The total number of analog incoming calls since system bootup or last clear of the variable is returned.')
callTotalDigitalOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalDigitalOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: callTotalDigitalOutgoing.setDescription('The total number of digital outgoing calls since system bootup or last clear of the variable is returned.')
callTotalDigitalIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalDigitalIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: callTotalDigitalIncoming.setDescription('The total number of digital incoming calls since system bootup or last clear of the variable is returned.')
callTotalFROutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalFROutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: callTotalFROutgoing.setDescription('The total number of frame relay outgoing calls since system bootup or last clear of the variable is returned.')
callTotalFRIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalFRIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: callTotalFRIncoming.setDescription('The total number of frame relay incoming calls since system bootup or last clear of the variable is returned.')
callActiveTable = MibTable((1, 3, 6, 1, 4, 1, 529, 11, 16), )
if mibBuilder.loadTexts: callActiveTable.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveTable.setDescription('A list of active call status entries.')
callActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 11, 16, 1), ).setIndexNames((0, "ASCEND-CALL-MIB", "callActiveCallReferenceNum"))
if mibBuilder.loadTexts: callActiveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveEntry.setDescription("An entry containing object variables to describe an active call's status.")
callActiveCallReferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCallReferenceNum.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveCallReferenceNum.setDescription('The unique number identifying the session for which this call is associated.')
callActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveIndex.setDescription("The index number for this call status entry. Its value ranges from 1 to 'callStatusMaximumEntries'.")
callActiveValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveValidFlag.setDescription('valid(2) for all active calls.')
callActiveStartingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveStartingTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveStartingTimeStamp.setDescription('The starting time for this call in seconds since startup.')
callActiveDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveDataRate.setDescription('The receive rate for ISDN calls or the baud rate for modem calls.')
callActiveSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveSlotNumber.setDescription("Identifies the slot of the line being used. It's value ranges between 1 and the value 'slotNumber' in Ascend's slots group. This variable is equivalent to 'slotIndex' in the slot group.")
callActiveSlotLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSlotLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveSlotLineNumber.setDescription("Identifies the line for network slots. This variable is equivalent to 'slotItemIndex' in Ascend's slot group.")
callActiveSlotChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSlotChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveSlotChannelNumber.setDescription("Identifies the channel for the particular line identified by 'callActiveSlotLineNumber'.")
callActiveModemSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveModemSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveModemSlotNumber.setDescription("Identifies the slot on the device. It's value ranges between 1 and the value 'slotNumber' in Ascend's slot group. A value of 0 is returned if entry is invalid.")
callActiveModemOnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveModemOnSlot.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveModemOnSlot.setDescription('It identifies the particular port within a slot. A value of 0 is returned if entry is invalid.')
callActiveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveIfIndex.setDescription('The interface index, ranging from 1 to the number of interfaces specified in the MIB-II variable ifNumber. The interface identified by a particular value of this index is the same interface as identified by the same value if ifIndex.')
callActiveSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveSessionIndex.setDescription("The index of the associated session entry. Value ranges from 1 to 'ssnActiveMaximumSessions'.")
callActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("callOutgoing", 1), ("callIncoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveType.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveType.setDescription('Differenciates between outgoing and incoming calls.')
callActiveXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveXmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveXmitRate.setDescription('The transmit rate for ISDN calls or the baud rate for modem calls.')
callActivePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("callPortUnknown", 1), ("callPortAsync", 2), ("callPortSync", 3), ("callPortISDNSync", 4), ("callPortISDNAsyncV120", 5), ("callPortISDNAsyncV110", 6), ("callPortVirtual", 7), ("callPortISDNAsyncV32", 8), ("callPortISDNAsyncVDSP", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActivePortType.setStatus('mandatory')
if mibBuilder.loadTexts: callActivePortType.setDescription('The port type associated with the call.')
callActiveCalledParyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCalledParyID.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveCalledParyID.setDescription('The called party Number. In case of incoming calls this is set to the DNIS, in the case of outgoing calls this is set to the number dialed.')
callActiveCallingPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCallingPartyID.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveCallingPartyID.setDescription('The calling party Number. In the case of incoming calls this variable is set to the CLID ( calling Line Identification ) received. This variable is set to the empty string for outgoing calls.')
callActiveMultiLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveMultiLinkID.setStatus('mandatory')
if mibBuilder.loadTexts: callActiveMultiLinkID.setDescription('This is applicable only when the call is part of an MPP bundle, for other cases it is 0.')
mibBuilder.exportSymbols("ASCEND-CALL-MIB", callActiveSlotLineNumber=callActiveSlotLineNumber, callTotalDigitalIncoming=callTotalDigitalIncoming, callActiveModemSlotNumber=callActiveModemSlotNumber, callActiveCallingPartyID=callActiveCallingPartyID, callStatusSlotChannelNumber=callStatusSlotChannelNumber, callActiveIndex=callActiveIndex, callStatusIfIndex=callStatusIfIndex, callStatusStartingTimeStamp=callStatusStartingTimeStamp, callStatusCalledParyID=callStatusCalledParyID, callStatusType=callStatusType, callActiveValidFlag=callActiveValidFlag, callActiveStartingTimeStamp=callActiveStartingTimeStamp, callStatusModemSlotNumber=callStatusModemSlotNumber, callTotalAnalogIncoming=callTotalAnalogIncoming, callStatusDataRate=callStatusDataRate, callActiveModemOnSlot=callActiveModemOnSlot, callTotalFRIncoming=callTotalFRIncoming, callStatusPortType=callStatusPortType, callStatusMaximumEntries=callStatusMaximumEntries, callStatusMultiLinkID=callStatusMultiLinkID, callStatusIndex=callStatusIndex, callTotalDigitalOutgoing=callTotalDigitalOutgoing, callCurrentAnalogIncoming=callCurrentAnalogIncoming, callActiveSlotNumber=callActiveSlotNumber, callActiveCalledParyID=callActiveCalledParyID, callStatusCallingPartyID=callStatusCallingPartyID, callCurrentDigitalIncoming=callCurrentDigitalIncoming, callStatusModemOnSlot=callStatusModemOnSlot, callActiveXmitRate=callActiveXmitRate, callStatusTable=callStatusTable, callCurrentFRIncoming=callCurrentFRIncoming, callActiveIfIndex=callActiveIfIndex, callActivePortType=callActivePortType, callStatusSlotNumber=callStatusSlotNumber, callCurrentFROutgoing=callCurrentFROutgoing, callTotalAnalogOutgoing=callTotalAnalogOutgoing, callStatusHighWaterMark=callStatusHighWaterMark, callStatusEntry=callStatusEntry, callActiveDataRate=callActiveDataRate, callSessionIndex=callSessionIndex, callStatusValidFlag=callStatusValidFlag, callActiveTable=callActiveTable, callActiveMultiLinkID=callActiveMultiLinkID, callStatusCallReferenceNum=callStatusCallReferenceNum, callStatusSlotLineNumber=callStatusSlotLineNumber, callActiveCallReferenceNum=callActiveCallReferenceNum, callCurrentAnalogOutgoing=callCurrentAnalogOutgoing, callActiveType=callActiveType, callStatusXmitRate=callStatusXmitRate, callActiveEntry=callActiveEntry, callActiveSlotChannelNumber=callActiveSlotChannelNumber, callCurrentDigitalOutgoing=callCurrentDigitalOutgoing, callActiveSessionIndex=callActiveSessionIndex, callTotalFROutgoing=callTotalFROutgoing)
