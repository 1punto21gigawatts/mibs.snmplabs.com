#
# PySNMP MIB module ZYXEL-DHCP-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-DHCP-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:49:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, MibIdentifier, ObjectIdentity, Counter32, Bits, IpAddress, Gauge32, TimeTicks, ModuleIdentity, Integer32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "MibIdentifier", "ObjectIdentity", "Counter32", "Bits", "IpAddress", "Gauge32", "TimeTicks", "ModuleIdentity", "Integer32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelDhcpSnooping = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20))
if mibBuilder.loadTexts: zyxelDhcpSnooping.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelDhcpSnooping.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelDhcpSnooping.setContactInfo('')
if mibBuilder.loadTexts: zyxelDhcpSnooping.setDescription('The subtree for dhcp snooping')
zyxelDhcpSnoopingSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1))
zyxelDhcpSnoopingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2))
zyDhcpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingState.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingState.setDescription('Enable/Disable DHCP snooping on this switch.')
zyxelDhcpSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 2), )
if mibBuilder.loadTexts: zyxelDhcpSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelDhcpSnoopingVlanTable.setDescription('The table contains DHCP snooping VLAN configuration.')
zyxelDhcpSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 2, 1), ).setIndexNames((0, "ZYXEL-DHCP-SNOOPING-MIB", "zyDhcpSnoopingVlanVid"))
if mibBuilder.loadTexts: zyxelDhcpSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelDhcpSnoopingVlanEntry.setDescription('An entry contains DHCP snooping VLAN configuration.')
zyDhcpSnoopingVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyDhcpSnoopingVlanVid.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingVlanVid.setDescription('The VLAN ID of each VLAN.')
zyDhcpSnoopingVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingVlanState.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingVlanState.setDescription('Enable/Disable DHCP snooping on the VLAN.')
zyDhcpSnoopingVlanOption82Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingVlanOption82Profile.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingVlanOption82Profile.setDescription('The name of DHCP option 82 Profile.')
zyxelDhcpSnoopingPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 3), )
if mibBuilder.loadTexts: zyxelDhcpSnoopingPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelDhcpSnoopingPortTable.setDescription('The table contains DHCP snooping port configuration.')
zyxelDhcpSnoopingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelDhcpSnoopingPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelDhcpSnoopingPortEntry.setDescription('An entry contains DHCP snooping port configuration.')
zyDhcpSnoopingPortTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingPortTrustState.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingPortTrustState.setDescription('Enable/Disable this port to be a trusted port (enable) or an un-trusted port (disable).')
zyDhcpSnoopingPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingPortRate.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingPortRate.setDescription('Enter the maximum number for DHCP packets (1-2048) that the switch receives from each port each second. The switch discards any additional DHCP packets. Enter 0 to disable this limit, which is recommended for trusted ports.')
zyxelDhcpSnoopingDb = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 4))
zyDhcpSnoopingDbAbort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingDbAbort.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbAbort.setDescription('Enter how long (10-65535 seconds) the switch tries to complete a specific update in the DHCP snooping database before it gives up.')
zyDhcpSnoopingDbWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingDbWriteDelay.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbWriteDelay.setDescription('Enter how long (10-65535 seconds) the switch waits to update the DHCP snooping database the first time the current bindings change after an update. Once the next update is scheduled, additional changes in current bindings are automatically included in the next update.')
zyDhcpSnoopingDbUrl = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingDbUrl.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbUrl.setDescription('Enter the location of the DHCP snooping database. The location should be expressed like this: tftp://{domain name or IP address}/directory, if applicable/file name; for example, tftp://192.168.10.1/database.txt.')
zyDhcpSnoopingDbUrlRenew = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingDbUrlRenew.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbUrlRenew.setDescription('Enter the location of a DHCP snooping database. You can use this to load dynamic bindings from a different DHCP snooping database than the one specified in Agent URL.')
zyxelDhcpSnoopingDhcpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 5))
zyDhcpSnoopingDhcpVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingDhcpVlanVid.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDhcpVlanVid.setDescription('Enter a VLAN ID if you want the switch to forward DHCP packets to DHCP servers on a specific VLAN. Value 0 means to disable DHCP VLAN, if you do not want the switch to forward DHCP packets to a specific VLAN.')
zyDhcpSnoopingMaxNumberOfOption82VlanPort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingMaxNumberOfOption82VlanPort.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingMaxNumberOfOption82VlanPort.setDescription('The maximum number of DHCP snooping Option82 VLAN port entries that can be created.')
zyxelDhcpSnoopingOption82VlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 7), )
if mibBuilder.loadTexts: zyxelDhcpSnoopingOption82VlanPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelDhcpSnoopingOption82VlanPortTable.setDescription('The table contains DHCP snooping Option82 VLAN port configuration.')
zyxelDhcpSnoopingOption82VlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 7, 1), ).setIndexNames((0, "ZYXEL-DHCP-SNOOPING-MIB", "zyDhcpSnoopingVlanVid"), (0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelDhcpSnoopingOption82VlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelDhcpSnoopingOption82VlanPortEntry.setDescription('An entry contains DHCP snooping Option82 VLAN port configuration. ')
zyDhcpSnoopingOption82VlanPortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 1, 7, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyDhcpSnoopingOption82VlanPortProfile.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingOption82VlanPortProfile.setDescription('DHCP option 82 profile in specified VLAN and port.')
zyDhcpSnoopingDbStatisticsClear = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsClear.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsClear.setDescription('This entry can clear these counters of DHCP snooping statistics status.')
zyxelDhcpSnoopingDbStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2))
zyDhcpSnoopingDbStatisticsAgentRunning = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("read", 1), ("write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsAgentRunning.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsAgentRunning.setDescription('This entry displays the status of the current update or access of the DHCP snooping database. none: The switch is not accessing the DHCP snooping database. read: The switch is loading dynamic bindings from the DHCP snooping database. write: The switch is updating the DHCP snooping database.')
zyDhcpSnoopingDbStatisticsDelayExpiry = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsDelayExpiry.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsDelayExpiry.setDescription('This entry displays how much longer (in seconds) the switch tries to complete the current update before it gives up.')
zyDhcpSnoopingDbStatisticsAbortExpiry = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsAbortExpiry.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsAbortExpiry.setDescription('This entry displays when (in seconds) the switch is going to update the DHCP snooping database again.')
zyDhcpSnoopingDbStatisticsLastSuccessTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastSuccessTime.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastSuccessTime.setDescription('This entry displays the last time the switch updated the DHCP snooping database successfully.')
zyDhcpSnoopingDbStatisticsLastFailTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastFailTime.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastFailTime.setDescription('This entry displays the last time the switch updated the DHCP snooping database unsuccessfully.')
zyDhcpSnoopingDbStatisticsLastFailReasonType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastFailReasonType.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastFailReasonType.setDescription('This entry displays the reason the switch updated the DHCP snooping database unsuccessfully.')
zyDhcpSnoopingDbStatisticsTotalAttempt = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalAttempt.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalAttempt.setDescription('This entry displays the number of times the switch has tried to access the DHCP snooping database for any reason.')
zyDhcpSnoopingDbStatisticsStartupFail = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsStartupFail.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsStartupFail.setDescription('This entry displays the number of times the switch could not create or read the DHCP snooping database when the switch started up or a new URL is configured for the DHCP snooping database.')
zyDhcpSnoopingDbStatisticsSuccessTrans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsSuccessTrans.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsSuccessTrans.setDescription('This entry displays the number of times the switch read bindings from or updated the bindings in the DHCP snooping database successfully.')
zyDhcpSnoopingDbStatisticsFailTrans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFailTrans.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFailTrans.setDescription('This entry displays the number of times the switch was unable to read bindings from or update the bindings in the DHCP snooping database.')
zyDhcpSnoopingDbStatisticsSuccessRead = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsSuccessRead.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsSuccessRead.setDescription('This entry displays the number of times the switch read bindings from the DHCP snooping database successfully.')
zyDhcpSnoopingDbStatisticsFailRead = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFailRead.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFailRead.setDescription('This entry displays the number of times the switch was unable to read bindings from the DHCP snooping database.')
zyDhcpSnoopingDbStatisticsSuccessWrite = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsSuccessWrite.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsSuccessWrite.setDescription('This entry displays the number of times the switch updated the bindings in the DHCP snooping database successfully.')
zyDhcpSnoopingDbStatisticsFailWrite = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFailWrite.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFailWrite.setDescription('This entry displays the number of times the switch was unable to update the bindings in the DHCP snooping database.')
zyDhcpSnoopingDbStatisticsFirstSuccessAccess = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("read", 1), ("write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFirstSuccessAccess.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsFirstSuccessAccess.setDescription('This entry displays the first time the switch accessed the DHCP snooping database for any reason.')
zyDhcpSnoopingDbStatisticsLastIgnoreBindCollision = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreBindCollision.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreBindCollision.setDescription('This entry displays the number of bindings the switch ignored because the switch already had a binding with the same MAC address and VLAN ID.')
zyDhcpSnoopingDbStatisticsLastIgnoreExpireLease = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreExpireLease.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreExpireLease.setDescription('This entry displays the number of bindings the switch ignored because the lease time had already expired.')
zyDhcpSnoopingDbStatisticsLastIgnoreInvalidInterface = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreInvalidInterface.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreInvalidInterface.setDescription('This entry displays the number of bindings the switch ignored because the port number was a trusted interface or does not exist anymore.')
zyDhcpSnoopingDbStatisticsLastIgnoreUnsupportedVlan = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreUnsupportedVlan.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreUnsupportedVlan.setDescription('This entry displays the number of bindings the switch ignored because the VLAN ID does not exist anymore.')
zyDhcpSnoopingDbStatisticsLastIgnoreParse = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreParse.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsLastIgnoreParse.setDescription('This entry displays the number of bindings the switch ignored because the switch was unable to understand the binding in the DHCP binding database.')
zyDhcpSnoopingDbStatisticsTotalIgnoreBindCollision = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreBindCollision.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreBindCollision.setDescription('This entry displays the total number of bindings the switch has ignored because the switch already had a binding with the same MAC address and VLAN ID.')
zyDhcpSnoopingDbStatisticsTotalIgnoreExpireLease = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreExpireLease.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreExpireLease.setDescription('This entry displays the total number of bindings the switch has ignored because the lease time had already expired.')
zyDhcpSnoopingDbStatisticsTotalIgnoreInvalidInterface = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreInvalidInterface.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreInvalidInterface.setDescription('This entry displays the total number of bindings the switch has ignored because the port number was a trusted interface or does not exist anymore.')
zyDhcpSnoopingDbStatisticsTotalIgnoreUnsupportedVlan = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreUnsupportedVlan.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreUnsupportedVlan.setDescription('This entry displays the total number of bindings the switch has ignored because the VLAN id does not exist anymore.')
zyDhcpSnoopingDbStatisticsTotalIgnoreParse = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 20, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreParse.setStatus('current')
if mibBuilder.loadTexts: zyDhcpSnoopingDbStatisticsTotalIgnoreParse.setDescription('This entry displays the total number of bindings the switch has ignored because the switch was unable to understand the binding in the DHCP binding database.')
mibBuilder.exportSymbols("ZYXEL-DHCP-SNOOPING-MIB", zyxelDhcpSnoopingDb=zyxelDhcpSnoopingDb, zyDhcpSnoopingDbWriteDelay=zyDhcpSnoopingDbWriteDelay, zyDhcpSnoopingDbStatisticsTotalIgnoreParse=zyDhcpSnoopingDbStatisticsTotalIgnoreParse, zyDhcpSnoopingVlanState=zyDhcpSnoopingVlanState, zyxelDhcpSnoopingVlanEntry=zyxelDhcpSnoopingVlanEntry, zyDhcpSnoopingVlanOption82Profile=zyDhcpSnoopingVlanOption82Profile, zyDhcpSnoopingDbStatisticsSuccessWrite=zyDhcpSnoopingDbStatisticsSuccessWrite, zyDhcpSnoopingDbStatisticsFirstSuccessAccess=zyDhcpSnoopingDbStatisticsFirstSuccessAccess, zyDhcpSnoopingDbUrl=zyDhcpSnoopingDbUrl, zyxelDhcpSnoopingPortEntry=zyxelDhcpSnoopingPortEntry, zyxelDhcpSnoopingOption82VlanPortTable=zyxelDhcpSnoopingOption82VlanPortTable, zyDhcpSnoopingMaxNumberOfOption82VlanPort=zyDhcpSnoopingMaxNumberOfOption82VlanPort, zyDhcpSnoopingDbStatisticsTotalIgnoreExpireLease=zyDhcpSnoopingDbStatisticsTotalIgnoreExpireLease, zyDhcpSnoopingOption82VlanPortProfile=zyDhcpSnoopingOption82VlanPortProfile, zyDhcpSnoopingDbAbort=zyDhcpSnoopingDbAbort, zyDhcpSnoopingDbStatisticsTotalIgnoreBindCollision=zyDhcpSnoopingDbStatisticsTotalIgnoreBindCollision, zyxelDhcpSnooping=zyxelDhcpSnooping, zyDhcpSnoopingDbStatisticsTotalAttempt=zyDhcpSnoopingDbStatisticsTotalAttempt, zyDhcpSnoopingDbStatisticsSuccessRead=zyDhcpSnoopingDbStatisticsSuccessRead, zyDhcpSnoopingPortRate=zyDhcpSnoopingPortRate, zyDhcpSnoopingDbStatisticsLastFailReasonType=zyDhcpSnoopingDbStatisticsLastFailReasonType, PYSNMP_MODULE_ID=zyxelDhcpSnooping, zyDhcpSnoopingDbStatisticsLastIgnoreExpireLease=zyDhcpSnoopingDbStatisticsLastIgnoreExpireLease, zyxelDhcpSnoopingVlanTable=zyxelDhcpSnoopingVlanTable, zyxelDhcpSnoopingOption82VlanPortEntry=zyxelDhcpSnoopingOption82VlanPortEntry, zyDhcpSnoopingDbStatisticsTotalIgnoreInvalidInterface=zyDhcpSnoopingDbStatisticsTotalIgnoreInvalidInterface, zyDhcpSnoopingDbStatisticsLastIgnoreBindCollision=zyDhcpSnoopingDbStatisticsLastIgnoreBindCollision, zyDhcpSnoopingDbStatisticsLastSuccessTime=zyDhcpSnoopingDbStatisticsLastSuccessTime, zyDhcpSnoopingVlanVid=zyDhcpSnoopingVlanVid, zyDhcpSnoopingDbStatisticsAbortExpiry=zyDhcpSnoopingDbStatisticsAbortExpiry, zyxelDhcpSnoopingDhcpVlan=zyxelDhcpSnoopingDhcpVlan, zyxelDhcpSnoopingPortTable=zyxelDhcpSnoopingPortTable, zyDhcpSnoopingDbStatisticsFailTrans=zyDhcpSnoopingDbStatisticsFailTrans, zyDhcpSnoopingDbStatisticsFailWrite=zyDhcpSnoopingDbStatisticsFailWrite, zyDhcpSnoopingDbStatisticsLastIgnoreUnsupportedVlan=zyDhcpSnoopingDbStatisticsLastIgnoreUnsupportedVlan, zyxelDhcpSnoopingStatus=zyxelDhcpSnoopingStatus, zyDhcpSnoopingDbStatisticsAgentRunning=zyDhcpSnoopingDbStatisticsAgentRunning, zyDhcpSnoopingState=zyDhcpSnoopingState, zyDhcpSnoopingDbStatisticsFailRead=zyDhcpSnoopingDbStatisticsFailRead, zyDhcpSnoopingDbStatisticsLastFailTime=zyDhcpSnoopingDbStatisticsLastFailTime, zyDhcpSnoopingDbUrlRenew=zyDhcpSnoopingDbUrlRenew, zyDhcpSnoopingDbStatisticsTotalIgnoreUnsupportedVlan=zyDhcpSnoopingDbStatisticsTotalIgnoreUnsupportedVlan, zyDhcpSnoopingDbStatisticsLastIgnoreInvalidInterface=zyDhcpSnoopingDbStatisticsLastIgnoreInvalidInterface, zyDhcpSnoopingDbStatisticsStartupFail=zyDhcpSnoopingDbStatisticsStartupFail, zyDhcpSnoopingDbStatisticsSuccessTrans=zyDhcpSnoopingDbStatisticsSuccessTrans, zyDhcpSnoopingDhcpVlanVid=zyDhcpSnoopingDhcpVlanVid, zyDhcpSnoopingDbStatisticsDelayExpiry=zyDhcpSnoopingDbStatisticsDelayExpiry, zyDhcpSnoopingDbStatisticsLastIgnoreParse=zyDhcpSnoopingDbStatisticsLastIgnoreParse, zyxelDhcpSnoopingSetup=zyxelDhcpSnoopingSetup, zyxelDhcpSnoopingDbStatistics=zyxelDhcpSnoopingDbStatistics, zyDhcpSnoopingDbStatisticsClear=zyDhcpSnoopingDbStatisticsClear, zyDhcpSnoopingPortTrustState=zyDhcpSnoopingPortTrustState)
