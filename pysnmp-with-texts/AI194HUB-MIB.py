#
# PySNMP MIB module AI194HUB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AI194HUB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Counter32, Gauge32, ObjectIdentity, Counter64, enterprises, IpAddress, Bits, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Counter32", "Gauge32", "ObjectIdentity", "Counter64", "enterprises", "IpAddress", "Bits", "TimeTicks", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 1))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4))
aiISISGre = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 5))
aiManager = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 6))
aiSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 7))
aiSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 8))
aiGroup194 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194))
aiGroup194Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7))
aiGroup194Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 1))
aiGroup194Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 2))
aiGroup194Ver73 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 3))
aiGroup194Ver74 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 4))
aiHub = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 3))
if mibBuilder.loadTexts: aiHub.setLastUpdated('9505081700Z')
if mibBuilder.loadTexts: aiHub.setOrganization('Applied Innovation Incorporated')
if mibBuilder.loadTexts: aiHub.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, OH 43016-3271 Tel: 614/798-2000 Fax: 614/798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiHub.setDescription('The MIB Module for Ethernet hubs')
aiHubTwistedPairPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubTwistedPairPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubTwistedPairPortNumber.setDescription('The number of twisted-pair hub ports. By convention, these are the lower numbered hub ports.')
aiHubNonTwistedPairPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubNonTwistedPairPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubNonTwistedPairPortNumber.setDescription('The number of non-twisted-pair hub ports.')
aiHubPortTable = MibTable((1, 3, 6, 1, 4, 1, 539, 3, 3), )
if mibBuilder.loadTexts: aiHubPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortTable.setDescription('A list of hub Ethernet port entries.')
aiHubPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 3, 3, 1), ).setIndexNames((0, "AI194HUB-MIB", "aiHubPortIndex"))
if mibBuilder.loadTexts: aiHubPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortEntry.setDescription('Hub parameter values for an Ethernet port.')
aiHubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by portBasicID in hmBasicPortTable in the IEEE Hub MIB. Corresponds directly to the numbered, twisted-pair port numbers and indirectly to the unnumbered, non-twisted-pair ports (A, C) in the diagnostic display.')
aiHubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortName.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortName.setDescription('An administratively assigned name for a twisted-pair port, typically with some local significance. Corresponds directly to the WINSLC PORTNAME string.')
aiHubPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortAdminState.setDescription("Control over the port's ability to transmit and receive. ENABLED/DISABLED.")
aiHubPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notAutoPartitioned", 2), ("autoPartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortAutoPartitionState.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortAutoPartitionState.setDescription("The port's status with regard to automatic partitioning.")
aiHubPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortErrors.setDescription('The number of times that a frame was received in erorr.')
aiHubPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortCollisions.setDescription('Number of times that a frame collision came within the allowed collision window.')
aiHubPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortStatus.setDescription('Link status of the port')
aiHubPortLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortLinkErrors.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortLinkErrors.setDescription('Number of times that a link error was detected.')
aiHubPortShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortShortPackets.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortShortPackets.setDescription('Number of times that a short packet was detected.')
aiHubPortJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortJabbers.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortJabbers.setDescription('Number of times that a jabber packet ??? was detected.')
aiHubPortPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortPartition.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortPartition.setDescription('Number of times that this port was AutoPartitioned.')
aiHubPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortZero.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortZero.setDescription("Control to zero Counters kept for the port. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's Counters to be zeroed. Corresponds to the ZERO PORT command.")
aiHubPortZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortZeroTime.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortZeroTime.setDescription('The time the counters for this port was last zeroed.')
aiHubLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubLogMessage.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubLogMessage.setDescription("Any string 'set' into this variable will force a log message to be printed on the CLC log.")
aiHubPortAutoPartitionLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coll31", 1), ("coll63", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortAutoPartitionLimit.setStatus('mandatory')
if mibBuilder.loadTexts: aiHubPortAutoPartitionLimit.setDescription('The hub AutoPartition limit, 31 or 63 collisions.')
mibBuilder.exportSymbols("AI194HUB-MIB", aiGroup194=aiGroup194, aiGroup194Ver74=aiGroup194Ver74, PYSNMP_MODULE_ID=aiHub, aiSoftware=aiSoftware, aiHubPortAdminState=aiHubPortAdminState, aiHubPortJabbers=aiHubPortJabbers, aiHub=aiHub, aiGroup194Ver7=aiGroup194Ver7, aiSystemOID=aiSystemOID, aiProxy=aiProxy, aiHubPortIndex=aiHubPortIndex, aiHubTwistedPairPortNumber=aiHubTwistedPairPortNumber, aiHubPortTable=aiHubPortTable, aiHubPortStatus=aiHubPortStatus, aiHubPortAutoPartitionState=aiHubPortAutoPartitionState, aiHubNonTwistedPairPortNumber=aiHubNonTwistedPairPortNumber, aiHubPortLinkErrors=aiHubPortLinkErrors, aiHubPortZeroTime=aiHubPortZeroTime, aiHubPortErrors=aiHubPortErrors, aiISISGre=aiISISGre, aiHubPortShortPackets=aiHubPortShortPackets, aiManager=aiManager, aiHubPortAutoPartitionLimit=aiHubPortAutoPartitionLimit, aiHubPortEntry=aiHubPortEntry, aii=aii, aiHubPortPartition=aiHubPortPartition, aiGroup194Ver72=aiGroup194Ver72, aiHubPortCollisions=aiHubPortCollisions, aiHubPortName=aiHubPortName, aiGroup=aiGroup, aiHubPortZero=aiHubPortZero, aiSystem=aiSystem, aiGroup194Ver71=aiGroup194Ver71, aiHubLogMessage=aiHubLogMessage, aiGroup194Ver73=aiGroup194Ver73)
