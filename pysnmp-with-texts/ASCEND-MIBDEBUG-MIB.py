#
# PySNMP MIB module ASCEND-MIBDEBUG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBDEBUG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, TimeTicks, IpAddress, Integer32, Bits, MibIdentifier, Gauge32, NotificationType, Unsigned32, iso, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "TimeTicks", "IpAddress", "Integer32", "Bits", "MibIdentifier", "Gauge32", "NotificationType", "Unsigned32", "iso", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibdebugProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 72))
mibdebugProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 72, 1), )
if mibBuilder.loadTexts: mibdebugProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibdebugProfileTable.setDescription('A list of mibdebugProfile profile entries.')
mibdebugProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1), ).setIndexNames((0, "ASCEND-MIBDEBUG-MIB", "debugProfile-Shelf-o"), (0, "ASCEND-MIBDEBUG-MIB", "debugProfile-Slot-o"), (0, "ASCEND-MIBDEBUG-MIB", "debugProfile-Item-o"))
if mibBuilder.loadTexts: mibdebugProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibdebugProfileEntry.setDescription('A mibdebugProfile entry containing objects that maps to the parameters of mibdebugProfile profile.')
debugProfile_Shelf_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 1), Integer32()).setLabel("debugProfile-Shelf-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: debugProfile_Shelf_o.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_Shelf_o.setDescription('')
debugProfile_Slot_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 2), Integer32()).setLabel("debugProfile-Slot-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: debugProfile_Slot_o.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_Slot_o.setDescription('')
debugProfile_Item_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 3), Integer32()).setLabel("debugProfile-Item-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: debugProfile_Item_o.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_Item_o.setDescription('')
debugProfile_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("debugProfile-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_PhysicalAddress_Shelf.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_PhysicalAddress_Shelf.setDescription('The number of the shelf that the addressed physical device resides on.')
debugProfile_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("debugProfile-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_PhysicalAddress_Slot.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_PhysicalAddress_Slot.setDescription('The number of the slot that the addressed physical device resides on.')
debugProfile_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 6), Integer32()).setLabel("debugProfile-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_PhysicalAddress_ItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_PhysicalAddress_ItemNumber.setDescription('A number that specifies an addressable entity within the context of shelf and slot.')
debugProfile_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("debugProfile-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_Active.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_Active.setDescription('Setting this field to Yes enables this profile. Setting this field to No disables this entire profile.')
debugProfile_EnableCoreDump = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("debugProfile-EnableCoreDump").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_EnableCoreDump.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_EnableCoreDump.setDescription('Core dump on system failure can be enabled by setting this field to Yes. Core dumps are disabled if this field is No.')
debugProfile_CoreDumpServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 9), DisplayString()).setLabel("debugProfile-CoreDumpServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_CoreDumpServer.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_CoreDumpServer.setDescription('The name (or IP address) of the host setup to receive our core dumps.')
debugProfile_EnableGdb = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("debugProfile-EnableGdb").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_EnableGdb.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_EnableGdb.setDescription('GDB can be enabled by setting this field to Yes. GDB is disabled if this field is No.')
debugProfile_GdbHost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 11), DisplayString()).setLabel("debugProfile-GdbHost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_GdbHost.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_GdbHost.setDescription('The name (or IP address) of the host running GDB.')
debugProfile_CsTracking = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("debugProfile-CsTracking").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_CsTracking.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_CsTracking.setDescription('csTracking can be enabled by setting this field to Yes. csTracking is disabled if this field is No.')
debugProfile_GenericField = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 13), Integer32()).setLabel("debugProfile-GenericField").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_GenericField.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_GenericField.setDescription('This field can be used as a generic bitmask stored in nonvolatile memory and thus preserved over resets and powerdowns')
debugProfile_MinWarningCoreDump = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 14), Integer32()).setLabel("debugProfile-MinWarningCoreDump").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_MinWarningCoreDump.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_MinWarningCoreDump.setDescription('Minimum value for a range of warning numbers that will generate a core dump (a core dump is taken for warnings between the minimum and maximum warning numbers inclusive) if coredumps are enabled. The default value of 0 in the minimum and maximum fields mean that only warnings from 101 to 121 will cause a core dump.')
debugProfile_MaxWarningCoreDump = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 15), Integer32()).setLabel("debugProfile-MaxWarningCoreDump").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_MaxWarningCoreDump.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_MaxWarningCoreDump.setDescription('Maximum value for a range of warning numbers that will generate a core dump (a core dump is taken for warnings between the minimum and maximum warning numbers inclusive) if coredumps are enabled. The default value of 0 in the minimum and maximum fields mean that only warnings from 101 to 121 will cause a core dump.')
debugProfile_CoreDumpLocation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("networkOnly", 2), ("flashOnly", 3), ("firstFlashThenNetwork", 4)))).setLabel("debugProfile-CoreDumpLocation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_CoreDumpLocation.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_CoreDumpLocation.setDescription('Core dumps will go to the specified location if enabled.')
debugProfile_FlashCoreOverwrite = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("debugProfile-FlashCoreOverwrite").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_FlashCoreOverwrite.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_FlashCoreOverwrite.setDescription('A previous flash dump will be overwritten by a new dump if this field to Yes, but will be preserved if this field is No.')
debugProfile_CoreDumpRipUpdate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("updateHigherFreq", 1), ("updateHighFreq", 2), ("updateMedFreq", 3), ("updateLowFreq", 4), ("updateLowerFreq", 5), ("updateOff", 6)))).setLabel("debugProfile-CoreDumpRipUpdate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_CoreDumpRipUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_CoreDumpRipUpdate.setDescription('RIP updates will be sent accordingly based on the setting here during coredump.')
debugProfile_CoredumpSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 20), IpAddress()).setLabel("debugProfile-CoredumpSourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_CoredumpSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_CoredumpSourceAddress.setDescription('The coredump source ip address for the shelf card. It is usually set only if the system-ip-address and the coredump server ip address belong to different networks.')
debugProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 72, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("debugProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: debugProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBDEBUG-MIB", debugProfile_PhysicalAddress_Shelf=debugProfile_PhysicalAddress_Shelf, debugProfile_FlashCoreOverwrite=debugProfile_FlashCoreOverwrite, debugProfile_Active=debugProfile_Active, mibdebugProfileEntry=mibdebugProfileEntry, debugProfile_Action_o=debugProfile_Action_o, debugProfile_CoredumpSourceAddress=debugProfile_CoredumpSourceAddress, debugProfile_EnableGdb=debugProfile_EnableGdb, debugProfile_CoreDumpServer=debugProfile_CoreDumpServer, mibdebugProfile=mibdebugProfile, debugProfile_PhysicalAddress_ItemNumber=debugProfile_PhysicalAddress_ItemNumber, debugProfile_Slot_o=debugProfile_Slot_o, debugProfile_PhysicalAddress_Slot=debugProfile_PhysicalAddress_Slot, debugProfile_GenericField=debugProfile_GenericField, debugProfile_CsTracking=debugProfile_CsTracking, debugProfile_CoreDumpLocation=debugProfile_CoreDumpLocation, debugProfile_CoreDumpRipUpdate=debugProfile_CoreDumpRipUpdate, DisplayString=DisplayString, debugProfile_MaxWarningCoreDump=debugProfile_MaxWarningCoreDump, debugProfile_Item_o=debugProfile_Item_o, debugProfile_EnableCoreDump=debugProfile_EnableCoreDump, debugProfile_Shelf_o=debugProfile_Shelf_o, debugProfile_MinWarningCoreDump=debugProfile_MinWarningCoreDump, debugProfile_GdbHost=debugProfile_GdbHost, mibdebugProfileTable=mibdebugProfileTable)
