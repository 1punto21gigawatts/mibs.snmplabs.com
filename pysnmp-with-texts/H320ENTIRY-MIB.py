#
# PySNMP MIB module H320ENTIRY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H320ENTIRY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, Counter32, iso, IpAddress, Bits, Gauge32, NotificationType, ModuleIdentity, Integer32, ObjectIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, experimental = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Counter32", "iso", "IpAddress", "Bits", "Gauge32", "NotificationType", "ModuleIdentity", "Integer32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "experimental")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h320EntityMIB = ModuleIdentity((1, 3, 6, 1, 3, 221, 2))
h320EntityMIB.setRevisions(('1998-08-01 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h320EntityMIB.setRevisionsDescriptions((' The draft version of the H320 entity mib',))
if mibBuilder.loadTexts: h320EntityMIB.setLastUpdated('9808011400Z')
if mibBuilder.loadTexts: h320EntityMIB.setOrganization('VTEL Corp. ')
if mibBuilder.loadTexts: h320EntityMIB.setContactInfo('Joon Maeng VTEL Corp. Postal: 108 Wild Basin Rd. Austin, TX 78746 USA TEL: (512)437-4567 Email: Joon_Maeng@vtel.com')
if mibBuilder.loadTexts: h320EntityMIB.setDescription('This MIB module supports the common functions of the IUT H.320 terminal, MCU and H.320/H.323 gateway')
class LineRates(TextualConvention, Integer32):
    description = 'This object represents the line rate capabilities of the H.320 entity. This includes the various line rates that it supports. It is encoded as bits in an octet string as follows: Capability Bit# 64 Kbits/s 0 2x64 Kbits/s 1 3x64 Kbits/s 2 4x64 Kbis/s 3 5x64 Kbits/s 4 6x64 Kbit/s 5 384 Kbits/s 6 2x384 Kbits/s 7 3x384 Kbits/s 8 5x384 Kbits/s 9 1536 Kbits/s 10 1920 Kbits/s 11 128 Kbits/s 12 192 Kbits/s 13 256 Kbits/s 14 320 Kbits/s 15 512 Kbits/s 16 768 Kbits/s 17 1152 Kbits/s 18 1452 Kbits/s 19 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.'
    status = 'current'

class VideoFormats(TextualConvention, Integer32):
    description = 'This object represents the video capabilities of the H320 entity. This includes the various video algorithms that it supports. It is encoded as bits in an octet string, with the following definitions: Capability Bit # h261CIFVideo 0 h261QCIFVideo 1 h263SQCIFVideo 2 h263QCIFVideo 3 h263CIFVideo 4 h263CIF4Video 5 h263CIF16Video 6 h262SPMLSIFVideo 7 h262SPML2SIFVideo 8 h262SPML4SIFVideo 9 h262MPMLSIFVideo 10 h262MPML2SIFVideo 11 h262MPML4SIFVideo 12 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.'
    status = 'current'

class AudioTypes(TextualConvention, Integer32):
    description = 'This object represents the audio capabilities of the H320 entity. This includes the various audio algorithms That it supports. It is encoded as bits in an octet string, with the following definitions: Capability Bit # g711-ALaw64KAudio 0 g711-ALaw56KAudio 1 g711-ULaw64KAudio 2 g711-ULaw56KAudio 3 g722-64KAudio 4 g722-56KAudio 5 g722-48KAudio 6 g728Audio 7 g723.1-5.3KAudio 8 g723.1-6.4KAudio 9 g729Audio 10 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.'
    status = 'current'

capability = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 1))
callStatus = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 2))
h221Stats = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 3))
events = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 4))
capsH320Table = MibTable((1, 3, 6, 1, 3, 221, 2, 1, 1), )
if mibBuilder.loadTexts: capsH320Table.setStatus('current')
if mibBuilder.loadTexts: capsH320Table.setDescription('A list of capability entries. Objects are grouped as a table so that one can use this table in the H.320 terminal, the H.320 MCU, and the H.320/H.323 gateway. The total number of capability entries is equal to the number of H.320 entities in a system. For instance, there will be one row of capability in the table of the H.320 terminal. The number of rows will be equal to the number of H320 entities in the MCU and the H320/H323 gateway')
capsH320Entry = MibTableRow((1, 3, 6, 1, 3, 221, 2, 1, 1, 1), ).setIndexNames((0, "H320ENTIRY-MIB", "terminalIndex"))
if mibBuilder.loadTexts: capsH320Entry.setStatus('current')
if mibBuilder.loadTexts: capsH320Entry.setDescription('A capability row.')
terminalIndex = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: terminalIndex.setStatus('current')
if mibBuilder.loadTexts: terminalIndex.setDescription('A unique value for each video conference entity. The value ranges between 1 and the number of H.320 entities in a System. For instance, the table in the H.320 terminal has one row and the H.323/H320 gateway or the H.320 MCU may have multiple rows of the H.320 capability. ')
capsH320EntityLineRate = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 2), LineRates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntityLineRate.setStatus('current')
if mibBuilder.loadTexts: capsH320EntityLineRate.setDescription('This object represents the line rate capabilities of the H.320 entity. Supported line rates are indicated by an octet string marked with 1s.')
capsH320EntityVideoFormats = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 3), VideoFormats()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntityVideoFormats.setStatus('current')
if mibBuilder.loadTexts: capsH320EntityVideoFormats.setDescription('This object represents the video capabilities of the H.320 entity. This includes the various video algorithms that it supports.')
capsH320EntityMaxVideoRate = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntityMaxVideoRate.setStatus('current')
if mibBuilder.loadTexts: capsH320EntityMaxVideoRate.setDescription('The maximum bit rate that the video channel can do.')
capsH320EntityAudioTypes = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 5), AudioTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntityAudioTypes.setStatus('current')
if mibBuilder.loadTexts: capsH320EntityAudioTypes.setDescription('This object represents the audio capabilities of the H320 entity. This includes the various audio algorithms that it supports.')
capsH320EntityDataCaps = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntityDataCaps.setStatus('current')
if mibBuilder.loadTexts: capsH320EntityDataCaps.setDescription('This object represents the data capability of the entity. It is encoded as bits in an octet string, with the following definitions: Capability Bit # t.120 0 Others 1 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
capsH320EntityEncryp = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntityEncryp.setStatus('current')
if mibBuilder.loadTexts: capsH320EntityEncryp.setDescription('This object represents the encryption capability of the entity. Capability Bit # H.233/H.234 0 Others 1 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
capsH320EntryRDC = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsH320EntryRDC.setStatus('current')
if mibBuilder.loadTexts: capsH320EntryRDC.setDescription('This object represents the Remote Device Control capability of the entity. Capability Bit # H.281 0 -- Far-end Camera Control Others 1 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
callStatusTable = MibTable((1, 3, 6, 1, 3, 221, 2, 2, 1), )
if mibBuilder.loadTexts: callStatusTable.setStatus('current')
if mibBuilder.loadTexts: callStatusTable.setDescription('A list of call status entries. Objects are grouped as a table so that one can use this table in the H.320 terminal, the H.320 MCU, and the H.320/H.323 gateway. The total number of call status entries is equal to the number of H.320 entities in a system. For instance, there will be one row of call status in the table of the H.320 terminal. The number of rows will be equal to the number of H320 entities in the MCU and the H320/H323 gateway')
callStatusEntry = MibTableRow((1, 3, 6, 1, 3, 221, 2, 2, 1, 1), )
capsH320Entry.registerAugmentions(("H320ENTIRY-MIB", "callStatusEntry"))
callStatusEntry.setIndexNames(*capsH320Entry.getIndexNames())
if mibBuilder.loadTexts: callStatusEntry.setStatus('current')
if mibBuilder.loadTexts: callStatusEntry.setDescription('A call status row.')
h320CurrentCallStatus = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("connected", 3), ("disconnecting", 4), ("disconnected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CurrentCallStatus.setStatus('current')
if mibBuilder.loadTexts: h320CurrentCallStatus.setDescription('The current call status.')
h320CallSiteName = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallSiteName.setStatus('current')
if mibBuilder.loadTexts: h320CallSiteName.setDescription('The address to which this call is made. ')
h320CallLineRate = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 4), LineRates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallLineRate.setStatus('current')
if mibBuilder.loadTexts: h320CallLineRate.setDescription('This object represents the line rate being used in the current call in progress.')
h320CallVideoInFormat = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 5), VideoFormats()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallVideoInFormat.setStatus('current')
if mibBuilder.loadTexts: h320CallVideoInFormat.setDescription('This object represents the video decoding format being used in the current call in progress.')
h320CallVideoOutFormat = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 6), VideoFormats()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallVideoOutFormat.setStatus('current')
if mibBuilder.loadTexts: h320CallVideoOutFormat.setDescription('This object represents the video encoding format being used in the current call in progress.')
h320CallAudioInFormat = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 7), AudioTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallAudioInFormat.setStatus('current')
if mibBuilder.loadTexts: h320CallAudioInFormat.setDescription('This object represents the audio decoding format being used in the current call in progress.')
h320CallAudioOutFormat = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 8), AudioTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallAudioOutFormat.setStatus('current')
if mibBuilder.loadTexts: h320CallAudioOutFormat.setDescription('This object represents the audio encoding format being used in the current call in progress.')
h320CallData = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t120", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallData.setStatus('current')
if mibBuilder.loadTexts: h320CallData.setDescription('This object represents the type of data communication protocol used in the call. 1 indicates T.120 is used . 2 indicates other type of data is used.')
h320CallEncryp = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("h233", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallEncryp.setStatus('current')
if mibBuilder.loadTexts: h320CallEncryp.setDescription('This object indicates the type of encryption protocol used in the call. 1 indicates the encryption based on H.323. 2 indicates other type of encryption.')
h320CallRDC = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("h281FECC", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320CallRDC.setStatus('current')
if mibBuilder.loadTexts: h320CallRDC.setDescription('This object indicates the type of remote device control. 1 indicates the FECC is used. 2 indicates other type of device is used. ')
h221StatsTable = MibTable((1, 3, 6, 1, 3, 221, 2, 3, 1), )
if mibBuilder.loadTexts: h221StatsTable.setStatus('current')
if mibBuilder.loadTexts: h221StatsTable.setDescription('A list of statistics entries. Objects are grouped as a table so that one can use this table in the H.320 terminal, the H.320 MCU, and the H.320/H.323 gateway. The total number of statistics entries is equal to the number of H.320 entities in a system. For instance, there will be one row of statistics in the table of the H.320 terminal. The number of rows will be equal to the number of H320 entities in the MCU and the H320/H323 gateway')
h221StatsEntry = MibTableRow((1, 3, 6, 1, 3, 221, 2, 3, 1, 1), )
capsH320Entry.registerAugmentions(("H320ENTIRY-MIB", "h221StatsEntry"))
h221StatsEntry.setIndexNames(*capsH320Entry.getIndexNames())
if mibBuilder.loadTexts: h221StatsEntry.setStatus('current')
if mibBuilder.loadTexts: h221StatsEntry.setDescription('A h221 statistics row.')
h221InFrames = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221InFrames.setStatus('current')
if mibBuilder.loadTexts: h221InFrames.setDescription('The number of H.221 frames received')
h221OutFrames = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221OutFrames.setStatus('current')
if mibBuilder.loadTexts: h221OutFrames.setDescription('The number of H.221 frames sent')
h221InFrameErrs = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221InFrameErrs.setStatus('current')
if mibBuilder.loadTexts: h221InFrameErrs.setDescription('The number of error frames received')
h221FrameAlignmentErrs = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221FrameAlignmentErrs.setStatus('current')
if mibBuilder.loadTexts: h221FrameAlignmentErrs.setDescription('The number of frame alignment errors received')
h221MultiFrameAlignmentErrs = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221MultiFrameAlignmentErrs.setStatus('current')
if mibBuilder.loadTexts: h221MultiFrameAlignmentErrs.setDescription('The number of multiple frame alignment errors received')
h221ErrorPerformance = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221ErrorPerformance.setStatus('current')
if mibBuilder.loadTexts: h221ErrorPerformance.setDescription('The quality of the 64 Kbps connection can be monitored by counting the number of CRC blocks in error (E-bit = 1) within a period of one second (50 blocks). Percentage of CRC blocks in error Error rate 70% CRC blocks in error 10E-4 12% CRC blocks in error 10E-5 1.2% CRC blocks in error 10E-6 0.12% CRC blocks in error 10E-7 0.012% CRC blocks in error 10E-8')
h221BASErrs = MibTableColumn((1, 3, 6, 1, 3, 221, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h221BASErrs.setStatus('current')
if mibBuilder.loadTexts: h221BASErrs.setDescription('The number of H.221 BAS errors received')
h221TooManyErrors = NotificationType((1, 3, 6, 1, 3, 221, 2, 4, 1)).setObjects(("H320ENTIRY-MIB", "h221ErrorPerformance"))
if mibBuilder.loadTexts: h221TooManyErrors.setStatus('current')
if mibBuilder.loadTexts: h221TooManyErrors.setDescription('This message will be sent when there are excessive line errors.')
h320ConnectionEstablished = NotificationType((1, 3, 6, 1, 3, 221, 2, 4, 2)).setObjects(("H320ENTIRY-MIB", "h320CurrentCallStatus"))
if mibBuilder.loadTexts: h320ConnectionEstablished.setStatus('current')
if mibBuilder.loadTexts: h320ConnectionEstablished.setDescription('This message will be sent when a wide area network connection is established with another video conference site.')
h320ConnectionTerminated = NotificationType((1, 3, 6, 1, 3, 221, 2, 4, 3)).setObjects(("H320ENTIRY-MIB", "h320CurrentCallStatus"))
if mibBuilder.loadTexts: h320ConnectionTerminated.setStatus('current')
if mibBuilder.loadTexts: h320ConnectionTerminated.setDescription('This message will be generated when a wide area network connection to another video conference system drops. ')
h320EntityMIBConfs = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 4))
h320EntityMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 4, 1))
h320EntityMIBCompl = MibIdentifier((1, 3, 6, 1, 3, 221, 2, 4, 2))
h320CapsGroups = ObjectGroup((1, 3, 6, 1, 3, 221, 2, 4, 1, 1)).setObjects(("H320ENTIRY-MIB", "capsH320EntityLineRate"), ("H320ENTIRY-MIB", "capsH320EntityVideoFormats"), ("H320ENTIRY-MIB", "capsH320EntityMaxVideoRate"), ("H320ENTIRY-MIB", "capsH320EntityAudioTypes"), ("H320ENTIRY-MIB", "capsH320EntityDataCaps"), ("H320ENTIRY-MIB", "capsH320EntityEncryp"), ("H320ENTIRY-MIB", "capsH320EntryRDC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320CapsGroups = h320CapsGroups.setStatus('current')
if mibBuilder.loadTexts: h320CapsGroups.setDescription('A collection of objects providing capabilities of the entity')
h320CallStatusGroup = ObjectGroup((1, 3, 6, 1, 3, 221, 2, 4, 1, 2)).setObjects(("H320ENTIRY-MIB", "h320CurrentCallStatus"), ("H320ENTIRY-MIB", "h320CallSiteName"), ("H320ENTIRY-MIB", "h320CallLineRate"), ("H320ENTIRY-MIB", "h320CallVideoInFormat"), ("H320ENTIRY-MIB", "h320CallVideoOutFormat"), ("H320ENTIRY-MIB", "h320CallAudioInFormat"), ("H320ENTIRY-MIB", "h320CallAudioOutFormat"), ("H320ENTIRY-MIB", "h320CallData"), ("H320ENTIRY-MIB", "h320CallRDC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320CallStatusGroup = h320CallStatusGroup.setStatus('current')
if mibBuilder.loadTexts: h320CallStatusGroup.setDescription('A collection of objects providing the ability to invoke terminal functions')
h221StatsGroup = ObjectGroup((1, 3, 6, 1, 3, 221, 2, 4, 1, 3)).setObjects(("H320ENTIRY-MIB", "h221InFrames"), ("H320ENTIRY-MIB", "h221OutFrames"), ("H320ENTIRY-MIB", "h221InFrameErrs"), ("H320ENTIRY-MIB", "h221FrameAlignmentErrs"), ("H320ENTIRY-MIB", "h221MultiFrameAlignmentErrs"), ("H320ENTIRY-MIB", "h221ErrorPerformance"), ("H320ENTIRY-MIB", "h221BASErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h221StatsGroup = h221StatsGroup.setStatus('current')
if mibBuilder.loadTexts: h221StatsGroup.setDescription('A collection of objects providing the ability to invoke terminal functions')
h320EventsGroup = NotificationGroup((1, 3, 6, 1, 3, 221, 2, 4, 1, 4)).setObjects(("H320ENTIRY-MIB", "h221TooManyErrors"), ("H320ENTIRY-MIB", "h320ConnectionEstablished"), ("H320ENTIRY-MIB", "h320ConnectionTerminated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320EventsGroup = h320EventsGroup.setStatus('current')
if mibBuilder.loadTexts: h320EventsGroup.setDescription('An object providing the ability to invoke a notification function')
h221StatsCompliance = ModuleCompliance((1, 3, 6, 1, 3, 221, 2, 4, 2, 1)).setObjects(("H320ENTIRY-MIB", "h320CapsGroups"), ("H320ENTIRY-MIB", "h320CallStatusGroup"), ("H320ENTIRY-MIB", "h221StatsGroup"), ("H320ENTIRY-MIB", "h320EventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h221StatsCompliance = h221StatsCompliance.setStatus('current')
if mibBuilder.loadTexts: h221StatsCompliance.setDescription('The set of objects required for compliance')
mibBuilder.exportSymbols("H320ENTIRY-MIB", h320EventsGroup=h320EventsGroup, PYSNMP_MODULE_ID=h320EntityMIB, capsH320EntityAudioTypes=capsH320EntityAudioTypes, h221Stats=h221Stats, terminalIndex=terminalIndex, h221BASErrs=h221BASErrs, h221StatsGroup=h221StatsGroup, capsH320Table=capsH320Table, h221TooManyErrors=h221TooManyErrors, h320ConnectionTerminated=h320ConnectionTerminated, callStatus=callStatus, LineRates=LineRates, h320CallVideoOutFormat=h320CallVideoOutFormat, h320CallSiteName=h320CallSiteName, h320EntityMIBCompl=h320EntityMIBCompl, h320EntityMIBGroups=h320EntityMIBGroups, h320CallStatusGroup=h320CallStatusGroup, h221InFrameErrs=h221InFrameErrs, VideoFormats=VideoFormats, capsH320EntryRDC=capsH320EntryRDC, h320CurrentCallStatus=h320CurrentCallStatus, h221StatsTable=h221StatsTable, h320CallEncryp=h320CallEncryp, h221MultiFrameAlignmentErrs=h221MultiFrameAlignmentErrs, h320EntityMIB=h320EntityMIB, capsH320EntityVideoFormats=capsH320EntityVideoFormats, callStatusTable=callStatusTable, h320CapsGroups=h320CapsGroups, h320CallRDC=h320CallRDC, capsH320Entry=capsH320Entry, h320CallVideoInFormat=h320CallVideoInFormat, h320ConnectionEstablished=h320ConnectionEstablished, h320EntityMIBConfs=h320EntityMIBConfs, h221StatsCompliance=h221StatsCompliance, h320CallData=h320CallData, capsH320EntityMaxVideoRate=capsH320EntityMaxVideoRate, capsH320EntityDataCaps=capsH320EntityDataCaps, callStatusEntry=callStatusEntry, events=events, h320CallAudioOutFormat=h320CallAudioOutFormat, h320CallAudioInFormat=h320CallAudioInFormat, h320CallLineRate=h320CallLineRate, h221InFrames=h221InFrames, h221OutFrames=h221OutFrames, h221StatsEntry=h221StatsEntry, AudioTypes=AudioTypes, h221FrameAlignmentErrs=h221FrameAlignmentErrs, capability=capability, capsH320EntityLineRate=capsH320EntityLineRate, h221ErrorPerformance=h221ErrorPerformance, capsH320EntityEncryp=capsH320EntityEncryp)
