#
# PySNMP MIB module DELLBASEBOARDMIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DELLBASEBOARDMIF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:38:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
DmiDate, = mibBuilder.importSymbols("DMTF-DMI-MIB", "DmiDate")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, iso, enterprises, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, NotificationType, NotificationType, IpAddress, Unsigned32, Bits, Integer32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "iso", "enterprises", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "NotificationType", "NotificationType", "IpAddress", "Unsigned32", "Bits", "Integer32", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiComponentIndex(Integer32):
    pass

dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890))
baseboard = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 1))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines attributes common to all components.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('The name of the manufacturer that produced this component.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('The name of the component.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('The version for the component.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('The serial number for this instance of this component.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time & date of the lastest installation of this component.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerifyIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tTemperature = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2), )
if mibBuilder.loadTexts: tTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: tTemperature.setDescription('This group defines the attributes for the temperature probes this system.')
eTemperature = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a2Tempparentindex"), (0, "DELLBASEBOARDMIF-MIB", "a2Tempindex"))
if mibBuilder.loadTexts: eTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: eTemperature.setDescription('')
a2Tempparentindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Tempparentindex.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempparentindex.setDescription('An index into the chassis table.')
a2Tempindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Tempindex.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempindex.setDescription('index into this temperature probe table.')
a2Temptype = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vTmc", 3), ("vTvm", 4), ("vEsm", 5), ("vBackplane", 6), ("vHarrierBackplane", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Temptype.setStatus('mandatory')
if mibBuilder.loadTexts: a2Temptype.setDescription('Defines the type of the temperature probe.')
a2Tempstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Tempstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempstatus.setDescription('Current status of the temperature probe.')
a2Tempreading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Tempreading.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempreading.setDescription('The reading of the temperature probe in tenths of degrees.')
a2Tempminwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2Tempminwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempminwarn.setDescription('The lower warning threshold for the temperature probe set by the user.')
a2Tempmaxwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2Tempmaxwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempmaxwarn.setDescription('The upper warning threshold for the temperature probe set by the user.')
a2Tempminfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Tempminfail.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempminfail.setDescription('The lower failure threshold for the temperature probe.')
a2Tempmaxfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Tempmaxfail.setStatus('mandatory')
if mibBuilder.loadTexts: a2Tempmaxfail.setDescription('The upper failure threshold for the temperature probe.')
a2Templocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 2, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Templocation.setStatus('mandatory')
if mibBuilder.loadTexts: a2Templocation.setDescription('The location of this temperature probe within the system.')
tFan = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3), )
if mibBuilder.loadTexts: tFan.setStatus('mandatory')
if mibBuilder.loadTexts: tFan.setDescription('This group defines the attributes for the fan probes this system.')
eFan = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a3Fansparentindex"), (0, "DELLBASEBOARDMIF-MIB", "a3Fansindex"))
if mibBuilder.loadTexts: eFan.setStatus('mandatory')
if mibBuilder.loadTexts: eFan.setDescription('')
a3Fansparentindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fansparentindex.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansparentindex.setDescription('An index into the chassis table.')
a3Fansindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fansindex.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansindex.setDescription('index into this fan probe table.')
a3Fanstype = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vBoolean", 3), ("vRpm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fanstype.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fanstype.setDescription('Defines the type of the fan probe.')
a3Fansstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fansstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansstatus.setDescription('Current status of the fan probe.')
a3Fansreading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fansreading.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansreading.setDescription('The reading of the fan probe in RPM (or boolean).')
a3Fanswarningmin = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Fanswarningmin.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fanswarningmin.setDescription('The lower warning threshold for the fan probe set by the user.')
a3Fansmaxwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Fansmaxwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansmaxwarn.setDescription('The upper warning threshold for the fan probe set by the user.')
a3Fansminfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fansminfail.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansminfail.setDescription('The lower failure threshold for the fan probe.')
a3Fansmaxfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fansmaxfail.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fansmaxfail.setDescription('The upper failure threshold for the fan probe.')
a3Fanslocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 3, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Fanslocation.setStatus('mandatory')
if mibBuilder.loadTexts: a3Fanslocation.setDescription('The location of this fan probe within the system.')
tVoltage = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4), )
if mibBuilder.loadTexts: tVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: tVoltage.setDescription('The Voltage group contains the data on all the voltage probes in a system.')
eVoltage = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a4Voltparentindex"), (0, "DELLBASEBOARDMIF-MIB", "a4Voltindex"))
if mibBuilder.loadTexts: eVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: eVoltage.setDescription('')
a4Voltparentindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltparentindex.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltparentindex.setDescription('The chassis this voltage probe is connected to.')
a4Voltindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltindex.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltindex.setDescription('the index of the voltage probe within the chassis.')
a4Volttype = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v-3-3v", 3), ("v3-3v", 4), ("v-5v", 5), ("v5v", 6), ("v-12v", 7), ("v12v", 8), ("v15v", 9), ("vCore", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Volttype.setStatus('mandatory')
if mibBuilder.loadTexts: a4Volttype.setDescription('The type of voltage probe')
a4Voltstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltstatus.setDescription('Status of the voltage probe.')
a4Voltreading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltreading.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltreading.setDescription('Current reading of the voltage probe, in millivolts.')
a4Voltminwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a4Voltminwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltminwarn.setDescription('lower warning threshold value for this voltage probe.')
a4Voltmaxwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a4Voltmaxwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltmaxwarn.setDescription('upper warning threshold value for this voltage probe.')
a4Voltminfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltminfail.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltminfail.setDescription('lower failure threshold value for this voltage probe.')
a4Voltmaxfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltmaxfail.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltmaxfail.setDescription('upper failure threshold value for this voltage probe.')
a4Voltlocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 4, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Voltlocation.setStatus('mandatory')
if mibBuilder.loadTexts: a4Voltlocation.setDescription('the location of this voltage probe within the system.')
tCurrent = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5), )
if mibBuilder.loadTexts: tCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: tCurrent.setDescription('The Current group contains the data on all the Current probes in a system.')
eCurrent = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a5Ampparentindex"), (0, "DELLBASEBOARDMIF-MIB", "a5Ampindex"))
if mibBuilder.loadTexts: eCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: eCurrent.setDescription('')
a5Ampparentindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Ampparentindex.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampparentindex.setDescription('The chassis this current probe is connected to.')
a5Ampindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Ampindex.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampindex.setDescription('the index of the current probe within the chassis.')
a5Amptype = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v-3-3v", 3), ("v3-3v", 4), ("v-5v", 5), ("v5v", 6), ("v-12v", 7), ("v12v", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Amptype.setStatus('mandatory')
if mibBuilder.loadTexts: a5Amptype.setDescription('The type of current probe')
a5Ampstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Ampstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampstatus.setDescription('Status of the current probe.')
a5Ampreading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Ampreading.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampreading.setDescription('Current reading of the current probe in milliamps.')
a5Ampminwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a5Ampminwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampminwarn.setDescription('lower warning threshold value for this current probe.')
a5Ampmaxwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a5Ampmaxwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampmaxwarn.setDescription('upper warning threshold value for this current probe.')
a5Ampminfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Ampminfail.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampminfail.setDescription('lower failure threshold value for this current probe.')
a5Ampmaxfail = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Ampmaxfail.setStatus('mandatory')
if mibBuilder.loadTexts: a5Ampmaxfail.setDescription('upper failure threshold value for this current probe.')
a5Amplocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 5, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Amplocation.setStatus('mandatory')
if mibBuilder.loadTexts: a5Amplocation.setDescription('the location of this current probe within the system.')
tPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6), )
if mibBuilder.loadTexts: tPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: tPowerSupply.setDescription('The Power Supply group contains the data on all the redundant power supplies in a system.')
ePowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a6Pwrsupplyparentindex"), (0, "DELLBASEBOARDMIF-MIB", "a6Pwrsupplyindex"))
if mibBuilder.loadTexts: ePowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ePowerSupply.setDescription('')
a6Pwrsupplyparentindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Pwrsupplyparentindex.setStatus('mandatory')
if mibBuilder.loadTexts: a6Pwrsupplyparentindex.setDescription('The chassis this power supply is connected to.')
a6Pwrsupplyindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Pwrsupplyindex.setStatus('mandatory')
if mibBuilder.loadTexts: a6Pwrsupplyindex.setDescription('The index within the chassis of this power supply.')
a6Pwrsupplytype = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPspb", 3), ("v230w", 4), ("v500w", 5), ("v700w", 6), ("v320w", 7), ("v275w", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Pwrsupplytype.setStatus('mandatory')
if mibBuilder.loadTexts: a6Pwrsupplytype.setDescription('The type of power supply.')
a6Pwrsupplystatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Pwrsupplystatus.setStatus('mandatory')
if mibBuilder.loadTexts: a6Pwrsupplystatus.setDescription('The current status of this power supply.')
a6Pwrsupplyonline = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a6Pwrsupplyonline.setStatus('mandatory')
if mibBuilder.loadTexts: a6Pwrsupplyonline.setDescription('The current online status of this power supply. Setting this value to FALSE will turn off the power supply, setting it to TRUE will turn on the power supply. ')
a6Pwrlocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 6, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Pwrlocation.setStatus('mandatory')
if mibBuilder.loadTexts: a6Pwrlocation.setDescription('the location of this power supply within the system.')
tGlobalPowerUnit = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7), )
if mibBuilder.loadTexts: tGlobalPowerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tGlobalPowerUnit.setDescription('This group contains the global status for the power supplies in the system.')
eGlobalPowerUnit = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a7Pwrunitindex"))
if mibBuilder.loadTexts: eGlobalPowerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalPowerUnit.setDescription('')
a7Pwrunitstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotApplicableUnitNotRedundant", 3), ("vOffline", 4), ("vFullyRedundant", 5), ("vDegradedRedundancy", 6), ("vRedundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunitstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitstatus.setDescription('The current redundancy status of the power unit.')
a7Pwrunitgloballevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunitgloballevel.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitgloballevel.setDescription('The current global power level usage, in percent.')
a7Pwrunitglobalmaxwarn = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a7Pwrunitglobalmaxwarn.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitglobalmaxwarn.setDescription('Warning threshold, in percent')
a7Pwrunitlevel33v = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunitlevel33v.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitlevel33v.setDescription('The current 3.3v power level usage, in percent.')
a7Pwrunitmaxwarn33v = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a7Pwrunitmaxwarn33v.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitmaxwarn33v.setDescription('Warning threshold, in percent')
a7Pwrunitlevel5v = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunitlevel5v.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitlevel5v.setDescription('The current 5v power level usage, in percent.')
a7Pwrunitmaxwarn5v = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a7Pwrunitmaxwarn5v.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitmaxwarn5v.setDescription('Warning threshold, in percent')
a7Pwrunitlevel12v = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunitlevel12v.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitlevel12v.setDescription('The current 12v power level usage, in percent.')
a7Pwrunitmaxwarn12v = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 9), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a7Pwrunitmaxwarn12v.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitmaxwarn12v.setDescription('Warning threshold, in percent')
a7Pwrunituid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunituid.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunituid.setDescription('The unique ID for this power supply unit.')
a7Pwrunitindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 7, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Pwrunitindex.setStatus('mandatory')
if mibBuilder.loadTexts: a7Pwrunitindex.setDescription('The index into the power supply unit table.')
tChassisExtension = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8), )
if mibBuilder.loadTexts: tChassisExtension.setStatus('mandatory')
if mibBuilder.loadTexts: tChassisExtension.setDescription('Global status of devices in chassis.')
eChassisExtension = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a8Chassindex"))
if mibBuilder.loadTexts: eChassisExtension.setStatus('mandatory')
if mibBuilder.loadTexts: eChassisExtension.setDescription('')
a8Chassindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassindex.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassindex.setDescription('Physical container index')
a8Chassglobstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassglobstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassglobstatus.setDescription('Global status of all devices in chassis.')
a8Chasstempstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chasstempstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chasstempstatus.setDescription('Global status of temperature probes.')
a8Chasstempprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 4), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chasstempprobes.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chasstempprobes.setDescription('This contains the statuses of all temp probes in the system, one probe per octet. The value of each octet is the value of the status field.')
a8Chassfansstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassfansstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassfansstatus.setDescription('Global status of fan sensors.')
a8Chassfansprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 6), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassfansprobes.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassfansprobes.setDescription('This contains the statuses of all fan probes in the system, one probe per octet. The value of each octet is the value of the status field.')
a8Chassvoltstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassvoltstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassvoltstatus.setDescription('Global status of voltage probes.')
a8Chassvoltprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 8), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassvoltprobes.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassvoltprobes.setDescription('This contains the statuses of all volt probes in the system, one probe per octet. The value of each octet is the value of the status field.')
a8Chassampstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassampstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassampstatus.setDescription('Global status of current probes.')
a8Chassampprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 10), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassampprobes.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassampprobes.setDescription('This contains the statuses of all amp probes in the system, one probe per octet. The value of each octet is the value of the status field.')
a8Chasspsstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chasspsstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chasspsstatus.setDescription('Global status of power supplies.')
a8Chasspwrsupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chasspwrsupplies.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chasspwrsupplies.setDescription('This contains the statuses of all power supplies in the system, one probe per octet. The value of each octet is the value of the status field.')
a8Chassservicetag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 13), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassservicetag.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassservicetag.setDescription('This is the service tag for this chassis, if it exists.')
a8Chassuid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 14), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassuid.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassuid.setDescription('This is the Unique ID for this chassis, if it exists.')
a8Chassbackplaneuid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 15), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Chassbackplaneuid.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassbackplaneuid.setDescription('This is the Unique ID for the backplane in this chassis.')
a8Chassidentify = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 16), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a8Chassidentify.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassidentify.setDescription('This attribute is used to visually identify a disk pod or other chassis by causing its lights to flash. Setting this value to non-zero turns on the identify, setting it back to zero turns it off.')
a8Chassfancontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 17), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a8Chassfancontrol.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassfancontrol.setDescription('This attribute is used to control the fan speed in a chassis. If the value is 0, then fan control is notavailable. A value of 2 indicates maximum cooling. Avalue of 1 indicates minimize fan noise (and speed).')
a8Chassledconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 18), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a8Chassledconfig.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassledconfig.setDescription('This attribute is used to configure which fault conditionscause the fault LED to flash. If the value is 0, thenthis feature is not available. A value of 16 indicatesflash for failure conditions. A value of 8 indicatesfla h for failure and warning conditions.')
a8Chassfaultclear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 8, 1, 19), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a8Chassfaultclear.setStatus('mandatory')
if mibBuilder.loadTexts: a8Chassfaultclear.setDescription('This attribute is used to clear the hard drive fault LED.If this value is non-zero, then it is available. Writingany value to this attribut will clear the hard drive faultLED.')
tPhysicalContainerGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9), )
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setDescription('The chassis class contains information about chassis.')
ePhysicalContainerGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a9ContainerIndex"))
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setDescription('')
a9ContainerOrChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDesktop", 3), ("vLowProfileDesktop", 4), ("vPizzaBox", 5), ("vMiniTower", 6), ("vTower", 7), ("vPortable", 8), ("vLaptop", 9), ("vNotebook", 10), ("vHandheld", 11), ("vDockingStation", 12), ("vAllInOne", 13), ("vSubNotebook", 14), ("vSpace-saving", 15), ("vLunchBox", 16), ("vMainSystemChassis", 17), ("vExpansionChassis", 18), ("vSubchassis", 19), ("vBusExpansionChassis", 20), ("vPeripheralChassis", 21), ("vRaidChassis", 22), ("vRackMountChassis", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ContainerOrChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerOrChassisType.setDescription('The type of container or chassis.')
a9ContainerAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a9ContainerAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerAssetTag.setDescription('The Container asset tag string. This asset tag string is writeable by the system administrator.')
a9ChassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ChassisLockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a9ChassisLockPresent.setDescription('If true, a chassis lock is present on the container.')
a9ContainerChassisBootupState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ContainerChassisBootupState.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerChassisBootupState.setDescription('The current state of this system when it booted.')
a9PowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9PowerState.setStatus('mandatory')
if mibBuilder.loadTexts: a9PowerState.setDescription('The current state of the power supply for this system.')
a9ThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ThermalState.setStatus('mandatory')
if mibBuilder.loadTexts: a9ThermalState.setDescription('The current thermal state of this container.')
a9FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9FruGroupIndex.setDescription('If this is a field Replacable Unit or if it is part of another FRU, this provides an index into the FRU table; value=-1 indicates that the group is not a FRU')
a9OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9OperationalGroupIndex.setDescription('The index into the Operational State table for this device, if applicable.')
a9ContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ContainerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerIndex.setDescription('A unique index for the Physical Container in the Physical Container Global Table.')
a9ContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 10), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a9ContainerName.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerName.setDescription('This is any 64-octet long name that the user or system administr tor wishes to give this specific physical container.')
a9ContainerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 11), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a9ContainerLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerLocation.setDescription('This attribute is a string name for the location of the containe . This attribute is read-write and may be set to any appropriate value by the user. The string may be 128 octets long.')
a9ContainerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoSecurityBreachDetected", 3), ("vContainerSecurityBreachAttempted", 4), ("vContainerSecurityBreached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ContainerSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a9ContainerSecurityStatus.setDescription('This attribute describes whether the Container is physically secure or not. This includes the state of the door lock, or the boot devices or the keyboard or mouse.')
tSystemControl = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10), )
if mibBuilder.loadTexts: tSystemControl.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemControl.setDescription('This group defines whether System Control functions are availabl and enabled.')
eSystemControl = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemControl.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemControl.setDescription('')
a10AutomaticCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10AutomaticCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a10AutomaticCapabilities.setDescription('Indicates which Automatic Capabilities are available for the current operating system. Encoding is as follows: 0x1 = Supports Reboot 0x2 = Supports Power Cycle 0x4 = Supports Notification If value is nonzero, Watchdog is supported.')
a10AutomaticSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a10AutomaticSettings.setStatus('mandatory')
if mibBuilder.loadTexts: a10AutomaticSettings.setDescription('Indicates which Automatic Settings are enabled by the user. Encoding is as follows: 0x1 = Enabled w/ Reboot 0x2 = Enabled w/ Power Cycle 0x4 = Enabled w/ Notification If value is nonzero, Watchdog is Enabled.')
a10NotificationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a10NotificationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a10NotificationNumber.setDescription('The number to dial when the watchdog timer elapses.')
a10ManualCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ManualCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a10ManualCapabilities.setDescription('Describes which system reset actions may occur.Bit encodings: 0x1 = Reboot 0x2 = Power Off 0x4 = Power Cycle 0x8 = Shutdown OS')
a10ManualControl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 10, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a10ManualControl.setStatus('mandatory')
if mibBuilder.loadTexts: a10ManualControl.setDescription('Setting this value will immediately perform one of the following functions. Encoding as follows: Bit encoding: 0x1 = Reboot 0x2 = Power Off 0x4 = Power Cycle 0x8 = Shutdown OS')
tEsmEventLog = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 11), )
if mibBuilder.loadTexts: tEsmEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: tEsmEventLog.setDescription('ESM Event Log.')
eEsmEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 11, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a11Esmlogindex"))
if mibBuilder.loadTexts: eEsmEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: eEsmEventLog.setDescription('')
a11Esmlogindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Esmlogindex.setStatus('mandatory')
if mibBuilder.loadTexts: a11Esmlogindex.setDescription('KEY: The index to this log.')
a11Esmlogdata = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 11, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a11Esmlogdata.setStatus('mandatory')
if mibBuilder.loadTexts: a11Esmlogdata.setDescription('The event log data for the ESM.')
tPostEventLog = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 12), )
if mibBuilder.loadTexts: tPostEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: tPostEventLog.setDescription('POST Codes Event Log.')
ePostEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 12, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a12Postlogindex"))
if mibBuilder.loadTexts: ePostEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: ePostEventLog.setDescription('')
a12Postlogindex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 12, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12Postlogindex.setStatus('mandatory')
if mibBuilder.loadTexts: a12Postlogindex.setDescription('KEY: The index into the post log.')
a12Postlogdata = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 12, 1, 2), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12Postlogdata.setStatus('mandatory')
if mibBuilder.loadTexts: a12Postlogdata.setDescription('The event log data.')
tUserSecurityGroup = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 13), )
if mibBuilder.loadTexts: tUserSecurityGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tUserSecurityGroup.setDescription('Security Group - contains user database: Used by both DSA and Baseboard components.')
eUserSecurityGroup = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 13, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a13UserIndex"))
if mibBuilder.loadTexts: eUserSecurityGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eUserSecurityGroup.setDescription('')
a13UserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13UserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a13UserIndex.setDescription('Keyed ID for this group.')
a13UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 13, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13UserName.setStatus('mandatory')
if mibBuilder.loadTexts: a13UserName.setDescription("User name. First user name is 'create', allows creation.")
a13UserControl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 13, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13UserControl.setStatus('mandatory')
if mibBuilder.loadTexts: a13UserControl.setDescription('User control. Used for creating/deleting/editing users.')
tDialupControl = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 14), )
if mibBuilder.loadTexts: tDialupControl.setStatus('mandatory')
if mibBuilder.loadTexts: tDialupControl.setDescription('Dialup Control - contains information used by the ESM dialup interface.')
eDialupControl = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 14, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eDialupControl.setStatus('mandatory')
if mibBuilder.loadTexts: eDialupControl.setDescription('')
a14DialupCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DialupCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a14DialupCapability.setDescription('Specifies if this system supports dialup.')
a14CallbackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 14, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a14CallbackNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a14CallbackNumber.setDescription('The number to callback when a dialup connection is established.')
tFirmwareInformation = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15), )
if mibBuilder.loadTexts: tFirmwareInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tFirmwareInformation.setDescription('Firmware Information - Contains version/status of firmware.')
eFirmwareInformation = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a15FirmwareChassisIndex"), (0, "DELLBASEBOARDMIF-MIB", "a15FirmwareIndex"))
if mibBuilder.loadTexts: eFirmwareInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eFirmwareInformation.setDescription('')
a15FirmwareChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15FirmwareChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a15FirmwareChassisIndex.setDescription('Firmware chassis index')
a15FirmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15FirmwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a15FirmwareIndex.setDescription('Index into the firmware information table')
a15FirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vBios", 3), ("vEsm", 4), ("vPspb", 5), ("vBackplane", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15FirmwareType.setStatus('mandatory')
if mibBuilder.loadTexts: a15FirmwareType.setDescription('The type of this firmware.')
a15FirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15FirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a15FirmwareVersion.setDescription('Version level of this firmware')
a15FirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15FirmwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a15FirmwareStatus.setDescription('Current status of this firmware, if applicable')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group maps the DMI attributes to SNMP.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 99, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99DellBaseboardMib = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99DellBaseboardMib.setStatus('mandatory')
if mibBuilder.loadTexts: a99DellBaseboardMib.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB OID that corresponds to this MIF')
a99DisableTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99DisableTraps.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTraps.setDescription('Setting this value to 1 disables trap generation.')
tTemperatureProbeAlerts = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102), )
if mibBuilder.loadTexts: tTemperatureProbeAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tTemperatureProbeAlerts.setDescription('')
eTemperatureProbeAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a102AssociatedGroup"))
if mibBuilder.loadTexts: eTemperatureProbeAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: eTemperatureProbeAlerts.setDescription('')
a102EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vCoolingDeviceStatusChange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a102EventType.setDescription('The type of event that has occurred.')
a102EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a102EventSeverity.setDescription('The severity of this event.')
a102IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a102IsEventStateBased.setDescription('')
a102EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a102EventStateKey.setDescription('')
a102AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a102AssociatedGroup.setDescription('')
a102EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a102EventSystem.setDescription('')
a102EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a102EventSubsystem.setDescription('')
a102EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a102EventSolution.setDescription('')
a102InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a102InstanceDataPresent.setDescription('')
a102VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a102VendorSpecificMessage.setDescription('')
a102VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a102VendorSpecificData.setDescription('')
a102VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 102, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a102VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a102VendorTrapNumber.setDescription('')
tFanSensorAlerts = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103), )
if mibBuilder.loadTexts: tFanSensorAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tFanSensorAlerts.setDescription('')
eFanSensorAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a103AssociatedGroup"))
if mibBuilder.loadTexts: eFanSensorAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: eFanSensorAlerts.setDescription('')
a103EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vCoolingDeviceStatusChange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventType.setDescription('The type of event that has occurred.')
a103EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSeverity.setDescription('The severity of this event.')
a103IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a103IsEventStateBased.setDescription('')
a103EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventStateKey.setDescription('')
a103AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a103AssociatedGroup.setDescription('')
a103EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSystem.setDescription('')
a103EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSubsystem.setDescription('')
a103EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSolution.setDescription('')
a103InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a103InstanceDataPresent.setDescription('')
a103VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a103VendorSpecificMessage.setDescription('')
a103VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a103VendorSpecificData.setDescription('')
a103VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 103, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a103VendorTrapNumber.setDescription('')
tVoltageProbeAlerts = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104), )
if mibBuilder.loadTexts: tVoltageProbeAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tVoltageProbeAlerts.setDescription('')
eVoltageProbeAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a104AssociatedGroup"))
if mibBuilder.loadTexts: eVoltageProbeAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: eVoltageProbeAlerts.setDescription('')
a104EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vPowerSupplyStatusChange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventType.setDescription('The type of event that has occurred.')
a104EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSeverity.setDescription('The severity of this event.')
a104IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a104IsEventStateBased.setDescription('')
a104EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventStateKey.setDescription('')
a104AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a104AssociatedGroup.setDescription('')
a104EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSystem.setDescription('')
a104EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSubsystem.setDescription('')
a104EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSolution.setDescription('')
a104InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a104InstanceDataPresent.setDescription('')
a104VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a104VendorSpecificMessage.setDescription('')
a104VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a104VendorSpecificData.setDescription('')
a104VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 104, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a104VendorTrapNumber.setDescription('')
tCurrentProbeAlerts = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105), )
if mibBuilder.loadTexts: tCurrentProbeAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tCurrentProbeAlerts.setDescription('')
eCurrentProbeAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a105AssociatedGroup"))
if mibBuilder.loadTexts: eCurrentProbeAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: eCurrentProbeAlerts.setDescription('')
a105EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vPowerSupplyStatusChange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a105EventType.setDescription('The type of event that has occurred.')
a105EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a105EventSeverity.setDescription('The severity of this event.')
a105IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a105IsEventStateBased.setDescription('')
a105EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a105EventStateKey.setDescription('')
a105AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a105AssociatedGroup.setDescription('')
a105EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a105EventSystem.setDescription('')
a105EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a105EventSubsystem.setDescription('')
a105EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a105EventSolution.setDescription('')
a105InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a105InstanceDataPresent.setDescription('')
a105VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a105VendorSpecificMessage.setDescription('')
a105VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a105VendorSpecificData.setDescription('')
a105VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 105, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a105VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a105VendorTrapNumber.setDescription('')
tPowerUnitAlerts = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107), )
if mibBuilder.loadTexts: tPowerUnitAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tPowerUnitAlerts.setDescription('')
ePowerUnitAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a107AssociatedGroup"))
if mibBuilder.loadTexts: ePowerUnitAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: ePowerUnitAlerts.setDescription('')
a107EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vPowerSupplyRedundancyChange", 1), ("vPowerSupplyStatusChange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a107EventType.setDescription('The type of event that has occurred.')
a107EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a107EventSeverity.setDescription('The severity of this event.')
a107IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a107IsEventStateBased.setDescription('')
a107EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a107EventStateKey.setDescription('')
a107AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a107AssociatedGroup.setDescription('')
a107EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a107EventSystem.setDescription('')
a107EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a107EventSubsystem.setDescription('')
a107EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a107EventSolution.setDescription('')
a107InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a107InstanceDataPresent.setDescription('')
a107VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a107VendorSpecificMessage.setDescription('')
a107VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a107VendorSpecificData.setDescription('')
a107VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 107, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a107VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a107VendorTrapNumber.setDescription('')
tChassisEventGeneration = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108), )
if mibBuilder.loadTexts: tChassisEventGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: tChassisEventGeneration.setDescription('')
eChassisEventGeneration = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a108AssociatedGroup"))
if mibBuilder.loadTexts: eChassisEventGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: eChassisEventGeneration.setDescription('')
a108EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vMemoryEccError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventType.setDescription('The type of event that has occurred.')
a108EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSeverity.setDescription('The severity of this event.')
a108IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a108IsEventStateBased.setDescription('')
a108EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventStateKey.setDescription('')
a108AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a108AssociatedGroup.setDescription('')
a108EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSystem.setDescription('')
a108EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSubsystem.setDescription('')
a108EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a108EventSolution.setDescription('')
a108InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a108InstanceDataPresent.setDescription('')
a108VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a108VendorSpecificMessage.setDescription('')
a108VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a108VendorSpecificData.setDescription('')
a108VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 108, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a108VendorTrapNumber.setDescription('')
tContainerEventGeneration = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109), )
if mibBuilder.loadTexts: tContainerEventGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: tContainerEventGeneration.setDescription('')
eContainerEventGeneration = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a109AssociatedGroup"))
if mibBuilder.loadTexts: eContainerEventGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: eContainerEventGeneration.setDescription('')
a109EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vSecuritySettingsChange", 1), ("vPowerSupplyStatusChange", 2), ("vCoolingDeviceStatusChange", 3), ("vPhysicalDeviceStatusChange", 4), ("vLogicalDeviceStatusChange", 5), ("vContainerSecurityBreach", 6), ("vConfigurationError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a109EventType.setDescription('The type of event that has occurred.')
a109EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a109EventSeverity.setDescription('The severity of this event.')
a109IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a109IsEventStateBased.setDescription('')
a109EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a109EventStateKey.setDescription('')
a109AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a109AssociatedGroup.setDescription('')
a109EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a109EventSystem.setDescription('')
a109EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a109EventSubsystem.setDescription('')
a109EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a109EventSolution.setDescription('')
a109InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a109InstanceDataPresent.setDescription('')
a109VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a109VendorSpecificMessage.setDescription('')
a109VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a109VendorSpecificData.setDescription('')
a109VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 109, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a109VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a109VendorTrapNumber.setDescription('')
tResetEventGeneration = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110), )
if mibBuilder.loadTexts: tResetEventGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: tResetEventGeneration.setDescription('')
eResetEventGeneration = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"), (0, "DELLBASEBOARDMIF-MIB", "a110AssociatedGroup"))
if mibBuilder.loadTexts: eResetEventGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: eResetEventGeneration.setDescription('')
a110EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vSystemUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a110EventType.setDescription('The type of event that has occurred.')
a110EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a110EventSeverity.setDescription('The severity of this event.')
a110IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a110IsEventStateBased.setDescription('')
a110EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a110EventStateKey.setDescription('')
a110AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a110AssociatedGroup.setDescription('')
a110EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a110EventSystem.setDescription('')
a110EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a110EventSubsystem.setDescription('')
a110EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a110EventSolution.setDescription('')
a110InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a110InstanceDataPresent.setDescription('')
a110VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a110VendorSpecificMessage.setDescription('')
a110VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a110VendorSpecificData.setDescription('')
a110VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 110, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a110VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a110VendorTrapNumber.setDescription('')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tTrapGroup.setDescription('This group defines attributes needed for Trap definition. This group does not exist in MIF file')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999, 1), ).setIndexNames((0, "DELLBASEBOARDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eTrapGroup.setDescription('')
a9999AlertSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999AlertSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a9999AlertSystem.setDescription('Name of the system generating the alert')
a9999AlertGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999AlertGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a9999AlertGroup.setDescription('DMI group generating the alert')
a9999AlertMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999AlertMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a9999AlertMessage.setDescription('Alert message')
a9999AlertSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999AlertSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a9999AlertSeverity.setDescription('DMI alert severity')
a9999AlertData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 1, 1, 9999, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999AlertData.setStatus('mandatory')
if mibBuilder.loadTexts: a9999AlertData.setDescription('Alert data')
dmtfAlert260 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,260)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert260.setDescription('Temperature sensor violation detected')
dmtfAlert261 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,261)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert261.setDescription('Temperature sensor reading returned to normal')
dmtfAlert300 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,300)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert300.setDescription('Temperature sensor warning detected')
dmtfAlert301 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,301)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert301.setDescription('Temperature sensor warning returned to normal')
dmtfAlert268 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,268)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert268.setDescription('Fan sensor detected a failure')
dmtfAlert269 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,269)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert269.setDescription('Fan sensor reading returned to normal')
dmtfAlert304 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,304)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert304.setDescription('Fan sensor warning detected')
dmtfAlert305 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,305)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert305.setDescription('Fan sensor warning returned to normal')
dmtfAlert272 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,272)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert272.setDescription('Voltage sensor detected a failure')
dmtfAlert273 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,273)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert273.setDescription('Voltage sensor reading returned to normal')
dmtfAlert302 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,302)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert302.setDescription('Voltage sensor warning detected')
dmtfAlert303 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,303)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert303.setDescription('Voltage sensor warning returned to normal')
dmtfAlert306 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,306)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert306.setDescription('Current sensor detected a failure')
dmtfAlert307 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,307)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert307.setDescription('Current sensor reading returned to normal')
dmtfAlert308 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,308)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert308.setDescription('Current sensor warning detected')
dmtfAlert309 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,309)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert309.setDescription('Current sensor warning returned to normal')
dmtfAlert310 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,310)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert310.setDescription('Power supply lost redundancy detected')
dmtfAlert311 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,311)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert311.setDescription('Power supply regained redundancy')
dmtfAlert312 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,312)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert312.setDescription('Power supply degraded redundancy detected')
dmtfAlert313 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,313)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert313.setDescription('Power supply degraded redundancy returned to normal')
dmtfAlert314 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,314)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert314.setDescription('Power supply failure detected')
dmtfAlert315 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,315)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert315.setDescription('Power supply failure returned to normal')
dmtfAlert320 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,320)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert320.setDescription('Chassis intrusion detected')
dmtfAlert321 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,321)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert321.setDescription('Chassis intrusion returned to normal')
dmtfAlert330 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,330)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert330.setDescription('System Up')
dmtfAlert323 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,323)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert323.setDescription('Memory ECC fault detected')
dmtfAlert325 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,325)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert325.setDescription('Lost connection to storage system')
dmtfAlert326 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,326)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert326.setDescription('Established connection to storage system')
dmtfAlert327 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 1) + (0,327)).setObjects(("DELLBASEBOARDMIF-MIB", "a9999AlertSystem"), ("DELLBASEBOARDMIF-MIB", "a9999AlertGroup"), ("DELLBASEBOARDMIF-MIB", "a9999AlertMessage"), ("DELLBASEBOARDMIF-MIB", "a9999AlertSeverity"), ("DELLBASEBOARDMIF-MIB", "a9999AlertData"))
if mibBuilder.loadTexts: dmtfAlert327.setDescription('Reestablished connection to storage system')
mibBuilder.exportSymbols("DELLBASEBOARDMIF-MIB", tComponentid=tComponentid, a8Chassfansstatus=a8Chassfansstatus, a110EventSubsystem=a110EventSubsystem, a4Voltreading=a4Voltreading, a7Pwrunitlevel5v=a7Pwrunitlevel5v, a102IsEventStateBased=a102IsEventStateBased, eFan=eFan, a103VendorSpecificData=a103VendorSpecificData, a8Chassservicetag=a8Chassservicetag, a109EventSubsystem=a109EventSubsystem, a2Tempstatus=a2Tempstatus, a7Pwrunitmaxwarn33v=a7Pwrunitmaxwarn33v, a102AssociatedGroup=a102AssociatedGroup, a109InstanceDataPresent=a109InstanceDataPresent, a110VendorSpecificMessage=a110VendorSpecificMessage, a103EventSystem=a103EventSystem, a107EventType=a107EventType, tContainerEventGeneration=tContainerEventGeneration, a9999AlertMessage=a9999AlertMessage, dmtfAlert325=dmtfAlert325, dmtfAlert273=dmtfAlert273, eVoltage=eVoltage, a108EventStateKey=a108EventStateKey, a110EventSeverity=a110EventSeverity, a3Fanswarningmin=a3Fanswarningmin, tPowerSupply=tPowerSupply, a103EventStateKey=a103EventStateKey, eTrapGroup=eTrapGroup, dmtfAlert326=dmtfAlert326, eCurrentProbeAlerts=eCurrentProbeAlerts, a108VendorSpecificData=a108VendorSpecificData, a7Pwrunitmaxwarn5v=a7Pwrunitmaxwarn5v, a5Ampminfail=a5Ampminfail, a8Chassindex=a8Chassindex, a8Chassuid=a8Chassuid, a6Pwrsupplytype=a6Pwrsupplytype, a104EventStateKey=a104EventStateKey, a9ContainerAssetTag=a9ContainerAssetTag, a108IsEventStateBased=a108IsEventStateBased, a110VendorSpecificData=a110VendorSpecificData, dmtfAlert268=dmtfAlert268, a5Ampparentindex=a5Ampparentindex, a109VendorSpecificMessage=a109VendorSpecificMessage, a10ManualCapabilities=a10ManualCapabilities, a10AutomaticSettings=a10AutomaticSettings, dmtfAlert321=dmtfAlert321, eFirmwareInformation=eFirmwareInformation, eEsmEventLog=eEsmEventLog, tCurrent=tCurrent, a104VendorSpecificMessage=a104VendorSpecificMessage, a102VendorSpecificMessage=a102VendorSpecificMessage, a3Fansminfail=a3Fansminfail, a108EventSolution=a108EventSolution, a104EventSeverity=a104EventSeverity, tPowerUnitAlerts=tPowerUnitAlerts, DmiInteger=DmiInteger, DmiComponentIndex=DmiComponentIndex, a108VendorTrapNumber=a108VendorTrapNumber, dmtfAlert312=dmtfAlert312, a2Templocation=a2Templocation, eGlobalPowerUnit=eGlobalPowerUnit, a3Fansstatus=a3Fansstatus, a15FirmwareType=a15FirmwareType, a8Chasstempprobes=a8Chasstempprobes, a109VendorSpecificData=a109VendorSpecificData, dmtfAlert300=dmtfAlert300, tGlobalPowerUnit=tGlobalPowerUnit, a109EventStateKey=a109EventStateKey, a109EventType=a109EventType, a102VendorSpecificData=a102VendorSpecificData, a5Ampindex=a5Ampindex, tChassisEventGeneration=tChassisEventGeneration, a109AssociatedGroup=a109AssociatedGroup, a103AssociatedGroup=a103AssociatedGroup, a104VendorSpecificData=a104VendorSpecificData, tFirmwareInformation=tFirmwareInformation, a107AssociatedGroup=a107AssociatedGroup, a7Pwrunitmaxwarn12v=a7Pwrunitmaxwarn12v, a1SerialNumber=a1SerialNumber, a11Esmlogdata=a11Esmlogdata, a9ContainerSecurityStatus=a9ContainerSecurityStatus, a2Tempreading=a2Tempreading, tMiftomib=tMiftomib, a103IsEventStateBased=a103IsEventStateBased, a2Tempparentindex=a2Tempparentindex, a3Fansmaxwarn=a3Fansmaxwarn, a5Ampmaxfail=a5Ampmaxfail, a4Voltstatus=a4Voltstatus, a104VendorTrapNumber=a104VendorTrapNumber, a109EventSolution=a109EventSolution, a9999AlertSeverity=a9999AlertSeverity, a1Product=a1Product, dmtfAlert309=dmtfAlert309, a105EventSeverity=a105EventSeverity, a103VendorTrapNumber=a103VendorTrapNumber, a109EventSystem=a109EventSystem, tVoltage=tVoltage, a3Fanstype=a3Fanstype, a2Tempminwarn=a2Tempminwarn, a8Chassidentify=a8Chassidentify, tFanSensorAlerts=tFanSensorAlerts, eFanSensorAlerts=eFanSensorAlerts, a8Chassvoltstatus=a8Chassvoltstatus, a1Installation=a1Installation, a102EventStateKey=a102EventStateKey, a107EventStateKey=a107EventStateKey, a107VendorSpecificData=a107VendorSpecificData, dmtfAlert269=dmtfAlert269, tChassisExtension=tChassisExtension, a5Ampstatus=a5Ampstatus, a105VendorSpecificMessage=a105VendorSpecificMessage, a108AssociatedGroup=a108AssociatedGroup, a8Chassglobstatus=a8Chassglobstatus, a102InstanceDataPresent=a102InstanceDataPresent, tDialupControl=tDialupControl, a11Esmlogindex=a11Esmlogindex, a102EventSystem=a102EventSystem, a102VendorTrapNumber=a102VendorTrapNumber, a105IsEventStateBased=a105IsEventStateBased, a107EventSubsystem=a107EventSubsystem, a9999AlertData=a9999AlertData, a1Manufacturer=a1Manufacturer, dmtfAlert314=dmtfAlert314, tResetEventGeneration=tResetEventGeneration, a14DialupCapability=a14DialupCapability, a104EventSystem=a104EventSystem, a8Chassampprobes=a8Chassampprobes, ePowerUnitAlerts=ePowerUnitAlerts, a6Pwrlocation=a6Pwrlocation, a8Chasspwrsupplies=a8Chasspwrsupplies, tUserSecurityGroup=tUserSecurityGroup, a9999AlertSystem=a9999AlertSystem, a8Chassfaultclear=a8Chassfaultclear, a102EventSubsystem=a102EventSubsystem, a13UserName=a13UserName, a103EventSeverity=a103EventSeverity, a105EventSubsystem=a105EventSubsystem, a103EventType=a103EventType, DmiDisplaystring=DmiDisplaystring, a104IsEventStateBased=a104IsEventStateBased, a103EventSubsystem=a103EventSubsystem, a7Pwrunitlevel12v=a7Pwrunitlevel12v, tEsmEventLog=tEsmEventLog, ePostEventLog=ePostEventLog, a105EventStateKey=a105EventStateKey, a107EventSystem=a107EventSystem, a3Fansindex=a3Fansindex, a9ChassisLockPresent=a9ChassisLockPresent, a108VendorSpecificMessage=a108VendorSpecificMessage, eContainerEventGeneration=eContainerEventGeneration, a1Verify=a1Verify, a102EventSolution=a102EventSolution, dmtfAlert320=dmtfAlert320, a104AssociatedGroup=a104AssociatedGroup, a13UserControl=a13UserControl, a107InstanceDataPresent=a107InstanceDataPresent, a8Chassledconfig=a8Chassledconfig, a9ContainerIndex=a9ContainerIndex, tPostEventLog=tPostEventLog, a9PowerState=a9PowerState, dmtfAlert261=dmtfAlert261, a105AssociatedGroup=a105AssociatedGroup, a12Postlogindex=a12Postlogindex, a110EventType=a110EventType, a4Voltmaxwarn=a4Voltmaxwarn, a110EventSystem=a110EventSystem, a108InstanceDataPresent=a108InstanceDataPresent, a2Tempminfail=a2Tempminfail, dmtfAlert307=dmtfAlert307, a5Ampmaxwarn=a5Ampmaxwarn, a15FirmwareStatus=a15FirmwareStatus, a103InstanceDataPresent=a103InstanceDataPresent, a7Pwrunitglobalmaxwarn=a7Pwrunitglobalmaxwarn, a110EventSolution=a110EventSolution, a99DellBaseboardMib=a99DellBaseboardMib, a107EventSeverity=a107EventSeverity, a102EventType=a102EventType, dmtfAlert306=dmtfAlert306, eUserSecurityGroup=eUserSecurityGroup, dmtfAlert311=dmtfAlert311, a5Ampminwarn=a5Ampminwarn, eDialupControl=eDialupControl, a7Pwrunitgloballevel=a7Pwrunitgloballevel, a4Voltparentindex=a4Voltparentindex, a105EventSystem=a105EventSystem, dmtfAlert301=dmtfAlert301, eCurrent=eCurrent, a10AutomaticCapabilities=a10AutomaticCapabilities, eVoltageProbeAlerts=eVoltageProbeAlerts, a99MibOid=a99MibOid, dmtfAlert308=dmtfAlert308, dmtfAlert305=dmtfAlert305, a6Pwrsupplystatus=a6Pwrsupplystatus, a14CallbackNumber=a14CallbackNumber, a15FirmwareChassisIndex=a15FirmwareChassisIndex, a104InstanceDataPresent=a104InstanceDataPresent, a104EventSubsystem=a104EventSubsystem, a109IsEventStateBased=a109IsEventStateBased, a8Chasstempstatus=a8Chasstempstatus, dmtfGroups=dmtfGroups, eChassisExtension=eChassisExtension, eComponentid=eComponentid, tFan=tFan, a4Voltminfail=a4Voltminfail, a4Voltmaxfail=a4Voltmaxfail, a9ContainerOrChassisType=a9ContainerOrChassisType, dmtfAlert260=dmtfAlert260, ePhysicalContainerGlobalTable=ePhysicalContainerGlobalTable, a9999AlertGroup=a9999AlertGroup, a1Version=a1Version, a9ContainerLocation=a9ContainerLocation, a105VendorTrapNumber=a105VendorTrapNumber, a107EventSolution=a107EventSolution, a108EventSeverity=a108EventSeverity, a2Temptype=a2Temptype, server=server, dmtfAlert315=dmtfAlert315, eSystemControl=eSystemControl, a103EventSolution=a103EventSolution, a5Amptype=a5Amptype, a109EventSeverity=a109EventSeverity, a10ManualControl=a10ManualControl, a103VendorSpecificMessage=a103VendorSpecificMessage, a108EventSubsystem=a108EventSubsystem, a108EventSystem=a108EventSystem, a15FirmwareVersion=a15FirmwareVersion, eMiftomib=eMiftomib, dmtfAlert330=dmtfAlert330, a110VendorTrapNumber=a110VendorTrapNumber, a8Chassampstatus=a8Chassampstatus, a9ContainerChassisBootupState=a9ContainerChassisBootupState, a107VendorTrapNumber=a107VendorTrapNumber, a6Pwrsupplyindex=a6Pwrsupplyindex, dmtfAlert323=dmtfAlert323, baseboard=baseboard, a9ContainerName=a9ContainerName, a105InstanceDataPresent=a105InstanceDataPresent, a7Pwrunituid=a7Pwrunituid, a13UserIndex=a13UserIndex, a108EventType=a108EventType, a102EventSeverity=a102EventSeverity, DmiOctetstring=DmiOctetstring, a3Fansmaxfail=a3Fansmaxfail, a107IsEventStateBased=a107IsEventStateBased, a2Tempmaxfail=a2Tempmaxfail, a105VendorSpecificData=a105VendorSpecificData, dell=dell, a4Voltindex=a4Voltindex, a7Pwrunitlevel33v=a7Pwrunitlevel33v, a2Tempindex=a2Tempindex, a110InstanceDataPresent=a110InstanceDataPresent, dmtfAlert272=dmtfAlert272, a5Amplocation=a5Amplocation, a8Chassfancontrol=a8Chassfancontrol)
mibBuilder.exportSymbols("DELLBASEBOARDMIF-MIB", a15FirmwareIndex=a15FirmwareIndex, a105EventSolution=a105EventSolution, a107VendorSpecificMessage=a107VendorSpecificMessage, a109VendorTrapNumber=a109VendorTrapNumber, a9OperationalGroupIndex=a9OperationalGroupIndex, a12Postlogdata=a12Postlogdata, a110EventStateKey=a110EventStateKey, tSystemControl=tSystemControl, tVoltageProbeAlerts=tVoltageProbeAlerts, a3Fansparentindex=a3Fansparentindex, a104EventType=a104EventType, a3Fansreading=a3Fansreading, a105EventType=a105EventType, tTemperature=tTemperature, a6Pwrsupplyonline=a6Pwrsupplyonline, a110IsEventStateBased=a110IsEventStateBased, a8Chasspsstatus=a8Chasspsstatus, dmtfAlert313=dmtfAlert313, eTemperature=eTemperature, a4Voltlocation=a4Voltlocation, a9ThermalState=a9ThermalState, tTrapGroup=tTrapGroup, dmtfAlert327=dmtfAlert327, a8Chassvoltprobes=a8Chassvoltprobes, a9FruGroupIndex=a9FruGroupIndex, a99DisableTraps=a99DisableTraps, dmtfAlert303=dmtfAlert303, a3Fanslocation=a3Fanslocation, a4Voltminwarn=a4Voltminwarn, a8Chassfansprobes=a8Chassfansprobes, tTemperatureProbeAlerts=tTemperatureProbeAlerts, a110AssociatedGroup=a110AssociatedGroup, a4Volttype=a4Volttype, a5Ampreading=a5Ampreading, a8Chassbackplaneuid=a8Chassbackplaneuid, dmtfAlert304=dmtfAlert304, a7Pwrunitstatus=a7Pwrunitstatus, a2Tempmaxwarn=a2Tempmaxwarn, tPhysicalContainerGlobalTable=tPhysicalContainerGlobalTable, a7Pwrunitindex=a7Pwrunitindex, a6Pwrsupplyparentindex=a6Pwrsupplyparentindex, a104EventSolution=a104EventSolution, tCurrentProbeAlerts=tCurrentProbeAlerts, eResetEventGeneration=eResetEventGeneration, a10NotificationNumber=a10NotificationNumber, dmtfAlert302=dmtfAlert302, eTemperatureProbeAlerts=eTemperatureProbeAlerts, ePowerSupply=ePowerSupply, eChassisEventGeneration=eChassisEventGeneration, dmtfAlert310=dmtfAlert310)
