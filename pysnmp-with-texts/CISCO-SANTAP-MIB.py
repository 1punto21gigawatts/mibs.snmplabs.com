#
# PySNMP MIB module CISCO-SANTAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SANTAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, FcNameId, FcNameIdOrZero = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex", "FcNameId", "FcNameIdOrZero")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, IpAddress, Counter32, MibIdentifier, iso, ModuleIdentity, Counter64, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "IpAddress", "Counter32", "MibIdentifier", "iso", "ModuleIdentity", "Counter64", "Integer32", "Unsigned32")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoSanTapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 463))
ciscoSanTapMIB.setRevisions(('2006-03-16 00:00', '2005-10-27 00:00', '2005-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSanTapMIB.setRevisionsDescriptions(("Added 'cstDVTLunSizeHandling' and 'cstDVTIOTimeout' columnar objects to 'cstDVTConfigTable'.", "Added the 'cstDVTConfigTable'. Added 'cstCVTName' columnar object to 'cstServiceConfigTable'.", 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoSanTapMIB.setLastUpdated('200603160000Z')
if mibBuilder.loadTexts: ciscoSanTapMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoSanTapMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoSanTapMIB.setDescription('MIB module to provide information about the SanTap service configuration. SanTap is a fibre channel switch based capability that provides a reliable copy of the data flowing between a set of one or more initiators and a set of one or more targets connected to the fabric. Adminstrator must configure the switch to create the Control Virtual Target (CVT) for the SanTap service. CVTs are used to implement the control path which process all SanTap service requests sent out by an appliance. Prior to requesting for SanTap service the appliance contacts the CVT, specifies the initiator and the target for replicating the data flowing between them. This MIB provides an interface to configure the CVT for the SanTap service on the fibre channel switch modules. Glossary of terms used in this MIB: Fabric - The set of physically connected fibre channel switches. VSAN - Virtual Storage Area Network, similar to a Virtual Fabric as defined by T11. WWN - World Wide Name. Mechanism of uniquely identifying the devices in Fibre Channel Networks. Appliance - It is a storage target, which can requests the SanTap service for the reliable copy of the data flowing between a specific host initiator and a target. CVT - Control Virtual Target. It is a logical target port that resides on the switch and is used for the purpose of communicating control traffic from an appliance. DVT - Data Virtual Target. It is a logical target port that resides on the switch and is used to intercept traffic meant for a real target.')
ciscoSanTapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 463, 1))
ciscoSanTapMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 463, 2))
ciscoSanTapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 463, 3))
cstModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 1), )
if mibBuilder.loadTexts: cstModuleTable.setStatus('current')
if mibBuilder.loadTexts: cstModuleTable.setDescription('A table listing the modules on which SanTap service can be configured and CVT can be created by the user. The entry in the cstServiceConfigTable can only be created on a module present in the cstModuleTable.')
cstModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 1, 1), ).setIndexNames((0, "CISCO-SANTAP-MIB", "cstModuleId"))
if mibBuilder.loadTexts: cstModuleEntry.setStatus('current')
if mibBuilder.loadTexts: cstModuleEntry.setDescription('An entry in this table. The cstModuleId denotes the entPhysicalIndex of the module on which SanTap service can be configured.')
cstModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 1, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstModuleId.setStatus('current')
if mibBuilder.loadTexts: cstModuleId.setDescription("This object specifies the physical index of the entity with entPhysicalClass as 'module' on which SanTap service can be configured by the user. This is same as the entPhysicalIndex of the module.")
cstServiceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 2), )
if mibBuilder.loadTexts: cstServiceConfigTable.setStatus('current')
if mibBuilder.loadTexts: cstServiceConfigTable.setDescription("This table provides information about the list of all CVTs created and configured in the system. A new entry creation in this table, creates a CVT on the module specified by the corresponding instance index 'cstModuleId' and configures the CVT on the VSAN specified by the corresponding instance index 'vsanIndex'. A row creation in this table, with an existing module physical index but different 'vsanIndex' configures the already created CVT on the module into VSAN specified by the 'vsanIndex'. Deleting an entry from this table, unconfigures the CVT created on the module specified by the corresponding instance index 'cstModuleId' on the VSAN represented by the corresponding instance index 'vsanIndex'. If there are no more entries in this table for this module then the CVT will be deleted from the corresponding module. For example, If there is no entry in this table for a module pysical Index '22', then a new entry creation with cstModuleId '22' vsanIndex 'n1' creates a CVT on this module and configures the CVT on VSAN 'n1'. And a new row is created in this table. Any subsequent entry creation with cstModuleId '22' vsanIndex 'n2' only configures the previously created CVT on vsan 'n2' and a new row is created in this table. Similarly for any delete request with cstModuleId '22' vsanIndex 'n1'/'n2' unconfigures the CVT created on the vsan 'n1'/'n2' and the corresponding row is deleted from the table. If there is only one entry with cstModuleId '22' and vsan 'n' exists in the table, then any delete request with cstModuleId '22' vsan 'n' unconfigures the CVT on vsan 'n' and deletes the CVT. The corresponding row is deleted from the table.")
cstServiceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 2, 1), ).setIndexNames((0, "CISCO-SANTAP-MIB", "cstModuleId"), (0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: cstServiceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cstServiceConfigEntry.setDescription("An entry containing information about a CVT configuration for the SanTap service. The 'cstModuleId' denotes the module on which the user wants the SanTap service to be configured and the CVT to be created. The index 'vsanIndex' represents the VSAN on which the CVT needs to be configured. It represents the VSAN on which CVT and the appliance communicate to establish the control path for processing the SanTap service requests.")
cstCVTNodeWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 2, 1, 1), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstCVTNodeWwn.setStatus('current')
if mibBuilder.loadTexts: cstCVTNodeWwn.setDescription("This object represents the Node World-Wide Name of the CVT created on the module represented by the corresponding entity index 'cstModuleId'.")
cstCVTPortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 2, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstCVTPortWwn.setStatus('current')
if mibBuilder.loadTexts: cstCVTPortWwn.setDescription("This object represents the Port World-Wide Name of the CVT created on the module represented by the corresponding entity index 'cstModuleId'.")
cstServiceConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstServiceConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cstServiceConfigRowStatus.setDescription('The status of this conceptual row.')
cstCVTName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstCVTName.setStatus('current')
if mibBuilder.loadTexts: cstCVTName.setDescription('The administratively assigned name for this CVT.')
cstDVTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3), )
if mibBuilder.loadTexts: cstDVTConfigTable.setStatus('current')
if mibBuilder.loadTexts: cstDVTConfigTable.setDescription("This table provides information about the list of all DVTs created and configured in the system. A new entry creation in this table, creates a DVT corresponding to the target PWWN 'cstDVTPortWwn' on the VSAN 'vsanIndex'. Deleting an entry from this table, unconfigures the DVT corresponding to 'cstDVTPortWwn' from the VSAN 'vsanIndex'. The index 'vsanIndex' represents the VSAN on which the DVT needs to be created. The index 'vsanIndex' should be a known VSAN on the switch. The index 'cstDVTPortWWN' represents the Port WWN of the real target for which a corresponding DVT is to be created. The DVT will have the same Port WWN as the target. The index 'cstDVTPortWWN' should correspond to a known target on the switch. By default no entries exist in the table.")
cstDVTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-SANTAP-MIB", "cstDVTPortWwn"))
if mibBuilder.loadTexts: cstDVTConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cstDVTConfigEntry.setDescription('An entry containing information about a DVT configuration for the SanTap service.')
cstDVTPortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 1), FcNameId())
if mibBuilder.loadTexts: cstDVTPortWwn.setStatus('current')
if mibBuilder.loadTexts: cstDVTPortWwn.setDescription('This object represents the port world-wide name of the created DVT. It will be the same as the port world-wide name of the real target for which data is to be replicated.')
cstDVTTargetVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 2), VsanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstDVTTargetVsan.setStatus('current')
if mibBuilder.loadTexts: cstDVTTargetVsan.setDescription("This object represents the VSAN of the real target for which this DVT is being created. This object MUST be set to a valid value concurrently with setting the corresponding instance of cstDVTRowStatus to 'active'. This object cannot be modified while the value of the corresponding instance of cstDVTRowStatus is 'active'.")
cstDVTPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstDVTPort.setStatus('current')
if mibBuilder.loadTexts: cstDVTPort.setDescription("This object represents the port on the module where the DVT will be created. This object MUST be set to a valid value concurrently with setting the corresponding instance of cstDVTRowStatus to 'active'. This object cannot be modified while the value of the corresponding instance of cstDVTRowStatus is 'active'.")
cstDVTName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstDVTName.setStatus('current')
if mibBuilder.loadTexts: cstDVTName.setDescription('The administratively assigned name for this DVT.')
cstDVTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstDVTRowStatus.setStatus('current')
if mibBuilder.loadTexts: cstDVTRowStatus.setDescription('The status of this conceptual row.')
cstDVTLunSizeHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstDVTLunSizeHandling.setStatus('current')
if mibBuilder.loadTexts: cstDVTLunSizeHandling.setDescription('This object indicates if the DVT should use the real target LUN size for the virtual LUN or the max LUN size supported which is 2TB. A value of false for this object indicates the real target LUN size should be used. This object should be set during the DVT creation time and cannot be modified later.')
cstDVTIOTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 463, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 200)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cstDVTIOTimeout.setStatus('current')
if mibBuilder.loadTexts: cstDVTIOTimeout.setDescription('This object represents the IO timeout value associated with the DVT. This object should be set during the DVT creation time and cannot be modified later.')
ciscoSanTapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 1))
ciscoSanTapMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 1, 1)).setObjects(("CISCO-SANTAP-MIB", "ciscoSanTapServiceConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapMIBCompliance = ciscoSanTapMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSanTapMIBCompliance.setDescription('Compliance statement for entites which implement the CISCO SANTAP MIB.')
ciscoSanTapMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 1, 2)).setObjects(("CISCO-SANTAP-MIB", "ciscoSanTapServiceConfigGroupRev1"), ("CISCO-SANTAP-MIB", "ciscoSanTapDVTConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapMIBComplianceRev1 = ciscoSanTapMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSanTapMIBComplianceRev1.setDescription('Compliance statement for entites which implement the CISCO SANTAP MIB.')
ciscoSanTapMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 1, 3)).setObjects(("CISCO-SANTAP-MIB", "ciscoSanTapServiceConfigGroupRev1"), ("CISCO-SANTAP-MIB", "ciscoSanTapDVTConfigGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapMIBComplianceRev2 = ciscoSanTapMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoSanTapMIBComplianceRev2.setDescription('Compliance statement for entites which implement the CISCO SANTAP MIB.')
ciscoSanTapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 2))
ciscoSanTapServiceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 2, 1)).setObjects(("CISCO-SANTAP-MIB", "cstModuleId"), ("CISCO-SANTAP-MIB", "cstCVTNodeWwn"), ("CISCO-SANTAP-MIB", "cstCVTPortWwn"), ("CISCO-SANTAP-MIB", "cstServiceConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapServiceConfigGroup = ciscoSanTapServiceConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSanTapServiceConfigGroup.setDescription('A Collection of objects to configure the CVT for SanTap service.')
ciscoSanTapServiceConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 2, 2)).setObjects(("CISCO-SANTAP-MIB", "cstModuleId"), ("CISCO-SANTAP-MIB", "cstCVTNodeWwn"), ("CISCO-SANTAP-MIB", "cstCVTPortWwn"), ("CISCO-SANTAP-MIB", "cstServiceConfigRowStatus"), ("CISCO-SANTAP-MIB", "cstCVTName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapServiceConfigGroupRev1 = ciscoSanTapServiceConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSanTapServiceConfigGroupRev1.setDescription('A Collection of objects to configure the CVT for SanTap service.')
ciscoSanTapDVTConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 2, 3)).setObjects(("CISCO-SANTAP-MIB", "cstDVTTargetVsan"), ("CISCO-SANTAP-MIB", "cstDVTPort"), ("CISCO-SANTAP-MIB", "cstDVTName"), ("CISCO-SANTAP-MIB", "cstDVTRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapDVTConfigGroup = ciscoSanTapDVTConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSanTapDVTConfigGroup.setDescription('A Collection of objects to configure the DVT for SanTap service.')
ciscoSanTapDVTConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 463, 2, 2, 4)).setObjects(("CISCO-SANTAP-MIB", "cstDVTTargetVsan"), ("CISCO-SANTAP-MIB", "cstDVTPort"), ("CISCO-SANTAP-MIB", "cstDVTName"), ("CISCO-SANTAP-MIB", "cstDVTRowStatus"), ("CISCO-SANTAP-MIB", "cstDVTLunSizeHandling"), ("CISCO-SANTAP-MIB", "cstDVTIOTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSanTapDVTConfigGroup1 = ciscoSanTapDVTConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoSanTapDVTConfigGroup1.setDescription('A Collection of objects to configure the DVT for SanTap service.')
mibBuilder.exportSymbols("CISCO-SANTAP-MIB", ciscoSanTapDVTConfigGroup=ciscoSanTapDVTConfigGroup, cstModuleEntry=cstModuleEntry, cstDVTPort=cstDVTPort, cstModuleTable=cstModuleTable, ciscoSanTapMIBComplianceRev2=ciscoSanTapMIBComplianceRev2, cstServiceConfigTable=cstServiceConfigTable, ciscoSanTapNotifications=ciscoSanTapNotifications, ciscoSanTapMIBObjects=ciscoSanTapMIBObjects, cstCVTNodeWwn=cstCVTNodeWwn, cstDVTName=cstDVTName, ciscoSanTapDVTConfigGroup1=ciscoSanTapDVTConfigGroup1, ciscoSanTapMIBComplianceRev1=ciscoSanTapMIBComplianceRev1, cstServiceConfigEntry=cstServiceConfigEntry, ciscoSanTapMIB=ciscoSanTapMIB, cstDVTTargetVsan=cstDVTTargetVsan, ciscoSanTapMIBCompliances=ciscoSanTapMIBCompliances, ciscoSanTapServiceConfigGroupRev1=ciscoSanTapServiceConfigGroupRev1, ciscoSanTapMIBGroups=ciscoSanTapMIBGroups, ciscoSanTapMIBConformance=ciscoSanTapMIBConformance, cstCVTPortWwn=cstCVTPortWwn, cstDVTConfigTable=cstDVTConfigTable, cstDVTRowStatus=cstDVTRowStatus, cstModuleId=cstModuleId, ciscoSanTapServiceConfigGroup=ciscoSanTapServiceConfigGroup, cstDVTConfigEntry=cstDVTConfigEntry, PYSNMP_MODULE_ID=ciscoSanTapMIB, cstDVTPortWwn=cstDVTPortWwn, cstDVTIOTimeout=cstDVTIOTimeout, ciscoSanTapMIBCompliance=ciscoSanTapMIBCompliance, cstCVTName=cstCVTName, cstServiceConfigRowStatus=cstServiceConfigRowStatus, cstDVTLunSizeHandling=cstDVTLunSizeHandling)
