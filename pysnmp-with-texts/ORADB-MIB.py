#
# PySNMP MIB module ORADB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ORADB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
rdbmsDbIndex, = mibBuilder.importSymbols("RDBMS-MIB", "rdbmsDbIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, MibIdentifier, experimental, iso, Integer32, TimeTicks, Gauge32, Bits, ModuleIdentity, ObjectIdentity, Counter32, Counter64, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "MibIdentifier", "experimental", "iso", "Integer32", "TimeTicks", "Gauge32", "Bits", "ModuleIdentity", "ObjectIdentity", "Counter32", "Counter64", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 11)

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

oracle = MibIdentifier((1, 3, 6, 1, 4, 1, 111))
oraDbMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 4))
oraDbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 4, 1))
oraDbSysTable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 1), )
if mibBuilder.loadTexts: oraDbSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTable.setDescription('Oracle-specific performance information global to a database.')
oraDbSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"))
if mibBuilder.loadTexts: oraDbSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysEntry.setDescription('Selected info from the v$sysstat table on instance performance. Variables are included here because they have been found particularly useful in tuning an Oracle instance. In many cases, the variable should only be considered in conjunction with other variables, often as a ratio. Frequently, hints on these are given in the descriptions, but Oracle tuning documentation should always be consulted, particularly the Oracle University course on tuning V7 applications.')
oraDbSysConsistentChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysConsistentChanges.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysConsistentChanges.setDescription("the 'consistent changes' parameter from v$sysstat")
oraDbSysConsistentGets = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysConsistentGets.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysConsistentGets.setDescription("the 'consistent gets' parameter from v$sysstat")
oraDbSysDbBlockChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysDbBlockChanges.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysDbBlockChanges.setDescription("the 'Db block changes' parameter from v$sysstat")
oraDbSysDbBlockGets = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysDbBlockGets.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysDbBlockGets.setDescription("the 'db block gets' parameter from v$sysstat")
oraDbSysFreeBufferInspected = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysFreeBufferInspected.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysFreeBufferInspected.setDescription("the 'free buffer inspected' parameter from v$sysstat")
oraDbSysFreeBufferRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysFreeBufferRequested.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysFreeBufferRequested.setDescription("the 'free buffer requested' parameter from v$sysstat")
oraDbSysParseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysParseCount.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysParseCount.setDescription("the 'parse count' parameter from v$sysstat")
oraDbSysPhysReads = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysPhysReads.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysPhysReads.setDescription("the 'physical reads' parameter from v$sysstat")
oraDbSysPhysWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysPhysWrites.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysPhysWrites.setDescription("the 'physical writes' parameter from v$sysstat")
oraDbSysRedoEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysRedoEntries.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysRedoEntries.setDescription("the 'redo entries' parameter from v$sysstat")
oraDbSysRedoLogSpaceRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysRedoLogSpaceRequests.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysRedoLogSpaceRequests.setDescription("the 'redo log space requests' parameter from v$sysstat")
oraDbSysRedoSyncWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysRedoSyncWrites.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysRedoSyncWrites.setDescription("the 'redo synch writes' parameter from v$sysstat")
oraDbSysSortsDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysSortsDisk.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysSortsDisk.setDescription("the 'sorts (disk)' parameter from v$sysstat")
oraDbSysSortsMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysSortsMemory.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysSortsMemory.setDescription("the 'sorts (memory)' parameter from v$sysstat")
oraDbSysSortsRows = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysSortsRows.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysSortsRows.setDescription("the 'sorts (rows)' parameter from v$sysstat")
oraDbSysTableFetchRowid = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysTableFetchRowid.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTableFetchRowid.setDescription("the 'table fetch by rowid' parameter from v$sysstat")
oraDbSysTableFetchContinuedRow = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysTableFetchContinuedRow.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTableFetchContinuedRow.setDescription("the 'table fetch continued row' parameter from v$sysstat")
oraDbSysTableScanBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysTableScanBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTableScanBlocks.setDescription("the 'table scan blocks gotten' parameter from v$sysstat")
oraDbSysTableScanRows = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysTableScanRows.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTableScanRows.setDescription("the 'table scan rows gotten' parameter from v$sysstat")
oraDbSysTableScansLong = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysTableScansLong.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTableScansLong.setDescription("the 'table scans (long tables)' parameter from v$sysstat")
oraDbSysTableScansShort = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysTableScansShort.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysTableScansShort.setDescription("the 'table scans (short tables)' parameter from v$sysstat")
oraDbSysUserCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysUserCalls.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysUserCalls.setDescription("the 'user calls' parameter from v$sysstat")
oraDbSysUserCommits = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysUserCommits.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysUserCommits.setDescription("the 'user commits' parameter from v$sysstat")
oraDbSysUserRollbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysUserRollbacks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysUserRollbacks.setDescription("the 'user rollbacks' parameter from v$sysstat")
oraDbSysWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSysWriteRequests.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSysWriteRequests.setDescription("the 'write requests' parameter from v$sysstat")
oraDbTablespaceTable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 2), )
if mibBuilder.loadTexts: oraDbTablespaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceTable.setDescription('Information on tablespaces within an Oracle database.')
oraDbTablespaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"), (0, "ORADB-MIB", "oraDbTablespaceIndex"))
if mibBuilder.loadTexts: oraDbTablespaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceEntry.setDescription('Information for each tablespace within an Oracle database.')
oraDbTablespaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbTablespaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceIndex.setDescription('A numeric index, unique among tablespaces within a single Oracle database.')
oraDbTablespaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbTablespaceName.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceName.setDescription('The name of this tablespace.')
oraDbTablespaceSizeAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbTablespaceSizeAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceSizeAllocated.setDescription('The amount of disk space, in kilobytes, allocated for this tablespace. This is the sum of the sizes of the data files associated with the tablespace.')
oraDbTablespaceSizeUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbTablespaceSizeUsed.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceSizeUsed.setDescription('The amount of disk space, in kilobytes, which is actually in use for storing data.')
oraDbTablespaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbTablespaceState.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceState.setDescription('The current accessibility of this tablespace. If a tablespace is offline(2), then SQL statements cannot reference objects contained in the tablespace. An invalid(3) tablespace is one that has been dropped.')
oraDbTablespaceLargestAvailableChunk = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbTablespaceLargestAvailableChunk.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbTablespaceLargestAvailableChunk.setDescription('The size, in kilobytes, of the largest contiguous set of free data blocks in the tablespace.')
oraDbDataFileTable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 3), )
if mibBuilder.loadTexts: oraDbDataFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileTable.setDescription('Information on data files within an Oracle database.')
oraDbDataFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"), (0, "ORADB-MIB", "oraDbDataFileIndex"))
if mibBuilder.loadTexts: oraDbDataFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileEntry.setDescription('Information for each data file within an Oracle database.')
oraDbDataFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileIndex.setDescription('A numeric index, unique among data files associated with a single tablespace.')
oraDbDataFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileName.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileName.setDescription('The fully-qualified name of this datafile.')
oraDbDataFileSizeAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileSizeAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileSizeAllocated.setDescription('The allocated size, in kilobytes, of this data file.')
oraDbDataFileDiskReads = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileDiskReads.setDescription('The total number of reads issued against this data file since startup.')
oraDbDataFileDiskWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileDiskWrites.setDescription('The total number of writes issued against this data file since startup.')
oraDbDataFileDiskReadBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileDiskReadBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileDiskReadBlocks.setDescription('The total number of physical blocks read from this data file since startup.')
oraDbDataFileDiskWrittenBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileDiskWrittenBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileDiskWrittenBlocks.setDescription('The total number of physical blocks written to this data file since startup.')
oraDbDataFileDiskReadTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileDiskReadTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileDiskReadTimeTicks.setDescription('The time spent reading from this data file since startup IF the database parameter TIMED_STATISTICS is TRUE. If TIMED_STATISTICS is FALSE, then the value will be zero.')
oraDbDataFileDiskWriteTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbDataFileDiskWriteTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbDataFileDiskWriteTimeTicks.setDescription('The time spent writing to this data file since startup IF the database parameter TIMED_STATISTICS is TRUE. If TIMED_STATISTICS is FALSE, then the value will be zero.')
oraDbLibraryCacheTable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 4), )
if mibBuilder.loadTexts: oraDbLibraryCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheTable.setDescription('Information on libraryCache performance.')
oraDbLibraryCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"), (0, "ORADB-MIB", "oraDbLibraryCacheIndex"))
if mibBuilder.loadTexts: oraDbLibraryCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheEntry.setDescription('LibraryCache information for each Oracle database.')
oraDbLibraryCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheIndex.setDescription('A unique integer for each row of the table.')
oraDbLibraryCacheNameSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheNameSpace.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheNameSpace.setDescription('The namespace of the v$librarycache table that this row relates to.')
oraDbLibraryCacheGets = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheGets.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheGets.setDescription('Number of times the system requests handles to library objects in this namespace.')
oraDbLibraryCacheGetHits = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheGetHits.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheGetHits.setDescription('Number of times the handles are already allocated in the cache.')
oraDbLibraryCachePins = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCachePins.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCachePins.setDescription('Number of times the system issues pin requests for objects in the cache in order to access them.')
oraDbLibraryCachePinHits = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCachePinHits.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCachePinHits.setDescription('Number of times the objects the system is pinning are already allocated and initialized in the cache.')
oraDbLibraryCacheReloads = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheReloads.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheReloads.setDescription('Number of times the library objects have to be reinitialized and reloaded with data because they have been aged out or invalidated')
oraDbLibraryCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheInvalidations.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheInvalidations.setDescription('Number of times that non-persistent library objects (like shared SQL areas) have been invalidated.')
oraDbLibraryCacheSumTable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 5), )
if mibBuilder.loadTexts: oraDbLibraryCacheSumTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumTable.setDescription('Information on library cache performance, summed over all library caches in a single database instance.')
oraDbLibraryCacheSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"))
if mibBuilder.loadTexts: oraDbLibraryCacheSumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumEntry.setDescription('LibraryCache information, summed over all library caches, for each Oracle database.')
oraDbLibraryCacheSumGets = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheSumGets.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumGets.setDescription('Number of times the system requests handles to library objects, summed over all library caches in the instance.')
oraDbLibraryCacheSumGetHits = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheSumGetHits.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumGetHits.setDescription('Number of times the handles are already allocated in the cache, summed over all library caches in the instance.')
oraDbLibraryCacheSumPins = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheSumPins.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumPins.setDescription('Number of times the system issues pin requests for objects in a cache in order to access them, summed over all library caches in the instance.')
oraDbLibraryCacheSumPinHits = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheSumPinHits.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumPinHits.setDescription('Number of times the objects the system is pinning are already allocated and initialized in a cache, summed over all library caches in the instance.')
oraDbLibraryCacheSumReloads = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheSumReloads.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumReloads.setDescription('Number of times the library objects have to be reinitialized and reloaded with data because they have been aged out or invalidated, summed over all library caches in the instance.')
oraDbLibraryCacheSumInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbLibraryCacheSumInvalidations.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbLibraryCacheSumInvalidations.setDescription('Number of times that non-persistent library objects (like shared SQL areas) have been invalidated, summed over all library caches in the instance.')
oraDbSGATable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 6), )
if mibBuilder.loadTexts: oraDbSGATable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSGATable.setDescription('Summary information on the System Global Area')
oraDbSGAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 6, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"))
if mibBuilder.loadTexts: oraDbSGAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSGAEntry.setDescription('A single entry from the v$sga table')
oraDbSGAFixedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSGAFixedSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSGAFixedSize.setDescription('')
oraDbSGAVariableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSGAVariableSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSGAVariableSize.setDescription('')
oraDbSGADatabaseBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSGADatabaseBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSGADatabaseBuffers.setDescription('')
oraDbSGARedoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbSGARedoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbSGARedoBuffers.setDescription('')
oraDbConfigTable = MibTable((1, 3, 6, 1, 4, 1, 111, 4, 1, 7), )
if mibBuilder.loadTexts: oraDbConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigTable.setDescription('Oracle-specific configuration information global to a database.')
oraDbConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1), ).setIndexNames((0, "RDBMS-MIB", "rdbmsDbIndex"))
if mibBuilder.loadTexts: oraDbConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigEntry.setDescription("Oracle-specific configuration information. This table only lists a few init.ora parameters that are particularly relevant to the task of monitoring database performance. By giving them easy-to-use, fixed object-ids, we make it easier to graph them along with the dynamic performance values that they affect. A complete list of parameters can be found in the Internet standard MIB 'Config' objects.")
oraDbConfigDbBlockBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDbBlockBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDbBlockBuffers.setDescription('The DB_BLOCK_BUFFERS parameter from the init.ora file ')
oraDbConfigDbBlockCkptBatch = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDbBlockCkptBatch.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDbBlockCkptBatch.setDescription('The DB_BLOCK_CHECKPOINT_BATCH parameter from the init.ora file ')
oraDbConfigDbBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDbBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDbBlockSize.setDescription('The DB_BLOCK_SIZE parameter from the init.ora file ')
oraDbConfigDbFileSimWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDbFileSimWrites.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDbFileSimWrites.setDescription('The DB_FILE_SIMULTANEOUS_WRITES parameter from the init.ora file ')
oraDbConfigDbMultiBlockReadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDbMultiBlockReadCount.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDbMultiBlockReadCount.setDescription('The DB_MULTIBLOCK_READ_COUNT parameter from the init.ora file ')
oraDbConfigDistLockTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDistLockTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDistLockTimeout.setDescription('The DISTRIBUTED_LOCK_TIMEOUT parameter from the init.ora file ')
oraDbConfigDistRecoveryConnectHold = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDistRecoveryConnectHold.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDistRecoveryConnectHold.setDescription('The DISTRIBUTED_RECOVERY_CONNECT_HOLD parameter from the init.ora file ')
oraDbConfigDistTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigDistTransactions.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigDistTransactions.setDescription('The DISTRIBUTED_TRANSACTIONS parameter from the init.ora file ')
oraDbConfigLogArchiveBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigLogArchiveBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigLogArchiveBufferSize.setDescription('The LOG_ARCHIVE_BUFFER_SIZE parameter from the init.ora file ')
oraDbConfigLogArchiveBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigLogArchiveBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigLogArchiveBuffers.setDescription('The LOG_ARCHIVE_BUFFERS parameter from the init.ora file ')
oraDbConfigLogBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigLogBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigLogBuffer.setDescription('The LOG_BUFFER parameter from the init.ora file ')
oraDbConfigLogCheckpointInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigLogCheckpointInterval.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigLogCheckpointInterval.setDescription('The LOG_CHECKPOINT_INTERVAL parameter from the init.ora file ')
oraDbConfigLogCheckpointTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigLogCheckpointTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigLogCheckpointTimeout.setDescription('The LOG_CHECKPOINT_TIMEOUT parameter from the init.ora file ')
oraDbConfigLogFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigLogFiles.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigLogFiles.setDescription('The LOG_FILES parameter from the init.ora file ')
oraDbConfigMaxRollbackSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigMaxRollbackSegments.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigMaxRollbackSegments.setDescription('The MAX_ROLLBACK_SEGMENTS parameter from the init.ora file ')
oraDbConfigMTSMaxDispatchers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigMTSMaxDispatchers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigMTSMaxDispatchers.setDescription('The MTS_MAX_DISPATCHERS parameter from the init.ora file ')
oraDbConfigMTSMaxServers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigMTSMaxServers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigMTSMaxServers.setDescription('The MTS_MAX_SERVERS parameter from the init.ora file ')
oraDbConfigMTSServers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigMTSServers.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigMTSServers.setDescription('The MTS_SERVERS parameter from the init.ora file ')
oraDbConfigOpenCursors = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigOpenCursors.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigOpenCursors.setDescription('The OPEN_CURSORS parameter from the init.ora file ')
oraDbConfigOpenLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigOpenLinks.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigOpenLinks.setDescription('The OPEN_LINKS parameter from the init.ora file ')
oraDbConfigOptimizerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigOptimizerMode.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigOptimizerMode.setDescription('The OPTIMIZER_MODE parameter from the init.ora file ')
oraDbConfigProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigProcesses.setDescription('The PROCESSES parameter from the init.ora file ')
oraDbConfigSerializable = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigSerializable.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigSerializable.setDescription('The SERIALIZABLE parameter from the init.ora file ')
oraDbConfigSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigSessions.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigSessions.setDescription('The SESSIONS parameter from the init.ora file ')
oraDbConfigSharedPool = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigSharedPool.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigSharedPool.setDescription('The SHARED_POOL parameter from the init.ora file ')
oraDbConfigSortAreaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigSortAreaSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigSortAreaSize.setDescription('The SORT_AREA_SIZE parameter from the init.ora file ')
oraDbConfigSortAreaRetainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigSortAreaRetainedSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigSortAreaRetainedSize.setDescription('The SORT_AREA_RETAINED_SIZE parameter from the init.ora file ')
oraDbConfigTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigTransactions.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigTransactions.setDescription('The TRANSACTIONS parameter from the init.ora file ')
oraDbConfigTransactionsPerRollback = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 4, 1, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraDbConfigTransactionsPerRollback.setStatus('mandatory')
if mibBuilder.loadTexts: oraDbConfigTransactionsPerRollback.setDescription('The TRANSACTIONS_PER_ROLLBACK parameter from the init.ora file ')
mibBuilder.exportSymbols("ORADB-MIB", oraDbSysUserRollbacks=oraDbSysUserRollbacks, oraDbSysRedoSyncWrites=oraDbSysRedoSyncWrites, oraDbDataFileDiskReads=oraDbDataFileDiskReads, oraDbConfigSortAreaSize=oraDbConfigSortAreaSize, oraDbLibraryCacheGets=oraDbLibraryCacheGets, oraDbSysTable=oraDbSysTable, oraDbSysTableScansShort=oraDbSysTableScansShort, oraDbSGARedoBuffers=oraDbSGARedoBuffers, oraDbSysSortsDisk=oraDbSysSortsDisk, oraDbLibraryCacheSumReloads=oraDbLibraryCacheSumReloads, oraDbConfigMTSMaxDispatchers=oraDbConfigMTSMaxDispatchers, oraDbConfigMTSMaxServers=oraDbConfigMTSMaxServers, oraDbSysEntry=oraDbSysEntry, oraDbConfigDbBlockBuffers=oraDbConfigDbBlockBuffers, oraDbConfigOptimizerMode=oraDbConfigOptimizerMode, oraDbSysTableFetchRowid=oraDbSysTableFetchRowid, oraDbConfigSortAreaRetainedSize=oraDbConfigSortAreaRetainedSize, oraDbDataFileSizeAllocated=oraDbDataFileSizeAllocated, oraDbTablespaceTable=oraDbTablespaceTable, oraDbLibraryCacheEntry=oraDbLibraryCacheEntry, oraDbSysUserCommits=oraDbSysUserCommits, oraDbLibraryCacheSumGetHits=oraDbLibraryCacheSumGetHits, oraDbLibraryCacheNameSpace=oraDbLibraryCacheNameSpace, oraDbSGATable=oraDbSGATable, oraDbDataFileDiskWrittenBlocks=oraDbDataFileDiskWrittenBlocks, oraDbSysTableScanBlocks=oraDbSysTableScanBlocks, oraDbConfigEntry=oraDbConfigEntry, oraDbDataFileTable=oraDbDataFileTable, oraDbConfigLogBuffer=oraDbConfigLogBuffer, oraDbLibraryCacheReloads=oraDbLibraryCacheReloads, oraDbConfigDistRecoveryConnectHold=oraDbConfigDistRecoveryConnectHold, oraDbConfigSerializable=oraDbConfigSerializable, oraDbSysSortsMemory=oraDbSysSortsMemory, oraDbDataFileDiskReadTimeTicks=oraDbDataFileDiskReadTimeTicks, oraDbLibraryCacheSumPinHits=oraDbLibraryCacheSumPinHits, oraDbConfigMTSServers=oraDbConfigMTSServers, oraDbTablespaceSizeUsed=oraDbTablespaceSizeUsed, oraDbDataFileEntry=oraDbDataFileEntry, oraDbSysFreeBufferRequested=oraDbSysFreeBufferRequested, oraDbLibraryCacheIndex=oraDbLibraryCacheIndex, oraDbConfigMaxRollbackSegments=oraDbConfigMaxRollbackSegments, oraDbSysPhysReads=oraDbSysPhysReads, oraDbSysTableScansLong=oraDbSysTableScansLong, oraDbSysParseCount=oraDbSysParseCount, oraDbConfigTransactionsPerRollback=oraDbConfigTransactionsPerRollback, oraDbLibraryCacheSumPins=oraDbLibraryCacheSumPins, oraDbSysPhysWrites=oraDbSysPhysWrites, oraDbConfigSharedPool=oraDbConfigSharedPool, oraDbObjects=oraDbObjects, oraDbSysRedoEntries=oraDbSysRedoEntries, oraDbMIB=oraDbMIB, oraDbDataFileDiskReadBlocks=oraDbDataFileDiskReadBlocks, TruthValue=TruthValue, oraDbSysFreeBufferInspected=oraDbSysFreeBufferInspected, oraDbLibraryCacheSumTable=oraDbLibraryCacheSumTable, oraDbConfigDbFileSimWrites=oraDbConfigDbFileSimWrites, oraDbSysWriteRequests=oraDbSysWriteRequests, oraDbConfigLogArchiveBufferSize=oraDbConfigLogArchiveBufferSize, oraDbDataFileName=oraDbDataFileName, oracle=oracle, oraDbConfigOpenLinks=oraDbConfigOpenLinks, oraDbSGADatabaseBuffers=oraDbSGADatabaseBuffers, oraDbSGAFixedSize=oraDbSGAFixedSize, oraDbConfigDbBlockCkptBatch=oraDbConfigDbBlockCkptBatch, oraDbConfigTransactions=oraDbConfigTransactions, oraDbLibraryCacheInvalidations=oraDbLibraryCacheInvalidations, oraDbLibraryCacheSumInvalidations=oraDbLibraryCacheSumInvalidations, oraDbLibraryCachePins=oraDbLibraryCachePins, oraDbSGAEntry=oraDbSGAEntry, oraDbLibraryCachePinHits=oraDbLibraryCachePinHits, oraDbLibraryCacheTable=oraDbLibraryCacheTable, oraDbConfigDistLockTimeout=oraDbConfigDistLockTimeout, DateAndTime=DateAndTime, oraDbTablespaceLargestAvailableChunk=oraDbTablespaceLargestAvailableChunk, oraDbTablespaceSizeAllocated=oraDbTablespaceSizeAllocated, oraDbTablespaceState=oraDbTablespaceState, oraDbConfigDbBlockSize=oraDbConfigDbBlockSize, oraDbTablespaceName=oraDbTablespaceName, oraDbConfigProcesses=oraDbConfigProcesses, oraDbConfigDbMultiBlockReadCount=oraDbConfigDbMultiBlockReadCount, oraDbSysRedoLogSpaceRequests=oraDbSysRedoLogSpaceRequests, oraDbSysUserCalls=oraDbSysUserCalls, oraDbDataFileIndex=oraDbDataFileIndex, oraDbConfigLogFiles=oraDbConfigLogFiles, oraDbDataFileDiskWrites=oraDbDataFileDiskWrites, oraDbConfigLogArchiveBuffers=oraDbConfigLogArchiveBuffers, oraDbSysDbBlockChanges=oraDbSysDbBlockChanges, oraDbConfigOpenCursors=oraDbConfigOpenCursors, oraDbConfigLogCheckpointTimeout=oraDbConfigLogCheckpointTimeout, oraDbLibraryCacheSumEntry=oraDbLibraryCacheSumEntry, oraDbTablespaceEntry=oraDbTablespaceEntry, oraDbLibraryCacheGetHits=oraDbLibraryCacheGetHits, oraDbSysTableScanRows=oraDbSysTableScanRows, oraDbSysTableFetchContinuedRow=oraDbSysTableFetchContinuedRow, oraDbSysDbBlockGets=oraDbSysDbBlockGets, oraDbSGAVariableSize=oraDbSGAVariableSize, oraDbConfigTable=oraDbConfigTable, oraDbTablespaceIndex=oraDbTablespaceIndex, oraDbSysSortsRows=oraDbSysSortsRows, oraDbConfigSessions=oraDbConfigSessions, oraDbDataFileDiskWriteTimeTicks=oraDbDataFileDiskWriteTimeTicks, oraDbConfigDistTransactions=oraDbConfigDistTransactions, oraDbConfigLogCheckpointInterval=oraDbConfigLogCheckpointInterval, oraDbLibraryCacheSumGets=oraDbLibraryCacheSumGets, oraDbSysConsistentGets=oraDbSysConsistentGets, oraDbSysConsistentChanges=oraDbSysConsistentChanges)
