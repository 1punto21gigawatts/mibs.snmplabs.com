#
# PySNMP MIB module ADTRAN-ATLAS-VOICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-ATLAS-VOICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, NotificationType, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, Integer32, Bits, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "NotificationType", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Integer32", "Bits", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adtran = MibIdentifier((1, 3, 6, 1, 4, 1, 664))
adMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2))
adATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154))
adGenATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1))
adATLASVoicemg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10))
adATLASVoiceIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfNumber.setDescription('The number of voice ports (regardless of their current state) present on this system.')
adATLASVoiceIfTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2), )
if mibBuilder.loadTexts: adATLASVoiceIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfTable.setDescription('The ATLAS Voice Interface Status Table')
adATLASVoiceIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1), ).setIndexNames((0, "ADTRAN-ATLAS-VOICE-MIB", "adATLASVoiceIfIndex"))
if mibBuilder.loadTexts: adATLASVoiceIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfEntry.setDescription('An entry in the ATLAS Voice Interface Status Table')
adATLASVoiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfIndex.setDescription('The index value which uniquely identifies the object instance.')
adATLASVoiceIfSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfSlotNum.setDescription('This variable indicates the slot number of a particular ATLAS module with a voice interface.')
adATLASVoiceIfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfPortNum.setDescription('This variable indicates the port number of a particular voice interface on an ATLAS module.')
adATLASVoiceIfPortStat = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("inactive", 1), ("disabled", 2), ("idle", 3), ("test", 4), ("tipOpen", 5), ("offhook", 6), ("reverseBattery", 7), ("testActive", 8), ("testOffhook", 9), ("testRevBatt", 10), ("testRinging", 11), ("testTipOpen", 12), ("testTipOpenRingGND", 13), ("testDisabled", 14), ("testRingOffhook", 15), ("testLO", 16), ("testLCNormTRPolarity", 17), ("testLCNoBatt", 18), ("testLCRevTRPolarity", 19), ("testRingGND", 20), ("transOnly", 21), ("testELeadOpen", 22), ("testELeadClosed", 23), ("callInProgress", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfPortStat.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfPortStat.setDescription('This variable indicates the call or port status of a particular voice interface on an ATLAS module. Applicable voice interfaces for each option follow: 1 - 4 FXS, FXO, E&M 5 - 8 FXS, FXO 9 - 15 FXS 16 - 20 FXO 21 - 24 E&M')
adATLASVoiceIfTxSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfTxSignalBits.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfTxSignalBits.setDescription("Transmit signaling bits: ABCD represented as a character string of 1's and 0's.")
adATLASVoiceIfRxSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceIfRxSignalBits.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceIfRxSignalBits.setDescription("Receive signaling bits: ABCD represented as a character string of 1's and 0's.")
adATLASVoiceTstTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3), )
if mibBuilder.loadTexts: adATLASVoiceTstTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTstTable.setDescription('The ATLAS Voice Interface Test Table')
adATLASVoiceTstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3, 1), ).setIndexNames((0, "ADTRAN-ATLAS-VOICE-MIB", "adATLASVoiceTstIndex"))
if mibBuilder.loadTexts: adATLASVoiceTstEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTstEntry.setDescription('An entry in the ATLAS Voice Interface Test Table')
adATLASVoiceTstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASVoiceTstIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTstIndex.setDescription('The index value which uniquely identifies the object instance.')
adATLASVoiceTst2W = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("loopOpen", 2), ("loopClosed", 3), ("ringGround", 4), ("active", 5), ("tipOpen", 6), ("reverseBattery", 7), ("disable", 8), ("ringing", 9), ("eLeadOpen", 10), ("eLeadClosed", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASVoiceTst2W.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTst2W.setDescription('This variable indicates the 2 Wire Test setting on a particular voice interface on an ATLAS module. Applicable voice interfaces for each option follow: 1 FXS, FXO, E&M 2 - 4 FXO 5 - 9 FXS 10 - 11 E&M')
adATLASVoiceTstTxABCD = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("txOff", 1), ("tx0000", 2), ("tx0101", 3), ("tx1010", 4), ("tx1111", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASVoiceTstTxABCD.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTstTxABCD.setDescription('This variable indicates the Transmit Signaling Bits Test setting on a particular voice interface on an ATLAS module.')
adATLASVoiceTst1kHzTone = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("near", 2), ("far", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASVoiceTst1kHzTone.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTst1kHzTone.setDescription('This variable indicates the Tone Test setting on a particular voice interface on an ATLAS module. Near is for sending tone towards the 2W port. Far is for sending tone towards the PCM (DS0 or B-Channel).')
adATLASVoiceTstLpBk = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("analog", 2), ("digital", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASVoiceTstLpBk.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASVoiceTstLpBk.setDescription('This variable indicates the Loopback Test setting on a particular voice interface on an ATLAS module.')
mibBuilder.exportSymbols("ADTRAN-ATLAS-VOICE-MIB", adATLASVoiceTst2W=adATLASVoiceTst2W, adATLASVoiceIfPortStat=adATLASVoiceIfPortStat, adATLASVoiceTstTxABCD=adATLASVoiceTstTxABCD, adATLASVoiceIfNumber=adATLASVoiceIfNumber, adATLASVoiceIfTxSignalBits=adATLASVoiceIfTxSignalBits, adATLASVoiceTstTable=adATLASVoiceTstTable, adATLASVoiceTst1kHzTone=adATLASVoiceTst1kHzTone, adtran=adtran, adGenATLASmg=adGenATLASmg, adATLASVoicemg=adATLASVoicemg, adATLASVoiceTstIndex=adATLASVoiceTstIndex, adATLASVoiceIfTable=adATLASVoiceIfTable, adMgmt=adMgmt, adATLASVoiceIfPortNum=adATLASVoiceIfPortNum, adATLASVoiceIfRxSignalBits=adATLASVoiceIfRxSignalBits, adATLASVoiceTstLpBk=adATLASVoiceTstLpBk, adATLASVoiceIfSlotNum=adATLASVoiceIfSlotNum, adATLASmg=adATLASmg, adATLASVoiceIfIndex=adATLASVoiceIfIndex, adATLASVoiceIfEntry=adATLASVoiceIfEntry, adATLASVoiceTstEntry=adATLASVoiceTstEntry)
