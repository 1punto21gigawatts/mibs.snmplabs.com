#
# PySNMP MIB module CTRMONXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRMONXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:29:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ctronRmon, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctronRmon")
EntryStatus, OwnerString = mibBuilder.importSymbols("RMON-MIB", "EntryStatus", "OwnerString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, iso, Gauge32, ObjectIdentity, MibIdentifier, Bits, ModuleIdentity, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "iso", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "ModuleIdentity", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ctDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20))
ctDiscoveryProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 1))
ctProtIP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 1, 1))
ctProtNetware = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 1, 2))
ctProtDecNet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 1, 3))
ctDiscoveryControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2), )
if mibBuilder.loadTexts: ctDiscoveryControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlTable.setDescription('A list of Discovery Control Entries.')
ctDiscoveryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1), ).setIndexNames((0, "CTRMONXT-MIB", "ctDiscoveryControlIndex"))
if mibBuilder.loadTexts: ctDiscoveryControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlEntry.setDescription('A list of parameters that set up the discovery of devices by mac address, network address, protocol mapping and the interface they appear on.')
ctDiscoveryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlIndex.setDescription('An index that uniquely identifies an entry in the ctDiscoveryControl table. Each entry identifies a function that will discover relationships between MAC and Network layer addresses on a particular interface and of a particular protocol. Information about these relationships will be placed in the ctDiscoveryMediaToNetTable and the ctDiscoveryNetToMedia table.')
ctDiscoveryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDiscoveryControlDataSource.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlDataSource.setDescription('This object identifies the source of the data from which this entry creates address relationships. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in [4,6], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. The statistics in this group reflect all packets on the local network segment attached to the identified interface. This object may not be modified if the associated ctDiscoveryControlStatus object is equal to valid(1).')
ctDiscoveryControlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDiscoveryControlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlProtocol.setDescription('This object identifies the protocol suite, and hence the type of network addresses in the tables, for the table associated with this control index.. NOTE: In this table, this value applies only to the network layer of the packet.')
ctDiscoveryControlTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryControlTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlTableSize.setDescription('The number of ctDiscoveryMediaToNetEntries in the ctDiscoveryMediaToNetTable associated with this ctDiscoveryControlTable. This must also be the number of entries in the ctDiscoveryNetToMediaTable for this ctDiscoveryControlTable.')
ctDiscoveryControlLastDeleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryControlLastDeleteTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlLastDeleteTime.setDescription('The value of sysUpTime when the last entry was deleted from the ctDiscoveryMediaToNetTable associated with this ctDiscoveryControlEntry.')
ctDiscoveryControlAgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDiscoveryControlAgeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlAgeInterval.setDescription('The minimum amount of idle time that will be allowed for an entry before it may be deleted from the table by the agent. The aging routine is not required to run every second.')
ctDiscoveryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDiscoveryControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
ctDiscoveryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 2, 1, 8), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDiscoveryControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryControlStatus.setDescription('The status of this ctDiscoveryControl Entry.')
ctDiscoveryMNTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3), )
if mibBuilder.loadTexts: ctDiscoveryMNTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNTable.setDescription('A list of ctDiscoveryMNEntries.')
ctDiscoveryMNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1), ).setIndexNames((0, "CTRMONXT-MIB", "ctDiscoveryMNIndex"), (0, "CTRMONXT-MIB", "ctDiscoveryMNMACAddress"), (0, "CTRMONXT-MIB", "ctDiscoveryMNNetworkAddress"))
if mibBuilder.loadTexts: ctDiscoveryMNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNEntry.setDescription('A MAC/Network address assocaition.')
ctDiscoveryMNMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNMACAddress.setDescription('The MAC layer address of this MAC/Network association')
ctDiscoveryMNNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNNetworkAddress.setDescription('The network layer address of this MAC/Network association.')
ctDiscoveryMNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNIndex.setDescription('An index that defines the set of collected ctDiscoveryMNEntries of which this entry is part. The set of MAC/Network associations identified by a particular value of this index is associated with the ctDiscoveryControlEntry with the same index.')
ctDiscoveryMNCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNCreationTime.setDescription('The value of SysUpTime when an error free frame with this source MAC/Network address association was detected, and an entry with a corresponding association was not present in the ctDiscoveryMNTable.')
ctDiscoveryMNLastTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNLastTransmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNLastTransmitTime.setDescription('The value of SysUpTime when this entry was last updated. This time correponds to the last time that a frame with the source MAC/Network association of this dicovery entry was detected. This object is useful in that the management station can compute idle time by the difference between this value and current sysUpTime.')
ctDiscoveryMNBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNBoard.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNBoard.setDescription('The index of the board that this MAC/Network association was last seen on. A value of zero indicates that this information was not available.')
ctDiscoveryMNPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryMNPort.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryMNPort.setDescription('The index of the port that this MAC/Network association was last seen on. A value of zero indicates that this information was not available.')
ctDiscoveryNMTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4), )
if mibBuilder.loadTexts: ctDiscoveryNMTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMTable.setDescription('A list of ctDiscoveryNMEntries.')
ctDiscoveryNMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1), ).setIndexNames((0, "CTRMONXT-MIB", "ctDiscoveryNMIndex"), (0, "CTRMONXT-MIB", "ctDiscoveryNMNetworkAddress"), (0, "CTRMONXT-MIB", "ctDiscoveryNMMACAddress"))
if mibBuilder.loadTexts: ctDiscoveryNMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMEntry.setDescription('A MAC/Network address assocaition.')
ctDiscoveryNMNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMNetworkAddress.setDescription('The Network layer address of this MAC/Network association')
ctDiscoveryNMMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMMACAddress.setDescription('The MAC layer address of this MAC/Network association')
ctDiscoveryNMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMIndex.setDescription('An index that defines the set of collected ctDiscoveryNMEntries of which this entry is part. The set of MAC/Network associations identified by a particular value of this index is associated with the ctDiscoveryControlEntry with the same index.')
ctDiscoveryNMCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMCreationTime.setDescription('The value of SysUpTime when an error free frame with this source MAC/Network address association was detected, and an entry with a corresponding association was not present in the ctDiscoveryNMTable.')
ctDiscoveryNMLastTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMLastTransmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMLastTransmitTime.setDescription('The value of SysUpTime when this entry was last updated. This time correponds to the last time that a frame with the source MAC/Network association of this dicovery entry was detected. This object is useful in that the management station can compute idle time by the difference between this value and current sysUpTime.')
ctDiscoveryNMBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMBoard.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMBoard.setDescription('The index of the board that this MAC/Network association was last seen on. A value of zero indicates that this information was not available.')
ctDiscoveryNMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 2, 20, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDiscoveryNMPort.setStatus('mandatory')
if mibBuilder.loadTexts: ctDiscoveryNMPort.setDescription('The index of the port that this MAC/Network association was last seen on. A value of zero indicates that this information was not available.')
mibBuilder.exportSymbols("CTRMONXT-MIB", ctProtDecNet=ctProtDecNet, ctDiscoveryNMLastTransmitTime=ctDiscoveryNMLastTransmitTime, ctDiscoveryMNTable=ctDiscoveryMNTable, ctDiscoveryNMEntry=ctDiscoveryNMEntry, ctDiscoveryNMPort=ctDiscoveryNMPort, ctDiscoveryMNEntry=ctDiscoveryMNEntry, ctDiscoveryNMTable=ctDiscoveryNMTable, ctDiscoveryMNBoard=ctDiscoveryMNBoard, ctDiscoveryControlEntry=ctDiscoveryControlEntry, ctDiscoveryControlTableSize=ctDiscoveryControlTableSize, ctDiscoveryControlIndex=ctDiscoveryControlIndex, ctDiscoveryMNLastTransmitTime=ctDiscoveryMNLastTransmitTime, ctDiscoveryNMMACAddress=ctDiscoveryNMMACAddress, ctDiscoveryControlDataSource=ctDiscoveryControlDataSource, ctDiscoveryMNCreationTime=ctDiscoveryMNCreationTime, ctDiscoveryProtocol=ctDiscoveryProtocol, ctDiscoveryControlTable=ctDiscoveryControlTable, ctDiscoveryControlLastDeleteTime=ctDiscoveryControlLastDeleteTime, ctDiscoveryMNPort=ctDiscoveryMNPort, ctDiscoveryNMBoard=ctDiscoveryNMBoard, ctDiscoveryMNNetworkAddress=ctDiscoveryMNNetworkAddress, ctProtIP=ctProtIP, ctDiscovery=ctDiscovery, ctProtNetware=ctProtNetware, ctDiscoveryControlAgeInterval=ctDiscoveryControlAgeInterval, ctDiscoveryNMNetworkAddress=ctDiscoveryNMNetworkAddress, ctDiscoveryNMIndex=ctDiscoveryNMIndex, ctDiscoveryControlProtocol=ctDiscoveryControlProtocol, ctDiscoveryMNMACAddress=ctDiscoveryMNMACAddress, ctDiscoveryControlStatus=ctDiscoveryControlStatus, ctDiscoveryMNIndex=ctDiscoveryMNIndex, ctDiscoveryControlOwner=ctDiscoveryControlOwner, ctDiscoveryNMCreationTime=ctDiscoveryNMCreationTime)
