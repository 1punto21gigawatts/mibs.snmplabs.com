#
# PySNMP MIB module LINKSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINKSYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:07:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, ObjectIdentity, Counter64, NotificationType, IpAddress, enterprises, Integer32, iso, Bits, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ObjectIdentity", "Counter64", "NotificationType", "IpAddress", "enterprises", "Integer32", "iso", "Bits", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
linksys = MibIdentifier((1, 3, 6, 1, 4, 1, 3955))
deviceId = MibScalar((1, 3, 6, 1, 4, 1, 3955, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("isEtherHub", 1), ("isFastEtherHub", 2), ("isDualSpeedHub", 3), ("isNwayEtherSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceId.setStatus('mandatory')
if mibBuilder.loadTexts: deviceId.setDescription('The value is used to identify what kind of device.')
etherHub = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 5))
ehHwVer = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: ehHwVer.setDescription('The hardware version of this device')
ehSwVer = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehSwVer.setStatus('mandatory')
if mibBuilder.loadTexts: ehSwVer.setDescription('The software version of this device')
ehNumber = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ehNumber.setDescription('Present the device number under this node')
sp2Hub = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 5, 5))
sp2Statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1))
sp2Control = MibTable((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2), )
if mibBuilder.loadTexts: sp2Control.setStatus('mandatory')
sp2Status = MibTable((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3), )
if mibBuilder.loadTexts: sp2Status.setStatus('mandatory')
sp2Ports = MibTable((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4), )
if mibBuilder.loadTexts: sp2Ports.setStatus('mandatory')
statsOctets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsOctets.setStatus('mandatory')
if mibBuilder.loadTexts: statsOctets.setDescription('The number of data octets including those in bad packets and octets in FCS fields, but does not include preamble or other framing bits.')
statsPkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts.setDescription('The number of packets received from the network, including errored packets.')
statsBroadcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsBroadcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: statsBroadcastPkts.setDescription('The number of good broadcast packets received.')
statsMulticastPkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsMulticastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: statsMulticastPkts.setDescription('The number of good multicast packets received.')
statsCrcAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsCrcAlignErrors.setStatus('mandatory')
if mibBuilder.loadTexts: statsCrcAlignErrors.setDescription('The number of valid-length packets (64 to 1518 bytes inclusive) that had a bad Frame Check Sequence(FCS).')
statsUndersizePkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsUndersizePkts.setStatus('mandatory')
if mibBuilder.loadTexts: statsUndersizePkts.setDescription('The number of well-formed packets that were smaller than 64 octets.')
statsOversizePkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsOversizePkts.setStatus('mandatory')
if mibBuilder.loadTexts: statsOversizePkts.setDescription('The number of well-formed packets that were longer than 1518 octets.')
statsFragments = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsFragments.setStatus('mandatory')
if mibBuilder.loadTexts: statsFragments.setDescription('The number of ill-formed packets less than 64 octets. note: any event without a start-of-frame delimiter (0- octet packet) will be counted as a fragment, no matter how long it is')
statsJabbers = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsJabbers.setStatus('mandatory')
if mibBuilder.loadTexts: statsJabbers.setDescription('The number of ill-formed packets longer than 1518 octets. An ill-formed packet is one with an FCS error.')
statsCollisions = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: statsCollisions.setDescription('The best estimate of the total number of collisions on this interface')
statsPkts64Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts64Octets.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts64Octets.setDescription('The number of packets(good and bad) that were 64 octets long.')
statsPkts65to127Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts65to127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts65to127Octets.setDescription('The number of packets(good and bad) between 65 and 127 octets long')
statsPkts128to255Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts128to255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts128to255Octets.setDescription('The number of packets(good and bad) between 128 and 255 octets long')
statsPkts256to511Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts256to511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts256to511Octets.setDescription('The number of packets(good and bad) between 256 and 511 octets long')
statsPkts512to1023Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts512to1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts512to1023Octets.setDescription('The number of packets(good and bad) between 512 and 1023 octets long')
statsPkts1024to1518Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts1024to1518Octets.setStatus('mandatory')
if mibBuilder.loadTexts: statsPkts1024to1518Octets.setDescription('The number of packets(good and bad) between 1024 and 1518 octets long')
statsTotalValidOctets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 17), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsTotalValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: statsTotalValidOctets.setDescription('The total number of octets contained in valid frames received on this segment')
resetModule = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resetModule.setStatus('mandatory')
if mibBuilder.loadTexts: resetModule.setDescription('Writing any data value to this register is identical to a hardware reset. Everything is reset except the Source Address RAM.')
sp2CtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2), ).setIndexNames((0, "LINKSYS-MIB", "ctlHubIdx"), (0, "LINKSYS-MIB", "ctlPortIdx"))
if mibBuilder.loadTexts: sp2CtlEntry.setStatus('deprecated')
ctlHubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHubIdx.setStatus('deprecated')
ctlPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlPortIdx.setStatus('deprecated')
enable = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0), ("na", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable.setStatus('mandatory')
linkEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0), ("na", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkEn.setStatus('mandatory')
speedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 3))).clone(namedValues=NamedValues(("na", -1), ("nway", 0), ("ether10", 1), ("ether100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speedSet.setStatus('mandatory')
nwayEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0), ("na", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwayEn.setStatus('mandatory')
nwayRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwayRestart.setStatus('mandatory')
sp2StEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1), ).setIndexNames((0, "LINKSYS-MIB", "statHubIdx"), (0, "LINKSYS-MIB", "statPortIdx"))
if mibBuilder.loadTexts: sp2StEntry.setStatus('mandatory')
statHubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statHubIdx.setStatus('deprecated')
statPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortIdx.setStatus('deprecated')
linkSt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("fail", 0), ("good", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSt.setStatus('mandatory')
if mibBuilder.loadTexts: linkSt.setDescription("Indicates every ports' link status.")
polaritySt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("straight", 0), ("cross", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polaritySt.setStatus('mandatory')
if mibBuilder.loadTexts: polaritySt.setDescription('A read of this register will reflect the current polarity status.')
partitionSt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSt.setStatus('mandatory')
if mibBuilder.loadTexts: partitionSt.setDescription('A read of this register will reflect the current partition status.')
speedSt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("is10M", 0), ("is100M", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: speedSt.setStatus('mandatory')
if mibBuilder.loadTexts: speedSt.setDescription('Indicates the current status of each port.')
nwayPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwayPartner.setStatus('mandatory')
counterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1), ).setIndexNames((0, "LINKSYS-MIB", "cntHubIdx"), (0, "LINKSYS-MIB", "cntPortIdx"))
if mibBuilder.loadTexts: counterEntry.setStatus('mandatory')
cntHubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHubIdx.setStatus('deprecated')
if mibBuilder.loadTexts: cntHubIdx.setDescription("A unique value for each family. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
cntPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPortIdx.setStatus('mandatory')
if mibBuilder.loadTexts: cntPortIdx.setDescription("A unique value for each family. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
portReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReadableFrames.setStatus('mandatory')
if mibBuilder.loadTexts: portReadableFrames.setDescription('Counts valid-length, valid-CRC, collision-free packets.')
portReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReadableOctets.setStatus('mandatory')
if mibBuilder.loadTexts: portReadableOctets.setDescription('Counts the number of octets in all valid-length, valid-CRC, collision-free packets, not including preamble and framing bits.')
portFrameCheckSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrameCheckSequence.setStatus('mandatory')
if mibBuilder.loadTexts: portFrameCheckSequence.setDescription('Counts valid length, collision-free packets that had FCS errors, but were correctly framed.')
portAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: portAlignmentErrors.setDescription('Counts valid length, collision-free packets that had FCS errors and were incorrectly framed.')
portFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFramesTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: portFramesTooLong.setDescription('Counts packets that had a length greater than 1518 octets.')
portShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: portShortEvents.setDescription('Counts events that lasted for 82 bit times or less.')
portRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRunts.setStatus('mandatory')
if mibBuilder.loadTexts: portRunts.setDescription('Counts events longer than 82 bit times, but shorter than 512 bit times')
portCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portCollisions.setDescription('Counts events longer than 82 bit times, but shorter than 512 bit times')
portLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLateEvents.setStatus('mandatory')
if mibBuilder.loadTexts: portLateEvents.setDescription('Counts the number of times collisions was detected more than 512 bit times adter the start or carrier')
portVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVeryLongEvents.setStatus('mandatory')
if mibBuilder.loadTexts: portVeryLongEvents.setDescription('Counts the number of times any activity continued for more than 4 to 7.5 ms.')
portDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDataRateMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: portDataRateMismatches.setDescription('Counts the number of times the incoming data rate mis-matched the local clock source enough to cause a FIFO underflow or overflow.')
portAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutoPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: portAutoPartitions.setDescription('Counts the number of times this port has been parti- tioned by the Auto-partition algorithm')
portTrackSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrackSrcAddrChanges.setStatus('mandatory')
if mibBuilder.loadTexts: portTrackSrcAddrChanges.setDescription('Counts the number of times the source address has changed.')
portBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBroadcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: portBroadcastPkts.setDescription('Counts the number of good broadcast packets received by this port.')
portMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMulticastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: portMulticastPkts.setDescription('Counts the number of good multicast packets received by this port.')
mibBuilder.exportSymbols("LINKSYS-MIB", statsPkts65to127Octets=statsPkts65to127Octets, deviceId=deviceId, statsMulticastPkts=statsMulticastPkts, statsPkts512to1023Octets=statsPkts512to1023Octets, portReadableOctets=portReadableOctets, portDataRateMismatches=portDataRateMismatches, ehSwVer=ehSwVer, statHubIdx=statHubIdx, nwayPartner=nwayPartner, linksys=linksys, linkEn=linkEn, speedSet=speedSet, portShortEvents=portShortEvents, statsCollisions=statsCollisions, ctlHubIdx=ctlHubIdx, statsFragments=statsFragments, statsPkts128to255Octets=statsPkts128to255Octets, nwayRestart=nwayRestart, statsPkts256to511Octets=statsPkts256to511Octets, statsJabbers=statsJabbers, portBroadcastPkts=portBroadcastPkts, portMulticastPkts=portMulticastPkts, statsBroadcastPkts=statsBroadcastPkts, statsPkts1024to1518Octets=statsPkts1024to1518Octets, portRunts=portRunts, cntPortIdx=cntPortIdx, ehNumber=ehNumber, sp2StEntry=sp2StEntry, portTrackSrcAddrChanges=portTrackSrcAddrChanges, cntHubIdx=cntHubIdx, sp2Ports=sp2Ports, portCollisions=portCollisions, counterEntry=counterEntry, sp2CtlEntry=sp2CtlEntry, ehHwVer=ehHwVer, portFramesTooLong=portFramesTooLong, etherHub=etherHub, statsOversizePkts=statsOversizePkts, portReadableFrames=portReadableFrames, portAutoPartitions=portAutoPartitions, portLateEvents=portLateEvents, polaritySt=polaritySt, statsPkts=statsPkts, speedSt=speedSt, statsPkts64Octets=statsPkts64Octets, linkSt=linkSt, statPortIdx=statPortIdx, statsOctets=statsOctets, enable=enable, sp2Statistic=sp2Statistic, sp2Hub=sp2Hub, nwayEn=nwayEn, partitionSt=partitionSt, statsUndersizePkts=statsUndersizePkts, portAlignmentErrors=portAlignmentErrors, portFrameCheckSequence=portFrameCheckSequence, ctlPortIdx=ctlPortIdx, sp2Status=sp2Status, sp2Control=sp2Control, portVeryLongEvents=portVeryLongEvents, statsCrcAlignErrors=statsCrcAlignErrors, statsTotalValidOctets=statsTotalValidOctets, resetModule=resetModule)
