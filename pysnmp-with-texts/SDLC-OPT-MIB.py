#
# PySNMP MIB module SDLC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SDLC-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, IpAddress, iso, Bits, Integer32, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, mgmt, Unsigned32, ObjectIdentity, NotificationType, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "IpAddress", "iso", "Bits", "Integer32", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "mgmt", "Unsigned32", "ObjectIdentity", "NotificationType", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContSDLC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PCTSDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12), )
if mibBuilder.loadTexts: cdx6500PCTSDLCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PCTSDLCPortTable.setDescription('All of the configuration parameters relevant to the SDLC Port table.')
cdx6500PCTSDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcpCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PCTSDLCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PCTSDLCPortEntry.setDescription('A row of SDLC Port configuration parameters.')
cdx6500sdlcpCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpCfgPortNum.setDescription('Specifies a specific port (physical port number) in the node.')
cdx6500sdlcpSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hpad", 0), ("tpad", 1), ("newvalHpad", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSubType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpSubType.setDescription("This is the SDLC port subtype hpad - Host PAD. tpad - Terminal PAD. newvalHpad - same functionality as 'hpad', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcpTxCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTxCoding.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpTxCoding.setDescription("This is the data encoding used on the SDLC link. nrz - Non Return to Zero nrzi - Non Return to Zero Inverted newvalNrz - same functionality as 'nrz', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcpLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("hdxdce", 2), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpLineType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpLineType.setDescription("Type of line, indicates whether half duplex or full duplex signals are being generated. fdx - communications occuring in both directions simultaneously between devices. hdx - transmission occuring in both directions, but only one direction at a time. This operation is not currently supported. hdxdce - (Half Duplex DCE) This is used on the HPAD when the port is a DCE and the port is interfacing directly to a FEP. The port detects RTS go HIGH, waits RTS TO CTS DELAY ms, and raises CTS. newvalHdx - same functionality as 'hdx', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcpTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tws", 0), ("twa", 1), ("newvalTws", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTxType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpTxType.setDescription("This is the transmission mode used on the line. tws - Two way Simultaneout. twa - Two Way Alternate used by most controllers. newvalTws - same functionality as 'tws', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcpSendSigDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deprecatedObj", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSendSigDelay.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500sdlcpSendSigDelay.setDescription('This object is replaced by cdx6500sdlcpHPADResponseDelay. This is a configurable delay that defines the amount of time that the HPAD delays before sending a response to the HOST. The delay is specified in milliseconds.')
cdx6500sdlcpClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpClock.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpClock.setDescription("int - Internal clock source. ext - External clock source. newvalInt - same functionality as 'int', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcpClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking.')
cdx6500sdlcpNumControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpNumControllers.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpNumControllers.setDescription('This is the number of controllers (PU TYPE 1 or PU TYPE 2 devices) on the SDLC line.')
cdx6500sdlcpPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPollTimer.setDescription('Worst case delay for a slave to respond to a poll frame sent by the master, including modem turn around time, etc. Value in 10ths of second ( 30 = 3.0 seconds ).')
cdx6500sdlcpPollFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPollFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPollFrequency.setDescription('Time in milliseconds between polls when no data is exchanged.')
cdx6500sdlcpTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpTries.setDescription('Maximum number of attempts to complete a transmission.')
cdx6500sdlcpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpOptions.setDescription('Select options on this SDLC port as follows: NONE - no option specified MARKi - port uses mark idle between frame exchanges (Required by System 36 - AS/400 series) DMs - HPAD does not send DM in response to SNRM/XID received from host. After call is accepted and TPAD responds with QUA/QXID, HPAD will send UA/XID. DISCs - TPAD sends a DISC frame when station goes down. The DISC may be retransmitted up to Tries times, if the Cluster Controller does not respond, before sending a SNRM. FFBF - TPAD sends a broadcast XID. If the number of controllers configured is equal to 1 and the associated QLLC station table option is not XIDs the TPAD will poll with a broadcast address until a secondary station response address is received.')
cdx6500sdlcpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPortAddress.setDescription('When an SDLC port makes a call, this address is inserted into the calling address field.')
cdx6500sdlcpPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPortOptions.setDescription('Specify any of the following port control options: NONE - no option specified MB - raise Pin 22 when the port becomes disabled')
cdx6500sdlcpHPADResponseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 51, 100, 150, 200, 50))).clone(namedValues=NamedValues(("msec0", 0), ("msec50", 51), ("msec100", 100), ("msec150", 150), ("msec200", 200), ("newvalMsec0", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpHPADResponseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpHPADResponseDelay.setDescription("This object replaces cdx6500sdlcpSendSigDelay. This is a configurable delay that defines the amount of time that the HPAD delays before sending a response to the HOST. The delay is specified in milliseconds. newvalMsec0 : same functionality as 'msec0', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcpMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpMaxFrameSize.setDescription('Maximum size (in bytes) of a frame, excluding the frame header and CRC.')
cdx6500sdlcpRtsCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRtsCtsDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRtsCtsDelay.setDescription('Delay in milliseconds that the HDX DCE TPAD or the HDXDCE HPAD waits from the time it detects RTS go HIGH until the time it raises CTS. It is accurate to +/- 2 milliseconds.')
cdx6500sdlcpElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500sdlcpV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500sdlcpHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTSDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12), )
if mibBuilder.loadTexts: cdx6500PPSTSDLCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTSDLCPortTable.setDescription('All of the statistics parameters relevant to the SDLC Port table.')
cdx6500PPSTSDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcpStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTSDLCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTSDLCPortEntry.setDescription('A row of SDLC Port statistics parameters.')
cdx6500sdlcpStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpStatsPortNum.setDescription('Specifies a specific port (physical port number) in the node.')
cdx6500sdlcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyout", 2), ("up", 3), ("down", 4), ("newvaldisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPortStatus.setDescription("Specifies the current port status. up : At least one station is responding to polls. down : None of the stattions are responding to polls. disabled : The port is disabled by the user. newvalDisabled : same functionality as 'disabled', new enumeration added for RFc1155 compatibility.")
cdx6500sdlcpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPortSpeed.setDescription('The measured port speed in bits per second.')
cdx6500sdlcpCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpCharInTotal.setDescription('Total number of characters received until now, not including all SDLC header characters.')
cdx6500sdlcpCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpCharOutTotal.setDescription('Total number of characters transmitted until now, not including all SDLC header characters.')
cdx6500sdlcpCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpCharsInPerSec.setDescription('The average number of characters received per second during the previous minute.')
cdx6500sdlcpCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpCharsOutPerSec.setDescription('The average number of characters transmitted per second during the previous minute.')
cdx6500sdlcpFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpFrameInTotal.setDescription('Total number of SDLC frames received until now.')
cdx6500sdlcpFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpFrameOutTotal.setDescription('The total number of SDLC frames transmitted until now.')
cdx6500sdlcpFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpFramesInPerSec.setDescription('The average number of frames received per second during the previous minute.')
cdx6500sdlcpFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpFramesOutPerSec.setDescription('The average number of frames transmitted per second during the previous minute.')
cdx6500sdlcpStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpStateChange.setDescription('The date and time when the link entered the current state.')
cdx6500sdlcpLinkDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 13), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpLinkDowns.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpLinkDowns.setDescription('Total number of times link has made a transition from the UP state to the DOWN state.')
cdx6500sdlcpUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUtilizationIn.setDescription('Indicates a percentage of the link resources currently in use in the IN(from the line to the port) direction.')
cdx6500sdlcpUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUtilizationOut.setDescription('Indicates a percentage of the link resources currently in use in the OUT(from the port to the line) direction.')
cdx6500sdlcpOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpOverrunErrors.setDescription('Total number of overrun errors counted by the I/O driver. Overrun errors occur when received data is lost because it cannot be processed by the CPU.')
cdx6500sdlcpUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 17), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUnderrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUnderrunErrors.setDescription('Total number of underrun errors counted by the I/O driver. Underrun errors occur when the transmission of a frame cannot be completed because of momentary CPU overload.')
cdx6500sdlcpCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 18), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpCRCErrors.setDescription('Total number of CRC errors counted by the I/O driver.')
cdx6500sdlcpPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpPacketsQueued.setDescription('Total number of packets queued at the SDLC protocol layer by the transmitter.')
cdx6500sdlcpRRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRRInFrames.setDescription('Total number of RR frames received until the present time.')
cdx6500sdlcpRROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRROutFrames.setDescription('Total number of RR frames transmitted until the present time.')
cdx6500sdlcpRNRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRNRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRNRInFrames.setDescription('Total number of RNR frames received until the present time.')
cdx6500sdlcpRNROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRNROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRNROutFrames.setDescription('Total number of RNR frames transmitted until the present time.')
cdx6500sdlcpSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSNRMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpSNRMInFrames.setDescription('Total number of SNRM frames received until the present time.')
cdx6500sdlcpSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSNRMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpSNRMOutFrames.setDescription('Total number of SNRM frames transmitted until the present time.')
cdx6500sdlcpUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUAInFrames.setDescription('Total number of UA frames received until the present time.')
cdx6500sdlcpUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUAOutFrames.setDescription('Total number of UA frames transmitted until the present time.')
cdx6500sdlcpDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpDMInFrames.setDescription('Total number of DM frames received until the present time.')
cdx6500sdlcpDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpDMOutFrames.setDescription('Total number of DM frames transmitted until the present time.')
cdx6500sdlcpXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXIDInFrames.setDescription('Total number of XID frames received until the present time.')
cdx6500sdlcpXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXIDOutFrames.setDescription('Total number of XID frames transmitted until the present time.')
cdx6500sdlcpREJInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpREJInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpREJInFrames.setDescription('Total number of REJ frames received until the present time.')
cdx6500sdlcpREJOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpREJOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpREJOutFrames.setDescription('Total number of REJ frames transmitted until the present time.')
cdx6500sdlcpDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDISCInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpDISCInFrames.setDescription('Total number of DISC frames received until the present time.')
cdx6500sdlcpDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDISCOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpDISCOutFrames.setDescription('Total number of DISC frames transmitted until the present time.')
cdx6500sdlcpRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRDInFrames.setDescription('Total number of RD frames received until the present time.')
cdx6500sdlcpRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpRDOutFrames.setDescription('Total number of RD frames transmitted until the present time.')
cdx6500sdlcpFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpFRMRInFrames.setDescription('Total number of FRMR frames received until the present time.')
cdx6500sdlcpFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpFRMROutFrames.setDescription('Total number of FRMR frames transmitted until the present time.')
cdx6500sdlcpUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUPInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUPInFrames.setDescription('Total number of UP frames received until the present time.')
cdx6500sdlcpUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUPOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpUPOutFrames.setDescription('Total number of UP frames transmitted until the present time.')
cdx6500sdlcpTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTESTInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpTESTInFrames.setDescription('Total number of TEST frames received until the present time.')
cdx6500sdlcpTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTESTOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpTESTOutFrames.setDescription('Total number of TEST frames transmitted until the present time.')
cdx6500sdlcpXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDNullInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXIDNullInFrames.setDescription('Total number of XID Null frames received until the present time.')
cdx6500sdlcpXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDNullOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXIDNullOutFrames.setDescription('Total number of XID Null frames transmitted until the present time.')
cdx6500sdlcpXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID0InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXID0InFrames.setDescription('Total number of XID Type 0 frames received until the present time.')
cdx6500sdlcpXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID0OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXID0OutFrames.setDescription('Total number of XID Type 0 frames transmitted until the present time.')
cdx6500sdlcpXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID1InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXID1InFrames.setDescription('Total number of XID Type 1 frames received until the present time.')
cdx6500sdlcpXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID1OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXID1OutFrames.setDescription('Total number of XID Type 1 frames transmitted until the present time.')
cdx6500sdlcpXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID3InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXID3InFrames.setDescription('Total number of XID Type 3 frames received until the present time.')
cdx6500sdlcpXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID3OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcpXID3OutFrames.setDescription('Total number of XID Type 3 frames transmitted until the present time.')
cdx6500SPCTSDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4), )
if mibBuilder.loadTexts: cdx6500SPCTSDLCStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTSDLCStationTable.setDescription('All of the configuration parameters relevant to the SDLC Station table.')
cdx6500SPCTSDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcsCfgPortNum"), (0, "SDLC-OPT-MIB", "cdx6500sdlcsCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTSDLCStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTSDLCStationEntry.setDescription('A row of SDLC station configuration parameters.')
cdx6500sdlcsCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCfgPortNum.setDescription('Refers to the physical port number.')
cdx6500sdlcsCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCfgStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCfgStationNum.setDescription('The number of the controller on the multidrop line. Also used for routing purposes.')
cdx6500sdlcsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsStationAddr.setDescription('The station address on the multidrop line.')
cdx6500sdlcsFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFrameWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFrameWinSize.setDescription('Frame level window size must be set to the same value in devices at each end of the link.')
cdx6500sdlcsAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsAutocallMnem.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsAutocallMnem.setDescription('This mnemonic references the remote address which will be called when polling activity is detected on the sdlc line.')
cdx6500sdlcsProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsProtocolID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsProtocolID.setDescription('The protocol identifier is the first four bytes of the call user data. If not configured the PAD will use C3000000 as the protocol ID in the call.')
cdx6500sdlcsCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(23, 23)).setFixedLength(23)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCUG.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCUG.setDescription('The station may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number (except --)and separated by a comma. (e.g. 12,34,56,09,02,03). -- - No CUG Membership 00-99 - CUG Membership')
cdx6500sdlcsOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsOptions.setDescription('Select options on this SDLC station as follows: NONE - no option specified. CUG - check closed user group in incoming calls, and insert closed user group facility in outgoing calls. QRRs - HPAD sends QRR after QLLC link comes up XIDs - TPAD responds to QXIDs with XID configured for this station XIDs are not sent to the Cluster Controller. XID3 - HPAD and TPAD will pass XIDs transparently. This option should not be set if XIDs option is selected. Corresponding station options must be XID3. RNRs - TPAD initially polls with RNR until a data packet or an QRR is received by the QLLC station on the TPAD side. DFC - the station will wait the amount of time specified by the call timer before placing the first call.')
cdx6500sdlcsStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStationID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsStationID.setDescription('This is the identification sent by the TPAD in a response. to a QXID when XIDs are enabled in the QLLC Options.')
cdx6500sdlcsBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvaloff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsBillingFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsBillingFlag.setDescription("This controls whether billing (accounting) records will be created for calls on this port. off - Billing (accounting) records will not be created for calls on this port. on - Billing (accounting) records will be created for calls on this port. newvalOff - same functionality as 'off', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcsStnSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStnSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsStnSubaddress.setDescription('The calling subaddress is appended to the port address to create the calling address in the autocall generated.')
cdx6500sdlcsGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsGroupAddress.setDescription('This is the address of the poll group to which this station belongs. Enter an address of 0x00 for no group membership.')
cdx6500sdlcsX25Password = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsX25Password.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsX25Password.setDescription('Only TPAD initiated autocall packets shall use this feature. The X.25 Network Password which may be up to 12 bytes long is inserted in the CUD of the Call Request packet. Padding with spaces must be added as necessary. Configure the Protocol ID to C3 01 00 00.')
cdx6500sdlcsProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("cponly", 1), ("fulldcp", 2), ("newvalnone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsProtectionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsProtectionLevel.setDescription("This specifies the level of data or connection protection which will be applied to calls to or from this port. The actual level for a call will be negotiated to the lesser of this level and the level configured for the other end of the call. none - No protection. cpOnly - Connection protection only. fullDcp - Full data and connection protection. newvalNone - same functionality as 'none', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcsReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsReconnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsReconnectTimeout.setDescription('This specifies the number of seconds that DCP on the originating side will wait between reconnection attempts.')
cdx6500sdlcsReconnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsReconnectLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsReconnectLimit.setDescription('This specifies the number of times that DCP on the originating side will attempt to reconnect before clearing the call. If 0 is entered, it will not attempt to reconnect.')
cdx6500sdlcsTrafficPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("lowpriority", 0), ("medpriority", 1), ("hipriority", 2), ("xppriority", 3), ("newvallowpriority", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsTrafficPriority.setStatus('optional')
if mibBuilder.loadTexts: cdx6500sdlcsTrafficPriority.setDescription("This is the traffic priority of the SDLC station; low, medium, high, or expedite. newvalLowPriority : same functionality as 'lowPriority', new enumeration added for RFC1155 compatibility.")
cdx6500sdlcsCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCallTimer.setDescription('This specifies the time before the next call is made. If 0 is entered, the time to the next call is handled internally. The time is in seconds.')
cdx6500sdlcsIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsIdleTimer.setDescription('The Link Idle Timer is used by the SNA Dial on Demand feature for determining how long the station should wait for a data frame before bringing the X.25 call down. If a 0 is entered, the call will never be brought down. The time is in seconds.')
cdx6500sdlcsVerConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsVerConnTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsVerConnTimer.setDescription('The Verify Connection Timer is used by the SNA Dial on Demand feature for periodically verifying that the connection to the remote station is still active, after the link has been suspended. The timer specifies how long the the station waits before verifying the connection. If a 0 is entered, the connection will never be verified. The time is in seconds.')
cdx6500sdlcsUnsusWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUnsusWaitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUnsusWaitTimer.setDescription('The Unsuspend Wait Timer is used by the SNA Dial on Demand feature for determining how long the station will wait in LINK-UNSUSPENDING state after receiving a call request before bringing the station down. If a 0 is entered, the station waits in LINK-UNSUSPENDED state forever. Time is in seconds.')
cdx6500sdlcsMaxCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsMaxCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsMaxCallAttempts.setDescription('The Max Call Attempts is used to specify the number of times that the SDLC stations will attempt to autocall a remote destination. A value of zero will allow unlimited attempts.')
cdx6500SPSTSDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4), )
if mibBuilder.loadTexts: cdx6500SPSTSDLCStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTSDLCStationTable.setDescription('All of the statistics parameters relevant to the SDLC Station table.')
cdx6500SPSTSDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcsStatsPortNum"), (0, "SDLC-OPT-MIB", "cdx6500sdlcsStatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTSDLCStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTSDLCStationEntry.setDescription('A row of SDLC station Statistics parameters.')
cdx6500sdlcsStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsStatsPortNum.setDescription('Refers to the physical port number.')
cdx6500sdlcsStatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStatsStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsStatsStationNum.setDescription('Station reference number.')
cdx6500sdlcsStatsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStatsStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsStatsStationAddr.setDescription('Configured station address.')
cdx6500sdlcsQLLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQLLCState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQLLCState.setDescription('Indicates the status of the QLLC layer: INOPERATIVE : No connection exists with the station. LINK-CLOSED : X.25 call is connected, but there has been no successful QXID exchange and data cannot pass. LINK-OPENING: The X.25 call is connected and there has been a successful QXID exchange. However, there has been no QUA or QDM response to a QSM command. LINK-OPENED : X.25 call is connected and data is passing. LINK-CLOSING: Disconnect in process. Station may come back up after an SVC clear or PVC reset. If it does not, boot the station to clear it. LINK-RECOVERY: X.25 call is connected and the station has sent a QFRMR packet over the link. Station may come back up after SVC clear or PVC reset. If it does not recover, boot the station to clear it. NOTE: This value is not supported by the 6500.')
cdx6500sdlcsCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCharInTotal.setDescription('Total number of characters received until now, not including SDLC header characters.')
cdx6500sdlcsCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCharOutTotal.setDescription('Total number of characters transmitted until now, not including SDLC header characters.')
cdx6500sdlcsCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCharsInPerSec.setDescription('The average number of characters received per second during the previous minute.')
cdx6500sdlcsCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsCharsOutPerSec.setDescription('The average number of characters transmitted per second during the previous minute.')
cdx6500sdlcsFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFrameInTotal.setDescription('Total number of frames received.')
cdx6500sdlcsFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFrameOutTotal.setDescription('Total number of frames transmitted.')
cdx6500sdlcsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFramesInPerSec.setDescription('The average number of frames received per second during the previous minute.')
cdx6500sdlcsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFramesOutPerSec.setDescription('The average number of frames transmitted per second during the previous minute.')
cdx6500sdlcsQRRInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 13), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRRInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQRRInTotal.setDescription('Total number of QRR packets received until now.')
cdx6500sdlcsQRROutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRROutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQRROutTotal.setDescription('Total number of QRR packets transmitted until now.')
cdx6500sdlcsUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUtilizationIn.setDescription('Indicates a percentage of the link resources currently in use in the IN(from the line to the port) direction.')
cdx6500sdlcsUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUtilizationOut.setDescription('Indicates a percentage of the link resources currently in use in the OUT(from the port to the line) direction.')
cdx6500sdlcsPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsPacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsPacketsQueued.setDescription('Total number of packets queued at the SDLC protocol layer by the transmitter.')
cdx6500sdlcsRRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsRRInFrames.setDescription('Total number of RR frames received until the present time.')
cdx6500sdlcsRROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsRROutFrames.setDescription('Total number of RR frames transmitted until the present time.')
cdx6500sdlcsRNRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRNRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsRNRInFrames.setDescription('Total number of RNR frames received until the present time.')
cdx6500sdlcsRNROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRNROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsRNROutFrames.setDescription('Total number of RNR frames transmitted until the present time.')
cdx6500sdlcsSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsSNRMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsSNRMInFrames.setDescription('Total number of SNRM frames received until the present time.')
cdx6500sdlcsSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsSNRMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsSNRMOutFrames.setDescription('Total number of SNRM frames transmitted until the present time.')
cdx6500sdlcsUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUAInFrames.setDescription('Total number of UA frames received until the present time.')
cdx6500sdlcsUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUAOutFrames.setDescription('Total number of UA frames transmitted until the present time.')
cdx6500sdlcsDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsDMInFrames.setDescription('Total number of DM frames received until the present time.')
cdx6500sdlcsDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsDMOutFrames.setDescription('Total number of DM frames transmitted until the present time.')
cdx6500sdlcsXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXIDInFrames.setDescription('Total number of XID frames received until the present time.')
cdx6500sdlcsXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXIDOutFrames.setDescription('Total number of XID frames transmitted until the present time.')
cdx6500sdlcsREJInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsREJInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsREJInFrames.setDescription('Total number of REJ frames received until the present time.')
cdx6500sdlcsREJOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsREJOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsREJOutFrames.setDescription('Total number of REJ frames transmitted until the present time.')
cdx6500sdlcsDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDISCInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsDISCInFrames.setDescription('Total number of DISC frames received until the present time.')
cdx6500sdlcsDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDISCOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsDISCOutFrames.setDescription('Total number of DISC frames transmitted until the present time.')
cdx6500sdlcsRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsRDInFrames.setDescription('Total number of RD frames received until the present time.')
cdx6500sdlcsRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsRDOutFrames.setDescription('Total number of RD frames transmitted until the present time.')
cdx6500sdlcsFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFRMRInFrames.setDescription('Total number of FRMR frames received until the present time.')
cdx6500sdlcsFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsFRMROutFrames.setDescription('Total number of FRMR frames transmitted until the present time.')
cdx6500sdlcsUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUPInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUPInFrames.setDescription('Total number of UP frames received until the present time.')
cdx6500sdlcsUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUPOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsUPOutFrames.setDescription('Total number of UP frames transmitted until the present time.')
cdx6500sdlcsTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsTESTInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsTESTInFrames.setDescription('Total number of TEST frames received until the present time.')
cdx6500sdlcsTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsTESTOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsTESTOutFrames.setDescription('Total number of TEST frames transmitted until the present time.')
cdx6500sdlcsQSMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 42), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQSMInFrames.setDescription('Total number of QSM packets received until the present time.')
cdx6500sdlcsQSMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 43), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQSMOutFrames.setDescription('Total number of QSM packets transmitted until the present time.')
cdx6500sdlcsQUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 44), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQUAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQUAInFrames.setDescription('Total number of QUA packets received until the present time.')
cdx6500sdlcsQUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 45), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQUAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQUAOutFrames.setDescription('Total number of QUA packets transmitted until the present time.')
cdx6500sdlcsQRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 46), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQRDInFrames.setDescription('Total number of QRD packets received until the present time.')
cdx6500sdlcsQRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 47), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQRDOutFrames.setDescription('Total number of QRD packets transmitted until the present time.')
cdx6500sdlcsQFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 48), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQFRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQFRMRInFrames.setDescription('Total number of QFRMR packets received until the present time.')
cdx6500sdlcsQFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 49), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQFRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQFRMROutFrames.setDescription('Total number of QFRMR packets transmitted until the present time.')
cdx6500sdlcsQXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 50), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQXIDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQXIDInFrames.setDescription('Total number of QXID packets received until the present time.')
cdx6500sdlcsQXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 51), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQXIDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQXIDOutFrames.setDescription('Total number of QXID packets transmitted until the present time.')
cdx6500sdlcsQDCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 52), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDCInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQDCInFrames.setDescription('Total number of QDC packets received until the present time.')
cdx6500sdlcsQDCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 53), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDCOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQDCOutFrames.setDescription('Total number of QDC packets transmitted until the present time.')
cdx6500sdlcsQDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 54), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQDMInFrames.setDescription('Total number of QDM packets received until the present time.')
cdx6500sdlcsQDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 55), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQDMOutFrames.setDescription('Total number of QDM packets transmitted until the present time.')
cdx6500sdlcsQTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 56), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQTESTInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQTESTInFrames.setDescription('Total number of QTEST packets received until the present time.')
cdx6500sdlcsQTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 57), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQTESTOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQTESTOutFrames.setDescription('Total number of QTEST packets transmitted until the present time.')
cdx6500sdlcsQSSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 58), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSSInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQSSInFrames.setDescription('Total number of QSS packets received until the present time.')
cdx6500sdlcsQSSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 59), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSSOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQSSOutFrames.setDescription('Total number of QSS packets transmitted until the present time.')
cdx6500sdlcsQRSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 60), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRSInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQRSInFrames.setDescription('Total number of QRS packets received until the present time.')
cdx6500sdlcsQRSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 61), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRSOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsQRSOutFrames.setDescription('Total number of QRS packets transmitted until the present time.')
cdx6500sdlcsXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDNullInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXIDNullInFrames.setDescription('Total number of XID Null frames received until the present time.')
cdx6500sdlcsXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDNullOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXIDNullOutFrames.setDescription('Total number of XID Null frames transmitted until the present time.')
cdx6500sdlcsXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID0InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXID0InFrames.setDescription('Total number of XID Type 0 frames received until the present time.')
cdx6500sdlcsXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID0OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXID0OutFrames.setDescription('Total number of XID Type 0 frames transmitted until the present time.')
cdx6500sdlcsXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID1InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXID1InFrames.setDescription('Total number of XID Type 1 frames received until the present time.')
cdx6500sdlcsXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID1OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXID1OutFrames.setDescription('Total number of XID Type 1 frames transmitted until the present time.')
cdx6500sdlcsXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID3InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXID3InFrames.setDescription('Total number of XID Type 3 frames received until the present time.')
cdx6500sdlcsXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID3OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsXID3OutFrames.setDescription('Total number of XID Type 3 frames transmitted until the present time.')
cdx6500sdlcsVSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsVSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsVSNumber.setDescription('Next VS seuqunce number this station expects.')
cdx6500sdlcsVRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsVRNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsVRNumber.setDescription('Next VR seuqunce number this station expects.')
cdx6500sdlcsNRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsNRNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsNRNumber.setDescription('Next NR seuqunce number this station expects.')
cdx6500sdlcsNSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsNSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsNSNumber.setDescription('Next NS seuqunce number this station expects.')
cdx6500ContSDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1), )
if mibBuilder.loadTexts: cdx6500ContSDLCStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContSDLCStationTable.setDescription('All of the control parameters relevant to the SDLC Station table.')
cdx6500ContSDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcsContPortNum"), (0, "SDLC-OPT-MIB", "cdx6500sdlcsContStationNum"))
if mibBuilder.loadTexts: cdx6500ContSDLCStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContSDLCStationEntry.setDescription('A row of SDLC Station Control parameters.')
cdx6500sdlcsContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500sdlcsContPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsContPortNum.setDescription('Refers to the physical port number.')
cdx6500sdlcsContStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cdx6500sdlcsContStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsContStationNum.setDescription('Station reference number.')
cdx6500sdlcsContBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noboot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContBootStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsContBootStation.setDescription('Boots the specified SDLC station. boot - Boot Station noBoot - Do not boot Station')
cdx6500sdlcsContDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("nodisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContDisableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsContDisableStation.setDescription('Disables the specified SDLC station. disable - Disable Station. noDisable - Do not disable Station.')
cdx6500sdlcsContEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noenable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContEnableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsContEnableStation.setDescription('Enables the specified SDLC station. enable - Enable Station. noEnable - Not not enable Station.')
cdx6500sdlcsContBusyOutStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busyout", 1), ("nobusyout", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContBusyOutStation.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500sdlcsContBusyOutStation.setDescription('This operation is no longer supported. Busy out the specified SDLC station. busyOut - Busyout Station. noBusyOut - Do not busyout Station.')
cdx6500sdlcsContResetStnStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noreset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContResetStnStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500sdlcsContResetStnStats.setDescription('Resets statistics for the specified SDLC station reset - Reset Station Statistics noReset - Do not reset Station Statistics')
mibBuilder.exportSymbols("SDLC-OPT-MIB", cdx6500SPCTSDLCStationTable=cdx6500SPCTSDLCStationTable, cdx6500sdlcsFramesInPerSec=cdx6500sdlcsFramesInPerSec, cdx6500sdlcsUAInFrames=cdx6500sdlcsUAInFrames, cdx6500SPSTSDLCStationEntry=cdx6500SPSTSDLCStationEntry, cdx6500sdlcsUPOutFrames=cdx6500sdlcsUPOutFrames, cdx6500sdlcpXID1InFrames=cdx6500sdlcpXID1InFrames, cdx6500sdlcsIdleTimer=cdx6500sdlcsIdleTimer, cdx6500sdlcsRNRInFrames=cdx6500sdlcsRNRInFrames, cdx6500sdlcpUtilizationIn=cdx6500sdlcpUtilizationIn, cdx6500sdlcsUnsusWaitTimer=cdx6500sdlcsUnsusWaitTimer, cdx6500sdlcsQRSOutFrames=cdx6500sdlcsQRSOutFrames, cdx6500sdlcsNRNumber=cdx6500sdlcsNRNumber, cdx6500sdlcsQSMInFrames=cdx6500sdlcsQSMInFrames, cdx6500sdlcpXID1OutFrames=cdx6500sdlcpXID1OutFrames, cdx6500sdlcpREJInFrames=cdx6500sdlcpREJInFrames, cdx6500sdlcpElectricalInterfaceType=cdx6500sdlcpElectricalInterfaceType, cdx6500sdlcpPortSpeed=cdx6500sdlcpPortSpeed, cdx6500sdlcsCallTimer=cdx6500sdlcsCallTimer, cdx6500PCTSDLCPortEntry=cdx6500PCTSDLCPortEntry, cdx6500sdlcpPortOptions=cdx6500sdlcpPortOptions, cdx6500sdlcpDMOutFrames=cdx6500sdlcpDMOutFrames, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500sdlcpCharInTotal=cdx6500sdlcpCharInTotal, cdx6500sdlcsQXIDOutFrames=cdx6500sdlcsQXIDOutFrames, cdx6500sdlcsVSNumber=cdx6500sdlcsVSNumber, cdx6500ContSDLC=cdx6500ContSDLC, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500sdlcpDISCInFrames=cdx6500sdlcpDISCInFrames, cdx6500sdlcpFRMRInFrames=cdx6500sdlcpFRMRInFrames, cdx6500sdlcsQXIDInFrames=cdx6500sdlcsQXIDInFrames, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500sdlcpRtsCtsDelay=cdx6500sdlcpRtsCtsDelay, cdx6500sdlcpMaxFrameSize=cdx6500sdlcpMaxFrameSize, cdx6500sdlcpV24ElectricalInterfaceOption=cdx6500sdlcpV24ElectricalInterfaceOption, cdx6500sdlcpCharsInPerSec=cdx6500sdlcpCharsInPerSec, cdx6500sdlcpFrameOutTotal=cdx6500sdlcpFrameOutTotal, cdx6500sdlcsQSSInFrames=cdx6500sdlcsQSSInFrames, cdx6500sdlcsQFRMROutFrames=cdx6500sdlcsQFRMROutFrames, cdx6500sdlcpCharsOutPerSec=cdx6500sdlcpCharsOutPerSec, cdx6500sdlcpSendSigDelay=cdx6500sdlcpSendSigDelay, cdx6500sdlcsUtilizationIn=cdx6500sdlcsUtilizationIn, cdx6500sdlcpRDOutFrames=cdx6500sdlcpRDOutFrames, cdx6500sdlcpUtilizationOut=cdx6500sdlcpUtilizationOut, DisplayString=DisplayString, cdx6500sdlcsDMOutFrames=cdx6500sdlcsDMOutFrames, cdx6500PCTSDLCPortTable=cdx6500PCTSDLCPortTable, cdx6500sdlcpOverrunErrors=cdx6500sdlcpOverrunErrors, cdx6500sdlcsRRInFrames=cdx6500sdlcsRRInFrames, cdx6500sdlcsContStationNum=cdx6500sdlcsContStationNum, cdx6500sdlcpRNROutFrames=cdx6500sdlcpRNROutFrames, cdx6500sdlcpPollTimer=cdx6500sdlcpPollTimer, cdx6500sdlcsXIDOutFrames=cdx6500sdlcsXIDOutFrames, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500sdlcpTESTInFrames=cdx6500sdlcpTESTInFrames, cdx6500sdlcsFramesOutPerSec=cdx6500sdlcsFramesOutPerSec, cdx6500sdlcsXID3InFrames=cdx6500sdlcsXID3InFrames, cdx6500sdlcpXIDNullInFrames=cdx6500sdlcpXIDNullInFrames, cdx6500sdlcsNSNumber=cdx6500sdlcsNSNumber, cdx6500sdlcsAutocallMnem=cdx6500sdlcsAutocallMnem, cdx6500sdlcpSNRMInFrames=cdx6500sdlcpSNRMInFrames, cdx6500sdlcsUAOutFrames=cdx6500sdlcsUAOutFrames, cdx6500sdlcsQRSInFrames=cdx6500sdlcsQRSInFrames, cdx6500sdlcpPortAddress=cdx6500sdlcpPortAddress, cdx6500sdlcpREJOutFrames=cdx6500sdlcpREJOutFrames, cdx6500sdlcpRRInFrames=cdx6500sdlcpRRInFrames, cdx6500sdlcsQDMOutFrames=cdx6500sdlcsQDMOutFrames, cdx6500sdlcsTESTInFrames=cdx6500sdlcsTESTInFrames, Counter16=Counter16, cdx6500sdlcsQUAInFrames=cdx6500sdlcsQUAInFrames, cdx6500sdlcsQDCOutFrames=cdx6500sdlcsQDCOutFrames, cdx6500sdlcpClock=cdx6500sdlcpClock, cdx6500sdlcsQSSOutFrames=cdx6500sdlcsQSSOutFrames, cdx6500sdlcpDMInFrames=cdx6500sdlcpDMInFrames, cdx6500sdlcsFrameInTotal=cdx6500sdlcsFrameInTotal, cdx6500sdlcsQDMInFrames=cdx6500sdlcsQDMInFrames, cdx6500sdlcsREJInFrames=cdx6500sdlcsREJInFrames, cdx6500sdlcsPacketsQueued=cdx6500sdlcsPacketsQueued, cdx6500sdlcsContEnableStation=cdx6500sdlcsContEnableStation, cdx6500sdlcpTxType=cdx6500sdlcpTxType, cdx6500sdlcsCUG=cdx6500sdlcsCUG, cdx6500sdlcpFRMROutFrames=cdx6500sdlcpFRMROutFrames, cdx6500sdlcpTxCoding=cdx6500sdlcpTxCoding, cdx6500sdlcpUPOutFrames=cdx6500sdlcpUPOutFrames, cdx6500sdlcpHPADResponseDelay=cdx6500sdlcpHPADResponseDelay, cdx6500sdlcpUAInFrames=cdx6500sdlcpUAInFrames, cdx6500sdlcsCharsInPerSec=cdx6500sdlcsCharsInPerSec, cdx6500sdlcsUtilizationOut=cdx6500sdlcsUtilizationOut, cdx6500sdlcsCharInTotal=cdx6500sdlcsCharInTotal, cdx6500sdlcsRNROutFrames=cdx6500sdlcsRNROutFrames, cdx6500sdlcsBillingFlag=cdx6500sdlcsBillingFlag, cdx6500sdlcsTESTOutFrames=cdx6500sdlcsTESTOutFrames, cdx6500sdlcpXID3InFrames=cdx6500sdlcpXID3InFrames, cdx6500sdlcsStationAddr=cdx6500sdlcsStationAddr, cdx6500sdlcpUPInFrames=cdx6500sdlcpUPInFrames, cdx6500sdlcsQTESTInFrames=cdx6500sdlcsQTESTInFrames, cdx6500sdlcsRDInFrames=cdx6500sdlcsRDInFrames, cdx6500sdlcpFramesInPerSec=cdx6500sdlcpFramesInPerSec, cdx6500sdlcpCfgPortNum=cdx6500sdlcpCfgPortNum, cdx6500sdlcpXIDNullOutFrames=cdx6500sdlcpXIDNullOutFrames, cdx6500sdlcsQUAOutFrames=cdx6500sdlcsQUAOutFrames, cdx6500sdlcsXID0OutFrames=cdx6500sdlcsXID0OutFrames, cdx6500PPSTSDLCPortEntry=cdx6500PPSTSDLCPortEntry, cdx6500sdlcpTESTOutFrames=cdx6500sdlcpTESTOutFrames, cdx6500sdlcsREJOutFrames=cdx6500sdlcsREJOutFrames, cdx6500sdlcsContDisableStation=cdx6500sdlcsContDisableStation, cdx6500sdlcsUPInFrames=cdx6500sdlcsUPInFrames, cdxProductSpecific=cdxProductSpecific, cdx6500sdlcsCfgStationNum=cdx6500sdlcsCfgStationNum, cdx6500ContSDLCStationEntry=cdx6500ContSDLCStationEntry, cdx6500sdlcsXID1OutFrames=cdx6500sdlcsXID1OutFrames, cdx6500sdlcsContResetStnStats=cdx6500sdlcsContResetStnStats, cdx6500sdlcsQRDOutFrames=cdx6500sdlcsQRDOutFrames, cdx6500sdlcsFRMRInFrames=cdx6500sdlcsFRMRInFrames, cdx6500sdlcpRDInFrames=cdx6500sdlcpRDInFrames, cdx6500sdlcpStatsPortNum=cdx6500sdlcpStatsPortNum, cdx6500ContSDLCStationTable=cdx6500ContSDLCStationTable, cdx6500sdlcpLinkDowns=cdx6500sdlcpLinkDowns, cdx6500sdlcpRROutFrames=cdx6500sdlcpRROutFrames, cdx6500sdlcsX25Password=cdx6500sdlcsX25Password, cdx6500sdlcsCharsOutPerSec=cdx6500sdlcsCharsOutPerSec, cdx6500sdlcsXID1InFrames=cdx6500sdlcsXID1InFrames, cdx6500sdlcsContBootStation=cdx6500sdlcsContBootStation, cdx6500sdlcpXIDOutFrames=cdx6500sdlcpXIDOutFrames, cdx6500sdlcpXID0OutFrames=cdx6500sdlcpXID0OutFrames, cdx6500sdlcsDMInFrames=cdx6500sdlcsDMInFrames, cdx6500SPCTSDLCStationEntry=cdx6500SPCTSDLCStationEntry, cdx6500sdlcsXIDNullOutFrames=cdx6500sdlcsXIDNullOutFrames, cdx6500sdlcsQFRMRInFrames=cdx6500sdlcsQFRMRInFrames, codex=codex, cdx6500sdlcsOptions=cdx6500sdlcsOptions, cdx6500sdlcpLineType=cdx6500sdlcpLineType, cdx6500sdlcsXID0InFrames=cdx6500sdlcsXID0InFrames, cdx6500sdlcsQRROutTotal=cdx6500sdlcsQRROutTotal, cdx6500sdlcsContPortNum=cdx6500sdlcsContPortNum, cdx6500sdlcpPortStatus=cdx6500sdlcpPortStatus, cdx6500Controls=cdx6500Controls, cdx6500sdlcsGroupAddress=cdx6500sdlcsGroupAddress, cdx6500sdlcsVRNumber=cdx6500sdlcsVRNumber, cdx6500sdlcsReconnectLimit=cdx6500sdlcsReconnectLimit, cdx6500sdlcpFrameInTotal=cdx6500sdlcpFrameInTotal, cdx6500sdlcpXID3OutFrames=cdx6500sdlcpXID3OutFrames, cdx6500sdlcsTrafficPriority=cdx6500sdlcsTrafficPriority, cdx6500sdlcpDISCOutFrames=cdx6500sdlcpDISCOutFrames, cdx6500sdlcpSubType=cdx6500sdlcpSubType, cdx6500sdlcsProtocolID=cdx6500sdlcsProtocolID, cdx6500sdlcsXIDInFrames=cdx6500sdlcsXIDInFrames, cdx6500sdlcpPollFrequency=cdx6500sdlcpPollFrequency, cdx6500sdlcsFrameOutTotal=cdx6500sdlcsFrameOutTotal, cdx6500sdlcsContBusyOutStation=cdx6500sdlcsContBusyOutStation, cdx6500sdlcsStationID=cdx6500sdlcsStationID, cdx6500SPSTSDLCStationTable=cdx6500SPSTSDLCStationTable, cdx6500PPSTSDLCPortTable=cdx6500PPSTSDLCPortTable, cdx6500sdlcpClockSpeed=cdx6500sdlcpClockSpeed, cdx6500sdlcpTries=cdx6500sdlcpTries, cdx6500sdlcsDISCOutFrames=cdx6500sdlcsDISCOutFrames, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500sdlcpNumControllers=cdx6500sdlcpNumControllers, cdx6500Configuration=cdx6500Configuration, cdx6500sdlcpStateChange=cdx6500sdlcpStateChange, cdx6500sdlcpUnderrunErrors=cdx6500sdlcpUnderrunErrors, cdx6500sdlcpUAOutFrames=cdx6500sdlcpUAOutFrames, cdx6500sdlcsFrameWinSize=cdx6500sdlcsFrameWinSize, cdx6500sdlcpHighSpeedElectricalInterfaceOption=cdx6500sdlcpHighSpeedElectricalInterfaceOption, cdx6500sdlcsVerConnTimer=cdx6500sdlcsVerConnTimer, cdx6500sdlcsMaxCallAttempts=cdx6500sdlcsMaxCallAttempts, cdx6500sdlcsXID3OutFrames=cdx6500sdlcsXID3OutFrames, cdx6500sdlcsQRDInFrames=cdx6500sdlcsQRDInFrames, cdx6500sdlcsXIDNullInFrames=cdx6500sdlcsXIDNullInFrames, cdx6500sdlcsStatsStationAddr=cdx6500sdlcsStatsStationAddr, cdx6500sdlcsSNRMInFrames=cdx6500sdlcsSNRMInFrames, cdx6500sdlcpOptions=cdx6500sdlcpOptions, cdx6500=cdx6500, cdx6500sdlcsQDCInFrames=cdx6500sdlcsQDCInFrames, cdx6500sdlcsStatsStationNum=cdx6500sdlcsStatsStationNum, cdx6500sdlcsRDOutFrames=cdx6500sdlcsRDOutFrames, cdx6500sdlcpCRCErrors=cdx6500sdlcpCRCErrors, cdx6500sdlcpSNRMOutFrames=cdx6500sdlcpSNRMOutFrames, cdx6500sdlcpXIDInFrames=cdx6500sdlcpXIDInFrames, cdx6500sdlcsStnSubaddress=cdx6500sdlcsStnSubaddress, cdx6500sdlcpCharOutTotal=cdx6500sdlcpCharOutTotal, cdx6500sdlcsQRRInTotal=cdx6500sdlcsQRRInTotal, cdx6500sdlcsFRMROutFrames=cdx6500sdlcsFRMROutFrames, cdx6500Statistics=cdx6500Statistics, cdx6500sdlcsRROutFrames=cdx6500sdlcsRROutFrames, cdx6500sdlcpFramesOutPerSec=cdx6500sdlcpFramesOutPerSec, cdx6500sdlcsQLLCState=cdx6500sdlcsQLLCState, cdx6500sdlcsCfgPortNum=cdx6500sdlcsCfgPortNum, cdx6500sdlcsReconnectTimeout=cdx6500sdlcsReconnectTimeout, cdx6500sdlcsStatsPortNum=cdx6500sdlcsStatsPortNum, cdx6500sdlcsDISCInFrames=cdx6500sdlcsDISCInFrames, cdx6500sdlcpXID0InFrames=cdx6500sdlcpXID0InFrames, cdx6500sdlcsProtectionLevel=cdx6500sdlcsProtectionLevel, cdx6500sdlcsSNRMOutFrames=cdx6500sdlcsSNRMOutFrames, cdx6500sdlcpRNRInFrames=cdx6500sdlcpRNRInFrames, cdx6500sdlcsCharOutTotal=cdx6500sdlcsCharOutTotal, cdx6500sdlcsQTESTOutFrames=cdx6500sdlcsQTESTOutFrames, cdx6500sdlcsQSMOutFrames=cdx6500sdlcsQSMOutFrames, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500sdlcpPacketsQueued=cdx6500sdlcpPacketsQueued)
