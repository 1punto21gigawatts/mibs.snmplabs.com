#
# PySNMP MIB module NETASQ-HOSTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETASQ-HOSTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ntqHosts, = mibBuilder.importSymbols("NETASQ-SMI-MIB", "ntqHosts")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, MibIdentifier, IpAddress, iso, NotificationType, Unsigned32, ObjectIdentity, Gauge32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "MibIdentifier", "IpAddress", "iso", "NotificationType", "Unsigned32", "ObjectIdentity", "Gauge32", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ntqHostsTable = MibTable((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1), )
if mibBuilder.loadTexts: ntqHostsTable.setStatus('current')
if mibBuilder.loadTexts: ntqHostsTable.setDescription('List of hosts')
ntqHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1), ).setIndexNames((0, "NETASQ-HOSTS-MIB", "ntqHostIPAddr"))
if mibBuilder.loadTexts: ntqHostsEntry.setStatus('current')
if mibBuilder.loadTexts: ntqHostsEntry.setDescription('Each entry in the ntqHostsTable holds a set of information.')
ntqHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqHostIPAddr.setStatus('current')
if mibBuilder.loadTexts: ntqHostIPAddr.setDescription('IP Adress of the host')
ntqHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqHostName.setStatus('current')
if mibBuilder.loadTexts: ntqHostName.setDescription('Hostname')
ntqInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqInterface.setStatus('current')
if mibBuilder.loadTexts: ntqInterface.setDescription('Interface')
ntqPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqPackets.setStatus('current')
if mibBuilder.loadTexts: ntqPackets.setDescription('total packet count')
ntqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqBytes.setStatus('current')
if mibBuilder.loadTexts: ntqBytes.setDescription('total byte count (incoming + outgoing)')
ntqConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqConn.setStatus('current')
if mibBuilder.loadTexts: ntqConn.setDescription('current connection count')
ntqCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqCurThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqCurThroughput.setDescription('current throughput')
ntqMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqMaxThroughput.setDescription('Maximum throughput')
ntqInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqInBytes.setStatus('current')
if mibBuilder.loadTexts: ntqInBytes.setDescription('total incoming byte count')
ntqOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqOutBytes.setStatus('current')
if mibBuilder.loadTexts: ntqOutBytes.setDescription('total incoming byte count')
ntqInCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqInCurThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqInCurThroughput.setDescription('current incoming throughput')
ntqOutCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqOutCurThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqOutCurThroughput.setDescription('current outgoing throughput')
ntqInMaxThroughput = MibScalar((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqInMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqInMaxThroughput.setDescription('Maximum incoming throughput')
ntqOutMaxThroughput = MibScalar((1, 3, 6, 1, 4, 1, 11256, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqOutMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: ntqOutMaxThroughput.setDescription('Maximum outgoing throughput')
mibBuilder.exportSymbols("NETASQ-HOSTS-MIB", ntqBytes=ntqBytes, ntqMaxThroughput=ntqMaxThroughput, ntqHostIPAddr=ntqHostIPAddr, ntqOutMaxThroughput=ntqOutMaxThroughput, ntqHostsEntry=ntqHostsEntry, ntqInBytes=ntqInBytes, ntqInMaxThroughput=ntqInMaxThroughput, ntqCurThroughput=ntqCurThroughput, ntqInCurThroughput=ntqInCurThroughput, ntqHostName=ntqHostName, ntqPackets=ntqPackets, ntqConn=ntqConn, ntqOutCurThroughput=ntqOutCurThroughput, ntqOutBytes=ntqOutBytes, ntqInterface=ntqInterface, ntqHostsTable=ntqHostsTable)
