#
# PySNMP MIB module JUNIPER-RPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-RPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
jnxRPS, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxRPS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, ModuleIdentity, Bits, iso, NotificationType, Gauge32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "ModuleIdentity", "Bits", "iso", "NotificationType", "Gauge32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxRPSMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1))
jnxRPSMIBObjects.setRevisions(('2009-08-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxRPSMIBObjects.setRevisionsDescriptions(('Data types of jnxRPSFanStatus and jnxRPSSystemStatus are changed to JnxRPSStatus',))
if mibBuilder.loadTexts: jnxRPSMIBObjects.setLastUpdated('200708290000Z')
if mibBuilder.loadTexts: jnxRPSMIBObjects.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxRPSMIBObjects.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxRPSMIBObjects.setDescription('This module contains definitions of management information for Redundant power supply.')
class JnxRPSStatus(TextualConvention, Integer32):
    description = 'RPS Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("green", 0), ("red", 1), ("amber", 2), ("green-blink", 3), ("red-blink", 4), ("amber-blink", 5), ("off", 6))

jnxRPSVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1), )
if mibBuilder.loadTexts: jnxRPSVersionTable.setStatus('current')
if mibBuilder.loadTexts: jnxRPSVersionTable.setDescription('A Table containing RPS Version details.')
jnxRPSVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"))
if mibBuilder.loadTexts: jnxRPSVersionEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRPSVersionEntry.setDescription('RPS Version details on a specific serial number.')
jnxRPSSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12))
if mibBuilder.loadTexts: jnxRPSSerialNumber.setStatus('current')
if mibBuilder.loadTexts: jnxRPSSerialNumber.setDescription('The RPS Serial Number of the Chassis.')
jnxRPSModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSModel.setStatus('current')
if mibBuilder.loadTexts: jnxRPSModel.setDescription('The RPS Model name of the Chassis.')
jnxRPSFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: jnxRPSFirmwareVersion.setDescription('The RPS Firmware version of the Chassis.')
jnxRPSUBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSUBootVersion.setStatus('current')
if mibBuilder.loadTexts: jnxRPSUBootVersion.setDescription('The RPS UBoot verison of the Chassis.')
jnxRPSStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2), )
if mibBuilder.loadTexts: jnxRPSStatusTable.setStatus('current')
if mibBuilder.loadTexts: jnxRPSStatusTable.setDescription('A table containing RPS Fan and System Status for each slot.')
jnxRPSStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"))
if mibBuilder.loadTexts: jnxRPSStatusEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRPSStatusEntry.setDescription('Status information for each FAN and SYSTEM slot.')
jnxRPSFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2, 1, 1), JnxRPSStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSFanStatus.setStatus('current')
if mibBuilder.loadTexts: jnxRPSFanStatus.setDescription('The RPS Fan Status on the chassis .')
jnxRPSSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2, 1, 2), JnxRPSStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSSystemStatus.setStatus('current')
if mibBuilder.loadTexts: jnxRPSSystemStatus.setDescription('The RPS System Status on the Chassis.')
jnxRPSPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3), )
if mibBuilder.loadTexts: jnxRPSPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPowerSupplyTable.setDescription('A table containing RPS Power Supply details.')
jnxRPSPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"), (0, "JUNIPER-RPS-MIB", "jnxRPSPowerSupplyIndex"))
if mibBuilder.loadTexts: jnxRPSPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPowerSupplyEntry.setDescription('Information about Power Supply Status and Description.')
jnxRPSPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: jnxRPSPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPowerSupplyIndex.setDescription('The RPS Power Supply Index of the Chassis corresponding to RPS node.')
jnxRPSPowerSupplySlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPowerSupplySlotId.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPowerSupplySlotId.setDescription('The RPS Power Supply Slot ID f the Chassis corresponding to RPS node.')
jnxRPSPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPowerSupplyStatus.setDescription('The RPS Power Supply Status of the Chassis corresponding to RPS node.')
jnxRPSPowerSupplyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPowerSupplyDescription.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPowerSupplyDescription.setDescription('The RPS Power Supply Description of the Chassis corresponding to RPS node.')
jnxRPSLedPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4), )
if mibBuilder.loadTexts: jnxRPSLedPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: jnxRPSLedPortStatusTable.setDescription('A table containing RPS LED Status details.')
jnxRPSLedPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"), (0, "JUNIPER-RPS-MIB", "jnxRPSLedPortIndex"))
if mibBuilder.loadTexts: jnxRPSLedPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRPSLedPortStatusEntry.setDescription('LED Port status of each port.')
jnxRPSLedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxRPSLedPortIndex.setStatus('current')
if mibBuilder.loadTexts: jnxRPSLedPortIndex.setDescription('The RPS Led Port Index of the Chassis corresponding to RPS node.')
jnxRPSLedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSLedPortStatus.setStatus('current')
if mibBuilder.loadTexts: jnxRPSLedPortStatus.setDescription('The RPS Led Port Status of the Chassis corresponding to RPS node.')
jnxRPSPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5), )
if mibBuilder.loadTexts: jnxRPSPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortStatusTable.setDescription('A table containing RPS Port Status details.')
jnxRPSPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"), (0, "JUNIPER-RPS-MIB", "jnxRPSPortIndex"))
if mibBuilder.loadTexts: jnxRPSPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortStatusEntry.setDescription('Port Priority and Status for each port .')
jnxRPSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxRPSPortIndex.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortIndex.setDescription('The RPS Port Index of the Chassis corresponding to RPS node.')
jnxRPSPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortId.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortId.setDescription('The RPS Port ID of the Chassis corresponding to RPS node.')
jnxRPSPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortStatus.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortStatus.setDescription('The RPS Port Status of the Chassis corresponding to RPS node.')
jnxRPSPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortPriority.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortPriority.setDescription('The RPS Port Priority of the Chassis corresponding to RPS node.')
jnxRPSPortPowerRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortPowerRequested.setStatus('current')
if mibBuilder.loadTexts: jnxRPSPortPowerRequested.setDescription('The RPS Led Port Power Requested of the Chassis corresponding to RPS node.')
mibBuilder.exportSymbols("JUNIPER-RPS-MIB", jnxRPSVersionTable=jnxRPSVersionTable, jnxRPSMIBObjects=jnxRPSMIBObjects, jnxRPSLedPortStatusEntry=jnxRPSLedPortStatusEntry, jnxRPSLedPortStatusTable=jnxRPSLedPortStatusTable, jnxRPSVersionEntry=jnxRPSVersionEntry, jnxRPSLedPortIndex=jnxRPSLedPortIndex, jnxRPSPowerSupplyStatus=jnxRPSPowerSupplyStatus, jnxRPSPowerSupplyEntry=jnxRPSPowerSupplyEntry, jnxRPSPortPowerRequested=jnxRPSPortPowerRequested, jnxRPSStatusTable=jnxRPSStatusTable, jnxRPSUBootVersion=jnxRPSUBootVersion, JnxRPSStatus=JnxRPSStatus, jnxRPSPortStatus=jnxRPSPortStatus, PYSNMP_MODULE_ID=jnxRPSMIBObjects, jnxRPSPowerSupplyDescription=jnxRPSPowerSupplyDescription, jnxRPSLedPortStatus=jnxRPSLedPortStatus, jnxRPSFirmwareVersion=jnxRPSFirmwareVersion, jnxRPSPortStatusEntry=jnxRPSPortStatusEntry, jnxRPSPowerSupplySlotId=jnxRPSPowerSupplySlotId, jnxRPSPortPriority=jnxRPSPortPriority, jnxRPSStatusEntry=jnxRPSStatusEntry, jnxRPSPortStatusTable=jnxRPSPortStatusTable, jnxRPSPowerSupplyTable=jnxRPSPowerSupplyTable, jnxRPSSystemStatus=jnxRPSSystemStatus, jnxRPSFanStatus=jnxRPSFanStatus, jnxRPSPortId=jnxRPSPortId, jnxRPSSerialNumber=jnxRPSSerialNumber, jnxRPSPortIndex=jnxRPSPortIndex, jnxRPSPowerSupplyIndex=jnxRPSPowerSupplyIndex, jnxRPSModel=jnxRPSModel)
