#
# PySNMP MIB module H3C-IPSEC-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-IPSEC-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:22:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Gauge32, Unsigned32, Bits, Counter64, IpAddress, NotificationType, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Gauge32", "Unsigned32", "Bits", "Counter64", "IpAddress", "NotificationType", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
h3cIPSecMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7))
if mibBuilder.loadTexts: h3cIPSecMonitor.setLastUpdated('200410260000Z')
if mibBuilder.loadTexts: h3cIPSecMonitor.setOrganization('Huawei-3COM Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cIPSecMonitor.setContactInfo('Huawei 3Com Technologies Co., Ltd. Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei-3com.com ZIP: 100085')
if mibBuilder.loadTexts: h3cIPSecMonitor.setDescription('The MIB is designed to get statistic information of IPSec tunnels. With this MIB, we can get information of a certain tunnel or all tunnels.')
class H3cDiffHellmanGrp(TextualConvention, Integer32):
    description = 'The Diffie Hellman Group used in the IKE and IPSec negotiations. invalidGroup(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 14, 2147483647))
    namedValues = NamedValues(("none", 0), ("modp768", 1), ("modp1024", 2), ("modp1536", 5), ("modp2048", 14), ("invalidGroup", 2147483647))

class H3cEncapMode(TextualConvention, Integer32):
    description = 'The encapsulation mode used by an IPSec Phase-2 Tunnel. invalidMode(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))
    namedValues = NamedValues(("tunnel", 1), ("transport", 2), ("invalidMode", 2147483647))

class H3cEncryptAlgo(TextualConvention, Integer32):
    description = 'The encryption algorithm used in the IKE and IPSec negotiations. invalidAlg(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2147483647))
    namedValues = NamedValues(("none", 0), ("desCbc", 1), ("ideaCbc", 2), ("blowfishCbc", 3), ("rc5R16B64Cbc", 4), ("tripledesCbc", 5), ("castCbc", 6), ("aesCbc", 7), ("nsaCbc", 8), ("aesCbc128", 9), ("aesCbc192", 10), ("aesCbc256", 11), ("invalidAlg", 2147483647))

class H3cAuthAlgo(TextualConvention, Integer32):
    description = 'The authentication algorithm used in the IKE negotiations. invalidAlg(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 2147483647))
    namedValues = NamedValues(("none", 0), ("md5", 1), ("sha", 2), ("invalidAlg", 2147483647))

class H3cSaProtocol(TextualConvention, Integer32):
    description = 'The protocol of security association.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("reserved", 0), ("isakmp", 1), ("ah", 2), ("esp", 3), ("ipcomp", 4))

class H3cTrapStatus(TextualConvention, Integer32):
    description = 'The switch which determines whether send a trap or not.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class H3cIPSecIDType(TextualConvention, Integer32):
    description = 'The type of IPSec Identity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("reserved", 0), ("ipv4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8), ("derAsn1Dn", 9), ("derAsn1Gn", 10), ("keyId", 11))

class H3cTrafficType(TextualConvention, Integer32):
    description = 'The type of the data flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ipv4Addr", 1), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8))

class H3cIPSecNegoType(TextualConvention, Integer32):
    description = 'The type of key used by an IPSec Phase-2 Tunnel. invalidType(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))
    namedValues = NamedValues(("ike", 1), ("manual", 2), ("invalidType", 2147483647))

class H3cIPSecTunnelState(TextualConvention, Integer32):
    description = 'The state of IPSec tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("timeout", 2))

h3cIPSecObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1))
h3cIPSecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1), )
if mibBuilder.loadTexts: h3cIPSecTunnelTable.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelTable.setDescription('The IPSec Phase-2 Tunnel Table. There is one entry in this table for each active IPSec Phase-2 Tunnel.')
h3cIPSecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1), ).setIndexNames((0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIfIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunEntryIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIndex"))
if mibBuilder.loadTexts: h3cIPSecTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelEntry.setDescription('Information about h3cIPSecTunnelTable.')
h3cIPSecTunIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIPSecTunIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunIfIndex.setDescription('The interface index( the ifIndex of ifTable ).')
h3cIPSecTunEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIPSecTunEntryIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunEntryIndex.setDescription('The index of IPSec policy applied in the interface.')
h3cIPSecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIPSecTunIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunIndex.setDescription('The index of IPSec Phase-2 Tunnel Table. The value of the index is a number which begins at one and is incremented with each tunnel that is created. The value of this object will wrap at 2,147,483,647.')
h3cIPSecTunIKETunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunIKETunnelIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunIKETunnelIndex.setDescription('The index of the associated IPSec Phase-1 IKE Tunnel (IKETunIndex in the IKETunnelTable). 2147483647 is defined as invalid value. ')
h3cIPSecTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunLocalAddr.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunLocalAddr.setDescription('The IP address of the local peer for the IPSec Phase-2 Tunnel. 0.0.0.0 is defined as invalid value.')
h3cIPSecTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunRemoteAddr.setDescription('The IP address of the remote peer for the IPSec Phase-2 Tunnel. 0.0.0.0 is defined as invalid value.')
h3cIPSecTunKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 7), H3cIPSecNegoType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunKeyType.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunKeyType.setDescription('The key negotiate mode used by the IPSec Phase-2 Tunnel.')
h3cIPSecTunEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 8), H3cEncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunEncapMode.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunEncapMode.setDescription('The encapsulation mode used by the IPSec Phase-2 Tunnel.')
h3cIPSecTunInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("none", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInitiator.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInitiator.setDescription('The initiator of this IPSec tunnel. Value none is used for manual IPsec tunnel, for there is no initiator or responder in this method.')
h3cIPSecTunLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunLifeSize.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunLifeSize.setDescription('The negotiated LifeSize of the IPSec Phase-2 Tunnel in kilobytes. 0 is defined as invalid value.')
h3cIPSecTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunLifeTime.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunLifeTime.setDescription('The negotiated LifeTime of the IPSec Phase-2 Tunnel in seconds. 2147483647 is defined as invalid value.')
h3cIPSecTunRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunRemainTime.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunRemainTime.setDescription('The remain time of SA in seconds. 2147483647 is defined as invalid value.')
h3cIPSecTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunActiveTime.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunActiveTime.setDescription('The duration the IPSec Phase-2 Tunnel has been active in hundredths of seconds. 2147483647 is defined as invalid value.')
h3cIPSecTunRemainSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunRemainSize.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunRemainSize.setDescription('The remain LifeSize of SA in kilobytes. 0 is defined as invalid value.')
h3cIPSecTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunTotalRefreshes.setDescription('The total number of security association refreshing performed.')
h3cIPSecTunCurrentSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunCurrentSaInstances.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunCurrentSaInstances.setDescription('The number of security associations which are currently active or expiring.')
h3cIPSecTunInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 17), H3cEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInSaEncryptAlgo.setDescription('The encryption algorithm used by the inbound security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 18), H3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInSaAhAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInSaAhAuthAlgo.setDescription('The authentication algorithm used by the inbound authentication header (AH) security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 19), H3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInSaEspAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInSaEspAuthAlgo.setDescription('The authentication algorithm used by the inbound encapsulation security protocol(ESP) security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 20), H3cDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunDiffHellmanGrp.setDescription('The Diffie Hellman Group used by the security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 21), H3cEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutSaEncryptAlgo.setDescription('The encryption algorithm used by the outbound security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 22), H3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutSaAhAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutSaAhAuthAlgo.setDescription('The authentication algorithm used by the outbound authentication header (AH) security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 23), H3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutSaEspAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutSaEspAuthAlgo.setDescription('The authentication algorithm used by the outbound encapsulation security protocol(ESP) security association of the IPSec Phase-2 Tunnel.')
h3cIPSecTunPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunPolicyName.setDescription('The policy name used by this IPSec tunnel.')
h3cIPSecTunPolicyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunPolicyNum.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunPolicyNum.setDescription('The sequence number of policy used by this IPSec tunnel.')
h3cIPSecTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("ready", 2), ("rekeyed", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunStatus.setDescription('The status of the IPSec Tunnel.')
h3cIPSecTunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2), )
if mibBuilder.loadTexts: h3cIPSecTunnelStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStatTable.setDescription('The IPSec Phase-2 Tunnel Statistics Table. ')
h3cIPSecTunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1), ).setIndexNames((0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIfIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunEntryIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIndex"))
if mibBuilder.loadTexts: h3cIPSecTunnelStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStatEntry.setDescription('Information about h3cIPSecTunnelStatTable.')
h3cIPSecTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInOctets.setDescription('The total number of octets received by this IPSec Phase-2 Tunnel. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
h3cIPSecTunInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInDecompOctets.setDescription('The total number of decompressed octets received by this IPSec Phase-2 Tunnel. This value is accumulated AFTER the packet is decompressed.')
h3cIPSecTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInPkts.setDescription('The total number of packets received by this IPSec Phase-2 Tunnel.')
h3cIPSecTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInDropPkts.setDescription('The total number of packets dropped during receiving process by this IPSec Phase-2 Tunnel.')
h3cIPSecTunInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInReplayDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInReplayDropPkts.setDescription('The total number of packets dropped during receiving process due to Anti-Replay process by this IPSec Phase-2 Tunnel.')
h3cIPSecTunInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInAuthFails.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInAuthFails.setDescription("The total number of inbound authentication's which ended in failure by this IPSec Phase-2 Tunnel.")
h3cIPSecTunInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInDecryptFails.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInDecryptFails.setDescription("The total number of inbound decryption's which ended in failure by this IPSec Phase-2 Tunnel.")
h3cIPSecTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutOctets.setDescription('The total number of octets sent by this IPSec Phase-2 Tunnel. This value is accumulated AFTER determining whether or not the packet should be compressed.')
h3cIPSecTunOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutUncompOctets.setDescription('The total number of uncompressed octets sent by this IPSec Phase-2 Tunnel.This value is accumulated BEFORE the packet is compressed.')
h3cIPSecTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutPkts.setDescription('The total number of packets sent by this IPSec Phase-2 Tunnel.')
h3cIPSecTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutDropPkts.setDescription('The total number of packets dropped during sending process by this IPSec Phase-2 Tunnel.')
h3cIPSecTunOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunOutEncryptFails.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunOutEncryptFails.setDescription("The total number of outbound encryption's which ended in failure by this IPSec Phase-2 Tunnel.")
h3cIPSecTunNoMemoryDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunNoMemoryDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunNoMemoryDropPkts.setDescription('The total number of packets dropped due to no enough memory by this IPSec Phase-2 Tunnel.')
h3cIPSecTunQueueFullDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunQueueFullDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunQueueFullDropPkts.setDescription('The total number of packets dropped due to queue full by this IPSec Phase-2 Tunnel.')
h3cIPSecTunInvalidLenDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInvalidLenDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInvalidLenDropPkts.setDescription('The total number of packets dropped due to invalid length packet by this IPSec Phase-2 Tunnel.')
h3cIPSecTunTooLongDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunTooLongDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunTooLongDropPkts.setDescription('The total number of packets dropped due to too long packet by this IPSec Phase-2 Tunnel.')
h3cIPSecTunInvalidSaDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTunInvalidSaDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunInvalidSaDropPkts.setDescription('The total number of packets dropped due to invalid SA by this IPSec Phase-2 Tunnel.')
h3cIPSecSaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3), )
if mibBuilder.loadTexts: h3cIPSecSaTable.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaTable.setDescription('The IPSec Phase-2 Security Protection Index Table. This table contains an entry for each active and expiring security association.')
h3cIPSecSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1), ).setIndexNames((0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIfIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunEntryIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaIndex"))
if mibBuilder.loadTexts: h3cIPSecSaEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaEntry.setDescription('Information about h3cIPSecSaTable.')
h3cIPSecSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIPSecSaIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaIndex.setDescription('The number of the Sa associated with the Phase-2 Tunnel Table. The value of this index is a number which begins at one and is incremented with each Sa associated with an IPSec Phase-2 Tunnel. The value of this object will wrap at 2,147,483,647.')
h3cIPSecSaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecSaDirection.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaDirection.setDescription('The direction of the SA.')
h3cIPSecSaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecSaValue.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaValue.setDescription('The value of the SPI.')
h3cIPSecSaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 4), H3cSaProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecSaProtocol.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaProtocol.setDescription('The security protocol of the SA.')
h3cIPSecSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 5), H3cEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaEncryptAlgo.setDescription('The encryption algorithm used by the security association of the IPSec Phase-2 Tunnel.')
h3cIPSecSaAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 6), H3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecSaAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaAuthAlgo.setDescription('The authentication algorithm used by the SA.')
h3cIPSecSaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecSaStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaStatus.setDescription('The status of the SA.')
h3cIPSecTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4), )
if mibBuilder.loadTexts: h3cIPSecTrafficTable.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficTable.setDescription('The IPSec Phase-2 Tunnel Traffic Table. ')
h3cIPSecTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1), ).setIndexNames((0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIfIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunEntryIndex"), (0, "H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIndex"))
if mibBuilder.loadTexts: h3cIPSecTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficEntry.setDescription('Information about h3cIPSecTrafficTable.')
h3cIPSecTrafficLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 1), H3cTrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficLocalType.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficLocalType.setDescription('The type of local peer. Possible values are: a single IP address, or an IP address range, or an IP subnet.')
h3cIPSecTrafficLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficLocalAddr1.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficLocalAddr1.setDescription("The first specification of local peer's IP address. If the local peer type is single IP address, then this is the value of the IP address. If the local peer type is IP subnet, then this is the value of the subnet. If the local peer type is IP address range, then this is the value of beginning IP address of the range.")
h3cIPSecTrafficLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficLocalAddr2.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficLocalAddr2.setDescription("The second specification of local peer's IP address. If the local peer type is single IP address, then this is the value of the IP address. If the local peer type is IP subnet, then this is the value of the subnet mask. If the local peer type is IP address range, then this is the value of ending IP address of the range.")
h3cIPSecTrafficLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficLocalProtocol.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficLocalProtocol.setDescription("The protocol number of the local peer's traffic.")
h3cIPSecTrafficLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficLocalPort.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficLocalPort.setDescription("The port number of the local peer's traffic.")
h3cIPSecTrafficRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 6), H3cTrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteType.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteType.setDescription('The type of remote peer. Possible values are: a single IP address, or an IP address range, or an IP subnet.')
h3cIPSecTrafficRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteAddr1.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteAddr1.setDescription("The first specification of remote peer's IP address. If the remote peer type is single IP address, then this is the value of the IP address. If the remote peer type is IP subnet, then this is the value of the subnet. If the remote peer type is IP address range, then this is the value of beginning IP address of the range.")
h3cIPSecTrafficRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteAddr2.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteAddr2.setDescription('Single IP address, then this is the value of the IP address. If the remote peer type is IP subnet, then this is the value of the subnet mask. If the remote peer type is IP address range, then this is the value of ending IP address of the range.')
h3cIPSecTrafficRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteProtocol.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficRemoteProtocol.setDescription("The protocol number of the remote peer's traffic.")
h3cIPSecTrafficRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecTrafficRemotePort.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficRemotePort.setDescription("The port number of the remote peer's traffic.")
h3cIPSecGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5))
h3cIPSecGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalActiveTunnels.setDescription('The total number of currently active IPSec Phase-2 Tunnels.')
h3cIPSecGlobalActiveSas = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalActiveSas.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalActiveSas.setDescription('The total number of currently active or expiring IPSec Phase-2 SA.')
h3cIPSecGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInOctets.setDescription('The total number of octets received by all current and previous IPSec Phase-2 Tunnels. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
h3cIPSecGlobalInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInDecompOctets.setDescription('The total number of decompressed octets received by all current and previous IPSec Phase-2 Tunnels. This value is accumulated AFTER the packet is decompressed.')
h3cIPSecGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInPkts.setDescription('The total number of packets received by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalInDrops = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInDrops.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInDrops.setDescription('The total number of packets dropped during receiving process by all current and previous IPSec Phase-2 Tunnels. ')
h3cIPSecGlobalInReplayDrops = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInReplayDrops.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInReplayDrops.setDescription('The total number of packets dropped during receiving process due to Anti-Replay process by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalInAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInAuthFails.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInAuthFails.setDescription("The total number of inbound authentication's which ended in failure by all current and previous IPSec Phase-2 Tunnels.")
h3cIPSecGlobalInDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInDecryptFails.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInDecryptFails.setDescription("The total number of inbound decryption's which ended in failure by all current and previous IPSec Phase-2 Tunnels.")
h3cIPSecGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalOutOctets.setDescription('The total number of octets sent by all current and previous IPSec Phase-2 Tunnels. This value is accumulated AFTER determining whether or not the packet should be compressed.')
h3cIPSecGlobalOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalOutUncompOctets.setDescription('The total number of uncompressed octets sent by all current and previous IPSec Phase-2 Tunnels. This value is accumulated BEFORE the packet is compressed.')
h3cIPSecGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalOutPkts.setDescription('The total number of packets sent by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalOutDrops = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalOutDrops.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalOutDrops.setDescription('The total number of packets dropped during sending process by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalOutEncryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalOutEncryptFails.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalOutEncryptFails.setDescription("The total number of outbound encryption's which ended in failure by all current and previous IPSec Phase-2 Tunnels.")
h3cIPSecGlobalNoMemoryDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalNoMemoryDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalNoMemoryDropPkts.setDescription('The total number of packets dropped due to no enough memory by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalNoFindSaDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalNoFindSaDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalNoFindSaDropPkts.setDescription('The total number of packets dropped due to not find SA by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalQueueFullDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalQueueFullDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalQueueFullDropPkts.setDescription('The total number of packets dropped due to queue full by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalInvalidLenDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInvalidLenDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInvalidLenDropPkts.setDescription('The total number of packets dropped due to invalid packet length by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalTooLongDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalTooLongDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalTooLongDropPkts.setDescription('The total number of packets dropped due to too long packet by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecGlobalInvalidSaDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIPSecGlobalInvalidSaDropPkts.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalInvalidSaDropPkts.setDescription('The total number of packets dropped due to invalid SA by all current and previous IPSec Phase-2 Tunnels.')
h3cIPSecTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 6))
h3cIPSecPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 6, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIPSecPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyName.setDescription('The IPSec policy name with a trap.')
h3cIPSecPolicySeqNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 6, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIPSecPolicySeqNum.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicySeqNum.setDescription('The IPSec policy sequence number with a trap.')
h3cIPSecPolicySize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 6, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIPSecPolicySize.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicySize.setDescription('The number of IPSec policies with a trap.')
h3cIPSecSpiValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 6, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cIPSecSpiValue.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSpiValue.setDescription('The SPI value associated with a trap.')
h3cIPSecTrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7))
h3cIPSecTrapGlobalCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 1), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecTrapGlobalCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrapGlobalCntl.setDescription('Indicates whether all IPSec traps should be generated.')
h3cIPSecTunnelStartTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 2), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecTunnelStartTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStartTrapCntl.setDescription('Indicates whether h3cIPSecTunnelStart traps should be generated.')
h3cIPSecTunnelStopTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 3), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecTunnelStopTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStopTrapCntl.setDescription('Indicates whether h3cIPSecTunnelStop traps should be generated.')
h3cIPSecNoSaTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 4), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecNoSaTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecNoSaTrapCntl.setDescription('Indicates whether h3cIPSecNoSaFailure traps should be generated.')
h3cIPSecAuthFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 5), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecAuthFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecAuthFailureTrapCntl.setDescription('Indicates whether h3cIPSecAuthFailFailure traps should be generated.')
h3cIPSecEncryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 6), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecEncryFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecEncryFailureTrapCntl.setDescription('Indicates whether h3cIPSecEncryFailFailure traps should be generated.')
h3cIPSecDecryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 7), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecDecryFailureTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecDecryFailureTrapCntl.setDescription('Indicates whether h3cIPSecDecryFailFailure traps should be generated.')
h3cIPSecInvalidSaTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 8), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecInvalidSaTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecInvalidSaTrapCntl.setDescription('Indicates whether h3cIPSec Invalid Sa Failure traps should be generated.')
h3cIPSecPolicyAddTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 9), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecPolicyAddTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyAddTrapCntl.setDescription('Indicates whether h3cIPSecPolicyAdd traps should be generated.')
h3cIPSecPolicyDelTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 10), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecPolicyDelTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyDelTrapCntl.setDescription('Indicates whether h3cIPSecPolicyDel traps should be generated.')
h3cIPSecPolicyAttachTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 11), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecPolicyAttachTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyAttachTrapCntl.setDescription('Indicates whether h3cIPSecPolicyAttach traps should be generated.')
h3cIPSecPolicyDetachTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 7, 12), H3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIPSecPolicyDetachTrapCntl.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyDetachTrapCntl.setDescription('Indicates whether h3cIPSecPolicyDetach traps should be generated.')
h3cIPSecTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8))
h3cIPSecNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1))
h3cIPSecTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 1)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLifeTime"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLifeSize"))
if mibBuilder.loadTexts: h3cIPSecTunnelStart.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStart.setDescription('This notification is generated when an IPSec Phase-2 Tunnel is created.')
h3cIPSecTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 2)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunActiveTime"))
if mibBuilder.loadTexts: h3cIPSecTunnelStop.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStop.setDescription('This notification is generated when an IPSec Phase-2 Tunnel is deleted.')
h3cIPSecNoSaFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 3)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"))
if mibBuilder.loadTexts: h3cIPSecNoSaFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecNoSaFailure.setDescription('This notification is generated when an IPSec Phase-2 non-existent SA error occurs.')
h3cIPSecAuthFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 4)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"))
if mibBuilder.loadTexts: h3cIPSecAuthFailFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecAuthFailFailure.setDescription('This notification is generated when the IPSec phase-2 authentication failure occurs.')
h3cIPSecEncryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 5)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"))
if mibBuilder.loadTexts: h3cIPSecEncryFailFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecEncryFailFailure.setDescription('This notification is generated when the IPSec phase-2 tunnel has an encrypting failure.')
h3cIPSecDecryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 6)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"))
if mibBuilder.loadTexts: h3cIPSecDecryFailFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecDecryFailFailure.setDescription('This notification is generated when the IPSec phase-2 tunnel has a decrypting failure.')
h3cIPSecInvalidSaFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 7)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSpiValue"))
if mibBuilder.loadTexts: h3cIPSecInvalidSaFailure.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecInvalidSaFailure.setDescription('This notification is generated when the IPSec phase-2 invalid SA failure occurs.')
h3cIPSecPolicyAdd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 8)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyName"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySeqNum"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySize"))
if mibBuilder.loadTexts: h3cIPSecPolicyAdd.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyAdd.setDescription('This notification is generated when an IPSec policy is added.')
h3cIPSecPolicyDel = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 9)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyName"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySeqNum"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySize"))
if mibBuilder.loadTexts: h3cIPSecPolicyDel.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyDel.setDescription('This notification is generated when an IPSec policy is deleted.')
h3cIPSecPolicyAttach = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 10)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyName"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySize"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIPSecPolicyAttach.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyAttach.setDescription('This notification is generated when an IPSec policy is attached with one interface.')
h3cIPSecPolicyDetach = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 1, 8, 1, 11)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyName"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySize"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIPSecPolicyDetach.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecPolicyDetach.setDescription('This notification is generated when an IPSec policy is detached with one interface.')
h3cIPSecConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2))
h3cIPSecCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 1))
h3cIPSecGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2))
h3cIPSecCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 1, 1)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunnelTableGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunnelStatGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficTableGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalStatsGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrapObjectGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrapCntlGroup"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecCompliance = h3cIPSecCompliance.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecCompliance.setDescription(' ')
h3cIPSecTunnelTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 1)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunIKETunnelIndex"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLocalAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemoteAddr"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunKeyType"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunEncapMode"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInitiator"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLifeSize"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunLifeTime"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemainTime"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunActiveTime"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunRemainSize"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunTotalRefreshes"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunCurrentSaInstances"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInSaEncryptAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInSaAhAuthAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInSaEspAuthAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunDiffHellmanGrp"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutSaEncryptAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutSaAhAuthAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutSaEspAuthAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunPolicyName"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunPolicyNum"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecTunnelTableGroup = h3cIPSecTunnelTableGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelTableGroup.setDescription("The group contains the IPSec tunnel's property information.")
h3cIPSecTunnelStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 2)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInDecompOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInReplayDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInAuthFails"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInDecryptFails"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutUncompOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunOutEncryptFails"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunNoMemoryDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunQueueFullDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInvalidLenDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunTooLongDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunInvalidSaDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecTunnelStatGroup = h3cIPSecTunnelStatGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTunnelStatGroup.setDescription("The group contains the IPSec tunnel's statistic information.")
h3cIPSecSaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 3)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaDirection"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaValue"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaProtocol"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaEncryptAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaAuthAlgo"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSaStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecSaGroup = h3cIPSecSaGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecSaGroup.setDescription("The group contains the SA's property information.")
h3cIPSecTrafficTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 4)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficLocalType"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficLocalAddr1"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficLocalAddr2"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficLocalProtocol"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficLocalPort"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficRemoteType"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficRemoteAddr1"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficRemoteAddr2"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficRemoteProtocol"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrafficRemotePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecTrafficTableGroup = h3cIPSecTrafficTableGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrafficTableGroup.setDescription('The group contains the property information of the data flow protected by IPSec tunnel.')
h3cIPSecGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 5)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalActiveTunnels"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalActiveSas"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInDecompOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInDrops"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInReplayDrops"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInAuthFails"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInDecryptFails"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalOutOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalOutUncompOctets"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalOutPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalOutDrops"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalOutEncryptFails"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalNoMemoryDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalNoFindSaDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalQueueFullDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInvalidLenDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalTooLongDropPkts"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecGlobalInvalidSaDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecGlobalStatsGroup = h3cIPSecGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecGlobalStatsGroup.setDescription("The group contains all of the IPSec tunnel's statistic information.")
h3cIPSecTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 6)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyName"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySeqNum"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicySize"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecSpiValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecTrapObjectGroup = h3cIPSecTrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrapObjectGroup.setDescription('The group contains all of trap objects of IPSec tunnels.')
h3cIPSecTrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 7)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTrapGlobalCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunnelStartTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunnelStopTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecNoSaTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecAuthFailureTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecEncryFailureTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecDecryFailureTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecInvalidSaTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyAddTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyDelTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyAttachTrapCntl"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyDetachTrapCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecTrapCntlGroup = h3cIPSecTrapCntlGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrapCntlGroup.setDescription('The group contains all of trap switches of IPSec tunnels.')
h3cIPSecTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 7, 2, 2, 8)).setObjects(("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunnelStart"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecTunnelStop"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecNoSaFailure"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecAuthFailFailure"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecEncryFailFailure"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecDecryFailFailure"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecInvalidSaFailure"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyAdd"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyDel"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyAttach"), ("H3C-IPSEC-MONITOR-MIB", "h3cIPSecPolicyDetach"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cIPSecTrapGroup = h3cIPSecTrapGroup.setStatus('current')
if mibBuilder.loadTexts: h3cIPSecTrapGroup.setDescription('The group contains all of trap of IPSec tunnels.')
mibBuilder.exportSymbols("H3C-IPSEC-MONITOR-MIB", h3cIPSecTunQueueFullDropPkts=h3cIPSecTunQueueFullDropPkts, h3cIPSecTunTotalRefreshes=h3cIPSecTunTotalRefreshes, h3cIPSecTunTooLongDropPkts=h3cIPSecTunTooLongDropPkts, H3cEncapMode=H3cEncapMode, h3cIPSecGlobalStatsGroup=h3cIPSecGlobalStatsGroup, h3cIPSecTunnelStop=h3cIPSecTunnelStop, h3cIPSecTunCurrentSaInstances=h3cIPSecTunCurrentSaInstances, h3cIPSecTrafficRemoteProtocol=h3cIPSecTrafficRemoteProtocol, h3cIPSecGlobalTooLongDropPkts=h3cIPSecGlobalTooLongDropPkts, h3cIPSecTunEntryIndex=h3cIPSecTunEntryIndex, h3cIPSecTrafficTableGroup=h3cIPSecTrafficTableGroup, h3cIPSecPolicySize=h3cIPSecPolicySize, h3cIPSecGlobalInDecompOctets=h3cIPSecGlobalInDecompOctets, h3cIPSecTrapObjectGroup=h3cIPSecTrapObjectGroup, h3cIPSecPolicyAttach=h3cIPSecPolicyAttach, h3cIPSecGlobalInDrops=h3cIPSecGlobalInDrops, h3cIPSecTunRemoteAddr=h3cIPSecTunRemoteAddr, h3cIPSecTunLifeSize=h3cIPSecTunLifeSize, h3cIPSecGlobalStats=h3cIPSecGlobalStats, h3cIPSecTunNoMemoryDropPkts=h3cIPSecTunNoMemoryDropPkts, h3cIPSecSaDirection=h3cIPSecSaDirection, h3cIPSecTunKeyType=h3cIPSecTunKeyType, h3cIPSecTunnelTableGroup=h3cIPSecTunnelTableGroup, h3cIPSecTunnelStatGroup=h3cIPSecTunnelStatGroup, h3cIPSecTunInSaEncryptAlgo=h3cIPSecTunInSaEncryptAlgo, h3cIPSecTunnelStartTrapCntl=h3cIPSecTunnelStartTrapCntl, h3cIPSecTunOutUncompOctets=h3cIPSecTunOutUncompOctets, h3cIPSecTunIndex=h3cIPSecTunIndex, h3cIPSecGlobalNoMemoryDropPkts=h3cIPSecGlobalNoMemoryDropPkts, h3cIPSecMonitor=h3cIPSecMonitor, H3cEncryptAlgo=H3cEncryptAlgo, h3cIPSecSaGroup=h3cIPSecSaGroup, h3cIPSecTunIfIndex=h3cIPSecTunIfIndex, h3cIPSecNotifications=h3cIPSecNotifications, h3cIPSecTunnelEntry=h3cIPSecTunnelEntry, h3cIPSecDecryFailFailure=h3cIPSecDecryFailFailure, H3cDiffHellmanGrp=H3cDiffHellmanGrp, h3cIPSecTunInvalidSaDropPkts=h3cIPSecTunInvalidSaDropPkts, h3cIPSecTrapCntl=h3cIPSecTrapCntl, h3cIPSecGlobalInvalidLenDropPkts=h3cIPSecGlobalInvalidLenDropPkts, h3cIPSecTunInPkts=h3cIPSecTunInPkts, h3cIPSecNoSaFailure=h3cIPSecNoSaFailure, h3cIPSecSaEncryptAlgo=h3cIPSecSaEncryptAlgo, h3cIPSecTrafficLocalAddr2=h3cIPSecTrafficLocalAddr2, h3cIPSecTunOutSaEncryptAlgo=h3cIPSecTunOutSaEncryptAlgo, h3cIPSecTunOutPkts=h3cIPSecTunOutPkts, h3cIPSecTunLocalAddr=h3cIPSecTunLocalAddr, h3cIPSecTunOutEncryptFails=h3cIPSecTunOutEncryptFails, h3cIPSecTunDiffHellmanGrp=h3cIPSecTunDiffHellmanGrp, h3cIPSecTunRemainTime=h3cIPSecTunRemainTime, h3cIPSecGlobalNoFindSaDropPkts=h3cIPSecGlobalNoFindSaDropPkts, h3cIPSecTunInSaAhAuthAlgo=h3cIPSecTunInSaAhAuthAlgo, h3cIPSecCompliance=h3cIPSecCompliance, h3cIPSecSpiValue=h3cIPSecSpiValue, h3cIPSecTunnelStopTrapCntl=h3cIPSecTunnelStopTrapCntl, h3cIPSecTunnelStart=h3cIPSecTunnelStart, h3cIPSecTunOutSaEspAuthAlgo=h3cIPSecTunOutSaEspAuthAlgo, h3cIPSecTunPolicyNum=h3cIPSecTunPolicyNum, h3cIPSecGlobalOutDrops=h3cIPSecGlobalOutDrops, h3cIPSecInvalidSaTrapCntl=h3cIPSecInvalidSaTrapCntl, h3cIPSecTrapObject=h3cIPSecTrapObject, h3cIPSecPolicyDelTrapCntl=h3cIPSecPolicyDelTrapCntl, h3cIPSecTunOutSaAhAuthAlgo=h3cIPSecTunOutSaAhAuthAlgo, h3cIPSecTunInAuthFails=h3cIPSecTunInAuthFails, h3cIPSecTunnelStatTable=h3cIPSecTunnelStatTable, h3cIPSecNoSaTrapCntl=h3cIPSecNoSaTrapCntl, h3cIPSecTunInOctets=h3cIPSecTunInOctets, h3cIPSecTunOutOctets=h3cIPSecTunOutOctets, H3cIPSecIDType=H3cIPSecIDType, h3cIPSecTunInReplayDropPkts=h3cIPSecTunInReplayDropPkts, PYSNMP_MODULE_ID=h3cIPSecMonitor, h3cIPSecTunActiveTime=h3cIPSecTunActiveTime, h3cIPSecSaStatus=h3cIPSecSaStatus, h3cIPSecGlobalActiveSas=h3cIPSecGlobalActiveSas, h3cIPSecPolicyName=h3cIPSecPolicyName, h3cIPSecTrapGroup=h3cIPSecTrapGroup, h3cIPSecTunPolicyName=h3cIPSecTunPolicyName, h3cIPSecTrafficEntry=h3cIPSecTrafficEntry, H3cTrapStatus=H3cTrapStatus, h3cIPSecTrafficRemotePort=h3cIPSecTrafficRemotePort, h3cIPSecTunStatus=h3cIPSecTunStatus, h3cIPSecTunInDecompOctets=h3cIPSecTunInDecompOctets, h3cIPSecGlobalOutUncompOctets=h3cIPSecGlobalOutUncompOctets, h3cIPSecTunOutDropPkts=h3cIPSecTunOutDropPkts, h3cIPSecInvalidSaFailure=h3cIPSecInvalidSaFailure, h3cIPSecGlobalQueueFullDropPkts=h3cIPSecGlobalQueueFullDropPkts, h3cIPSecAuthFailureTrapCntl=h3cIPSecAuthFailureTrapCntl, h3cIPSecPolicyAdd=h3cIPSecPolicyAdd, h3cIPSecTrafficLocalPort=h3cIPSecTrafficLocalPort, h3cIPSecGroups=h3cIPSecGroups, h3cIPSecObjects=h3cIPSecObjects, h3cIPSecTrafficLocalProtocol=h3cIPSecTrafficLocalProtocol, h3cIPSecTunInitiator=h3cIPSecTunInitiator, h3cIPSecSaTable=h3cIPSecSaTable, h3cIPSecDecryFailureTrapCntl=h3cIPSecDecryFailureTrapCntl, h3cIPSecPolicyDetach=h3cIPSecPolicyDetach, h3cIPSecTrafficRemoteType=h3cIPSecTrafficRemoteType, h3cIPSecTunInSaEspAuthAlgo=h3cIPSecTunInSaEspAuthAlgo, h3cIPSecTrafficLocalType=h3cIPSecTrafficLocalType, h3cIPSecPolicyAttachTrapCntl=h3cIPSecPolicyAttachTrapCntl, h3cIPSecGlobalOutPkts=h3cIPSecGlobalOutPkts, h3cIPSecTunnelTable=h3cIPSecTunnelTable, h3cIPSecGlobalActiveTunnels=h3cIPSecGlobalActiveTunnels, h3cIPSecSaProtocol=h3cIPSecSaProtocol, h3cIPSecGlobalInvalidSaDropPkts=h3cIPSecGlobalInvalidSaDropPkts, h3cIPSecGlobalInDecryptFails=h3cIPSecGlobalInDecryptFails, H3cIPSecNegoType=H3cIPSecNegoType, h3cIPSecTrapGlobalCntl=h3cIPSecTrapGlobalCntl, h3cIPSecSaValue=h3cIPSecSaValue, h3cIPSecSaIndex=h3cIPSecSaIndex, h3cIPSecGlobalOutEncryptFails=h3cIPSecGlobalOutEncryptFails, h3cIPSecConformance=h3cIPSecConformance, h3cIPSecTunIKETunnelIndex=h3cIPSecTunIKETunnelIndex, h3cIPSecGlobalInOctets=h3cIPSecGlobalInOctets, h3cIPSecEncryFailureTrapCntl=h3cIPSecEncryFailureTrapCntl, H3cAuthAlgo=H3cAuthAlgo, h3cIPSecSaEntry=h3cIPSecSaEntry, h3cIPSecTrafficRemoteAddr1=h3cIPSecTrafficRemoteAddr1, h3cIPSecTrafficTable=h3cIPSecTrafficTable, h3cIPSecGlobalOutOctets=h3cIPSecGlobalOutOctets, h3cIPSecAuthFailFailure=h3cIPSecAuthFailFailure, h3cIPSecTunRemainSize=h3cIPSecTunRemainSize, h3cIPSecTunInvalidLenDropPkts=h3cIPSecTunInvalidLenDropPkts, h3cIPSecCompliances=h3cIPSecCompliances, h3cIPSecPolicySeqNum=h3cIPSecPolicySeqNum, h3cIPSecTunLifeTime=h3cIPSecTunLifeTime, h3cIPSecTunnelStatEntry=h3cIPSecTunnelStatEntry, h3cIPSecEncryFailFailure=h3cIPSecEncryFailFailure, h3cIPSecTunInDropPkts=h3cIPSecTunInDropPkts, h3cIPSecPolicyAddTrapCntl=h3cIPSecPolicyAddTrapCntl, H3cSaProtocol=H3cSaProtocol, h3cIPSecTunInDecryptFails=h3cIPSecTunInDecryptFails, H3cTrafficType=H3cTrafficType, h3cIPSecSaAuthAlgo=h3cIPSecSaAuthAlgo, H3cIPSecTunnelState=H3cIPSecTunnelState, h3cIPSecTrafficLocalAddr1=h3cIPSecTrafficLocalAddr1, h3cIPSecPolicyDel=h3cIPSecPolicyDel, h3cIPSecGlobalInAuthFails=h3cIPSecGlobalInAuthFails, h3cIPSecTrapCntlGroup=h3cIPSecTrapCntlGroup, h3cIPSecTunEncapMode=h3cIPSecTunEncapMode, h3cIPSecPolicyDetachTrapCntl=h3cIPSecPolicyDetachTrapCntl, h3cIPSecGlobalInPkts=h3cIPSecGlobalInPkts, h3cIPSecGlobalInReplayDrops=h3cIPSecGlobalInReplayDrops, h3cIPSecTrafficRemoteAddr2=h3cIPSecTrafficRemoteAddr2, h3cIPSecTrap=h3cIPSecTrap)
