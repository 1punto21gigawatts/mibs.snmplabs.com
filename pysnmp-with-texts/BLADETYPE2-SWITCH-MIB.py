#
# PySNMP MIB module BLADETYPE2-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, Unsigned32, IpAddress, Counter64, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Gauge32, ModuleIdentity, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Unsigned32", "IpAddress", "Counter64", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Gauge32", "ModuleIdentity", "Integer32", "Bits")
PhysAddress, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "MacAddress", "TextualConvention")
agent = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1))
if mibBuilder.loadTexts: agent.setLastUpdated('200312050000Z')
if mibBuilder.loadTexts: agent.setOrganization('Hewlett Packard Company ')
if mibBuilder.loadTexts: agent.setContactInfo('customerservice@hp.com')
if mibBuilder.loadTexts: agent.setDescription('The MIB module for the general switch configuration and information .')
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1))
agentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3))
agentOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4))
agSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2))
agRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3))
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4))
agSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5))
agTrapHost = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6))
agTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7))
agApply = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8))
agTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10))
agMgmtNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11))
agAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2))
portStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3))
spStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 4))
mgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 5))
ntpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9))
aclPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10))
aclMeterPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1))
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2))
swKeyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 3))
agDiff = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4))
agCfgDump = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5))
mgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 6))
geaportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7))
ufdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8))
agNTPOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 2))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwPartNumber.setDescription('The hardware part number of the Bladetype2 Switch.')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('current')
if mibBuilder.loadTexts: hwRevision.setDescription('The hardware revision. If the revision is not available, a zero length string should be returned.')
hwPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: hwPowerSupplyStatus.setDescription('The status of the internal power supply.')
hwSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor1Temp.setStatus('current')
if mibBuilder.loadTexts: hwSensor1Temp.setDescription('The temperature of the rear left sensor in degrees Celsius.')
hwInsertedCubeType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiberCube", 1), ("copperCube", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInsertedCubeType.setStatus('current')
if mibBuilder.loadTexts: hwInsertedCubeType.setDescription('The inserted cube type.')
agPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1), )
if mibBuilder.loadTexts: agPortOperTable.setStatus('current')
if mibBuilder.loadTexts: agPortOperTable.setDescription('The table of port operations.')
agPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portOperIdx"))
if mibBuilder.loadTexts: agPortOperTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortOperTableEntry.setDescription('A row in the port operations table.')
portOperIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperIdx.setStatus('current')
if mibBuilder.loadTexts: portOperIdx.setDescription('The port index.')
portOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperState.setStatus('current')
if mibBuilder.loadTexts: portOperState.setDescription('Enable/Disable port.')
portOperRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperRmon.setStatus('current')
if mibBuilder.loadTexts: portOperRmon.setDescription('Enable/Disable RMON for port.')
portOperDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2), )
if mibBuilder.loadTexts: portOperDot1xTable.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xTable.setDescription('The table of port operations.')
portOperDot1xTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portOperDot1xIndx"))
if mibBuilder.loadTexts: portOperDot1xTableEntry.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xTableEntry.setDescription('A row in the port 802.1x operation table.')
portOperDot1xIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperDot1xIndx.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xIndx.setDescription('The port index.')
portOperDot1xReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperDot1xReset.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xReset.setDescription('Reinitialize 802.1x access control on port.')
portOperDot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperDot1xReauth.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xReauth.setDescription('Initiate reauthentication on port.')
ntpOperSendReq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpOperSendReq.setStatus('current')
if mibBuilder.loadTexts: ntpOperSendReq.setDescription('Allows the user to send requests to the NTP server.')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
if mibBuilder.loadTexts: portInfoTable.setDescription('The table of port information.')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: portInfoTableEntry.setDescription('A row in the port information table.')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('current')
if mibBuilder.loadTexts: portInfoIndx.setDescription('The port index.')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: portInfoSpeed.setDescription('The current operational speed of the port.')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('current')
if mibBuilder.loadTexts: portInfoMode.setDescription('The current operational mode of the port.')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: portInfoFlowCtrl.setDescription('The current operational flow control of the port.')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('current')
if mibBuilder.loadTexts: portInfoLink.setDescription('The current operational link status of the port.')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('current')
if mibBuilder.loadTexts: agApplyConfiguration.setDescription('This is an action object to apply the changes made to configuration of the switch. By setting the value to apply(2), all the changes made since the last apply are written to the new_config block. other(1) is returned when this object ie read. ')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('current')
if mibBuilder.loadTexts: agSavePending.setDescription('This object, when read, gives the user information whether an save action is needed and that the configuration has been applied but not saved to the flash.')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: agSaveConfiguration.setDescription('This is an action object to write current configuration to nonvolatile storage. When issued with the saveActive, the active configuration in flash is saved to backup in flash and then the new configuration is saved to the active configuration in flash. When issued with notSaveActive, the active configuration is NOT saved to the flash and the active configuration is overwritten with the new configuration. ok(1) is returned always when read.')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('current')
if mibBuilder.loadTexts: agRevert.setDescription('This is an action object to revert the unapplied changes made to the switch. By setting the value to revert(2), all the unapplied changes will be reverted. This action will copy the current_config to the new_config block. other(1) is returned when this object is read. ')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('current')
if mibBuilder.loadTexts: agRevertApply.setDescription('This is an action object to revert the unsaved changes made to the switch. By setting the value to revertApply(2), all the unsaved as well as unapplied changes will be reverted. other(1) is returned when this object is read. ')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('current')
if mibBuilder.loadTexts: agReset.setDescription('This is an action object to reboot the switch. other(1) is returned always when read. The following values are writable: coldReset(2)... warmReset(3)...')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('current')
if mibBuilder.loadTexts: agConfigForNxtReset.setDescription('The configuration information to be loaded from at next reset. The following values are writable: active(2)...active configuration block backup(3)...backup configuration block default(4)..default configuration block')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('current')
if mibBuilder.loadTexts: agImageForNxtReset.setDescription('The software image to be booted from at next reset. The following values are writable: image1(2)...image 1 image2(3)...image 2')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agSoftwareVersion.setDescription("The version of the software image that is currently running on the system in the form of 'major.minor.maintenance.bugfix'. A zero length string is returned if version is not available.")
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('current')
if mibBuilder.loadTexts: agBootVer.setDescription("The version of the boot code in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available.")
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('current')
if mibBuilder.loadTexts: agImage1Ver.setDescription("The version of the software image stored in image 1 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('current')
if mibBuilder.loadTexts: agImage2Ver.setDescription("The version of the software image stored in image 2 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('current')
if mibBuilder.loadTexts: agRtcDate.setDescription("The date on the real time clock in the form of 'mm/dd/yy'. A zero length string is returned if date is not available.")
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('current')
if mibBuilder.loadTexts: agRtcTime.setDescription("The time on the real time clock in the form of 'hh:mm:ss'. A zero length string is returned if time is not available.")
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('current')
if mibBuilder.loadTexts: agLastSetErrorReason.setDescription('The error reason of the last SET failure.')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the current_configuration block.')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the new_configuration block.')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('current')
if mibBuilder.loadTexts: agCurCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('current')
if mibBuilder.loadTexts: agNewCfgLoginBanner.setDescription('The user defined login banner.')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('current')
if mibBuilder.loadTexts: agCurCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('current')
if mibBuilder.loadTexts: agNewCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgBootp.setDescription('Enable or disable the use of BootP, as currently configured in the current_configuration block.')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgBootp.setDescription('Enable or disable the use of BootP, in the new_configuration block.')
agSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSlotNumber.setStatus('current')
if mibBuilder.loadTexts: agSlotNumber.setDescription('Identifies the slot in which this switch is installed. If the agent implementing this MIB is not a blade in a chassis this value has no meaning.')
agCurCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setDescription("Once SNMP operations like agApplyConfig, agDiffState and agDumpState, which use the state machine are done the resources used by these operations need to be freed by setting the state back to 'idle' so others can issue the commands via SNMP. agSnmpTimeout indicates the number of minutes before the resources are freed and the state set back to 'idle' if this operation is not performed by the user.")
agNewCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setDescription("Once SNMP operations like agApplyConfig, agDiffState and agDumpState, which use the state machine are done the resources used by these operations need to be freed by setting the state back to 'idle' so others can issue the commands via SNMP. agSnmpTimeout indicates the number of minutes before the resources are freed and the state set back to 'idle' if this operation is not performed by the user.")
agCurCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setDescription('The TCP port number that the telnet server listens for telnet sessions.')
agNewCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setDescription('The TCP port number that the telnet server listens for telnet sessions.')
agClearFlashDump = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClearFlashDump.setStatus('current')
if mibBuilder.loadTexts: agClearFlashDump.setDescription('This is an action object to clear the FLASH dump. ok(1) is returned when this object is read. ')
agRackId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agRackId.setStatus('current')
if mibBuilder.loadTexts: agRackId.setDescription('The rack unique identifier.')
agChassis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agChassis.setStatus('current')
if mibBuilder.loadTexts: agChassis.setDescription('Chassis serial number.')
agCurCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTftpServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTftpServerPort.setDescription('The TCP port number that the TFTP server is listening to in the current_configuration block.')
agNewCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTftpServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTftpServerPort.setDescription('The TCP port number that the TFTP server is listening to in the new_configuration block.')
agCurCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setDescription('The TCP port number that the HTTPS server is listening to in the current_configuration block.')
agNewCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setDescription('The TCP port number that the HTTPS server is listening to in the new_configuration block.')
agCurDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCreekFortSaintJohnBritishColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOcean-WallisAndFutuna", 420)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurDaylightSavings.setStatus('current')
if mibBuilder.loadTexts: agCurDaylightSavings.setDescription('The daylight savings location.')
agNewDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCreekFortSaintJohnBritishColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOceanWallisAndFutuna", 420)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewDaylightSavings.setStatus('current')
if mibBuilder.loadTexts: agNewDaylightSavings.setDescription('The daylight savings location.')
agCurCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setStatus('current')
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setDescription('Set idle CLI sessions timeout.')
agNewCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setStatus('current')
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setDescription('Set idle CLI sessions timeout.')
agCurCfgUfdTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgUfdTrap.setStatus('current')
if mibBuilder.loadTexts: agCurCfgUfdTrap.setDescription('The current status of the UFDFO SNMP trap.')
agNewCfgUfdTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgUfdTrap.setStatus('current')
if mibBuilder.loadTexts: agNewCfgUfdTrap.setDescription('Enable or disable sending UFDFO SNMP trap.')
agCurBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aoscli", 1), ("iscli", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootNxtCliMode.setStatus('current')
if mibBuilder.loadTexts: agCurBootNxtCliMode.setDescription('Current boot mode.')
agNewBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aoscli", 1), ("iscli", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootNxtCliMode.setStatus('current')
if mibBuilder.loadTexts: agNewBootNxtCliMode.setDescription('Next cli boot mode.')
agCurCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgReminders.setStatus('current')
if mibBuilder.loadTexts: agCurCfgReminders.setDescription('Current status of reminders feature.')
agNewCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgReminders.setStatus('current')
if mibBuilder.loadTexts: agNewCfgReminders.setDescription('Enable or disable reminders feature.')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogHost.setDescription('The syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogHost.setDescription('The syslog host IP address, in the new_configuration block.')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setDescription('The second syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setDescription('The second syslog host IP address, in the new_configuration block.')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogFac.setDescription('The facility of syslog host in the current_configuration block.')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogFac.setDescription('The facility of syslog host in the new_configuration block.')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setDescription('The facility of syslog2 host in the current_configuration block.')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setDescription('The facility of syslogs host in the new_configuration block.')
agCurCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSev.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogSev.setDescription('The severity of syslog host in the current configuration block.')
agNewCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSev.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogSev.setDescription('The severity of syslog host in the new configuration block.')
agCurCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setDescription('The severity of syslog2 host in the current configuration block.')
agNewCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setDescription('The severity of syslogs host in the new configuration block.')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('current')
if mibBuilder.loadTexts: agClrSyslogMsgs.setDescription('Clears all current Syslog messages.')
agSyslogMsgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setDescription('The maximum number of rows in the syslog message table.')
agSyslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11), )
if mibBuilder.loadTexts: agSyslogMsgTable.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTable.setDescription('The table of syslog messages.')
agSyslogMsgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agSyslogMsgIndex"))
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setDescription('A syslog message stored on the switch.')
agSyslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgIndex.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgIndex.setDescription('The syslog message table index.')
agSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMessage.setStatus('current')
if mibBuilder.loadTexts: agSyslogMessage.setDescription('The syslog message.')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStg.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapStg.setDescription('Enable or disable spanning tree syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStg.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapStg.setDescription('Enable or disable spanning tree syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setDescription('Enable or disable OSPF related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setDescription('Enable or disable OSPF related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setDescription('Enable or disable rmon related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setDescription('Enable or disable rmon related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapUfd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapUfd.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapUfd.setDescription('Enable or disable UFD related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapUfd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapUfd.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapUfd.setDescription('Enable or disable UFD related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfg.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfg.setDescription('Enable or disable CFG related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfg.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfg.setDescription('Enable or disable CFG related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrap8021x = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrap8021x.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrap8021x.setDescription('Enable or disable 802.1X protocol related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrap8021x = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrap8021x.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrap8021x.setDescription('Enable or disable 802.1X protocol related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapHotlinks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapHotlinks.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapHotlinks.setDescription('Enable or disable Hot Links related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapHotlinks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapHotlinks.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapHotlinks.setDescription('Enable or disable Hot Links related syslog and SNMP trap, as currently configured in the current_configuration block.')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setDescription('The maximum number of rows in the trap host table.')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the current_configuration block.')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setDescription('A row in the trap host table in the current_configuration block.')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the new_configuration block.')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setDescription('A row in the trap host table in the new_configuration block.')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('current')
if mibBuilder.loadTexts: agTftpServer.setDescription('The TFTP server IP address or domain name.')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3), ("boot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('current')
if mibBuilder.loadTexts: agTftpImage.setDescription('Whether the image file should be loaded in image1 or image2 or boot in flash.')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpImageFileName.setDescription('The image file name to be downloaded.')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpCfgFileName.setDescription('The configuration file name.')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpDumpFileName.setDescription('The file name for core dump.')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5), ("img-put", 7), ("tsdump-put", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('current')
if mibBuilder.loadTexts: agTftpAction.setDescription('This is an action object to perform various TFTP Get or Put functions. The TFTP sever is specified in agTftpServer object. img-get(2) - Download switch image from a specified image file (agTftpImageFileName) on the TFTP server to the destinated storage (agTftpImage). cfg-get(3) - Download switch configuration from a specified file (agTftpCfgFileName) on the TFTP server. cfg-put(4) - Upload switch configuration to a specified file (agTftpCfgFileName) on the TFTP server. dump-put(5)- Download switch core dump to a specified file (agTftpDumpFileName) on the TFTP server. img-put(7) - Upload specified switch image to a specified image file (agTftpImageFileName) on the TFTP server. tsdump-put(5)- Download switch core dump to a specified file (agTftpTSDumpFileName) on the TFTP server. other(1) is returned always when read.')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('current')
if mibBuilder.loadTexts: agTftpLastActionStatus.setDescription('The recorded status of the previous TFTP activity.')
agTftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpUserName.setStatus('current')
if mibBuilder.loadTexts: agTftpUserName.setDescription('The username for FTP server or blank for TFTP server.')
agTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpPassword.setStatus('current')
if mibBuilder.loadTexts: agTftpPassword.setDescription('The password for FTP server.')
agTftpTSDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpTSDumpFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpTSDumpFileName.setDescription('The file name for TS dump.')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: agPortTableMaxEnt.setDescription('The maximum number of rows in the port configuration host table.')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTable.setDescription('The table of port configuration in the current_configuration block.')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setDescription('A row in the port table in the current_configuration block.')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgIndx.setDescription('The index of the row in port configurations table.')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgState.setDescription('This is the state of the port.')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortCurCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgStp.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgStp.setDescription('This object is used to turn Spanning Tree on or off for the port.')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPVID.setDescription('The default VLAN ID for the port.')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortCurCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setDescription('Selects the port speed for gigabit Ethernet connection.')
agPortCurCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setDescription('This object is used to select port mode for gigabit Ethernet connection.')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPortName.setDescription('The switch port name.')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
agPortCurCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgTagPVID.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTagPVID.setDescription('This is PVID tag state of the port')
agPortCurCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgMulticastThreshold.setDescription("Current status of the port's Multicast Threshold.")
agPortCurCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgMulticastThresholdRate.setDescription("Current port's Multicast Threshold Rate.")
agPortCurCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgBroadcastThreshold.setDescription("Current status of the port's Broadcast Threshold.")
agPortCurCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgBroadcastThresholdRate.setDescription("Current port's Broadcast Threshold Rate.")
agPortCurCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgDLFThreshold.setDescription("Current status of the port's Destination Lookup Fail Threshold.")
agPortCurCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgDLFThresholdRate.setDescription("Current port's Destination Lookup Fail Threshold Rate.")
agPortFiberCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agPortFiberCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgTable.setDescription('The table of fiber port configuration in the current_configuration block.')
agPortFiberCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortFiberCurCfgIndx"))
if mibBuilder.loadTexts: agPortFiberCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgTableEntry.setDescription('A row in the fiber port table in the current_configuration block.')
agPortFiberCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgIndx.setDescription('The index of the row in fiber port current configuration table.')
agPortFiberCurCfgTxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxCtrl.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgTxCtrl.setDescription('This is the state of the TX control.')
agPortFiberCurCfgTxPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxPulse.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgTxPulse.setDescription('This is the state of the TX pulse.')
agPortFiberCurCfgTxUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxUp.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgTxUp.setDescription('Current TX up time.')
agPortFiberCurCfgTxDn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxDn.setStatus('current')
if mibBuilder.loadTexts: agPortFiberCurCfgTxDn.setDescription('Current TX dn time.')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTable.setDescription('The table of port configuration in the new_configuration block.')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setDescription('A row in the port configuration table in the new_configuration block.')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgIndx.setDescription('The index of the row in port configurations table.')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgState.setDescription('This is the state of the port.')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortNewCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgStp.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgStp.setDescription('This object is used to turn Spanning Tree on or off for the port.')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPVID.setDescription('The default VLAN ID for the port.')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortNewCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setDescription('Selects the port speed for gigabit Ethernet connection.')
agPortNewCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setDescription('This object is used to select port mode for gigabit Ethernet connection.')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPortName.setDescription('The switch port name.')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
agPortNewCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgTagPVID.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTagPVID.setDescription('This is PVID tag state of the port')
agPortNewCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgMulticastThreshold.setDescription("New status of the port's Multicast Threshold.")
agPortNewCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgMulticastThresholdRate.setDescription("New port's Multicast Threshold Rate.")
agPortNewCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgBroadcastThreshold.setDescription("New status of the port's Broadcast Threshold.")
agPortNewCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgBroadcastThresholdRate.setDescription("New port's Broadcast Threshold Rate.")
agPortNewCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgDLFThreshold.setDescription("New status of the port's Destination Lookup Fail Threshold.")
agPortNewCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgDLFThresholdRate.setDescription("New port's Destination Lookup Fail Threshold Rate.")
agPortFiberNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: agPortFiberNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgTable.setDescription('The table of fiber port configuration in the new_configuration block.')
agPortFiberNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortFiberNewCfgIndx"))
if mibBuilder.loadTexts: agPortFiberNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgTableEntry.setDescription('A row in the fiber port table in the new_configuration block.')
agPortFiberNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgIndx.setDescription('The index of the row in fiber port new configuration table.')
agPortFiberNewCfgTxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxCtrl.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgTxCtrl.setDescription('New TX control.')
agPortFiberNewCfgTxPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxPulse.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgTxPulse.setDescription('New TX pulse.')
agPortFiberNewCfgTxUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxUp.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgTxUp.setDescription('New TX up time.')
agPortFiberNewCfgTxDn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxDn.setStatus('current')
if mibBuilder.loadTexts: agPortFiberNewCfgTxDn.setDescription('New TX dn time.')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: radCurCfgPort.setDescription('Specify the RADIUS port number.')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: radNewCfgPort.setDescription('Speicfy the RADIUS port number.')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: radCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: radNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('current')
if mibBuilder.loadTexts: radCurCfgRetries.setDescription('Number of retries to the RADIUS server.')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('current')
if mibBuilder.loadTexts: radNewCfgRetries.setDescription('Number of retries to the RADIUS server.')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('current')
if mibBuilder.loadTexts: radCurCfgState.setDescription('Enable or disbale RADIUS authentication.')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('current')
if mibBuilder.loadTexts: radNewCfgState.setDescription('Enable or disable RADIUS authentication.')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: radCurCfgAuthenString.setDescription('The RADIUS authentication string.')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: radNewCfgAuthenString.setDescription('The RADIUS authentication string.')
radCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: radCurCfgTelnet.setDescription('Enable or disbale RADIUS backdoor for telnet.')
radNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: radNewCfgTelnet.setDescription('Enable or disable RADIUS backdoor for telnet.')
radCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setDescription('The second RADIUS authentication string.')
radNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setDescription('The second RADIUS authentication string.')
radCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: radCurCfgSecBd.setDescription('Enable or disbale RADIUS secure backdoor for telnet.')
radNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: radNewCfgSecBd.setDescription('Enable or disable RADIUS secure backdoor for telnet.')
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPServer.setDescription('The NTP Server Address.')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPServer.setDescription('The NTP Server Address.')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agCurCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPTzoneHHMM.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPTzoneHHMM.setDescription('The NTP Server timezone offset from GMT formatted as (+/-)HH:MM.')
agNewCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPTzoneHHMM.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPTzoneHHMM.setDescription('The NTP Server timezone offset from GMT formatted as (+/-)HH:MM. The valid range is from -12:59 to +12:59.')
agCurCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPDlight.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPDlight.setDescription('Enable/disable daylight savings time.')
agNewCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPDlight.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPDlight.setDescription('Enable/disable daylight savings time.')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPService.setDescription('Enable/disable NTP Service.')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPService.setDescription('Enable/disable NTP Service.')
agCurCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setDescription('The Secondary NTP Server Address.')
agNewCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setDescription('The Secondary NTP Server Address.')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('current')
if mibBuilder.loadTexts: agApplyPending.setDescription('This object, when read, gives the user information whether an apply action is needed and that the configuration has been chaged by the user actions. The user then can apply the changes by setting proper value to the object agApplyConfiguration described above.')
agApplyConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("apply", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfig.setStatus('current')
if mibBuilder.loadTexts: agApplyConfig.setDescription("When this object is read the current state is returned. idle(3) indicates that there is no apply in progess. complete(5) indicates that the last apply operation is completed. Setting the value to apply(1), will write all the changes made since the last apply to the current configuration block. If the apply is successful this variable will return the state 'complete' else it will return 'failed'. In case of failure, to read the reason for failure use the agApplyTable.")
agApplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyTableSize.setStatus('current')
if mibBuilder.loadTexts: agApplyTableSize.setDescription('The number of strings in the apply table.')
agApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5), )
if mibBuilder.loadTexts: agApplyTable.setStatus('current')
if mibBuilder.loadTexts: agApplyTable.setDescription('The table of URL path for URL load balancing in the current_config.')
agApplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agApplyIndex"))
if mibBuilder.loadTexts: agApplyTableEntry.setStatus('current')
if mibBuilder.loadTexts: agApplyTableEntry.setDescription('Information about an URL path for URL load balancing.')
agApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyIndex.setStatus('current')
if mibBuilder.loadTexts: agApplyIndex.setDescription('The table index.')
agApplyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyString.setStatus('current')
if mibBuilder.loadTexts: agApplyString.setDescription('A string in the apply table.')
tacCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgPrimaryIpAddr.setDescription('The IP address of the Primary TACACS+ server.')
tacNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgPrimaryIpAddr.setDescription('The IP address of the Primary TACACS+ server.')
tacCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgSecondaryIpAddr.setDescription('The IP address of the Secondary TACSACS server.')
tacNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgSecondaryIpAddr.setDescription('The IP address of the Secondary TACACS+ server.')
tacCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgPort.setDescription('Specify the TACACS+ port number.')
tacNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgPort.setDescription('Specify the TACACS+ port number.')
tacCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to TACACS+ server.')
tacNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to TACACS+ server.')
tacCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgRetries.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgRetries.setDescription('Number of retries to the TACACS+ server.')
tacNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgRetries.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgRetries.setDescription('Number of retries to the TACACS+ server.')
tacCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgState.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgState.setDescription('Enable or disbale TACACS+ authentication.')
tacNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgState.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgState.setDescription('Enable or disable TACACS+ authentication.')
tacCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgAuthenString.setDescription('The TACACS+ authentication string.')
tacNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgAuthenString.setDescription('The TACACS+ authentication string.')
tacCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgTelnet.setDescription('Enable or disbale TACACS+ backdoor for telnet.')
tacNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgTelnet.setDescription('Enable or disable TACACS+ backdoor for telnet.')
tacCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setDescription('The second TACACS+ authentication string.')
tacNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setDescription('The second TACACS+ authentication string.')
tacCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgSecBd.setDescription('Enable or disbale TACACS+ secure backdoor for telnet.')
tacNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgSecBd.setDescription('Enable or disable TACACS+ secure backdoor for telnet.')
tacCurCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmap.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgCmap.setDescription('Enable/Disable Tacacs+ new prividlege level maping.')
tacNewCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmap.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgCmap.setDescription('Enable/Disable Tacacs+ new prividlege level maping.')
agTacacsUserMapCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31), )
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTable.setDescription('The table of tacacs+ user map current configuration.')
agTacacsUserMapCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agTacacsUserMapCurCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTableEntry.setDescription('A row in the tacacs+ user mapping table.')
agTacacsUserMapCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgUId.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgUId.setDescription('The current config remote privilege identifier.')
agTacacsUserMapCurCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgMapping.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgMapping.setDescription('Current Tacacs+ user privilege mappings.')
agTacacsUserMapNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32), )
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTable.setDescription('The table of tacacs+ user map new configuration.')
agTacacsUserMapNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agTacacsUserMapNewCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTableEntry.setDescription('A row in the tacacs+ user mapping table.')
agTacacsUserMapNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgUId.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgUId.setDescription('The new config remote privilege identifier.')
agTacacsUserMapNewCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgMapping.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgMapping.setDescription('Set new Tacacs+ user privilege mappings.')
agMgmtNetTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setDescription('The maximum number of entries in the Management Network Table.')
agCurCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2), )
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setDescription('The table for Management Network definitions in the current configuration block.')
agCurCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agCurCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setDescription('A row in the management network definition table.')
agCurCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setDescription('The index of the Management Network Definition table.')
agCurCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setDescription('The Management Network Address in the current_configuration block.')
agCurCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setDescription('The Management Network Mask in the current_configuration block.')
agNewCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3), )
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setDescription('The table for Management Network definitions in the new configuration block.')
agNewCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agNewCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setDescription('A row in the management network definition table.')
agNewCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setDescription('The index of the Management Network Definition table.')
agNewCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setDescription('The Management Network Address in the new_configuration block.')
agNewCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setDescription('The Management Network Mask in the new_configuration block.')
agNewCfgMgmtNetDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
agAccessUserMaxUserID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserMaxUserID.setStatus('current')
if mibBuilder.loadTexts: agAccessUserMaxUserID.setDescription('The maximum number of Users ID.')
agAccessUserCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2), )
if mibBuilder.loadTexts: agAccessUserCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgTable.setDescription('The table of Access user configuration.')
agAccessUserCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agAccessUserCurCfgUId"))
if mibBuilder.loadTexts: agAccessUserCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgTableEntry.setDescription('A row in the Access user configuration table.')
agAccessUserCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgUId.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgUId.setDescription('The User identifier.')
agAccessUserCurCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCos.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCos.setDescription('The user class of service.')
agAccessUserCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgName.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgName.setDescription('The user name.')
agAccessUserCurCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgPswd.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgPswd.setDescription('The character string representing the user passworde.')
agAccessUserCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgState.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgState.setDescription('Enable or disable a user.')
agAccessUserNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3), )
if mibBuilder.loadTexts: agAccessUserNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgTable.setDescription('The table of Access user configuration.')
agAccessUserNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agAccessUserNewCfgUId"))
if mibBuilder.loadTexts: agAccessUserNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgTableEntry.setDescription('A row in the Access user configuration table.')
agAccessUserNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserNewCfgUId.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgUId.setDescription('The User identifier.')
agAccessUserNewCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCos.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCos.setDescription('The user class of service.')
agAccessUserNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgName.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgName.setDescription('The user name.')
agAccessUserNewCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgPswd.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgPswd.setDescription('The character string representing the user passworde.')
agAccessUserNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgState.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgState.setDescription('Enable or disable a user.')
agAccessUserNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgDelete.setDescription('This is an action object to create or delete a User. other(1) is returned always when read. The following values are writable: delete(2)...to delete a User')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('current')
if mibBuilder.loadTexts: pktStatsAllocs.setDescription('Total number of packet allocations from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('current')
if mibBuilder.loadTexts: pktStatsFrees.setDescription('Total number of times the packet buffers are freed(released) to the packet buffer pool by the TCP/IP protocol stack.')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('current')
if mibBuilder.loadTexts: pktStatsAllocFails.setDescription('Total number of packet allocation failures from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('current')
if mibBuilder.loadTexts: pktStatsMediums.setDescription('Total number of packet allocations with size greater than 128 bytes and less than or equal to 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('current')
if mibBuilder.loadTexts: pktStatsJumbos.setDescription('Total number of packet allocations with size larger than 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('current')
if mibBuilder.loadTexts: pktStatsSmalls.setDescription('Total number of packet allocations with size less than or eqaul to 128 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsMediumsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setDescription('The highest number of packet allocations with size greater than 128 bytes and less than or equal to 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsJumbosHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setDescription('The highest number of packet allocations with size larger than 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsSmallsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setDescription('The highest number of packet allocations with size less than or eqaul to 128 bytes from the packet buffer pool by the TCP/IP protocol stack.')
mpCpuStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setDescription('The utilization of MP CPU over 1 second. It shows the percentage.')
mpCpuStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setDescription('The utilization of MP CPU over 4 seconds. It shows the percentage.')
mpCpuStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setDescription('The utilization of MP CPU over 64 seconds. It shows the percentage.')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
if mibBuilder.loadTexts: portStatsTable.setDescription('The table of port statistics.')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: portStatsTableEntry.setDescription('A row in the port stats table.')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('current')
if mibBuilder.loadTexts: portStatsIndx.setDescription('The port index.')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setDescription('The length of the output packet queue (in packets).')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
portStatsPhyIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer.')
portStatsPhyIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent.')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
if mibBuilder.loadTexts: portStatsClear.setDescription('Setting this value to clear(1) clears the stats for this port.')
dot1xPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dot1xPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatsTable.setDescription('The table of 802.1x port statistics.')
dot1xPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "dot1xPortStatsIndx"))
if mibBuilder.loadTexts: dot1xPortStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatsTableEntry.setDescription('A row in the 802.1x port stats table.')
dot1xPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPortStatsIndx.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatsIndx.setDescription('The 802.1x port stats index.')
eapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolFramesRx.setDescription('')
eapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: eapolFramesTx.setDescription('')
eapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolStartFramesRx.setDescription('')
eapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolLogoffFramesRx.setDescription('')
eapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolRespIdFramesRx.setDescription('')
eapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolRespFramesRx.setDescription('')
eapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: eapolReqIdFramesTx.setDescription('')
eapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: eapolReqFramesTx.setDescription('')
invalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: invalidEapolFramesRx.setDescription('')
eapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapLengthErrorFramesRx.setDescription('')
authEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEntersConnecting.setStatus('current')
if mibBuilder.loadTexts: authEntersConnecting.setDescription('')
authEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffsWhileConnecting.setStatus('current')
if mibBuilder.loadTexts: authEapLogoffsWhileConnecting.setDescription('')
authEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEntersAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authEntersAuthenticating.setDescription('')
authSuccessesWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authSuccessesWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authSuccessesWhileAuthenticating.setDescription('')
authTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authTimeoutsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authTimeoutsWhileAuthenticating.setDescription('')
authFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authFailWhileAuthenticating.setDescription('')
authReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authReauthsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authReauthsWhileAuthenticating.setDescription('')
authEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapStartsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authEapStartsWhileAuthenticating.setDescription('')
authEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticating.setDescription('')
authReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authReauthsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: authReauthsWhileAuthenticated.setDescription('')
authEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapStartsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: authEapStartsWhileAuthenticated.setDescription('')
authEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticated.setDescription('')
backendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendResponses.setStatus('current')
if mibBuilder.loadTexts: backendResponses.setDescription('')
backendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: backendAccessChallenges.setDescription('')
backendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendOtherRequestsToSupplicant.setStatus('current')
if mibBuilder.loadTexts: backendOtherRequestsToSupplicant.setDescription('')
backendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendNonNakResponsesFromSupplicant.setStatus('current')
if mibBuilder.loadTexts: backendNonNakResponsesFromSupplicant.setDescription('')
backendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: backendAuthSuccesses.setDescription('')
backendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAuthFails.setStatus('current')
if mibBuilder.loadTexts: backendAuthFails.setDescription('')
lastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: lastEapolFrameVersion.setDescription('')
lastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: lastEapolFrameSource.setDescription('')
agDiffState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diff", 1), ("flashdiff", 2), ("idle", 3), ("inprogress", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agDiffState.setStatus('current')
if mibBuilder.loadTexts: agDiffState.setDescription('When this object is read the current state is returned. idle(3) indicates that there is no diff in progess. complete(5) indicates that the last diff operation is completed. Setting the value to diff(1), will start a new diff operation Diff compares the new configuration with the current configuration and shows the pending configuration changes. Setting the value to flashdiff(1), will start a new diff operation. flashdiff compares new configuration with the flash configuration. To read the configuration changes use the agDiffTable once the state of this variable returns complete.')
agDiffTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffTableSize.setStatus('current')
if mibBuilder.loadTexts: agDiffTableSize.setDescription('The number of strings in the diff table.')
agDiffTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4), )
if mibBuilder.loadTexts: agDiffTable.setStatus('current')
if mibBuilder.loadTexts: agDiffTable.setDescription('The table of URL path for URL load balancing in the current_config.')
agDiffTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agDiffIndex"))
if mibBuilder.loadTexts: agDiffTableEntry.setStatus('current')
if mibBuilder.loadTexts: agDiffTableEntry.setDescription('Information about an URL path for URL load balancing.')
agDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffIndex.setStatus('current')
if mibBuilder.loadTexts: agDiffIndex.setDescription('The table index.')
agDiffString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffString.setStatus('current')
if mibBuilder.loadTexts: agDiffString.setDescription('A string in the diff table.')
agCfgDumpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dump", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgDumpState.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpState.setDescription("When this object is read the current state is returned. idle(2) indicates that there is no dump in progess. complete(4) indicates that the last dump operation is completed. Setting the value to dump(1), will start a new dump operation Dump will show the current configuration. To read the configuration dump use the agCfgDumpTable once the state of this variable returns complete. Once the agCfgDumpTable is read the state should be set back to 'idle' which frees the dump buffer and others can issue a dump command via SNMP.")
agCfgDumpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpTableSize.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTableSize.setDescription('The number of strings in the dump table.')
agCfgDumpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4), )
if mibBuilder.loadTexts: agCfgDumpTable.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTable.setDescription('The table of dump strings.')
agCfgDumpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agCfgDumpIndex"))
if mibBuilder.loadTexts: agCfgDumpTableEntry.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTableEntry.setDescription('An entry in the dump table.')
agCfgDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpIndex.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpIndex.setDescription('The table index.')
agCfgDumpString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpString.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpString.setDescription('A string in the dump table.')
geaportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1), )
if mibBuilder.loadTexts: geaportInfoTable.setStatus('current')
if mibBuilder.loadTexts: geaportInfoTable.setDescription('The table of gea port mapping.')
geaportInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "geaportInfoLogicalIndex"))
if mibBuilder.loadTexts: geaportInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: geaportInfoTableEntry.setDescription('An entry in the geaport table mapping.')
geaportInfoLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoLogicalIndex.setStatus('current')
if mibBuilder.loadTexts: geaportInfoLogicalIndex.setDescription('The logical port index.')
geaportInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoPort.setStatus('current')
if mibBuilder.loadTexts: geaportInfoPort.setDescription('The GEA Port (0-based).')
geaportInfoUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoUnit.setStatus('current')
if mibBuilder.loadTexts: geaportInfoUnit.setDescription('The GEA Unit.')
ufdInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoState.setStatus('current')
if mibBuilder.loadTexts: ufdInfoState.setDescription('Uplink Failure Detection State.')
ufdInfoLtMStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("forwarding", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMStatus.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMStatus.setDescription('LtM Status.')
ufdInfoLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMPorts.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMPorts.setDescription('The LtM port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtM 0 - The represented port does not belong to LtM.')
ufdInfoLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMTrunks.setDescription('The LtM trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtM 0 - The represented trunk does not belong to LtM.')
ufdInfoLtDStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("autoDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDStatus.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDStatus.setDescription('LtD status.')
ufdInfoLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDPorts.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDPorts.setDescription('The LtD port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtD 0 - The represented port does not belong to LtD.')
ufdInfoLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDTrunks.setDescription('The LtD trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtD 0 - The represented trunk does not belong to LtD.')
ntpPrimaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setDescription('The total number of NTP requests sent to Primary NTP Server.')
ntpPrimaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setDescription('The total number of NTP responces received from Primary NTP Server.')
ntpPrimaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setDescription('The total number of NTP Updates by Primary NTP Server.')
ntpSecondaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setDescription('The total number of NTP requests sent to Secondary NTP Server.')
ntpSecondaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setDescription('The total number of NTP responces received from Secondary NTP Server.')
ntpSecondaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setDescription('The total number of NTP Updates by Secondary NTP Server.')
ntpLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateServer.setStatus('current')
if mibBuilder.loadTexts: ntpLastUpdateServer.setDescription('The type of ntp server updated last time.')
ntpLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ntpLastUpdateTime.setDescription('The last time updated by ntp server.')
ntpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClearStats.setStatus('current')
if mibBuilder.loadTexts: ntpClearStats.setDescription('Setting this value to clear(2) clears the stats for ntp.')
ntpSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSystemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: ntpSystemCurrentTime.setDescription('The current system time.')
aclPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: aclPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: aclPortStatsTable.setDescription('The table of aclPort statistics.')
aclPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "aclPortStatsIndx"))
if mibBuilder.loadTexts: aclPortStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclPortStatsTableEntry.setDescription('A row in the aclPort stats table.')
aclPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortStatsIndx.setStatus('current')
if mibBuilder.loadTexts: aclPortStatsIndx.setDescription('The aclPort index.')
aclPortStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortStatsHits.setStatus('current')
if mibBuilder.loadTexts: aclPortStatsHits.setDescription('Total number of hits for this ACL entry on given port')
aclPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortClearStats.setStatus('current')
if mibBuilder.loadTexts: aclPortClearStats.setDescription('Setting this value to clear(2) clears the stats for the ACL.')
aclMeterPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1), )
if mibBuilder.loadTexts: aclMeterPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: aclMeterPortStatsTable.setDescription('The table of aclMeterPort statistics.')
aclMeterPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "aclMeterPortStatsIndx"))
if mibBuilder.loadTexts: aclMeterPortStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclMeterPortStatsTableEntry.setDescription('A row in the aclMeterPort stats table.')
aclMeterPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMeterPortStatsIndx.setStatus('current')
if mibBuilder.loadTexts: aclMeterPortStatsIndx.setDescription('The aclMeterPort index.')
aclMeterPortStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMeterPortStatsHits.setStatus('current')
if mibBuilder.loadTexts: aclMeterPortStatsHits.setDescription('Total number of hits for this ACL Meter entry on given port')
aclMeterPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclMeterPortClearStats.setStatus('current')
if mibBuilder.loadTexts: aclMeterPortClearStats.setDescription('Setting this value to clear(2) clears the stats for the ACL meter.')
mibBuilder.exportSymbols("BLADETYPE2-SWITCH-MIB", agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, agNewCfgTrapHostTable=agNewCfgTrapHostTable, agBootVer=agBootVer, agChassis=agChassis, pktStatsSmallsHiWatermark=pktStatsSmallsHiWatermark, agNewCfgSyslogTrapOspf=agNewCfgSyslogTrapOspf, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, agTacacsUserMapCurCfgTableEntry=agTacacsUserMapCurCfgTableEntry, agDiffIndex=agDiffIndex, agAccessUserNewCfgPswd=agAccessUserNewCfgPswd, swKeyInfo=swKeyInfo, agPortFiberNewCfgTxCtrl=agPortFiberNewCfgTxCtrl, spStats=spStats, eapLengthErrorFramesRx=eapLengthErrorFramesRx, agCurCfgSnmpTimeout=agCurCfgSnmpTimeout, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, agPortCurCfgDLFThreshold=agPortCurCfgDLFThreshold, agAccessUserNewCos=agAccessUserNewCos, hwInsertedCubeType=hwInsertedCubeType, agCurCfgSyslogTrapOspf=agCurCfgSyslogTrapOspf, ntpSecondaryServerRespRcvd=ntpSecondaryServerRespRcvd, agApplyTableEntry=agApplyTableEntry, agNewCfgIdleCLITimeout=agNewCfgIdleCLITimeout, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, agCurCfgMgmtNetMask=agCurCfgMgmtNetMask, authReauthsWhileAuthenticating=authReauthsWhileAuthenticating, agCfgDumpIndex=agCfgDumpIndex, authEapLogoffWhileAuthenticating=authEapLogoffWhileAuthenticating, portOperDot1xReauth=portOperDot1xReauth, portOperDot1xReset=portOperDot1xReset, agNewCfgNTPSecServer=agNewCfgNTPSecServer, agAccess=agAccess, agClearFlashDump=agClearFlashDump, agNewCfgUfdTrap=agNewCfgUfdTrap, aclMeterPortClearStats=aclMeterPortClearStats, agCfgDumpString=agCfgDumpString, agAccessUserNewCfgTableEntry=agAccessUserNewCfgTableEntry, PYSNMP_MODULE_ID=agent, agPortCurCfgIndx=agPortCurCfgIndx, pktStatsFrees=pktStatsFrees, agCurCfgTelnetServerPort=agCurCfgTelnetServerPort, agNewCfgNTPServer=agNewCfgNTPServer, tacNewCfgTimeout=tacNewCfgTimeout, agPortCurCfgRmon=agPortCurCfgRmon, tacCurCfgAuthenSecondString=tacCurCfgAuthenSecondString, agAccessUserCurCos=agAccessUserCurCos, agTacacsUserMapNewCfgUId=agTacacsUserMapNewCfgUId, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, agPortCurCfgVlanTag=agPortCurCfgVlanTag, geaportInfoTable=geaportInfoTable, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, agPortNewCfgMulticastThresholdRate=agPortNewCfgMulticastThresholdRate, ufdInfoLtMStatus=ufdInfoLtMStatus, agNewCfgSyslogTrap8021x=agNewCfgSyslogTrap8021x, tacCurCfgPort=tacCurCfgPort, agAccessUserCurCfgUId=agAccessUserCurCfgUId, agApply=agApply, aclPortStats=aclPortStats, agApplyTable=agApplyTable, agSyslogMsgTableEntry=agSyslogMsgTableEntry, agApplyConfig=agApplyConfig, agCurCfgMgmtNetSubnet=agCurCfgMgmtNetSubnet, agNewDaylightSavings=agNewDaylightSavings, agRadiusConfig=agRadiusConfig, backendAuthSuccesses=backendAuthSuccesses, tacCurCfgTimeout=tacCurCfgTimeout, agNewCfgMgmtNetSubnet=agNewCfgMgmtNetSubnet, portOperState=portOperState, agCurCfgSyslogTrapStg=agCurCfgSyslogTrapStg, tacNewCfgState=tacNewCfgState, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, agCurCfgSyslogTrapCfg=agCurCfgSyslogTrapCfg, portInfoTableEntry=portInfoTableEntry, agPortCurCfgGigEthMode=agPortCurCfgGigEthMode, tacNewCfgPrimaryIpAddr=tacNewCfgPrimaryIpAddr, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, agNewBootNxtCliMode=agNewBootNxtCliMode, portStatsClear=portStatsClear, eapolReqFramesTx=eapolReqFramesTx, portInfoPhyIfMtu=portInfoPhyIfMtu, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, portInfoPhyIfLastChange=portInfoPhyIfLastChange, agNewCfgSnmpTimeout=agNewCfgSnmpTimeout, agNTPOper=agNTPOper, pktStatsAllocs=pktStatsAllocs, agCfgDumpTable=agCfgDumpTable, mpCpuStats=mpCpuStats, hwRevision=hwRevision, tacNewCfgSecondaryIpAddr=tacNewCfgSecondaryIpAddr, backendOtherRequestsToSupplicant=backendOtherRequestsToSupplicant, agPortFiberNewCfgTxPulse=agPortFiberNewCfgTxPulse, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, mpCpuStatsUtil64Seconds=mpCpuStatsUtil64Seconds, agNewCfgSyslog2Host=agNewCfgSyslog2Host, radCurCfgAuthenString=radCurCfgAuthenString, mgmtInfo=mgmtInfo, agNewCfgHttpsServerPort=agNewCfgHttpsServerPort, agPortCurCfgMulticastThresholdRate=agPortCurCfgMulticastThresholdRate, mpCpuStatsUtil1Second=mpCpuStatsUtil1Second, agNewCfgBootp=agNewCfgBootp, agNewCfgSyslogTrapStg=agNewCfgSyslogTrapStg, agImageForNxtReset=agImageForNxtReset, agNewCfgSyslog2Sev=agNewCfgSyslog2Sev, radCurCfgRetries=radCurCfgRetries, agTacacsUserMapCurCfgTable=agTacacsUserMapCurCfgTable, agNewCfgSyslogTrapRmon=agNewCfgSyslogTrapRmon, agNewCfgSyslogSev=agNewCfgSyslogSev, agConfigForNxtReset=agConfigForNxtReset, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, agTftpUserName=agTftpUserName, agPortFiberNewCfgIndx=agPortFiberNewCfgIndx, tacNewCfgPort=tacNewCfgPort, eapolRespIdFramesRx=eapolRespIdFramesRx, agReset=agReset, agSaveConfiguration=agSaveConfiguration, agPortCurCfgTableEntry=agPortCurCfgTableEntry, radNewCfgPort=radNewCfgPort, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, authReauthsWhileAuthenticated=authReauthsWhileAuthenticated, radCurCfgTimeout=radCurCfgTimeout, agCurDaylightSavings=agCurDaylightSavings, ntpOperSendReq=ntpOperSendReq, tacNewCfgTelnet=tacNewCfgTelnet, agTftpCfgFileName=agTftpCfgFileName, authTimeoutsWhileAuthenticating=authTimeoutsWhileAuthenticating, agCurCfgNTPDlight=agCurCfgNTPDlight, agTacacsConfig=agTacacsConfig, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, agCurCfgSyslogTrapHotlinks=agCurCfgSyslogTrapHotlinks, ntpSecondaryServerUpdates=ntpSecondaryServerUpdates, agAccessUserCurCfgName=agAccessUserCurCfgName, agPortCurCfgTable=agPortCurCfgTable, portStatsPhyIfOutMulticastPkts=portStatsPhyIfOutMulticastPkts, agNewCfgMgmtNetTable=agNewCfgMgmtNetTable, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, agPortCurCfgState=agPortCurCfgState, agPortNewCfgGigEthSpeed=agPortNewCfgGigEthSpeed, agAccessUserMaxUserID=agAccessUserMaxUserID, agPortCurCfgMulticastThreshold=agPortCurCfgMulticastThreshold, agPortNewCfgBroadcastThresholdRate=agPortNewCfgBroadcastThresholdRate, aclPortStatsTableEntry=aclPortStatsTableEntry, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, agAccessUserCurCfgTableEntry=agAccessUserCurCfgTableEntry, agSyslogMsgTable=agSyslogMsgTable, agCurCfgHttpServerPort=agCurCfgHttpServerPort, agTacacsUserMapCurCfgUId=agTacacsUserMapCurCfgUId, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, agNewCfgNTPTzoneHHMM=agNewCfgNTPTzoneHHMM, agTftpPassword=agTftpPassword, agNewCfgSyslogTrapCfg=agNewCfgSyslogTrapCfg, agCurCfgLoginBanner=agCurCfgLoginBanner, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, agTftp=agTftp, agPortFiberCurCfgTxUp=agPortFiberCurCfgTxUp, tacCurCfgSecBd=tacCurCfgSecBd, ntpPrimaryServerReqSent=ntpPrimaryServerReqSent, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, portOperDot1xTable=portOperDot1xTable, agNewCfgMgmtNetDelete=agNewCfgMgmtNetDelete, agentOper=agentOper, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, tacCurCfgTelnet=tacCurCfgTelnet, portInfoSpeed=portInfoSpeed, agTacacsUserMapNewCfgTable=agTacacsUserMapNewCfgTable, agPortFiberCurCfgTxCtrl=agPortFiberCurCfgTxCtrl, agPortCurCfgDLFThresholdRate=agPortCurCfgDLFThresholdRate, ntpClearStats=ntpClearStats, agDiffState=agDiffState, backendAuthFails=backendAuthFails, aclPortClearStats=aclPortClearStats, agNewCfgReminders=agNewCfgReminders, agNewCfgSyslogTrapHotlinks=agNewCfgSyslogTrapHotlinks, ufdInfoLtDTrunks=ufdInfoLtDTrunks, agApplyIndex=agApplyIndex, agTftpServer=agTftpServer, invalidEapolFramesRx=invalidEapolFramesRx, portInfoMode=portInfoMode, ufdInfo=ufdInfo, agCurCfgHttpsServerPort=agCurCfgHttpsServerPort, agRtcTime=agRtcTime, agPortNewCfgVlanTag=agPortNewCfgVlanTag, aclMeterPortStatsTableEntry=aclMeterPortStatsTableEntry, agPortNewCfgTagPVID=agPortNewCfgTagPVID, tacCurCfgAuthenString=tacCurCfgAuthenString, agCurCfgTftpServerPort=agCurCfgTftpServerPort, dot1xPortStatsTable=dot1xPortStatsTable, radCurCfgSecBd=radCurCfgSecBd, agApplyTableSize=agApplyTableSize, agNewCfgSyslogHost=agNewCfgSyslogHost, agPortFiberNewCfgTxUp=agPortFiberNewCfgTxUp, agTacacsUserMapCurCfgMapping=agTacacsUserMapCurCfgMapping, portInfoLink=portInfoLink, agCurCfgNTPServer=agCurCfgNTPServer, agTacacsUserMapNewCfgMapping=agTacacsUserMapNewCfgMapping, authFailWhileAuthenticating=authFailWhileAuthenticating, portInfoTable=portInfoTable, agPortNewCfgPortName=agPortNewCfgPortName, geaportInfoTableEntry=geaportInfoTableEntry, agPortNewCfgDLFThreshold=agPortNewCfgDLFThreshold, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, agPortNewCfgMulticastThreshold=agPortNewCfgMulticastThreshold, portStatsIndx=portStatsIndx, portStatsPhyIfInOctets=portStatsPhyIfInOctets, ntpPrimaryServerUpdates=ntpPrimaryServerUpdates, portOperDot1xTableEntry=portOperDot1xTableEntry, tacNewCfgAuthenSecondString=tacNewCfgAuthenSecondString, ntpSystemCurrentTime=ntpSystemCurrentTime, agPortConfig=agPortConfig, portOperRmon=portOperRmon, agPortNewCfgRmon=agPortNewCfgRmon, agCurCfgSyslogSev=agCurCfgSyslogSev, agTftpImageFileName=agTftpImageFileName, agCurBootNxtCliMode=agCurBootNxtCliMode, agNewCfgMgmtNetMask=agNewCfgMgmtNetMask, backendNonNakResponsesFromSupplicant=backendNonNakResponsesFromSupplicant, agLog=agLog, dot1xPortStatsIndx=dot1xPortStatsIndx, agTftpAction=agTftpAction, agSystem=agSystem, agNewCfgTelnetServerPort=agNewCfgTelnetServerPort, agCurCfgSyslogTrapUfd=agCurCfgSyslogTrapUfd, agAccessUserNewCfgUId=agAccessUserNewCfgUId, agAccessUserCurCfgState=agAccessUserCurCfgState, pktStatsJumbos=pktStatsJumbos, agPortFiberNewCfgTxDn=agPortFiberNewCfgTxDn, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, geaportInfo=geaportInfo, radNewCfgTimeout=radNewCfgTimeout, agClrSyslogMsgs=agClrSyslogMsgs, agentInfo=agentInfo, agSyslog=agSyslog, ufdInfoLtDStatus=ufdInfoLtDStatus, radNewCfgSecBd=radNewCfgSecBd, tacCurCfgState=tacCurCfgState, lastEapolFrameVersion=lastEapolFrameVersion, tacNewCfgRetries=tacNewCfgRetries, ufdInfoState=ufdInfoState, radNewCfgRetries=radNewCfgRetries, aclMeterPortStatsIndx=aclMeterPortStatsIndx, pktStatsSmalls=pktStatsSmalls, agRtcDate=agRtcDate, hwPowerSupplyStatus=hwPowerSupplyStatus, aclMeterPortStatsTable=aclMeterPortStatsTable, agDiff=agDiff, agTftpTSDumpFileName=agTftpTSDumpFileName, agPortNewCfgStp=agPortNewCfgStp, eapolReqIdFramesTx=eapolReqIdFramesTx, agMgmtNetTableMaxSize=agMgmtNetTableMaxSize, agCurCfgMgmtNetIndex=agCurCfgMgmtNetIndex, agPortFiberCurCfgTxPulse=agPortFiberCurCfgTxPulse, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, agPortCurCfgGigEthSpeed=agPortCurCfgGigEthSpeed, aclMeterPortStats=aclMeterPortStats)
mibBuilder.exportSymbols("BLADETYPE2-SWITCH-MIB", agCfgDumpState=agCfgDumpState, portStats=portStats, agPortNewCfgGigEthMode=agPortNewCfgGigEthMode, agRackId=agRackId, agNewCfgNTPService=agNewCfgNTPService, agPortOperTableEntry=agPortOperTableEntry, portOperIdx=portOperIdx, agent=agent, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, eapolRespFramesRx=eapolRespFramesRx, agNewCfgMgmtNetEntry=agNewCfgMgmtNetEntry, portStatsTableEntry=portStatsTableEntry, ufdInfoLtMTrunks=ufdInfoLtMTrunks, agCurCfgSyslogHost=agCurCfgSyslogHost, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, mpCpuStatsUtil4Seconds=mpCpuStatsUtil4Seconds, agNewCfgHttpServerPort=agNewCfgHttpServerPort, agRevertApply=agRevertApply, agSyslogMsgTableMaxSize=agSyslogMsgTableMaxSize, agTftpLastActionStatus=agTftpLastActionStatus, aclPortStatsTable=aclPortStatsTable, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, agentStats=agentStats, agDiffTableSize=agDiffTableSize, tacCurCfgPrimaryIpAddr=tacCurCfgPrimaryIpAddr, agApplyString=agApplyString, pktStats=pktStats, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, mgmtStats=mgmtStats, eapolFramesTx=eapolFramesTx, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, agDiffTableEntry=agDiffTableEntry, agCurCfgNTPService=agCurCfgNTPService, portInfoPhyIfDescr=portInfoPhyIfDescr, tacCurCfgCmap=tacCurCfgCmap, ufdInfoLtMPorts=ufdInfoLtMPorts, ntpPrimaryServerRespRcvd=ntpPrimaryServerRespRcvd, authEapStartsWhileAuthenticating=authEapStartsWhileAuthenticating, agCurCfgSyslog2Sev=agCurCfgSyslog2Sev, agCurCfgNTPTzoneHHMM=agCurCfgNTPTzoneHHMM, radCurCfgAuthenSecondString=radCurCfgAuthenSecondString, agCurCfgSyslogFac=agCurCfgSyslogFac, agPortNewCfgTable=agPortNewCfgTable, agCurCfgIdleCLITimeout=agCurCfgIdleCLITimeout, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, portStatsPhyIfInMulticastPkts=portStatsPhyIfInMulticastPkts, agCurCfgReminders=agCurCfgReminders, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, tacNewCfgAuthenString=tacNewCfgAuthenString, agCfgDumpTableSize=agCfgDumpTableSize, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, agLastSetErrorReason=agLastSetErrorReason, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, radNewCfgTelnet=radNewCfgTelnet, agMgmtNetConfig=agMgmtNetConfig, agPortNewCfgTableEntry=agPortNewCfgTableEntry, agImage1Ver=agImage1Ver, pktStatsMediums=pktStatsMediums, ntpSecondaryServerReqSent=ntpSecondaryServerReqSent, pktStatsJumbosHiWatermark=pktStatsJumbosHiWatermark, backendResponses=backendResponses, agAccessUserCurCfgTable=agAccessUserCurCfgTable, hwPartNumber=hwPartNumber, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, agPortFiberNewCfgTableEntry=agPortFiberNewCfgTableEntry, hwSensor1Temp=hwSensor1Temp, agPortFiberCurCfgTxDn=agPortFiberCurCfgTxDn, agCurCfgNTPSecServer=agCurCfgNTPSecServer, agAccessUserNewCfgName=agAccessUserNewCfgName, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, agTacacsUserMapNewCfgTableEntry=agTacacsUserMapNewCfgTableEntry, agCfgDump=agCfgDump, agCurCfgUfdTrap=agCurCfgUfdTrap, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, eapolStartFramesRx=eapolStartFramesRx, authSuccessesWhileAuthenticating=authSuccessesWhileAuthenticating, agCurCfgBootp=agCurCfgBootp, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, agPortFiberCurCfgTableEntry=agPortFiberCurCfgTableEntry, agPortFiberNewCfgTable=agPortFiberNewCfgTable, eapolFramesRx=eapolFramesRx, portInfoIndx=portInfoIndx, agNewCfgConsole=agNewCfgConsole, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, agCurCfgMgmtNetTable=agCurCfgMgmtNetTable, agPortCurCfgTagPVID=agPortCurCfgTagPVID, authEapLogoffWhileAuthenticated=authEapLogoffWhileAuthenticated, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, agPortCurCfgBroadcastThreshold=agPortCurCfgBroadcastThreshold, agNewCfgTftpServerPort=agNewCfgTftpServerPort, backendAccessChallenges=backendAccessChallenges, agAccessUserNewCfgTable=agAccessUserNewCfgTable, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, dot1xPortStatsTableEntry=dot1xPortStatsTableEntry, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, agCurCfgMgmtNetEntry=agCurCfgMgmtNetEntry, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, radCurCfgState=radCurCfgState, lastEapolFrameSource=lastEapolFrameSource, agNTP=agNTP, agCurCfgTrapHostTable=agCurCfgTrapHostTable, portOperDot1xIndx=portOperDot1xIndx, agSlotNumber=agSlotNumber, agPortFiberCurCfgIndx=agPortFiberCurCfgIndx, ntpLastUpdateServer=ntpLastUpdateServer, aclPortStatsIndx=aclPortStatsIndx, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, agDiffString=agDiffString, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, agPortNewCfgBroadcastThreshold=agPortNewCfgBroadcastThreshold, portInfoFlowCtrl=portInfoFlowCtrl, agApplyConfiguration=agApplyConfiguration, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, agNewCfgSyslogTrapUfd=agNewCfgSyslogTrapUfd, agSyslogMsgIndex=agSyslogMsgIndex, agPortNewCfgState=agPortNewCfgState, radNewCfgAuthenSecondString=radNewCfgAuthenSecondString, agNewCfgSyslogFac=agNewCfgSyslogFac, authEapStartsWhileAuthenticated=authEapStartsWhileAuthenticated, agSavePending=agSavePending, geaportInfoUnit=geaportInfoUnit, authEntersConnecting=authEntersConnecting, agImage2Ver=agImage2Ver, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, tacNewCfgSecBd=tacNewCfgSecBd, ntpLastUpdateTime=ntpLastUpdateTime, eapolLogoffFramesRx=eapolLogoffFramesRx, agCurCfgSyslogTrapRmon=agCurCfgSyslogTrapRmon, hardware=hardware, agPortFiberCurCfgTable=agPortFiberCurCfgTable, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, ntpStats=ntpStats, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, portStatsPhyIfInErrors=portStatsPhyIfInErrors, agDiffTable=agDiffTable, agNewCfgMgmtNetIndex=agNewCfgMgmtNetIndex, agCurCfgSyslog2Host=agCurCfgSyslog2Host, agAccessUserNewCfgDelete=agAccessUserNewCfgDelete, agRevert=agRevert, agAccessUserCurCfgPswd=agAccessUserCurCfgPswd, agPortNewCfgDLFThresholdRate=agPortNewCfgDLFThresholdRate, radCurCfgPort=radCurCfgPort, agPortCurCfgBroadcastThresholdRate=agPortCurCfgBroadcastThresholdRate, agApplyPending=agApplyPending, agPortCurCfgPortName=agPortCurCfgPortName, ufdInfoLtDPorts=ufdInfoLtDPorts, agPortOperTable=agPortOperTable, authEapLogoffsWhileConnecting=authEapLogoffsWhileConnecting, tacNewCfgCmap=tacNewCfgCmap, portInfoPhyIfType=portInfoPhyIfType, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, agSyslogMessage=agSyslogMessage, pktStatsMediumsHiWatermark=pktStatsMediumsHiWatermark, agPortNewCfgIndx=agPortNewCfgIndx, radNewCfgState=radNewCfgState, agPortTableMaxEnt=agPortTableMaxEnt, agPortNewCfgPVID=agPortNewCfgPVID, geaportInfoLogicalIndex=geaportInfoLogicalIndex, agTftpDumpFileName=agTftpDumpFileName, agentConfig=agentConfig, tacCurCfgSecondaryIpAddr=tacCurCfgSecondaryIpAddr, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, agNewCfgLoginBanner=agNewCfgLoginBanner, geaportInfoPort=geaportInfoPort, agTrapHost=agTrapHost, agPortCurCfgStp=agPortCurCfgStp, pktStatsAllocFails=pktStatsAllocFails, aclPortStatsHits=aclPortStatsHits, agCurCfgSyslogTrap8021x=agCurCfgSyslogTrap8021x, tacCurCfgRetries=tacCurCfgRetries, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, agTftpImage=agTftpImage, agSoftwareVersion=agSoftwareVersion, agCurCfgConsole=agCurCfgConsole, agCfgDumpTableEntry=agCfgDumpTableEntry, radNewCfgAuthenString=radNewCfgAuthenString, portInfo=portInfo, authEntersAuthenticating=authEntersAuthenticating, agAccessUserNewCfgState=agAccessUserNewCfgState, agNewCfgNTPDlight=agNewCfgNTPDlight, aclMeterPortStatsHits=aclMeterPortStatsHits, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, agPortCurCfgPVID=agPortCurCfgPVID, radCurCfgTelnet=radCurCfgTelnet, portStatsTable=portStatsTable)
