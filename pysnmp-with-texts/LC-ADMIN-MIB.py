#
# PySNMP MIB module LC-ADMIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LC-ADMIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
lancastMibModulesA, = mibBuilder.importSymbols("LANCAST-MIB", "lancastMibModulesA")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, iso, ObjectIdentity, Counter32, ModuleIdentity, Gauge32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "iso", "ObjectIdentity", "Counter32", "ModuleIdentity", "Gauge32", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
admin = ModuleIdentity((1, 3, 6, 1, 4, 1, 2745, 1, 1))
admin.setRevisions(('1999-03-03 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: admin.setRevisionsDescriptions(('REV 1.0 original Draft',))
if mibBuilder.loadTexts: admin.setLastUpdated('9903031200Z')
if mibBuilder.loadTexts: admin.setOrganization('Lancast Inc')
if mibBuilder.loadTexts: admin.setContactInfo('Contact: Customer Service Tel: 1-877-526-2278 ext 136 Fax: 1-603-594-2887 Web: info@lancast.com')
if mibBuilder.loadTexts: admin.setDescription('This is the enterprise MIB definition file for the Admin Group of Lancast Managed products. Copyright 1999 Lancast Inc. ')
adminS = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1))
adminT = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2))
curNumSysFiles = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curNumSysFiles.setStatus('current')
if mibBuilder.loadTexts: curNumSysFiles.setDescription('This object identifies the current number of read/write files contained in the sysFileTable.')
primaryBootImage = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryBootImage.setStatus('current')
if mibBuilder.loadTexts: primaryBootImage.setDescription('The boot image to be loaded on start up.')
primaryBootImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryBootImageVersion.setStatus('current')
if mibBuilder.loadTexts: primaryBootImageVersion.setDescription('The version of the boot image to be loaded on start up.')
primaryCoreImage = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryCoreImage.setStatus('current')
if mibBuilder.loadTexts: primaryCoreImage.setDescription('The core image to be loaded on start up.')
primaryCoreImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryCoreImageVersion.setStatus('current')
if mibBuilder.loadTexts: primaryCoreImageVersion.setDescription('The version of the core image to be loaded on start up.')
primaryAppImage = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryAppImage.setStatus('current')
if mibBuilder.loadTexts: primaryAppImage.setDescription('The application(personality) image to be loaded on start up.')
primaryAppImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryAppImageVersion.setStatus('current')
if mibBuilder.loadTexts: primaryAppImageVersion.setDescription('The version of the application(personality) image to be loaded on start up.')
curDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: curDateTime.setStatus('current')
if mibBuilder.loadTexts: curDateTime.setDescription('A textual string of the current date and time of this system expressed as . Example: 12/01/1998 08:30:15.')
fileTransferCapability = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("upLoadOnly", 2), ("downLoadOnly", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferCapability.setStatus('current')
if mibBuilder.loadTexts: fileTransferCapability.setDescription('This object specifies the overall ability of the device to perform transfering of files. In some instances an organization may want to disable all downloads and or uploads to/from this system.')
entityMibSupport = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localsubsetSNMPV1", 1), ("standardMibSNMPV2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityMibSupport.setStatus('current')
if mibBuilder.loadTexts: entityMibSupport.setDescription('This object indicates whether this product supports the entity MIB under the Lancast Proprietary node or the standard mgmnt.mib-2.47 node.')
manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturer.setStatus('current')
if mibBuilder.loadTexts: manufacturer.setDescription('The manufacturer of this product.')
communityStringRO = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringRO.setStatus('current')
if mibBuilder.loadTexts: communityStringRO.setDescription('The community string required to authenticate a read access to all MIB objects except for the communityStringRW object.')
communityStringRW = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringRW.setStatus('current')
if mibBuilder.loadTexts: communityStringRW.setDescription('The community string required to authenticate a read or write access to all MIB objects.')
snmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("v1", 2), ("v2", 3), ("v3", 4), ("biLingualV1V2", 5), ("bilingualV1V2c", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpVersion.setStatus('current')
if mibBuilder.loadTexts: snmpVersion.setDescription('The version of SNMP supported by this product.')
defaultGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: defaultGatewayAddress.setDescription('The default gateway address.')
lastSystemResetReason = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cold-start", 1), ("nms-sw-reset", 2), ("download-reset", 3), ("watch-dog-timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSystemResetReason.setStatus('current')
if mibBuilder.loadTexts: lastSystemResetReason.setDescription('This object specifies the reason the system was last reset.')
lastSystemResetTime = MibScalar((1, 3, 6, 1, 4, 1, 2745, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSystemResetTime.setStatus('current')
if mibBuilder.loadTexts: lastSystemResetTime.setDescription('This object specifies the date and time the system was last reset .')
accessControlTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 1), )
if mibBuilder.loadTexts: accessControlTable.setStatus('current')
if mibBuilder.loadTexts: accessControlTable.setDescription('A table of information pertaining to management station addresses that have authority to access this system.')
accessControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 1, 1), ).setIndexNames((0, "LC-ADMIN-MIB", "accessControlIndex"))
if mibBuilder.loadTexts: accessControlTableEntry.setStatus('current')
if mibBuilder.loadTexts: accessControlTableEntry.setDescription('An entry representing an authorized address.')
accessControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlIndex.setStatus('current')
if mibBuilder.loadTexts: accessControlIndex.setDescription('The index into the table of authorized managers of this system.')
accessControlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddress.setStatus('current')
if mibBuilder.loadTexts: accessControlAddress.setDescription('The address of a managment station which has authority to access this system.')
sysFileTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2), )
if mibBuilder.loadTexts: sysFileTable.setStatus('current')
if mibBuilder.loadTexts: sysFileTable.setDescription('The table of information pertaining to files loaded on this system.')
sysFileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2, 1), ).setIndexNames((0, "LC-ADMIN-MIB", "sysFileTableIndex"))
if mibBuilder.loadTexts: sysFileTableEntry.setStatus('current')
if mibBuilder.loadTexts: sysFileTableEntry.setDescription('An entry representing a file in this table.')
sysFileTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFileTableIndex.setStatus('current')
if mibBuilder.loadTexts: sysFileTableIndex.setDescription('The index into the table of files loaded on this system.')
sysFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileName.setStatus('current')
if mibBuilder.loadTexts: sysFileName.setDescription('The ascii name of a file.')
sysFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFileSize.setStatus('current')
if mibBuilder.loadTexts: sysFileSize.setDescription('The file size measured in bytes.')
sysFileAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("executable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFileAttribute.setStatus('current')
if mibBuilder.loadTexts: sysFileAttribute.setDescription('This object indicates the attributes of each file loaded on this system.')
sysFileDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFileDateTime.setStatus('current')
if mibBuilder.loadTexts: sysFileDateTime.setDescription('A textual string of the date and time this file was created on this system.')
xferFileTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3), )
if mibBuilder.loadTexts: xferFileTable.setStatus('current')
if mibBuilder.loadTexts: xferFileTable.setDescription('The table of information pertaining to files that are transfered to/from this system.')
xferFileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1), ).setIndexNames((0, "LC-ADMIN-MIB", "xferFileTableIndex"))
if mibBuilder.loadTexts: xferFileTableEntry.setStatus('current')
if mibBuilder.loadTexts: xferFileTableEntry.setDescription('An entry representing a file in this table.')
xferFileTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferFileTableIndex.setStatus('current')
if mibBuilder.loadTexts: xferFileTableIndex.setDescription('The index into the table of file transfer information.')
xferFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xferFileName.setStatus('current')
if mibBuilder.loadTexts: xferFileName.setDescription('The name of a file that is transferable on this system.')
xferFileAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xferFileAddress.setStatus('current')
if mibBuilder.loadTexts: xferFileAddress.setDescription('The source IP address for a download or the desination IP address for an upload.')
xferFileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xferFileDirection.setStatus('current')
if mibBuilder.loadTexts: xferFileDirection.setDescription('The direction to transfer a file. Upload a file from this device to the destination address specified by xferFileAddress. Download a file from the source address specified by xferFileAdress to this device.')
xferFileActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transfer", 1), ("ready", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xferFileActivation.setStatus('current')
if mibBuilder.loadTexts: xferFileActivation.setDescription('Writing this object with the value of transfer(1) will invoke a file transfer to this system on a download or from this system on an upload. The value read back will always be ready(2). Writing the value ready(2) will be ignored.')
xferFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("waitingToXfer", 2), ("inProgress", 3), ("success", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferFileStatus.setStatus('current')
if mibBuilder.loadTexts: xferFileStatus.setDescription('This object reflect the status of the current or last file transfer.')
xferFileFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferFileFailureCode.setStatus('current')
if mibBuilder.loadTexts: xferFileFailureCode.setDescription('This object is the failure return code from a file transfer protocol such as TFTP and FTP. Refer to the respective protocol for further information.')
xferFileProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xferFileProtocol.setStatus('current')
if mibBuilder.loadTexts: xferFileProtocol.setDescription('This object selects the protocol to be used in a file transfer.')
trapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4), )
if mibBuilder.loadTexts: trapManagerTable.setStatus('current')
if mibBuilder.loadTexts: trapManagerTable.setDescription('A table of Network Mangagement Applications to which traps will be sent.')
trapManagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1), ).setIndexNames((0, "LC-ADMIN-MIB", "trapManagerIndex"))
if mibBuilder.loadTexts: trapManagerTableEntry.setStatus('current')
if mibBuilder.loadTexts: trapManagerTableEntry.setDescription('An entry in the table of trap managers.')
trapManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapManagerIndex.setStatus('current')
if mibBuilder.loadTexts: trapManagerIndex.setDescription('The index into the table of trap managers for this system.')
trapManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerIpAddress.setStatus('current')
if mibBuilder.loadTexts: trapManagerIpAddress.setDescription('This object identifies the IP address of a manager to which traps will be sent. A valid address is any non zero value excluding the broadcast address 255.255.255.255. Setting this to 0.0.0.0 disables this entry.')
trapManagerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1, 3), Integer32().clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerUdpPort.setStatus('current')
if mibBuilder.loadTexts: trapManagerUdpPort.setDescription('This object specifies the UDP port at which a management application may receive traps. The default value will be the standard UDP Trap port of 162.')
trapManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerName.setStatus('current')
if mibBuilder.loadTexts: trapManagerName.setDescription('A user defined name to identify this trap manager.')
trapManagerControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerControlStatus.setStatus('current')
if mibBuilder.loadTexts: trapManagerControlStatus.setDescription("This object is used to an enable or disable the sending of traps to a specific address. Setting this to disable will prevent all traps from being sent to this entry's address.")
trapManagerSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("v1", 2), ("v2", 3), ("v3", 4), ("biLingualV1V2", 5), ("bilingualV1V2c", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: trapManagerSnmpVersion.setDescription('This object specifies the SNMP version that this manager supports.')
trapControlTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5), )
if mibBuilder.loadTexts: trapControlTable.setStatus('current')
if mibBuilder.loadTexts: trapControlTable.setDescription('A list identifying the enable/disable status of all traps that this system is capable of sending.')
trapControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5, 1), ).setIndexNames((0, "LC-ADMIN-MIB", "trapControlTableIndex"))
if mibBuilder.loadTexts: trapControlTableEntry.setStatus('current')
if mibBuilder.loadTexts: trapControlTableEntry.setDescription('An entry in this table identifying the enable/disable status of a particular trap.')
trapControlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapControlTableIndex.setStatus('current')
if mibBuilder.loadTexts: trapControlTableIndex.setDescription('The index into the table of trap control information.')
trapControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapControlName.setStatus('current')
if mibBuilder.loadTexts: trapControlName.setDescription("The name of the trap to which this entrys' trapControlStatus applies.")
trapControlV1TrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapControlV1TrapNumber.setStatus('current')
if mibBuilder.loadTexts: trapControlV1TrapNumber.setDescription("The SNMP V1 number of the trap to which this entrys' trapControlStatus applies.")
trapControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapControlStatus.setStatus('current')
if mibBuilder.loadTexts: trapControlStatus.setDescription('The enable/disable status of this trap control. When this object is set to enable, the corresponding trap will be generated to all trap managers listed and enabled in the trapManagerTable.')
trapControlV2TrapOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 5, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapControlV2TrapOid.setStatus('current')
if mibBuilder.loadTexts: trapControlV2TrapOid.setDescription('The object identifier used to identify a specific SNMP V2 trap. For example, the V2 Oid for COLD START is 1.3.6.1.6.3.1.1.5.1')
interfaceAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 6), )
if mibBuilder.loadTexts: interfaceAddressTable.setStatus('current')
if mibBuilder.loadTexts: interfaceAddressTable.setDescription('A table of addresses associated with all mib-II interfaces in this system.')
interfaceAddressTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 6, 1), ).setIndexNames((0, "LC-ADMIN-MIB", "interfaceIfNum"))
if mibBuilder.loadTexts: interfaceAddressTableEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceAddressTableEntry.setDescription('An entry in the interface address table associated with a mib-II interface.')
interfaceIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIfNum.setStatus('current')
if mibBuilder.loadTexts: interfaceIfNum.setDescription('The interface on which a module sends & receives protocol traffic. This value is the same value as ifIndex in MIB-II.')
interfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: interfaceIpAddress.setDescription('This object identifies the address of the mib-II interface identified by interfaceIfNum.')
interfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 1, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceSubnetMask.setStatus('current')
if mibBuilder.loadTexts: interfaceSubnetMask.setDescription('The subnet mask associated with the adress of this entry. The value of the mask is an address with all the network bits set to 1 and all the host bits set to 0.')
mibBuilder.exportSymbols("LC-ADMIN-MIB", interfaceAddressTable=interfaceAddressTable, interfaceIfNum=interfaceIfNum, adminS=adminS, accessControlTableEntry=accessControlTableEntry, primaryCoreImageVersion=primaryCoreImageVersion, PYSNMP_MODULE_ID=admin, sysFileTableEntry=sysFileTableEntry, sysFileTable=sysFileTable, primaryBootImage=primaryBootImage, accessControlAddress=accessControlAddress, xferFileTableIndex=xferFileTableIndex, trapControlName=trapControlName, trapControlV2TrapOid=trapControlV2TrapOid, snmpVersion=snmpVersion, defaultGatewayAddress=defaultGatewayAddress, trapControlTableEntry=trapControlTableEntry, xferFileTableEntry=xferFileTableEntry, trapControlTableIndex=trapControlTableIndex, trapManagerTableEntry=trapManagerTableEntry, interfaceAddressTableEntry=interfaceAddressTableEntry, admin=admin, xferFileActivation=xferFileActivation, xferFileName=xferFileName, entityMibSupport=entityMibSupport, curDateTime=curDateTime, primaryAppImage=primaryAppImage, sysFileAttribute=sysFileAttribute, trapControlStatus=trapControlStatus, trapManagerSnmpVersion=trapManagerSnmpVersion, accessControlIndex=accessControlIndex, xferFileStatus=xferFileStatus, adminT=adminT, interfaceIpAddress=interfaceIpAddress, fileTransferCapability=fileTransferCapability, communityStringRO=communityStringRO, sysFileName=sysFileName, trapManagerTable=trapManagerTable, primaryCoreImage=primaryCoreImage, trapControlV1TrapNumber=trapControlV1TrapNumber, xferFileFailureCode=xferFileFailureCode, lastSystemResetReason=lastSystemResetReason, accessControlTable=accessControlTable, trapManagerUdpPort=trapManagerUdpPort, trapControlTable=trapControlTable, xferFileProtocol=xferFileProtocol, primaryBootImageVersion=primaryBootImageVersion, trapManagerIndex=trapManagerIndex, xferFileDirection=xferFileDirection, curNumSysFiles=curNumSysFiles, manufacturer=manufacturer, sysFileTableIndex=sysFileTableIndex, interfaceSubnetMask=interfaceSubnetMask, trapManagerIpAddress=trapManagerIpAddress, trapManagerName=trapManagerName, trapManagerControlStatus=trapManagerControlStatus, sysFileSize=sysFileSize, xferFileAddress=xferFileAddress, xferFileTable=xferFileTable, communityStringRW=communityStringRW, sysFileDateTime=sysFileDateTime, primaryAppImageVersion=primaryAppImageVersion, lastSystemResetTime=lastSystemResetTime)
