#
# PySNMP MIB module CTRON-SYSLOG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-SYSLOG
# Produced by pysmi-0.3.4 at Wed May  1 12:31:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
cabletron, = mibBuilder.importSymbols("CTRON-OIDS", "cabletron")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Unsigned32, ModuleIdentity, TimeTicks, ObjectIdentity, IpAddress, NotificationType, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "IpAddress", "NotificationType", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Gauge32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctSSA = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497))
aapsLog = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 9))
logWindow = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1))
logWindowTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1), )
if mibBuilder.loadTexts: logWindowTable.setStatus('mandatory')
if mibBuilder.loadTexts: logWindowTable.setDescription('Table of log entries')
logWindowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1, 1), ).setIndexNames((0, "CTRON-SYSLOG", "ltIndex"))
if mibBuilder.loadTexts: logWindowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logWindowEntry.setDescription('Entry of logWindow Table')
ltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ltIndex.setDescription('Index (window position) of the entry in the current Log Snapshot.')
ltLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltLogString.setStatus('mandatory')
if mibBuilder.loadTexts: ltLogString.setDescription('String describing the event in the format: Time(DD:HH:MM:SS) + Log Level(FREEZE/ERROR/CRITICAL/STATUS/INFO/DEBUG) + Log Client Name + Event String. Time is expressed as time since reset (not realtime). This will change to realtime in the next iteration of this MIB.')
ltWindowOperation = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("refresh", 2), ("pageUp", 3), ("pageDown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltWindowOperation.setStatus('mandatory')
if mibBuilder.loadTexts: ltWindowOperation.setDescription('refresh(2) redisplays the contents of the current window table. pageUp(3) moves the window one page up. pageDown(4) moves the window one page down.')
ltWindowReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("toLogStart", 2), ("toLogEnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltWindowReset.setStatus('mandatory')
if mibBuilder.loadTexts: ltWindowReset.setDescription('By setting this object to one of the two available values moves the beginning of the next window to log start or end')
ltClientMatchString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltClientMatchString.setStatus('mandatory')
if mibBuilder.loadTexts: ltClientMatchString.setDescription('Setting this object to a string value will filter out those clients that do not contain that string as a prefix (case sensitive).')
ltEventMatchString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltEventMatchString.setStatus('mandatory')
if mibBuilder.loadTexts: ltEventMatchString.setDescription('Setting this object to a string value will filter out those logged events that do not contain that string within the log entry (case sensitive).')
serverConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2))
scAutoFreeze = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAutoFreeze.setStatus('mandatory')
if mibBuilder.loadTexts: scAutoFreeze.setDescription('After this value is enabled, the act of logging a FREEZE level message will prevent any additional messages from being logged. The logging process can continue when scAdminStatus is set to enableLogging(3).')
scAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("disableLogging", 2), ("enableLogging", 3), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scAdminStatus.setDescription('This object controls the status of the message logging system and the log itself. Setting this object to disableLogging(2) will prevent any clients from appending messages to the log. EnableLogging(3) starts/resumes logging. Reset(5) initializes the log.')
scLastChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 9, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: scLastChange.setDescription('The value of sysUpTime at the last change to scAdminStatus or scAutoFreeze.')
clientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3), )
if mibBuilder.loadTexts: clientConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: clientConfigTable.setDescription('This table provides the ability to configure which messages will be logged and which will be displayed on a per client basis.')
clientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1), ).setIndexNames((0, "CTRON-SYSLOG", "ccClientID"))
if mibBuilder.loadTexts: clientConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clientConfigEntry.setDescription('Entry of the client table')
ccClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccClientID.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientID.setDescription('Unique ID of the client entry')
ccClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccClientName.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientName.setDescription('Name of the client')
ccClientPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientPersistent.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientPersistent.setDescription('When enabled, client settings in this table are persistent across resets.')
ccClientLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientLogStatus.setDescription('When disabled, this client does not append messages to the log.')
ccClientDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientDisplayStatus.setDescription("When disabled, this client's messages are not displayed in the log window. This does not prevent them from being logged.")
ccClientFreezeLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientFreezeLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientFreezeLogStatus.setDescription("When disabled, client's messages with this log level do not get appended to the log.")
ccClientFreezeDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientFreezeDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientFreezeDisplayStatus.setDescription("When disabled, client's messages with this log level do not get displayed in the log window.")
ccClientErrorLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientErrorLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientErrorLogStatus.setDescription("When disabled, client's messages with this log level do not get appended to the log.")
ccClientErrorDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientErrorDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientErrorDisplayStatus.setDescription("When disabled, client's messages with this log level do not get displayed in the log window.")
ccClientCriticalLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientCriticalLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientCriticalLogStatus.setDescription("When disabled, client's messages with this log level do not get appended to the log.")
ccClientCriticalDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientCriticalDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientCriticalDisplayStatus.setDescription("When disabled, client's messages with this log level do not get displayed in the log window.")
ccClientStatusLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientStatusLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientStatusLogStatus.setDescription("When disabled, client's messages with this log level do not get appended to the log.")
ccClientStatusDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientStatusDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientStatusDisplayStatus.setDescription("When disabled, client's messages with this log level do not get displayed in the log window.")
ccClientInfoLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientInfoLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientInfoLogStatus.setDescription("When disabled, client's messages with this log level do not get appended to the log.")
ccClientInfoDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientInfoDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientInfoDisplayStatus.setDescription("When disabled, client's messages with this log level do not get displayed in the log window.")
ccClientDebugLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientDebugLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientDebugLogStatus.setDescription("When disabled, client's messages with this log level do not get appended to the log.")
ccClientDebugDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClientDebugDisplayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccClientDebugDisplayStatus.setDescription("When disabled, client's messages with this log level do not get displayed in the log window.")
recoveredLogTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4), )
if mibBuilder.loadTexts: recoveredLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: recoveredLogTable.setDescription('Table that contains a the last 100 entries in the log recorded before the last system shutdown, reset or a power failure.')
recoveredLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4, 1), ).setIndexNames((0, "CTRON-SYSLOG", "rlIndex"))
if mibBuilder.loadTexts: recoveredLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: recoveredLogTableEntry.setDescription('Entry of the recovered log table')
rlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rlIndex.setDescription('Unique index of the recovered log entry. Entry with index 1 is the oldest entry in the log.')
rlLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 9, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(200, 200)).setFixedLength(200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlLogString.setStatus('mandatory')
if mibBuilder.loadTexts: rlLogString.setDescription('Event string of this entry.')
mibBuilder.exportSymbols("CTRON-SYSLOG", scAdminStatus=scAdminStatus, ccClientPersistent=ccClientPersistent, ltWindowOperation=ltWindowOperation, clientConfigTable=clientConfigTable, ccClientInfoLogStatus=ccClientInfoLogStatus, scAutoFreeze=scAutoFreeze, ltIndex=ltIndex, ccClientInfoDisplayStatus=ccClientInfoDisplayStatus, logWindowEntry=logWindowEntry, ccClientCriticalLogStatus=ccClientCriticalLogStatus, rlIndex=rlIndex, clientConfigEntry=clientConfigEntry, recoveredLogTableEntry=recoveredLogTableEntry, ctSSA=ctSSA, ltClientMatchString=ltClientMatchString, ccClientName=ccClientName, ccClientFreezeDisplayStatus=ccClientFreezeDisplayStatus, ltWindowReset=ltWindowReset, ccClientID=ccClientID, ccClientDebugDisplayStatus=ccClientDebugDisplayStatus, logWindow=logWindow, aapsLog=aapsLog, logWindowTable=logWindowTable, rlLogString=rlLogString, ccClientStatusDisplayStatus=ccClientStatusDisplayStatus, recoveredLogTable=recoveredLogTable, ccClientErrorDisplayStatus=ccClientErrorDisplayStatus, ltLogString=ltLogString, ccClientFreezeLogStatus=ccClientFreezeLogStatus, ccClientErrorLogStatus=ccClientErrorLogStatus, serverConfig=serverConfig, scLastChange=scLastChange, ccClientLogStatus=ccClientLogStatus, ccClientDisplayStatus=ccClientDisplayStatus, ltEventMatchString=ltEventMatchString, ccClientCriticalDisplayStatus=ccClientCriticalDisplayStatus, ccClientStatusLogStatus=ccClientStatusLogStatus, ccClientDebugLogStatus=ccClientDebugLogStatus)
