#
# PySNMP MIB module HP-ICF-ARP-THROTTLE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-ARP-THROTTLE
# Produced by pysmi-0.3.4 at Wed May  1 13:33:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Integer32, ObjectIdentity, MibIdentifier, Unsigned32, iso, Gauge32, NotificationType, Counter32, ModuleIdentity, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Integer32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "iso", "Gauge32", "NotificationType", "Counter32", "ModuleIdentity", "Bits", "TimeTicks")
RowStatus, MacAddress, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TextualConvention", "TruthValue")
hpicfArpThrottle = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119))
hpicfArpThrottle.setRevisions(('2015-05-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfArpThrottle.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: hpicfArpThrottle.setLastUpdated('201505070000Z')
if mibBuilder.loadTexts: hpicfArpThrottle.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfArpThrottle.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfArpThrottle.setDescription('This MIB module contains HP proprietary objects for managing ARP throttling.')
hpicfArpThrottleNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 0))
hpicfArpThrottleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1))
hpicfArpThrottleConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2))
hpicfArpThrottleExceedThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 0, 1)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleClientOverThreshold"))
if mibBuilder.loadTexts: hpicfArpThrottleExceedThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleExceedThresholdTrap.setDescription('This notification indicates that a client sending large number of ARP packets over the configured threshold is detected. The MAC address of the client is included in the notification.')
hpicfArpThrottleClientOverThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpThrottleClientOverThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleClientOverThreshold.setDescription('MAC address of a client that just went over the ARP throttle Threshold. It is used in hpicfArpThrottle notification.')
hpicfArpThrottleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2))
hpicfArpThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleEnable.setDescription('The administrative status of the ARP Throttle feature. true(1) - enabled; false(2) - disabled.')
hpicfArpThrottleRemediationMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("monitor", 0), ("filter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleRemediationMode.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleRemediationMode.setDescription('The remediation mode of the ARP Throttle. In monitor mode, the switch only logs alerts when a client exceeds the configured threshold; In filter mode, ARP packets over the threshold will be dropped in addition to alert logging.')
hpicfArpThrottleThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleThreshold.setDescription('The maximum number of ARP packets a client can send in 5 seconds. When a client goes over the threshold, it will be put into a blacklist and subject to the configured remediation action.')
hpicfArpThrottleBlacklistAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleBlacklistAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleBlacklistAgingTime.setDescription('The time a client stays in the blacklist, in seconds.')
hpicfArpThrottleExcludedMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5), )
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacTable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacTable.setDescription('List of excluded MAC addresses that are not subject to throttling.')
hpicfArpThrottleExcludedMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5, 1), ).setIndexNames((0, "HP-ICF-ARP-THROTTLE", "hpicfArpThrottleExcludedMac"))
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacEntry.setDescription('Information of an excluded MAC address that is not subject to throttling.')
hpicfArpThrottleExcludedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMac.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMac.setDescription('A MAC address to be included from ARP throttle.')
hpicfArpThrottleExcludedMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacStatus.setDescription('The row status of this entry instance. createAndGo - will create the entry for the excluded MAC and transition the status to active. active - indicate the entry instance is in effect. destroy - delete the entry instance. All other RowStatus values are NOT supported.')
hpicfArpThrottleStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 3))
hpicfArpThrottleStatsNumClientsInBlacklist = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpThrottleStatsNumClientsInBlacklist.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleStatsNumClientsInBlacklist.setDescription('Total number of clients in blacklist.')
hpicfArpThrottleStatsNumClientsBeingTracked = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpThrottleStatsNumClientsBeingTracked.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleStatsNumClientsBeingTracked.setDescription('Total number of clients being tracked for their ARP packets.')
hpicfArpThrottleGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 1))
hpicfArpThrottleBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 1, 1)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleEnable"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleRemediationMode"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleThreshold"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleBlacklistAgingTime"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleExcludedMacStatus"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleStatsNumClientsInBlacklist"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleStatsNumClientsBeingTracked"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleClientOverThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpThrottleBaseGroup = hpicfArpThrottleBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleBaseGroup.setDescription('A group of objects that provides ARP throttle configuration, Statistics, and traps.')
hpicfArpThrottleNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 1, 2)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleExceedThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpThrottleNotificationGroup = hpicfArpThrottleNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleNotificationGroup.setDescription('A group of notifications for ARP throttle.')
hpicfArpThrottleCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 2))
hpicfArpThrottleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 2, 1)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleBaseGroup"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpThrottleCompliance = hpicfArpThrottleCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfArpThrottleCompliance.setDescription('The compliance statement for HP switches that support ARP Throttle.')
mibBuilder.exportSymbols("HP-ICF-ARP-THROTTLE", hpicfArpThrottleEnable=hpicfArpThrottleEnable, hpicfArpThrottleThreshold=hpicfArpThrottleThreshold, hpicfArpThrottleBaseGroup=hpicfArpThrottleBaseGroup, hpicfArpThrottleClientOverThreshold=hpicfArpThrottleClientOverThreshold, hpicfArpThrottleObjects=hpicfArpThrottleObjects, hpicfArpThrottleGroups=hpicfArpThrottleGroups, hpicfArpThrottleExcludedMac=hpicfArpThrottleExcludedMac, hpicfArpThrottleStatsNumClientsInBlacklist=hpicfArpThrottleStatsNumClientsInBlacklist, hpicfArpThrottleNotificationGroup=hpicfArpThrottleNotificationGroup, PYSNMP_MODULE_ID=hpicfArpThrottle, hpicfArpThrottleExceedThresholdTrap=hpicfArpThrottleExceedThresholdTrap, hpicfArpThrottleExcludedMacTable=hpicfArpThrottleExcludedMacTable, hpicfArpThrottleNotifications=hpicfArpThrottleNotifications, hpicfArpThrottleCompliances=hpicfArpThrottleCompliances, hpicfArpThrottleConfig=hpicfArpThrottleConfig, hpicfArpThrottleExcludedMacStatus=hpicfArpThrottleExcludedMacStatus, hpicfArpThrottleStatsNumClientsBeingTracked=hpicfArpThrottleStatsNumClientsBeingTracked, hpicfArpThrottleCompliance=hpicfArpThrottleCompliance, hpicfArpThrottleExcludedMacEntry=hpicfArpThrottleExcludedMacEntry, hpicfArpThrottleConformance=hpicfArpThrottleConformance, hpicfArpThrottleStats=hpicfArpThrottleStats, hpicfArpThrottleRemediationMode=hpicfArpThrottleRemediationMode, hpicfArpThrottleBlacklistAgingTime=hpicfArpThrottleBlacklistAgingTime, hpicfArpThrottle=hpicfArpThrottle)
