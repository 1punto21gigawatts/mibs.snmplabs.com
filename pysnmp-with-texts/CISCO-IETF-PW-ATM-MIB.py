#
# PySNMP MIB module CISCO-IETF-PW-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-PW-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVcIdentifier")
cpwVcIndex, = mibBuilder.importSymbols("CISCO-IETF-PW-MIB", "cpwVcIndex")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Integer32, IpAddress, ObjectIdentity, Gauge32, Counter64, NotificationType, Unsigned32, ModuleIdentity, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "IpAddress", "ObjectIdentity", "Gauge32", "Counter64", "NotificationType", "Unsigned32", "ModuleIdentity", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
cpwVcAtmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 9000))
cpwVcAtmMIB.setRevisions(('2005-04-19 12:00', '2003-02-16 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cpwVcAtmMIB.setRevisionsDescriptions(('Updated Mib police review comments', 'Initial Version',))
if mibBuilder.loadTexts: cpwVcAtmMIB.setLastUpdated('200504191200Z')
if mibBuilder.loadTexts: cpwVcAtmMIB.setOrganization('Cisco Systems, Inc')
if mibBuilder.loadTexts: cpwVcAtmMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-atm@cisco.com')
if mibBuilder.loadTexts: cpwVcAtmMIB.setDescription('This MIB contains managed object definitions for Pseudo Wire emulation of ATM over Packet Switched Networks(PSN). This MIB reports to the PW-MIB. The PW-MIB contains structures and MIB associations generic to Pseudo-Wire Virtual Circuit (VC) emulation. VC-specific MIBs (such as this) contain config and stats for specific VC types.')
cpwVcAtmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 9000, 0))
cpwVcAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1))
cpwVcAtmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 9000, 2))
cpwVcAtmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1), )
if mibBuilder.loadTexts: cpwVcAtmTable.setStatus('current')
if mibBuilder.loadTexts: cpwVcAtmTable.setDescription('This table specifies the information for an ATM interface, VC, VP to be carried over PSN.')
cpwVcAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwVcAtmEntry.setStatus('current')
if mibBuilder.loadTexts: cpwVcAtmEntry.setDescription('A row in this table represents an ATM interface, VC, VP that needs to be adapted and carried over PSN. This table is indexed by CpwVcIndex in CISCO-IETF-PW-MIB.')
cpwAtmIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmIf.setStatus('current')
if mibBuilder.loadTexts: cpwAtmIf.setDescription('The ATM Interface that receives cells from the ATM network.')
cpwAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 2), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmVpi.setStatus('current')
if mibBuilder.loadTexts: cpwAtmVpi.setDescription('VPI value of this ATM VC.')
cpwAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 3), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmVci.setStatus('current')
if mibBuilder.loadTexts: cpwAtmVci.setDescription('VCI value of this ATM VC.')
cpwAtmClpQosMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmClpQosMapping.setStatus('current')
if mibBuilder.loadTexts: cpwAtmClpQosMapping.setDescription('This Object indicates whether the CLP bits are considered when determining the value placed in the Quality of Service fields (e.g. EXP fields of the MPLS Label Stack) of the encapsulating protocol.')
cpwAtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpwAtmRowStatus.setDescription('This Object is used to create, modify or delete a row in this table.')
cpwAtmOamCellSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmOamCellSupported.setStatus('current')
if mibBuilder.loadTexts: cpwAtmOamCellSupported.setDescription('This Object indicates whether OAM Cells are transported on this VC.')
cpwAtmQosScalingFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 7), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmQosScalingFactor.setStatus('current')
if mibBuilder.loadTexts: cpwAtmQosScalingFactor.setDescription('This Object represents the scaling factor (% value) to be applied to ATM QoS rates when calculating QoS rates for the PSN domain . For example, in the cell transport mode the bandwidth needed in the PSN domain will be higher (since PSN Transport header, PW header, and optional control word have to transmitted with every cell), whereas in the AAL5 mode the bandwidth needed in PSN domain will be less since cell headers will be removed after reassembly.')
cpwAtmCellPacking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmCellPacking.setStatus('current')
if mibBuilder.loadTexts: cpwAtmCellPacking.setDescription('This object is used to identify if the VC is configured to do Cell Packing.')
cpwAtmMncp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmMncp.setStatus('current')
if mibBuilder.loadTexts: cpwAtmMncp.setDescription('This object indicates the maximum number of cells that get packed in one packet.')
cpwAtmPeerMncp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmPeerMncp.setStatus('current')
if mibBuilder.loadTexts: cpwAtmPeerMncp.setDescription('This Object represents the maximum number of cell that can be packed in one packet for peer interface.')
cpwAtmEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mpls", 1), ("l2tpv3", 2), ("unknown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmEncap.setStatus('current')
if mibBuilder.loadTexts: cpwAtmEncap.setDescription('This object indicates if the packet going on the pseudowire is mpls or l2tpv3 encapsulated.')
cpwAtmMcptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwAtmMcptTimeout.setStatus('current')
if mibBuilder.loadTexts: cpwAtmMcptTimeout.setDescription('This Object represents which MCPT timeout value.')
cpwVcAtmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2), )
if mibBuilder.loadTexts: cpwVcAtmPerfTable.setStatus('current')
if mibBuilder.loadTexts: cpwVcAtmPerfTable.setDescription('This table specifies performance-related attributes for an ATM vc, vp and the interface.')
cpwVcAtmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1), )
cpwVcAtmEntry.registerAugmentions(("CISCO-IETF-PW-ATM-MIB", "cpwVcAtmPerfEntry"))
cpwVcAtmPerfEntry.setIndexNames(*cpwVcAtmEntry.getIndexNames())
if mibBuilder.loadTexts: cpwVcAtmPerfEntry.setStatus('current')
if mibBuilder.loadTexts: cpwVcAtmPerfEntry.setDescription('A row in this table represents an ATM interface, VC, VP that needs to be adapted and carried over PSN. This table is indexed by CpwVcIndex in CISCO-IETF-PW-MIB.')
cpwAtmCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmCellsReceived.setStatus('current')
if mibBuilder.loadTexts: cpwAtmCellsReceived.setDescription('This object can be used to obtain the information on the number of cells that were received and sent to the PSN.')
cpwAtmCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmCellsSent.setStatus('current')
if mibBuilder.loadTexts: cpwAtmCellsSent.setDescription('This object can be used to obtain the information on the number of cells that were received from the PSN and sent over the ATM network.')
cpwAtmCellsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmCellsRejected.setStatus('current')
if mibBuilder.loadTexts: cpwAtmCellsRejected.setDescription('This Object indicates the number of cells that were rejected by this VC because of policing.')
cpwAtmCellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmCellsTagged.setStatus('current')
if mibBuilder.loadTexts: cpwAtmCellsTagged.setDescription('This Object indicates the number of cells that were Tagged.')
cpwAtmHCCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmHCCellsReceived.setStatus('current')
if mibBuilder.loadTexts: cpwAtmHCCellsReceived.setDescription('High Capacity counter for the number of cells that were received by this VC.')
cpwAtmHCCellsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmHCCellsRejected.setStatus('current')
if mibBuilder.loadTexts: cpwAtmHCCellsRejected.setDescription('High Capacity counter for the number of cells that were rejected by this VC because of policing.')
cpwAtmHCCellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmHCCellsTagged.setStatus('current')
if mibBuilder.loadTexts: cpwAtmHCCellsTagged.setDescription('High Capacity counter for the number of cells that were tagged')
cpwAtmAvgCellsPacked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmAvgCellsPacked.setStatus('current')
if mibBuilder.loadTexts: cpwAtmAvgCellsPacked.setDescription('It indicates the Average number of cells that were received in one packet.')
cpwAtmPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmPktsReceived.setStatus('current')
if mibBuilder.loadTexts: cpwAtmPktsReceived.setDescription('This object can be used to obtain the information on the number of packets that were received and sent to the PSN.')
cpwAtmPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmPktsSent.setStatus('current')
if mibBuilder.loadTexts: cpwAtmPktsSent.setDescription('This object indicates the number of packets that were sent to the atm network.')
cpwAtmPktsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 9000, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwAtmPktsRejected.setStatus('current')
if mibBuilder.loadTexts: cpwAtmPktsRejected.setDescription('This object indicates the number of packets that were rejected because of Policing.')
cpwVcAtmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 9000, 2, 1))
cpwVcAtmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 9000, 2, 2))
cpwVcAtmModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 9000, 2, 2, 1)).setObjects(("CISCO-IETF-PW-ATM-MIB", "cpwVcAtmGroup"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmPerfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcAtmModuleCompliance = cpwVcAtmModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: cpwVcAtmModuleCompliance.setDescription('The compliance statement for agent that support PW ATM.')
cpwVcAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 9000, 2, 1, 1)).setObjects(("CISCO-IETF-PW-ATM-MIB", "cpwAtmIf"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmVpi"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmVci"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmRowStatus"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmClpQosMapping"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmOamCellSupported"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmQosScalingFactor"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmCellPacking"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmMncp"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmPeerMncp"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmEncap"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmMcptTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcAtmGroup = cpwVcAtmGroup.setStatus('current')
if mibBuilder.loadTexts: cpwVcAtmGroup.setDescription('Collection of objects for basic ATM PW outbound config.')
cpwAtmPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 9000, 2, 1, 2)).setObjects(("CISCO-IETF-PW-ATM-MIB", "cpwAtmCellsReceived"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmCellsSent"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmCellsRejected"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmCellsTagged"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmHCCellsReceived"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmHCCellsRejected"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmHCCellsTagged"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmPktsReceived"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmPktsSent"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmPktsRejected"), ("CISCO-IETF-PW-ATM-MIB", "cpwAtmAvgCellsPacked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwAtmPerfGroup = cpwAtmPerfGroup.setStatus('current')
if mibBuilder.loadTexts: cpwAtmPerfGroup.setDescription('Collection of objects counting various outbound ATM PW statistics.')
mibBuilder.exportSymbols("CISCO-IETF-PW-ATM-MIB", cpwAtmMncp=cpwAtmMncp, cpwAtmPktsSent=cpwAtmPktsSent, cpwAtmCellPacking=cpwAtmCellPacking, cpwAtmAvgCellsPacked=cpwAtmAvgCellsPacked, cpwVcAtmTable=cpwVcAtmTable, cpwAtmHCCellsReceived=cpwAtmHCCellsReceived, cpwVcAtmPerfEntry=cpwVcAtmPerfEntry, cpwAtmOamCellSupported=cpwAtmOamCellSupported, cpwAtmEncap=cpwAtmEncap, cpwAtmHCCellsTagged=cpwAtmHCCellsTagged, cpwVcAtmPerfTable=cpwVcAtmPerfTable, cpwVcAtmObjects=cpwVcAtmObjects, cpwAtmPerfGroup=cpwAtmPerfGroup, cpwAtmVci=cpwAtmVci, cpwAtmPktsReceived=cpwAtmPktsReceived, cpwVcAtmMIB=cpwVcAtmMIB, cpwVcAtmModuleCompliance=cpwVcAtmModuleCompliance, PYSNMP_MODULE_ID=cpwVcAtmMIB, cpwAtmQosScalingFactor=cpwAtmQosScalingFactor, cpwVcAtmGroup=cpwVcAtmGroup, cpwAtmCellsRejected=cpwAtmCellsRejected, cpwVcAtmCompliances=cpwVcAtmCompliances, cpwAtmMcptTimeout=cpwAtmMcptTimeout, cpwAtmCellsTagged=cpwAtmCellsTagged, cpwAtmRowStatus=cpwAtmRowStatus, cpwVcAtmEntry=cpwVcAtmEntry, cpwAtmCellsReceived=cpwAtmCellsReceived, cpwAtmCellsSent=cpwAtmCellsSent, cpwAtmClpQosMapping=cpwAtmClpQosMapping, cpwVcAtmConformance=cpwVcAtmConformance, cpwAtmPktsRejected=cpwAtmPktsRejected, cpwAtmHCCellsRejected=cpwAtmHCCellsRejected, cpwVcAtmNotifications=cpwVcAtmNotifications, cpwAtmIf=cpwAtmIf, cpwAtmVpi=cpwAtmVpi, cpwAtmPeerMncp=cpwAtmPeerMncp, cpwVcAtmGroups=cpwVcAtmGroups)
