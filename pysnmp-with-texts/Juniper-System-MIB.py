#
# PySNMP MIB module Juniper-System-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-System-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
entPhysicalDescr, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalDescr", "PhysicalIndex")
KBytes, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "KBytes")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniTimeFilter, JuniEnable = mibBuilder.importSymbols("Juniper-TC", "JuniTimeFilter", "JuniEnable")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Unsigned32, MibIdentifier, NotificationType, iso, ObjectIdentity, Counter32, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "iso", "ObjectIdentity", "Counter32", "Integer32", "Gauge32")
DisplayString, TruthValue, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "DateAndTime")
juniSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2))
juniSystemMIB.setRevisions(('2010-03-12 13:45', '2008-06-11 11:01', '2008-05-05 12:41', '2007-05-07 10:12', '2006-12-18 21:25', '2006-11-24 09:13', '2006-05-18 08:31', '2006-01-06 18:17', '2005-12-16 07:21', '2005-11-18 22:30', '2005-09-15 14:14', '2005-08-19 17:48', '2005-07-29 17:48', '2005-05-18 18:10', '2005-05-04 18:10', '2005-01-31 18:13', '2004-12-31 10:13', '2004-12-29 10:10', '2004-05-25 18:13', '2004-01-07 22:46', '2003-11-24 20:59', '2003-11-24 19:39', '2003-07-22 14:10', '2003-01-27 21:22', '2002-10-17 21:01',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniSystemMIB.setRevisionsDescriptions(('Added environment trap for sfps thresholds', 'Added es2Lm10s support.', 'Add ISSU Support for ERX-1440.', 'Add ISSU support.', 'Add LM10 Access Support.', 'Add suppot for ES2 primary modules SRP-120 and SFM-120 for E120.', 'Add last 5 seconds, 1 minute and 5 minutes avergae CPU utilzation support.', 'Add LM10 Access Support.', 'Changed maximum value of juniSystemHighMemUtilThreshold from 100 to 99 and maximum value of juniSystemAbatedMemUtilThreshold from 99 to 98.', 'Add CPU utilization statitics table support.', 'Add LM10 Uplink Support.', 'Add Ge8 support.', "conform to REX Naming Document, renamed various ES2 module types and deleted ones that didn't belong.", 'Updated JuniSystemModuleType TC and created JuniSystemSlotLevel TC.', 'Added GE-HDE support.', 'Added KByte memory capacity object to notification.', 'Updated for second generation E-series router.', 'Updated SystemTimingSelector TC and related timing objects.', 'Added support for the Fe8 FX IOA.', 'Added support for the second generation E-series hardware architecture.', 'Added Hybrid Primary Module and Hybrid IOA modules. Added GE2 Primary Module and GE2 IOA module.', 'Added resource utilization notification enable/disable. Added KByte memory capacilty object.', 'Added ERX-310 support.', 'Replaced Unisphere names with Juniper names. Added resource utilization notification support.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniSystemMIB.setLastUpdated('200806111101Z')
if mibBuilder.loadTexts: juniSystemMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniSystemMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniSystemMIB.setDescription("The MIB objects for managing a Juniper E-series (JUNOSe) system. This MIB complements the ENTITY-MIB.entPhysicalTable by providing the system's physical information in a format that is more user friendly and provides additional elements not found in the Entity MIB, including state information, parameters for configuring the system and additional notifications. There are two families of E-series hardware systems supported by this MIB: ERX - first generation E-series systems ES2 - second generation E-series systems ")
class JuniSystemModuleType(TextualConvention, Integer32):
    description = "The 'personality' type of a module found in an E-series system. Some primary modules (e.g., line cards) have only one personality; that is they only accept one personality of other level modules (e.g. I/O adapters) in the same slot and are always configured in the same way. Other modules are multi-personality and will behave differently depending on the other level modules they are operating with, and therefore cannot be configured without knowing the other level module type(s). Type values in this table include both. Types that are multi-personality are noted by [MP] and types that are personality-only are noted by [PO]. Use the ENTITY-MIB to deretmine the actual hardware type of a module with personality-only type. unknown Unknown module type ERX primary modules: erxSrp ERX Switch/Route Processor erxCt3 ERX 3 port Channelized T3 erxOc3 ERX 2 port OC3 SONET/SDH erxUt3Atm ERX 3 port Unchannelized T3 ATM erxUt3Frame ERX 3 port Unchannelized T3 Frame erxUe3Atm ERX 3 port Unchannelized E3 ATM erxUe3Frame ERX 3 port Uncahnnelized E3 Frame erxCe1 ERX 20 port Channelized E1 erxCt1 ERX 24 port Channelized T1 erxDpfe ERX 2 port Fast Ethernet erxOc12Pos ERX 1 port OC12 POS erxOc12Atm ERX 1 port OC12 ATM erxOc3Pos ERX 4 port OC3 POS erxOc3Atm ERX 4 port OC3 ATM erxGe ERX 1 port Gigabit Ethernet [PO] erxFe8 ERX 8 port Fast Ethernet [PO] erxOc3oc12Pos ERX OC3/OC12 POS [MP] erxOc3oc12Atm ERX OC3/OC12 ATM [MP] erxCoc3oc12 ERX Channelized OC3/OC12 [MP] erxCoc3 ERX 4 port Channelized OC3 [PO] erxCoc12 ERX 1 port Channelized OC12 [PO] erxOc12Server ERX 1 port OC12 Tunnel Server erxHssi ERX 3 port High Speed Serial Interface erxGeFe ERX Gigabit Ethernet / Fast Ethernet [MP] erxCt3P12 ERX 12 port Channelized T3 erxV35 ERX 16 port X.21/V.35 erxUt3f12 ERX 12 port Unchannelized T3 Frame [PO] erxUe3f12 ERX 12 port Unchannelized E3 Frame [PO] erxCoc12F3 ERX 1 port OC12 channelized to T3/E3 [PO] erxCoc3F3 ERX 4 port OC3 channelized to T3/E3 [PO] erxCocxF3 ERX OC3/OC12 channelized to T3/E3 [MP] erxVts ERX Virtual Tunnel Server erxOc48 ERX 1 port OC48 SONET/SDH erxUt3Atm4 ERX 4 port Unchannelized T3/E3 ATM [PO] erxHybrid ERX ATM / POS / Gigabit Ethernet Hybrid [MP] erxOc3AtmGe ERX 2 port OC3 ATM 1 port Gigabit Ethernet [PO] erxOc3AtmPos ERX 2 port OC3 ATM 2 port OC3 POS [PO] erxGe2 ERX 2 port Gigabit Ethernet erxGeHde ERX 2/8 port Gigabit Ethernet ERX I/O adapter (IOA) modules: erxSrpIoa ERX Switch/Route Processor IOA erxCt1Ioa ERX 24 port channelized T1/J1 IOA erxCe1Ioa ERX 20 port channelized E1 IOA erxCe1TIoa ERX 20 port channelized E1 Telco IOA erxCt3Ioa ERX 3 port channelized T3/E3 IOA erxE3Ioa ERX 3 port E3 IOA erxOc3Mm2Ioa ERX 2 port OC3 multi-mode IOA erxOc3Sm2Ioa ERX 2 port OC3 single-mode IOA erxOc3Mm4Ioa ERX 4 port OC3 multi-mode IOA erxOc3SmIr4Ioa ERX 4 port OC3 single-mode intermediate-reach IOA erxOc3SmLr4Ioa ERX 4 port OC3 single-mode long-reach IOA erxCOc3Mm4Ioa ERX 4 port channelized OC3 multi-mode IOA erxCOc3SmIr4Ioa ERX 4 port channelized OC3 single-mode intermediate-reach IOA erxCOc3SmLr4Ioa ERX 4 port channelized OC3 single-mode long-reach IOA erxOc12Mm1Ioa ERX 1 port OC12 multi-mode IOA erxOc12SmIr1Ioa ERX 1 port OC12 single-mode intermediate-reach IOA erxOc12SmLr1Ioa ERX 1 port OC12 single-mode long-reach IOA erxCOc12Mm1Ioa ERX 1 port channelized OC12 multi-mode IOA erxCOc12SmIr1Ioa ERX 1 port channelized OC12 single-mode intermediate-reach IOA erxCOc12SmLr1Ioa ERX 1 port channelized OC12 single-mode long-reach IOA erxFe2Ioa ERX 2 port 10/100 Fast Ethernet IOA erxFe8Ioa ERX 8 port 10/100 Fast Ethernet IOA erxGeMm1Ioa ERX 1 port Gigabit Ethernet multi-mode IOA erxGeSm1Ioa ERX 1 port Gigabit Ethernet single-mode IOA erxHssiIoa ERX 3 port High Speed Serial Interface IOA erxCt3P12Ioa ERX 12 port channelized and unchannelized T3 IOA erxV35Ioa ERX 16 port X2.1/V3.5 IOA erxGeSfpIoa ERX 1 port Gigabit Ethernet SFP IOA erxUe3P12Ioa ERX 12 port unchannelized E3 IOA erxT3Atm4Ioa ERX 4 port T3 ATM IOA erxCOc12Mm1ApsIoa ERX 1 port channelized OC12 multi-mode APS (1+1) IOA erxCOc12SmIr1ApsIoa ERX 1 port channelized OC12 single-mode intermediate-reach APS (1+1) IOA erxCOc12SmLr1ApsIoa ERX 1 port channelized OC12 single-mode long-reach APS (1+1) IOA erxOc12Mm1ApsIoa ERX 1 port OC12 multi-mode APS (1+1) IOA erxOc12SmIr1ApsIoa ERX 1 port OC12 single-mode intermediate-reach APS (1+1) IOA erxOc12SmLr1ApsIoa ERX 1 port OC12 single-mode long-reach APS (1+1) IOA erxCOc12AtmPosMm1Ioa ERX 1 port channelized OC12 multi-mode ATM/POS IOA erxCOc12AtmPosSmIr1Ioa ERX 1 port channelized OC12 single-mode intermediate-reach ATM/POS IOA erxCOc12AtmPosSmLr1Ioa ERX 1 port channelized OC12 single-mode long-reach ATM/POS IOA erxCOc12AtmPosMm1ApsIoa ERX 1 port channelized OC12 multi-mode ATM/POS APS (1+1) IOA erxCOc12AtmPosSmIr1ApsIoa ERX 1 port channelized OC12 single-mode intermediate-reach ATM/POS APS (1+1) IOA erxCOc12AtmPosSmLr1ApsIoa ERX 1 port channelized OC12 single-mode long-reach ATM/POS APS (1+1) IOA erxT1E1RedundantIoa ERX T1/E1 redundant midplane spare IOA erxT3E3RedundantIoa ERX T3/E3 redundant midplane spare IOA erxCt3RedundantIoa ERX channelized T3 redundant midplane spare IOA erxOcxRedundantIoa ERX OC3/OC12 redundant midplane spare IOA erxCOcxRedundantIoa ERX channelized OC3/OC12 redundant midplane spare IOA erxOc3Mm4ApsIoa ERX 4 port OC3 multi-mode APS (1+1) IOA erxOc3SmIr4ApsIoa ERX 4 port OC3 single-mode intermediate-reach APS (1+1) IOA erxOc3SmLr4ApsIoa ERX 4 port OC3 single-mode long-reach APS (1+1) IOA erxOc48Ioa ERX 1 port OC48/STM16 IOA erxOc3Atm2Ge1Ioa ERX 2 port OC3 ATM 1 port GE IOA erxOc3Atm2Pos2Ioa ERX 2 port OC3 ATM 2 port OC3 POS IOA erxGe2Ioa ERX 2 port Gigabit Ethernet IOA erxFe8FxIoa ERX 8 port 100 Fast Ethernet SFP IOA erxGe8Ioa ERX 8 port Gigabit Ethernet IOA ES2 primary modules: e320Srp100 ES2 100Gb System Route Processor with integrated fabric slice e320Sfm100 ES2 100Gb Switch Fabric Slice es2Lm4 ES2 4Gb (series 1) Line Module(LM). es2Lm10Uplink ES2 10Gb (series 2) Uplink Line Module(LM). es2Lm10 ES2 10Gb (series 3) Line Module(LM). e320Srp320 ES2 320Gb System Route Processor with integrated fabric slice e320Sfm320 ES2 320Gb Switch Fabric Slice es2Lm10s ES2 10Gb (series 4) Line Module(LM). ES2 I/O adapter (IOA) modules: e320SrpIoa ES2 system resource processor IOA es2Ge4S1Ioa ES2 4 port Gigabit Ethernet S1 IOA es2Oc48Stm16PosS1Ioa ES2 OC48/STM16 POS S1 IOA es2ServiceS1Ioa ES2 Service S1 IOA es2Oc3Stm1x8AtmS1Ioa ES2 OC3/STM1-8 ATM S1 IOA es2RedundancyS1Ioa ES2 Redundancy S1 IOA es2Oc12Stm4x2PosS1Ioa ES2 OC12/STM4-2 POS S1 IOA es2Oc12Stm4x2AtmS1Ioa ES2 OC12/STM4-2 ATM S1 IOA es2dash10GeS1Ioa ES2 10GE-1 SR S1 IOA es2Ge8S1Ioa ES2 8 port Gigabit Ethernet S1 IOA es2dash10GePrS2Ioa ES2 10GE-1 Port Redundancy S2 IOA es2Ge20S2Ioa ES2 20 port Gigabit Ethernet S2 IOA ES2 primary modules for E120: e120Srp120 ES2 120Gb System Route Processor with integrated fabric slice e120Sfm120 ES2 120Gb Switch Fabric Slice"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 4096, 4097))
    namedValues = NamedValues(("unknown", 0), ("erxSrp", 1), ("erxCt3", 2), ("erxOc3", 3), ("erxUt3Atm", 4), ("erxUt3Frame", 5), ("erxUe3Atm", 6), ("erxUe3Frame", 7), ("erxCe1", 8), ("erxCt1", 9), ("erxDpfe", 10), ("erxOc12Pos", 11), ("erxOc12Atm", 12), ("erxOc3Pos", 13), ("erxOc3Atm", 14), ("erxGe", 15), ("erxFe8", 16), ("erxOc3oc12Pos", 17), ("erxOc3oc12Atm", 18), ("erxCoc3oc12", 19), ("erxCoc3", 20), ("erxCoc12", 21), ("erxOc12Server", 22), ("erxHssi", 23), ("erxGeFe", 24), ("erxCt3P12", 25), ("erxV35", 26), ("erxUt3f12", 27), ("erxUe3f12", 28), ("erxCoc12F3", 29), ("erxCoc3F3", 30), ("erxCocxF3", 31), ("erxVts", 32), ("erxOc48", 33), ("erxUt3Atm4", 34), ("erxHybrid", 35), ("erxOc3AtmGe", 36), ("erxOc3AtmPos", 37), ("erxGe2", 38), ("erxGeHde", 39), ("erxSrpIoa", 1024), ("erxCt1Ioa", 1025), ("erxCe1Ioa", 1026), ("erxCe1TIoa", 1027), ("erxCt3Ioa", 1028), ("erxE3Ioa", 1029), ("erxOc3Mm2Ioa", 1030), ("erxOc3Sm2Ioa", 1031), ("erxOc3Mm4Ioa", 1032), ("erxOc3SmIr4Ioa", 1033), ("erxOc3SmLr4Ioa", 1034), ("erxCOc3Mm4Ioa", 1035), ("erxCOc3SmIr4Ioa", 1036), ("erxCOc3SmLr4Ioa", 1037), ("erxOc12Mm1Ioa", 1038), ("erxOc12SmIr1Ioa", 1039), ("erxOc12SmLr1Ioa", 1040), ("erxCOc12Mm1Ioa", 1041), ("erxCOc12SmIr1Ioa", 1042), ("erxCOc12SmLr1Ioa", 1043), ("erxFe2Ioa", 1044), ("erxFe8Ioa", 1045), ("erxGeMm1Ioa", 1046), ("erxGeSm1Ioa", 1047), ("erxHssiIoa", 1048), ("erxCt3P12Ioa", 1049), ("erxV35Ioa", 1050), ("erxGeSfpIoa", 1051), ("erxUe3P12Ioa", 1052), ("erxT3Atm4Ioa", 1053), ("erxCOc12Mm1ApsIoa", 1054), ("erxCOc12SmIr1ApsIoa", 1055), ("erxCOc12SmLr1ApsIoa", 1056), ("erxOc12Mm1ApsIoa", 1057), ("erxOc12SmIr1ApsIoa", 1058), ("erxOc12SmLr1ApsIoa", 1059), ("erxCOc12AtmPosMm1Ioa", 1060), ("erxCOc12AtmPosSmIr1Ioa", 1061), ("erxCOc12AtmPosSmLr1Ioa", 1062), ("erxCOc12AtmPosMm1ApsIoa", 1063), ("erxCOc12AtmPosSmIr1ApsIoa", 1064), ("erxCOc12AtmPosSmLr1ApsIoa", 1065), ("erxT1E1RedundantIoa", 1066), ("erxT3E3RedundantIoa", 1067), ("erxCt3RedundantIoa", 1068), ("erxOcxRedundantIoa", 1069), ("erxCOcxRedundantIoa", 1070), ("erxOc3Mm4ApsIoa", 1071), ("erxOc3SmIr4ApsIoa", 1072), ("erxOc3SmLr4ApsIoa", 1073), ("erxOc48Ioa", 1074), ("erxOc3Atm2Ge1Ioa", 1075), ("erxOc3Atm2Pos2Ioa", 1076), ("erxGe2Ioa", 1077), ("erxFe8FxIoa", 1078), ("erxGe8Ioa", 1079), ("e320Srp100", 2048), ("e320Sfm100", 2049), ("es2Lm4", 2050), ("es2Lm10Uplink", 2051), ("es2Lm10", 2052), ("e320Srp320", 2053), ("e320Sfm320", 2054), ("es2Lm10s", 2055), ("e320SrpIoa", 3072), ("es2Ge4S1Ioa", 3073), ("es2Oc48Stm16PosS1Ioa", 3074), ("es2ServiceS1Ioa", 3075), ("es2Oc3Stm1x8AtmS1Ioa", 3076), ("es2RedundancyS1Ioa", 3077), ("es2Oc12Stm4x2PosS1Ioa", 3078), ("es2Oc12Stm4x2AtmS1Ioa", 3079), ("es2dash10GeS1Ioa", 3080), ("es2Ge8S1Ioa", 3081), ("es2dash10GePrS2Ioa", 3082), ("es2Ge20S2Ioa", 3083), ("e120Srp120", 4096), ("e120Sfm120", 4097))

class JuniSystemSlotLevel(TextualConvention, Integer32):
    description = "The relative position of a module or sub-module 'container' within a slot. The upper limit of valid values is juniSystemMaxModulesPerSlot. A module or sub-module in the lowest numbered level for a particular slot is considered to be the 'primary' module for that slot. For the first generation E-series (ERX) platform family: level 1 - SRP or line card module level 2 - I/O adapter module For the second generation E-series platform family: level 1 - Forwarding module or SRP sub-module level 2 - Switch fabric slice (SFS) sub-module or module level 3 - Bay 0 I/O adapter level 4 - Bay 1 I/O adapter "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4)

class JuniSystemSlotType(TextualConvention, Integer32):
    description = "The type of 'container' for holding a module or sub-module found in an E-series chassis. The slot type may be for a 'sub-module' where there are multiple logical functions on a single hardware module. For example, the second generation SRP hardware module (slot 6 or 7 on an E320) contains both a System Resource Processor (SRP) sub-module (level 1 position) and a Switch Fabric Slice (SFS) sub-module (level 2 position). noSlot The slot does not exist ERX system slot types: erxSrpSlot ERX switch/route processor module slot erxLcmSlot ERX line card module slot erxSrpIoaSlot ERX switch/route processor I/O adapter slot erxLcIoaSlot ERX line card I/O adapter slot Second generation E-series (ES2) system slot types: es2SrpSlot ES2 system resource processor sub-module slot es2SfsSlot ES2 switch fabric module or sub-module slot es2FmSlot ES2 forwarding module slot es2SrpIoaSlot ES2 system resource processor I/O adapter slot es2FIoaSlot ES2 forwarding I/O adapter slot "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("noSlot", 0), ("erxSrpSlot", 1), ("erxLcmSlot", 2), ("erxSrpIoaSlot", 3), ("erxLcIoaSlot", 4), ("es2SrpSlot", 16), ("es2SfsSlot", 17), ("es2FmSlot", 18), ("es2SrpIoaSlot", 19), ("es2FIoaSlot", 20))

class JuniSystemTimingSelector(TextualConvention, Integer32):
    description = 'The system timing selector. primary - the primary timing selector secondary - the secondary timing selector tertiary - the tertiary timing selector error - the error in timing selector'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("error", 4))

class JuniSystemLocationType(TextualConvention, Integer32):
    description = 'The location information class that is used to understand the encoding of the associated location instance information. An object with this syntax is always paired with an object that uses the JuniSystemLocation syntax. system - all resources on the system slot - all resources associated with a particular slot '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("system", 1), ("slot", 2))

class JuniSystemLocation(TextualConvention, OctetString):
    description = "The location instance information that is encoded according to the rules for the associated location information class. An object with this syntax is always paired with an object that uses the JuniSystemLocationType syntax. system - a zero length string: { ''H } slot - a single octet (see juniSystemSlotNumber) "
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class JuniSystemTaskName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set.'
    description = 'Name of the task. Represents textual information taken from the NVT ASCII character set. The character repertoire of the string is restricted to printable, non-whitespace characters (codes 33 through 126).'
    status = 'current'
    displayHint = '100a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 100)

juniSystemTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0))
juniSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1))
juniSystemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2))
juniSystemGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1))
juniSystemSubsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2))
juniSystemModule = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3))
juniSystemPort = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 4))
juniSystemTiming = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5))
juniSystemFabric = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 6))
juniSystemNvs = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7))
juniSystemPower = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8))
juniSystemTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9))
juniSystemUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10))
juniSystemIssu = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11))
juniSystemSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemSwVersion.setStatus('current')
if mibBuilder.loadTexts: juniSystemSwVersion.setDescription('Version identification of currently executing system-wide operational software.')
juniSystemSwBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemSwBuildDate.setStatus('current')
if mibBuilder.loadTexts: juniSystemSwBuildDate.setDescription('Build date of currently executing system-wide operational software version.')
juniSystemMemUtilPct = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemMemUtilPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemMemUtilPct.setDescription('Percentage of memory utilization on the primary system processor. A value of -1 indicates the utilization is unknown.')
juniSystemMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemMemCapacity.setStatus('current')
if mibBuilder.loadTexts: juniSystemMemCapacity.setDescription('The total memory capacity in bytes of the primary system processor. If the memory capacity is greater than 2147483647, a -1 value is returned, and the actual memory capacity (in number of bytes divided by 1024) is returned in juniSystemMemKBytesCapacity.')
juniSystemMemKBytesCapacity = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 23), KBytes()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemMemKBytesCapacity.setStatus('current')
if mibBuilder.loadTexts: juniSystemMemKBytesCapacity.setDescription('The total memory capacity in kilo-bytes (1024 bytes) of the primary system processor.')
juniSystemHighMemUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(85)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemHighMemUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemHighMemUtilThreshold.setDescription('The value of memory utilization in the primary system processor, where, if reached for the first time after a high memory threshold reset, a high memory utilization event notification will be sent to the management entity on this system. A high memory threshold reset occurs when the system is initialized (booted) or the memory utilization falls below the value in juniSystemAbatedMemUtilThreshold. The value of this object must always be greater than the value of juniSystemAbatedMemUtilThreshold.')
juniSystemAbatedMemUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 98)).clone(75)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemAbatedMemUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemAbatedMemUtilThreshold.setDescription('The value of memory utilization in the primary system processor that is used to determine when to send an abated memory utilization event notification to the management entity on this system. The abated memory utilization event occurs if a high memory threshold reset has not occurred since the last high memory threshold event, and then the memory utilization falls to or below the value of this object. The abated memory utilization event then triggers a high memory threshold reset. The value of this object must always be less than the value of juniSystemHighMemUtilThreshold.')
juniSystemBootConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("file", 0), ("fileOnce", 1), ("factoryDefaults", 2), ("runningConfiguration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootConfigControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootConfigControl.setDescription('System boot configuration control: file - On a system reboot use the configuration settings specified by the juniSystemBootConfigFile. The juniSystemBootConfigControl and juniSystemBootConfigFile must be specified together in the same set request PDU. fileOnce - On the next system reboot use the configuration settings specified by the juniSystemBootConfigFile. Do not continue to use this file after using it once; on subsequent reboots use the running configuration. The juniSystemBootConfigControl and juniSystemBootConfigFile must be specified together in the same set request PDU. factoryDefaults - On the next system reboot use the factory default settings. On subsequent reboots use the running configuration. runningConfiguration - On a system reboot use the current configuration settings.')
juniSystemBootBackupConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("file", 0), ("factoryDefaults", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootBackupConfigControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootBackupConfigControl.setDescription('System boot backup configuration control is used to determine the configuration to be used when the boot logic chooses backup mode: file - On a system reboot in backup mode use the configuration settings specified by the juniSystemBootBackupConfigFile. If this option is specified, juniSystemBootBackupConfigFile, juniSystemBootBackupReleaseFile and this object must be specified together in the same set request PDU. factoryDefaults - On a system reboot in backup mode use the factory default configuration settings. If this option is specified, juniSystemBootBackupReleaseFile and this object must be specified together in the same set request PDU. none - Disallow the boot logic from using the backup release file and configuration (i.e., disable backup mode).')
juniSystemBootForceBackupControl = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootForceBackupControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootForceBackupControl.setDescription('System boot force backup control: off - On the next system reboot do not force the boot logic to choose backup mode. on - On the next system reboot force the boot logic to choose backup mode. Attempting to set this object to on(1) while the juniSystemBootBackupConfigControl is set to none(2) will result in an error.')
juniSystemBootAutoRevertControl = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("never", 1), ("set", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootAutoRevertControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootAutoRevertControl.setDescription('The system boot auto-revert control is used to determine when the boot logic should choose backup mode based of the reboot history: default - Use the default auto-revert tolerances: 3 reboots in 30 minutes. never - Never auto-revert to backup mode. set - Use the auto-revert tolerances specified by juniSystemBootAutoRevertCountTolerance and juniSystemBootAutoRevertTimeTolerance, which must be specified in the same PDU as this object when this value is specified.')
juniSystemBootAutoRevertCountTolerance = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootAutoRevertCountTolerance.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootAutoRevertCountTolerance.setDescription('The auto-revert reboot count tolerance, used in conjunction with the value of juniSystemBootAutoRevertTimeTolerance when juniSystemBootAutoRevertControl is set to set(2) in the same PDU. For example, if this object is set to 4 and juniSystemBootAutoRevertTimeTolerance is set to 1200, then the boot logic will choose backup mode if 4 system reboots occur within 20 minutes. This object cannot be set to zero, but may contain a zero value when juniSystemBootAutoRevertControl is set to never(1).')
juniSystemBootAutoRevertTimeTolerance = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootAutoRevertTimeTolerance.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootAutoRevertTimeTolerance.setDescription('The auto-revert reboot time tolerance, used in conjunction with the value of juniSystemBootAutoRevertCountTolerance when juniSystemBootAutoRevertControl is set to set(2) in the same PDU. This object cannot be set to zero, but will contain a zero value when juniSystemBootAutoRevertControl is set to never(1).')
juniSystemBootReleaseFile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootReleaseFile.setDescription("The system-wide boot release file name, with extension '.rel'. On a set operation, if there is no file found with the name specified, then an error is returned.")
juniSystemBootConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootConfigFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootConfigFile.setDescription("The system-wide boot configuration file name. This object and the juniSystemBootConfigControl object set to file(0) or fileOnce(1) must be specified together in the same set request PDU. If juniSystemBootConfigControl is file(0), only file names with extension '.cnf' are allowed. If juniSystemBootConfigControl is fileOnce(1), only file names with extensions '.cnf' or '.scr' are allowed. On a set operation, if the extension is not appropriate or there is no file found with the name specified, then an error is returned. If juniSystemBootConfigControl is not set to file(0) or fileOnce(1) then a get operation for this object will return a zero-length string.")
juniSystemBootBackupReleaseFile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootBackupReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootBackupReleaseFile.setDescription("The system-wide backup boot release file name, with extension '.rel'. A zero-length string indicates that there is no backup release file so the primary release file (juniSystemBootReleaseFile) will be used. On a set operation if there is no file found with the name specified, then an error is returned. The juniSystemBootBackupConfigControl object with a valid value other than none(2) must be specified together with this object in the same set request PDU, and if the juniSystemBootBackupConfigControl is set to file(0) then a valid juniSystemBootBackupConfigFile must also be included in the set request PDU.")
juniSystemBootBackupConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemBootBackupConfigFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemBootBackupConfigFile.setDescription("The system-wide backup boot configuration file name, with extension '.cnf'. The juniSystemBootBackupReleaseFile object, the juniSystemBootBackupConfigControl object set to file(0), and this object must be specified together in the same set request PDU. On a set operation, if there is no file found with the name specified, then an error is returned. If juniSystemBootBackupConfigControl is not set to file(0) then a get operation for this object will return a zero-length string.")
juniSystemRedundancyRevertControl = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("immediate", 1), ("timeOfDay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemRedundancyRevertControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemRedundancyRevertControl.setDescription('Global control for reverting primary modules back from their active redundant spare modules: off - Disable global reverts of redundant modules. immediate - All redundant module pairs are to revert as soon as the primary module is ready to enter the online state. timeOfDay - All redundant module pairs are to revert at the time specified by juniSystemRevertTimeOfDay, relative to midnight based on the system clock time. This object must be set concurrently with juniSystemRevertTimeOfDay when this value is specified. Note that this only applies to modules that have juniSystemModuleRedundancySupport set to true(1).')
juniSystemRedundancyRevertTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemRedundancyRevertTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: juniSystemRedundancyRevertTimeOfDay.setDescription('The number of seconds past midnight local time on any given day at which time redundant slot reverts are allowed to occur. This object must be set concurrently with juniSystemRevertControl { timeOfDay }.')
juniSystemSubsystemTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: juniSystemSubsystemTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemTable.setDescription("Table of subsystems. A subsystem supports a 'family' of module types; that is, each module type is supported by a particular software subsystem. For example, the ERX channelized T1 line card (CT1-FULL) is supported by the 'ct1' subsystem.")
juniSystemSubsystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemSubsystemIndex"))
if mibBuilder.loadTexts: juniSystemSubsystemEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemEntry.setDescription('A table entry containing information pertaining to a subsystem. Subsystem information takes precedence over system-wide information, but not over individual module information.')
juniSystemSubsystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: juniSystemSubsystemIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemIndex.setDescription('Arbitrary subsystem identification number.')
juniSystemSubsystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemSubsystemName.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemName.setDescription('The name of the subsystem.')
juniSystemSubsystemBootReleaseFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemSubsystemBootReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemBootReleaseFile.setDescription("The boot release file name for this subsystem, with extension '.rel'. If a file name is specified (a non-zero-length string), then this release file takes precedence over the system-wide boot release file (juniSystemBootReleaseFile) just for modules of the type specified by the subsystem name. On a set operation, if there is no file that matches the name specified, then an inconsistentValue error will be returned. Setting this object to a zero-length string deconfigures the subsystem-specific backup release file.")
juniSystemSubsystemBootBackupReleaseFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemSubsystemBootBackupReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemBootBackupReleaseFile.setDescription("The backup boot release file name for this subsystem, with extension '.rel'. If a file name is specified (a non-zero-length string), then this release file takes precedence over the system-wide boot backup release file (juniSystemBootBackupReleaseFile) just for modules of the type specified by the subsystem name. This object cannot be set unless the system has a backup file, which means that juniSystemBootBackupReleaseFile must contain a file name (a non-zero-length string). On a set operation, if there is no file that matches the name specified, then an inconsistentValue error will be returned. Setting this object to a zero-length string deconfigures the subsystem-specific backup release file.")
juniSystemMaxSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemMaxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: juniSystemMaxSlotNumber.setDescription('The highest number assigned to a slot in the system. In a particular hardware model, module slots have fixed numbers assigned to them, even though in some instances there may be no actual slots associated with a particular number. In all cases there is a maximum slot number that will never be exceeded: 2 for ERX-3xx models 6 for ERX-7xx models 13 for ERX-14xx models 16 for E320 models Note that slot numbers are zero-based.')
juniSystemMaxModulesPerSlot = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemMaxModulesPerSlot.setStatus('current')
if mibBuilder.loadTexts: juniSystemMaxModulesPerSlot.setDescription('The maximum number of modules and sub-modules (different levels) that can be associated with a slot number in the system. This value is constant for a particular hardware platform family. The number of levels is 2 for a first generation E-series (ERX) platform and is 4 for a second generation E-series platform. For the first generation E-series (ERX) platform family: level 1 - SRP or line card module level 2 - I/O adapter module For the second generation E-series platform family: level 1 - Forwarding module or SRP sub-module level 2 - Switch fabric slice (SFS) sub-module or module level 3 - Bay 0 I/O adapter level 4 - Bay 1 I/O adapter ')
juniSystemSlotTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 3), )
if mibBuilder.loadTexts: juniSystemSlotTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemSlotTable.setDescription('A table of system module slot physical container configuration information.')
juniSystemSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 3, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemSlotNumber"), (0, "Juniper-System-MIB", "juniSystemSlotLevel"))
if mibBuilder.loadTexts: juniSystemSlotEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemSlotEntry.setDescription("A table entry describing the physical status of a system module slot container, which is designated by its slot and level positions. There is an entry in this table for all index pairs from { 0, 1 } to the maximum for each index, { juniSystemMaxSlotNumber, juniSystemMaxModulesPerSlot }, even if there is no corresponding module slot container in the system. A request for an index value outside this range will result in a 'no such' response.")
juniSystemSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: juniSystemSlotNumber.setStatus('current')
if mibBuilder.loadTexts: juniSystemSlotNumber.setDescription('The slot number. The actual upper limit of valid values is juniSystemMaxSlotNumber. Note that slot numbers are zero-based.')
juniSystemSlotLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 3, 1, 2), JuniSystemSlotLevel())
if mibBuilder.loadTexts: juniSystemSlotLevel.setStatus('current')
if mibBuilder.loadTexts: juniSystemSlotLevel.setDescription("The relative position of a module or sub-module 'container' within a slot.")
juniSystemSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("noSlotContainer", 1), ("empty", 2), ("moduleNotPresent", 3), ("modulePresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemSlotStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemSlotStatus.setDescription('The status of the module slot container. unknown - The existence of a container cannot be determined noSlotContainer - The physical container does not exist empty - No module is present and no configuration information is available for this container moduleNotPresent - A module is configured but it is not currently in its container modulePresent - A module is inserted in the container ')
juniSystemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 3, 1, 4), JuniSystemSlotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemSlotType.setStatus('current')
if mibBuilder.loadTexts: juniSystemSlotType.setDescription('The category of modules that can be configured for the container.')
juniSystemModuleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4), )
if mibBuilder.loadTexts: juniSystemModuleTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleTable.setDescription("A table of system module and sub-module information. In this table, a module refers to a physical module (board) or a sub-module. A physical board may contain a single module or multiple sub-modules. For example, an ERX line card is a single module and appears as single entry in this table. An I/O adapter is a module that doesn't provide any operaitonal state information and it also appears as a single entry in this table. A second generation E-series SRP/SFS hardware module contains two sub-modules, each with its own operational state information: a System Resource Processor (SRP) sub-module and a Switch Fabric Slice (SFS) sub-module, which appear as two separate entries in this table, one for each sub-module.")
juniSystemModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemSlotNumber"), (0, "Juniper-System-MIB", "juniSystemSlotLevel"))
if mibBuilder.loadTexts: juniSystemModuleEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleEntry.setDescription('A table entry that provides information about a specific system module or sub-module in a particular module location. There are only entries in this table for module locations that report a juniSystemSlotStatus of moduleNotPresent(3) or modulePresent(4).')
juniSystemModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("notPresent", 1), ("disabled", 2), ("hardwareError", 3), ("booting", 4), ("initializing", 5), ("online", 6), ("standby", 7), ("inactive", 8), ("notResponding", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleOperStatus.setDescription('The current operational status of the module (or sub-module): unknown - The status of the module cannot be determined notPresent - No hardware is currently present but there was a module previously configured in this position (see juniSystemModuleExpectedType); juniSystemModuleCurrentType is unknown(0) disabled - Disable for the reason specified in juniSystemModuleDisableReason hardwareError - Not operational due to a hardware failure booting - In the process of booting initializing - In the process of initialing online - Fully operational standby - In redundant standby mode inactive - In redundant inactive mode notResponding - Unable to communicate with the rest of the system ')
juniSystemModuleDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("assessing", 2), ("admin", 3), ("typeMismatch", 4), ("fabricLimit", 5), ("imageError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleDisableReason.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleDisableReason.setDescription('Indicates the condition causing the module (or sub-module) to be disabled: none - Value when the module is not disabled unknown - Unknown reason for disablement assessing - The module content is being assessed (transient initialization state) admin - The module is administratively disabled typeMismatch - The current module personality conflicts with configuration associated with a different (expected) module personality that previously occupied the slot fabricLimit - Module resource requirements exceed available fabric capacity imageError - Software image for the module is missing or invalid')
juniSystemModuleLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleLastChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleLastChange.setDescription('The value of sysUpTime when the value of juniSystemModuleOperStatus last changed.')
juniSystemModuleCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 4), JuniSystemModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleCurrentType.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleCurrentType.setDescription("The personality of this module based on the combination of modules that are currently inserted in the slot. This could be different from the personality reported in juniSystemModuleExpectedType, in which case it may be necessary to set juniSystemModuleControl for the module in the primary level to 'flush' before the set of modules in this slot can be made operational.")
juniSystemModuleExpectedType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 5), JuniSystemModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleExpectedType.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleExpectedType.setDescription("The personality for this module position based on the combination of modules that were inserted in this slot when it was last configured. The value of this object will be different than the value of juniSystemModuleCurrentType when the value of juniSystemModuleOperStatus is disabled(2) and the value of juniSystemModuleDisableReason is typeMismatch(4). After one or more modules is removed from a slot, configuration information associated with the slot (its 'personality') may persist, inhibiting the operation of a different combination of modules in the slot (when new modules are inserted) until juniSystemModuleControl for the slot's primary module is set to flush(1).")
juniSystemModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleDescr.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleDescr.setDescription('Textual description of the expected module in this slot.')
juniSystemModuleSlotSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleSlotSpan.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleSlotSpan.setDescription('The number of slot positions that the expected module spans. Most modules are only one slot wide, but some require extra space or backplane resources. These modules are identified as being in the lower numbered slot and spanning across the higher numbered slot(s).')
juniSystemModulePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModulePortCount.setStatus('current')
if mibBuilder.loadTexts: juniSystemModulePortCount.setDescription('The number of physical ports supported by the expected module type in this slot.')
juniSystemModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleSerialNumber.setDescription("The serial number of the expected module in this slot. The serial number of the current module may be found in this module's entPhysicalSerialNum. A serial number is for a hardware board, so if there is more than one sub-module on a board, their serial numbers will all be the same.")
juniSystemModuleAssemblyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleAssemblyPartNumber.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleAssemblyPartNumber.setDescription("The part number of the expected module in this slot. The part number of the current module may be found in this module's entPhysicalModelName. A part number is for a hardware board, so if there is more than one sub-module on a board, their part numbers will all be the same.")
juniSystemModuleAssemblyRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleAssemblyRev.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleAssemblyRev.setDescription("The revision level of the expected module in this slot. The revision level of the current module may be found in this module's entPhysicalHardwareRev. A revision level is for a hardware board, so if there is more than one sub-module on a board, their revision levels will all be the same.")
juniSystemModulePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 12), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModulePhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemModulePhysicalIndex.setDescription('The entPhysicalIndex value assigned to the module. The ENTITY-MIB.entPhysicalTable contains additional information about this module that can be retrieved using this index. An entPhysicalIndex is for a hardware board, so if there is more than one sub-module on a board, their entPhysicalIndex values will all be the same.')
juniSystemModuleSoftwareSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleSoftwareSupport.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleSoftwareSupport.setDescription('An indicator as to whether this module or sub-module has operational state information that can be managed. If the value of this object is true(1), then there is an entry for this module or sub-module in the juniSystemModuleSoftwareTable.')
juniSystemModuleRedundancySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleRedundancySupport.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancySupport.setDescription('An indicator as to whether this module or sub-module is part of a redundancy group. If the value of this object is true(1), then there is an entry for this module or sub-module in the juniSystemModuleRedundancyTable.')
juniSystemModuleLevelSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleLevelSpan.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleLevelSpan.setDescription("The number of level positions that the expected module spans. Most modules are only one level 'high', but some require extra space or backplane resources. These modules are identified as being in the lower numbered level and spanning across the higher numbered level(s).")
juniSystemModuleSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5), )
if mibBuilder.loadTexts: juniSystemModuleSoftwareTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleSoftwareTable.setDescription("A table of system module software information. This includes the version of the software running on the particular module, the running software's use of the modules resources and the modules operational state. Some module types don't contain loadable software (they execute 'firmware') but include support for some of the objects in this table. For example, the E320 SFS (es2Sfs) modules only support juniSystemModuleAdminStatus and juniSystemModuleControl. Appropriate 'default' values are returned for the other objects. Some module types don't contain any software related information (e.g., ERX I/O adapters do not) in which case their value of juniSystemModuleSoftwareSupport will be false and there will not be a corresponding entry in this table.")
juniSystemModuleSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemSlotNumber"), (0, "Juniper-System-MIB", "juniSystemSlotLevel"))
if mibBuilder.loadTexts: juniSystemModuleSoftwareEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleSoftwareEntry.setDescription('A table entry that provides software information about a specific system module in a particular slot location.')
juniSystemModuleSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleSoftwareVersion.setDescription('Version identification of the currently executing operational software on this module. If the module is in a state where the software version is not known (e.g., module type mismatch), then the value of this object will be a zero-length string.')
juniSystemModuleCpuUtilPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleCpuUtilPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleCpuUtilPct.setDescription('Last available module CPU utilization percentage. A value of -1 indicates the utilization is unknown. This value is calculated over a 5 second period.')
juniSystemModuleMemUtilPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleMemUtilPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleMemUtilPct.setDescription('Percentage of module memory utilization. A value of -1 indicates the utilization is unknown.')
juniSystemModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 5), JuniEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleAdminStatus.setDescription('Provides administrative control to enable/disable the module. This object is read-only for certain types of modules.')
juniSystemModuleControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 0), ("flush", 1), ("reset", 2), ("resetBackup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleControl.setDescription('Administrative control of this slot: noOperation - Setting this value has no effect. flush - Flushes the configuration associated with a module type that previously occupied this slot. Used to explicitly confirm that the slot is now empty, or contains a different card type. The module must be disabled when this value is asserted. See the description for juniSystemModuleDisableReason. reset - Resets the module. resetBackup - Resets the module using the backup release file. Get operations on this variable always return noOperation. Module types that do not support these operations simply ignore them.')
juniSystemModuleBootReleaseFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleBootReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleBootReleaseFile.setDescription("The boot release file name for this slot, with extension '.rel'. If a file name is specified (not a zero-length string), then this release file takes precedence over the subsystem boot release file (juniSystemSubsystemBootReleaseFile) and the system-wide boot release file (juniSystemBootReleaseFile) for just the module in this slot. Some module types (e.g., ERX SRP modules) don't allow this object to be set. On a set operation, if there is no file that matches the name specified, then an inconsistentValue error will be returned. Setting this object to a zero-length string deconfigures the slot-specific primary release file.")
juniSystemModuleBootBackupReleaseFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleBootBackupReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleBootBackupReleaseFile.setDescription("The backup boot release file name for this slot, with extension '.rel'. If a file name is specified (a non-zero-length string), then this release file takes precedence over the subsystem boot backup release file (juniSystemSubsystemBootBackupReleaseFile) and the system-wide boot backup release file (juniSystemBootBackupReleaseFile) for just the module in this slot. This object cannot be set unless the system has a backup file, which mean that juniSystemBootBackupReleaseFile must contain a file name (a non-zero-length string). Some module types (e.g., ERX SRP modules) don't allow this object to be set. On a set operation, if there is no file that matches the name specified, then an inconsistentValue error will be returned. Setting this object to a zero-length string deconfigures the slot-specific backup release file.")
juniSystemModuleCpuFiveSecUtilPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleCpuFiveSecUtilPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleCpuFiveSecUtilPct.setDescription('Percentage of average CPU utilization for the last five sec for this module. A value of -1 indicates the utilization is unknown.')
juniSystemModuleCpuOneMinAvgPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleCpuOneMinAvgPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleCpuOneMinAvgPct.setDescription('Percentage of average CPU utilization for the last one minute for this module. A value of -1 indicates the utilization is unknown.')
juniSystemModuleCpuFiveMinAvgPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleCpuFiveMinAvgPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleCpuFiveMinAvgPct.setDescription('Percentage of average CPU utilization for the last five minutes for this module. A value of -1 indicates the utilization is unknown.')
juniSystemModuleRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6), )
if mibBuilder.loadTexts: juniSystemModuleRedundancyTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyTable.setDescription('A table of system module redundancy information. Note that modules that do not support redundancy information will not appear in this table.')
juniSystemModuleRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemSlotNumber"), (0, "Juniper-System-MIB", "juniSystemSlotLevel"))
if mibBuilder.loadTexts: juniSystemModuleRedundancyEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyEntry.setDescription('A table entry that provides information about a specific system module in a particular slot location.')
juniSystemModuleRedundancyGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleRedundancyGroupId.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyGroupId.setDescription('Identifies the redundancy group as derived from hardware settings.')
juniSystemModuleRedundancySpare = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleRedundancySpare.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancySpare.setDescription('True only if this module is a spare redundant module.')
juniSystemModuleRedundancyAssociatedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemModuleRedundancyAssociatedSlot.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyAssociatedSlot.setDescription("If this module is a primary redundant module, then the module at the same slot level with the slot number identified by this variable is the spare module that serves as this module's backup. If this module is an active spare redundant module, then the module in the slot identified by this variable is the primary module for which this module is the spare. If this module is an inactive spare redundant module, then the value of this object is the slot number of the spare itself (the same value as the first index).")
juniSystemModuleRedundancyLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1, 4), JuniEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleRedundancyLockout.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyLockout.setDescription('Provides administrative control to enable/disable redundancy protection for the module in this slot.')
juniSystemModuleRedundancyRevertControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("immediate", 1), ("timeAndDate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleRedundancyRevertControl.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyRevertControl.setDescription('Per-module control for reverting a primary module back from its active redundant spare module: off - Disable reverting to the primary module. immediate - Revert as soon as this primary module is ready to enter the online state. timeAndDate - Revert to this primary module at time specified by juniSystemModuleRedundancyRevertTime, provided it is in the inactive state. This control only applies to primary modules; spare modules can only be set to off(0).')
juniSystemModuleRedundancyRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 3, 6, 1, 6), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemModuleRedundancyRevertTime.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleRedundancyRevertTime.setDescription('The date and time associated with the timeAndDate (delayed) revert operation. Only the local format for DateAndTime is supported. On a set operation, if the time specified is prior to the current time, then an inconsistent value error is returned.This object must be set concurrently with juniSystemModuleRedundancyRevertControl { timeAndDate(2) }.')
juniSystemPortTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: juniSystemPortTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortTable.setDescription('Table of system physical I/O ports. The information in this table reflects the ports for the expected module type in each slot; in event of a module mismatch, this table permits navigation of the existing configuration of the expected module type.')
juniSystemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemSlotNumber"), (0, "Juniper-System-MIB", "juniSystemSlotLevel"), (0, "Juniper-System-MIB", "juniSystemPortNumber"))
if mibBuilder.loadTexts: juniSystemPortEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortEntry.setDescription('A table entry describing a physical port of the system.')
juniSystemPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: juniSystemPortNumber.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortNumber.setDescription('Port number of this physical port, relative to the slot in which it resides. Each physical port is uniquely distinguished by its slot number, slot level and port number. Port numbers are zero-based.')
juniSystemPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 4, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortIfIndex.setDescription('The ifIndex of the Interfaces MIB ifTable entry corresponding to this physical port; if zero, the ifIndex is unknown or does not exist.')
juniSystemPortPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 4, 1, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemPortPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortPhysicalIndex.setDescription('The entPhysicalIndex value assigned to this port. This index may be use to retrieve other information about the port, such as description and type, from the ENTITY-MIB.entPhysicalTable.')
juniSystemAdminTimingSource = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 1), JuniSystemTimingSelector()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemAdminTimingSource.setStatus('current')
if mibBuilder.loadTexts: juniSystemAdminTimingSource.setDescription('The administrative timing source for the system. This variable is used to select the desired timing source to be either primary, secondary or tertiary. Setting this variable will cause the system to change to the specified timing source, provided it is currently available. Setting this value to error(4) is not allowed. The system periodically monitors the status of the three timing sources. If the systems current timing source fails, the system will automatically downgrade to the next timing source. If the system is configured to automatically upgrade (juniSystemTimingAutoUpgrade is set to enable(1)) the system will switch back to the timing source indicated by this variable when it becomes available. A timing source failure can be detected by comparing the operational and administrative timing sources. If they are not equal, the system has swapped timing sources because the administratively set timing source is in the error state.')
juniSystemOperTimingSource = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 2), JuniSystemTimingSelector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemOperTimingSource.setStatus('current')
if mibBuilder.loadTexts: juniSystemOperTimingSource.setDescription('The operational timing source for the system. The system periodically monitors the status of three timing sources, primary, secondary and tertiary. If the systems current timing source fails, the system will automatically downgrade to the next timing source. If the system is configured to automatically upgrade (juniSystemTimingAutoUpgrade is set to enable(1)) the system will switch back to the higher timing source when it becomes available.')
juniSystemTimingAutoUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 3), JuniEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemTimingAutoUpgrade.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingAutoUpgrade.setDescription('This object controls the automatic timing selector upgrade. Setting this object to disable(0) will prevent automatic upgrade to the next highest timing selector. Setting this object to enable(1) will enable the automatic upgrade of timing selectors.')
juniSystemTimingSelectorTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4), )
if mibBuilder.loadTexts: juniSystemTimingSelectorTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingSelectorTable.setDescription('Table of system timing selectors. This table only contains entries for the primary, secondary and tertiary selecors.')
juniSystemTimingSelectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemTimingSelectorIndex"))
if mibBuilder.loadTexts: juniSystemTimingSelectorEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingSelectorEntry.setDescription('A table entry describing a system timing selector.')
juniSystemTimingSelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1, 1), JuniSystemTimingSelector())
if mibBuilder.loadTexts: juniSystemTimingSelectorIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingSelectorIndex.setDescription('The system timing selector index associated with this entry. There are valid indexes for selector types primary(1), secondary(2), tertiary(3).')
juniSystemTimingSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timingInterfaceIfIndex", 1), ("timingInternal", 2), ("timingLine", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemTimingSourceType.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingSourceType.setDescription('The system timing source type for this entry. This object must be set to timingInterfaceIfIndex(1) when setting the juniSystemTimingSourceIfIndex object or timingLine(3) when setting the juniSystemTimingSourceLine object. Also, if the value of this object is set to timingInternal(2), no other objects should be set, otherwise the agent will return an error.')
juniSystemTimingSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemTimingSourceIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingSourceIfIndex.setDescription('The ifIndex of the interface selected as the system timing source. If the juniSystemTimingSourceType object is not timingInterfaceIfIndex(1), then reading this object will return a zero value. The agent will not accept a set to this object unless the juniSystemTimingSourceType object is set to timingInterfaceIfIndex(1).')
juniSystemTimingSourceLine = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("timingSourceLineUndefined", 0), ("timingSourceLineE1PortA", 1), ("timingSourceLineE1PortB", 2), ("timingSourceLineT1PortA", 3), ("timingSourceLineT1PortB", 4))).clone('timingSourceLineUndefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemTimingSourceLine.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingSourceLine.setDescription('The line type timing source for this entry. If the juniSystemTimingSourceType object is not timingLine(3), then reading this object will return timingSourceLineUndefined(0). The agent will not accept a set to this object unless the juniSystemTimingSourceType object is set to timingLine(3). Attempting to set this object to timingSourceLineUndefined(0) will always return an inconsistantValue error. Attempting to set this object to a value that is not supported on the type of system running the agent will result in an inconsistantValue error.')
juniSystemTimingWorkingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timingStatusOk", 1), ("timingStatusError", 2), ("timingStatusUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTimingWorkingStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingWorkingStatus.setDescription('The status associated with the working (normal) source of this system timing working selector.')
juniSystemTimingProtectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timingStatusOk", 1), ("timingStatusError", 2), ("timingStatusUnknown", 3), ("sourceNotProtected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTimingProtectedStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingProtectedStatus.setDescription("The status associated with the protected (backup) source of this system timing selector. If the system doesn't support protected timing sources, then sourceNotProtected(4) will be returned.")
juniSystemFabricSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 6, 1), Unsigned32()).setUnits('gigabits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemFabricSpeed.setStatus('current')
if mibBuilder.loadTexts: juniSystemFabricSpeed.setDescription('The speed of switching fabric, in gigabits per second.')
juniSystemFabricRev = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemFabricRev.setStatus('current')
if mibBuilder.loadTexts: juniSystemFabricRev.setDescription('The fabric revision number. If unknown, a zero-length string is reported.')
juniSystemNvsCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemNvsCount.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsCount.setDescription("The number of non-volatile storage (NVS) 'flash' cards in the system.")
juniSystemNvsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2), )
if mibBuilder.loadTexts: juniSystemNvsTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsTable.setDescription('A table of NVS status information.')
juniSystemNvsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemNvsIndex"))
if mibBuilder.loadTexts: juniSystemNvsEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsEntry.setDescription('A table entry that provides the status information for a NVS flash card.')
juniSystemNvsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: juniSystemNvsIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsIndex.setDescription('The index number of the NVS flash card. There is an entry in this table for all values of this index in the range of 1 to the value of juniSystemNvsCount.')
juniSystemNvsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notPresent", 0), ("writeProtected", 1), ("volumeError", 2), ("nearCapacity", 3), ("ok", 4), ("noConfigSpace", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemNvsStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsStatus.setDescription('The status of non-volatile storage (NVS): notPresent - The SRP or the flash card is not accessible. writeProtected - NVS is write-protected. volumeError - Status poll of NVS failed. nearCapacity - Utilization exceeds 85% of NVS capacity. ok - NVS is fully operational with ample capacity. noConfigSpace - Utilization exceeds the ability to save the running configuration.')
juniSystemNvsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2, 1, 3), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemNvsCapacity.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsCapacity.setDescription('The capacity of NVS storage in megabytes.')
juniSystemNvsUtilPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemNvsUtilPct.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsUtilPct.setDescription('The percentage of NVS storage used. A value of -1 indicates NVS utilization is unknown.')
juniSystemNvsPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 7, 2, 1, 5), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemNvsPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsPhysicalIndex.setDescription('The entPhysicalIndex value assigned to this NVS flash card. This index may be use to retrieve other information about the NVS flash card, such as description and type, from the ENTITY-MIB.entPhysicalTable.')
juniSystemPowerCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemPowerCount.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerCount.setDescription('The number of power elements in the system.')
juniSystemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8, 2), )
if mibBuilder.loadTexts: juniSystemPowerTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerTable.setDescription('A table of status variables for the system power elements.')
juniSystemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8, 2, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemPowerIndex"))
if mibBuilder.loadTexts: juniSystemPowerEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerEntry.setDescription('A table entry describing status of a system power element.')
juniSystemPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: juniSystemPowerIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerIndex.setDescription('The index number of the power element. There is an entry in this table for all values of this index in the range of 1 to the value of juniSystemPowerCount.')
juniSystemPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notPresent", 0), ("inactive", 1), ("good", 2), ("failed", 3), ("sensorFailed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemPowerStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerStatus.setDescription('The status of the power element: notPresent - The power element is removed from the chassis. inactive - No power is available from this element. good - Power is available from this element. failed - The power element is not working. sensorFailed - The power element sensor has failed. unknown - The status of the power element is not availiable.')
juniSystemPowerPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 8, 2, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemPowerPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerPhysicalIndex.setDescription('The entPhysicalIndex value assigned to this power element. This index may be use to retrieve other information about the power element, such as description and type, from the ENTITY-MIB.entPhysicalTable.')
juniSystemFanCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemFanCount.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanCount.setDescription('The maximum number of fan subsystems that may be present in the system. This is a fixed number for each product type.')
juniSystemFanTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 2), )
if mibBuilder.loadTexts: juniSystemFanTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanTable.setDescription("A table of status of the system's fan subsystems.")
juniSystemFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 2, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemFanIndex"))
if mibBuilder.loadTexts: juniSystemFanEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanEntry.setDescription('A table entry describing status of a fan subsystem.')
juniSystemFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: juniSystemFanIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanIndex.setDescription('The index number of the fan subsystem. This is a number in the range of 1 to the value of juniSystemFanCount.')
juniSystemFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("failed", 0), ("ok", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemFanStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanStatus.setDescription('Status of fan subsystem. failed - The fan subsystem has a critical failure, or has been removed, and is now non-operational. ok - All components are operational. warning - The fan subsystem has a non-critical failure.')
juniSystemFanPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 2, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemFanPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanPhysicalIndex.setDescription('The entPhysicalIndex value assigned to this fan subsystem. This index may be use to retrieve other information about the fan subsystem, such as description and type, from the ENTITY-MIB.entPhysicalTable.')
juniSystemTempCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempCount.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempCount.setDescription('The maximum number of possible temperature sensors in the system.')
juniSystemTempTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 4), )
if mibBuilder.loadTexts: juniSystemTempTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempTable.setDescription("A table of status of the system's temperature sensors.")
juniSystemTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 4, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemTempIndex"))
if mibBuilder.loadTexts: juniSystemTempEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempEntry.setDescription("A table entry describing status of a temperature sensor. Sensors are located throughout the system. The ENTITY_MIB.entPhysicalTable provides detailed information about the location of each sensor. The index for a table entry is fixed based on a product-specific algorithm that uses the maximum number of sensors that may be on any module type associated with each of the available slots. This means that entries for sensors associated with empty slots and the 'extra' sensors on modules that have less than the maximum number of sensors for the slot type will have a notPresent status.")
juniSystemTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: juniSystemTempIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempIndex.setDescription('An arbitrary number to uniquely identify the temperature sensor.')
juniSystemTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("failed", 1), ("tooLow", 2), ("nominal", 3), ("tooHigh", 4), ("tooLowWarning", 5), ("tooHighWarning", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempStatus.setDescription('The status of a temperature sensor: unknown - sensor is not present or is not accessible failed - sensor is broken tooLow - temperature is below nominal range nominal - temperature is within nominal range tooHigh - temperature is above nominal range tooLowWarning - temperature is near the nominal lower limit tooHighWarning - temperature is near the nominal upper limit ')
juniSystemTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 4, 1, 3), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempValue.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempValue.setDescription('The temperature measured by this sensor in degrees Celsius. This measurement is valid only if the value of the corresponding juniSystemTempStatus is tooLow, nominal or tooHigh.')
juniSystemTempPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempPhysicalIndex.setDescription('The entPhysicalIndex value assigned to this temperature sensor. If the temperature sensor is not present this object will return a value of 0. For non-zero values this index may be used to retrieve other information about the temperature sensor from the ENTITY-MIB.entPhysicalTable, such as description and location.')
juniSystemTempProtectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("monitoring", 1), ("inHoldOff", 2), ("activatedHoldOffExpired", 3), ("activatedTempTooHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempProtectionStatus.setDescription('Thermal Protection status: off - No thermal protection. monitoring - Monitoring. inHoldOff - Hold off time has begun. activatedHoldOffExpired - Hold off time has expired; the system is in thermal protection mode. activatedTempTooHigh - The temperature is too high, the system is in thermal protection mode.')
juniSystemTempProtectionHoldOffTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200)).clone(150)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempProtectionHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempProtectionHoldOffTime.setDescription('The time, in seconds, before the system enters Thermal Protection mode after a critical thermal failure is detected.')
juniSystemTempProtectionHoldOffTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200)).clone(150)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemTempProtectionHoldOffTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempProtectionHoldOffTimeRemaining.setDescription('The time remaining, in seconds, before the system enters Thermal Protection mode while the ThermalProtectionStatus is set to inHoldOff. The value decrements every second until it reaches zero, and the status changes to activatedHoldOffExpired. When ThermalProtectionStatus is not inHoldOff or activatedHoldOffExpired, the value is set to the hold off time.')
juniSystemUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1), )
if mibBuilder.loadTexts: juniSystemUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationTable.setDescription('A table of status of the utilization of system resources. It is an implementation option as to which resources (if any) are supported in this table. It is also an implementation option as to whether the threshold objects are supported for a particular instance.')
juniSystemUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemUtilizationResourceType"), (0, "Juniper-System-MIB", "juniSystemUtilizationResourceSubType"), (0, "Juniper-System-MIB", "juniSystemUtilizationLocationType"), (0, "Juniper-System-MIB", "juniSystemUtilizationLocation"))
if mibBuilder.loadTexts: juniSystemUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationEntry.setDescription('A table entry describing the status of the utilization of a system resource.')
juniSystemUtilizationResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("memory", 2))))
if mibBuilder.loadTexts: juniSystemUtilizationResourceType.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationResourceType.setDescription('This index identifies a type of enumerated value that is used for the juniSystemUtilizationResourceSubType. See the DESCRIPTION for juniSystemUtilizationResourceSubType for the mapping of Type to SubType enumeration and the corresponding units of measure used for each type of resource.')
juniSystemUtilizationResourceSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: juniSystemUtilizationResourceSubType.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationResourceSubType.setDescription('This index uses an enumerated value that is different for each value of juniSystemUtilizationResourceType. The following table shows the mapping of Type to SubType enumeration and the corresponding units of measure used for each type of resource. Type SubType Units -----------+-------------------------------+---------------------------- interface Juniper-UNI-IF-MIB.juniIfType number of interfaces memory SNMPv2-TC.StorageType HOST-RESOURCES-MIB.KBytes ')
juniSystemUtilizationLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 3), JuniSystemLocationType())
if mibBuilder.loadTexts: juniSystemUtilizationLocationType.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationLocationType.setDescription('This index element identifies the format of the location information so that the juniSystemUtilizationLocation index element can be properly interpreted.')
juniSystemUtilizationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 4), JuniSystemLocation())
if mibBuilder.loadTexts: juniSystemUtilizationLocation.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationLocation.setDescription('This index is used to specify the resource instance based on its location. Its value is interpreted based on the location type identified by the juniSystemUtilizationLocationType index element.')
juniSystemUtilizationMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemUtilizationMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationMaxCapacity.setDescription('The maximum number of units of the resource the system can support. See the DESCRIPTION of juniSystemUtilizationResourceSubType for what constitutes a unit of value for this object. Note that for some resources this value may not always be achievable due to other resource constraints.')
juniSystemUtilizationCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemUtilizationCurrentValue.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationCurrentValue.setDescription("The current number of units of the resource in the system. See the DESCRIPTION for juniSystemUtilizationResourceSubType for what constitutes a unit of value for this object. Note that some resource types may have instances that do not consume any limited resources and therefore are not included in this count (e.g. IP loopback interfaces do not consume routing resources and therefore don't have a capacity limit, whereas 'external' IP interfaces do).")
juniSystemUtilizationThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemUtilizationThresholdRising.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationThresholdRising.setDescription('The threshold value (risingVal), which, in conjunction with juniSystemUtilizationHoldDownTime (holdTime) and juniSystemUtilizationThresholdFalling (fallingVal), is used to decide when to trigger an event indicating that the resource utilization, juniSystemUtilizationCurrentValue (currentVal), is approaching or has reached its maximum capacity, juniSystemUtilizationMaxCapacity (maxVal). See the DESCRIPTION for juniSystemUtilizationResourceSubType for what constitutes a unit of value for this object. The value of fallingVal must be less than the value of this object. This object provides one element in the formula used to determine when to send a utilization notification. If the currentVal rises to equal the risingVal and no other utilization event (either rising or falling) has been triggered within the holdTime, or if the holdTime for a falling threshold notification expires and the currentVal is at or above the risingVal, then and only then is a rising threshold utilization notification sent. The following pseudo-code states the algorithm more precisely. When the resource is created or initialized ( currentVal == 0 ): lastTrapType = none; lastTrapTime = 0; When currentVal increments (increases): if ( currentVal == risingVal && lastTrapTime + holdTime <= currentTime ) { triggerUtilizationTrapRising(); lastTrapType = rising; lastTrapTime = currentTime; } When currentVal decrements (decreases): if ( currentVal == fallingVal && lastTrapTime + holdTime <= currentTime ) { triggerUtilizationTrapFalling(); lastTrapType = falling; lastTrapTime = currentTime; } When the rising threshold value is modified: if ( currentVal < oldRisingVal && currentVal >= newRisingVal && lastTrapTime + holdTime <= currentTime ) triggerUtilizationTrapRising(); lastTrapType = rising; lastTrapTime = currentTime; } When the falling threshold value is modified: if ( currentVal > oldFallingVal && currentVal <= newFallingVal && lastTrapTime + holdTime <= currentTime ) triggerUtilizationTrapFalling(); lastTrapType = falling; lastTrapTime = currentTime; } When a hold-down time expires (lastTrapTime + holdTime == currentTime): switch ( lastTrapType ) { case rising: if ( currentVal <= fallingVal ) { triggerUtilizationTrapFalling(); lastTrapType = falling; lastTrapTime = currentTime; } else { lastTrapType = none; } break; case falling: if ( currentVal >= risingVal ) { triggerUtilizationTrapRising(); lastTrapType = rising; lastTrapTime = currentTime; } else { lastTrapType = none; } break; } ')
juniSystemUtilizationThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemUtilizationThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationThresholdFalling.setDescription('The threshold value (fallingVal), which, in conjunction with juniSystemUtilizationHoldDownTime (holdTime) and juniSystemUtilizationThresholdRising (risingVal), is used to decide when to trigger an event indicating that the resource utilization, juniSystemUtilizationCurrentValue (currentVal), has fallen to or below this level after having exceeded this value. See the DESCRIPTION for juniSystemUtilizationResourceSubType for what constitutes a unit of value for this object. The value of this object must be less than the value of risingVal. This object provides one element in the formula used to determine when to send a utilization notification. If the currentVal falls to equal the fallingVal and no other utilization event (either rising or falling) has been triggered within the holdTime, or if the holdTime for a rising threshold notification expires and the currentVal is at or below the fallingVal, then and only then is a falling threshold utilization notification sent. The pseudo-code in the juniSystemUtilizationThresholdRising DESCRIPTION states the algorithm more precisely.')
juniSystemUtilizationHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 1, 1, 9), Gauge32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemUtilizationHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationHoldDownTime.setDescription('The hold-down time (holdTime) used in conjunction with juniSystemUtilizationThresholdRising (risingVal) and juniSystemUtilizationThresholdFalling (fallingVal) to decide when to trigger an event indicating that the resource utilization, juniSystemUtilizationCurrentValue (currentVal), has reached or surpassed one of the thresholds. This object provides one element in the formula used to determine when to send a utilization notification. If the resource utilization increases to the rising threshold value but a prior rising or falling utilization event has been triggered within this hold-down time then no rising threshold utilization notification may be sent at that time. If the resource utilization decreases to the falling threshold value but a prior rising or falling utilization event has been triggered within this hold-down time then no falling threshold utilization notification may be sent at that time. However, if the end of a hold-down period for a rising threshold utilization notification is reached and the current value is at or below the falling threshold value, then a falling threshold notification is sent and the hold-down timer is restarted. Likewise, if the end of a hold-down period for a falling threshold utilization notification is reached and the current value is at or above the rising threshold value, then a rising threshold notification is sent and the hold-down timer is restarted. The pseudo-code in the juniSystemUtilizationThresholdRising DESCRIPTION states the algorithm more precisely.')
juniSystemCpuUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2), )
if mibBuilder.loadTexts: juniSystemCpuUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationTable.setDescription('A table of status of the cpu utilization by various tasks.')
juniSystemCpuUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemCpuUtilizationTimeMark"), (0, "Juniper-System-MIB", "juniSystemCpuUtilizationTaskName"))
if mibBuilder.loadTexts: juniSystemCpuUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationEntry.setDescription('A table entry describing cpu utilization of a particular task.')
juniSystemCpuUtilizationTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 1), JuniTimeFilter())
if mibBuilder.loadTexts: juniSystemCpuUtilizationTimeMark.setReference('Refer to RFC 2021 for the definition of the TimeFilter, its usage and implementation notes.')
if mibBuilder.loadTexts: juniSystemCpuUtilizationTimeMark.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationTimeMark.setDescription('A TimeFilter for this task profile entry. Allows GetNext and GetBulk to find task profile rows which have changed since a specified value of sysUptime.')
juniSystemCpuUtilizationTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 2), JuniSystemTaskName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationTaskName.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationTaskName.setDescription('Task name associated with this task profile entry.')
juniSystemCpuUtilizationInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationInvoked.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationInvoked.setDescription('Number of times task associated with this task profile entry being invoked.')
juniSystemCpuUtilizationInvokationPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationInvokationPerSec.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationInvokationPerSec.setDescription('Rate of invokation for the task associated with this task profile entry.')
juniSystemCpuUtilizationTotalRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 5), Integer32()).setUnits('milli Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationTotalRunningTime.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationTotalRunningTime.setDescription('Total running time for the task associated with this task profile entry.')
juniSystemCpuUtilizationPercentageRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationPercentageRunningTime.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationPercentageRunningTime.setDescription('Percentage running time for the task associated with this task profile entry.')
juniSystemCpuUtilizationAverageTimePerInvokation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 7), Integer32()).setUnits('micro Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationAverageTimePerInvokation.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationAverageTimePerInvokation.setDescription('Average running time per invokation for the task associated with this task profile entry.')
juniSystemCpuUtilizationFiveSecondUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationFiveSecondUtilization.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationFiveSecondUtilization.setDescription('Utilization in terms of percentage during the five seconds measurement interval for the task associated with this task profile entry.')
juniSystemCpuUtilizationOneMinuteUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationOneMinuteUtilization.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationOneMinuteUtilization.setDescription('Utilization in terms of percentage during the one minute measurement interval for the task associated with this task profile entry.')
juniSystemCpuUtilizationFiveMinuteUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationFiveMinuteUtilization.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationFiveMinuteUtilization.setDescription('Utilization in terms of percentage during the five minutes measurement interval for the task associated with this task profile entry.')
juniSystemCpuUtilizationNumberOfInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemCpuUtilizationNumberOfInstances.setStatus('current')
if mibBuilder.loadTexts: juniSystemCpuUtilizationNumberOfInstances.setDescription('Number of instances consolidated for CPU utilization calculation in this task profile entry.')
juniSystemIssuState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("initializing", 2), ("initialized", 3), ("upgrading", 4), ("stopping", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemIssuState.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuState.setDescription('The state of the system with respect to ISSU upgrade: idle - ISSU is currently idle initializing - ISSU initialization is in-progress initialized - ISSU has successfully initialized upgrading - ISSU is currently upgrading to the new armed release stopping - ISSU is currently in the process of stopping This object is supported on the second generation E-series platform family (E320 & E120) in JUNOSe 9.0 and subsequent system releases. This object is also supported on ERX-1440 in JUNOSe 9.2 and subsequent system releases.')
juniSystemIssuRunningReleaseFile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemIssuRunningReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuRunningReleaseFile.setDescription("The currently running release file name, with extension '.rel'. The system was booted last time with this release file. This object is supported on the second generation E-series platform family (E320 & E120) in JUNOSe 9.0 and subsequent system releases. This object is also supported on ERX-1440 in JUNOSe 9.2 and subsequent system releases.")
juniSystemIssuArmedReleaseFile = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemIssuArmedReleaseFile.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuArmedReleaseFile.setDescription("The currently armed release file name, with extension '.rel'. The system will be booted with this release file, after ISSU (if it is not aborted). This object is supported on the second generation E-series platform family (E320 & E120) in JUNOSe 9.0 and subsequent system releases. This object is also supported on ERX-1440 in JUNOSe 9.2 and subsequent system releases.")
juniSystemIssuStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemIssuStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuStatus.setDescription('The status of the system with respect to ISSU upgrade. ok - no error or warning found warning - at least one upgrade warning found, upgrade is possible error - at least one upgrade error found, upgrade is not possible This object is supported on the second generation E-series platform family (E320 & E120) in JUNOSe 9.0 and subsequent system releases. This object is also supported on ERX-1440 in JUNOSe 9.2 and subsequent system releases.')
juniSystemIssuCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 5), )
if mibBuilder.loadTexts: juniSystemIssuCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuCriteriaTable.setDescription('A Table of criteria for an ISSU initialization. This table will be empty for unsupported platforms. These objects are supported on the second generation E-series platform family (E320 & E120) in JUNOSe 9.0 and subsequent system releases. This object is also supported on ERX-1440 in JUNOSe 9.2 and subsequent system releases.')
juniSystemIssuCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 5, 1), ).setIndexNames((0, "Juniper-System-MIB", "juniSystemIssuCriteriaIndex"))
if mibBuilder.loadTexts: juniSystemIssuCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuCriteriaEntry.setDescription('A table entry describing the criteria for an ISSU initialization.')
juniSystemIssuCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: juniSystemIssuCriteriaIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuCriteriaIndex.setDescription('The index associated with an entry of the system ISSU Criteria Table.')
juniSystemIssuCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemIssuCriteriaDescription.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuCriteriaDescription.setDescription('To initialize ISSU, few criteria need to be met. If these criteria were not met, ISSU cannot be initialized. This object provides the criteria details.')
juniSystemIssuCriteriaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("conditional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniSystemIssuCriteriaStatus.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuCriteriaStatus.setDescription('To initialize ISSU, few criteria need to be met. If these criteria were not met, ISSU cannot be initialized. This object indicates whether a criteria has met. It will be conditional when that the user can choose to accept the consequences of proceeding with ISSU with non-ideal operating conditions.')
juniSystemMemUtilTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemMemUtilTrapEnable.setStatus('current')
if mibBuilder.loadTexts: juniSystemMemUtilTrapEnable.setDescription('Controls the sending of primary system processor memory utilization events. Setting the value of this object to true(1) will cause system memory utilization event notifications, if they occur, to be sent to the management entity on this system. Setting the value of this object to false(2) will disable memory utilization event notifications.')
juniSystemReloadSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: juniSystemReloadSlotNumber.setStatus('current')
if mibBuilder.loadTexts: juniSystemReloadSlotNumber.setDescription('In a juniSystemReloadCommand notification, this object indicates the number of the slot that is being reloaded. Note that slot numbers are zero-based.')
juniSystemUtilizationThresholdDirection = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rising", 1), ("falling", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: juniSystemUtilizationThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationThresholdDirection.setDescription('The type of resource utilization notification being sent. See the DESCRIPTIONs for the juniSystemUtilizationTable elements for details on what conditions trigger a resource utilization notification.')
juniSystemUtilizationTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 22), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSystemUtilizationTrapEnable.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationTrapEnable.setDescription('Controls the sending of system resource utilization threshold notifications. Setting the value of this object to true(1) will allow resource utilization threshold event notifications, if they occur, to be sent to the management entity on this system. Setting the value of this object to false(2) will disable resource utilization threshold utilization event notifications.')
juniSystemPortSfpPowerThresholdIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 24), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: juniSystemPortSfpPowerThresholdIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortSfpPowerThresholdIfIndex.setDescription('interface phy-uid.')
juniSystemPortSfpPowerThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: juniSystemPortSfpPowerThresholdValue.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortSfpPowerThresholdValue.setDescription('represents power tx/rx max/min threshold value of sfp. currently displays 1.0000 for trap raised, 0.0000 for trap cleared')
juniSystemHighMemUtil = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 1)).setObjects(("Juniper-System-MIB", "juniSystemMemCapacity"), ("Juniper-System-MIB", "juniSystemMemUtilPct"), ("Juniper-System-MIB", "juniSystemAbatedMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemHighMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemMemKBytesCapacity"))
if mibBuilder.loadTexts: juniSystemHighMemUtil.setStatus('current')
if mibBuilder.loadTexts: juniSystemHighMemUtil.setDescription('Report system memory utilization has met the conditions of juniSystemHighMemUtilThreshold. If the memory capacity is greater than 2147483647, a -1 value is returned in juniSystemMemCapacity, and the actual memory capacity in units of 1024 bytes is returned in juniSystemMemKBytesCapacity.')
juniSystemAbatedMemUtil = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 2)).setObjects(("Juniper-System-MIB", "juniSystemMemCapacity"), ("Juniper-System-MIB", "juniSystemMemUtilPct"), ("Juniper-System-MIB", "juniSystemAbatedMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemHighMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemMemKBytesCapacity"))
if mibBuilder.loadTexts: juniSystemAbatedMemUtil.setStatus('current')
if mibBuilder.loadTexts: juniSystemAbatedMemUtil.setDescription('Reports system memory utilization has met the conditions of juniSystemAbatedMemUtilThreshold. If the memory capacity is greater than 2147483647, a -1 value is returned in juniSystemMemCapacity, and the actual memory capacity in units of 1024 bytes is returned in juniSystemMemKBytesCapacity.')
juniSystemModuleOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 3)).setObjects(("Juniper-System-MIB", "juniSystemModuleCurrentType"), ("Juniper-System-MIB", "juniSystemModuleAdminStatus"), ("Juniper-System-MIB", "juniSystemModuleOperStatus"), ("Juniper-System-MIB", "juniSystemModuleDisableReason"), ("Juniper-System-MIB", "juniSystemModuleDescr"))
if mibBuilder.loadTexts: juniSystemModuleOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleOperStatusChange.setDescription('Reports a status change for a module. This trap is generated on a transition into a stable state (online or disabled) or on a transition out of online. If redundancy is supported for the module (juniSystemModuleRedundancySupported is true(1)), then the juniSystemModuleSpareServer and juniSystemModuleAssociatedSlot objects are also included in the notification.')
juniSystemPowerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("Juniper-System-MIB", "juniSystemPowerStatus"))
if mibBuilder.loadTexts: juniSystemPowerStatusChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerStatusChange.setDescription('Reports a change in the status of a power element.')
juniSystemFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 5)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("Juniper-System-MIB", "juniSystemFanStatus"))
if mibBuilder.loadTexts: juniSystemFanStatusChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemFanStatusChange.setDescription('Reports a transition between the three states of the fan subsystem. When the fan subsystem transitions to the failed state the Thermal Protection hold off time begins.')
juniSystemTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 6)).setObjects(("Juniper-System-MIB", "juniSystemTempStatus"))
if mibBuilder.loadTexts: juniSystemTempStatusChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempStatusChange.setDescription('Reports a change in the temperature status. When the status transitions to the tooHigh state the system enters Thermal Protection mode.')
juniSystemTempProtectionStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 7)).setObjects(("Juniper-System-MIB", "juniSystemTempProtectionStatus"), ("Juniper-System-MIB", "juniSystemTempProtectionHoldOffTimeRemaining"))
if mibBuilder.loadTexts: juniSystemTempProtectionStatusChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemTempProtectionStatusChange.setDescription('Notification about changes in the state of Thermal Protection. This notification is sent when the tempProtectionStatus changes. It is also sent when the holdOffTimeRemaining is 50% of the holdOffTime.')
juniSystemReloadCommand = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 8))
if mibBuilder.loadTexts: juniSystemReloadCommand.setStatus('current')
if mibBuilder.loadTexts: juniSystemReloadCommand.setDescription('Notification indicating that a slot or the entire system is about to restart due to a system console reload command. If the reload is only on an individual slot then the following object is included in the notification: juniSystemReloadSlotNumber ')
juniSystemUtilizationThreshold = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 9)).setObjects(("Juniper-System-MIB", "juniSystemUtilizationThresholdDirection"), ("Juniper-System-MIB", "juniSystemUtilizationMaxCapacity"), ("Juniper-System-MIB", "juniSystemUtilizationCurrentValue"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdRising"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdFalling"), ("Juniper-System-MIB", "juniSystemUtilizationHoldDownTime"))
if mibBuilder.loadTexts: juniSystemUtilizationThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationThreshold.setDescription("Notification indicating that a system resource's utilization has met the conditions of juniSystemUtilizationThresholdDirection. See the DESCRIPTIONs for the juniSystemUtilizationTable elements for details on what conditions trigger a resource utilization notification.")
juniSystemIssuStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 10)).setObjects(("Juniper-System-MIB", "juniSystemIssuState"))
if mibBuilder.loadTexts: juniSystemIssuStateChange.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuStateChange.setDescription('Notification about changes in the status, in case of ISSU upgrade. This notification is sent when the juniSystemIssuState changes. The trap parameter will indicate the current value of the juniSystemIssuState. This notification is supported on the second generation E-series platform family (E320 & E120) from 9.0 release onwards. This object is also supported on ERX-1440 in JUNOSe 9.2 and subsequent system releases.')
juniSystemPortSfpTxMaxPowerThreshold = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 11)).setObjects(("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdIfIndex"), ("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdValue"))
if mibBuilder.loadTexts: juniSystemPortSfpTxMaxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortSfpTxMaxPowerThreshold.setDescription("Notification says that trap raised/cleared is with respect to link sfp's tx-max power threshold")
juniSystemPortSfpTxMinPowerThreshold = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 12)).setObjects(("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdIfIndex"), ("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdValue"))
if mibBuilder.loadTexts: juniSystemPortSfpTxMinPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortSfpTxMinPowerThreshold.setDescription("Notification says that trap raised/cleared is with respect to link sfp's tx-min power threshold")
juniSystemPortSfpRxMaxPowerThreshold = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 13)).setObjects(("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdIfIndex"), ("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdValue"))
if mibBuilder.loadTexts: juniSystemPortSfpRxMaxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortSfpRxMaxPowerThreshold.setDescription("Notification says that trap raised/cleared is with respect to link sfp's rx-max power threshold")
juniSystemPortSfpRxMinPowerThreshold = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 0, 14)).setObjects(("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdIfIndex"), ("Juniper-System-MIB", "juniSystemPortSfpPowerThresholdValue"))
if mibBuilder.loadTexts: juniSystemPortSfpRxMinPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortSfpRxMinPowerThreshold.setDescription("Notification says that trap raised/cleared is with respect to link sfp's rx-min power threshold")
juniSystemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1))
juniSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2))
juniSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 1)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance = juniSystemCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance.setDescription('Obsolete compliance statement for entities that implement the Juniper E-series System MIB. This statement became obsolete when system resource utilization support was added.')
juniSystemCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 2)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance2 = juniSystemCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance2.setDescription('Obsolete compliance statement for entities that implement the Juniper E-series System MIB. This statement became obsolete when the system resource utilization trap enabled and the KByte memory capacilty objects were added.')
juniSystemCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 3)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup2"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance3 = juniSystemCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance3.setDescription('Obsolete compliance statement for entities that implement the Juniper E-series System MIB. This statement became obsolete when the module level span object was added.')
juniSystemCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 4)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup2"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup2"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance4 = juniSystemCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance4.setDescription('Obsolete compliance statement for entities that implement the Juniper E-series System MIB.')
juniSystemCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 5)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup2"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup2"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup2"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance5 = juniSystemCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance5.setDescription('Obsolete compliance statement for entities that implement the Juniper E-series System MIB.')
juniSystemCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 6)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup2"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup3"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup2"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance6 = juniSystemCompliance6.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance6.setDescription('The compliance statement for entities that implement the Juniper E-series System MIB.')
juniSystemCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 7)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup2"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup3"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup2"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemIssuGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance7 = juniSystemCompliance7.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemCompliance7.setDescription('The compliance statement for entities that implement the Juniper E-series System MIB.')
juniSystemCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 1, 8)).setObjects(("Juniper-System-MIB", "juniSystemGeneralGroup2"), ("Juniper-System-MIB", "juniSystemSubsystemGroup"), ("Juniper-System-MIB", "juniSystemModuleGroup3"), ("Juniper-System-MIB", "juniSystemPortGroup"), ("Juniper-System-MIB", "juniSystemTimingGroup"), ("Juniper-System-MIB", "juniSystemFabricGroup"), ("Juniper-System-MIB", "juniSystemNvsGroup"), ("Juniper-System-MIB", "juniSystemPowerGroup"), ("Juniper-System-MIB", "juniSystemTemperatureGroup"), ("Juniper-System-MIB", "juniSystemUtilizationGroup2"), ("Juniper-System-MIB", "juniSystemNotificationObjectsGroup"), ("Juniper-System-MIB", "juniSystemIssuGroup"), ("Juniper-System-MIB", "juniSystemNotificationGroup3"), ("Juniper-System-MIB", "juniSystemNotificationGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemCompliance8 = juniSystemCompliance8.setStatus('current')
if mibBuilder.loadTexts: juniSystemCompliance8.setDescription('The compliance statement for entities that implement the Juniper E-series System MIB.')
juniSystemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 1)).setObjects(("Juniper-System-MIB", "juniSystemSwVersion"), ("Juniper-System-MIB", "juniSystemSwBuildDate"), ("Juniper-System-MIB", "juniSystemMemUtilPct"), ("Juniper-System-MIB", "juniSystemMemCapacity"), ("Juniper-System-MIB", "juniSystemHighMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemAbatedMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemMemUtilTrapEnable"), ("Juniper-System-MIB", "juniSystemBootConfigControl"), ("Juniper-System-MIB", "juniSystemBootBackupConfigControl"), ("Juniper-System-MIB", "juniSystemBootForceBackupControl"), ("Juniper-System-MIB", "juniSystemBootAutoRevertControl"), ("Juniper-System-MIB", "juniSystemBootAutoRevertCountTolerance"), ("Juniper-System-MIB", "juniSystemBootAutoRevertTimeTolerance"), ("Juniper-System-MIB", "juniSystemBootReleaseFile"), ("Juniper-System-MIB", "juniSystemBootConfigFile"), ("Juniper-System-MIB", "juniSystemBootBackupReleaseFile"), ("Juniper-System-MIB", "juniSystemBootBackupConfigFile"), ("Juniper-System-MIB", "juniSystemRedundancyRevertControl"), ("Juniper-System-MIB", "juniSystemRedundancyRevertTimeOfDay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemGeneralGroup = juniSystemGeneralGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemGeneralGroup.setDescription('Obsolete collection of management objects providing system-wide software status and control information in a Juniper E-series product. This group became obsolete when the system resource utilization threshold trap enable/disable and the KByte memory capacilty objects were added.')
juniSystemSubsystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 2)).setObjects(("Juniper-System-MIB", "juniSystemSubsystemName"), ("Juniper-System-MIB", "juniSystemSubsystemBootReleaseFile"), ("Juniper-System-MIB", "juniSystemSubsystemBootBackupReleaseFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemSubsystemGroup = juniSystemSubsystemGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemSubsystemGroup.setDescription('A collection of management objects providing subsystem software control information in a Juniper E-series product.')
juniSystemModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 3)).setObjects(("Juniper-System-MIB", "juniSystemMaxSlotNumber"), ("Juniper-System-MIB", "juniSystemMaxModulesPerSlot"), ("Juniper-System-MIB", "juniSystemSlotStatus"), ("Juniper-System-MIB", "juniSystemSlotType"), ("Juniper-System-MIB", "juniSystemModuleOperStatus"), ("Juniper-System-MIB", "juniSystemModuleDisableReason"), ("Juniper-System-MIB", "juniSystemModuleLastChange"), ("Juniper-System-MIB", "juniSystemModuleCurrentType"), ("Juniper-System-MIB", "juniSystemModuleExpectedType"), ("Juniper-System-MIB", "juniSystemModuleDescr"), ("Juniper-System-MIB", "juniSystemModuleSlotSpan"), ("Juniper-System-MIB", "juniSystemModulePortCount"), ("Juniper-System-MIB", "juniSystemModuleSerialNumber"), ("Juniper-System-MIB", "juniSystemModuleAssemblyPartNumber"), ("Juniper-System-MIB", "juniSystemModuleAssemblyRev"), ("Juniper-System-MIB", "juniSystemModulePhysicalIndex"), ("Juniper-System-MIB", "juniSystemModuleSoftwareSupport"), ("Juniper-System-MIB", "juniSystemModuleRedundancySupport"), ("Juniper-System-MIB", "juniSystemModuleSoftwareVersion"), ("Juniper-System-MIB", "juniSystemModuleCpuUtilPct"), ("Juniper-System-MIB", "juniSystemModuleMemUtilPct"), ("Juniper-System-MIB", "juniSystemModuleAdminStatus"), ("Juniper-System-MIB", "juniSystemModuleControl"), ("Juniper-System-MIB", "juniSystemModuleBootReleaseFile"), ("Juniper-System-MIB", "juniSystemModuleBootBackupReleaseFile"), ("Juniper-System-MIB", "juniSystemModuleRedundancyGroupId"), ("Juniper-System-MIB", "juniSystemModuleRedundancySpare"), ("Juniper-System-MIB", "juniSystemModuleRedundancyAssociatedSlot"), ("Juniper-System-MIB", "juniSystemModuleRedundancyLockout"), ("Juniper-System-MIB", "juniSystemModuleRedundancyRevertControl"), ("Juniper-System-MIB", "juniSystemModuleRedundancyRevertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemModuleGroup = juniSystemModuleGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemModuleGroup.setDescription('Obsolete collection of management objects that provide system module information in a Juniper E-series product. This group became obsolete when the module level span object was added.')
juniSystemPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 4)).setObjects(("Juniper-System-MIB", "juniSystemPortPhysicalIndex"), ("Juniper-System-MIB", "juniSystemPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemPortGroup = juniSystemPortGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemPortGroup.setDescription('A collection of management objects providing physical I/O port information in a Juniper E-series product.')
juniSystemTimingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 5)).setObjects(("Juniper-System-MIB", "juniSystemAdminTimingSource"), ("Juniper-System-MIB", "juniSystemOperTimingSource"), ("Juniper-System-MIB", "juniSystemTimingAutoUpgrade"), ("Juniper-System-MIB", "juniSystemTimingSourceType"), ("Juniper-System-MIB", "juniSystemTimingSourceIfIndex"), ("Juniper-System-MIB", "juniSystemTimingSourceLine"), ("Juniper-System-MIB", "juniSystemTimingWorkingStatus"), ("Juniper-System-MIB", "juniSystemTimingProtectedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemTimingGroup = juniSystemTimingGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemTimingGroup.setDescription('A collection of management objects providing system timing source information in a Juniper E-series product.')
juniSystemFabricGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 6)).setObjects(("Juniper-System-MIB", "juniSystemFabricSpeed"), ("Juniper-System-MIB", "juniSystemFabricRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemFabricGroup = juniSystemFabricGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemFabricGroup.setDescription('A collection of management objects providing system fabric information in a Juniper E-series product.')
juniSystemNvsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 7)).setObjects(("Juniper-System-MIB", "juniSystemNvsCount"), ("Juniper-System-MIB", "juniSystemNvsPhysicalIndex"), ("Juniper-System-MIB", "juniSystemNvsStatus"), ("Juniper-System-MIB", "juniSystemNvsCapacity"), ("Juniper-System-MIB", "juniSystemNvsUtilPct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemNvsGroup = juniSystemNvsGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemNvsGroup.setDescription('A collection of management objects providing system non-volatile storage (NVS) information in a Juniper E-series product.')
juniSystemPowerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 8)).setObjects(("Juniper-System-MIB", "juniSystemPowerCount"), ("Juniper-System-MIB", "juniSystemPowerPhysicalIndex"), ("Juniper-System-MIB", "juniSystemPowerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemPowerGroup = juniSystemPowerGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemPowerGroup.setDescription('A collection of management objects providing system power element information in a Juniper E-series product.')
juniSystemTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 9)).setObjects(("Juniper-System-MIB", "juniSystemFanCount"), ("Juniper-System-MIB", "juniSystemFanPhysicalIndex"), ("Juniper-System-MIB", "juniSystemFanStatus"), ("Juniper-System-MIB", "juniSystemTempCount"), ("Juniper-System-MIB", "juniSystemTempStatus"), ("Juniper-System-MIB", "juniSystemTempValue"), ("Juniper-System-MIB", "juniSystemTempPhysicalIndex"), ("Juniper-System-MIB", "juniSystemTempProtectionStatus"), ("Juniper-System-MIB", "juniSystemTempProtectionHoldOffTime"), ("Juniper-System-MIB", "juniSystemTempProtectionHoldOffTimeRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemTemperatureGroup = juniSystemTemperatureGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemTemperatureGroup.setDescription('A collection of management objects providing system temperature control information in a Juniper E-series product.')
juniSystemNotificationObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 10)).setObjects(("Juniper-System-MIB", "juniSystemReloadSlotNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemNotificationObjectsGroup = juniSystemNotificationObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemNotificationObjectsGroup.setDescription('A collection of management objects providing system information for notification in a Juniper E-series product.')
juniSystemNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 11)).setObjects(("Juniper-System-MIB", "juniSystemHighMemUtil"), ("Juniper-System-MIB", "juniSystemAbatedMemUtil"), ("Juniper-System-MIB", "juniSystemModuleOperStatusChange"), ("Juniper-System-MIB", "juniSystemPowerStatusChange"), ("Juniper-System-MIB", "juniSystemFanStatusChange"), ("Juniper-System-MIB", "juniSystemTempStatusChange"), ("Juniper-System-MIB", "juniSystemTempProtectionStatusChange"), ("Juniper-System-MIB", "juniSystemReloadCommand"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemNotificationGroup = juniSystemNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemNotificationGroup.setDescription('Obsolete collection of notifications for system events in a Juniper E-series product. This group became obsolete when the system resource utilization notification was added.')
juniSystemUtilizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 12)).setObjects(("Juniper-System-MIB", "juniSystemUtilizationMaxCapacity"), ("Juniper-System-MIB", "juniSystemUtilizationCurrentValue"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdRising"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdFalling"), ("Juniper-System-MIB", "juniSystemUtilizationHoldDownTime"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemUtilizationGroup = juniSystemUtilizationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemUtilizationGroup.setDescription('Obsolete collection of management objects providing system resource utilization information and notification control for a Juniper E-series product.')
juniSystemNotificationGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 13)).setObjects(("Juniper-System-MIB", "juniSystemHighMemUtil"), ("Juniper-System-MIB", "juniSystemAbatedMemUtil"), ("Juniper-System-MIB", "juniSystemModuleOperStatusChange"), ("Juniper-System-MIB", "juniSystemPowerStatusChange"), ("Juniper-System-MIB", "juniSystemFanStatusChange"), ("Juniper-System-MIB", "juniSystemTempStatusChange"), ("Juniper-System-MIB", "juniSystemTempProtectionStatusChange"), ("Juniper-System-MIB", "juniSystemReloadCommand"), ("Juniper-System-MIB", "juniSystemUtilizationThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemNotificationGroup2 = juniSystemNotificationGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemNotificationGroup2.setDescription('A collection of notifications for system events in a Juniper E-series product.')
juniSystemGeneralGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 14)).setObjects(("Juniper-System-MIB", "juniSystemSwVersion"), ("Juniper-System-MIB", "juniSystemSwBuildDate"), ("Juniper-System-MIB", "juniSystemMemUtilPct"), ("Juniper-System-MIB", "juniSystemMemCapacity"), ("Juniper-System-MIB", "juniSystemMemKBytesCapacity"), ("Juniper-System-MIB", "juniSystemHighMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemAbatedMemUtilThreshold"), ("Juniper-System-MIB", "juniSystemMemUtilTrapEnable"), ("Juniper-System-MIB", "juniSystemUtilizationTrapEnable"), ("Juniper-System-MIB", "juniSystemBootConfigControl"), ("Juniper-System-MIB", "juniSystemBootBackupConfigControl"), ("Juniper-System-MIB", "juniSystemBootForceBackupControl"), ("Juniper-System-MIB", "juniSystemBootAutoRevertControl"), ("Juniper-System-MIB", "juniSystemBootAutoRevertCountTolerance"), ("Juniper-System-MIB", "juniSystemBootAutoRevertTimeTolerance"), ("Juniper-System-MIB", "juniSystemBootReleaseFile"), ("Juniper-System-MIB", "juniSystemBootConfigFile"), ("Juniper-System-MIB", "juniSystemBootBackupReleaseFile"), ("Juniper-System-MIB", "juniSystemBootBackupConfigFile"), ("Juniper-System-MIB", "juniSystemRedundancyRevertControl"), ("Juniper-System-MIB", "juniSystemRedundancyRevertTimeOfDay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemGeneralGroup2 = juniSystemGeneralGroup2.setStatus('current')
if mibBuilder.loadTexts: juniSystemGeneralGroup2.setDescription('A collection of management objects providing system-wide software status and control information in a Juniper E-series product.')
juniSystemModuleGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 15)).setObjects(("Juniper-System-MIB", "juniSystemMaxSlotNumber"), ("Juniper-System-MIB", "juniSystemMaxModulesPerSlot"), ("Juniper-System-MIB", "juniSystemSlotStatus"), ("Juniper-System-MIB", "juniSystemSlotType"), ("Juniper-System-MIB", "juniSystemModuleOperStatus"), ("Juniper-System-MIB", "juniSystemModuleDisableReason"), ("Juniper-System-MIB", "juniSystemModuleLastChange"), ("Juniper-System-MIB", "juniSystemModuleCurrentType"), ("Juniper-System-MIB", "juniSystemModuleExpectedType"), ("Juniper-System-MIB", "juniSystemModuleDescr"), ("Juniper-System-MIB", "juniSystemModuleSlotSpan"), ("Juniper-System-MIB", "juniSystemModulePortCount"), ("Juniper-System-MIB", "juniSystemModuleSerialNumber"), ("Juniper-System-MIB", "juniSystemModuleAssemblyPartNumber"), ("Juniper-System-MIB", "juniSystemModuleAssemblyRev"), ("Juniper-System-MIB", "juniSystemModulePhysicalIndex"), ("Juniper-System-MIB", "juniSystemModuleSoftwareSupport"), ("Juniper-System-MIB", "juniSystemModuleRedundancySupport"), ("Juniper-System-MIB", "juniSystemModuleLevelSpan"), ("Juniper-System-MIB", "juniSystemModuleSoftwareVersion"), ("Juniper-System-MIB", "juniSystemModuleCpuUtilPct"), ("Juniper-System-MIB", "juniSystemModuleMemUtilPct"), ("Juniper-System-MIB", "juniSystemModuleAdminStatus"), ("Juniper-System-MIB", "juniSystemModuleControl"), ("Juniper-System-MIB", "juniSystemModuleBootReleaseFile"), ("Juniper-System-MIB", "juniSystemModuleBootBackupReleaseFile"), ("Juniper-System-MIB", "juniSystemModuleRedundancyGroupId"), ("Juniper-System-MIB", "juniSystemModuleRedundancySpare"), ("Juniper-System-MIB", "juniSystemModuleRedundancyAssociatedSlot"), ("Juniper-System-MIB", "juniSystemModuleRedundancyLockout"), ("Juniper-System-MIB", "juniSystemModuleRedundancyRevertControl"), ("Juniper-System-MIB", "juniSystemModuleRedundancyRevertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemModuleGroup2 = juniSystemModuleGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemModuleGroup2.setDescription('A collection of management objects that provide system module information in a Juniper E-series product.')
juniSystemUtilizationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 16)).setObjects(("Juniper-System-MIB", "juniSystemUtilizationMaxCapacity"), ("Juniper-System-MIB", "juniSystemUtilizationCurrentValue"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdRising"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdFalling"), ("Juniper-System-MIB", "juniSystemUtilizationHoldDownTime"), ("Juniper-System-MIB", "juniSystemUtilizationThresholdDirection"), ("Juniper-System-MIB", "juniSystemCpuUtilizationTaskName"), ("Juniper-System-MIB", "juniSystemCpuUtilizationInvoked"), ("Juniper-System-MIB", "juniSystemCpuUtilizationInvokationPerSec"), ("Juniper-System-MIB", "juniSystemCpuUtilizationTotalRunningTime"), ("Juniper-System-MIB", "juniSystemCpuUtilizationPercentageRunningTime"), ("Juniper-System-MIB", "juniSystemCpuUtilizationAverageTimePerInvokation"), ("Juniper-System-MIB", "juniSystemCpuUtilizationFiveSecondUtilization"), ("Juniper-System-MIB", "juniSystemCpuUtilizationOneMinuteUtilization"), ("Juniper-System-MIB", "juniSystemCpuUtilizationFiveMinuteUtilization"), ("Juniper-System-MIB", "juniSystemCpuUtilizationNumberOfInstances"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemUtilizationGroup2 = juniSystemUtilizationGroup2.setStatus('current')
if mibBuilder.loadTexts: juniSystemUtilizationGroup2.setDescription('A collection of management objects providing system resource utilization information and notification control for a Juniper E-series product.')
juniSystemModuleGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 17)).setObjects(("Juniper-System-MIB", "juniSystemMaxSlotNumber"), ("Juniper-System-MIB", "juniSystemMaxModulesPerSlot"), ("Juniper-System-MIB", "juniSystemSlotStatus"), ("Juniper-System-MIB", "juniSystemSlotType"), ("Juniper-System-MIB", "juniSystemModuleOperStatus"), ("Juniper-System-MIB", "juniSystemModuleDisableReason"), ("Juniper-System-MIB", "juniSystemModuleLastChange"), ("Juniper-System-MIB", "juniSystemModuleCurrentType"), ("Juniper-System-MIB", "juniSystemModuleExpectedType"), ("Juniper-System-MIB", "juniSystemModuleDescr"), ("Juniper-System-MIB", "juniSystemModuleSlotSpan"), ("Juniper-System-MIB", "juniSystemModulePortCount"), ("Juniper-System-MIB", "juniSystemModuleSerialNumber"), ("Juniper-System-MIB", "juniSystemModuleAssemblyPartNumber"), ("Juniper-System-MIB", "juniSystemModuleAssemblyRev"), ("Juniper-System-MIB", "juniSystemModulePhysicalIndex"), ("Juniper-System-MIB", "juniSystemModuleSoftwareSupport"), ("Juniper-System-MIB", "juniSystemModuleRedundancySupport"), ("Juniper-System-MIB", "juniSystemModuleLevelSpan"), ("Juniper-System-MIB", "juniSystemModuleSoftwareVersion"), ("Juniper-System-MIB", "juniSystemModuleCpuUtilPct"), ("Juniper-System-MIB", "juniSystemModuleMemUtilPct"), ("Juniper-System-MIB", "juniSystemModuleAdminStatus"), ("Juniper-System-MIB", "juniSystemModuleControl"), ("Juniper-System-MIB", "juniSystemModuleBootReleaseFile"), ("Juniper-System-MIB", "juniSystemModuleBootBackupReleaseFile"), ("Juniper-System-MIB", "juniSystemModuleCpuFiveSecUtilPct"), ("Juniper-System-MIB", "juniSystemModuleCpuOneMinAvgPct"), ("Juniper-System-MIB", "juniSystemModuleCpuFiveMinAvgPct"), ("Juniper-System-MIB", "juniSystemModuleRedundancyGroupId"), ("Juniper-System-MIB", "juniSystemModuleRedundancySpare"), ("Juniper-System-MIB", "juniSystemModuleRedundancyAssociatedSlot"), ("Juniper-System-MIB", "juniSystemModuleRedundancyLockout"), ("Juniper-System-MIB", "juniSystemModuleRedundancyRevertControl"), ("Juniper-System-MIB", "juniSystemModuleRedundancyRevertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemModuleGroup3 = juniSystemModuleGroup3.setStatus('current')
if mibBuilder.loadTexts: juniSystemModuleGroup3.setDescription('A collection of management objects that provide system module information in a Juniper E-series product.')
juniSystemIssuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 18)).setObjects(("Juniper-System-MIB", "juniSystemIssuState"), ("Juniper-System-MIB", "juniSystemIssuArmedReleaseFile"), ("Juniper-System-MIB", "juniSystemIssuRunningReleaseFile"), ("Juniper-System-MIB", "juniSystemIssuStatus"), ("Juniper-System-MIB", "juniSystemIssuCriteriaDescription"), ("Juniper-System-MIB", "juniSystemIssuCriteriaStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemIssuGroup = juniSystemIssuGroup.setStatus('current')
if mibBuilder.loadTexts: juniSystemIssuGroup.setDescription('A collection of management objects that provide ISSU related information in a Juniper E-series product.')
juniSystemNotificationGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 19)).setObjects(("Juniper-System-MIB", "juniSystemHighMemUtil"), ("Juniper-System-MIB", "juniSystemAbatedMemUtil"), ("Juniper-System-MIB", "juniSystemModuleOperStatusChange"), ("Juniper-System-MIB", "juniSystemPowerStatusChange"), ("Juniper-System-MIB", "juniSystemFanStatusChange"), ("Juniper-System-MIB", "juniSystemTempStatusChange"), ("Juniper-System-MIB", "juniSystemTempProtectionStatusChange"), ("Juniper-System-MIB", "juniSystemReloadCommand"), ("Juniper-System-MIB", "juniSystemUtilizationThreshold"), ("Juniper-System-MIB", "juniSystemIssuStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemNotificationGroup3 = juniSystemNotificationGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniSystemNotificationGroup3.setDescription('A collection of notifications for system events in a Juniper E-series product.')
juniSystemNotificationGroup4 = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 2, 2, 2, 20)).setObjects(("Juniper-System-MIB", "juniSystemHighMemUtil"), ("Juniper-System-MIB", "juniSystemAbatedMemUtil"), ("Juniper-System-MIB", "juniSystemModuleOperStatusChange"), ("Juniper-System-MIB", "juniSystemPowerStatusChange"), ("Juniper-System-MIB", "juniSystemFanStatusChange"), ("Juniper-System-MIB", "juniSystemTempStatusChange"), ("Juniper-System-MIB", "juniSystemTempProtectionStatusChange"), ("Juniper-System-MIB", "juniSystemReloadCommand"), ("Juniper-System-MIB", "juniSystemUtilizationThreshold"), ("Juniper-System-MIB", "juniSystemIssuStateChange"), ("Juniper-System-MIB", "juniSystemPortSfpTxMaxPowerThreshold"), ("Juniper-System-MIB", "juniSystemPortSfpTxMinPowerThreshold"), ("Juniper-System-MIB", "juniSystemPortSfpRxMaxPowerThreshold"), ("Juniper-System-MIB", "juniSystemPortSfpRxMinPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSystemNotificationGroup4 = juniSystemNotificationGroup4.setStatus('current')
if mibBuilder.loadTexts: juniSystemNotificationGroup4.setDescription('A collection of notifications for system events in a Juniper E-series product.')
mibBuilder.exportSymbols("Juniper-System-MIB", JuniSystemTimingSelector=JuniSystemTimingSelector, juniSystemPortIfIndex=juniSystemPortIfIndex, juniSystemNvsTable=juniSystemNvsTable, juniSystemCompliance4=juniSystemCompliance4, juniSystemUtilizationGroup2=juniSystemUtilizationGroup2, juniSystemModuleSoftwareTable=juniSystemModuleSoftwareTable, juniSystemSubsystemGroup=juniSystemSubsystemGroup, juniSystemModuleAssemblyRev=juniSystemModuleAssemblyRev, juniSystemUtilizationThresholdDirection=juniSystemUtilizationThresholdDirection, juniSystemIssuCriteriaStatus=juniSystemIssuCriteriaStatus, juniSystemMemUtilTrapEnable=juniSystemMemUtilTrapEnable, juniSystemModuleTable=juniSystemModuleTable, juniSystemTempProtectionHoldOffTime=juniSystemTempProtectionHoldOffTime, juniSystemNotificationGroup2=juniSystemNotificationGroup2, JuniSystemLocation=JuniSystemLocation, juniSystemGeneral=juniSystemGeneral, juniSystemModuleRedundancyTable=juniSystemModuleRedundancyTable, JuniSystemSlotLevel=JuniSystemSlotLevel, juniSystemTempValue=juniSystemTempValue, juniSystemFanStatusChange=juniSystemFanStatusChange, juniSystemModuleRedundancyLockout=juniSystemModuleRedundancyLockout, juniSystemPortEntry=juniSystemPortEntry, juniSystemCpuUtilizationInvokationPerSec=juniSystemCpuUtilizationInvokationPerSec, juniSystemPowerGroup=juniSystemPowerGroup, juniSystemPortPhysicalIndex=juniSystemPortPhysicalIndex, juniSystemTempPhysicalIndex=juniSystemTempPhysicalIndex, juniSystemCpuUtilizationPercentageRunningTime=juniSystemCpuUtilizationPercentageRunningTime, juniSystemUtilizationLocation=juniSystemUtilizationLocation, juniSystemModuleCpuFiveSecUtilPct=juniSystemModuleCpuFiveSecUtilPct, juniSystemModuleDescr=juniSystemModuleDescr, juniSystemModuleCurrentType=juniSystemModuleCurrentType, juniSystemPowerStatusChange=juniSystemPowerStatusChange, juniSystemBootConfigFile=juniSystemBootConfigFile, juniSystemCpuUtilizationFiveMinuteUtilization=juniSystemCpuUtilizationFiveMinuteUtilization, juniSystemPortSfpRxMinPowerThreshold=juniSystemPortSfpRxMinPowerThreshold, juniSystemFanIndex=juniSystemFanIndex, juniSystemFabricSpeed=juniSystemFabricSpeed, juniSystemIssuCriteriaTable=juniSystemIssuCriteriaTable, juniSystemReloadCommand=juniSystemReloadCommand, juniSystemBootReleaseFile=juniSystemBootReleaseFile, juniSystemModuleAdminStatus=juniSystemModuleAdminStatus, juniSystemModuleGroup2=juniSystemModuleGroup2, juniSystemUtilizationLocationType=juniSystemUtilizationLocationType, juniSystemCpuUtilizationEntry=juniSystemCpuUtilizationEntry, juniSystemModuleRedundancySupport=juniSystemModuleRedundancySupport, juniSystemModuleCpuUtilPct=juniSystemModuleCpuUtilPct, juniSystemCompliance8=juniSystemCompliance8, juniSystemUtilizationMaxCapacity=juniSystemUtilizationMaxCapacity, juniSystemSwBuildDate=juniSystemSwBuildDate, juniSystemTimingSelectorTable=juniSystemTimingSelectorTable, juniSystemCompliances=juniSystemCompliances, juniSystemIssuCriteriaEntry=juniSystemIssuCriteriaEntry, juniSystemTempIndex=juniSystemTempIndex, juniSystemNvsUtilPct=juniSystemNvsUtilPct, juniSystemModuleAssemblyPartNumber=juniSystemModuleAssemblyPartNumber, juniSystemMaxModulesPerSlot=juniSystemMaxModulesPerSlot, juniSystemTempProtectionHoldOffTimeRemaining=juniSystemTempProtectionHoldOffTimeRemaining, juniSystemMemUtilPct=juniSystemMemUtilPct, juniSystemModuleSlotSpan=juniSystemModuleSlotSpan, juniSystemIssuCriteriaIndex=juniSystemIssuCriteriaIndex, juniSystemBootAutoRevertTimeTolerance=juniSystemBootAutoRevertTimeTolerance, juniSystemIssuGroup=juniSystemIssuGroup, juniSystemUtilizationTable=juniSystemUtilizationTable, juniSystemUtilizationTrapEnable=juniSystemUtilizationTrapEnable, juniSystemPowerStatus=juniSystemPowerStatus, juniSystemTempStatusChange=juniSystemTempStatusChange, juniSystemSubsystemIndex=juniSystemSubsystemIndex, JuniSystemLocationType=JuniSystemLocationType, juniSystemUtilizationGroup=juniSystemUtilizationGroup, juniSystemModuleCpuOneMinAvgPct=juniSystemModuleCpuOneMinAvgPct, juniSystemModuleCpuFiveMinAvgPct=juniSystemModuleCpuFiveMinAvgPct, juniSystemTimingSelectorEntry=juniSystemTimingSelectorEntry, juniSystemIssuStateChange=juniSystemIssuStateChange, juniSystemBootForceBackupControl=juniSystemBootForceBackupControl, juniSystemSlotEntry=juniSystemSlotEntry, juniSystemModuleSoftwareSupport=juniSystemModuleSoftwareSupport, juniSystemAbatedMemUtilThreshold=juniSystemAbatedMemUtilThreshold, juniSystemCpuUtilizationAverageTimePerInvokation=juniSystemCpuUtilizationAverageTimePerInvokation, juniSystemCompliance2=juniSystemCompliance2, juniSystemUtilizationThreshold=juniSystemUtilizationThreshold, juniSystemMemKBytesCapacity=juniSystemMemKBytesCapacity, juniSystemSubsystemBootReleaseFile=juniSystemSubsystemBootReleaseFile, juniSystemNotificationGroup=juniSystemNotificationGroup, juniSystemSwVersion=juniSystemSwVersion, juniSystemModuleExpectedType=juniSystemModuleExpectedType, juniSystemModuleMemUtilPct=juniSystemModuleMemUtilPct, juniSystemModuleSerialNumber=juniSystemModuleSerialNumber, juniSystemPortTable=juniSystemPortTable, juniSystemCpuUtilizationFiveSecondUtilization=juniSystemCpuUtilizationFiveSecondUtilization, juniSystemReloadSlotNumber=juniSystemReloadSlotNumber, juniSystemHighMemUtilThreshold=juniSystemHighMemUtilThreshold, juniSystemSubsystemEntry=juniSystemSubsystemEntry, juniSystemModuleGroup=juniSystemModuleGroup, juniSystemModuleControl=juniSystemModuleControl, juniSystemModuleSoftwareVersion=juniSystemModuleSoftwareVersion, juniSystemModuleGroup3=juniSystemModuleGroup3, juniSystemGroups=juniSystemGroups, juniSystemFanTable=juniSystemFanTable, juniSystemMIB=juniSystemMIB, juniSystemCpuUtilizationTimeMark=juniSystemCpuUtilizationTimeMark, juniSystemTimingSourceType=juniSystemTimingSourceType, juniSystemTrap=juniSystemTrap, juniSystemNvsStatus=juniSystemNvsStatus, juniSystemCpuUtilizationTaskName=juniSystemCpuUtilizationTaskName, juniSystemUtilizationEntry=juniSystemUtilizationEntry, juniSystemNvsPhysicalIndex=juniSystemNvsPhysicalIndex, juniSystemTimingGroup=juniSystemTimingGroup, juniSystemNvsCapacity=juniSystemNvsCapacity, juniSystemModuleRedundancyEntry=juniSystemModuleRedundancyEntry, juniSystemModuleOperStatus=juniSystemModuleOperStatus, juniSystemPortSfpPowerThresholdIfIndex=juniSystemPortSfpPowerThresholdIfIndex, juniSystemSlotType=juniSystemSlotType, juniSystemCpuUtilizationOneMinuteUtilization=juniSystemCpuUtilizationOneMinuteUtilization, juniSystemRedundancyRevertTimeOfDay=juniSystemRedundancyRevertTimeOfDay, juniSystemOperTimingSource=juniSystemOperTimingSource, juniSystemNotificationObjectsGroup=juniSystemNotificationObjectsGroup, juniSystemPowerPhysicalIndex=juniSystemPowerPhysicalIndex, juniSystemTempProtectionStatusChange=juniSystemTempProtectionStatusChange, juniSystemPowerCount=juniSystemPowerCount, juniSystemUtilizationCurrentValue=juniSystemUtilizationCurrentValue, juniSystemPortNumber=juniSystemPortNumber, juniSystemSubsystemName=juniSystemSubsystemName, juniSystemModuleEntry=juniSystemModuleEntry, juniSystemModuleSoftwareEntry=juniSystemModuleSoftwareEntry, juniSystemTimingSourceIfIndex=juniSystemTimingSourceIfIndex, juniSystemTimingProtectedStatus=juniSystemTimingProtectedStatus, juniSystemRedundancyRevertControl=juniSystemRedundancyRevertControl, juniSystemUtilizationHoldDownTime=juniSystemUtilizationHoldDownTime, juniSystemObjects=juniSystemObjects, juniSystemModule=juniSystemModule, JuniSystemModuleType=JuniSystemModuleType, juniSystemMemCapacity=juniSystemMemCapacity, juniSystemTempEntry=juniSystemTempEntry, juniSystemPortSfpTxMinPowerThreshold=juniSystemPortSfpTxMinPowerThreshold, juniSystemUtilizationResourceType=juniSystemUtilizationResourceType, juniSystemMaxSlotNumber=juniSystemMaxSlotNumber, juniSystemNvsGroup=juniSystemNvsGroup, juniSystemFanStatus=juniSystemFanStatus, juniSystemNotificationGroup4=juniSystemNotificationGroup4, juniSystemTemperatureGroup=juniSystemTemperatureGroup, PYSNMP_MODULE_ID=juniSystemMIB, juniSystemSlotTable=juniSystemSlotTable, juniSystemSubsystemTable=juniSystemSubsystemTable, juniSystemPowerEntry=juniSystemPowerEntry, juniSystemTempProtectionStatus=juniSystemTempProtectionStatus, juniSystemCpuUtilizationInvoked=juniSystemCpuUtilizationInvoked, juniSystemTimingWorkingStatus=juniSystemTimingWorkingStatus, juniSystemBootAutoRevertCountTolerance=juniSystemBootAutoRevertCountTolerance, juniSystemTimingSourceLine=juniSystemTimingSourceLine, juniSystemTempStatus=juniSystemTempStatus, juniSystemSubsystem=juniSystemSubsystem, juniSystemPortSfpTxMaxPowerThreshold=juniSystemPortSfpTxMaxPowerThreshold, juniSystemModuleLevelSpan=juniSystemModuleLevelSpan, juniSystemCompliance5=juniSystemCompliance5, juniSystemNotificationGroup3=juniSystemNotificationGroup3, juniSystemModuleLastChange=juniSystemModuleLastChange, juniSystemCompliance3=juniSystemCompliance3, juniSystemTimingAutoUpgrade=juniSystemTimingAutoUpgrade, juniSystemConformance=juniSystemConformance, juniSystemNvsCount=juniSystemNvsCount, juniSystemSlotNumber=juniSystemSlotNumber, juniSystemCpuUtilizationTable=juniSystemCpuUtilizationTable, juniSystemFabricGroup=juniSystemFabricGroup, juniSystemGeneralGroup2=juniSystemGeneralGroup2, juniSystemBootBackupConfigControl=juniSystemBootBackupConfigControl, juniSystemModuleDisableReason=juniSystemModuleDisableReason, juniSystemSubsystemBootBackupReleaseFile=juniSystemSubsystemBootBackupReleaseFile, juniSystemBootBackupConfigFile=juniSystemBootBackupConfigFile, juniSystemSlotStatus=juniSystemSlotStatus, juniSystemModuleRedundancySpare=juniSystemModuleRedundancySpare, juniSystemUtilizationThresholdFalling=juniSystemUtilizationThresholdFalling, juniSystemCompliance7=juniSystemCompliance7, juniSystemCpuUtilizationNumberOfInstances=juniSystemCpuUtilizationNumberOfInstances, juniSystemModulePhysicalIndex=juniSystemModulePhysicalIndex, juniSystemBootBackupReleaseFile=juniSystemBootBackupReleaseFile, juniSystemModuleRedundancyGroupId=juniSystemModuleRedundancyGroupId, juniSystemHighMemUtil=juniSystemHighMemUtil, juniSystemCompliance=juniSystemCompliance, juniSystemNvs=juniSystemNvs, juniSystemModuleRedundancyRevertControl=juniSystemModuleRedundancyRevertControl, juniSystemPortSfpRxMaxPowerThreshold=juniSystemPortSfpRxMaxPowerThreshold, juniSystemSlotLevel=juniSystemSlotLevel, juniSystemIssuCriteriaDescription=juniSystemIssuCriteriaDescription, juniSystemModuleOperStatusChange=juniSystemModuleOperStatusChange, juniSystemFanEntry=juniSystemFanEntry, juniSystemTemperature=juniSystemTemperature, juniSystemModuleBootBackupReleaseFile=juniSystemModuleBootBackupReleaseFile, juniSystemTimingSelectorIndex=juniSystemTimingSelectorIndex, juniSystemUtilizationThresholdRising=juniSystemUtilizationThresholdRising, juniSystemPortGroup=juniSystemPortGroup, juniSystemPowerTable=juniSystemPowerTable, juniSystemFanCount=juniSystemFanCount, juniSystemTempCount=juniSystemTempCount, juniSystemModuleBootReleaseFile=juniSystemModuleBootReleaseFile, juniSystemBootAutoRevertControl=juniSystemBootAutoRevertControl, juniSystemAbatedMemUtil=juniSystemAbatedMemUtil, juniSystemPower=juniSystemPower, juniSystemBootConfigControl=juniSystemBootConfigControl, juniSystemIssuStatus=juniSystemIssuStatus, juniSystemFabricRev=juniSystemFabricRev, JuniSystemSlotType=JuniSystemSlotType, juniSystemFabric=juniSystemFabric, juniSystemModulePortCount=juniSystemModulePortCount, juniSystemModuleRedundancyRevertTime=juniSystemModuleRedundancyRevertTime, juniSystemModuleRedundancyAssociatedSlot=juniSystemModuleRedundancyAssociatedSlot, juniSystemNvsIndex=juniSystemNvsIndex, juniSystemNvsEntry=juniSystemNvsEntry, juniSystemUtilizationResourceSubType=juniSystemUtilizationResourceSubType, juniSystemIssuRunningReleaseFile=juniSystemIssuRunningReleaseFile, juniSystemGeneralGroup=juniSystemGeneralGroup, juniSystemCompliance6=juniSystemCompliance6, juniSystemAdminTimingSource=juniSystemAdminTimingSource, juniSystemCpuUtilizationTotalRunningTime=juniSystemCpuUtilizationTotalRunningTime, juniSystemIssu=juniSystemIssu, juniSystemPowerIndex=juniSystemPowerIndex, juniSystemIssuArmedReleaseFile=juniSystemIssuArmedReleaseFile, juniSystemFanPhysicalIndex=juniSystemFanPhysicalIndex, juniSystemPort=juniSystemPort, juniSystemPortSfpPowerThresholdValue=juniSystemPortSfpPowerThresholdValue, juniSystemTempTable=juniSystemTempTable, JuniSystemTaskName=JuniSystemTaskName, juniSystemIssuState=juniSystemIssuState, juniSystemTiming=juniSystemTiming, juniSystemUtilization=juniSystemUtilization)
