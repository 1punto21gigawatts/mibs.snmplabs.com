#
# PySNMP MIB module RBN-MPLS-L3VPN-STD-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-MPLS-L3VPN-STD-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
MplsL3VpnRouteDistinguisher, mplsL3VpnVrfName, MplsL3VpnRtType = mibBuilder.importSymbols("MPLS-L3VPN-STD-MIB", "MplsL3VpnRouteDistinguisher", "mplsL3VpnVrfName", "MplsL3VpnRtType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, Counter32, iso, MibIdentifier, Counter64, TimeTicks, NotificationType, Gauge32, Unsigned32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "Counter32", "iso", "MibIdentifier", "Counter64", "TimeTicks", "NotificationType", "Gauge32", "Unsigned32", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnMplsL3VpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 51))
rbnMplsL3VpnMIB.setRevisions(('2009-05-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnMplsL3VpnMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: rbnMplsL3VpnMIB.setLastUpdated('200905300000Z')
if mibBuilder.loadTexts: rbnMplsL3VpnMIB.setOrganization('RedBack Networks, Inc.')
if mibBuilder.loadTexts: rbnMplsL3VpnMIB.setContactInfo('RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnMplsL3VpnMIB.setDescription('This MIB contains managed object definitions for the Layer-3 Multiprotocol Label Switching Virtual Private Networks. This version of this MIB module extends RFC4382.')
rbnMplsL3VpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1))
rbnMplsL3VpnConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1))
rbnMplsL3VpnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 51, 2))
rbnMplsL3VpnVrfRTTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1), )
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTTable.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTTable.setDescription('This table specifies per-VRF route target association. Each entry identifies a connectivity policy supported as part of a VPN. rbnMplsL3VpnVrfRTTable is equivalent to mplsL3VpnVrfRTTable except for lexicographical ordering.')
rbnMplsL3VpnVrfRTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "RBN-MPLS-L3VPN-STD-EXT-MIB", "rbnMplsL3VpnVrfRTAddrFamily"), (0, "RBN-MPLS-L3VPN-STD-EXT-MIB", "rbnMplsL3VpnVrfRTType"), (0, "RBN-MPLS-L3VPN-STD-EXT-MIB", "rbnMplsL3VpnVrfRTIndex"))
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTEntry.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTEntry.setDescription('An entry in this table is created by an LSR for each route target configured for a VRF supporting a MPLS L3VPN instance. The indexing provides an ordering per-VRF instance. See [RFC4364] for a complete definition of a route target.')
rbnMplsL3VpnVrfRTAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTAddrFamily.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTAddrFamily.setDescription('The address family in which the route target is declared.')
rbnMplsL3VpnVrfRTType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1, 1, 2), MplsL3VpnRtType())
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTType.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTType.setDescription('The route target distribution type.')
rbnMplsL3VpnVrfRTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTIndex.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTIndex.setDescription('Auxiliary index for route targets configured for a particular VRF.')
rbnMplsL3VpnVrfRT = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1, 1, 4), MplsL3VpnRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRT.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRT.setDescription('The route target distribution policy.')
rbnMplsL3VpnVrfRTDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 51, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTDescr.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnVrfRTDescr.setDescription('Description of the route target.')
rbnMplsL3VpnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 51, 2, 1))
rbnMplsL3VpnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 51, 2, 2))
rbnMplsL3VpnModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 51, 2, 2, 1)).setObjects(("RBN-MPLS-L3VPN-STD-EXT-MIB", "rbnMplsL3VpnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMplsL3VpnModuleCompliance = rbnMplsL3VpnModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnModuleCompliance.setDescription('Compliance statement for agents that provide support for the RBN-MPLS-L3VPN-STD-EXT-MIB')
rbnMplsL3VpnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 51, 2, 1, 1)).setObjects(("RBN-MPLS-L3VPN-STD-EXT-MIB", "rbnMplsL3VpnVrfRT"), ("RBN-MPLS-L3VPN-STD-EXT-MIB", "rbnMplsL3VpnVrfRTDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMplsL3VpnGroup = rbnMplsL3VpnGroup.setStatus('current')
if mibBuilder.loadTexts: rbnMplsL3VpnGroup.setDescription('Collection of scalar objects required for MPLS VPN management.')
mibBuilder.exportSymbols("RBN-MPLS-L3VPN-STD-EXT-MIB", rbnMplsL3VpnCompliances=rbnMplsL3VpnCompliances, rbnMplsL3VpnVrfRTDescr=rbnMplsL3VpnVrfRTDescr, rbnMplsL3VpnVrfRTIndex=rbnMplsL3VpnVrfRTIndex, rbnMplsL3VpnConformance=rbnMplsL3VpnConformance, rbnMplsL3VpnVrfRTType=rbnMplsL3VpnVrfRTType, rbnMplsL3VpnVrfRTAddrFamily=rbnMplsL3VpnVrfRTAddrFamily, rbnMplsL3VpnGroups=rbnMplsL3VpnGroups, rbnMplsL3VpnGroup=rbnMplsL3VpnGroup, rbnMplsL3VpnMIB=rbnMplsL3VpnMIB, rbnMplsL3VpnObjects=rbnMplsL3VpnObjects, PYSNMP_MODULE_ID=rbnMplsL3VpnMIB, rbnMplsL3VpnConf=rbnMplsL3VpnConf, rbnMplsL3VpnVrfRTTable=rbnMplsL3VpnVrfRTTable, rbnMplsL3VpnVrfRT=rbnMplsL3VpnVrfRT, rbnMplsL3VpnVrfRTEntry=rbnMplsL3VpnVrfRTEntry, rbnMplsL3VpnModuleCompliance=rbnMplsL3VpnModuleCompliance)
